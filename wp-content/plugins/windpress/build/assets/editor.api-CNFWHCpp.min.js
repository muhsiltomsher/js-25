var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
import { __export as e, __require as t } from "./chunk-GxRd6SvM.min.js";
import { __vitePreload as n } from "./preload-helper-DApxheAR.min.js";
import { Buffer as r, init_dist$1 as i } from "./dist-BSmntxBi.min.js";
import { init_dist$2 as a, process$1 as o } from "./dist-Doa7WVF-.min.js";
let H, CY, ep, xm, jI, WF, hl, Dr, gU, BA, xr, mi, z9, gi, DU, D_, gD, JQ, g3, L, K, no, lp, Ua, Mp, Ep, WQ, P1, _U, gR, j$, p$, A0, OP, _k, pl, tl, KR, c5, pd, j, W3, A, Ja, Ka, bD, uD, qZ, dr, Nj, Fm, Lm, Pm, $, Um, yn, pr, v9, y9, Rf, B9, N, o1, M, Zd, IE, B, MH, Dg, IU, $a, T9, LO, RO, LE, NE, Q_, kM, hJ, gJ, Qy, L8, BK, PU, mD, Ha, pD, zA, bY, bj, WJ, Zf, cp, ug, qp, jE, AE, cx, k6, uM, eL, Nx, OE, Jf, ME, sM, i_, Ix, Ob, _g, IG, wm, nL, hR, rL, gm, Qf, ux, vD, cM, BH, $x, wJ, nI, Cm, $f, Eb, Vb, _M, IM, HK, Dk, GQ, bh, $_, ro, Wa, so, NG, OM, _c, jG, AG, IH, It, Ai, V9, Nc, _D, H9, JK, sm, G_, dz, us, C_, sX, G, CA, Rt, IF, IA, vk, q9, tL, J9, TI, hm, bm, vm, Sg, gH, _H, xf, E$, Mm, Im, Br, eo, to, EA, Et, bP, GU, Z_, Jg, si, ge, Af, U9, P, N$, lM, jM, AM, MM, Xy, W9, F, U, Vr, kU, am, pX, b$, w$, x$, H_, Sj, cl, eW, Su, cD, cv, Ga, G9, Ma, K9, np, q_, lx, U$, On, qa, Vv, oW, sW, j3, Hc, Kc, Gr, Gh, rp, ym, Qa, EZ, gM, oz, Bv, Rv, aH, b9, EI, sp, ol, WH, PM, X9, Vx, ao, C1, xa, zt, _v, Y9, Ah, mJ, pJ, TM, OU, RE, rI, ad, O$, k$, NK, kE, HG, x8, JG, XG, vC, z, nd, td, JA, bO, V, P3, Pf, H3, ie, q, De, em, Ee, RN, QN, $N, nP, ck, la, sk, d, J8, _i, Ax, Zu, v, zr, Rs, zs, ks, le, js, Zz, iP, Qs, sc, _C, Hx, AI, CI, Hd, _l, Xc, Xf, FP, xO, Or, Pd, lh, je, hI, Ok, pI, gI, dI, Y, YN, qN, gP, KN, GN, JN, b6, S6, C6, T6, g6, _6, x6, w6, uk, ca, UN, il, Rr, S, Z9, BC, DC, Tj, NC, MC, KC, qC, YC, JC, XC, OC, ZC, QC, RC, LC, tw, ew, aw, iw, rw, nw, VC, WC, IC, FC, kC, jC, L9, l, tN, gs, ak, lk, Av, Mv, Tv, al, Es, dC, ps, A9, M9, zO, HO, jd, Od, Za, RP, dd, w9, _Q, ud, PP, gd, L$, J$, hD, Z$, Ds, _I, X_, I9, Dd, TA, md, xd, vd, R, RL, m, wf, lS, Mu, ff, hC, Cr, qn, tT, $w, nT, Xw, Qw, Zw, kd, Sd, ec, br, x9, Bb, we, S9, Lr, yk, yM, ok, b, ds, Sc, Oe, Gd, zb, Bs, M6, pm, bt, ht, kt, YF, Ya, Vs, Ps, E, bk, B4, V4, z4, gt, x, be, ve, vM, DM, _e, Ce, Fs, _t, mt, eN, $M, dk, Ct, Q9, Os, AR, kR, CR, tE, eE, T, Ke, os, Iv, _P, GD, UD, Cu, wu, KD, fO, Hw, Uw, Ie, hc, vR, DA, OA, de, A8, q8, oP, dP, lP, VN, gr, _r, iC, LA, HD, rk, Lw, BL, Rw, xz, TE, CE, wE, p, Zc, M8, N8, I6, mP, Sm, J, zm, W, Hm, EY, iJ, Vm, Rm, Bm, bg, qb, pk, Ud, jD, AD, Gk, _X, af, pe, od, id, VS, da, uf, sx, ov, df, hd, ws, Ts, YA, QO, xs, nN, zN, Tf, Hb, rl, ap, k, Xx, SM, tf, FN, rC, _s, Jn, qK, SP, xw, uJ, bw;
let __tla = (async () => {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2, _t2, _u2, _v2, _w2, _x2, _y2, _z2, _A2, _B2, _C2, _D2, _E2, _F2, _G2, _H2, _I2, _J2, _K2, _L2, _M2, _N2, _O2, _P2, _Q2, _R2, _S2, _T2, _U2, _V2, _W2, _X2, _Y2, _Z2, __2, _$2, _aa, _ba, _ca, _da, _ea, _fa, _ga, _ha, _ia, _ja, _ka, _la, _ma, _na, _oa, _pa, _qa, _ra, _sa, _ta, _ua, _va, _wa, _xa, _ya, _za, _Aa, _Ba, _Ca, _Da, _Ea, _Fa, _Ga, _Ha, _Ia, _Ja, _Ka, _La, _Ma, _Na, _Oa, _Pa, _Qa, _Ra, _Sa, _Ta, _Ua, _Va, _Wa, _Xa, _Ya, _Za, __a, _$a, _ab, _bb, _cb, _db, _eb, _fb, _gb, _hb, _ib, _jb, _kb, _lb, _mb, _nb, _ob, _pb, _qb, _rb;
  function s(e10, t10 = 0) {
    return e10[e10.length - (1 + t10)];
  }
  function c(e10) {
    if (e10.length === 0) throw Error(`Invalid tail call`);
    return [
      e10.slice(0, e10.length - 1),
      e10[e10.length - 1]
    ];
  }
  l = function(e10, t10, n10 = (e11, t11) => e11 === t11) {
    if (e10 === t10) return true;
    if (!e10 || !t10 || e10.length !== t10.length) return false;
    for (let r10 = 0, i10 = e10.length; r10 < i10; r10++) if (!n10(e10[r10], t10[r10])) return false;
    return true;
  };
  function u(e10, t10) {
    let n10 = e10.length - 1;
    t10 < n10 && (e10[t10] = e10[n10]), e10.pop();
  }
  d = function(e10, t10, n10) {
    return f(e10.length, (r10) => n10(e10[r10], t10));
  };
  function f(e10, t10) {
    let n10 = 0, r10 = e10 - 1;
    for (; n10 <= r10; ) {
      let e11 = (n10 + r10) / 2 | 0, i10 = t10(e11);
      if (i10 < 0) n10 = e11 + 1;
      else if (i10 > 0) r10 = e11 - 1;
      else return e11;
    }
    return -(n10 + 1);
  }
  p = function(e10, t10, n10) {
    if (e10 |= 0, e10 >= t10.length) throw TypeError(`invalid index`);
    let r10 = t10[Math.floor(t10.length * Math.random())], i10 = [], a10 = [], o10 = [];
    for (let e11 of t10) {
      let t11 = n10(e11, r10);
      t11 < 0 ? i10.push(e11) : t11 > 0 ? a10.push(e11) : o10.push(e11);
    }
    return e10 < i10.length ? p(e10, i10, n10) : e10 < i10.length + o10.length ? o10[0] : p(e10 - (i10.length + o10.length), a10, n10);
  };
  m = function(e10, t10) {
    let n10 = [], r10;
    for (let i10 of e10.slice(0).sort(t10)) !r10 || t10(r10[0], i10) !== 0 ? (r10 = [
      i10
    ], n10.push(r10)) : r10.push(i10);
    return n10;
  };
  function* h(e10, t10) {
    let n10, r10;
    for (let i10 of e10) r10 !== void 0 && t10(r10, i10) ? n10.push(i10) : (n10 && (yield n10), n10 = [
      i10
    ]), r10 = i10;
    n10 && (yield n10);
  }
  function g(e10, t10) {
    for (let n10 = 0; n10 <= e10.length; n10++) t10(n10 === 0 ? void 0 : e10[n10 - 1], n10 === e10.length ? void 0 : e10[n10]);
  }
  function _(e10, t10) {
    for (let n10 = 0; n10 < e10.length; n10++) t10(n10 === 0 ? void 0 : e10[n10 - 1], e10[n10], n10 + 1 === e10.length ? void 0 : e10[n10 + 1]);
  }
  v = function(e10) {
    return e10.filter((e11) => !!e11);
  };
  function y(e10) {
    let t10 = 0;
    for (let n10 = 0; n10 < e10.length; n10++) e10[n10] && (e10[t10] = e10[n10], t10 += 1);
    e10.length = t10;
  }
  b = function(e10) {
    return !Array.isArray(e10) || e10.length === 0;
  };
  x = function(e10) {
    return Array.isArray(e10) && e10.length > 0;
  };
  S = function(e10, t10 = (e11) => e11) {
    let n10 = /* @__PURE__ */ new Set();
    return e10.filter((e11) => {
      let r10 = t10(e11);
      return n10.has(r10) ? false : (n10.add(r10), true);
    });
  };
  function C(e10, t10) {
    return e10.length > 0 ? e10[0] : t10;
  }
  function w(e10, t10) {
    let n10 = typeof t10 == `number` ? e10 : 0;
    typeof t10 == `number` ? n10 = e10 : (n10 = 0, t10 = e10);
    let r10 = [];
    if (n10 <= t10) for (let e11 = n10; e11 < t10; e11++) r10.push(e11);
    else for (let e11 = n10; e11 > t10; e11--) r10.push(e11);
    return r10;
  }
  function ee(e10, t10, n10) {
    let r10 = e10.slice(0, t10), i10 = e10.slice(t10);
    return r10.concat(n10, i10);
  }
  function te(e10, t10) {
    let n10 = e10.indexOf(t10);
    n10 > -1 && (e10.splice(n10, 1), e10.unshift(t10));
  }
  function ne(e10, t10) {
    let n10 = e10.indexOf(t10);
    n10 > -1 && (e10.splice(n10, 1), e10.push(t10));
  }
  function re(e10, t10) {
    for (let n10 of t10) e10.push(n10);
  }
  ie = function(e10) {
    return Array.isArray(e10) ? e10 : [
      e10
    ];
  };
  function ae(e10, t10, n10) {
    let r10 = se(e10, t10), i10 = e10.length, a10 = n10.length;
    e10.length = i10 + a10;
    for (let t11 = i10 - 1; t11 >= r10; t11--) e10[t11 + a10] = e10[t11];
    for (let t11 = 0; t11 < a10; t11++) e10[t11 + r10] = n10[t11];
  }
  function oe(e10, t10, n10, r10) {
    let i10 = se(e10, t10), a10 = e10.splice(i10, n10);
    return a10 === void 0 && (a10 = []), ae(e10, i10, r10), a10;
  }
  function se(e10, t10) {
    return t10 < 0 ? Math.max(t10 + e10.length, 0) : Math.min(t10, e10.length);
  }
  var ce;
  (function(e10) {
    function t10(e11) {
      return e11 < 0;
    }
    e10.isLessThan = t10;
    function n10(e11) {
      return e11 <= 0;
    }
    e10.isLessThanOrEqual = n10;
    function r10(e11) {
      return e11 > 0;
    }
    e10.isGreaterThan = r10;
    function i10(e11) {
      return e11 === 0;
    }
    e10.isNeitherLessOrGreaterThan = i10, e10.greaterThan = 1, e10.lessThan = -1, e10.neitherLessOrGreaterThan = 0;
  })(ce || (ce = {}));
  le = function(e10, t10) {
    return (n10, r10) => t10(e10(n10), e10(r10));
  };
  function ue(...e10) {
    return (t10, n10) => {
      for (let r10 of e10) {
        let e11 = r10(t10, n10);
        if (!ce.isNeitherLessOrGreaterThan(e11)) return e11;
      }
      return ce.neitherLessOrGreaterThan;
    };
  }
  let fe;
  de = (e10, t10) => e10 - t10;
  fe = (e10, t10) => de(e10 ? 1 : 0, t10 ? 1 : 0);
  pe = function(e10) {
    return (t10, n10) => -e10(t10, n10);
  };
  let me, he;
  me = class {
    constructor(e10) {
      this.items = e10, this.firstIdx = 0, this.lastIdx = this.items.length - 1;
    }
    get length() {
      return this.lastIdx - this.firstIdx + 1;
    }
    takeWhile(e10) {
      let t10 = this.firstIdx;
      for (; t10 < this.items.length && e10(this.items[t10]); ) t10++;
      let n10 = t10 === this.firstIdx ? null : this.items.slice(this.firstIdx, t10);
      return this.firstIdx = t10, n10;
    }
    takeFromEndWhile(e10) {
      let t10 = this.lastIdx;
      for (; t10 >= 0 && e10(this.items[t10]); ) t10--;
      let n10 = t10 === this.lastIdx ? null : this.items.slice(t10 + 1, this.lastIdx + 1);
      return this.lastIdx = t10, n10;
    }
    peek() {
      if (this.length !== 0) return this.items[this.firstIdx];
    }
    dequeue() {
      let e10 = this.items[this.firstIdx];
      return this.firstIdx++, e10;
    }
    takeCount(e10) {
      let t10 = this.items.slice(this.firstIdx, this.firstIdx + e10);
      return this.firstIdx += e10, t10;
    }
  };
  he = (_a2 = class {
    constructor(e10) {
      this.iterate = e10;
    }
    toArray() {
      let e10 = [];
      return this.iterate((t10) => (e10.push(t10), true)), e10;
    }
    filter(t10) {
      return new _a2((e10) => this.iterate((n10) => t10(n10) ? e10(n10) : true));
    }
    map(t10) {
      return new _a2((e10) => this.iterate((n10) => e10(t10(n10))));
    }
    findLast(e10) {
      let t10;
      return this.iterate((n10) => (e10(n10) && (t10 = n10), true)), t10;
    }
    findLastMaxBy(e10) {
      let t10, n10 = true;
      return this.iterate((r10) => ((n10 || ce.isGreaterThan(e10(r10, t10))) && (n10 = false, t10 = r10), true)), t10;
    }
  }, _a2.empty = new _a2((e10) => {
  }), _a2);
  ge = class e10 {
    constructor(e11) {
      this._indexMap = e11;
    }
    static createSortPermutation(t10, n10) {
      let r10 = Array.from(t10.keys()).sort((e11, r11) => n10(t10[e11], t10[r11]));
      return new e10(r10);
    }
    apply(e11) {
      return e11.map((t10, n10) => e11[this._indexMap[n10]]);
    }
    inverse() {
      let t10 = this._indexMap.slice();
      for (let e11 = 0; e11 < this._indexMap.length; e11++) t10[this._indexMap[e11]] = e11;
      return new e10(t10);
    }
  };
  _e = function(e10) {
    return typeof e10 == `string`;
  };
  ve = function(e10) {
    return typeof e10 == `object` && !!e10 && !Array.isArray(e10) && !(e10 instanceof RegExp) && !(e10 instanceof Date);
  };
  function ye(e10) {
    let t10 = Object.getPrototypeOf(Uint8Array);
    return typeof e10 == `object` && e10 instanceof t10;
  }
  be = function(e10) {
    return typeof e10 == `number` && !isNaN(e10);
  };
  function xe(e10) {
    return !!e10 && typeof e10[Symbol.iterator] == `function`;
  }
  function Se(e10) {
    return e10 === true || e10 === false;
  }
  Ce = function(e10) {
    return e10 === void 0;
  };
  we = function(e10) {
    return !Te(e10);
  };
  function Te(e10) {
    return Ce(e10) || e10 === null;
  }
  Ee = function(e10, t10) {
    if (!e10) throw Error(t10 ? `Unexpected type, expected '${t10}'` : `Unexpected type`);
  };
  De = function(e10) {
    if (Te(e10)) throw Error(`Assertion Failed: argument is undefined or null`);
    return e10;
  };
  Oe = function(e10) {
    return typeof e10 == `function`;
  };
  function ke(e10, t10) {
    let n10 = Math.min(e10.length, t10.length);
    for (let r10 = 0; r10 < n10; r10++) Ae(e10[r10], t10[r10]);
  }
  function Ae(e10, t10) {
    if (_e(t10)) {
      if (typeof e10 !== t10) throw Error(`argument does not match constraint: typeof ${t10}`);
    } else if (Oe(t10)) {
      try {
        if (e10 instanceof t10) return;
      } catch {
      }
      if (!Te(e10) && e10.constructor === t10 || t10.length === 1 && t10.call(void 0, e10) === true) return;
      throw Error(`argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true`);
    }
  }
  je = function(e10) {
    if (!e10 || typeof e10 != `object` || e10 instanceof RegExp) return e10;
    let t10 = Array.isArray(e10) ? [] : {};
    return Object.entries(e10).forEach(([e11, n10]) => {
      t10[e11] = n10 && typeof n10 == `object` ? je(n10) : n10;
    }), t10;
  };
  function Me(e10) {
    if (!e10 || typeof e10 != `object`) return e10;
    let t10 = [
      e10
    ];
    for (; t10.length > 0; ) {
      let e11 = t10.shift();
      for (let n10 in Object.freeze(e11), e11) if (Ne.call(e11, n10)) {
        let r10 = e11[n10];
        typeof r10 == `object` && !Object.isFrozen(r10) && !ye(r10) && t10.push(r10);
      }
    }
    return e10;
  }
  const Ne = Object.prototype.hasOwnProperty;
  function Pe(e10, t10) {
    return Fe(e10, t10, /* @__PURE__ */ new Set());
  }
  function Fe(e10, t10, n10) {
    if (Te(e10)) return e10;
    let r10 = t10(e10);
    if (r10 !== void 0) return r10;
    if (Array.isArray(e10)) {
      let r11 = [];
      for (let i10 of e10) r11.push(Fe(i10, t10, n10));
      return r11;
    }
    if (ve(e10)) {
      if (n10.has(e10)) throw Error(`Cannot clone recursive data-structure`);
      n10.add(e10);
      let r11 = {};
      for (let i10 in e10) Ne.call(e10, i10) && (r11[i10] = Fe(e10[i10], t10, n10));
      return n10.delete(e10), r11;
    }
    return e10;
  }
  Ie = function(e10, t10, n10 = true) {
    return ve(e10) ? (ve(t10) && Object.keys(t10).forEach((r10) => {
      r10 in e10 ? n10 && (ve(e10[r10]) && ve(t10[r10]) ? Ie(e10[r10], t10[r10], n10) : e10[r10] = t10[r10]) : e10[r10] = t10[r10];
    }), e10) : t10;
  };
  function Le(e10, t10) {
    if (e10 === t10) return true;
    if (e10 == null || t10 == null || typeof e10 != typeof t10 || typeof e10 != `object` || Array.isArray(e10) !== Array.isArray(t10)) return false;
    let n10, r10;
    if (Array.isArray(e10)) {
      if (e10.length !== t10.length) return false;
      for (n10 = 0; n10 < e10.length; n10++) if (!Le(e10[n10], t10[n10])) return false;
    } else {
      let i10 = [];
      for (r10 in e10) i10.push(r10);
      i10.sort();
      let a10 = [];
      for (r10 in t10) a10.push(r10);
      if (a10.sort(), !Le(i10, a10)) return false;
      for (n10 = 0; n10 < i10.length; n10++) if (!Le(e10[i10[n10]], t10[i10[n10]])) return false;
    }
    return true;
  }
  function Re(e10) {
    let t10 = [];
    for (; Object.prototype !== e10; ) t10 = t10.concat(Object.getOwnPropertyNames(e10)), e10 = Object.getPrototypeOf(e10);
    return t10;
  }
  function ze(e10) {
    let t10 = [];
    for (let n10 of Re(e10)) typeof e10[n10] == `function` && t10.push(n10);
    return t10;
  }
  function Be(e10, t10) {
    let n10 = (e11) => function() {
      let n11 = Array.prototype.slice.call(arguments, 0);
      return t10(e11, n11);
    }, r10 = {};
    for (let t11 of e10) r10[t11] = n10(t11);
    return r10;
  }
  function Ve() {
    return globalThis._VSCODE_NLS_MESSAGES;
  }
  function He() {
    return globalThis._VSCODE_NLS_LANGUAGE;
  }
  const Ue = He() === `pseudo` || typeof document < `u` && document.location && document.location.hash.indexOf(`pseudo=true`) >= 0;
  function We(e10, t10) {
    let n10;
    return n10 = t10.length === 0 ? e10 : e10.replace(/\{(\d+)\}/g, (e11, n11) => {
      let r10 = n11[0], i10 = t10[r10], a10 = e11;
      return typeof i10 == `string` ? a10 = i10 : (typeof i10 == `number` || typeof i10 == `boolean` || i10 == null) && (a10 = String(i10)), a10;
    }), Ue && (n10 = `\uFF3B` + n10.replace(/[aouei]/g, `$&$&`) + `\uFF3D`), n10;
  }
  T = function(e10, t10, ...n10) {
    return We(typeof e10 == `number` ? Ge(e10, t10) : t10, n10);
  };
  function Ge(e10, t10) {
    var _a3;
    let n10 = (_a3 = Ve()) == null ? void 0 : _a3[e10];
    if (typeof n10 != `string`) {
      if (typeof t10 == `string`) return t10;
      throw Error(`!!! NLS MISSING: ${e10} !!!`);
    }
    return n10;
  }
  Ke = function(e10, t10, ...n10) {
    let r10;
    r10 = typeof e10 == `number` ? Ge(e10, t10) : t10;
    let i10 = We(r10, n10);
    return {
      value: i10,
      original: t10 === r10 ? i10 : We(t10, n10)
    };
  };
  a();
  const qe = `en`;
  let Je = false, Ye = false, Xe = false, Ze = false, Qe = false, $e = false, et = false, tt = false, nt = false, rt = false, it, at = qe, ot = qe, st, ct;
  const lt = globalThis;
  let ut;
  lt.vscode !== void 0 && lt.vscode.process !== void 0 ? ut = lt.vscode.process : o !== void 0 && typeof ((_c2 = (_b2 = o) == null ? void 0 : _b2.versions) == null ? void 0 : _c2.node) == `string` && (ut = o);
  const dt = typeof ((_d2 = ut == null ? void 0 : ut.versions) == null ? void 0 : _d2.electron) == `string`, ft = dt && (ut == null ? void 0 : ut.type) === `renderer`;
  if (typeof ut == `object`) {
    Je = ut.platform === `win32`, Ye = ut.platform === `darwin`, Xe = ut.platform === `linux`, Ze = Xe && !!ut.env.SNAP && !!ut.env.SNAP_REVISION, et = dt, nt = !!ut.env.CI || !!ut.env.BUILD_ARTIFACTSTAGINGDIRECTORY, it = qe, at = qe;
    let e10 = ut.env.VSCODE_NLS_CONFIG;
    if (e10) try {
      let t10 = JSON.parse(e10);
      it = t10.userLocale, ot = t10.osLocale, at = t10.resolvedLanguage || qe, st = (_e2 = t10.languagePack) == null ? void 0 : _e2.translationsConfigFile;
    } catch {
    }
    Qe = true;
  } else typeof navigator == `object` && !ft ? (ct = navigator.userAgent, Je = ct.indexOf(`Windows`) >= 0, Ye = ct.indexOf(`Macintosh`) >= 0, tt = (ct.indexOf(`Macintosh`) >= 0 || ct.indexOf(`iPad`) >= 0 || ct.indexOf(`iPhone`) >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0, Xe = ct.indexOf(`Linux`) >= 0, rt = (ct == null ? void 0 : ct.indexOf(`Mobi`)) >= 0, $e = true, at = He() || qe, it = navigator.language.toLowerCase(), ot = it) : console.error(`Unable to resolve platform.`);
  let pt = 0;
  Ye ? pt = 1 : Je ? pt = 3 : Xe && (pt = 2);
  let vt, yt, xt, St, wt, Tt;
  mt = Je;
  E = Ye;
  ht = Xe;
  gt = Qe;
  _t = $e;
  vt = $e && typeof lt.importScripts == `function`;
  yt = vt ? lt.origin : void 0;
  bt = tt;
  xt = rt;
  St = ct;
  Ct = at;
  wt = typeof lt.postMessage == `function` && !lt.importScripts;
  Tt = (() => {
    if (wt) {
      let e10 = [];
      lt.addEventListener(`message`, (t11) => {
        if (t11.data && t11.data.vscodeScheduleAsyncWork) for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
          let r11 = e10[n10];
          if (r11.id === t11.data.vscodeScheduleAsyncWork) {
            e10.splice(n10, 1), r11.callback();
            return;
          }
        }
      });
      let t10 = 0;
      return (n10) => {
        let r10 = ++t10;
        e10.push({
          id: r10,
          callback: n10
        }), lt.postMessage({
          vscodeScheduleAsyncWork: r10
        }, `*`);
      };
    }
    return (e10) => setTimeout(e10);
  })();
  Et = Ye || tt ? 2 : Je ? 1 : 3;
  let Dt = true, Ot = false;
  kt = function() {
    if (!Ot) {
      Ot = true;
      let e10 = new Uint8Array(2);
      e10[0] = 1, e10[1] = 2;
      let t10 = new Uint16Array(e10.buffer);
      Dt = t10[0] === 513;
    }
    return Dt;
  };
  const At = !!(St && St.indexOf(`Chrome`) >= 0), jt = !!(St && St.indexOf(`Firefox`) >= 0), Mt = !!(!At && St && St.indexOf(`Safari`) >= 0), Nt = !!(St && St.indexOf(`Edg/`) >= 0), Pt = !!(St && St.indexOf(`Android`) >= 0), Ft = {
    tabSize: 4,
    indentSize: 4,
    insertSpaces: true,
    detectIndentation: true,
    trimAutoWhitespace: true,
    largeFileOptimizations: true,
    bracketPairColorizationOptions: {
      enabled: true,
      independentColorPoolPerBracketType: false
    }
  };
  (function(e10) {
    function t10(e11) {
      return e11 && typeof e11 == `object` && typeof e11[Symbol.iterator] == `function`;
    }
    e10.is = t10;
    let n10 = Object.freeze([]);
    function r10() {
      return n10;
    }
    e10.empty = r10;
    function* i10(e11) {
      yield e11;
    }
    e10.single = i10;
    function a10(e11) {
      return t10(e11) ? e11 : i10(e11);
    }
    e10.wrap = a10;
    function o10(e11) {
      return e11 || n10;
    }
    e10.from = o10;
    function* s10(e11) {
      for (let t11 = e11.length - 1; t11 >= 0; t11--) yield e11[t11];
    }
    e10.reverse = s10;
    function c10(e11) {
      return !e11 || e11[Symbol.iterator]().next().done === true;
    }
    e10.isEmpty = c10;
    function l10(e11) {
      return e11[Symbol.iterator]().next().value;
    }
    e10.first = l10;
    function u10(e11, t11) {
      let n11 = 0;
      for (let r11 of e11) if (t11(r11, n11++)) return true;
      return false;
    }
    e10.some = u10;
    function d10(e11, t11) {
      for (let n11 of e11) if (t11(n11)) return n11;
    }
    e10.find = d10;
    function* f10(e11, t11) {
      for (let n11 of e11) t11(n11) && (yield n11);
    }
    e10.filter = f10;
    function* p10(e11, t11) {
      let n11 = 0;
      for (let r11 of e11) yield t11(r11, n11++);
    }
    e10.map = p10;
    function* m10(e11, t11) {
      let n11 = 0;
      for (let r11 of e11) yield* t11(r11, n11++);
    }
    e10.flatMap = m10;
    function* h10(...e11) {
      for (let t11 of e11) yield* t11;
    }
    e10.concat = h10;
    function g10(e11, t11, n11) {
      let r11 = n11;
      for (let n12 of e11) r11 = t11(r11, n12);
      return r11;
    }
    e10.reduce = g10;
    function* _10(e11, t11, n11 = e11.length) {
      for (t11 < 0 && (t11 += e11.length), n11 < 0 ? n11 += e11.length : n11 > e11.length && (n11 = e11.length); t11 < n11; t11++) yield e11[t11];
    }
    e10.slice = _10;
    function v10(t11, n11 = 1 / 0) {
      let r11 = [];
      if (n11 === 0) return [
        r11,
        t11
      ];
      let i11 = t11[Symbol.iterator]();
      for (let t12 = 0; t12 < n11; t12++) {
        let t13 = i11.next();
        if (t13.done) return [
          r11,
          e10.empty()
        ];
        r11.push(t13.value);
      }
      return [
        r11,
        {
          [Symbol.iterator]() {
            return i11;
          }
        }
      ];
    }
    e10.consume = v10;
    async function y10(e11) {
      let t11 = [];
      for await (let n11 of e11) t11.push(n11);
      return Promise.resolve(t11);
    }
    e10.asyncToArray = y10;
  })(It || (It = {}));
  let Lt;
  Lt = (_f2 = class {
    constructor(t10) {
      this.element = t10, this.next = _f2.Undefined, this.prev = _f2.Undefined;
    }
  }, _f2.Undefined = new _f2(void 0), _f2);
  Rt = class {
    constructor() {
      this._first = Lt.Undefined, this._last = Lt.Undefined, this._size = 0;
    }
    get size() {
      return this._size;
    }
    isEmpty() {
      return this._first === Lt.Undefined;
    }
    clear() {
      let e10 = this._first;
      for (; e10 !== Lt.Undefined; ) {
        let t10 = e10.next;
        e10.prev = Lt.Undefined, e10.next = Lt.Undefined, e10 = t10;
      }
      this._first = Lt.Undefined, this._last = Lt.Undefined, this._size = 0;
    }
    unshift(e10) {
      return this._insert(e10, false);
    }
    push(e10) {
      return this._insert(e10, true);
    }
    _insert(e10, t10) {
      let n10 = new Lt(e10);
      if (this._first === Lt.Undefined) this._first = n10, this._last = n10;
      else if (t10) {
        let e11 = this._last;
        this._last = n10, n10.prev = e11, e11.next = n10;
      } else {
        let e11 = this._first;
        this._first = n10, n10.next = e11, e11.prev = n10;
      }
      this._size += 1;
      let r10 = false;
      return () => {
        r10 || (r10 = true, this._remove(n10));
      };
    }
    shift() {
      if (this._first !== Lt.Undefined) {
        let e10 = this._first.element;
        return this._remove(this._first), e10;
      }
    }
    pop() {
      if (this._last !== Lt.Undefined) {
        let e10 = this._last.element;
        return this._remove(this._last), e10;
      }
    }
    _remove(e10) {
      if (e10.prev !== Lt.Undefined && e10.next !== Lt.Undefined) {
        let t10 = e10.prev;
        t10.next = e10.next, e10.next.prev = t10;
      } else e10.prev === Lt.Undefined && e10.next === Lt.Undefined ? (this._first = Lt.Undefined, this._last = Lt.Undefined) : e10.next === Lt.Undefined ? (this._last = this._last.prev, this._last.next = Lt.Undefined) : e10.prev === Lt.Undefined && (this._first = this._first.next, this._first.prev = Lt.Undefined);
      --this._size;
    }
    *[Symbol.iterator]() {
      let e10 = this._first;
      for (; e10 !== Lt.Undefined; ) yield e10.element, e10 = e10.next;
    }
  };
  zt = `\`~!@#$%^&*()-=+[{]}\\|;:'",.<>/?`;
  function Bt(e10 = ``) {
    let t10 = `(-?\\d*\\.\\d\\w*)|([^`;
    for (let n10 of zt) {
      if (e10.indexOf(n10) >= 0) continue;
      t10 += `\\` + n10;
    }
    return t10 += `\\s]+)`, new RegExp(t10, `g`);
  }
  const Vt = Bt();
  function Ht(e10) {
    let t10 = Vt;
    if (e10 && e10 instanceof RegExp) if (e10.global) t10 = e10;
    else {
      let n10 = `g`;
      e10.ignoreCase && (n10 += `i`), e10.multiline && (n10 += `m`), e10.unicode && (n10 += `u`), t10 = new RegExp(e10.source, n10);
    }
    return t10.lastIndex = 0, t10;
  }
  const Ut = new Rt();
  Ut.unshift({
    maxLen: 1e3,
    windowSize: 15,
    timeBudget: 150
  });
  function Wt(e10, t10, n10, r10, i10) {
    if (t10 = Ht(t10), i10 || (i10 = It.first(Ut)), n10.length > i10.maxLen) {
      let a11 = e10 - i10.maxLen / 2;
      return a11 < 0 ? a11 = 0 : r10 += a11, n10 = n10.substring(a11, e10 + i10.maxLen / 2), Wt(e10, t10, n10, r10, i10);
    }
    let a10 = Date.now(), o10 = e10 - 1 - r10, s10 = -1, c10 = null;
    for (let e11 = 1; !(Date.now() - a10 >= i10.timeBudget); e11++) {
      let r11 = o10 - i10.windowSize * e11;
      t10.lastIndex = Math.max(0, r11);
      let a11 = Gt(t10, n10, o10, s10);
      if (!a11 && c10 || (c10 = a11, r11 <= 0)) break;
      s10 = r11;
    }
    if (c10) {
      let e11 = {
        word: c10[0],
        startColumn: r10 + 1 + c10.index,
        endColumn: r10 + 1 + c10.index + c10[0].length
      };
      return t10.lastIndex = 0, e11;
    }
    return null;
  }
  function Gt(e10, t10, n10, r10) {
    let i10;
    for (; i10 = e10.exec(t10); ) {
      let t11 = i10.index || 0;
      if (t11 <= n10 && e10.lastIndex >= n10) return i10;
      if (r10 > 0 && t11 > r10) return null;
    }
    return null;
  }
  const Kt = 8;
  var qt = class {
    constructor(e10) {
      this._values = e10;
    }
    hasChanged(e10) {
      return this._values[e10];
    }
  }, Jt = class {
    constructor() {
      this.stableMinimapLayoutInput = null, this.stableFitMaxMinimapScale = 0, this.stableFitRemainingWidth = 0;
    }
  }, Yt = class {
    constructor(e10, t10, n10, r10) {
      this.id = e10, this.name = t10, this.defaultValue = n10, this.schema = r10;
    }
    applyUpdate(e10, t10) {
      return Zt(e10, t10);
    }
    compute(e10, t10, n10) {
      return n10;
    }
  }, Xt = class {
    constructor(e10, t10) {
      this.newValue = e10, this.didChange = t10;
    }
  };
  function Zt(e10, t10) {
    if (typeof e10 != `object` || typeof t10 != `object` || !e10 || !t10) return new Xt(t10, e10 !== t10);
    if (Array.isArray(e10) || Array.isArray(t10)) {
      let n11 = Array.isArray(e10) && Array.isArray(t10) && l(e10, t10);
      return new Xt(t10, !n11);
    }
    let n10 = false;
    for (let r10 in t10) if (t10.hasOwnProperty(r10)) {
      let i10 = Zt(e10[r10], t10[r10]);
      i10.didChange && (e10[r10] = i10.newValue, n10 = true);
    }
    return new Xt(e10, n10);
  }
  var Qt = class {
    constructor(e10) {
      this.schema = void 0, this.id = e10, this.name = `_never_`, this.defaultValue = void 0;
    }
    applyUpdate(e10, t10) {
      return Zt(e10, t10);
    }
    validate(e10) {
      return this.defaultValue;
    }
  }, $t = class {
    constructor(e10, t10, n10, r10) {
      this.id = e10, this.name = t10, this.defaultValue = n10, this.schema = r10;
    }
    applyUpdate(e10, t10) {
      return Zt(e10, t10);
    }
    validate(e10) {
      return e10 === void 0 ? this.defaultValue : e10;
    }
    compute(e10, t10, n10) {
      return n10;
    }
  };
  function D(e10, t10) {
    return e10 === void 0 ? t10 : e10 === `false` ? false : !!e10;
  }
  var en = class extends $t {
    constructor(e10, t10, n10, r10 = void 0) {
      r10 !== void 0 && (r10.type = `boolean`, r10.default = n10), super(e10, t10, n10, r10);
    }
    validate(e10) {
      return D(e10, this.defaultValue);
    }
  };
  function tn(e10, t10, n10, r10) {
    if (e10 === void 0) return t10;
    let i10 = parseInt(e10, 10);
    return isNaN(i10) ? t10 : (i10 = Math.max(n10, i10), i10 = Math.min(r10, i10), i10 | 0);
  }
  var nn = class e10 extends $t {
    static clampedInt(e11, t10, n10, r10) {
      return tn(e11, t10, n10, r10);
    }
    constructor(e11, t10, n10, r10, i10, a10 = void 0) {
      a10 !== void 0 && (a10.type = `integer`, a10.default = n10, a10.minimum = r10, a10.maximum = i10), super(e11, t10, n10, a10), this.minimum = r10, this.maximum = i10;
    }
    validate(t10) {
      return e10.clampedInt(t10, this.defaultValue, this.minimum, this.maximum);
    }
  };
  function rn(e10, t10, n10, r10) {
    if (e10 === void 0) return t10;
    let i10 = an.float(e10, t10);
    return an.clamp(i10, n10, r10);
  }
  var an = class e10 extends $t {
    static clamp(e11, t10, n10) {
      return e11 < t10 ? t10 : e11 > n10 ? n10 : e11;
    }
    static float(e11, t10) {
      if (typeof e11 == `number`) return e11;
      if (e11 === void 0) return t10;
      let n10 = parseFloat(e11);
      return isNaN(n10) ? t10 : n10;
    }
    constructor(e11, t10, n10, r10, i10) {
      i10 !== void 0 && (i10.type = `number`, i10.default = n10), super(e11, t10, n10, i10), this.validationFn = r10;
    }
    validate(t10) {
      return this.validationFn(e10.float(t10, this.defaultValue));
    }
  }, on = class e10 extends $t {
    static string(e11, t10) {
      return typeof e11 == `string` ? e11 : t10;
    }
    constructor(e11, t10, n10, r10 = void 0) {
      r10 !== void 0 && (r10.type = `string`, r10.default = n10), super(e11, t10, n10, r10);
    }
    validate(t10) {
      return e10.string(t10, this.defaultValue);
    }
  };
  function sn(e10, t10, n10, r10) {
    return typeof e10 == `string` ? r10 && e10 in r10 ? r10[e10] : n10.indexOf(e10) === -1 ? t10 : e10 : t10;
  }
  var cn = class extends $t {
    constructor(e10, t10, n10, r10, i10 = void 0) {
      i10 !== void 0 && (i10.type = `string`, i10.enum = r10, i10.default = n10), super(e10, t10, n10, i10), this._allowedValues = r10;
    }
    validate(e10) {
      return sn(e10, this.defaultValue, this._allowedValues);
    }
  }, ln = class extends Yt {
    constructor(e10, t10, n10, r10, i10, a10, o10 = void 0) {
      o10 !== void 0 && (o10.type = `string`, o10.enum = i10, o10.default = r10), super(e10, t10, n10, o10), this._allowedValues = i10, this._convert = a10;
    }
    validate(e10) {
      return typeof e10 != `string` || this._allowedValues.indexOf(e10) === -1 ? this.defaultValue : this._convert(e10);
    }
  };
  function un(e10) {
    switch (e10) {
      case `none`:
        return 0;
      case `keep`:
        return 1;
      case `brackets`:
        return 2;
      case `advanced`:
        return 3;
      case `full`:
        return 4;
    }
  }
  var dn = class extends Yt {
    constructor() {
      super(2, `accessibilitySupport`, 0, {
        type: `string`,
        enum: [
          `auto`,
          `on`,
          `off`
        ],
        enumDescriptions: [
          T(`accessibilitySupport.auto`, `Use platform APIs to detect when a Screen Reader is attached.`),
          T(`accessibilitySupport.on`, `Optimize for usage with a Screen Reader.`),
          T(`accessibilitySupport.off`, `Assume a screen reader is not attached.`)
        ],
        default: `auto`,
        tags: [
          `accessibility`
        ],
        description: T(`accessibilitySupport`, `Controls if the UI should run in a mode where it is optimized for screen readers.`)
      });
    }
    validate(e10) {
      switch (e10) {
        case `auto`:
          return 0;
        case `off`:
          return 1;
        case `on`:
          return 2;
      }
      return this.defaultValue;
    }
    compute(e10, t10, n10) {
      return n10 === 0 ? e10.accessibilitySupport : n10;
    }
  }, fn = class extends Yt {
    constructor() {
      let e10 = {
        insertSpace: true,
        ignoreEmptyLines: true
      };
      super(23, `comments`, e10, {
        "editor.comments.insertSpace": {
          type: `boolean`,
          default: e10.insertSpace,
          description: T(`comments.insertSpace`, `Controls whether a space character is inserted when commenting.`)
        },
        "editor.comments.ignoreEmptyLines": {
          type: `boolean`,
          default: e10.ignoreEmptyLines,
          description: T(`comments.ignoreEmptyLines`, `Controls if empty lines should be ignored with toggle, add or remove actions for line comments.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        insertSpace: D(t10.insertSpace, this.defaultValue.insertSpace),
        ignoreEmptyLines: D(t10.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines)
      };
    }
  };
  function pn(e10) {
    switch (e10) {
      case `blink`:
        return 1;
      case `smooth`:
        return 2;
      case `phase`:
        return 3;
      case `expand`:
        return 4;
      case `solid`:
        return 5;
    }
  }
  var mn;
  (function(e10) {
    e10[e10.Line = 1] = `Line`, e10[e10.Block = 2] = `Block`, e10[e10.Underline = 3] = `Underline`, e10[e10.LineThin = 4] = `LineThin`, e10[e10.BlockOutline = 5] = `BlockOutline`, e10[e10.UnderlineThin = 6] = `UnderlineThin`;
  })(mn || (mn = {}));
  function hn(e10) {
    switch (e10) {
      case `line`:
        return mn.Line;
      case `block`:
        return mn.Block;
      case `underline`:
        return mn.Underline;
      case `line-thin`:
        return mn.LineThin;
      case `block-outline`:
        return mn.BlockOutline;
      case `underline-thin`:
        return mn.UnderlineThin;
    }
  }
  let gn, _n, vn, bn, xn, Sn, Cn, wn, Tn, En, Dn;
  gn = class extends Qt {
    constructor() {
      super(143);
    }
    compute(e10, t10, n10) {
      let r10 = [
        `monaco-editor`
      ];
      return t10.get(39) && r10.push(t10.get(39)), e10.extraEditorClassName && r10.push(e10.extraEditorClassName), t10.get(74) === `default` ? r10.push(`mouse-default`) : t10.get(74) === `copy` && r10.push(`mouse-copy`), t10.get(112) && r10.push(`showUnused`), t10.get(141) && r10.push(`showDeprecated`), r10.join(` `);
    }
  };
  _n = class extends en {
    constructor() {
      super(37, `emptySelectionClipboard`, true, {
        description: T(`emptySelectionClipboard`, `Controls whether copying without a selection copies the current line.`)
      });
    }
    compute(e10, t10, n10) {
      return n10 && e10.emptySelectionClipboard;
    }
  };
  vn = class extends Yt {
    constructor() {
      let e10 = {
        cursorMoveOnType: true,
        seedSearchStringFromSelection: `always`,
        autoFindInSelection: `never`,
        globalFindClipboard: false,
        addExtraSpaceOnTop: true,
        loop: true
      };
      super(41, `find`, e10, {
        "editor.find.cursorMoveOnType": {
          type: `boolean`,
          default: e10.cursorMoveOnType,
          description: T(`find.cursorMoveOnType`, `Controls whether the cursor should jump to find matches while typing.`)
        },
        "editor.find.seedSearchStringFromSelection": {
          type: `string`,
          enum: [
            `never`,
            `always`,
            `selection`
          ],
          default: e10.seedSearchStringFromSelection,
          enumDescriptions: [
            T(`editor.find.seedSearchStringFromSelection.never`, `Never seed search string from the editor selection.`),
            T(`editor.find.seedSearchStringFromSelection.always`, `Always seed search string from the editor selection, including word at cursor position.`),
            T(`editor.find.seedSearchStringFromSelection.selection`, `Only seed search string from the editor selection.`)
          ],
          description: T(`find.seedSearchStringFromSelection`, `Controls whether the search string in the Find Widget is seeded from the editor selection.`)
        },
        "editor.find.autoFindInSelection": {
          type: `string`,
          enum: [
            `never`,
            `always`,
            `multiline`
          ],
          default: e10.autoFindInSelection,
          enumDescriptions: [
            T(`editor.find.autoFindInSelection.never`, `Never turn on Find in Selection automatically (default).`),
            T(`editor.find.autoFindInSelection.always`, `Always turn on Find in Selection automatically.`),
            T(`editor.find.autoFindInSelection.multiline`, `Turn on Find in Selection automatically when multiple lines of content are selected.`)
          ],
          description: T(`find.autoFindInSelection`, `Controls the condition for turning on Find in Selection automatically.`)
        },
        "editor.find.globalFindClipboard": {
          type: `boolean`,
          default: e10.globalFindClipboard,
          description: T(`find.globalFindClipboard`, `Controls whether the Find Widget should read or modify the shared find clipboard on macOS.`),
          included: E
        },
        "editor.find.addExtraSpaceOnTop": {
          type: `boolean`,
          default: e10.addExtraSpaceOnTop,
          description: T(`find.addExtraSpaceOnTop`, `Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.`)
        },
        "editor.find.loop": {
          type: `boolean`,
          default: e10.loop,
          description: T(`find.loop`, `Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        cursorMoveOnType: D(t10.cursorMoveOnType, this.defaultValue.cursorMoveOnType),
        seedSearchStringFromSelection: typeof e10.seedSearchStringFromSelection == `boolean` ? e10.seedSearchStringFromSelection ? `always` : `never` : sn(t10.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection, [
          `never`,
          `always`,
          `selection`
        ]),
        autoFindInSelection: typeof e10.autoFindInSelection == `boolean` ? e10.autoFindInSelection ? `always` : `never` : sn(t10.autoFindInSelection, this.defaultValue.autoFindInSelection, [
          `never`,
          `always`,
          `multiline`
        ]),
        globalFindClipboard: D(t10.globalFindClipboard, this.defaultValue.globalFindClipboard),
        addExtraSpaceOnTop: D(t10.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),
        loop: D(t10.loop, this.defaultValue.loop)
      };
    }
  };
  yn = (_g2 = class extends Yt {
    constructor() {
      super(51, `fontLigatures`, _g2.OFF, {
        anyOf: [
          {
            type: `boolean`,
            description: T(`fontLigatures`, `Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property.`)
          },
          {
            type: `string`,
            description: T(`fontFeatureSettings`, `Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures.`)
          }
        ],
        description: T(`fontLigaturesGeneral`, `Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.`),
        default: false
      });
    }
    validate(t10) {
      return t10 === void 0 ? this.defaultValue : typeof t10 == `string` ? t10 === `false` || t10.length === 0 ? _g2.OFF : t10 === `true` ? _g2.ON : t10 : t10 ? _g2.ON : _g2.OFF;
    }
  }, _g2.OFF = `"liga" off, "calt" off`, _g2.ON = `"liga" on, "calt" on`, _g2);
  bn = (_h2 = class extends Yt {
    constructor() {
      super(54, `fontVariations`, _h2.OFF, {
        anyOf: [
          {
            type: `boolean`,
            description: T(`fontVariations`, `Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property.`)
          },
          {
            type: `string`,
            description: T(`fontVariationSettings`, `Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings.`)
          }
        ],
        description: T(`fontVariationsGeneral`, `Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.`),
        default: false
      });
    }
    validate(t10) {
      return t10 === void 0 ? this.defaultValue : typeof t10 == `string` ? t10 === `false` ? _h2.OFF : t10 === `true` ? _h2.TRANSLATE : t10 : t10 ? _h2.TRANSLATE : _h2.OFF;
    }
    compute(e10, t10, n10) {
      return e10.fontInfo.fontVariationSettings;
    }
  }, _h2.OFF = `normal`, _h2.TRANSLATE = `translate`, _h2);
  xn = class extends Qt {
    constructor() {
      super(50);
    }
    compute(e10, t10, n10) {
      return e10.fontInfo;
    }
  };
  Sn = class extends $t {
    constructor() {
      super(52, `fontSize`, dr.fontSize, {
        type: `number`,
        minimum: 6,
        maximum: 100,
        default: dr.fontSize,
        description: T(`fontSize`, `Controls the font size in pixels.`)
      });
    }
    validate(e10) {
      let t10 = an.float(e10, this.defaultValue);
      return t10 === 0 ? dr.fontSize : an.clamp(t10, 6, 100);
    }
    compute(e10, t10, n10) {
      return e10.fontInfo.fontSize;
    }
  };
  Cn = (_i2 = class extends Yt {
    constructor() {
      super(53, `fontWeight`, dr.fontWeight, {
        anyOf: [
          {
            type: `number`,
            minimum: _i2.MINIMUM_VALUE,
            maximum: _i2.MAXIMUM_VALUE,
            errorMessage: T(`fontWeightErrorMessage`, `Only "normal" and "bold" keywords or numbers between 1 and 1000 are allowed.`)
          },
          {
            type: `string`,
            pattern: `^(normal|bold|1000|[1-9][0-9]{0,2})$`
          },
          {
            enum: _i2.SUGGESTION_VALUES
          }
        ],
        default: dr.fontWeight,
        description: T(`fontWeight`, `Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.`)
      });
    }
    validate(t10) {
      return t10 === `normal` || t10 === `bold` ? t10 : String(nn.clampedInt(t10, dr.fontWeight, _i2.MINIMUM_VALUE, _i2.MAXIMUM_VALUE));
    }
  }, _i2.SUGGESTION_VALUES = [
    `normal`,
    `bold`,
    `100`,
    `200`,
    `300`,
    `400`,
    `500`,
    `600`,
    `700`,
    `800`,
    `900`
  ], _i2.MINIMUM_VALUE = 1, _i2.MAXIMUM_VALUE = 1e3, _i2);
  wn = class extends Yt {
    constructor() {
      let e10 = {
        multiple: `peek`,
        multipleDefinitions: `peek`,
        multipleTypeDefinitions: `peek`,
        multipleDeclarations: `peek`,
        multipleImplementations: `peek`,
        multipleReferences: `peek`,
        multipleTests: `peek`,
        alternativeDefinitionCommand: `editor.action.goToReferences`,
        alternativeTypeDefinitionCommand: `editor.action.goToReferences`,
        alternativeDeclarationCommand: `editor.action.goToReferences`,
        alternativeImplementationCommand: ``,
        alternativeReferenceCommand: ``,
        alternativeTestsCommand: ``
      }, t10 = {
        type: `string`,
        enum: [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ],
        default: e10.multiple,
        enumDescriptions: [
          T(`editor.gotoLocation.multiple.peek`, `Show Peek view of the results (default)`),
          T(`editor.gotoLocation.multiple.gotoAndPeek`, `Go to the primary result and show a Peek view`),
          T(`editor.gotoLocation.multiple.goto`, `Go to the primary result and enable Peek-less navigation to others`)
        ]
      }, n10 = [
        ``,
        `editor.action.referenceSearch.trigger`,
        `editor.action.goToReferences`,
        `editor.action.peekImplementation`,
        `editor.action.goToImplementation`,
        `editor.action.peekTypeDefinition`,
        `editor.action.goToTypeDefinition`,
        `editor.action.peekDeclaration`,
        `editor.action.revealDeclaration`,
        `editor.action.peekDefinition`,
        `editor.action.revealDefinitionAside`,
        `editor.action.revealDefinition`
      ];
      super(58, `gotoLocation`, e10, {
        "editor.gotoLocation.multiple": {
          deprecationMessage: T(`editor.gotoLocation.multiple.deprecated`, `This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.`)
        },
        "editor.gotoLocation.multipleDefinitions": {
          description: T(`editor.editor.gotoLocation.multipleDefinitions`, `Controls the behavior the 'Go to Definition'-command when multiple target locations exist.`),
          ...t10
        },
        "editor.gotoLocation.multipleTypeDefinitions": {
          description: T(`editor.editor.gotoLocation.multipleTypeDefinitions`, `Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.`),
          ...t10
        },
        "editor.gotoLocation.multipleDeclarations": {
          description: T(`editor.editor.gotoLocation.multipleDeclarations`, `Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.`),
          ...t10
        },
        "editor.gotoLocation.multipleImplementations": {
          description: T(`editor.editor.gotoLocation.multipleImplemenattions`, `Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.`),
          ...t10
        },
        "editor.gotoLocation.multipleReferences": {
          description: T(`editor.editor.gotoLocation.multipleReferences`, `Controls the behavior the 'Go to References'-command when multiple target locations exist.`),
          ...t10
        },
        "editor.gotoLocation.alternativeDefinitionCommand": {
          type: `string`,
          default: e10.alternativeDefinitionCommand,
          enum: n10,
          description: T(`alternativeDefinitionCommand`, `Alternative command id that is being executed when the result of 'Go to Definition' is the current location.`)
        },
        "editor.gotoLocation.alternativeTypeDefinitionCommand": {
          type: `string`,
          default: e10.alternativeTypeDefinitionCommand,
          enum: n10,
          description: T(`alternativeTypeDefinitionCommand`, `Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.`)
        },
        "editor.gotoLocation.alternativeDeclarationCommand": {
          type: `string`,
          default: e10.alternativeDeclarationCommand,
          enum: n10,
          description: T(`alternativeDeclarationCommand`, `Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.`)
        },
        "editor.gotoLocation.alternativeImplementationCommand": {
          type: `string`,
          default: e10.alternativeImplementationCommand,
          enum: n10,
          description: T(`alternativeImplementationCommand`, `Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.`)
        },
        "editor.gotoLocation.alternativeReferenceCommand": {
          type: `string`,
          default: e10.alternativeReferenceCommand,
          enum: n10,
          description: T(`alternativeReferenceCommand`, `Alternative command id that is being executed when the result of 'Go to Reference' is the current location.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        multiple: sn(t10.multiple, this.defaultValue.multiple, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleDefinitions: t10.multipleDefinitions ?? sn(t10.multipleDefinitions, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleTypeDefinitions: t10.multipleTypeDefinitions ?? sn(t10.multipleTypeDefinitions, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleDeclarations: t10.multipleDeclarations ?? sn(t10.multipleDeclarations, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleImplementations: t10.multipleImplementations ?? sn(t10.multipleImplementations, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleReferences: t10.multipleReferences ?? sn(t10.multipleReferences, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        multipleTests: t10.multipleTests ?? sn(t10.multipleTests, `peek`, [
          `peek`,
          `gotoAndPeek`,
          `goto`
        ]),
        alternativeDefinitionCommand: on.string(t10.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),
        alternativeTypeDefinitionCommand: on.string(t10.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),
        alternativeDeclarationCommand: on.string(t10.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),
        alternativeImplementationCommand: on.string(t10.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),
        alternativeReferenceCommand: on.string(t10.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),
        alternativeTestsCommand: on.string(t10.alternativeTestsCommand, this.defaultValue.alternativeTestsCommand)
      };
    }
  };
  Tn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        delay: 300,
        hidingDelay: 300,
        sticky: true,
        above: true
      };
      super(60, `hover`, e10, {
        "editor.hover.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`hover.enabled`, `Controls whether the hover is shown.`)
        },
        "editor.hover.delay": {
          type: `number`,
          default: e10.delay,
          minimum: 0,
          maximum: 1e4,
          description: T(`hover.delay`, `Controls the delay in milliseconds after which the hover is shown.`)
        },
        "editor.hover.sticky": {
          type: `boolean`,
          default: e10.sticky,
          description: T(`hover.sticky`, `Controls whether the hover should remain visible when mouse is moved over it.`)
        },
        "editor.hover.hidingDelay": {
          type: `integer`,
          minimum: 0,
          default: e10.hidingDelay,
          description: T(`hover.hidingDelay`, "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled.")
        },
        "editor.hover.above": {
          type: `boolean`,
          default: e10.above,
          description: T(`hover.above`, `Prefer showing hovers above the line, if there's space.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        delay: nn.clampedInt(t10.delay, this.defaultValue.delay, 0, 1e4),
        sticky: D(t10.sticky, this.defaultValue.sticky),
        hidingDelay: nn.clampedInt(t10.hidingDelay, this.defaultValue.hidingDelay, 0, 6e5),
        above: D(t10.above, this.defaultValue.above)
      };
    }
  };
  En = class e10 extends Qt {
    constructor() {
      super(146);
    }
    compute(t10, n10, r10) {
      return e10.computeLayout(n10, {
        memory: t10.memory,
        outerWidth: t10.outerWidth,
        outerHeight: t10.outerHeight,
        isDominatedByLongLines: t10.isDominatedByLongLines,
        lineHeight: t10.fontInfo.lineHeight,
        viewLineCount: t10.viewLineCount,
        lineNumbersDigitCount: t10.lineNumbersDigitCount,
        typicalHalfwidthCharacterWidth: t10.fontInfo.typicalHalfwidthCharacterWidth,
        maxDigitWidth: t10.fontInfo.maxDigitWidth,
        pixelRatio: t10.pixelRatio,
        glyphMarginDecorationLaneCount: t10.glyphMarginDecorationLaneCount
      });
    }
    static computeContainedMinimapLineCount(e11) {
      let t10 = e11.height / e11.lineHeight, n10 = Math.floor(e11.paddingTop / e11.lineHeight), r10 = Math.floor(e11.paddingBottom / e11.lineHeight);
      e11.scrollBeyondLastLine && (r10 = Math.max(r10, t10 - 1));
      let i10 = (n10 + e11.viewLineCount + r10) / (e11.pixelRatio * e11.height), a10 = Math.floor(e11.viewLineCount / i10);
      return {
        typicalViewportLineCount: t10,
        extraLinesBeforeFirstLine: n10,
        extraLinesBeyondLastLine: r10,
        desiredRatio: i10,
        minimapLineCount: a10
      };
    }
    static _computeMinimapLayout(t10, n10) {
      let r10 = t10.outerWidth, i10 = t10.outerHeight, a10 = t10.pixelRatio;
      if (!t10.minimap.enabled) return {
        renderMinimap: 0,
        minimapLeft: 0,
        minimapWidth: 0,
        minimapHeightIsEditorHeight: false,
        minimapIsSampling: false,
        minimapScale: 1,
        minimapLineHeight: 1,
        minimapCanvasInnerWidth: 0,
        minimapCanvasInnerHeight: Math.floor(a10 * i10),
        minimapCanvasOuterWidth: 0,
        minimapCanvasOuterHeight: i10
      };
      let o10 = n10.stableMinimapLayoutInput, s10 = o10 && t10.outerHeight === o10.outerHeight && t10.lineHeight === o10.lineHeight && t10.typicalHalfwidthCharacterWidth === o10.typicalHalfwidthCharacterWidth && t10.pixelRatio === o10.pixelRatio && t10.scrollBeyondLastLine === o10.scrollBeyondLastLine && t10.paddingTop === o10.paddingTop && t10.paddingBottom === o10.paddingBottom && t10.minimap.enabled === o10.minimap.enabled && t10.minimap.side === o10.minimap.side && t10.minimap.size === o10.minimap.size && t10.minimap.showSlider === o10.minimap.showSlider && t10.minimap.renderCharacters === o10.minimap.renderCharacters && t10.minimap.maxColumn === o10.minimap.maxColumn && t10.minimap.scale === o10.minimap.scale && t10.verticalScrollbarWidth === o10.verticalScrollbarWidth && t10.isViewportWrapping === o10.isViewportWrapping, c10 = t10.lineHeight, l10 = t10.typicalHalfwidthCharacterWidth, u10 = t10.scrollBeyondLastLine, d10 = t10.minimap.renderCharacters, f10 = a10 >= 2 ? Math.round(t10.minimap.scale * 2) : t10.minimap.scale, p10 = t10.minimap.maxColumn, m10 = t10.minimap.size, h10 = t10.minimap.side, g10 = t10.verticalScrollbarWidth, _10 = t10.viewLineCount, v10 = t10.remainingWidth, y10 = t10.isViewportWrapping, b10 = d10 ? 2 : 3, x10 = Math.floor(a10 * i10), S10 = x10 / a10, C10 = false, w10 = false, ee2 = b10 * f10, te2 = f10 / a10, ne2 = 1;
      if (m10 === `fill` || m10 === `fit`) {
        let { typicalViewportLineCount: r11, extraLinesBeforeFirstLine: o11, extraLinesBeyondLastLine: l11, desiredRatio: d11, minimapLineCount: p11 } = e10.computeContainedMinimapLineCount({
          viewLineCount: _10,
          scrollBeyondLastLine: u10,
          paddingTop: t10.paddingTop,
          paddingBottom: t10.paddingBottom,
          height: i10,
          lineHeight: c10,
          pixelRatio: a10
        }), h11 = _10 / p11;
        if (h11 > 1) C10 = true, w10 = true, f10 = 1, ee2 = 1, te2 = f10 / a10;
        else {
          let e11 = false, i11 = f10 + 1;
          if (m10 === `fit`) {
            let t11 = Math.ceil((o11 + _10 + l11) * ee2);
            y10 && s10 && v10 <= n10.stableFitRemainingWidth ? (e11 = true, i11 = n10.stableFitMaxMinimapScale) : e11 = t11 > x10;
          }
          if (m10 === `fill` || e11) {
            C10 = true;
            let e12 = f10;
            ee2 = Math.min(c10 * a10, Math.max(1, Math.floor(1 / d11))), y10 && s10 && v10 <= n10.stableFitRemainingWidth && (i11 = n10.stableFitMaxMinimapScale), f10 = Math.min(i11, Math.max(1, Math.floor(ee2 / b10))), f10 > e12 && (ne2 = Math.min(2, f10 / e12)), te2 = f10 / a10 / ne2, x10 = Math.ceil(Math.max(r11, o11 + _10 + l11) * ee2), y10 ? (n10.stableMinimapLayoutInput = t10, n10.stableFitRemainingWidth = v10, n10.stableFitMaxMinimapScale = f10) : (n10.stableMinimapLayoutInput = null, n10.stableFitRemainingWidth = 0);
          }
        }
      }
      let re2 = Math.floor(p10 * te2), ie2 = Math.min(re2, Math.max(0, Math.floor((v10 - g10 - 2) * te2 / (l10 + te2))) + Kt), ae2 = Math.floor(a10 * ie2), oe2 = ae2 / a10;
      ae2 = Math.floor(ae2 * ne2);
      let se2 = d10 ? 1 : 2, ce2 = h10 === `left` ? 0 : r10 - ie2 - g10;
      return {
        renderMinimap: se2,
        minimapLeft: ce2,
        minimapWidth: ie2,
        minimapHeightIsEditorHeight: C10,
        minimapIsSampling: w10,
        minimapScale: f10,
        minimapLineHeight: ee2,
        minimapCanvasInnerWidth: ae2,
        minimapCanvasInnerHeight: x10,
        minimapCanvasOuterWidth: oe2,
        minimapCanvasOuterHeight: S10
      };
    }
    static computeLayout(t10, n10) {
      let r10 = n10.outerWidth | 0, i10 = n10.outerHeight | 0, a10 = n10.lineHeight | 0, o10 = n10.lineNumbersDigitCount | 0, s10 = n10.typicalHalfwidthCharacterWidth, c10 = n10.maxDigitWidth, l10 = n10.pixelRatio, u10 = n10.viewLineCount, d10 = t10.get(138), f10 = d10 === `inherit` ? t10.get(137) : d10, p10 = f10 === `inherit` ? t10.get(133) : f10, m10 = t10.get(136), h10 = n10.isDominatedByLongLines, g10 = t10.get(57), _10 = t10.get(68).renderType !== 0, v10 = t10.get(69), y10 = t10.get(106), b10 = t10.get(84), x10 = t10.get(73), S10 = t10.get(104), C10 = S10.verticalScrollbarSize, w10 = S10.verticalHasArrows, ee2 = S10.arrowSize, te2 = S10.horizontalScrollbarSize, ne2 = t10.get(43), re2 = t10.get(111) !== `never`, ie2 = t10.get(66);
      ne2 && re2 && (ie2 += 16);
      let ae2 = 0;
      if (_10) {
        let e11 = Math.max(o10, v10);
        ae2 = Math.round(e11 * c10);
      }
      let oe2 = 0;
      g10 && (oe2 = a10 * n10.glyphMarginDecorationLaneCount);
      let se2 = 0, ce2 = se2 + oe2, le2 = ce2 + ae2, ue2 = le2 + ie2, de2 = r10 - oe2 - ae2 - ie2, fe2 = false, pe2 = false, me2 = -1;
      f10 === `inherit` && h10 ? (fe2 = true, pe2 = true) : p10 === `on` || p10 === `bounded` ? pe2 = true : p10 === `wordWrapColumn` && (me2 = m10);
      let he2 = e10._computeMinimapLayout({
        outerWidth: r10,
        outerHeight: i10,
        lineHeight: a10,
        typicalHalfwidthCharacterWidth: s10,
        pixelRatio: l10,
        scrollBeyondLastLine: y10,
        paddingTop: b10.top,
        paddingBottom: b10.bottom,
        minimap: x10,
        verticalScrollbarWidth: C10,
        viewLineCount: u10,
        remainingWidth: de2,
        isViewportWrapping: pe2
      }, n10.memory || new Jt());
      he2.renderMinimap !== 0 && he2.minimapLeft === 0 && (se2 += he2.minimapWidth, ce2 += he2.minimapWidth, le2 += he2.minimapWidth, ue2 += he2.minimapWidth);
      let ge2 = de2 - he2.minimapWidth, _e3 = Math.max(1, Math.floor((ge2 - C10 - 2) / s10)), ve2 = w10 ? ee2 : 0;
      return pe2 && (me2 = Math.max(1, _e3), p10 === `bounded` && (me2 = Math.min(me2, m10))), {
        width: r10,
        height: i10,
        glyphMarginLeft: se2,
        glyphMarginWidth: oe2,
        glyphMarginDecorationLaneCount: n10.glyphMarginDecorationLaneCount,
        lineNumbersLeft: ce2,
        lineNumbersWidth: ae2,
        decorationsLeft: le2,
        decorationsWidth: ie2,
        contentLeft: ue2,
        contentWidth: ge2,
        minimap: he2,
        viewportColumn: _e3,
        isWordWrapMinified: fe2,
        isViewportWrapping: pe2,
        wrappingColumn: me2,
        verticalScrollbarWidth: C10,
        horizontalScrollbarHeight: te2,
        overviewRuler: {
          top: ve2,
          width: C10,
          height: i10 - 2 * ve2,
          right: 0
        }
      };
    }
  };
  Dn = class extends Yt {
    constructor() {
      super(140, `wrappingStrategy`, `simple`, {
        "editor.wrappingStrategy": {
          enumDescriptions: [
            T(`wrappingStrategy.simple`, `Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.`),
            T(`wrappingStrategy.advanced`, `Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.`)
          ],
          type: `string`,
          enum: [
            `simple`,
            `advanced`
          ],
          default: `simple`,
          description: T(`wrappingStrategy`, `Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.`)
        }
      });
    }
    validate(e10) {
      return sn(e10, `simple`, [
        `simple`,
        `advanced`
      ]);
    }
    compute(e10, t10, n10) {
      let r10 = t10.get(2);
      return r10 === 2 ? `advanced` : n10;
    }
  };
  (function(e10) {
    e10.Off = `off`, e10.OnCode = `onCode`, e10.On = `on`;
  })(On || (On = {}));
  var kn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: On.OnCode
      };
      super(65, `lightbulb`, e10, {
        "editor.lightbulb.enabled": {
          type: `string`,
          tags: [
            `experimental`
          ],
          enum: [
            On.Off,
            On.OnCode,
            On.On
          ],
          default: e10.enabled,
          enumDescriptions: [
            T(`editor.lightbulb.enabled.off`, `Disable the code action menu.`),
            T(`editor.lightbulb.enabled.onCode`, `Show the code action menu when the cursor is on lines with code.`),
            T(`editor.lightbulb.enabled.on`, `Show the code action menu when the cursor is on lines with code or on empty lines.`)
          ],
          description: T(`enabled`, `Enables the Code Action lightbulb in the editor.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: sn(t10.enabled, this.defaultValue.enabled, [
          On.Off,
          On.OnCode,
          On.On
        ])
      };
    }
  }, An = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        maxLineCount: 5,
        defaultModel: `outlineModel`,
        scrollWithEditor: true
      };
      super(116, `stickyScroll`, e10, {
        "editor.stickyScroll.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`editor.stickyScroll.enabled`, `Shows the nested current scopes during the scroll at the top of the editor.`),
          tags: [
            `experimental`
          ]
        },
        "editor.stickyScroll.maxLineCount": {
          type: `number`,
          default: e10.maxLineCount,
          minimum: 1,
          maximum: 20,
          description: T(`editor.stickyScroll.maxLineCount`, `Defines the maximum number of sticky lines to show.`)
        },
        "editor.stickyScroll.defaultModel": {
          type: `string`,
          enum: [
            `outlineModel`,
            `foldingProviderModel`,
            `indentationModel`
          ],
          default: e10.defaultModel,
          description: T(`editor.stickyScroll.defaultModel`, `Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.`)
        },
        "editor.stickyScroll.scrollWithEditor": {
          type: `boolean`,
          default: e10.scrollWithEditor,
          description: T(`editor.stickyScroll.scrollWithEditor`, `Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        maxLineCount: nn.clampedInt(t10.maxLineCount, this.defaultValue.maxLineCount, 1, 20),
        defaultModel: sn(t10.defaultModel, this.defaultValue.defaultModel, [
          `outlineModel`,
          `foldingProviderModel`,
          `indentationModel`
        ]),
        scrollWithEditor: D(t10.scrollWithEditor, this.defaultValue.scrollWithEditor)
      };
    }
  }, jn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: `on`,
        fontSize: 0,
        fontFamily: ``,
        padding: false
      };
      super(142, `inlayHints`, e10, {
        "editor.inlayHints.enabled": {
          type: `string`,
          default: e10.enabled,
          description: T(`inlayHints.enable`, `Enables the inlay hints in the editor.`),
          enum: [
            `on`,
            `onUnlessPressed`,
            `offUnlessPressed`,
            `off`
          ],
          markdownEnumDescriptions: [
            T(`editor.inlayHints.on`, `Inlay hints are enabled`),
            T(`editor.inlayHints.onUnlessPressed`, `Inlay hints are showing by default and hide when holding {0}`, E ? `Ctrl+Option` : `Ctrl+Alt`),
            T(`editor.inlayHints.offUnlessPressed`, `Inlay hints are hidden by default and show when holding {0}`, E ? `Ctrl+Option` : `Ctrl+Alt`),
            T(`editor.inlayHints.off`, `Inlay hints are disabled`)
          ]
        },
        "editor.inlayHints.fontSize": {
          type: `number`,
          default: e10.fontSize,
          markdownDescription: T(`inlayHints.fontSize`, `Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.`, "`#editor.fontSize#`", "`5`")
        },
        "editor.inlayHints.fontFamily": {
          type: `string`,
          default: e10.fontFamily,
          markdownDescription: T(`inlayHints.fontFamily`, `Controls font family of inlay hints in the editor. When set to empty, the {0} is used.`, "`#editor.fontFamily#`")
        },
        "editor.inlayHints.padding": {
          type: `boolean`,
          default: e10.padding,
          description: T(`inlayHints.padding`, `Enables the padding around the inlay hints in the editor.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return typeof t10.enabled == `boolean` && (t10.enabled = t10.enabled ? `on` : `off`), {
        enabled: sn(t10.enabled, this.defaultValue.enabled, [
          `on`,
          `off`,
          `offUnlessPressed`,
          `onUnlessPressed`
        ]),
        fontSize: nn.clampedInt(t10.fontSize, this.defaultValue.fontSize, 0, 100),
        fontFamily: on.string(t10.fontFamily, this.defaultValue.fontFamily),
        padding: D(t10.padding, this.defaultValue.padding)
      };
    }
  }, Mn = class extends Yt {
    constructor() {
      super(66, `lineDecorationsWidth`, 10);
    }
    validate(e10) {
      if (typeof e10 == `string` && /^\d+(\.\d+)?ch$/.test(e10)) {
        let t10 = parseFloat(e10.substring(0, e10.length - 2));
        return -t10;
      } else return nn.clampedInt(e10, this.defaultValue, 0, 1e3);
    }
    compute(e10, t10, n10) {
      return n10 < 0 ? nn.clampedInt(-n10 * e10.fontInfo.typicalHalfwidthCharacterWidth, this.defaultValue, 0, 1e3) : n10;
    }
  }, Nn = class extends an {
    constructor() {
      super(67, `lineHeight`, dr.lineHeight, (e10) => an.clamp(e10, 0, 150), {
        markdownDescription: T(`lineHeight`, `Controls the line height. 
 - Use 0 to automatically compute the line height from the font size.
 - Values between 0 and 8 will be used as a multiplier with the font size.
 - Values greater than or equal to 8 will be used as effective values.`)
      });
    }
    compute(e10, t10, n10) {
      return e10.fontInfo.lineHeight;
    }
  }, Pn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        size: `proportional`,
        side: `right`,
        showSlider: `mouseover`,
        autohide: false,
        renderCharacters: true,
        maxColumn: 120,
        scale: 1,
        showRegionSectionHeaders: true,
        showMarkSectionHeaders: true,
        sectionHeaderFontSize: 9,
        sectionHeaderLetterSpacing: 1
      };
      super(73, `minimap`, e10, {
        "editor.minimap.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`minimap.enabled`, `Controls whether the minimap is shown.`)
        },
        "editor.minimap.autohide": {
          type: `boolean`,
          default: e10.autohide,
          description: T(`minimap.autohide`, `Controls whether the minimap is hidden automatically.`)
        },
        "editor.minimap.size": {
          type: `string`,
          enum: [
            `proportional`,
            `fill`,
            `fit`
          ],
          enumDescriptions: [
            T(`minimap.size.proportional`, `The minimap has the same size as the editor contents (and might scroll).`),
            T(`minimap.size.fill`, `The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).`),
            T(`minimap.size.fit`, `The minimap will shrink as necessary to never be larger than the editor (no scrolling).`)
          ],
          default: e10.size,
          description: T(`minimap.size`, `Controls the size of the minimap.`)
        },
        "editor.minimap.side": {
          type: `string`,
          enum: [
            `left`,
            `right`
          ],
          default: e10.side,
          description: T(`minimap.side`, `Controls the side where to render the minimap.`)
        },
        "editor.minimap.showSlider": {
          type: `string`,
          enum: [
            `always`,
            `mouseover`
          ],
          default: e10.showSlider,
          description: T(`minimap.showSlider`, `Controls when the minimap slider is shown.`)
        },
        "editor.minimap.scale": {
          type: `number`,
          default: e10.scale,
          minimum: 1,
          maximum: 3,
          enum: [
            1,
            2,
            3
          ],
          description: T(`minimap.scale`, `Scale of content drawn in the minimap: 1, 2 or 3.`)
        },
        "editor.minimap.renderCharacters": {
          type: `boolean`,
          default: e10.renderCharacters,
          description: T(`minimap.renderCharacters`, `Render the actual characters on a line as opposed to color blocks.`)
        },
        "editor.minimap.maxColumn": {
          type: `number`,
          default: e10.maxColumn,
          description: T(`minimap.maxColumn`, `Limit the width of the minimap to render at most a certain number of columns.`)
        },
        "editor.minimap.showRegionSectionHeaders": {
          type: `boolean`,
          default: e10.showRegionSectionHeaders,
          description: T(`minimap.showRegionSectionHeaders`, `Controls whether named regions are shown as section headers in the minimap.`)
        },
        "editor.minimap.showMarkSectionHeaders": {
          type: `boolean`,
          default: e10.showMarkSectionHeaders,
          description: T(`minimap.showMarkSectionHeaders`, `Controls whether MARK: comments are shown as section headers in the minimap.`)
        },
        "editor.minimap.sectionHeaderFontSize": {
          type: `number`,
          default: e10.sectionHeaderFontSize,
          description: T(`minimap.sectionHeaderFontSize`, `Controls the font size of section headers in the minimap.`)
        },
        "editor.minimap.sectionHeaderLetterSpacing": {
          type: `number`,
          default: e10.sectionHeaderLetterSpacing,
          description: T(`minimap.sectionHeaderLetterSpacing`, `Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        autohide: D(t10.autohide, this.defaultValue.autohide),
        size: sn(t10.size, this.defaultValue.size, [
          `proportional`,
          `fill`,
          `fit`
        ]),
        side: sn(t10.side, this.defaultValue.side, [
          `right`,
          `left`
        ]),
        showSlider: sn(t10.showSlider, this.defaultValue.showSlider, [
          `always`,
          `mouseover`
        ]),
        renderCharacters: D(t10.renderCharacters, this.defaultValue.renderCharacters),
        scale: nn.clampedInt(t10.scale, 1, 1, 3),
        maxColumn: nn.clampedInt(t10.maxColumn, this.defaultValue.maxColumn, 1, 1e4),
        showRegionSectionHeaders: D(t10.showRegionSectionHeaders, this.defaultValue.showRegionSectionHeaders),
        showMarkSectionHeaders: D(t10.showMarkSectionHeaders, this.defaultValue.showMarkSectionHeaders),
        sectionHeaderFontSize: an.clamp(t10.sectionHeaderFontSize ?? this.defaultValue.sectionHeaderFontSize, 4, 32),
        sectionHeaderLetterSpacing: an.clamp(t10.sectionHeaderLetterSpacing ?? this.defaultValue.sectionHeaderLetterSpacing, 0, 5)
      };
    }
  };
  function Fn(e10) {
    return e10 === `ctrlCmd` ? E ? `metaKey` : `ctrlKey` : `altKey`;
  }
  var In = class extends Yt {
    constructor() {
      super(84, `padding`, {
        top: 0,
        bottom: 0
      }, {
        "editor.padding.top": {
          type: `number`,
          default: 0,
          minimum: 0,
          maximum: 1e3,
          description: T(`padding.top`, `Controls the amount of space between the top edge of the editor and the first line.`)
        },
        "editor.padding.bottom": {
          type: `number`,
          default: 0,
          minimum: 0,
          maximum: 1e3,
          description: T(`padding.bottom`, `Controls the amount of space between the bottom edge of the editor and the last line.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        top: nn.clampedInt(t10.top, 0, 0, 1e3),
        bottom: nn.clampedInt(t10.bottom, 0, 0, 1e3)
      };
    }
  }, Ln = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        cycle: true
      };
      super(86, `parameterHints`, e10, {
        "editor.parameterHints.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`parameterHints.enabled`, `Enables a pop-up that shows parameter documentation and type information as you type.`)
        },
        "editor.parameterHints.cycle": {
          type: `boolean`,
          default: e10.cycle,
          description: T(`parameterHints.cycle`, `Controls whether the parameter hints menu cycles or closes when reaching the end of the list.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        cycle: D(t10.cycle, this.defaultValue.cycle)
      };
    }
  }, Rn = class extends Qt {
    constructor() {
      super(144);
    }
    compute(e10, t10, n10) {
      return e10.pixelRatio;
    }
  }, zn = class extends Yt {
    constructor() {
      super(88, `placeholder`, void 0);
    }
    validate(e10) {
      return e10 === void 0 ? this.defaultValue : typeof e10 == `string` ? e10 : this.defaultValue;
    }
  }, Bn = class extends Yt {
    constructor() {
      let e10 = {
        other: `on`,
        comments: `off`,
        strings: `off`
      }, t10 = [
        {
          type: `boolean`
        },
        {
          type: `string`,
          enum: [
            `on`,
            `inline`,
            `off`
          ],
          enumDescriptions: [
            T(`on`, `Quick suggestions show inside the suggest widget`),
            T(`inline`, `Quick suggestions show as ghost text`),
            T(`off`, `Quick suggestions are disabled`)
          ]
        }
      ];
      super(90, `quickSuggestions`, e10, {
        type: `object`,
        additionalProperties: false,
        properties: {
          strings: {
            anyOf: t10,
            default: e10.strings,
            description: T(`quickSuggestions.strings`, `Enable quick suggestions inside strings.`)
          },
          comments: {
            anyOf: t10,
            default: e10.comments,
            description: T(`quickSuggestions.comments`, `Enable quick suggestions inside comments.`)
          },
          other: {
            anyOf: t10,
            default: e10.other,
            description: T(`quickSuggestions.other`, `Enable quick suggestions outside of strings and comments.`)
          }
        },
        default: e10,
        markdownDescription: T(`quickSuggestions`, `Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.`, "`#editor.suggestOnTriggerCharacters#`")
      }), this.defaultValue = e10;
    }
    validate(e10) {
      if (typeof e10 == `boolean`) {
        let t11 = e10 ? `on` : `off`;
        return {
          comments: t11,
          strings: t11,
          other: t11
        };
      }
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let { other: t10, comments: n10, strings: r10 } = e10, i10 = [
        `on`,
        `inline`,
        `off`
      ], a10, o10, s10;
      return a10 = typeof t10 == `boolean` ? t10 ? `on` : `off` : sn(t10, this.defaultValue.other, i10), o10 = typeof n10 == `boolean` ? n10 ? `on` : `off` : sn(n10, this.defaultValue.comments, i10), s10 = typeof r10 == `boolean` ? r10 ? `on` : `off` : sn(r10, this.defaultValue.strings, i10), {
        other: a10,
        comments: o10,
        strings: s10
      };
    }
  }, Vn = class extends Yt {
    constructor() {
      super(68, `lineNumbers`, {
        renderType: 1,
        renderFn: null
      }, {
        type: `string`,
        enum: [
          `off`,
          `on`,
          `relative`,
          `interval`
        ],
        enumDescriptions: [
          T(`lineNumbers.off`, `Line numbers are not rendered.`),
          T(`lineNumbers.on`, `Line numbers are rendered as absolute number.`),
          T(`lineNumbers.relative`, `Line numbers are rendered as distance in lines to cursor position.`),
          T(`lineNumbers.interval`, `Line numbers are rendered every 10 lines.`)
        ],
        default: `on`,
        description: T(`lineNumbers`, `Controls the display of line numbers.`)
      });
    }
    validate(e10) {
      let t10 = this.defaultValue.renderType, n10 = this.defaultValue.renderFn;
      return e10 !== void 0 && (typeof e10 == `function` ? (t10 = 4, n10 = e10) : t10 = e10 === `interval` ? 3 : e10 === `relative` ? 2 : e10 === `on` ? 1 : 0), {
        renderType: t10,
        renderFn: n10
      };
    }
  };
  function Hn(e10) {
    let t10 = e10.get(99);
    return t10 === `editable` ? e10.get(92) : t10 !== `on`;
  }
  var Un = class extends Yt {
    constructor() {
      let e10 = [], t10 = {
        type: `number`,
        description: T(`rulers.size`, `Number of monospace characters at which this editor ruler will render.`)
      };
      super(103, `rulers`, e10, {
        type: `array`,
        items: {
          anyOf: [
            t10,
            {
              type: [
                `object`
              ],
              properties: {
                column: t10,
                color: {
                  type: `string`,
                  description: T(`rulers.color`, `Color of this editor ruler.`),
                  format: `color-hex`
                }
              }
            }
          ]
        },
        default: e10,
        description: T(`rulers`, `Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.`)
      });
    }
    validate(e10) {
      if (Array.isArray(e10)) {
        let t10 = [];
        for (let n10 of e10) if (typeof n10 == `number`) t10.push({
          column: nn.clampedInt(n10, 0, 0, 1e4),
          color: null
        });
        else if (n10 && typeof n10 == `object`) {
          let e11 = n10;
          t10.push({
            column: nn.clampedInt(e11.column, 0, 0, 1e4),
            color: e11.color
          });
        }
        return t10.sort((e11, t11) => e11.column - t11.column), t10;
      }
      return this.defaultValue;
    }
  }, Wn = class extends Yt {
    constructor() {
      let e10;
      super(93, `readOnlyMessage`, e10);
    }
    validate(e10) {
      return !e10 || typeof e10 != `object` ? this.defaultValue : e10;
    }
  };
  function Gn(e10, t10) {
    if (typeof e10 != `string`) return t10;
    switch (e10) {
      case `hidden`:
        return 2;
      case `visible`:
        return 3;
      default:
        return 1;
    }
  }
  var Kn = class extends Yt {
    constructor() {
      let e10 = {
        vertical: 1,
        horizontal: 1,
        arrowSize: 11,
        useShadows: true,
        verticalHasArrows: false,
        horizontalHasArrows: false,
        horizontalScrollbarSize: 12,
        horizontalSliderSize: 12,
        verticalScrollbarSize: 14,
        verticalSliderSize: 14,
        handleMouseWheel: true,
        alwaysConsumeMouseWheel: true,
        scrollByPage: false,
        ignoreHorizontalScrollbarInContentHeight: false
      };
      super(104, `scrollbar`, e10, {
        "editor.scrollbar.vertical": {
          type: `string`,
          enum: [
            `auto`,
            `visible`,
            `hidden`
          ],
          enumDescriptions: [
            T(`scrollbar.vertical.auto`, `The vertical scrollbar will be visible only when necessary.`),
            T(`scrollbar.vertical.visible`, `The vertical scrollbar will always be visible.`),
            T(`scrollbar.vertical.fit`, `The vertical scrollbar will always be hidden.`)
          ],
          default: `auto`,
          description: T(`scrollbar.vertical`, `Controls the visibility of the vertical scrollbar.`)
        },
        "editor.scrollbar.horizontal": {
          type: `string`,
          enum: [
            `auto`,
            `visible`,
            `hidden`
          ],
          enumDescriptions: [
            T(`scrollbar.horizontal.auto`, `The horizontal scrollbar will be visible only when necessary.`),
            T(`scrollbar.horizontal.visible`, `The horizontal scrollbar will always be visible.`),
            T(`scrollbar.horizontal.fit`, `The horizontal scrollbar will always be hidden.`)
          ],
          default: `auto`,
          description: T(`scrollbar.horizontal`, `Controls the visibility of the horizontal scrollbar.`)
        },
        "editor.scrollbar.verticalScrollbarSize": {
          type: `number`,
          default: e10.verticalScrollbarSize,
          description: T(`scrollbar.verticalScrollbarSize`, `The width of the vertical scrollbar.`)
        },
        "editor.scrollbar.horizontalScrollbarSize": {
          type: `number`,
          default: e10.horizontalScrollbarSize,
          description: T(`scrollbar.horizontalScrollbarSize`, `The height of the horizontal scrollbar.`)
        },
        "editor.scrollbar.scrollByPage": {
          type: `boolean`,
          default: e10.scrollByPage,
          description: T(`scrollbar.scrollByPage`, `Controls whether clicks scroll by page or jump to click position.`)
        },
        "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": {
          type: `boolean`,
          default: e10.ignoreHorizontalScrollbarInContentHeight,
          description: T(`scrollbar.ignoreHorizontalScrollbarInContentHeight`, `When set, the horizontal scrollbar will not increase the size of the editor's content.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10, n10 = nn.clampedInt(t10.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1e3), r10 = nn.clampedInt(t10.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1e3);
      return {
        arrowSize: nn.clampedInt(t10.arrowSize, this.defaultValue.arrowSize, 0, 1e3),
        vertical: Gn(t10.vertical, this.defaultValue.vertical),
        horizontal: Gn(t10.horizontal, this.defaultValue.horizontal),
        useShadows: D(t10.useShadows, this.defaultValue.useShadows),
        verticalHasArrows: D(t10.verticalHasArrows, this.defaultValue.verticalHasArrows),
        horizontalHasArrows: D(t10.horizontalHasArrows, this.defaultValue.horizontalHasArrows),
        handleMouseWheel: D(t10.handleMouseWheel, this.defaultValue.handleMouseWheel),
        alwaysConsumeMouseWheel: D(t10.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),
        horizontalScrollbarSize: n10,
        horizontalSliderSize: nn.clampedInt(t10.horizontalSliderSize, n10, 0, 1e3),
        verticalScrollbarSize: r10,
        verticalSliderSize: nn.clampedInt(t10.verticalSliderSize, r10, 0, 1e3),
        scrollByPage: D(t10.scrollByPage, this.defaultValue.scrollByPage),
        ignoreHorizontalScrollbarInContentHeight: D(t10.ignoreHorizontalScrollbarInContentHeight, this.defaultValue.ignoreHorizontalScrollbarInContentHeight)
      };
    }
  };
  qn = `inUntrustedWorkspace`;
  Jn = {
    allowedCharacters: `editor.unicodeHighlight.allowedCharacters`,
    invisibleCharacters: `editor.unicodeHighlight.invisibleCharacters`,
    nonBasicASCII: `editor.unicodeHighlight.nonBasicASCII`,
    ambiguousCharacters: `editor.unicodeHighlight.ambiguousCharacters`,
    includeComments: `editor.unicodeHighlight.includeComments`,
    includeStrings: `editor.unicodeHighlight.includeStrings`,
    allowedLocales: `editor.unicodeHighlight.allowedLocales`
  };
  var Yn = class extends Yt {
    constructor() {
      let e10 = {
        nonBasicASCII: qn,
        invisibleCharacters: true,
        ambiguousCharacters: true,
        includeComments: qn,
        includeStrings: true,
        allowedCharacters: {},
        allowedLocales: {
          _os: true,
          _vscode: true
        }
      };
      super(126, `unicodeHighlight`, e10, {
        [Jn.nonBasicASCII]: {
          restricted: true,
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            false,
            qn
          ],
          default: e10.nonBasicASCII,
          description: T(`unicodeHighlight.nonBasicASCII`, `Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.`)
        },
        [Jn.invisibleCharacters]: {
          restricted: true,
          type: `boolean`,
          default: e10.invisibleCharacters,
          description: T(`unicodeHighlight.invisibleCharacters`, `Controls whether characters that just reserve space or have no width at all are highlighted.`)
        },
        [Jn.ambiguousCharacters]: {
          restricted: true,
          type: `boolean`,
          default: e10.ambiguousCharacters,
          description: T(`unicodeHighlight.ambiguousCharacters`, `Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.`)
        },
        [Jn.includeComments]: {
          restricted: true,
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            false,
            qn
          ],
          default: e10.includeComments,
          description: T(`unicodeHighlight.includeComments`, `Controls whether characters in comments should also be subject to Unicode highlighting.`)
        },
        [Jn.includeStrings]: {
          restricted: true,
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            false,
            qn
          ],
          default: e10.includeStrings,
          description: T(`unicodeHighlight.includeStrings`, `Controls whether characters in strings should also be subject to Unicode highlighting.`)
        },
        [Jn.allowedCharacters]: {
          restricted: true,
          type: `object`,
          default: e10.allowedCharacters,
          description: T(`unicodeHighlight.allowedCharacters`, `Defines allowed characters that are not being highlighted.`),
          additionalProperties: {
            type: `boolean`
          }
        },
        [Jn.allowedLocales]: {
          restricted: true,
          type: `object`,
          additionalProperties: {
            type: `boolean`
          },
          default: e10.allowedLocales,
          description: T(`unicodeHighlight.allowedLocales`, `Unicode characters that are common in allowed locales are not being highlighted.`)
        }
      });
    }
    applyUpdate(e10, t10) {
      let n10 = false;
      t10.allowedCharacters && e10 && (Le(e10.allowedCharacters, t10.allowedCharacters) || (e10 = {
        ...e10,
        allowedCharacters: t10.allowedCharacters
      }, n10 = true)), t10.allowedLocales && e10 && (Le(e10.allowedLocales, t10.allowedLocales) || (e10 = {
        ...e10,
        allowedLocales: t10.allowedLocales
      }, n10 = true));
      let r10 = super.applyUpdate(e10, t10);
      return n10 ? new Xt(r10.newValue, true) : r10;
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        nonBasicASCII: er(t10.nonBasicASCII, qn, [
          true,
          false,
          qn
        ]),
        invisibleCharacters: D(t10.invisibleCharacters, this.defaultValue.invisibleCharacters),
        ambiguousCharacters: D(t10.ambiguousCharacters, this.defaultValue.ambiguousCharacters),
        includeComments: er(t10.includeComments, qn, [
          true,
          false,
          qn
        ]),
        includeStrings: er(t10.includeStrings, qn, [
          true,
          false,
          qn
        ]),
        allowedCharacters: this.validateBooleanMap(e10.allowedCharacters, this.defaultValue.allowedCharacters),
        allowedLocales: this.validateBooleanMap(e10.allowedLocales, this.defaultValue.allowedLocales)
      };
    }
    validateBooleanMap(e10, t10) {
      if (typeof e10 != `object` || !e10) return t10;
      let n10 = {};
      for (let [t11, r10] of Object.entries(e10)) r10 === true && (n10[t11] = true);
      return n10;
    }
  }, Xn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        mode: `subwordSmart`,
        showToolbar: `onHover`,
        suppressSuggestions: false,
        keepOnBlur: false,
        fontFamily: `default`
      };
      super(62, `inlineSuggest`, e10, {
        "editor.inlineSuggest.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`inlineSuggest.enabled`, `Controls whether to automatically show inline suggestions in the editor.`)
        },
        "editor.inlineSuggest.showToolbar": {
          type: `string`,
          default: e10.showToolbar,
          enum: [
            `always`,
            `onHover`,
            `never`
          ],
          enumDescriptions: [
            T(`inlineSuggest.showToolbar.always`, `Show the inline suggestion toolbar whenever an inline suggestion is shown.`),
            T(`inlineSuggest.showToolbar.onHover`, `Show the inline suggestion toolbar when hovering over an inline suggestion.`),
            T(`inlineSuggest.showToolbar.never`, `Never show the inline suggestion toolbar.`)
          ],
          description: T(`inlineSuggest.showToolbar`, `Controls when to show the inline suggestion toolbar.`)
        },
        "editor.inlineSuggest.suppressSuggestions": {
          type: `boolean`,
          default: e10.suppressSuggestions,
          description: T(`inlineSuggest.suppressSuggestions`, `Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.`)
        },
        "editor.inlineSuggest.fontFamily": {
          type: `string`,
          default: e10.fontFamily,
          description: T(`inlineSuggest.fontFamily`, `Controls the font family of the inline suggestions.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        mode: sn(t10.mode, this.defaultValue.mode, [
          `prefix`,
          `subword`,
          `subwordSmart`
        ]),
        showToolbar: sn(t10.showToolbar, this.defaultValue.showToolbar, [
          `always`,
          `onHover`,
          `never`
        ]),
        suppressSuggestions: D(t10.suppressSuggestions, this.defaultValue.suppressSuggestions),
        keepOnBlur: D(t10.keepOnBlur, this.defaultValue.keepOnBlur),
        fontFamily: on.string(t10.fontFamily, this.defaultValue.fontFamily)
      };
    }
  }, Zn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: false,
        showToolbar: `onHover`,
        fontFamily: `default`,
        keepOnBlur: false
      };
      super(63, `experimentalInlineEdit`, e10, {
        "editor.experimentalInlineEdit.enabled": {
          type: `boolean`,
          default: e10.enabled,
          description: T(`inlineEdit.enabled`, `Controls whether to show inline edits in the editor.`)
        },
        "editor.experimentalInlineEdit.showToolbar": {
          type: `string`,
          default: e10.showToolbar,
          enum: [
            `always`,
            `onHover`,
            `never`
          ],
          enumDescriptions: [
            T(`inlineEdit.showToolbar.always`, `Show the inline edit toolbar whenever an inline suggestion is shown.`),
            T(`inlineEdit.showToolbar.onHover`, `Show the inline edit toolbar when hovering over an inline suggestion.`),
            T(`inlineEdit.showToolbar.never`, `Never show the inline edit toolbar.`)
          ],
          description: T(`inlineEdit.showToolbar`, `Controls when to show the inline edit toolbar.`)
        },
        "editor.experimentalInlineEdit.fontFamily": {
          type: `string`,
          default: e10.fontFamily,
          description: T(`inlineEdit.fontFamily`, `Controls the font family of the inline edit.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        showToolbar: sn(t10.showToolbar, this.defaultValue.showToolbar, [
          `always`,
          `onHover`,
          `never`
        ]),
        fontFamily: on.string(t10.fontFamily, this.defaultValue.fontFamily),
        keepOnBlur: D(t10.keepOnBlur, this.defaultValue.keepOnBlur)
      };
    }
  }, Qn = class extends Yt {
    constructor() {
      let e10 = {
        enabled: Ft.bracketPairColorizationOptions.enabled,
        independentColorPoolPerBracketType: Ft.bracketPairColorizationOptions.independentColorPoolPerBracketType
      };
      super(15, `bracketPairColorization`, e10, {
        "editor.bracketPairColorization.enabled": {
          type: `boolean`,
          default: e10.enabled,
          markdownDescription: T(`bracketPairColorization.enabled`, `Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.`, "`#workbench.colorCustomizations#`")
        },
        "editor.bracketPairColorization.independentColorPoolPerBracketType": {
          type: `boolean`,
          default: e10.independentColorPoolPerBracketType,
          description: T(`bracketPairColorization.independentColorPoolPerBracketType`, `Controls whether each bracket type has its own independent color pool.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        independentColorPoolPerBracketType: D(t10.independentColorPoolPerBracketType, this.defaultValue.independentColorPoolPerBracketType)
      };
    }
  }, $n = class extends Yt {
    constructor() {
      let e10 = {
        bracketPairs: false,
        bracketPairsHorizontal: `active`,
        highlightActiveBracketPair: true,
        indentation: true,
        highlightActiveIndentation: true
      };
      super(16, `guides`, e10, {
        "editor.guides.bracketPairs": {
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            `active`,
            false
          ],
          enumDescriptions: [
            T(`editor.guides.bracketPairs.true`, `Enables bracket pair guides.`),
            T(`editor.guides.bracketPairs.active`, `Enables bracket pair guides only for the active bracket pair.`),
            T(`editor.guides.bracketPairs.false`, `Disables bracket pair guides.`)
          ],
          default: e10.bracketPairs,
          description: T(`editor.guides.bracketPairs`, `Controls whether bracket pair guides are enabled or not.`)
        },
        "editor.guides.bracketPairsHorizontal": {
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            `active`,
            false
          ],
          enumDescriptions: [
            T(`editor.guides.bracketPairsHorizontal.true`, `Enables horizontal guides as addition to vertical bracket pair guides.`),
            T(`editor.guides.bracketPairsHorizontal.active`, `Enables horizontal guides only for the active bracket pair.`),
            T(`editor.guides.bracketPairsHorizontal.false`, `Disables horizontal bracket pair guides.`)
          ],
          default: e10.bracketPairsHorizontal,
          description: T(`editor.guides.bracketPairsHorizontal`, `Controls whether horizontal bracket pair guides are enabled or not.`)
        },
        "editor.guides.highlightActiveBracketPair": {
          type: `boolean`,
          default: e10.highlightActiveBracketPair,
          description: T(`editor.guides.highlightActiveBracketPair`, `Controls whether the editor should highlight the active bracket pair.`)
        },
        "editor.guides.indentation": {
          type: `boolean`,
          default: e10.indentation,
          description: T(`editor.guides.indentation`, `Controls whether the editor should render indent guides.`)
        },
        "editor.guides.highlightActiveIndentation": {
          type: [
            `boolean`,
            `string`
          ],
          enum: [
            true,
            `always`,
            false
          ],
          enumDescriptions: [
            T(`editor.guides.highlightActiveIndentation.true`, `Highlights the active indent guide.`),
            T(`editor.guides.highlightActiveIndentation.always`, `Highlights the active indent guide even if bracket guides are highlighted.`),
            T(`editor.guides.highlightActiveIndentation.false`, `Do not highlight the active indent guide.`)
          ],
          default: e10.highlightActiveIndentation,
          description: T(`editor.guides.highlightActiveIndentation`, `Controls whether the editor should highlight the active indent guide.`)
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        bracketPairs: er(t10.bracketPairs, this.defaultValue.bracketPairs, [
          true,
          false,
          `active`
        ]),
        bracketPairsHorizontal: er(t10.bracketPairsHorizontal, this.defaultValue.bracketPairsHorizontal, [
          true,
          false,
          `active`
        ]),
        highlightActiveBracketPair: D(t10.highlightActiveBracketPair, this.defaultValue.highlightActiveBracketPair),
        indentation: D(t10.indentation, this.defaultValue.indentation),
        highlightActiveIndentation: er(t10.highlightActiveIndentation, this.defaultValue.highlightActiveIndentation, [
          true,
          false,
          `always`
        ])
      };
    }
  };
  function er(e10, t10, n10) {
    let r10 = n10.indexOf(e10);
    return r10 === -1 ? t10 : n10[r10];
  }
  var tr = class extends Yt {
    constructor() {
      let e10 = {
        insertMode: `insert`,
        filterGraceful: true,
        snippetsPreventQuickSuggestions: false,
        localityBonus: false,
        shareSuggestSelections: false,
        selectionMode: `always`,
        showIcons: true,
        showStatusBar: false,
        preview: false,
        previewMode: `subwordSmart`,
        showInlineDetails: true,
        showMethods: true,
        showFunctions: true,
        showConstructors: true,
        showDeprecated: true,
        matchOnWordStartOnly: true,
        showFields: true,
        showVariables: true,
        showClasses: true,
        showStructs: true,
        showInterfaces: true,
        showModules: true,
        showProperties: true,
        showEvents: true,
        showOperators: true,
        showUnits: true,
        showValues: true,
        showConstants: true,
        showEnums: true,
        showEnumMembers: true,
        showKeywords: true,
        showWords: true,
        showColors: true,
        showFiles: true,
        showReferences: true,
        showFolders: true,
        showTypeParameters: true,
        showSnippets: true,
        showUsers: true,
        showIssues: true
      };
      super(119, `suggest`, e10, {
        "editor.suggest.insertMode": {
          type: `string`,
          enum: [
            `insert`,
            `replace`
          ],
          enumDescriptions: [
            T(`suggest.insertMode.insert`, `Insert suggestion without overwriting text right of the cursor.`),
            T(`suggest.insertMode.replace`, `Insert suggestion and overwrite text right of the cursor.`)
          ],
          default: e10.insertMode,
          description: T(`suggest.insertMode`, `Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.`)
        },
        "editor.suggest.filterGraceful": {
          type: `boolean`,
          default: e10.filterGraceful,
          description: T(`suggest.filterGraceful`, `Controls whether filtering and sorting suggestions accounts for small typos.`)
        },
        "editor.suggest.localityBonus": {
          type: `boolean`,
          default: e10.localityBonus,
          description: T(`suggest.localityBonus`, `Controls whether sorting favors words that appear close to the cursor.`)
        },
        "editor.suggest.shareSuggestSelections": {
          type: `boolean`,
          default: e10.shareSuggestSelections,
          markdownDescription: T(`suggest.shareSuggestSelections`, "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).")
        },
        "editor.suggest.selectionMode": {
          type: `string`,
          enum: [
            `always`,
            `never`,
            `whenTriggerCharacter`,
            `whenQuickSuggestion`
          ],
          enumDescriptions: [
            T(`suggest.insertMode.always`, `Always select a suggestion when automatically triggering IntelliSense.`),
            T(`suggest.insertMode.never`, `Never select a suggestion when automatically triggering IntelliSense.`),
            T(`suggest.insertMode.whenTriggerCharacter`, `Select a suggestion only when triggering IntelliSense from a trigger character.`),
            T(`suggest.insertMode.whenQuickSuggestion`, `Select a suggestion only when triggering IntelliSense as you type.`)
          ],
          default: e10.selectionMode,
          markdownDescription: T(`suggest.selectionMode`, "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions ({0} and {1}) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.", "`#editor.quickSuggestions#`", "`#editor.suggestOnTriggerCharacters#`")
        },
        "editor.suggest.snippetsPreventQuickSuggestions": {
          type: `boolean`,
          default: e10.snippetsPreventQuickSuggestions,
          description: T(`suggest.snippetsPreventQuickSuggestions`, `Controls whether an active snippet prevents quick suggestions.`)
        },
        "editor.suggest.showIcons": {
          type: `boolean`,
          default: e10.showIcons,
          description: T(`suggest.showIcons`, `Controls whether to show or hide icons in suggestions.`)
        },
        "editor.suggest.showStatusBar": {
          type: `boolean`,
          default: e10.showStatusBar,
          description: T(`suggest.showStatusBar`, `Controls the visibility of the status bar at the bottom of the suggest widget.`)
        },
        "editor.suggest.preview": {
          type: `boolean`,
          default: e10.preview,
          description: T(`suggest.preview`, `Controls whether to preview the suggestion outcome in the editor.`)
        },
        "editor.suggest.showInlineDetails": {
          type: `boolean`,
          default: e10.showInlineDetails,
          description: T(`suggest.showInlineDetails`, `Controls whether suggest details show inline with the label or only in the details widget.`)
        },
        "editor.suggest.maxVisibleSuggestions": {
          type: `number`,
          deprecationMessage: T(`suggest.maxVisibleSuggestions.dep`, `This setting is deprecated. The suggest widget can now be resized.`)
        },
        "editor.suggest.filteredTypes": {
          type: `object`,
          deprecationMessage: T(`deprecated`, `This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.`)
        },
        "editor.suggest.showMethods": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showMethods`, "When enabled IntelliSense shows `method`-suggestions.")
        },
        "editor.suggest.showFunctions": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showFunctions`, "When enabled IntelliSense shows `function`-suggestions.")
        },
        "editor.suggest.showConstructors": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showConstructors`, "When enabled IntelliSense shows `constructor`-suggestions.")
        },
        "editor.suggest.showDeprecated": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showDeprecated`, "When enabled IntelliSense shows `deprecated`-suggestions.")
        },
        "editor.suggest.matchOnWordStartOnly": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.matchOnWordStartOnly`, "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.")
        },
        "editor.suggest.showFields": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showFields`, "When enabled IntelliSense shows `field`-suggestions.")
        },
        "editor.suggest.showVariables": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showVariables`, "When enabled IntelliSense shows `variable`-suggestions.")
        },
        "editor.suggest.showClasses": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showClasss`, "When enabled IntelliSense shows `class`-suggestions.")
        },
        "editor.suggest.showStructs": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showStructs`, "When enabled IntelliSense shows `struct`-suggestions.")
        },
        "editor.suggest.showInterfaces": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showInterfaces`, "When enabled IntelliSense shows `interface`-suggestions.")
        },
        "editor.suggest.showModules": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showModules`, "When enabled IntelliSense shows `module`-suggestions.")
        },
        "editor.suggest.showProperties": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showPropertys`, "When enabled IntelliSense shows `property`-suggestions.")
        },
        "editor.suggest.showEvents": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showEvents`, "When enabled IntelliSense shows `event`-suggestions.")
        },
        "editor.suggest.showOperators": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showOperators`, "When enabled IntelliSense shows `operator`-suggestions.")
        },
        "editor.suggest.showUnits": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showUnits`, "When enabled IntelliSense shows `unit`-suggestions.")
        },
        "editor.suggest.showValues": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showValues`, "When enabled IntelliSense shows `value`-suggestions.")
        },
        "editor.suggest.showConstants": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showConstants`, "When enabled IntelliSense shows `constant`-suggestions.")
        },
        "editor.suggest.showEnums": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showEnums`, "When enabled IntelliSense shows `enum`-suggestions.")
        },
        "editor.suggest.showEnumMembers": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showEnumMembers`, "When enabled IntelliSense shows `enumMember`-suggestions.")
        },
        "editor.suggest.showKeywords": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showKeywords`, "When enabled IntelliSense shows `keyword`-suggestions.")
        },
        "editor.suggest.showWords": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showTexts`, "When enabled IntelliSense shows `text`-suggestions.")
        },
        "editor.suggest.showColors": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showColors`, "When enabled IntelliSense shows `color`-suggestions.")
        },
        "editor.suggest.showFiles": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showFiles`, "When enabled IntelliSense shows `file`-suggestions.")
        },
        "editor.suggest.showReferences": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showReferences`, "When enabled IntelliSense shows `reference`-suggestions.")
        },
        "editor.suggest.showCustomcolors": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showCustomcolors`, "When enabled IntelliSense shows `customcolor`-suggestions.")
        },
        "editor.suggest.showFolders": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showFolders`, "When enabled IntelliSense shows `folder`-suggestions.")
        },
        "editor.suggest.showTypeParameters": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showTypeParameters`, "When enabled IntelliSense shows `typeParameter`-suggestions.")
        },
        "editor.suggest.showSnippets": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showSnippets`, "When enabled IntelliSense shows `snippet`-suggestions.")
        },
        "editor.suggest.showUsers": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showUsers`, "When enabled IntelliSense shows `user`-suggestions.")
        },
        "editor.suggest.showIssues": {
          type: `boolean`,
          default: true,
          markdownDescription: T(`editor.suggest.showIssues`, "When enabled IntelliSense shows `issues`-suggestions.")
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        insertMode: sn(t10.insertMode, this.defaultValue.insertMode, [
          `insert`,
          `replace`
        ]),
        filterGraceful: D(t10.filterGraceful, this.defaultValue.filterGraceful),
        snippetsPreventQuickSuggestions: D(t10.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),
        localityBonus: D(t10.localityBonus, this.defaultValue.localityBonus),
        shareSuggestSelections: D(t10.shareSuggestSelections, this.defaultValue.shareSuggestSelections),
        selectionMode: sn(t10.selectionMode, this.defaultValue.selectionMode, [
          `always`,
          `never`,
          `whenQuickSuggestion`,
          `whenTriggerCharacter`
        ]),
        showIcons: D(t10.showIcons, this.defaultValue.showIcons),
        showStatusBar: D(t10.showStatusBar, this.defaultValue.showStatusBar),
        preview: D(t10.preview, this.defaultValue.preview),
        previewMode: sn(t10.previewMode, this.defaultValue.previewMode, [
          `prefix`,
          `subword`,
          `subwordSmart`
        ]),
        showInlineDetails: D(t10.showInlineDetails, this.defaultValue.showInlineDetails),
        showMethods: D(t10.showMethods, this.defaultValue.showMethods),
        showFunctions: D(t10.showFunctions, this.defaultValue.showFunctions),
        showConstructors: D(t10.showConstructors, this.defaultValue.showConstructors),
        showDeprecated: D(t10.showDeprecated, this.defaultValue.showDeprecated),
        matchOnWordStartOnly: D(t10.matchOnWordStartOnly, this.defaultValue.matchOnWordStartOnly),
        showFields: D(t10.showFields, this.defaultValue.showFields),
        showVariables: D(t10.showVariables, this.defaultValue.showVariables),
        showClasses: D(t10.showClasses, this.defaultValue.showClasses),
        showStructs: D(t10.showStructs, this.defaultValue.showStructs),
        showInterfaces: D(t10.showInterfaces, this.defaultValue.showInterfaces),
        showModules: D(t10.showModules, this.defaultValue.showModules),
        showProperties: D(t10.showProperties, this.defaultValue.showProperties),
        showEvents: D(t10.showEvents, this.defaultValue.showEvents),
        showOperators: D(t10.showOperators, this.defaultValue.showOperators),
        showUnits: D(t10.showUnits, this.defaultValue.showUnits),
        showValues: D(t10.showValues, this.defaultValue.showValues),
        showConstants: D(t10.showConstants, this.defaultValue.showConstants),
        showEnums: D(t10.showEnums, this.defaultValue.showEnums),
        showEnumMembers: D(t10.showEnumMembers, this.defaultValue.showEnumMembers),
        showKeywords: D(t10.showKeywords, this.defaultValue.showKeywords),
        showWords: D(t10.showWords, this.defaultValue.showWords),
        showColors: D(t10.showColors, this.defaultValue.showColors),
        showFiles: D(t10.showFiles, this.defaultValue.showFiles),
        showReferences: D(t10.showReferences, this.defaultValue.showReferences),
        showFolders: D(t10.showFolders, this.defaultValue.showFolders),
        showTypeParameters: D(t10.showTypeParameters, this.defaultValue.showTypeParameters),
        showSnippets: D(t10.showSnippets, this.defaultValue.showSnippets),
        showUsers: D(t10.showUsers, this.defaultValue.showUsers),
        showIssues: D(t10.showIssues, this.defaultValue.showIssues)
      };
    }
  }, nr = class extends Yt {
    constructor() {
      super(114, `smartSelect`, {
        selectLeadingAndTrailingWhitespace: true,
        selectSubwords: true
      }, {
        "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
          description: T(`selectLeadingAndTrailingWhitespace`, `Whether leading and trailing whitespace should always be selected.`),
          default: true,
          type: `boolean`
        },
        "editor.smartSelect.selectSubwords": {
          description: T(`selectSubwords`, `Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.`),
          default: true,
          type: `boolean`
        }
      });
    }
    validate(e10) {
      return !e10 || typeof e10 != `object` ? this.defaultValue : {
        selectLeadingAndTrailingWhitespace: D(e10.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace),
        selectSubwords: D(e10.selectSubwords, this.defaultValue.selectSubwords)
      };
    }
  }, rr = class extends Yt {
    constructor() {
      let e10 = [];
      super(131, `wordSegmenterLocales`, e10, {
        anyOf: [
          {
            description: T(`wordSegmenterLocales`, `Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.).`),
            type: `string`
          },
          {
            description: T(`wordSegmenterLocales`, `Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.).`),
            type: `array`,
            items: {
              type: `string`
            }
          }
        ]
      });
    }
    validate(e10) {
      if (typeof e10 == `string` && (e10 = [
        e10
      ]), Array.isArray(e10)) {
        let t10 = [];
        for (let n10 of e10) if (typeof n10 == `string`) try {
          Intl.Segmenter.supportedLocalesOf(n10).length > 0 && t10.push(n10);
        } catch {
        }
        return t10;
      }
      return this.defaultValue;
    }
  }, ir = class extends Yt {
    constructor() {
      super(139, `wrappingIndent`, 1, {
        "editor.wrappingIndent": {
          type: `string`,
          enum: [
            `none`,
            `same`,
            `indent`,
            `deepIndent`
          ],
          enumDescriptions: [
            T(`wrappingIndent.none`, `No indentation. Wrapped lines begin at column 1.`),
            T(`wrappingIndent.same`, `Wrapped lines get the same indentation as the parent.`),
            T(`wrappingIndent.indent`, `Wrapped lines get +1 indentation toward the parent.`),
            T(`wrappingIndent.deepIndent`, `Wrapped lines get +2 indentation toward the parent.`)
          ],
          description: T(`wrappingIndent`, `Controls the indentation of wrapped lines.`),
          default: `same`
        }
      });
    }
    validate(e10) {
      switch (e10) {
        case `none`:
          return 0;
        case `same`:
          return 1;
        case `indent`:
          return 2;
        case `deepIndent`:
          return 3;
      }
      return 1;
    }
    compute(e10, t10, n10) {
      let r10 = t10.get(2);
      return r10 === 2 ? 0 : n10;
    }
  }, ar = class extends Qt {
    constructor() {
      super(147);
    }
    compute(e10, t10, n10) {
      let r10 = t10.get(146);
      return {
        isDominatedByLongLines: e10.isDominatedByLongLines,
        isWordWrapMinified: r10.isWordWrapMinified,
        isViewportWrapping: r10.isViewportWrapping,
        wrappingColumn: r10.wrappingColumn
      };
    }
  }, or = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        showDropSelector: `afterDrop`
      };
      super(36, `dropIntoEditor`, e10, {
        "editor.dropIntoEditor.enabled": {
          type: `boolean`,
          default: e10.enabled,
          markdownDescription: T(`dropIntoEditor.enabled`, "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor).")
        },
        "editor.dropIntoEditor.showDropSelector": {
          type: `string`,
          markdownDescription: T(`dropIntoEditor.showDropSelector`, `Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.`),
          enum: [
            `afterDrop`,
            `never`
          ],
          enumDescriptions: [
            T(`dropIntoEditor.showDropSelector.afterDrop`, `Show the drop selector widget after a file is dropped into the editor.`),
            T(`dropIntoEditor.showDropSelector.never`, `Never show the drop selector widget. Instead the default drop provider is always used.`)
          ],
          default: `afterDrop`
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        showDropSelector: sn(t10.showDropSelector, this.defaultValue.showDropSelector, [
          `afterDrop`,
          `never`
        ])
      };
    }
  }, sr = class extends Yt {
    constructor() {
      let e10 = {
        enabled: true,
        showPasteSelector: `afterPaste`
      };
      super(85, `pasteAs`, e10, {
        "editor.pasteAs.enabled": {
          type: `boolean`,
          default: e10.enabled,
          markdownDescription: T(`pasteAs.enabled`, `Controls whether you can paste content in different ways.`)
        },
        "editor.pasteAs.showPasteSelector": {
          type: `string`,
          markdownDescription: T(`pasteAs.showPasteSelector`, `Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.`),
          enum: [
            `afterPaste`,
            `never`
          ],
          enumDescriptions: [
            T(`pasteAs.showPasteSelector.afterPaste`, `Show the paste selector widget after content is pasted into the editor.`),
            T(`pasteAs.showPasteSelector.never`, `Never show the paste selector widget. Instead the default pasting behavior is always used.`)
          ],
          default: `afterPaste`
        }
      });
    }
    validate(e10) {
      if (!e10 || typeof e10 != `object`) return this.defaultValue;
      let t10 = e10;
      return {
        enabled: D(t10.enabled, this.defaultValue.enabled),
        showPasteSelector: sn(t10.showPasteSelector, this.defaultValue.showPasteSelector, [
          `afterPaste`,
          `never`
        ])
      };
    }
  };
  let cr, lr, ur, fr;
  cr = `Consolas, 'Courier New', monospace`;
  lr = `Menlo, Monaco, 'Courier New', monospace`;
  ur = `'Droid Sans Mono', 'monospace', monospace`;
  dr = {
    fontFamily: E ? lr : ht ? ur : cr,
    fontWeight: `normal`,
    fontSize: E ? 12 : 14,
    lineHeight: 0,
    letterSpacing: 0
  };
  fr = [];
  function O(e10) {
    return fr[e10.id] = e10, e10;
  }
  pr = {
    acceptSuggestionOnCommitCharacter: O(new en(0, `acceptSuggestionOnCommitCharacter`, true, {
      markdownDescription: T(`acceptSuggestionOnCommitCharacter`, "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.")
    })),
    acceptSuggestionOnEnter: O(new cn(1, `acceptSuggestionOnEnter`, `on`, [
      `on`,
      `smart`,
      `off`
    ], {
      markdownEnumDescriptions: [
        ``,
        T(`acceptSuggestionOnEnterSmart`, "Only accept a suggestion with `Enter` when it makes a textual change."),
        ``
      ],
      markdownDescription: T(`acceptSuggestionOnEnter`, "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.")
    })),
    accessibilitySupport: O(new dn()),
    accessibilityPageSize: O(new nn(3, `accessibilityPageSize`, 10, 1, 1073741824, {
      description: T(`accessibilityPageSize`, `Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.`),
      tags: [
        `accessibility`
      ]
    })),
    ariaLabel: O(new on(4, `ariaLabel`, T(`editorViewAccessibleLabel`, `Editor content`))),
    ariaRequired: O(new en(5, `ariaRequired`, false, void 0)),
    screenReaderAnnounceInlineSuggestion: O(new en(8, `screenReaderAnnounceInlineSuggestion`, true, {
      description: T(`screenReaderAnnounceInlineSuggestion`, `Control whether inline suggestions are announced by a screen reader.`),
      tags: [
        `accessibility`
      ]
    })),
    autoClosingBrackets: O(new cn(6, `autoClosingBrackets`, `languageDefined`, [
      `always`,
      `languageDefined`,
      `beforeWhitespace`,
      `never`
    ], {
      enumDescriptions: [
        ``,
        T(`editor.autoClosingBrackets.languageDefined`, `Use language configurations to determine when to autoclose brackets.`),
        T(`editor.autoClosingBrackets.beforeWhitespace`, `Autoclose brackets only when the cursor is to the left of whitespace.`),
        ``
      ],
      description: T(`autoClosingBrackets`, `Controls whether the editor should automatically close brackets after the user adds an opening bracket.`)
    })),
    autoClosingComments: O(new cn(7, `autoClosingComments`, `languageDefined`, [
      `always`,
      `languageDefined`,
      `beforeWhitespace`,
      `never`
    ], {
      enumDescriptions: [
        ``,
        T(`editor.autoClosingComments.languageDefined`, `Use language configurations to determine when to autoclose comments.`),
        T(`editor.autoClosingComments.beforeWhitespace`, `Autoclose comments only when the cursor is to the left of whitespace.`),
        ``
      ],
      description: T(`autoClosingComments`, `Controls whether the editor should automatically close comments after the user adds an opening comment.`)
    })),
    autoClosingDelete: O(new cn(9, `autoClosingDelete`, `auto`, [
      `always`,
      `auto`,
      `never`
    ], {
      enumDescriptions: [
        ``,
        T(`editor.autoClosingDelete.auto`, `Remove adjacent closing quotes or brackets only if they were automatically inserted.`),
        ``
      ],
      description: T(`autoClosingDelete`, `Controls whether the editor should remove adjacent closing quotes or brackets when deleting.`)
    })),
    autoClosingOvertype: O(new cn(10, `autoClosingOvertype`, `auto`, [
      `always`,
      `auto`,
      `never`
    ], {
      enumDescriptions: [
        ``,
        T(`editor.autoClosingOvertype.auto`, `Type over closing quotes or brackets only if they were automatically inserted.`),
        ``
      ],
      description: T(`autoClosingOvertype`, `Controls whether the editor should type over closing quotes or brackets.`)
    })),
    autoClosingQuotes: O(new cn(11, `autoClosingQuotes`, `languageDefined`, [
      `always`,
      `languageDefined`,
      `beforeWhitespace`,
      `never`
    ], {
      enumDescriptions: [
        ``,
        T(`editor.autoClosingQuotes.languageDefined`, `Use language configurations to determine when to autoclose quotes.`),
        T(`editor.autoClosingQuotes.beforeWhitespace`, `Autoclose quotes only when the cursor is to the left of whitespace.`),
        ``
      ],
      description: T(`autoClosingQuotes`, `Controls whether the editor should automatically close quotes after the user adds an opening quote.`)
    })),
    autoIndent: O(new ln(12, `autoIndent`, 4, `full`, [
      `none`,
      `keep`,
      `brackets`,
      `advanced`,
      `full`
    ], un, {
      enumDescriptions: [
        T(`editor.autoIndent.none`, `The editor will not insert indentation automatically.`),
        T(`editor.autoIndent.keep`, `The editor will keep the current line's indentation.`),
        T(`editor.autoIndent.brackets`, `The editor will keep the current line's indentation and honor language defined brackets.`),
        T(`editor.autoIndent.advanced`, `The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.`),
        T(`editor.autoIndent.full`, `The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.`)
      ],
      description: T(`autoIndent`, `Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.`)
    })),
    automaticLayout: O(new en(13, `automaticLayout`, false)),
    autoSurround: O(new cn(14, `autoSurround`, `languageDefined`, [
      `languageDefined`,
      `quotes`,
      `brackets`,
      `never`
    ], {
      enumDescriptions: [
        T(`editor.autoSurround.languageDefined`, `Use language configurations to determine when to automatically surround selections.`),
        T(`editor.autoSurround.quotes`, `Surround with quotes but not brackets.`),
        T(`editor.autoSurround.brackets`, `Surround with brackets but not quotes.`),
        ``
      ],
      description: T(`autoSurround`, `Controls whether the editor should automatically surround selections when typing quotes or brackets.`)
    })),
    bracketPairColorization: O(new Qn()),
    bracketPairGuides: O(new $n()),
    stickyTabStops: O(new en(117, `stickyTabStops`, false, {
      description: T(`stickyTabStops`, `Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.`)
    })),
    codeLens: O(new en(17, `codeLens`, true, {
      description: T(`codeLens`, `Controls whether the editor shows CodeLens.`)
    })),
    codeLensFontFamily: O(new on(18, `codeLensFontFamily`, ``, {
      description: T(`codeLensFontFamily`, `Controls the font family for CodeLens.`)
    })),
    codeLensFontSize: O(new nn(19, `codeLensFontSize`, 0, 0, 100, {
      type: `number`,
      default: 0,
      minimum: 0,
      maximum: 100,
      markdownDescription: T(`codeLensFontSize`, "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.")
    })),
    colorDecorators: O(new en(20, `colorDecorators`, true, {
      description: T(`colorDecorators`, `Controls whether the editor should render the inline color decorators and color picker.`)
    })),
    colorDecoratorActivatedOn: O(new cn(149, `colorDecoratorsActivatedOn`, `clickAndHover`, [
      `clickAndHover`,
      `hover`,
      `click`
    ], {
      enumDescriptions: [
        T(`editor.colorDecoratorActivatedOn.clickAndHover`, `Make the color picker appear both on click and hover of the color decorator`),
        T(`editor.colorDecoratorActivatedOn.hover`, `Make the color picker appear on hover of the color decorator`),
        T(`editor.colorDecoratorActivatedOn.click`, `Make the color picker appear on click of the color decorator`)
      ],
      description: T(`colorDecoratorActivatedOn`, `Controls the condition to make a color picker appear from a color decorator`)
    })),
    colorDecoratorsLimit: O(new nn(21, `colorDecoratorsLimit`, 500, 1, 1e6, {
      markdownDescription: T(`colorDecoratorsLimit`, `Controls the max number of color decorators that can be rendered in an editor at once.`)
    })),
    columnSelection: O(new en(22, `columnSelection`, false, {
      description: T(`columnSelection`, `Enable that the selection with the mouse and keys is doing column selection.`)
    })),
    comments: O(new fn()),
    contextmenu: O(new en(24, `contextmenu`, true)),
    copyWithSyntaxHighlighting: O(new en(25, `copyWithSyntaxHighlighting`, true, {
      description: T(`copyWithSyntaxHighlighting`, `Controls whether syntax highlighting should be copied into the clipboard.`)
    })),
    cursorBlinking: O(new ln(26, `cursorBlinking`, 1, `blink`, [
      `blink`,
      `smooth`,
      `phase`,
      `expand`,
      `solid`
    ], pn, {
      description: T(`cursorBlinking`, `Control the cursor animation style.`)
    })),
    cursorSmoothCaretAnimation: O(new cn(27, `cursorSmoothCaretAnimation`, `off`, [
      `off`,
      `explicit`,
      `on`
    ], {
      enumDescriptions: [
        T(`cursorSmoothCaretAnimation.off`, `Smooth caret animation is disabled.`),
        T(`cursorSmoothCaretAnimation.explicit`, `Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.`),
        T(`cursorSmoothCaretAnimation.on`, `Smooth caret animation is always enabled.`)
      ],
      description: T(`cursorSmoothCaretAnimation`, `Controls whether the smooth caret animation should be enabled.`)
    })),
    cursorStyle: O(new ln(28, `cursorStyle`, mn.Line, `line`, [
      `line`,
      `block`,
      `underline`,
      `line-thin`,
      `block-outline`,
      `underline-thin`
    ], hn, {
      description: T(`cursorStyle`, `Controls the cursor style.`)
    })),
    cursorSurroundingLines: O(new nn(29, `cursorSurroundingLines`, 0, 0, 1073741824, {
      description: T(`cursorSurroundingLines`, `Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.`)
    })),
    cursorSurroundingLinesStyle: O(new cn(30, `cursorSurroundingLinesStyle`, `default`, [
      `default`,
      `all`
    ], {
      enumDescriptions: [
        T(`cursorSurroundingLinesStyle.default`, "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."),
        T(`cursorSurroundingLinesStyle.all`, "`cursorSurroundingLines` is enforced always.")
      ],
      markdownDescription: T(`cursorSurroundingLinesStyle`, "Controls when `#editor.cursorSurroundingLines#` should be enforced.")
    })),
    cursorWidth: O(new nn(31, `cursorWidth`, 0, 0, 1073741824, {
      markdownDescription: T(`cursorWidth`, "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.")
    })),
    disableLayerHinting: O(new en(32, `disableLayerHinting`, false)),
    disableMonospaceOptimizations: O(new en(33, `disableMonospaceOptimizations`, false)),
    domReadOnly: O(new en(34, `domReadOnly`, false)),
    dragAndDrop: O(new en(35, `dragAndDrop`, true, {
      description: T(`dragAndDrop`, `Controls whether the editor should allow moving selections via drag and drop.`)
    })),
    emptySelectionClipboard: O(new _n()),
    dropIntoEditor: O(new or()),
    stickyScroll: O(new An()),
    experimentalWhitespaceRendering: O(new cn(38, `experimentalWhitespaceRendering`, `svg`, [
      `svg`,
      `font`,
      `off`
    ], {
      enumDescriptions: [
        T(`experimentalWhitespaceRendering.svg`, `Use a new rendering method with svgs.`),
        T(`experimentalWhitespaceRendering.font`, `Use a new rendering method with font characters.`),
        T(`experimentalWhitespaceRendering.off`, `Use the stable rendering method.`)
      ],
      description: T(`experimentalWhitespaceRendering`, `Controls whether whitespace is rendered with a new, experimental method.`)
    })),
    extraEditorClassName: O(new on(39, `extraEditorClassName`, ``)),
    fastScrollSensitivity: O(new an(40, `fastScrollSensitivity`, 5, (e10) => e10 <= 0 ? 5 : e10, {
      markdownDescription: T(`fastScrollSensitivity`, "Scrolling speed multiplier when pressing `Alt`.")
    })),
    find: O(new vn()),
    fixedOverflowWidgets: O(new en(42, `fixedOverflowWidgets`, false)),
    folding: O(new en(43, `folding`, true, {
      description: T(`folding`, `Controls whether the editor has code folding enabled.`)
    })),
    foldingStrategy: O(new cn(44, `foldingStrategy`, `auto`, [
      `auto`,
      `indentation`
    ], {
      enumDescriptions: [
        T(`foldingStrategy.auto`, `Use a language-specific folding strategy if available, else the indentation-based one.`),
        T(`foldingStrategy.indentation`, `Use the indentation-based folding strategy.`)
      ],
      description: T(`foldingStrategy`, `Controls the strategy for computing folding ranges.`)
    })),
    foldingHighlight: O(new en(45, `foldingHighlight`, true, {
      description: T(`foldingHighlight`, `Controls whether the editor should highlight folded ranges.`)
    })),
    foldingImportsByDefault: O(new en(46, `foldingImportsByDefault`, false, {
      description: T(`foldingImportsByDefault`, `Controls whether the editor automatically collapses import ranges.`)
    })),
    foldingMaximumRegions: O(new nn(47, `foldingMaximumRegions`, 5e3, 10, 65e3, {
      description: T(`foldingMaximumRegions`, `The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.`)
    })),
    unfoldOnClickAfterEndOfLine: O(new en(48, `unfoldOnClickAfterEndOfLine`, false, {
      description: T(`unfoldOnClickAfterEndOfLine`, `Controls whether clicking on the empty content after a folded line will unfold the line.`)
    })),
    fontFamily: O(new on(49, `fontFamily`, dr.fontFamily, {
      description: T(`fontFamily`, `Controls the font family.`)
    })),
    fontInfo: O(new xn()),
    fontLigatures2: O(new yn()),
    fontSize: O(new Sn()),
    fontWeight: O(new Cn()),
    fontVariations: O(new bn()),
    formatOnPaste: O(new en(55, `formatOnPaste`, false, {
      description: T(`formatOnPaste`, `Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.`)
    })),
    formatOnType: O(new en(56, `formatOnType`, false, {
      description: T(`formatOnType`, `Controls whether the editor should automatically format the line after typing.`)
    })),
    glyphMargin: O(new en(57, `glyphMargin`, true, {
      description: T(`glyphMargin`, `Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.`)
    })),
    gotoLocation: O(new wn()),
    hideCursorInOverviewRuler: O(new en(59, `hideCursorInOverviewRuler`, false, {
      description: T(`hideCursorInOverviewRuler`, `Controls whether the cursor should be hidden in the overview ruler.`)
    })),
    hover: O(new Tn()),
    inDiffEditor: O(new en(61, `inDiffEditor`, false)),
    letterSpacing: O(new an(64, `letterSpacing`, dr.letterSpacing, (e10) => an.clamp(e10, -5, 20), {
      description: T(`letterSpacing`, `Controls the letter spacing in pixels.`)
    })),
    lightbulb: O(new kn()),
    lineDecorationsWidth: O(new Mn()),
    lineHeight: O(new Nn()),
    lineNumbers: O(new Vn()),
    lineNumbersMinChars: O(new nn(69, `lineNumbersMinChars`, 5, 1, 300)),
    linkedEditing: O(new en(70, `linkedEditing`, false, {
      description: T(`linkedEditing`, `Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.`)
    })),
    links: O(new en(71, `links`, true, {
      description: T(`links`, `Controls whether the editor should detect links and make them clickable.`)
    })),
    matchBrackets: O(new cn(72, `matchBrackets`, `always`, [
      `always`,
      `near`,
      `never`
    ], {
      description: T(`matchBrackets`, `Highlight matching brackets.`)
    })),
    minimap: O(new Pn()),
    mouseStyle: O(new cn(74, `mouseStyle`, `text`, [
      `text`,
      `default`,
      `copy`
    ])),
    mouseWheelScrollSensitivity: O(new an(75, `mouseWheelScrollSensitivity`, 1, (e10) => e10 === 0 ? 1 : e10, {
      markdownDescription: T(`mouseWheelScrollSensitivity`, "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")
    })),
    mouseWheelZoom: O(new en(76, `mouseWheelZoom`, false, {
      markdownDescription: E ? T(`mouseWheelZoom.mac`, "Zoom the font of the editor when using mouse wheel and holding `Cmd`.") : T(`mouseWheelZoom`, "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.")
    })),
    multiCursorMergeOverlapping: O(new en(77, `multiCursorMergeOverlapping`, true, {
      description: T(`multiCursorMergeOverlapping`, `Merge multiple cursors when they are overlapping.`)
    })),
    multiCursorModifier: O(new ln(78, `multiCursorModifier`, `altKey`, `alt`, [
      `ctrlCmd`,
      `alt`
    ], Fn, {
      markdownEnumDescriptions: [
        T(`multiCursorModifier.ctrlCmd`, "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
        T(`multiCursorModifier.alt`, "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
      ],
      markdownDescription: T({
        key: `multiCursorModifier`,
        comment: [
          "- `ctrlCmd` refers to a value the setting can take and should not be localized.",
          "- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized."
        ]
      }, `The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).`)
    })),
    multiCursorPaste: O(new cn(79, `multiCursorPaste`, `spread`, [
      `spread`,
      `full`
    ], {
      markdownEnumDescriptions: [
        T(`multiCursorPaste.spread`, `Each cursor pastes a single line of the text.`),
        T(`multiCursorPaste.full`, `Each cursor pastes the full text.`)
      ],
      markdownDescription: T(`multiCursorPaste`, `Controls pasting when the line count of the pasted text matches the cursor count.`)
    })),
    multiCursorLimit: O(new nn(80, `multiCursorLimit`, 1e4, 1, 1e5, {
      markdownDescription: T(`multiCursorLimit`, `Controls the max number of cursors that can be in an active editor at once.`)
    })),
    occurrencesHighlight: O(new cn(81, `occurrencesHighlight`, `singleFile`, [
      `off`,
      `singleFile`,
      `multiFile`
    ], {
      markdownEnumDescriptions: [
        T(`occurrencesHighlight.off`, `Does not highlight occurrences.`),
        T(`occurrencesHighlight.singleFile`, `Highlights occurrences only in the current file.`),
        T(`occurrencesHighlight.multiFile`, `Experimental: Highlights occurrences across all valid open files.`)
      ],
      markdownDescription: T(`occurrencesHighlight`, `Controls whether occurrences should be highlighted across open files.`)
    })),
    overviewRulerBorder: O(new en(82, `overviewRulerBorder`, true, {
      description: T(`overviewRulerBorder`, `Controls whether a border should be drawn around the overview ruler.`)
    })),
    overviewRulerLanes: O(new nn(83, `overviewRulerLanes`, 3, 0, 3)),
    padding: O(new In()),
    pasteAs: O(new sr()),
    parameterHints: O(new Ln()),
    peekWidgetDefaultFocus: O(new cn(87, `peekWidgetDefaultFocus`, `tree`, [
      `tree`,
      `editor`
    ], {
      enumDescriptions: [
        T(`peekWidgetDefaultFocus.tree`, `Focus the tree when opening peek`),
        T(`peekWidgetDefaultFocus.editor`, `Focus the editor when opening peek`)
      ],
      description: T(`peekWidgetDefaultFocus`, `Controls whether to focus the inline editor or the tree in the peek widget.`)
    })),
    placeholder: O(new zn()),
    definitionLinkOpensInPeek: O(new en(89, `definitionLinkOpensInPeek`, false, {
      description: T(`definitionLinkOpensInPeek`, `Controls whether the Go to Definition mouse gesture always opens the peek widget.`)
    })),
    quickSuggestions: O(new Bn()),
    quickSuggestionsDelay: O(new nn(91, `quickSuggestionsDelay`, 10, 0, 1073741824, {
      description: T(`quickSuggestionsDelay`, `Controls the delay in milliseconds after which quick suggestions will show up.`)
    })),
    readOnly: O(new en(92, `readOnly`, false)),
    readOnlyMessage: O(new Wn()),
    renameOnType: O(new en(94, `renameOnType`, false, {
      description: T(`renameOnType`, `Controls whether the editor auto renames on type.`),
      markdownDeprecationMessage: T(`renameOnTypeDeprecate`, "Deprecated, use `editor.linkedEditing` instead.")
    })),
    renderControlCharacters: O(new en(95, `renderControlCharacters`, true, {
      description: T(`renderControlCharacters`, `Controls whether the editor should render control characters.`),
      restricted: true
    })),
    renderFinalNewline: O(new cn(96, `renderFinalNewline`, ht ? `dimmed` : `on`, [
      `off`,
      `on`,
      `dimmed`
    ], {
      description: T(`renderFinalNewline`, `Render last line number when the file ends with a newline.`)
    })),
    renderLineHighlight: O(new cn(97, `renderLineHighlight`, `line`, [
      `none`,
      `gutter`,
      `line`,
      `all`
    ], {
      enumDescriptions: [
        ``,
        ``,
        ``,
        T(`renderLineHighlight.all`, `Highlights both the gutter and the current line.`)
      ],
      description: T(`renderLineHighlight`, `Controls how the editor should render the current line highlight.`)
    })),
    renderLineHighlightOnlyWhenFocus: O(new en(98, `renderLineHighlightOnlyWhenFocus`, false, {
      description: T(`renderLineHighlightOnlyWhenFocus`, `Controls if the editor should render the current line highlight only when the editor is focused.`)
    })),
    renderValidationDecorations: O(new cn(99, `renderValidationDecorations`, `editable`, [
      `editable`,
      `on`,
      `off`
    ])),
    renderWhitespace: O(new cn(100, `renderWhitespace`, `selection`, [
      `none`,
      `boundary`,
      `selection`,
      `trailing`,
      `all`
    ], {
      enumDescriptions: [
        ``,
        T(`renderWhitespace.boundary`, `Render whitespace characters except for single spaces between words.`),
        T(`renderWhitespace.selection`, `Render whitespace characters only on selected text.`),
        T(`renderWhitespace.trailing`, `Render only trailing whitespace characters.`),
        ``
      ],
      description: T(`renderWhitespace`, `Controls how the editor should render whitespace characters.`)
    })),
    revealHorizontalRightPadding: O(new nn(101, `revealHorizontalRightPadding`, 15, 0, 1e3)),
    roundedSelection: O(new en(102, `roundedSelection`, true, {
      description: T(`roundedSelection`, `Controls whether selections should have rounded corners.`)
    })),
    rulers: O(new Un()),
    scrollbar: O(new Kn()),
    scrollBeyondLastColumn: O(new nn(105, `scrollBeyondLastColumn`, 4, 0, 1073741824, {
      description: T(`scrollBeyondLastColumn`, `Controls the number of extra characters beyond which the editor will scroll horizontally.`)
    })),
    scrollBeyondLastLine: O(new en(106, `scrollBeyondLastLine`, true, {
      description: T(`scrollBeyondLastLine`, `Controls whether the editor will scroll beyond the last line.`)
    })),
    scrollPredominantAxis: O(new en(107, `scrollPredominantAxis`, true, {
      description: T(`scrollPredominantAxis`, `Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.`)
    })),
    selectionClipboard: O(new en(108, `selectionClipboard`, true, {
      description: T(`selectionClipboard`, `Controls whether the Linux primary clipboard should be supported.`),
      included: ht
    })),
    selectionHighlight: O(new en(109, `selectionHighlight`, true, {
      description: T(`selectionHighlight`, `Controls whether the editor should highlight matches similar to the selection.`)
    })),
    selectOnLineNumbers: O(new en(110, `selectOnLineNumbers`, true)),
    showFoldingControls: O(new cn(111, `showFoldingControls`, `mouseover`, [
      `always`,
      `never`,
      `mouseover`
    ], {
      enumDescriptions: [
        T(`showFoldingControls.always`, `Always show the folding controls.`),
        T(`showFoldingControls.never`, `Never show the folding controls and reduce the gutter size.`),
        T(`showFoldingControls.mouseover`, `Only show the folding controls when the mouse is over the gutter.`)
      ],
      description: T(`showFoldingControls`, `Controls when the folding controls on the gutter are shown.`)
    })),
    showUnused: O(new en(112, `showUnused`, true, {
      description: T(`showUnused`, `Controls fading out of unused code.`)
    })),
    showDeprecated: O(new en(141, `showDeprecated`, true, {
      description: T(`showDeprecated`, `Controls strikethrough deprecated variables.`)
    })),
    inlayHints: O(new jn()),
    snippetSuggestions: O(new cn(113, `snippetSuggestions`, `inline`, [
      `top`,
      `bottom`,
      `inline`,
      `none`
    ], {
      enumDescriptions: [
        T(`snippetSuggestions.top`, `Show snippet suggestions on top of other suggestions.`),
        T(`snippetSuggestions.bottom`, `Show snippet suggestions below other suggestions.`),
        T(`snippetSuggestions.inline`, `Show snippets suggestions with other suggestions.`),
        T(`snippetSuggestions.none`, `Do not show snippet suggestions.`)
      ],
      description: T(`snippetSuggestions`, `Controls whether snippets are shown with other suggestions and how they are sorted.`)
    })),
    smartSelect: O(new nr()),
    smoothScrolling: O(new en(115, `smoothScrolling`, false, {
      description: T(`smoothScrolling`, `Controls whether the editor will scroll using an animation.`)
    })),
    stopRenderingLineAfter: O(new nn(118, `stopRenderingLineAfter`, 1e4, -1, 1073741824)),
    suggest: O(new tr()),
    inlineSuggest: O(new Xn()),
    inlineEdit: O(new Zn()),
    inlineCompletionsAccessibilityVerbose: O(new en(150, `inlineCompletionsAccessibilityVerbose`, false, {
      description: T(`inlineCompletionsAccessibilityVerbose`, `Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.`)
    })),
    suggestFontSize: O(new nn(120, `suggestFontSize`, 0, 0, 1e3, {
      markdownDescription: T(`suggestFontSize`, `Font size for the suggest widget. When set to {0}, the value of {1} is used.`, "`0`", "`#editor.fontSize#`")
    })),
    suggestLineHeight: O(new nn(121, `suggestLineHeight`, 0, 0, 1e3, {
      markdownDescription: T(`suggestLineHeight`, `Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.`, "`0`", "`#editor.lineHeight#`")
    })),
    suggestOnTriggerCharacters: O(new en(122, `suggestOnTriggerCharacters`, true, {
      description: T(`suggestOnTriggerCharacters`, `Controls whether suggestions should automatically show up when typing trigger characters.`)
    })),
    suggestSelection: O(new cn(123, `suggestSelection`, `first`, [
      `first`,
      `recentlyUsed`,
      `recentlyUsedByPrefix`
    ], {
      markdownEnumDescriptions: [
        T(`suggestSelection.first`, `Always select the first suggestion.`),
        T(`suggestSelection.recentlyUsed`, "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."),
        T(`suggestSelection.recentlyUsedByPrefix`, "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.")
      ],
      description: T(`suggestSelection`, `Controls how suggestions are pre-selected when showing the suggest list.`)
    })),
    tabCompletion: O(new cn(124, `tabCompletion`, `off`, [
      `on`,
      `off`,
      `onlySnippets`
    ], {
      enumDescriptions: [
        T(`tabCompletion.on`, `Tab complete will insert the best matching suggestion when pressing tab.`),
        T(`tabCompletion.off`, `Disable tab completions.`),
        T(`tabCompletion.onlySnippets`, `Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.`)
      ],
      description: T(`tabCompletion`, `Enables tab completions.`)
    })),
    tabIndex: O(new nn(125, `tabIndex`, 0, -1, 1073741824)),
    unicodeHighlight: O(new Yn()),
    unusualLineTerminators: O(new cn(127, `unusualLineTerminators`, `prompt`, [
      `auto`,
      `off`,
      `prompt`
    ], {
      enumDescriptions: [
        T(`unusualLineTerminators.auto`, `Unusual line terminators are automatically removed.`),
        T(`unusualLineTerminators.off`, `Unusual line terminators are ignored.`),
        T(`unusualLineTerminators.prompt`, `Unusual line terminators prompt to be removed.`)
      ],
      description: T(`unusualLineTerminators`, `Remove unusual line terminators that might cause problems.`)
    })),
    useShadowDOM: O(new en(128, `useShadowDOM`, true)),
    useTabStops: O(new en(129, `useTabStops`, true, {
      description: T(`useTabStops`, `Spaces and tabs are inserted and deleted in alignment with tab stops.`)
    })),
    wordBreak: O(new cn(130, `wordBreak`, `normal`, [
      `normal`,
      `keepAll`
    ], {
      markdownEnumDescriptions: [
        T(`wordBreak.normal`, `Use the default line break rule.`),
        T(`wordBreak.keepAll`, `Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.`)
      ],
      description: T(`wordBreak`, `Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.`)
    })),
    wordSegmenterLocales: O(new rr()),
    wordSeparators: O(new on(132, `wordSeparators`, zt, {
      description: T(`wordSeparators`, `Characters that will be used as word separators when doing word related navigations or operations.`)
    })),
    wordWrap: O(new cn(133, `wordWrap`, `off`, [
      `off`,
      `on`,
      `wordWrapColumn`,
      `bounded`
    ], {
      markdownEnumDescriptions: [
        T(`wordWrap.off`, `Lines will never wrap.`),
        T(`wordWrap.on`, `Lines will wrap at the viewport width.`),
        T({
          key: `wordWrap.wordWrapColumn`,
          comment: [
            "- `editor.wordWrapColumn` refers to a different setting and should not be localized."
          ]
        }, "Lines will wrap at `#editor.wordWrapColumn#`."),
        T({
          key: `wordWrap.bounded`,
          comment: [
            `- viewport means the edge of the visible window size.`,
            "- `editor.wordWrapColumn` refers to a different setting and should not be localized."
          ]
        }, "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.")
      ],
      description: T({
        key: `wordWrap`,
        comment: [
          `- 'off', 'on', 'wordWrapColumn' and 'bounded' refer to values the setting can take and should not be localized.`,
          "- `editor.wordWrapColumn` refers to a different setting and should not be localized."
        ]
      }, `Controls how lines should wrap.`)
    })),
    wordWrapBreakAfterCharacters: O(new on(134, `wordWrapBreakAfterCharacters`, ` 	})]?|/&.,;\xA2\xB0\u2032\u2033\u2030\u2103\u3001\u3002\uFF61\uFF64\uFFE0\uFF0C\uFF0E\uFF1A\uFF1B\uFF1F\uFF01\uFF05\u30FB\uFF65\u309D\u309E\u30FD\u30FE\u30FC\u30A1\u30A3\u30A5\u30A7\u30A9\u30C3\u30E3\u30E5\u30E7\u30EE\u30F5\u30F6\u3041\u3043\u3045\u3047\u3049\u3063\u3083\u3085\u3087\u308E\u3095\u3096\u31F0\u31F1\u31F2\u31F3\u31F4\u31F5\u31F6\u31F7\u31F8\u31F9\u31FA\u31FB\u31FC\u31FD\u31FE\u31FF\u3005\u303B\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\u201D\u3009\u300B\u300D\u300F\u3011\u3015\uFF09\uFF3D\uFF5D\uFF63`)),
    wordWrapBreakBeforeCharacters: O(new on(135, `wordWrapBreakBeforeCharacters`, `([{\u2018\u201C\u3008\u300A\u300C\u300E\u3010\u3014\uFF08\uFF3B\uFF5B\uFF62\xA3\xA5\uFF04\uFFE1\uFFE5+\uFF0B`)),
    wordWrapColumn: O(new nn(136, `wordWrapColumn`, 80, 1, 1073741824, {
      markdownDescription: T({
        key: `wordWrapColumn`,
        comment: [
          "- `editor.wordWrap` refers to a different setting and should not be localized.",
          `- 'wordWrapColumn' and 'bounded' refer to values the different setting can take and should not be localized.`
        ]
      }, "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.")
    })),
    wordWrapOverride1: O(new cn(137, `wordWrapOverride1`, `inherit`, [
      `off`,
      `on`,
      `inherit`
    ])),
    wordWrapOverride2: O(new cn(138, `wordWrapOverride2`, `inherit`, [
      `off`,
      `on`,
      `inherit`
    ])),
    editorClassName: O(new gn()),
    defaultColorDecorators: O(new en(148, `defaultColorDecorators`, false, {
      markdownDescription: T(`defaultColorDecorators`, `Controls whether inline color decorations should be shown using the default document color provider`)
    })),
    pixelRatio: O(new Rn()),
    tabFocusMode: O(new en(145, `tabFocusMode`, false, {
      markdownDescription: T(`tabFocusMode`, `Controls whether the editor receives tabs or defers them to the workbench for navigation.`)
    })),
    layoutInfo: O(new En()),
    wrappingInfo: O(new ar()),
    wrappingIndent: O(new ir()),
    wrappingStrategy: O(new Dn())
  };
  var mr = class {
    constructor() {
      this.listeners = [], this.unexpectedErrorHandler = function(e10) {
        setTimeout(() => {
          throw e10.stack ? Er.isErrorNoTelemetry(e10) ? new Er(e10.message + `

` + e10.stack) : Error(e10.message + `

` + e10.stack) : e10;
        }, 0);
      };
    }
    emit(e10) {
      this.listeners.forEach((t10) => {
        t10(e10);
      });
    }
    onUnexpectedError(e10) {
      this.unexpectedErrorHandler(e10), this.emit(e10);
    }
    onUnexpectedExternalError(e10) {
      this.unexpectedErrorHandler(e10);
    }
  };
  const hr = new mr();
  gr = function(e10) {
    br(e10) || hr.onUnexpectedError(e10);
  };
  _r = function(e10) {
    br(e10) || hr.onUnexpectedExternalError(e10);
  };
  function vr(e10) {
    if (e10 instanceof Error) {
      let { name: t10, message: n10 } = e10, r10 = e10.stacktrace || e10.stack;
      return {
        $isError: true,
        name: t10,
        message: n10,
        stack: r10,
        noTelemetry: Er.isErrorNoTelemetry(e10)
      };
    }
    return e10;
  }
  const yr = `Canceled`;
  br = function(e10) {
    return e10 instanceof xr ? true : e10 instanceof Error && e10.name === yr && e10.message === yr;
  };
  xr = class extends Error {
    constructor() {
      super(yr), this.name = this.message;
    }
  };
  function Sr() {
    let e10 = Error(yr);
    return e10.name = e10.message, e10;
  }
  Cr = function(e10) {
    return e10 ? Error(`Illegal argument: ${e10}`) : Error(`Illegal argument`);
  };
  function wr(e10) {
    return e10 ? Error(`Illegal state: ${e10}`) : Error(`Illegal state`);
  }
  let Tr, Er;
  Tr = class extends Error {
    constructor(e10) {
      super(`NotSupported`), e10 && (this.message = e10);
    }
  };
  Er = class e10 extends Error {
    constructor(e11) {
      super(e11), this.name = `CodeExpectedError`;
    }
    static fromError(t10) {
      if (t10 instanceof e10) return t10;
      let n10 = new e10();
      return n10.message = t10.message, n10.stack = t10.stack, n10;
    }
    static isErrorNoTelemetry(e11) {
      return e11.name === `CodeExpectedError`;
    }
  };
  Dr = class e10 extends Error {
    constructor(t10) {
      super(t10 || `An unexpected bug occurred.`), Object.setPrototypeOf(this, e10.prototype);
    }
  };
  Or = function(e10, t10) {
    let n10 = this, r10 = false, i10;
    return function() {
      if (r10) return i10;
      if (r10 = true, t10) try {
        i10 = e10.apply(n10, arguments);
      } finally {
        t10();
      }
      else i10 = e10.apply(n10, arguments);
      return i10;
    };
  };
  const kr = false;
  let Ar = null;
  function jr(e10) {
    Ar = e10;
  }
  if (kr) {
    let e10 = `__is_disposable_tracked__`;
    jr(new class {
      trackDisposable(t10) {
        let n10 = Error(`Potentially leaked disposable`).stack;
        setTimeout(() => {
          t10[e10] || console.log(n10);
        }, 3e3);
      }
      setParent(t10, n10) {
        if (t10 && t10 !== j.None) try {
          t10[e10] = true;
        } catch {
        }
      }
      markAsDisposed(t10) {
        if (t10 && t10 !== j.None) try {
          t10[e10] = true;
        } catch {
        }
      }
      markAsSingleton(e11) {
      }
    }());
  }
  function Mr(e10) {
    return Ar == null ? void 0 : Ar.trackDisposable(e10), e10;
  }
  function Nr(e10) {
    Ar == null ? void 0 : Ar.markAsDisposed(e10);
  }
  function Pr(e10, t10) {
    Ar == null ? void 0 : Ar.setParent(e10, t10);
  }
  function Fr(e10, t10) {
    if (Ar) for (let n10 of e10) Ar.setParent(n10, t10);
  }
  function Ir(e10) {
    return Ar == null ? void 0 : Ar.markAsSingleton(e10), e10;
  }
  Lr = function(e10) {
    return typeof e10 == `object` && !!e10 && typeof e10.dispose == `function` && e10.dispose.length === 0;
  };
  Rr = function(e10) {
    if (It.is(e10)) {
      let t10 = [];
      for (let n10 of e10) if (n10) try {
        n10.dispose();
      } catch (e11) {
        t10.push(e11);
      }
      if (t10.length === 1) throw t10[0];
      if (t10.length > 1) throw AggregateError(t10, `Encountered errors while disposing of store`);
      return Array.isArray(e10) ? [] : e10;
    } else if (e10) return e10.dispose(), e10;
  };
  zr = function(...e10) {
    let t10 = k(() => Rr(e10));
    return Fr(e10, t10), t10;
  };
  k = function(e10) {
    let t10 = Mr({
      dispose: Or(() => {
        Nr(t10), e10();
      })
    });
    return t10;
  };
  let Hr, Ur;
  A = (_j2 = class {
    constructor() {
      this._toDispose = /* @__PURE__ */ new Set(), this._isDisposed = false, Mr(this);
    }
    dispose() {
      this._isDisposed || (Nr(this), this._isDisposed = true, this.clear());
    }
    get isDisposed() {
      return this._isDisposed;
    }
    clear() {
      if (this._toDispose.size !== 0) try {
        Rr(this._toDispose);
      } finally {
        this._toDispose.clear();
      }
    }
    add(t10) {
      if (!t10) return t10;
      if (t10 === this) throw Error(`Cannot register a disposable on itself!`);
      return Pr(t10, this), this._isDisposed ? _j2.DISABLE_DISPOSED_WARNING || console.warn(Error(`Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!`).stack) : this._toDispose.add(t10), t10;
    }
    deleteAndLeak(e10) {
      e10 && this._toDispose.has(e10) && (this._toDispose.delete(e10), Pr(e10, null));
    }
  }, _j2.DISABLE_DISPOSED_WARNING = false, _j2);
  j = (_k2 = class {
    constructor() {
      this._store = new A(), Mr(this), Pr(this._store, this);
    }
    dispose() {
      Nr(this), this._store.dispose();
    }
    _register(e10) {
      if (e10 === this) throw Error(`Cannot register a disposable on itself!`);
      return this._store.add(e10);
    }
  }, _k2.None = Object.freeze({
    dispose() {
    }
  }), _k2);
  Br = class {
    constructor() {
      this._isDisposed = false, Mr(this);
    }
    get value() {
      return this._isDisposed ? void 0 : this._value;
    }
    set value(e10) {
      var _a3;
      this._isDisposed || e10 === this._value || ((_a3 = this._value) == null ? void 0 : _a3.dispose(), e10 && Pr(e10, this), this._value = e10);
    }
    clear() {
      this.value = void 0;
    }
    dispose() {
      var _a3;
      this._isDisposed = true, Nr(this), (_a3 = this._value) == null ? void 0 : _a3.dispose(), this._value = void 0;
    }
  };
  Vr = class {
    constructor(e10) {
      this._disposable = e10, this._counter = 1;
    }
    acquire() {
      return this._counter++, this;
    }
    release() {
      return --this._counter === 0 && this._disposable.dispose(), this;
    }
  };
  Hr = class {
    constructor(e10) {
      this.object = e10;
    }
    dispose() {
    }
  };
  Ur = class {
    constructor() {
      this._store = /* @__PURE__ */ new Map(), this._isDisposed = false, Mr(this);
    }
    dispose() {
      Nr(this), this._isDisposed = true, this.clearAndDisposeAll();
    }
    clearAndDisposeAll() {
      if (this._store.size) try {
        Rr(this._store.values());
      } finally {
        this._store.clear();
      }
    }
    get(e10) {
      return this._store.get(e10);
    }
    set(e10, t10, n10 = false) {
      var _a3;
      this._isDisposed && console.warn(Error(`Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!`).stack), n10 || ((_a3 = this._store.get(e10)) == null ? void 0 : _a3.dispose()), this._store.set(e10, t10);
    }
    deleteAndDispose(e10) {
      var _a3;
      (_a3 = this._store.get(e10)) == null ? void 0 : _a3.dispose(), this._store.delete(e10);
    }
    [Symbol.iterator]() {
      return this._store[Symbol.iterator]();
    }
  };
  const Wr = globalThis.performance && typeof globalThis.performance.now == `function`;
  Gr = class e10 {
    static create(t10) {
      return new e10(t10);
    }
    constructor(e11) {
      this._now = Wr && e11 === false ? Date.now : globalThis.performance.now.bind(globalThis.performance), this._startTime = this._now(), this._stopTime = -1;
    }
    stop() {
      this._stopTime = this._now();
    }
    reset() {
      this._startTime = this._now(), this._stopTime = -1;
    }
    elapsed() {
      return this._stopTime === -1 ? this._now() - this._startTime : this._stopTime - this._startTime;
    }
  };
  const Kr = false, qr = false, Jr = false;
  (function(e10) {
    e10.None = () => j.None;
    function t10(e11) {
      if (Jr) {
        let { onDidAddListener: t11 } = e11, n11 = Qr.create(), r11 = 0;
        e11.onDidAddListener = () => {
          ++r11 === 2 && (console.warn(`snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here`), n11.print()), t11 == null ? void 0 : t11();
        };
      }
    }
    function n10(e11, t11) {
      return p10(e11, () => void 0, 0, void 0, true, void 0, t11);
    }
    e10.defer = n10;
    function r10(e11) {
      return (t11, n11 = null, r11) => {
        let i11 = false, a11;
        return a11 = e11((e12) => {
          if (!i11) return a11 ? a11.dispose() : i11 = true, t11.call(n11, e12);
        }, null, r11), i11 && a11.dispose(), a11;
      };
    }
    e10.once = r10;
    function i10(t11, n11) {
      return e10.once(e10.filter(t11, n11));
    }
    e10.onceIf = i10;
    function a10(e11, t11, n11) {
      return d10((n12, r11 = null, i11) => e11((e12) => n12.call(r11, t11(e12)), null, i11), n11);
    }
    e10.map = a10;
    function o10(e11, t11, n11) {
      return d10((n12, r11 = null, i11) => e11((e12) => {
        t11(e12), n12.call(r11, e12);
      }, null, i11), n11);
    }
    e10.forEach = o10;
    function s10(e11, t11, n11) {
      return d10((n12, r11 = null, i11) => e11((e12) => t11(e12) && n12.call(r11, e12), null, i11), n11);
    }
    e10.filter = s10;
    function c10(e11) {
      return e11;
    }
    e10.signal = c10;
    function l10(...e11) {
      return (t11, n11 = null, r11) => {
        let i11 = zr(...e11.map((e12) => e12((e13) => t11.call(n11, e13))));
        return f10(i11, r11);
      };
    }
    e10.any = l10;
    function u10(e11, t11, n11, r11) {
      let i11 = n11;
      return a10(e11, (e12) => (i11 = t11(i11, e12), i11), r11);
    }
    e10.reduce = u10;
    function d10(e11, n11) {
      let r11, i11 = {
        onWillAddFirstListener() {
          r11 = e11(a11.fire, a11);
        },
        onDidRemoveLastListener() {
          r11 == null ? void 0 : r11.dispose();
        }
      };
      n11 || t10(i11);
      let a11 = new N(i11);
      return n11 == null ? void 0 : n11.add(a11), a11.event;
    }
    function f10(e11, t11) {
      return t11 instanceof Array ? t11.push(e11) : t11 && t11.add(e11), e11;
    }
    function p10(e11, n11, r11 = 100, i11 = false, a11 = false, o11, s11) {
      let c11, l11, u11, d11 = 0, f11, p11 = {
        leakWarningThreshold: o11,
        onWillAddFirstListener() {
          c11 = e11((e12) => {
            d11++, l11 = n11(l11, e12), i11 && !u11 && (m11.fire(l11), l11 = void 0), f11 = () => {
              let e13 = l11;
              l11 = void 0, u11 = void 0, (!i11 || d11 > 1) && m11.fire(e13), d11 = 0;
            }, typeof r11 == `number` ? (clearTimeout(u11), u11 = setTimeout(f11, r11)) : u11 === void 0 && (u11 = 0, queueMicrotask(f11));
          });
        },
        onWillRemoveListener() {
          a11 && d11 > 0 && (f11 == null ? void 0 : f11());
        },
        onDidRemoveLastListener() {
          f11 = void 0, c11.dispose();
        }
      };
      s11 || t10(p11);
      let m11 = new N(p11);
      return s11 == null ? void 0 : s11.add(m11), m11.event;
    }
    e10.debounce = p10;
    function m10(t11, n11 = 0, r11) {
      return e10.debounce(t11, (e11, t12) => e11 ? (e11.push(t12), e11) : [
        t12
      ], n11, void 0, true, void 0, r11);
    }
    e10.accumulate = m10;
    function h10(e11, t11 = (e12, t12) => e12 === t12, n11) {
      let r11 = true, i11;
      return s10(e11, (e12) => {
        let n12 = r11 || !t11(e12, i11);
        return r11 = false, i11 = e12, n12;
      }, n11);
    }
    e10.latch = h10;
    function g10(t11, n11, r11) {
      return [
        e10.filter(t11, n11, r11),
        e10.filter(t11, (e11) => !n11(e11), r11)
      ];
    }
    e10.split = g10;
    function _10(e11, t11 = false, n11 = [], r11) {
      let i11 = n11.slice(), a11 = e11((e12) => {
        i11 ? i11.push(e12) : s11.fire(e12);
      });
      r11 && r11.add(a11);
      let o11 = () => {
        i11 == null ? void 0 : i11.forEach((e12) => s11.fire(e12)), i11 = null;
      }, s11 = new N({
        onWillAddFirstListener() {
          a11 || (a11 = e11((e12) => s11.fire(e12)), r11 && r11.add(a11));
        },
        onDidAddFirstListener() {
          i11 && (t11 ? setTimeout(o11) : o11());
        },
        onDidRemoveLastListener() {
          a11 && a11.dispose(), a11 = null;
        }
      });
      return r11 && r11.add(s11), s11.event;
    }
    e10.buffer = _10;
    function v10(e11, t11) {
      let n11 = (n12, r11, i11) => {
        let a11 = t11(new b10());
        return e11(function(e12) {
          let t12 = a11.evaluate(e12);
          t12 !== y10 && n12.call(r11, t12);
        }, void 0, i11);
      };
      return n11;
    }
    e10.chain = v10;
    let y10 = Symbol(`HaltChainable`);
    class b10 {
      constructor() {
        this.steps = [];
      }
      map(e11) {
        return this.steps.push(e11), this;
      }
      forEach(e11) {
        return this.steps.push((t11) => (e11(t11), t11)), this;
      }
      filter(e11) {
        return this.steps.push((t11) => e11(t11) ? t11 : y10), this;
      }
      reduce(e11, t11) {
        let n11 = t11;
        return this.steps.push((t12) => (n11 = e11(n11, t12), n11)), this;
      }
      latch(e11 = (e12, t11) => e12 === t11) {
        let t11 = true, n11;
        return this.steps.push((r11) => {
          let i11 = t11 || !e11(r11, n11);
          return t11 = false, n11 = r11, i11 ? r11 : y10;
        }), this;
      }
      evaluate(e11) {
        for (let t11 of this.steps) if (e11 = t11(e11), e11 === y10) break;
        return e11;
      }
    }
    function x10(e11, t11, n11 = (e12) => e12) {
      let r11 = (...e12) => o11.fire(n11(...e12)), i11 = () => e11.on(t11, r11), a11 = () => e11.removeListener(t11, r11), o11 = new N({
        onWillAddFirstListener: i11,
        onDidRemoveLastListener: a11
      });
      return o11.event;
    }
    e10.fromNodeEventEmitter = x10;
    function S10(e11, t11, n11 = (e12) => e12) {
      let r11 = (...e12) => o11.fire(n11(...e12)), i11 = () => e11.addEventListener(t11, r11), a11 = () => e11.removeEventListener(t11, r11), o11 = new N({
        onWillAddFirstListener: i11,
        onDidRemoveLastListener: a11
      });
      return o11.event;
    }
    e10.fromDOMEventEmitter = S10;
    function C10(e11) {
      return new Promise((t11) => r10(e11)(t11));
    }
    e10.toPromise = C10;
    function w10(e11) {
      let t11 = new N();
      return e11.then((e12) => {
        t11.fire(e12);
      }, () => {
        t11.fire(void 0);
      }).finally(() => {
        t11.dispose();
      }), t11.event;
    }
    e10.fromPromise = w10;
    function ee2(e11, t11) {
      return e11((e12) => t11.fire(e12));
    }
    e10.forward = ee2;
    function te2(e11, t11, n11) {
      return t11(n11), e11((e12) => t11(e12));
    }
    e10.runAndSubscribe = te2;
    class ne2 {
      constructor(e11, n11) {
        this._observable = e11, this._counter = 0, this._hasChanged = false;
        let r11 = {
          onWillAddFirstListener: () => {
            e11.addObserver(this), this._observable.reportChanges();
          },
          onDidRemoveLastListener: () => {
            e11.removeObserver(this);
          }
        };
        n11 || t10(r11), this.emitter = new N(r11), n11 && n11.add(this.emitter);
      }
      beginUpdate(e11) {
        this._counter++;
      }
      handlePossibleChange(e11) {
      }
      handleChange(e11, t11) {
        this._hasChanged = true;
      }
      endUpdate(e11) {
        this._counter--, this._counter === 0 && (this._observable.reportChanges(), this._hasChanged && (this._hasChanged = false, this.emitter.fire(this._observable.get())));
      }
    }
    function re2(e11, t11) {
      let n11 = new ne2(e11, t11);
      return n11.emitter.event;
    }
    e10.fromObservable = re2;
    function ie2(e11) {
      return (t11, n11, r11) => {
        let i11 = 0, a11 = false, o11 = {
          beginUpdate() {
            i11++;
          },
          endUpdate() {
            i11--, i11 === 0 && (e11.reportChanges(), a11 && (a11 = false, t11.call(n11)));
          },
          handlePossibleChange() {
          },
          handleChange() {
            a11 = true;
          }
        };
        e11.addObserver(o11), e11.reportChanges();
        let s11 = {
          dispose() {
            e11.removeObserver(o11);
          }
        };
        return r11 instanceof A ? r11.add(s11) : Array.isArray(r11) && r11.push(s11), s11;
      };
    }
    e10.fromObservableLight = ie2;
  })(M || (M = {}));
  var Yr = (_l2 = class {
    constructor(t10) {
      this.listenerCount = 0, this.invocationCount = 0, this.elapsedOverall = 0, this.durations = [], this.name = `${t10}_${_l2._idPool++}`, _l2.all.add(this);
    }
    start(e10) {
      this._stopWatch = new Gr(), this.listenerCount = e10;
    }
    stop() {
      if (this._stopWatch) {
        let e10 = this._stopWatch.elapsed();
        this.durations.push(e10), this.elapsedOverall += e10, this.invocationCount += 1, this._stopWatch = void 0;
      }
    }
  }, _l2.all = /* @__PURE__ */ new Set(), _l2._idPool = 0, _l2);
  let Xr = -1;
  var Zr = (_m2 = class {
    constructor(t10, n10, r10 = (_m2._idPool++).toString(16).padStart(3, `0`)) {
      this._errorHandler = t10, this.threshold = n10, this.name = r10, this._warnCountdown = 0;
    }
    dispose() {
      var _a3;
      (_a3 = this._stacks) == null ? void 0 : _a3.clear();
    }
    check(e10, t10) {
      let n10 = this.threshold;
      if (n10 <= 0 || t10 < n10) return;
      this._stacks || (this._stacks = /* @__PURE__ */ new Map());
      let r10 = this._stacks.get(e10.value) || 0;
      if (this._stacks.set(e10.value, r10 + 1), --this._warnCountdown, this._warnCountdown <= 0) {
        this._warnCountdown = n10 * 0.5;
        let [e11, r11] = this.getMostFrequentStack(), i10 = `[${this.name}] potential listener LEAK detected, having ${t10} listeners already. MOST frequent listener (${r11}):`;
        console.warn(i10), console.warn(e11);
        let a10 = new $r(i10, e11);
        this._errorHandler(a10);
      }
      return () => {
        let t11 = this._stacks.get(e10.value) || 0;
        this._stacks.set(e10.value, t11 - 1);
      };
    }
    getMostFrequentStack() {
      if (!this._stacks) return;
      let e10, t10 = 0;
      for (let [n10, r10] of this._stacks) (!e10 || t10 < r10) && (e10 = [
        n10,
        r10
      ], t10 = r10);
      return e10;
    }
  }, _m2._idPool = 1, _m2), Qr = class e10 {
    static create() {
      let t10 = Error();
      return new e10(t10.stack ?? ``);
    }
    constructor(e11) {
      this.value = e11;
    }
    print() {
      console.warn(this.value.split(`
`).slice(2).join(`
`));
    }
  }, $r = class extends Error {
    constructor(e10, t10) {
      super(e10), this.name = `ListenerLeakError`, this.stack = t10;
    }
  }, ei = class extends Error {
    constructor(e10, t10) {
      super(e10), this.name = `ListenerRefusalError`, this.stack = t10;
    }
  }, ti = class {
    constructor(e10) {
      this.value = e10;
    }
  };
  const ni = 2, ri = (e10, t10) => {
    if (e10 instanceof ti) t10(e10);
    else for (let n10 = 0; n10 < e10.length; n10++) {
      let r10 = e10[n10];
      r10 && t10(r10);
    }
  };
  let ii;
  if (Kr) {
    let e10 = [];
    setInterval(() => {
      e10.length !== 0 && (console.warn(`[LEAKING LISTENERS] GC'ed these listeners that were NOT yet disposed:`), console.warn(e10.join(`
`)), e10.length = 0);
    }, 3e3), ii = new FinalizationRegistry((t10) => {
      typeof t10 == `string` && e10.push(t10);
    });
  }
  N = class {
    constructor(e10) {
      var _a3, _b3, _c3, _d3;
      this._size = 0, this._options = e10, this._leakageMon = Xr > 0 || ((_a3 = this._options) == null ? void 0 : _a3.leakWarningThreshold) ? new Zr((e10 == null ? void 0 : e10.onListenerError) ?? gr, ((_b3 = this._options) == null ? void 0 : _b3.leakWarningThreshold) ?? Xr) : void 0, this._perfMon = ((_c3 = this._options) == null ? void 0 : _c3._profName) ? new Yr(this._options._profName) : void 0, this._deliveryQueue = (_d3 = this._options) == null ? void 0 : _d3.deliveryQueue;
    }
    dispose() {
      var _a3, _b3, _c3, _d3;
      if (!this._disposed) {
        if (this._disposed = true, ((_a3 = this._deliveryQueue) == null ? void 0 : _a3.current) === this && this._deliveryQueue.reset(), this._listeners) {
          if (qr) {
            let e10 = this._listeners;
            queueMicrotask(() => {
              ri(e10, (e11) => {
                var _a4;
                return (_a4 = e11.stack) == null ? void 0 : _a4.print();
              });
            });
          }
          this._listeners = void 0, this._size = 0;
        }
        (_c3 = (_b3 = this._options) == null ? void 0 : _b3.onDidRemoveLastListener) == null ? void 0 : _c3.call(_b3), (_d3 = this._leakageMon) == null ? void 0 : _d3.dispose();
      }
    }
    get event() {
      return this._event ?? (this._event = (e10, t10, n10) => {
        var _a3, _b3, _c3, _d3, _e3;
        if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
          let e11 = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
          console.warn(e11);
          let t11 = this._leakageMon.getMostFrequentStack() ?? [
            `UNKNOWN stack`,
            -1
          ], n11 = new ei(`${e11}. HINT: Stack shows most frequent listener (${t11[1]}-times)`, t11[0]), r11 = ((_a3 = this._options) == null ? void 0 : _a3.onListenerError) || gr;
          return r11(n11), j.None;
        }
        if (this._disposed) return j.None;
        t10 && (e10 = e10.bind(t10));
        let r10 = new ti(e10), i10, a10;
        this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2) && (r10.stack = Qr.create(), i10 = this._leakageMon.check(r10.stack, this._size + 1)), qr && (r10.stack = a10 ?? Qr.create()), this._listeners ? this._listeners instanceof ti ? (this._deliveryQueue ?? (this._deliveryQueue = new oi()), this._listeners = [
          this._listeners,
          r10
        ]) : this._listeners.push(r10) : ((_c3 = (_b3 = this._options) == null ? void 0 : _b3.onWillAddFirstListener) == null ? void 0 : _c3.call(_b3, this), this._listeners = r10, (_e3 = (_d3 = this._options) == null ? void 0 : _d3.onDidAddFirstListener) == null ? void 0 : _e3.call(_d3, this)), this._size++;
        let o10 = k(() => {
          ii == null ? void 0 : ii.unregister(o10), i10 == null ? void 0 : i10(), this._removeListener(r10);
        });
        if (n10 instanceof A ? n10.add(o10) : Array.isArray(n10) && n10.push(o10), ii) {
          let e11 = Error().stack.split(`
`).slice(2, 3).join(`
`).trim(), t11 = /(file:|vscode-file:\/\/vscode-app)?(\/[^:]*:\d+:\d+)/.exec(e11);
          ii.register(o10, (t11 == null ? void 0 : t11[2]) ?? e11, o10);
        }
        return o10;
      }), this._event;
    }
    _removeListener(e10) {
      var _a3, _b3, _c3, _d3;
      if ((_b3 = (_a3 = this._options) == null ? void 0 : _a3.onWillRemoveListener) == null ? void 0 : _b3.call(_a3, this), !this._listeners) return;
      if (this._size === 1) {
        this._listeners = void 0, (_d3 = (_c3 = this._options) == null ? void 0 : _c3.onDidRemoveLastListener) == null ? void 0 : _d3.call(_c3, this), this._size = 0;
        return;
      }
      let t10 = this._listeners, n10 = t10.indexOf(e10);
      if (n10 === -1) throw console.log(`disposed?`, this._disposed), console.log(`size?`, this._size), console.log(`arr?`, JSON.stringify(this._listeners)), Error(`Attempted to dispose unknown listener`);
      this._size--, t10[n10] = void 0;
      let r10 = this._deliveryQueue.current === this;
      if (this._size * ni <= t10.length) {
        let e11 = 0;
        for (let n11 = 0; n11 < t10.length; n11++) t10[n11] ? t10[e11++] = t10[n11] : r10 && (this._deliveryQueue.end--, e11 < this._deliveryQueue.i && this._deliveryQueue.i--);
        t10.length = e11;
      }
    }
    _deliver(e10, t10) {
      var _a3;
      if (!e10) return;
      let n10 = ((_a3 = this._options) == null ? void 0 : _a3.onListenerError) || gr;
      if (!n10) {
        e10.value(t10);
        return;
      }
      try {
        e10.value(t10);
      } catch (e11) {
        n10(e11);
      }
    }
    _deliverQueue(e10) {
      let t10 = e10.current._listeners;
      for (; e10.i < e10.end; ) this._deliver(t10[e10.i++], e10.value);
      e10.reset();
    }
    fire(e10) {
      var _a3, _b3, _c3, _d3;
      if (((_a3 = this._deliveryQueue) == null ? void 0 : _a3.current) && (this._deliverQueue(this._deliveryQueue), (_b3 = this._perfMon) == null ? void 0 : _b3.stop()), (_c3 = this._perfMon) == null ? void 0 : _c3.start(this._size), this._listeners) if (this._listeners instanceof ti) this._deliver(this._listeners, e10);
      else {
        let t10 = this._deliveryQueue;
        t10.enqueue(this, e10, this._listeners.length), this._deliverQueue(t10);
      }
      (_d3 = this._perfMon) == null ? void 0 : _d3.stop();
    }
    hasListeners() {
      return this._size > 0;
    }
  };
  const ai = () => new oi();
  let oi, ci, li, ui, di, fi;
  oi = class {
    constructor() {
      this.i = -1, this.end = 0;
    }
    enqueue(e10, t10, n10) {
      this.i = 0, this.end = n10, this.current = e10, this.value = t10;
    }
    reset() {
      this.i = this.end, this.current = void 0, this.value = void 0;
    }
  };
  si = class extends N {
    constructor(e10) {
      super(e10), this._isPaused = 0, this._eventQueue = new Rt(), this._mergeFn = e10 == null ? void 0 : e10.merge;
    }
    pause() {
      this._isPaused++;
    }
    resume() {
      if (this._isPaused !== 0 && --this._isPaused === 0) if (this._mergeFn) {
        if (this._eventQueue.size > 0) {
          let e10 = Array.from(this._eventQueue);
          this._eventQueue.clear(), super.fire(this._mergeFn(e10));
        }
      } else for (; !this._isPaused && this._eventQueue.size !== 0; ) super.fire(this._eventQueue.shift());
    }
    fire(e10) {
      this._size && (this._isPaused === 0 ? super.fire(e10) : this._eventQueue.push(e10));
    }
  };
  ci = class extends si {
    constructor(e10) {
      super(e10), this._delay = e10.delay ?? 100;
    }
    fire(e10) {
      this._handle || (this.pause(), this._handle = setTimeout(() => {
        this._handle = void 0, this.resume();
      }, this._delay)), super.fire(e10);
    }
  };
  li = class extends N {
    constructor(e10) {
      super(e10), this._queuedEvents = [], this._mergeFn = e10 == null ? void 0 : e10.merge;
    }
    fire(e10) {
      this.hasListeners() && (this._queuedEvents.push(e10), this._queuedEvents.length === 1 && queueMicrotask(() => {
        this._mergeFn ? super.fire(this._mergeFn(this._queuedEvents)) : this._queuedEvents.forEach((e11) => super.fire(e11)), this._queuedEvents = [];
      }));
    }
  };
  ui = class {
    constructor() {
      this.hasListeners = false, this.events = [], this.emitter = new N({
        onWillAddFirstListener: () => this.onFirstListenerAdd(),
        onDidRemoveLastListener: () => this.onLastListenerRemove()
      });
    }
    get event() {
      return this.emitter.event;
    }
    add(e10) {
      let t10 = {
        event: e10,
        listener: null
      };
      this.events.push(t10), this.hasListeners && this.hook(t10);
      let n10 = () => {
        this.hasListeners && this.unhook(t10);
        let e11 = this.events.indexOf(t10);
        this.events.splice(e11, 1);
      };
      return k(Or(n10));
    }
    onFirstListenerAdd() {
      this.hasListeners = true, this.events.forEach((e10) => this.hook(e10));
    }
    onLastListenerRemove() {
      this.hasListeners = false, this.events.forEach((e10) => this.unhook(e10));
    }
    hook(e10) {
      e10.listener = e10.event((e11) => this.emitter.fire(e11));
    }
    unhook(e10) {
      var _a3;
      (_a3 = e10.listener) == null ? void 0 : _a3.dispose(), e10.listener = null;
    }
    dispose() {
      var _a3;
      this.emitter.dispose();
      for (let e10 of this.events) (_a3 = e10.listener) == null ? void 0 : _a3.dispose();
      this.events = [];
    }
  };
  di = class {
    constructor() {
      this.data = [];
    }
    wrapEvent(e10, t10, n10) {
      return (r10, i10, a10) => e10((e11) => {
        let a11 = this.data[this.data.length - 1];
        if (!t10) {
          a11 ? a11.buffers.push(() => r10.call(i10, e11)) : r10.call(i10, e11);
          return;
        }
        let o10 = a11;
        if (!o10) {
          r10.call(i10, t10(n10, e11));
          return;
        }
        o10.items ?? (o10.items = []), o10.items.push(e11), o10.buffers.length === 0 && a11.buffers.push(() => {
          o10.reducedResult ?? (o10.reducedResult = n10 ? o10.items.reduce(t10, n10) : o10.items.reduce(t10)), r10.call(i10, o10.reducedResult);
        });
      }, void 0, a10);
    }
    bufferEvents(e10) {
      let t10 = {
        buffers: []
      };
      this.data.push(t10);
      let n10 = e10();
      return this.data.pop(), t10.buffers.forEach((e11) => e11()), n10;
    }
  };
  fi = class {
    constructor() {
      this.listening = false, this.inputEvent = M.None, this.inputEventListener = j.None, this.emitter = new N({
        onDidAddFirstListener: () => {
          this.listening = true, this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);
        },
        onDidRemoveLastListener: () => {
          this.listening = false, this.inputEventListener.dispose();
        }
      }), this.event = this.emitter.event;
    }
    set input(e10) {
      this.inputEvent = e10, this.listening && (this.inputEventListener.dispose(), this.inputEventListener = e10(this.emitter.fire, this.emitter));
    }
    dispose() {
      this.inputEventListener.dispose(), this.emitter.dispose();
    }
  };
  const pi = Object.freeze(function(e10, t10) {
    let n10 = setTimeout(e10.bind(t10), 0);
    return {
      dispose() {
        clearTimeout(n10);
      }
    };
  });
  (function(e10) {
    function t10(t11) {
      return t11 === e10.None || t11 === e10.Cancelled || t11 instanceof hi ? true : !t11 || typeof t11 != `object` ? false : typeof t11.isCancellationRequested == `boolean` && typeof t11.onCancellationRequested == `function`;
    }
    e10.isCancellationToken = t10, e10.None = Object.freeze({
      isCancellationRequested: false,
      onCancellationRequested: M.None
    }), e10.Cancelled = Object.freeze({
      isCancellationRequested: true,
      onCancellationRequested: pi
    });
  })(mi || (mi = {}));
  let hi;
  hi = class {
    constructor() {
      this._isCancelled = false, this._emitter = null;
    }
    cancel() {
      this._isCancelled || (this._isCancelled = true, this._emitter && (this._emitter.fire(void 0), this.dispose()));
    }
    get isCancellationRequested() {
      return this._isCancelled;
    }
    get onCancellationRequested() {
      return this._isCancelled ? pi : (this._emitter || (this._emitter = new N()), this._emitter.event);
    }
    dispose() {
      this._emitter && (this._emitter.dispose(), this._emitter = null);
    }
  };
  gi = class {
    constructor(e10) {
      this._token = void 0, this._parentListener = void 0, this._parentListener = e10 && e10.onCancellationRequested(this.cancel, this);
    }
    get token() {
      return this._token || (this._token = new hi()), this._token;
    }
    cancel() {
      this._token ? this._token instanceof hi && this._token.cancel() : this._token = mi.Cancelled;
    }
    dispose(e10 = false) {
      var _a3;
      e10 && this.cancel(), (_a3 = this._parentListener) == null ? void 0 : _a3.dispose(), this._token ? this._token instanceof hi && this._token.dispose() : this._token = mi.None;
    }
  };
  _i = function(e10) {
    let t10 = new gi();
    return e10.add({
      dispose() {
        t10.cancel();
      }
    }), t10.token;
  };
  var vi = class {
    constructor() {
      this._keyCodeToStr = [], this._strToKeyCode = /* @__PURE__ */ Object.create(null);
    }
    define(e10, t10) {
      this._keyCodeToStr[e10] = t10, this._strToKeyCode[t10.toLowerCase()] = e10;
    }
    keyCodeToStr(e10) {
      return this._keyCodeToStr[e10];
    }
    strToKeyCode(e10) {
      return this._strToKeyCode[e10.toLowerCase()] || 0;
    }
  };
  const yi = new vi(), bi = new vi(), xi = new vi(), Si = Array(230), Ci = {}, wi = [], Ti = /* @__PURE__ */ Object.create(null), Ei = /* @__PURE__ */ Object.create(null), Di = [], Oi = [];
  for (let e10 = 0; e10 <= 193; e10++) Di[e10] = -1;
  for (let e10 = 0; e10 <= 132; e10++) Oi[e10] = -1;
  (function() {
    let e10 = ``, t10 = [
      [
        1,
        0,
        `None`,
        0,
        `unknown`,
        0,
        `VK_UNKNOWN`,
        e10,
        e10
      ],
      [
        1,
        1,
        `Hyper`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        2,
        `Super`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        3,
        `Fn`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        4,
        `FnLock`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        5,
        `Suspend`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        6,
        `Resume`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        7,
        `Turbo`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        8,
        `Sleep`,
        0,
        e10,
        0,
        `VK_SLEEP`,
        e10,
        e10
      ],
      [
        1,
        9,
        `WakeUp`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        0,
        10,
        `KeyA`,
        31,
        `A`,
        65,
        `VK_A`,
        e10,
        e10
      ],
      [
        0,
        11,
        `KeyB`,
        32,
        `B`,
        66,
        `VK_B`,
        e10,
        e10
      ],
      [
        0,
        12,
        `KeyC`,
        33,
        `C`,
        67,
        `VK_C`,
        e10,
        e10
      ],
      [
        0,
        13,
        `KeyD`,
        34,
        `D`,
        68,
        `VK_D`,
        e10,
        e10
      ],
      [
        0,
        14,
        `KeyE`,
        35,
        `E`,
        69,
        `VK_E`,
        e10,
        e10
      ],
      [
        0,
        15,
        `KeyF`,
        36,
        `F`,
        70,
        `VK_F`,
        e10,
        e10
      ],
      [
        0,
        16,
        `KeyG`,
        37,
        `G`,
        71,
        `VK_G`,
        e10,
        e10
      ],
      [
        0,
        17,
        `KeyH`,
        38,
        `H`,
        72,
        `VK_H`,
        e10,
        e10
      ],
      [
        0,
        18,
        `KeyI`,
        39,
        `I`,
        73,
        `VK_I`,
        e10,
        e10
      ],
      [
        0,
        19,
        `KeyJ`,
        40,
        `J`,
        74,
        `VK_J`,
        e10,
        e10
      ],
      [
        0,
        20,
        `KeyK`,
        41,
        `K`,
        75,
        `VK_K`,
        e10,
        e10
      ],
      [
        0,
        21,
        `KeyL`,
        42,
        `L`,
        76,
        `VK_L`,
        e10,
        e10
      ],
      [
        0,
        22,
        `KeyM`,
        43,
        `M`,
        77,
        `VK_M`,
        e10,
        e10
      ],
      [
        0,
        23,
        `KeyN`,
        44,
        `N`,
        78,
        `VK_N`,
        e10,
        e10
      ],
      [
        0,
        24,
        `KeyO`,
        45,
        `O`,
        79,
        `VK_O`,
        e10,
        e10
      ],
      [
        0,
        25,
        `KeyP`,
        46,
        `P`,
        80,
        `VK_P`,
        e10,
        e10
      ],
      [
        0,
        26,
        `KeyQ`,
        47,
        `Q`,
        81,
        `VK_Q`,
        e10,
        e10
      ],
      [
        0,
        27,
        `KeyR`,
        48,
        `R`,
        82,
        `VK_R`,
        e10,
        e10
      ],
      [
        0,
        28,
        `KeyS`,
        49,
        `S`,
        83,
        `VK_S`,
        e10,
        e10
      ],
      [
        0,
        29,
        `KeyT`,
        50,
        `T`,
        84,
        `VK_T`,
        e10,
        e10
      ],
      [
        0,
        30,
        `KeyU`,
        51,
        `U`,
        85,
        `VK_U`,
        e10,
        e10
      ],
      [
        0,
        31,
        `KeyV`,
        52,
        `V`,
        86,
        `VK_V`,
        e10,
        e10
      ],
      [
        0,
        32,
        `KeyW`,
        53,
        `W`,
        87,
        `VK_W`,
        e10,
        e10
      ],
      [
        0,
        33,
        `KeyX`,
        54,
        `X`,
        88,
        `VK_X`,
        e10,
        e10
      ],
      [
        0,
        34,
        `KeyY`,
        55,
        `Y`,
        89,
        `VK_Y`,
        e10,
        e10
      ],
      [
        0,
        35,
        `KeyZ`,
        56,
        `Z`,
        90,
        `VK_Z`,
        e10,
        e10
      ],
      [
        0,
        36,
        `Digit1`,
        22,
        `1`,
        49,
        `VK_1`,
        e10,
        e10
      ],
      [
        0,
        37,
        `Digit2`,
        23,
        `2`,
        50,
        `VK_2`,
        e10,
        e10
      ],
      [
        0,
        38,
        `Digit3`,
        24,
        `3`,
        51,
        `VK_3`,
        e10,
        e10
      ],
      [
        0,
        39,
        `Digit4`,
        25,
        `4`,
        52,
        `VK_4`,
        e10,
        e10
      ],
      [
        0,
        40,
        `Digit5`,
        26,
        `5`,
        53,
        `VK_5`,
        e10,
        e10
      ],
      [
        0,
        41,
        `Digit6`,
        27,
        `6`,
        54,
        `VK_6`,
        e10,
        e10
      ],
      [
        0,
        42,
        `Digit7`,
        28,
        `7`,
        55,
        `VK_7`,
        e10,
        e10
      ],
      [
        0,
        43,
        `Digit8`,
        29,
        `8`,
        56,
        `VK_8`,
        e10,
        e10
      ],
      [
        0,
        44,
        `Digit9`,
        30,
        `9`,
        57,
        `VK_9`,
        e10,
        e10
      ],
      [
        0,
        45,
        `Digit0`,
        21,
        `0`,
        48,
        `VK_0`,
        e10,
        e10
      ],
      [
        1,
        46,
        `Enter`,
        3,
        `Enter`,
        13,
        `VK_RETURN`,
        e10,
        e10
      ],
      [
        1,
        47,
        `Escape`,
        9,
        `Escape`,
        27,
        `VK_ESCAPE`,
        e10,
        e10
      ],
      [
        1,
        48,
        `Backspace`,
        1,
        `Backspace`,
        8,
        `VK_BACK`,
        e10,
        e10
      ],
      [
        1,
        49,
        `Tab`,
        2,
        `Tab`,
        9,
        `VK_TAB`,
        e10,
        e10
      ],
      [
        1,
        50,
        `Space`,
        10,
        `Space`,
        32,
        `VK_SPACE`,
        e10,
        e10
      ],
      [
        0,
        51,
        `Minus`,
        88,
        `-`,
        189,
        `VK_OEM_MINUS`,
        `-`,
        `OEM_MINUS`
      ],
      [
        0,
        52,
        `Equal`,
        86,
        `=`,
        187,
        `VK_OEM_PLUS`,
        `=`,
        `OEM_PLUS`
      ],
      [
        0,
        53,
        `BracketLeft`,
        92,
        `[`,
        219,
        `VK_OEM_4`,
        `[`,
        `OEM_4`
      ],
      [
        0,
        54,
        `BracketRight`,
        94,
        `]`,
        221,
        `VK_OEM_6`,
        `]`,
        `OEM_6`
      ],
      [
        0,
        55,
        `Backslash`,
        93,
        `\\`,
        220,
        `VK_OEM_5`,
        `\\`,
        `OEM_5`
      ],
      [
        0,
        56,
        `IntlHash`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        0,
        57,
        `Semicolon`,
        85,
        `;`,
        186,
        `VK_OEM_1`,
        `;`,
        `OEM_1`
      ],
      [
        0,
        58,
        `Quote`,
        95,
        `'`,
        222,
        `VK_OEM_7`,
        `'`,
        `OEM_7`
      ],
      [
        0,
        59,
        `Backquote`,
        91,
        "`",
        192,
        `VK_OEM_3`,
        "`",
        `OEM_3`
      ],
      [
        0,
        60,
        `Comma`,
        87,
        `,`,
        188,
        `VK_OEM_COMMA`,
        `,`,
        `OEM_COMMA`
      ],
      [
        0,
        61,
        `Period`,
        89,
        `.`,
        190,
        `VK_OEM_PERIOD`,
        `.`,
        `OEM_PERIOD`
      ],
      [
        0,
        62,
        `Slash`,
        90,
        `/`,
        191,
        `VK_OEM_2`,
        `/`,
        `OEM_2`
      ],
      [
        1,
        63,
        `CapsLock`,
        8,
        `CapsLock`,
        20,
        `VK_CAPITAL`,
        e10,
        e10
      ],
      [
        1,
        64,
        `F1`,
        59,
        `F1`,
        112,
        `VK_F1`,
        e10,
        e10
      ],
      [
        1,
        65,
        `F2`,
        60,
        `F2`,
        113,
        `VK_F2`,
        e10,
        e10
      ],
      [
        1,
        66,
        `F3`,
        61,
        `F3`,
        114,
        `VK_F3`,
        e10,
        e10
      ],
      [
        1,
        67,
        `F4`,
        62,
        `F4`,
        115,
        `VK_F4`,
        e10,
        e10
      ],
      [
        1,
        68,
        `F5`,
        63,
        `F5`,
        116,
        `VK_F5`,
        e10,
        e10
      ],
      [
        1,
        69,
        `F6`,
        64,
        `F6`,
        117,
        `VK_F6`,
        e10,
        e10
      ],
      [
        1,
        70,
        `F7`,
        65,
        `F7`,
        118,
        `VK_F7`,
        e10,
        e10
      ],
      [
        1,
        71,
        `F8`,
        66,
        `F8`,
        119,
        `VK_F8`,
        e10,
        e10
      ],
      [
        1,
        72,
        `F9`,
        67,
        `F9`,
        120,
        `VK_F9`,
        e10,
        e10
      ],
      [
        1,
        73,
        `F10`,
        68,
        `F10`,
        121,
        `VK_F10`,
        e10,
        e10
      ],
      [
        1,
        74,
        `F11`,
        69,
        `F11`,
        122,
        `VK_F11`,
        e10,
        e10
      ],
      [
        1,
        75,
        `F12`,
        70,
        `F12`,
        123,
        `VK_F12`,
        e10,
        e10
      ],
      [
        1,
        76,
        `PrintScreen`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        77,
        `ScrollLock`,
        84,
        `ScrollLock`,
        145,
        `VK_SCROLL`,
        e10,
        e10
      ],
      [
        1,
        78,
        `Pause`,
        7,
        `PauseBreak`,
        19,
        `VK_PAUSE`,
        e10,
        e10
      ],
      [
        1,
        79,
        `Insert`,
        19,
        `Insert`,
        45,
        `VK_INSERT`,
        e10,
        e10
      ],
      [
        1,
        80,
        `Home`,
        14,
        `Home`,
        36,
        `VK_HOME`,
        e10,
        e10
      ],
      [
        1,
        81,
        `PageUp`,
        11,
        `PageUp`,
        33,
        `VK_PRIOR`,
        e10,
        e10
      ],
      [
        1,
        82,
        `Delete`,
        20,
        `Delete`,
        46,
        `VK_DELETE`,
        e10,
        e10
      ],
      [
        1,
        83,
        `End`,
        13,
        `End`,
        35,
        `VK_END`,
        e10,
        e10
      ],
      [
        1,
        84,
        `PageDown`,
        12,
        `PageDown`,
        34,
        `VK_NEXT`,
        e10,
        e10
      ],
      [
        1,
        85,
        `ArrowRight`,
        17,
        `RightArrow`,
        39,
        `VK_RIGHT`,
        `Right`,
        e10
      ],
      [
        1,
        86,
        `ArrowLeft`,
        15,
        `LeftArrow`,
        37,
        `VK_LEFT`,
        `Left`,
        e10
      ],
      [
        1,
        87,
        `ArrowDown`,
        18,
        `DownArrow`,
        40,
        `VK_DOWN`,
        `Down`,
        e10
      ],
      [
        1,
        88,
        `ArrowUp`,
        16,
        `UpArrow`,
        38,
        `VK_UP`,
        `Up`,
        e10
      ],
      [
        1,
        89,
        `NumLock`,
        83,
        `NumLock`,
        144,
        `VK_NUMLOCK`,
        e10,
        e10
      ],
      [
        1,
        90,
        `NumpadDivide`,
        113,
        `NumPad_Divide`,
        111,
        `VK_DIVIDE`,
        e10,
        e10
      ],
      [
        1,
        91,
        `NumpadMultiply`,
        108,
        `NumPad_Multiply`,
        106,
        `VK_MULTIPLY`,
        e10,
        e10
      ],
      [
        1,
        92,
        `NumpadSubtract`,
        111,
        `NumPad_Subtract`,
        109,
        `VK_SUBTRACT`,
        e10,
        e10
      ],
      [
        1,
        93,
        `NumpadAdd`,
        109,
        `NumPad_Add`,
        107,
        `VK_ADD`,
        e10,
        e10
      ],
      [
        1,
        94,
        `NumpadEnter`,
        3,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        95,
        `Numpad1`,
        99,
        `NumPad1`,
        97,
        `VK_NUMPAD1`,
        e10,
        e10
      ],
      [
        1,
        96,
        `Numpad2`,
        100,
        `NumPad2`,
        98,
        `VK_NUMPAD2`,
        e10,
        e10
      ],
      [
        1,
        97,
        `Numpad3`,
        101,
        `NumPad3`,
        99,
        `VK_NUMPAD3`,
        e10,
        e10
      ],
      [
        1,
        98,
        `Numpad4`,
        102,
        `NumPad4`,
        100,
        `VK_NUMPAD4`,
        e10,
        e10
      ],
      [
        1,
        99,
        `Numpad5`,
        103,
        `NumPad5`,
        101,
        `VK_NUMPAD5`,
        e10,
        e10
      ],
      [
        1,
        100,
        `Numpad6`,
        104,
        `NumPad6`,
        102,
        `VK_NUMPAD6`,
        e10,
        e10
      ],
      [
        1,
        101,
        `Numpad7`,
        105,
        `NumPad7`,
        103,
        `VK_NUMPAD7`,
        e10,
        e10
      ],
      [
        1,
        102,
        `Numpad8`,
        106,
        `NumPad8`,
        104,
        `VK_NUMPAD8`,
        e10,
        e10
      ],
      [
        1,
        103,
        `Numpad9`,
        107,
        `NumPad9`,
        105,
        `VK_NUMPAD9`,
        e10,
        e10
      ],
      [
        1,
        104,
        `Numpad0`,
        98,
        `NumPad0`,
        96,
        `VK_NUMPAD0`,
        e10,
        e10
      ],
      [
        1,
        105,
        `NumpadDecimal`,
        112,
        `NumPad_Decimal`,
        110,
        `VK_DECIMAL`,
        e10,
        e10
      ],
      [
        0,
        106,
        `IntlBackslash`,
        97,
        `OEM_102`,
        226,
        `VK_OEM_102`,
        e10,
        e10
      ],
      [
        1,
        107,
        `ContextMenu`,
        58,
        `ContextMenu`,
        93,
        e10,
        e10,
        e10
      ],
      [
        1,
        108,
        `Power`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        109,
        `NumpadEqual`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        110,
        `F13`,
        71,
        `F13`,
        124,
        `VK_F13`,
        e10,
        e10
      ],
      [
        1,
        111,
        `F14`,
        72,
        `F14`,
        125,
        `VK_F14`,
        e10,
        e10
      ],
      [
        1,
        112,
        `F15`,
        73,
        `F15`,
        126,
        `VK_F15`,
        e10,
        e10
      ],
      [
        1,
        113,
        `F16`,
        74,
        `F16`,
        127,
        `VK_F16`,
        e10,
        e10
      ],
      [
        1,
        114,
        `F17`,
        75,
        `F17`,
        128,
        `VK_F17`,
        e10,
        e10
      ],
      [
        1,
        115,
        `F18`,
        76,
        `F18`,
        129,
        `VK_F18`,
        e10,
        e10
      ],
      [
        1,
        116,
        `F19`,
        77,
        `F19`,
        130,
        `VK_F19`,
        e10,
        e10
      ],
      [
        1,
        117,
        `F20`,
        78,
        `F20`,
        131,
        `VK_F20`,
        e10,
        e10
      ],
      [
        1,
        118,
        `F21`,
        79,
        `F21`,
        132,
        `VK_F21`,
        e10,
        e10
      ],
      [
        1,
        119,
        `F22`,
        80,
        `F22`,
        133,
        `VK_F22`,
        e10,
        e10
      ],
      [
        1,
        120,
        `F23`,
        81,
        `F23`,
        134,
        `VK_F23`,
        e10,
        e10
      ],
      [
        1,
        121,
        `F24`,
        82,
        `F24`,
        135,
        `VK_F24`,
        e10,
        e10
      ],
      [
        1,
        122,
        `Open`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        123,
        `Help`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        124,
        `Select`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        125,
        `Again`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        126,
        `Undo`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        127,
        `Cut`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        128,
        `Copy`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        129,
        `Paste`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        130,
        `Find`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        131,
        `AudioVolumeMute`,
        117,
        `AudioVolumeMute`,
        173,
        `VK_VOLUME_MUTE`,
        e10,
        e10
      ],
      [
        1,
        132,
        `AudioVolumeUp`,
        118,
        `AudioVolumeUp`,
        175,
        `VK_VOLUME_UP`,
        e10,
        e10
      ],
      [
        1,
        133,
        `AudioVolumeDown`,
        119,
        `AudioVolumeDown`,
        174,
        `VK_VOLUME_DOWN`,
        e10,
        e10
      ],
      [
        1,
        134,
        `NumpadComma`,
        110,
        `NumPad_Separator`,
        108,
        `VK_SEPARATOR`,
        e10,
        e10
      ],
      [
        0,
        135,
        `IntlRo`,
        115,
        `ABNT_C1`,
        193,
        `VK_ABNT_C1`,
        e10,
        e10
      ],
      [
        1,
        136,
        `KanaMode`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        0,
        137,
        `IntlYen`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        138,
        `Convert`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        139,
        `NonConvert`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        140,
        `Lang1`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        141,
        `Lang2`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        142,
        `Lang3`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        143,
        `Lang4`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        144,
        `Lang5`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        145,
        `Abort`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        146,
        `Props`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        147,
        `NumpadParenLeft`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        148,
        `NumpadParenRight`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        149,
        `NumpadBackspace`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        150,
        `NumpadMemoryStore`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        151,
        `NumpadMemoryRecall`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        152,
        `NumpadMemoryClear`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        153,
        `NumpadMemoryAdd`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        154,
        `NumpadMemorySubtract`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        155,
        `NumpadClear`,
        131,
        `Clear`,
        12,
        `VK_CLEAR`,
        e10,
        e10
      ],
      [
        1,
        156,
        `NumpadClearEntry`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        5,
        `Ctrl`,
        17,
        `VK_CONTROL`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        4,
        `Shift`,
        16,
        `VK_SHIFT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        6,
        `Alt`,
        18,
        `VK_MENU`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        57,
        `Meta`,
        91,
        `VK_COMMAND`,
        e10,
        e10
      ],
      [
        1,
        157,
        `ControlLeft`,
        5,
        e10,
        0,
        `VK_LCONTROL`,
        e10,
        e10
      ],
      [
        1,
        158,
        `ShiftLeft`,
        4,
        e10,
        0,
        `VK_LSHIFT`,
        e10,
        e10
      ],
      [
        1,
        159,
        `AltLeft`,
        6,
        e10,
        0,
        `VK_LMENU`,
        e10,
        e10
      ],
      [
        1,
        160,
        `MetaLeft`,
        57,
        e10,
        0,
        `VK_LWIN`,
        e10,
        e10
      ],
      [
        1,
        161,
        `ControlRight`,
        5,
        e10,
        0,
        `VK_RCONTROL`,
        e10,
        e10
      ],
      [
        1,
        162,
        `ShiftRight`,
        4,
        e10,
        0,
        `VK_RSHIFT`,
        e10,
        e10
      ],
      [
        1,
        163,
        `AltRight`,
        6,
        e10,
        0,
        `VK_RMENU`,
        e10,
        e10
      ],
      [
        1,
        164,
        `MetaRight`,
        57,
        e10,
        0,
        `VK_RWIN`,
        e10,
        e10
      ],
      [
        1,
        165,
        `BrightnessUp`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        166,
        `BrightnessDown`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        167,
        `MediaPlay`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        168,
        `MediaRecord`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        169,
        `MediaFastForward`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        170,
        `MediaRewind`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        171,
        `MediaTrackNext`,
        124,
        `MediaTrackNext`,
        176,
        `VK_MEDIA_NEXT_TRACK`,
        e10,
        e10
      ],
      [
        1,
        172,
        `MediaTrackPrevious`,
        125,
        `MediaTrackPrevious`,
        177,
        `VK_MEDIA_PREV_TRACK`,
        e10,
        e10
      ],
      [
        1,
        173,
        `MediaStop`,
        126,
        `MediaStop`,
        178,
        `VK_MEDIA_STOP`,
        e10,
        e10
      ],
      [
        1,
        174,
        `Eject`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        175,
        `MediaPlayPause`,
        127,
        `MediaPlayPause`,
        179,
        `VK_MEDIA_PLAY_PAUSE`,
        e10,
        e10
      ],
      [
        1,
        176,
        `MediaSelect`,
        128,
        `LaunchMediaPlayer`,
        181,
        `VK_MEDIA_LAUNCH_MEDIA_SELECT`,
        e10,
        e10
      ],
      [
        1,
        177,
        `LaunchMail`,
        129,
        `LaunchMail`,
        180,
        `VK_MEDIA_LAUNCH_MAIL`,
        e10,
        e10
      ],
      [
        1,
        178,
        `LaunchApp2`,
        130,
        `LaunchApp2`,
        183,
        `VK_MEDIA_LAUNCH_APP2`,
        e10,
        e10
      ],
      [
        1,
        179,
        `LaunchApp1`,
        0,
        e10,
        0,
        `VK_MEDIA_LAUNCH_APP1`,
        e10,
        e10
      ],
      [
        1,
        180,
        `SelectTask`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        181,
        `LaunchScreenSaver`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        182,
        `BrowserSearch`,
        120,
        `BrowserSearch`,
        170,
        `VK_BROWSER_SEARCH`,
        e10,
        e10
      ],
      [
        1,
        183,
        `BrowserHome`,
        121,
        `BrowserHome`,
        172,
        `VK_BROWSER_HOME`,
        e10,
        e10
      ],
      [
        1,
        184,
        `BrowserBack`,
        122,
        `BrowserBack`,
        166,
        `VK_BROWSER_BACK`,
        e10,
        e10
      ],
      [
        1,
        185,
        `BrowserForward`,
        123,
        `BrowserForward`,
        167,
        `VK_BROWSER_FORWARD`,
        e10,
        e10
      ],
      [
        1,
        186,
        `BrowserStop`,
        0,
        e10,
        0,
        `VK_BROWSER_STOP`,
        e10,
        e10
      ],
      [
        1,
        187,
        `BrowserRefresh`,
        0,
        e10,
        0,
        `VK_BROWSER_REFRESH`,
        e10,
        e10
      ],
      [
        1,
        188,
        `BrowserFavorites`,
        0,
        e10,
        0,
        `VK_BROWSER_FAVORITES`,
        e10,
        e10
      ],
      [
        1,
        189,
        `ZoomToggle`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        190,
        `MailReply`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        191,
        `MailForward`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        192,
        `MailSend`,
        0,
        e10,
        0,
        e10,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        114,
        `KeyInComposition`,
        229,
        e10,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        116,
        `ABNT_C2`,
        194,
        `VK_ABNT_C2`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        96,
        `OEM_8`,
        223,
        `VK_OEM_8`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_KANA`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_HANGUL`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_JUNJA`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_FINAL`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_HANJA`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_KANJI`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_CONVERT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_NONCONVERT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_ACCEPT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_MODECHANGE`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_SELECT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_PRINT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_EXECUTE`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_SNAPSHOT`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_HELP`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_APPS`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_PROCESSKEY`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_PACKET`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_DBE_SBCSCHAR`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_DBE_DBCSCHAR`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_ATTN`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_CRSEL`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_EXSEL`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_EREOF`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_PLAY`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_ZOOM`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_NONAME`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_PA1`,
        e10,
        e10
      ],
      [
        1,
        0,
        e10,
        0,
        e10,
        0,
        `VK_OEM_CLEAR`,
        e10,
        e10
      ]
    ], n10 = [], r10 = [];
    for (let e11 of t10) {
      let [t11, i10, a10, o10, s10, c10, l10, u10, d10] = e11;
      if (r10[i10] || (r10[i10] = true, wi[i10] = a10, Ti[a10] = i10, Ei[a10.toLowerCase()] = i10, t11 && (Di[i10] = o10, o10 !== 0 && o10 !== 3 && o10 !== 5 && o10 !== 4 && o10 !== 6 && o10 !== 57 && (Oi[o10] = i10))), !n10[o10]) {
        if (n10[o10] = true, !s10) throw Error(`String representation missing for key code ${o10} around scan code ${a10}`);
        yi.define(o10, s10), bi.define(o10, u10 || s10), xi.define(o10, d10 || u10 || s10);
      }
      c10 && (Si[c10] = o10), l10 && (Ci[l10] = o10);
    }
    Oi[3] = 46;
  })();
  var ki;
  (function(e10) {
    function t10(e11) {
      return yi.keyCodeToStr(e11);
    }
    e10.toString = t10;
    function n10(e11) {
      return yi.strToKeyCode(e11);
    }
    e10.fromString = n10;
    function r10(e11) {
      return bi.keyCodeToStr(e11);
    }
    e10.toUserSettingsUS = r10;
    function i10(e11) {
      return xi.keyCodeToStr(e11);
    }
    e10.toUserSettingsGeneral = i10;
    function a10(e11) {
      return bi.strToKeyCode(e11) || xi.strToKeyCode(e11);
    }
    e10.fromUserSettings = a10;
    function o10(e11) {
      if (e11 >= 98 && e11 <= 113) return null;
      switch (e11) {
        case 16:
          return `Up`;
        case 18:
          return `Down`;
        case 15:
          return `Left`;
        case 17:
          return `Right`;
      }
      return yi.keyCodeToStr(e11);
    }
    e10.toElectronAccelerator = o10;
  })(ki || (ki = {}));
  Ai = function(e10, t10) {
    let n10 = (t10 & 65535) << 16 >>> 0;
    return (e10 | n10) >>> 0;
  };
  a();
  let ji;
  const Mi = globalThis.vscode;
  if (Mi !== void 0 && Mi.process !== void 0) {
    let e10 = Mi.process;
    ji = {
      get platform() {
        return e10.platform;
      },
      get arch() {
        return e10.arch;
      },
      get env() {
        return e10.env;
      },
      cwd() {
        return e10.cwd();
      }
    };
  } else ji = o !== void 0 && typeof ((_o2 = (_n2 = o) == null ? void 0 : _n2.versions) == null ? void 0 : _o2.node) == `string` ? {
    get platform() {
      return o.platform;
    },
    get arch() {
      return o.arch;
    },
    get env() {
      return {};
    },
    cwd() {
      return {}.VSCODE_CWD || o.cwd();
    }
  } : {
    get platform() {
      return mt ? `win32` : E ? `darwin` : `linux`;
    },
    get arch() {
    },
    get env() {
      return {};
    },
    cwd() {
      return `/`;
    }
  };
  const Ni = ji.cwd, Pi = ji.env, Fi = ji.platform, Ii = 65, Li = 97, Ri = 90, zi = 122, Bi = 46, Vi = 47, Hi = 92, Ui = 58, Wi = 63;
  var Gi = class extends Error {
    constructor(e10, t10, n10) {
      let r10;
      typeof t10 == `string` && t10.indexOf(`not `) === 0 ? (r10 = `must not be`, t10 = t10.replace(/^not /, ``)) : r10 = `must be`;
      let i10 = e10.indexOf(`.`) === -1 ? `argument` : `property`, a10 = `The "${e10}" ${i10} ${r10} of type ${t10}`;
      a10 += `. Received type ${typeof n10}`, super(a10), this.code = `ERR_INVALID_ARG_TYPE`;
    }
  };
  function Ki(e10, t10) {
    if (typeof e10 != `object` || !e10) throw new Gi(t10, `Object`, e10);
  }
  function qi(e10, t10) {
    if (typeof e10 != `string`) throw new Gi(t10, `string`, e10);
  }
  const Ji = Fi === `win32`;
  function Yi(e10) {
    return e10 === Vi || e10 === Hi;
  }
  function Xi(e10) {
    return e10 === Vi;
  }
  function Zi(e10) {
    return e10 >= Ii && e10 <= Ri || e10 >= Li && e10 <= zi;
  }
  function Qi(e10, t10, n10, r10) {
    let i10 = ``, a10 = 0, o10 = -1, s10 = 0, c10 = 0;
    for (let l10 = 0; l10 <= e10.length; ++l10) {
      if (l10 < e10.length) c10 = e10.charCodeAt(l10);
      else if (r10(c10)) break;
      else c10 = Vi;
      if (r10(c10)) {
        if (!(o10 === l10 - 1 || s10 === 1)) if (s10 === 2) {
          if (i10.length < 2 || a10 !== 2 || i10.charCodeAt(i10.length - 1) !== Bi || i10.charCodeAt(i10.length - 2) !== Bi) {
            if (i10.length > 2) {
              let e11 = i10.lastIndexOf(n10);
              e11 === -1 ? (i10 = ``, a10 = 0) : (i10 = i10.slice(0, e11), a10 = i10.length - 1 - i10.lastIndexOf(n10)), o10 = l10, s10 = 0;
              continue;
            } else if (i10.length !== 0) {
              i10 = ``, a10 = 0, o10 = l10, s10 = 0;
              continue;
            }
          }
          t10 && (i10 += i10.length > 0 ? `${n10}..` : `..`, a10 = 2);
        } else i10.length > 0 ? i10 += `${n10}${e10.slice(o10 + 1, l10)}` : i10 = e10.slice(o10 + 1, l10), a10 = l10 - o10 - 1;
        o10 = l10, s10 = 0;
      } else c10 === Bi && s10 !== -1 ? ++s10 : s10 = -1;
    }
    return i10;
  }
  function $i(e10) {
    return e10 ? `${e10[0] === `.` ? `` : `.`}${e10}` : ``;
  }
  function ea(e10, t10) {
    Ki(t10, `pathObject`);
    let n10 = t10.dir || t10.root, r10 = t10.base || `${t10.name || ``}${$i(t10.ext)}`;
    return n10 ? n10 === t10.root ? `${n10}${r10}` : `${n10}${e10}${r10}` : r10;
  }
  const ta = {
    resolve(...e10) {
      let t10 = ``, n10 = ``, r10 = false;
      for (let i10 = e10.length - 1; i10 >= -1; i10--) {
        let a10;
        if (i10 >= 0) {
          if (a10 = e10[i10], qi(a10, `paths[${i10}]`), a10.length === 0) continue;
        } else t10.length === 0 ? a10 = Ni() : (a10 = Pi[`=${t10}`] || Ni(), (a10 === void 0 || a10.slice(0, 2).toLowerCase() !== t10.toLowerCase() && a10.charCodeAt(2) === Hi) && (a10 = `${t10}\\`));
        let o10 = a10.length, s10 = 0, c10 = ``, l10 = false, u10 = a10.charCodeAt(0);
        if (o10 === 1) Yi(u10) && (s10 = 1, l10 = true);
        else if (Yi(u10)) if (l10 = true, Yi(a10.charCodeAt(1))) {
          let e11 = 2, t11 = e11;
          for (; e11 < o10 && !Yi(a10.charCodeAt(e11)); ) e11++;
          if (e11 < o10 && e11 !== t11) {
            let n11 = a10.slice(t11, e11);
            for (t11 = e11; e11 < o10 && Yi(a10.charCodeAt(e11)); ) e11++;
            if (e11 < o10 && e11 !== t11) {
              for (t11 = e11; e11 < o10 && !Yi(a10.charCodeAt(e11)); ) e11++;
              (e11 === o10 || e11 !== t11) && (c10 = `\\\\${n11}\\${a10.slice(t11, e11)}`, s10 = e11);
            }
          }
        } else s10 = 1;
        else Zi(u10) && a10.charCodeAt(1) === Ui && (c10 = a10.slice(0, 2), s10 = 2, o10 > 2 && Yi(a10.charCodeAt(2)) && (l10 = true, s10 = 3));
        if (c10.length > 0) if (t10.length > 0) {
          if (c10.toLowerCase() !== t10.toLowerCase()) continue;
        } else t10 = c10;
        if (r10) {
          if (t10.length > 0) break;
        } else if (n10 = `${a10.slice(s10)}\\${n10}`, r10 = l10, l10 && t10.length > 0) break;
      }
      return n10 = Qi(n10, !r10, `\\`, Yi), r10 ? `${t10}\\${n10}` : `${t10}${n10}` || `.`;
    },
    normalize(e10) {
      qi(e10, `path`);
      let t10 = e10.length;
      if (t10 === 0) return `.`;
      let n10 = 0, r10, i10 = false, a10 = e10.charCodeAt(0);
      if (t10 === 1) return Xi(a10) ? `\\` : e10;
      if (Yi(a10)) if (i10 = true, Yi(e10.charCodeAt(1))) {
        let i11 = 2, a11 = i11;
        for (; i11 < t10 && !Yi(e10.charCodeAt(i11)); ) i11++;
        if (i11 < t10 && i11 !== a11) {
          let o11 = e10.slice(a11, i11);
          for (a11 = i11; i11 < t10 && Yi(e10.charCodeAt(i11)); ) i11++;
          if (i11 < t10 && i11 !== a11) {
            for (a11 = i11; i11 < t10 && !Yi(e10.charCodeAt(i11)); ) i11++;
            if (i11 === t10) return `\\\\${o11}\\${e10.slice(a11)}\\`;
            i11 !== a11 && (r10 = `\\\\${o11}\\${e10.slice(a11, i11)}`, n10 = i11);
          }
        }
      } else n10 = 1;
      else Zi(a10) && e10.charCodeAt(1) === Ui && (r10 = e10.slice(0, 2), n10 = 2, t10 > 2 && Yi(e10.charCodeAt(2)) && (i10 = true, n10 = 3));
      let o10 = n10 < t10 ? Qi(e10.slice(n10), !i10, `\\`, Yi) : ``;
      return o10.length === 0 && !i10 && (o10 = `.`), o10.length > 0 && Yi(e10.charCodeAt(t10 - 1)) && (o10 += `\\`), r10 === void 0 ? i10 ? `\\${o10}` : o10 : i10 ? `${r10}\\${o10}` : `${r10}${o10}`;
    },
    isAbsolute(e10) {
      qi(e10, `path`);
      let t10 = e10.length;
      if (t10 === 0) return false;
      let n10 = e10.charCodeAt(0);
      return Yi(n10) || t10 > 2 && Zi(n10) && e10.charCodeAt(1) === Ui && Yi(e10.charCodeAt(2));
    },
    join(...e10) {
      if (e10.length === 0) return `.`;
      let t10, n10;
      for (let r11 = 0; r11 < e10.length; ++r11) {
        let i11 = e10[r11];
        qi(i11, `path`), i11.length > 0 && (t10 === void 0 ? t10 = n10 = i11 : t10 += `\\${i11}`);
      }
      if (t10 === void 0) return `.`;
      let r10 = true, i10 = 0;
      if (typeof n10 == `string` && Yi(n10.charCodeAt(0))) {
        ++i10;
        let e11 = n10.length;
        e11 > 1 && Yi(n10.charCodeAt(1)) && (++i10, e11 > 2 && (Yi(n10.charCodeAt(2)) ? ++i10 : r10 = false));
      }
      if (r10) {
        for (; i10 < t10.length && Yi(t10.charCodeAt(i10)); ) i10++;
        i10 >= 2 && (t10 = `\\${t10.slice(i10)}`);
      }
      return ta.normalize(t10);
    },
    relative(e10, t10) {
      if (qi(e10, `from`), qi(t10, `to`), e10 === t10) return ``;
      let n10 = ta.resolve(e10), r10 = ta.resolve(t10);
      if (n10 === r10 || (e10 = n10.toLowerCase(), t10 = r10.toLowerCase(), e10 === t10)) return ``;
      let i10 = 0;
      for (; i10 < e10.length && e10.charCodeAt(i10) === Hi; ) i10++;
      let a10 = e10.length;
      for (; a10 - 1 > i10 && e10.charCodeAt(a10 - 1) === Hi; ) a10--;
      let o10 = a10 - i10, s10 = 0;
      for (; s10 < t10.length && t10.charCodeAt(s10) === Hi; ) s10++;
      let c10 = t10.length;
      for (; c10 - 1 > s10 && t10.charCodeAt(c10 - 1) === Hi; ) c10--;
      let l10 = c10 - s10, u10 = o10 < l10 ? o10 : l10, d10 = -1, f10 = 0;
      for (; f10 < u10; f10++) {
        let n11 = e10.charCodeAt(i10 + f10);
        if (n11 !== t10.charCodeAt(s10 + f10)) break;
        n11 === Hi && (d10 = f10);
      }
      if (f10 !== u10) {
        if (d10 === -1) return r10;
      } else {
        if (l10 > u10) {
          if (t10.charCodeAt(s10 + f10) === Hi) return r10.slice(s10 + f10 + 1);
          if (f10 === 2) return r10.slice(s10 + f10);
        }
        o10 > u10 && (e10.charCodeAt(i10 + f10) === Hi ? d10 = f10 : f10 === 2 && (d10 = 3)), d10 === -1 && (d10 = 0);
      }
      let p10 = ``;
      for (f10 = i10 + d10 + 1; f10 <= a10; ++f10) (f10 === a10 || e10.charCodeAt(f10) === Hi) && (p10 += p10.length === 0 ? `..` : `\\..`);
      return s10 += d10, p10.length > 0 ? `${p10}${r10.slice(s10, c10)}` : (r10.charCodeAt(s10) === Hi && ++s10, r10.slice(s10, c10));
    },
    toNamespacedPath(e10) {
      if (typeof e10 != `string` || e10.length === 0) return e10;
      let t10 = ta.resolve(e10);
      if (t10.length <= 2) return e10;
      if (t10.charCodeAt(0) === Hi) {
        if (t10.charCodeAt(1) === Hi) {
          let e11 = t10.charCodeAt(2);
          if (e11 !== Wi && e11 !== Bi) return `\\\\?\\UNC\\${t10.slice(2)}`;
        }
      } else if (Zi(t10.charCodeAt(0)) && t10.charCodeAt(1) === Ui && t10.charCodeAt(2) === Hi) return `\\\\?\\${t10}`;
      return e10;
    },
    dirname(e10) {
      qi(e10, `path`);
      let t10 = e10.length;
      if (t10 === 0) return `.`;
      let n10 = -1, r10 = 0, i10 = e10.charCodeAt(0);
      if (t10 === 1) return Yi(i10) ? e10 : `.`;
      if (Yi(i10)) {
        if (n10 = r10 = 1, Yi(e10.charCodeAt(1))) {
          let i11 = 2, a11 = i11;
          for (; i11 < t10 && !Yi(e10.charCodeAt(i11)); ) i11++;
          if (i11 < t10 && i11 !== a11) {
            for (a11 = i11; i11 < t10 && Yi(e10.charCodeAt(i11)); ) i11++;
            if (i11 < t10 && i11 !== a11) {
              for (a11 = i11; i11 < t10 && !Yi(e10.charCodeAt(i11)); ) i11++;
              if (i11 === t10) return e10;
              i11 !== a11 && (n10 = r10 = i11 + 1);
            }
          }
        }
      } else Zi(i10) && e10.charCodeAt(1) === Ui && (n10 = t10 > 2 && Yi(e10.charCodeAt(2)) ? 3 : 2, r10 = n10);
      let a10 = -1, o10 = true;
      for (let n11 = t10 - 1; n11 >= r10; --n11) if (Yi(e10.charCodeAt(n11))) {
        if (!o10) {
          a10 = n11;
          break;
        }
      } else o10 = false;
      if (a10 === -1) {
        if (n10 === -1) return `.`;
        a10 = n10;
      }
      return e10.slice(0, a10);
    },
    basename(e10, t10) {
      t10 !== void 0 && qi(t10, `suffix`), qi(e10, `path`);
      let n10 = 0, r10 = -1, i10 = true, a10;
      if (e10.length >= 2 && Zi(e10.charCodeAt(0)) && e10.charCodeAt(1) === Ui && (n10 = 2), t10 !== void 0 && t10.length > 0 && t10.length <= e10.length) {
        if (t10 === e10) return ``;
        let o10 = t10.length - 1, s10 = -1;
        for (a10 = e10.length - 1; a10 >= n10; --a10) {
          let c10 = e10.charCodeAt(a10);
          if (Yi(c10)) {
            if (!i10) {
              n10 = a10 + 1;
              break;
            }
          } else s10 === -1 && (i10 = false, s10 = a10 + 1), o10 >= 0 && (c10 === t10.charCodeAt(o10) ? --o10 === -1 && (r10 = a10) : (o10 = -1, r10 = s10));
        }
        return n10 === r10 ? r10 = s10 : r10 === -1 && (r10 = e10.length), e10.slice(n10, r10);
      }
      for (a10 = e10.length - 1; a10 >= n10; --a10) if (Yi(e10.charCodeAt(a10))) {
        if (!i10) {
          n10 = a10 + 1;
          break;
        }
      } else r10 === -1 && (i10 = false, r10 = a10 + 1);
      return r10 === -1 ? `` : e10.slice(n10, r10);
    },
    extname(e10) {
      qi(e10, `path`);
      let t10 = 0, n10 = -1, r10 = 0, i10 = -1, a10 = true, o10 = 0;
      e10.length >= 2 && e10.charCodeAt(1) === Ui && Zi(e10.charCodeAt(0)) && (t10 = r10 = 2);
      for (let s10 = e10.length - 1; s10 >= t10; --s10) {
        let t11 = e10.charCodeAt(s10);
        if (Yi(t11)) {
          if (!a10) {
            r10 = s10 + 1;
            break;
          }
          continue;
        }
        i10 === -1 && (a10 = false, i10 = s10 + 1), t11 === Bi ? n10 === -1 ? n10 = s10 : o10 !== 1 && (o10 = 1) : n10 !== -1 && (o10 = -1);
      }
      return n10 === -1 || i10 === -1 || o10 === 0 || o10 === 1 && n10 === i10 - 1 && n10 === r10 + 1 ? `` : e10.slice(n10, i10);
    },
    format: ea.bind(null, `\\`),
    parse(e10) {
      qi(e10, `path`);
      let t10 = {
        root: ``,
        dir: ``,
        base: ``,
        ext: ``,
        name: ``
      };
      if (e10.length === 0) return t10;
      let n10 = e10.length, r10 = 0, i10 = e10.charCodeAt(0);
      if (n10 === 1) return Yi(i10) ? (t10.root = t10.dir = e10, t10) : (t10.base = t10.name = e10, t10);
      if (Yi(i10)) {
        if (r10 = 1, Yi(e10.charCodeAt(1))) {
          let t11 = 2, i11 = t11;
          for (; t11 < n10 && !Yi(e10.charCodeAt(t11)); ) t11++;
          if (t11 < n10 && t11 !== i11) {
            for (i11 = t11; t11 < n10 && Yi(e10.charCodeAt(t11)); ) t11++;
            if (t11 < n10 && t11 !== i11) {
              for (i11 = t11; t11 < n10 && !Yi(e10.charCodeAt(t11)); ) t11++;
              t11 === n10 ? r10 = t11 : t11 !== i11 && (r10 = t11 + 1);
            }
          }
        }
      } else if (Zi(i10) && e10.charCodeAt(1) === Ui) {
        if (n10 <= 2) return t10.root = t10.dir = e10, t10;
        if (r10 = 2, Yi(e10.charCodeAt(2))) {
          if (n10 === 3) return t10.root = t10.dir = e10, t10;
          r10 = 3;
        }
      }
      r10 > 0 && (t10.root = e10.slice(0, r10));
      let a10 = -1, o10 = r10, s10 = -1, c10 = true, l10 = e10.length - 1, u10 = 0;
      for (; l10 >= r10; --l10) {
        if (i10 = e10.charCodeAt(l10), Yi(i10)) {
          if (!c10) {
            o10 = l10 + 1;
            break;
          }
          continue;
        }
        s10 === -1 && (c10 = false, s10 = l10 + 1), i10 === Bi ? a10 === -1 ? a10 = l10 : u10 !== 1 && (u10 = 1) : a10 !== -1 && (u10 = -1);
      }
      return s10 !== -1 && (a10 === -1 || u10 === 0 || u10 === 1 && a10 === s10 - 1 && a10 === o10 + 1 ? t10.base = t10.name = e10.slice(o10, s10) : (t10.name = e10.slice(o10, a10), t10.base = e10.slice(o10, s10), t10.ext = e10.slice(a10, s10))), o10 > 0 && o10 !== r10 ? t10.dir = e10.slice(0, o10 - 1) : t10.dir = t10.root, t10;
    },
    sep: `\\`,
    delimiter: `;`,
    win32: null,
    posix: null
  }, na = (() => {
    if (Ji) {
      let e10 = /\\/g;
      return () => {
        let t10 = Ni().replace(e10, `/`);
        return t10.slice(t10.indexOf(`/`));
      };
    }
    return () => Ni();
  })(), ra = {
    resolve(...e10) {
      let t10 = ``, n10 = false;
      for (let r10 = e10.length - 1; r10 >= -1 && !n10; r10--) {
        let i10 = r10 >= 0 ? e10[r10] : na();
        qi(i10, `paths[${r10}]`), i10.length !== 0 && (t10 = `${i10}/${t10}`, n10 = i10.charCodeAt(0) === Vi);
      }
      return t10 = Qi(t10, !n10, `/`, Xi), n10 ? `/${t10}` : t10.length > 0 ? t10 : `.`;
    },
    normalize(e10) {
      if (qi(e10, `path`), e10.length === 0) return `.`;
      let t10 = e10.charCodeAt(0) === Vi, n10 = e10.charCodeAt(e10.length - 1) === Vi;
      return e10 = Qi(e10, !t10, `/`, Xi), e10.length === 0 ? t10 ? `/` : n10 ? `./` : `.` : (n10 && (e10 += `/`), t10 ? `/${e10}` : e10);
    },
    isAbsolute(e10) {
      return qi(e10, `path`), e10.length > 0 && e10.charCodeAt(0) === Vi;
    },
    join(...e10) {
      if (e10.length === 0) return `.`;
      let t10;
      for (let n10 = 0; n10 < e10.length; ++n10) {
        let r10 = e10[n10];
        qi(r10, `path`), r10.length > 0 && (t10 === void 0 ? t10 = r10 : t10 += `/${r10}`);
      }
      return t10 === void 0 ? `.` : ra.normalize(t10);
    },
    relative(e10, t10) {
      if (qi(e10, `from`), qi(t10, `to`), e10 === t10 || (e10 = ra.resolve(e10), t10 = ra.resolve(t10), e10 === t10)) return ``;
      let n10 = 1, r10 = e10.length, i10 = r10 - n10, a10 = 1, o10 = t10.length - a10, s10 = i10 < o10 ? i10 : o10, c10 = -1, l10 = 0;
      for (; l10 < s10; l10++) {
        let r11 = e10.charCodeAt(n10 + l10);
        if (r11 !== t10.charCodeAt(a10 + l10)) break;
        r11 === Vi && (c10 = l10);
      }
      if (l10 === s10) if (o10 > s10) {
        if (t10.charCodeAt(a10 + l10) === Vi) return t10.slice(a10 + l10 + 1);
        if (l10 === 0) return t10.slice(a10 + l10);
      } else i10 > s10 && (e10.charCodeAt(n10 + l10) === Vi ? c10 = l10 : l10 === 0 && (c10 = 0));
      let u10 = ``;
      for (l10 = n10 + c10 + 1; l10 <= r10; ++l10) (l10 === r10 || e10.charCodeAt(l10) === Vi) && (u10 += u10.length === 0 ? `..` : `/..`);
      return `${u10}${t10.slice(a10 + c10)}`;
    },
    toNamespacedPath(e10) {
      return e10;
    },
    dirname(e10) {
      if (qi(e10, `path`), e10.length === 0) return `.`;
      let t10 = e10.charCodeAt(0) === Vi, n10 = -1, r10 = true;
      for (let t11 = e10.length - 1; t11 >= 1; --t11) if (e10.charCodeAt(t11) === Vi) {
        if (!r10) {
          n10 = t11;
          break;
        }
      } else r10 = false;
      return n10 === -1 ? t10 ? `/` : `.` : t10 && n10 === 1 ? `//` : e10.slice(0, n10);
    },
    basename(e10, t10) {
      t10 !== void 0 && qi(t10, `ext`), qi(e10, `path`);
      let n10 = 0, r10 = -1, i10 = true, a10;
      if (t10 !== void 0 && t10.length > 0 && t10.length <= e10.length) {
        if (t10 === e10) return ``;
        let o10 = t10.length - 1, s10 = -1;
        for (a10 = e10.length - 1; a10 >= 0; --a10) {
          let c10 = e10.charCodeAt(a10);
          if (c10 === Vi) {
            if (!i10) {
              n10 = a10 + 1;
              break;
            }
          } else s10 === -1 && (i10 = false, s10 = a10 + 1), o10 >= 0 && (c10 === t10.charCodeAt(o10) ? --o10 === -1 && (r10 = a10) : (o10 = -1, r10 = s10));
        }
        return n10 === r10 ? r10 = s10 : r10 === -1 && (r10 = e10.length), e10.slice(n10, r10);
      }
      for (a10 = e10.length - 1; a10 >= 0; --a10) if (e10.charCodeAt(a10) === Vi) {
        if (!i10) {
          n10 = a10 + 1;
          break;
        }
      } else r10 === -1 && (i10 = false, r10 = a10 + 1);
      return r10 === -1 ? `` : e10.slice(n10, r10);
    },
    extname(e10) {
      qi(e10, `path`);
      let t10 = -1, n10 = 0, r10 = -1, i10 = true, a10 = 0;
      for (let o10 = e10.length - 1; o10 >= 0; --o10) {
        let s10 = e10.charCodeAt(o10);
        if (s10 === Vi) {
          if (!i10) {
            n10 = o10 + 1;
            break;
          }
          continue;
        }
        r10 === -1 && (i10 = false, r10 = o10 + 1), s10 === Bi ? t10 === -1 ? t10 = o10 : a10 !== 1 && (a10 = 1) : t10 !== -1 && (a10 = -1);
      }
      return t10 === -1 || r10 === -1 || a10 === 0 || a10 === 1 && t10 === r10 - 1 && t10 === n10 + 1 ? `` : e10.slice(t10, r10);
    },
    format: ea.bind(null, `/`),
    parse(e10) {
      qi(e10, `path`);
      let t10 = {
        root: ``,
        dir: ``,
        base: ``,
        ext: ``,
        name: ``
      };
      if (e10.length === 0) return t10;
      let n10 = e10.charCodeAt(0) === Vi, r10;
      n10 ? (t10.root = `/`, r10 = 1) : r10 = 0;
      let i10 = -1, a10 = 0, o10 = -1, s10 = true, c10 = e10.length - 1, l10 = 0;
      for (; c10 >= r10; --c10) {
        let t11 = e10.charCodeAt(c10);
        if (t11 === Vi) {
          if (!s10) {
            a10 = c10 + 1;
            break;
          }
          continue;
        }
        o10 === -1 && (s10 = false, o10 = c10 + 1), t11 === Bi ? i10 === -1 ? i10 = c10 : l10 !== 1 && (l10 = 1) : i10 !== -1 && (l10 = -1);
      }
      if (o10 !== -1) {
        let r11 = a10 === 0 && n10 ? 1 : a10;
        i10 === -1 || l10 === 0 || l10 === 1 && i10 === o10 - 1 && i10 === a10 + 1 ? t10.base = t10.name = e10.slice(r11, o10) : (t10.name = e10.slice(r11, i10), t10.base = e10.slice(r11, o10), t10.ext = e10.slice(i10, o10));
      }
      return a10 > 0 ? t10.dir = e10.slice(0, a10 - 1) : n10 && (t10.dir = `/`), t10;
    },
    sep: `/`,
    delimiter: `:`,
    win32: null,
    posix: null
  };
  ra.win32 = ta.win32 = ta, ra.posix = ta.posix = ra;
  let ia, aa, oa, sa, ua, fa, pa, ma;
  ia = Ji ? ta.normalize : ra.normalize;
  aa = Ji ? ta.join : ra.join;
  oa = Ji ? ta.resolve : ra.resolve;
  sa = Ji ? ta.relative : ra.relative;
  ca = Ji ? ta.dirname : ra.dirname;
  la = Ji ? ta.basename : ra.basename;
  ua = Ji ? ta.extname : ra.extname;
  da = Ji ? ta.sep : ra.sep;
  fa = /^\w[\w\d+.-]*$/;
  pa = /^\//;
  ma = /^\/\//;
  function ha(e10, t10) {
    if (!e10.scheme && t10) throw Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${e10.authority}", path: "${e10.path}", query: "${e10.query}", fragment: "${e10.fragment}"}`);
    if (e10.scheme && !fa.test(e10.scheme)) throw Error(`[UriError]: Scheme contains illegal characters.`);
    if (e10.path) {
      if (e10.authority) {
        if (!pa.test(e10.path)) throw Error(`[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character`);
      } else if (ma.test(e10.path)) throw Error(`[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")`);
    }
  }
  function ga(e10, t10) {
    return !e10 && !t10 ? `file` : e10;
  }
  function _a(e10, t10) {
    switch (e10) {
      case `https`:
      case `http`:
      case `file`:
        t10 ? t10[0] !== ya && (t10 = ya + t10) : t10 = ya;
        break;
    }
    return t10;
  }
  const va = ``, ya = `/`, ba = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
  xa = class e10 {
    static isUri(t10) {
      return t10 instanceof e10 ? true : t10 ? typeof t10.authority == `string` && typeof t10.fragment == `string` && typeof t10.path == `string` && typeof t10.query == `string` && typeof t10.scheme == `string` && typeof t10.fsPath == `string` && typeof t10.with == `function` && typeof t10.toString == `function` : false;
    }
    constructor(e11, t10, n10, r10, i10, a10 = false) {
      typeof e11 == `object` ? (this.scheme = e11.scheme || va, this.authority = e11.authority || va, this.path = e11.path || va, this.query = e11.query || va, this.fragment = e11.fragment || va) : (this.scheme = ga(e11, a10), this.authority = t10 || va, this.path = _a(this.scheme, n10 || va), this.query = r10 || va, this.fragment = i10 || va, ha(this, a10));
    }
    get fsPath() {
      return Da(this, false);
    }
    with(e11) {
      if (!e11) return this;
      let { scheme: t10, authority: n10, path: r10, query: i10, fragment: a10 } = e11;
      return t10 === void 0 ? t10 = this.scheme : t10 === null && (t10 = va), n10 === void 0 ? n10 = this.authority : n10 === null && (n10 = va), r10 === void 0 ? r10 = this.path : r10 === null && (r10 = va), i10 === void 0 ? i10 = this.query : i10 === null && (i10 = va), a10 === void 0 ? a10 = this.fragment : a10 === null && (a10 = va), t10 === this.scheme && n10 === this.authority && r10 === this.path && i10 === this.query && a10 === this.fragment ? this : new Ca(t10, n10, r10, i10, a10);
    }
    static parse(e11, t10 = false) {
      let n10 = ba.exec(e11);
      return n10 ? new Ca(n10[2] || va, ja(n10[4] || va), ja(n10[5] || va), ja(n10[7] || va), ja(n10[9] || va), t10) : new Ca(va, va, va, va, va);
    }
    static file(e11) {
      let t10 = va;
      if (mt && (e11 = e11.replace(/\\/g, ya)), e11[0] === ya && e11[1] === ya) {
        let n10 = e11.indexOf(ya, 2);
        n10 === -1 ? (t10 = e11.substring(2), e11 = ya) : (t10 = e11.substring(2, n10), e11 = e11.substring(n10) || ya);
      }
      return new Ca(`file`, t10, e11, va, va);
    }
    static from(e11, t10) {
      let n10 = new Ca(e11.scheme, e11.authority, e11.path, e11.query, e11.fragment, t10);
      return n10;
    }
    static joinPath(t10, ...n10) {
      if (!t10.path) throw Error(`[UriError]: cannot call joinPath on URI without path`);
      let r10;
      return r10 = mt && t10.scheme === `file` ? e10.file(ta.join(Da(t10, true), ...n10)).path : ra.join(t10.path, ...n10), t10.with({
        path: r10
      });
    }
    toString(e11 = false) {
      return Oa(this, e11);
    }
    toJSON() {
      return this;
    }
    static revive(t10) {
      if (t10) {
        if (t10 instanceof e10) return t10;
        {
          let e11 = new Ca(t10);
          return e11._formatted = t10.external ?? null, e11._fsPath = t10._sep === Sa ? t10.fsPath ?? null : null, e11;
        }
      } else return t10;
    }
  };
  const Sa = mt ? 1 : void 0;
  var Ca = class extends xa {
    constructor() {
      super(...arguments), this._formatted = null, this._fsPath = null;
    }
    get fsPath() {
      return this._fsPath || (this._fsPath = Da(this, false)), this._fsPath;
    }
    toString(e10 = false) {
      return e10 ? Oa(this, true) : (this._formatted || (this._formatted = Oa(this, false)), this._formatted);
    }
    toJSON() {
      let e10 = {
        $mid: 1
      };
      return this._fsPath && (e10.fsPath = this._fsPath, e10._sep = Sa), this._formatted && (e10.external = this._formatted), this.path && (e10.path = this.path), this.scheme && (e10.scheme = this.scheme), this.authority && (e10.authority = this.authority), this.query && (e10.query = this.query), this.fragment && (e10.fragment = this.fragment), e10;
    }
  };
  const wa = {
    58: `%3A`,
    47: `%2F`,
    63: `%3F`,
    35: `%23`,
    91: `%5B`,
    93: `%5D`,
    64: `%40`,
    33: `%21`,
    36: `%24`,
    38: `%26`,
    39: `%27`,
    40: `%28`,
    41: `%29`,
    42: `%2A`,
    43: `%2B`,
    44: `%2C`,
    59: `%3B`,
    61: `%3D`,
    32: `%20`
  };
  function Ta(e10, t10, n10) {
    let r10, i10 = -1;
    for (let a10 = 0; a10 < e10.length; a10++) {
      let o10 = e10.charCodeAt(a10);
      if (o10 >= 97 && o10 <= 122 || o10 >= 65 && o10 <= 90 || o10 >= 48 && o10 <= 57 || o10 === 45 || o10 === 46 || o10 === 95 || o10 === 126 || t10 && o10 === 47 || n10 && o10 === 91 || n10 && o10 === 93 || n10 && o10 === 58) i10 !== -1 && (r10 += encodeURIComponent(e10.substring(i10, a10)), i10 = -1), r10 !== void 0 && (r10 += e10.charAt(a10));
      else {
        r10 === void 0 && (r10 = e10.substr(0, a10));
        let t11 = wa[o10];
        t11 === void 0 ? i10 === -1 && (i10 = a10) : (i10 !== -1 && (r10 += encodeURIComponent(e10.substring(i10, a10)), i10 = -1), r10 += t11);
      }
    }
    return i10 !== -1 && (r10 += encodeURIComponent(e10.substring(i10))), r10 === void 0 ? e10 : r10;
  }
  function Ea(e10) {
    let t10;
    for (let n10 = 0; n10 < e10.length; n10++) {
      let r10 = e10.charCodeAt(n10);
      r10 === 35 || r10 === 63 ? (t10 === void 0 && (t10 = e10.substr(0, n10)), t10 += wa[r10]) : t10 !== void 0 && (t10 += e10[n10]);
    }
    return t10 === void 0 ? e10 : t10;
  }
  function Da(e10, t10) {
    let n10;
    return n10 = e10.authority && e10.path.length > 1 && e10.scheme === `file` ? `//${e10.authority}${e10.path}` : e10.path.charCodeAt(0) === 47 && (e10.path.charCodeAt(1) >= 65 && e10.path.charCodeAt(1) <= 90 || e10.path.charCodeAt(1) >= 97 && e10.path.charCodeAt(1) <= 122) && e10.path.charCodeAt(2) === 58 ? t10 ? e10.path.substr(1) : e10.path[1].toLowerCase() + e10.path.substr(2) : e10.path, mt && (n10 = n10.replace(/\//g, `\\`)), n10;
  }
  function Oa(e10, t10) {
    let n10 = t10 ? Ea : Ta, r10 = ``, { scheme: i10, authority: a10, path: o10, query: s10, fragment: c10 } = e10;
    if (i10 && (r10 += i10, r10 += `:`), (a10 || i10 === `file`) && (r10 += ya, r10 += ya), a10) {
      let e11 = a10.indexOf(`@`);
      if (e11 !== -1) {
        let t11 = a10.substr(0, e11);
        a10 = a10.substr(e11 + 1), e11 = t11.lastIndexOf(`:`), e11 === -1 ? r10 += n10(t11, false, false) : (r10 += n10(t11.substr(0, e11), false, false), r10 += `:`, r10 += n10(t11.substr(e11 + 1), false, true)), r10 += `@`;
      }
      a10 = a10.toLowerCase(), e11 = a10.lastIndexOf(`:`), e11 === -1 ? r10 += n10(a10, false, true) : (r10 += n10(a10.substr(0, e11), false, true), r10 += a10.substr(e11));
    }
    if (o10) {
      if (o10.length >= 3 && o10.charCodeAt(0) === 47 && o10.charCodeAt(2) === 58) {
        let e11 = o10.charCodeAt(1);
        e11 >= 65 && e11 <= 90 && (o10 = `/${String.fromCharCode(e11 + 32)}:${o10.substr(3)}`);
      } else if (o10.length >= 2 && o10.charCodeAt(1) === 58) {
        let e11 = o10.charCodeAt(0);
        e11 >= 65 && e11 <= 90 && (o10 = `${String.fromCharCode(e11 + 32)}:${o10.substr(2)}`);
      }
      r10 += n10(o10, true, false);
    }
    return s10 && (r10 += `?`, r10 += n10(s10, false, false)), c10 && (r10 += `#`, r10 += t10 ? c10 : Ta(c10, false, false)), r10;
  }
  function ka(e10) {
    try {
      return decodeURIComponent(e10);
    } catch {
      return e10.length > 3 ? e10.substr(0, 3) + ka(e10.substr(3)) : e10;
    }
  }
  const Aa = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
  function ja(e10) {
    return e10.match(Aa) ? e10.replace(Aa, (e11) => ka(e11)) : e10;
  }
  P = class e10 {
    constructor(e11, t10) {
      this.lineNumber = e11, this.column = t10;
    }
    with(t10 = this.lineNumber, n10 = this.column) {
      return t10 === this.lineNumber && n10 === this.column ? this : new e10(t10, n10);
    }
    delta(e11 = 0, t10 = 0) {
      return this.with(this.lineNumber + e11, this.column + t10);
    }
    equals(t10) {
      return e10.equals(this, t10);
    }
    static equals(e11, t10) {
      return !e11 && !t10 ? true : !!e11 && !!t10 && e11.lineNumber === t10.lineNumber && e11.column === t10.column;
    }
    isBefore(t10) {
      return e10.isBefore(this, t10);
    }
    static isBefore(e11, t10) {
      return e11.lineNumber < t10.lineNumber ? true : t10.lineNumber < e11.lineNumber ? false : e11.column < t10.column;
    }
    isBeforeOrEqual(t10) {
      return e10.isBeforeOrEqual(this, t10);
    }
    static isBeforeOrEqual(e11, t10) {
      return e11.lineNumber < t10.lineNumber ? true : t10.lineNumber < e11.lineNumber ? false : e11.column <= t10.column;
    }
    static compare(e11, t10) {
      let n10 = e11.lineNumber | 0, r10 = t10.lineNumber | 0;
      if (n10 === r10) {
        let n11 = e11.column | 0, r11 = t10.column | 0;
        return n11 - r11;
      }
      return n10 - r10;
    }
    clone() {
      return new e10(this.lineNumber, this.column);
    }
    toString() {
      return `(` + this.lineNumber + `,` + this.column + `)`;
    }
    static lift(t10) {
      return new e10(t10.lineNumber, t10.column);
    }
    static isIPosition(e11) {
      return e11 && typeof e11.lineNumber == `number` && typeof e11.column == `number`;
    }
    toJSON() {
      return {
        lineNumber: this.lineNumber,
        column: this.column
      };
    }
  };
  F = class e10 {
    constructor(e11, t10, n10, r10) {
      e11 > n10 || e11 === n10 && t10 > r10 ? (this.startLineNumber = n10, this.startColumn = r10, this.endLineNumber = e11, this.endColumn = t10) : (this.startLineNumber = e11, this.startColumn = t10, this.endLineNumber = n10, this.endColumn = r10);
    }
    isEmpty() {
      return e10.isEmpty(this);
    }
    static isEmpty(e11) {
      return e11.startLineNumber === e11.endLineNumber && e11.startColumn === e11.endColumn;
    }
    containsPosition(t10) {
      return e10.containsPosition(this, t10);
    }
    static containsPosition(e11, t10) {
      return !(t10.lineNumber < e11.startLineNumber || t10.lineNumber > e11.endLineNumber || t10.lineNumber === e11.startLineNumber && t10.column < e11.startColumn || t10.lineNumber === e11.endLineNumber && t10.column > e11.endColumn);
    }
    static strictContainsPosition(e11, t10) {
      return !(t10.lineNumber < e11.startLineNumber || t10.lineNumber > e11.endLineNumber || t10.lineNumber === e11.startLineNumber && t10.column <= e11.startColumn || t10.lineNumber === e11.endLineNumber && t10.column >= e11.endColumn);
    }
    containsRange(t10) {
      return e10.containsRange(this, t10);
    }
    static containsRange(e11, t10) {
      return !(t10.startLineNumber < e11.startLineNumber || t10.endLineNumber < e11.startLineNumber || t10.startLineNumber > e11.endLineNumber || t10.endLineNumber > e11.endLineNumber || t10.startLineNumber === e11.startLineNumber && t10.startColumn < e11.startColumn || t10.endLineNumber === e11.endLineNumber && t10.endColumn > e11.endColumn);
    }
    strictContainsRange(t10) {
      return e10.strictContainsRange(this, t10);
    }
    static strictContainsRange(e11, t10) {
      return !(t10.startLineNumber < e11.startLineNumber || t10.endLineNumber < e11.startLineNumber || t10.startLineNumber > e11.endLineNumber || t10.endLineNumber > e11.endLineNumber || t10.startLineNumber === e11.startLineNumber && t10.startColumn <= e11.startColumn || t10.endLineNumber === e11.endLineNumber && t10.endColumn >= e11.endColumn);
    }
    plusRange(t10) {
      return e10.plusRange(this, t10);
    }
    static plusRange(t10, n10) {
      let r10, i10, a10, o10;
      return n10.startLineNumber < t10.startLineNumber ? (r10 = n10.startLineNumber, i10 = n10.startColumn) : n10.startLineNumber === t10.startLineNumber ? (r10 = n10.startLineNumber, i10 = Math.min(n10.startColumn, t10.startColumn)) : (r10 = t10.startLineNumber, i10 = t10.startColumn), n10.endLineNumber > t10.endLineNumber ? (a10 = n10.endLineNumber, o10 = n10.endColumn) : n10.endLineNumber === t10.endLineNumber ? (a10 = n10.endLineNumber, o10 = Math.max(n10.endColumn, t10.endColumn)) : (a10 = t10.endLineNumber, o10 = t10.endColumn), new e10(r10, i10, a10, o10);
    }
    intersectRanges(t10) {
      return e10.intersectRanges(this, t10);
    }
    static intersectRanges(t10, n10) {
      let r10 = t10.startLineNumber, i10 = t10.startColumn, a10 = t10.endLineNumber, o10 = t10.endColumn, s10 = n10.startLineNumber, c10 = n10.startColumn, l10 = n10.endLineNumber, u10 = n10.endColumn;
      return r10 < s10 ? (r10 = s10, i10 = c10) : r10 === s10 && (i10 = Math.max(i10, c10)), a10 > l10 ? (a10 = l10, o10 = u10) : a10 === l10 && (o10 = Math.min(o10, u10)), r10 > a10 || r10 === a10 && i10 > o10 ? null : new e10(r10, i10, a10, o10);
    }
    equalsRange(t10) {
      return e10.equalsRange(this, t10);
    }
    static equalsRange(e11, t10) {
      return !e11 && !t10 ? true : !!e11 && !!t10 && e11.startLineNumber === t10.startLineNumber && e11.startColumn === t10.startColumn && e11.endLineNumber === t10.endLineNumber && e11.endColumn === t10.endColumn;
    }
    getEndPosition() {
      return e10.getEndPosition(this);
    }
    static getEndPosition(e11) {
      return new P(e11.endLineNumber, e11.endColumn);
    }
    getStartPosition() {
      return e10.getStartPosition(this);
    }
    static getStartPosition(e11) {
      return new P(e11.startLineNumber, e11.startColumn);
    }
    toString() {
      return `[` + this.startLineNumber + `,` + this.startColumn + ` -> ` + this.endLineNumber + `,` + this.endColumn + `]`;
    }
    setEndPosition(t10, n10) {
      return new e10(this.startLineNumber, this.startColumn, t10, n10);
    }
    setStartPosition(t10, n10) {
      return new e10(t10, n10, this.endLineNumber, this.endColumn);
    }
    collapseToStart() {
      return e10.collapseToStart(this);
    }
    static collapseToStart(t10) {
      return new e10(t10.startLineNumber, t10.startColumn, t10.startLineNumber, t10.startColumn);
    }
    collapseToEnd() {
      return e10.collapseToEnd(this);
    }
    static collapseToEnd(t10) {
      return new e10(t10.endLineNumber, t10.endColumn, t10.endLineNumber, t10.endColumn);
    }
    delta(t10) {
      return new e10(this.startLineNumber + t10, this.startColumn, this.endLineNumber + t10, this.endColumn);
    }
    static fromPositions(t10, n10 = t10) {
      return new e10(t10.lineNumber, t10.column, n10.lineNumber, n10.column);
    }
    static lift(t10) {
      return t10 ? new e10(t10.startLineNumber, t10.startColumn, t10.endLineNumber, t10.endColumn) : null;
    }
    static isIRange(e11) {
      return e11 && typeof e11.startLineNumber == `number` && typeof e11.startColumn == `number` && typeof e11.endLineNumber == `number` && typeof e11.endColumn == `number`;
    }
    static areIntersectingOrTouching(e11, t10) {
      return !(e11.endLineNumber < t10.startLineNumber || e11.endLineNumber === t10.startLineNumber && e11.endColumn < t10.startColumn || t10.endLineNumber < e11.startLineNumber || t10.endLineNumber === e11.startLineNumber && t10.endColumn < e11.startColumn);
    }
    static areIntersecting(e11, t10) {
      return !(e11.endLineNumber < t10.startLineNumber || e11.endLineNumber === t10.startLineNumber && e11.endColumn <= t10.startColumn || t10.endLineNumber < e11.startLineNumber || t10.endLineNumber === e11.startLineNumber && t10.endColumn <= e11.startColumn);
    }
    static compareRangesUsingStarts(e11, t10) {
      if (e11 && t10) {
        let n11 = e11.startLineNumber | 0, r11 = t10.startLineNumber | 0;
        if (n11 === r11) {
          let n12 = e11.startColumn | 0, r12 = t10.startColumn | 0;
          if (n12 === r12) {
            let n13 = e11.endLineNumber | 0, r13 = t10.endLineNumber | 0;
            if (n13 === r13) {
              let n14 = e11.endColumn | 0, r14 = t10.endColumn | 0;
              return n14 - r14;
            }
            return n13 - r13;
          }
          return n12 - r12;
        }
        return n11 - r11;
      }
      let n10 = e11 ? 1 : 0, r10 = t10 ? 1 : 0;
      return n10 - r10;
    }
    static compareRangesUsingEnds(e11, t10) {
      return e11.endLineNumber === t10.endLineNumber ? e11.endColumn === t10.endColumn ? e11.startLineNumber === t10.startLineNumber ? e11.startColumn - t10.startColumn : e11.startLineNumber - t10.startLineNumber : e11.endColumn - t10.endColumn : e11.endLineNumber - t10.endLineNumber;
    }
    static spansMultipleLines(e11) {
      return e11.endLineNumber > e11.startLineNumber;
    }
    toJSON() {
      return this;
    }
  };
  Ma = class e10 extends F {
    constructor(e11, t10, n10, r10) {
      super(e11, t10, n10, r10), this.selectionStartLineNumber = e11, this.selectionStartColumn = t10, this.positionLineNumber = n10, this.positionColumn = r10;
    }
    toString() {
      return `[` + this.selectionStartLineNumber + `,` + this.selectionStartColumn + ` -> ` + this.positionLineNumber + `,` + this.positionColumn + `]`;
    }
    equalsSelection(t10) {
      return e10.selectionsEqual(this, t10);
    }
    static selectionsEqual(e11, t10) {
      return e11.selectionStartLineNumber === t10.selectionStartLineNumber && e11.selectionStartColumn === t10.selectionStartColumn && e11.positionLineNumber === t10.positionLineNumber && e11.positionColumn === t10.positionColumn;
    }
    getDirection() {
      return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? 0 : 1;
    }
    setEndPosition(t10, n10) {
      return this.getDirection() === 0 ? new e10(this.startLineNumber, this.startColumn, t10, n10) : new e10(t10, n10, this.startLineNumber, this.startColumn);
    }
    getPosition() {
      return new P(this.positionLineNumber, this.positionColumn);
    }
    getSelectionStart() {
      return new P(this.selectionStartLineNumber, this.selectionStartColumn);
    }
    setStartPosition(t10, n10) {
      return this.getDirection() === 0 ? new e10(t10, n10, this.endLineNumber, this.endColumn) : new e10(this.endLineNumber, this.endColumn, t10, n10);
    }
    static fromPositions(t10, n10 = t10) {
      return new e10(t10.lineNumber, t10.column, n10.lineNumber, n10.column);
    }
    static fromRange(t10, n10) {
      return n10 === 0 ? new e10(t10.startLineNumber, t10.startColumn, t10.endLineNumber, t10.endColumn) : new e10(t10.endLineNumber, t10.endColumn, t10.startLineNumber, t10.startColumn);
    }
    static liftSelection(t10) {
      return new e10(t10.selectionStartLineNumber, t10.selectionStartColumn, t10.positionLineNumber, t10.positionColumn);
    }
    static selectionsArrEqual(e11, t10) {
      if (e11 && !t10 || !e11 && t10) return false;
      if (!e11 && !t10) return true;
      if (e11.length !== t10.length) return false;
      for (let n10 = 0, r10 = e11.length; n10 < r10; n10++) if (!this.selectionsEqual(e11[n10], t10[n10])) return false;
      return true;
    }
    static isISelection(e11) {
      return e11 && typeof e11.selectionStartLineNumber == `number` && typeof e11.selectionStartColumn == `number` && typeof e11.positionLineNumber == `number` && typeof e11.positionColumn == `number`;
    }
    static createWithDirection(t10, n10, r10, i10, a10) {
      return a10 === 0 ? new e10(t10, n10, r10, i10) : new e10(r10, i10, t10, n10);
    }
  };
  const Na = /* @__PURE__ */ Object.create(null);
  function I(e10, t10) {
    if (_e(t10)) {
      let n10 = Na[t10];
      if (n10 === void 0) throw Error(`${e10} references an unknown codicon: ${t10}`);
      t10 = n10;
    }
    return Na[e10] = t10, {
      id: e10
    };
  }
  function Pa() {
    return Na;
  }
  let Fa, Ia;
  Fa = {
    add: I(`add`, 6e4),
    plus: I(`plus`, 6e4),
    gistNew: I(`gist-new`, 6e4),
    repoCreate: I(`repo-create`, 6e4),
    lightbulb: I(`lightbulb`, 60001),
    lightBulb: I(`light-bulb`, 60001),
    repo: I(`repo`, 60002),
    repoDelete: I(`repo-delete`, 60002),
    gistFork: I(`gist-fork`, 60003),
    repoForked: I(`repo-forked`, 60003),
    gitPullRequest: I(`git-pull-request`, 60004),
    gitPullRequestAbandoned: I(`git-pull-request-abandoned`, 60004),
    recordKeys: I(`record-keys`, 60005),
    keyboard: I(`keyboard`, 60005),
    tag: I(`tag`, 60006),
    gitPullRequestLabel: I(`git-pull-request-label`, 60006),
    tagAdd: I(`tag-add`, 60006),
    tagRemove: I(`tag-remove`, 60006),
    person: I(`person`, 60007),
    personFollow: I(`person-follow`, 60007),
    personOutline: I(`person-outline`, 60007),
    personFilled: I(`person-filled`, 60007),
    gitBranch: I(`git-branch`, 60008),
    gitBranchCreate: I(`git-branch-create`, 60008),
    gitBranchDelete: I(`git-branch-delete`, 60008),
    sourceControl: I(`source-control`, 60008),
    mirror: I(`mirror`, 60009),
    mirrorPublic: I(`mirror-public`, 60009),
    star: I(`star`, 60010),
    starAdd: I(`star-add`, 60010),
    starDelete: I(`star-delete`, 60010),
    starEmpty: I(`star-empty`, 60010),
    comment: I(`comment`, 60011),
    commentAdd: I(`comment-add`, 60011),
    alert: I(`alert`, 60012),
    warning: I(`warning`, 60012),
    search: I(`search`, 60013),
    searchSave: I(`search-save`, 60013),
    logOut: I(`log-out`, 60014),
    signOut: I(`sign-out`, 60014),
    logIn: I(`log-in`, 60015),
    signIn: I(`sign-in`, 60015),
    eye: I(`eye`, 60016),
    eyeUnwatch: I(`eye-unwatch`, 60016),
    eyeWatch: I(`eye-watch`, 60016),
    circleFilled: I(`circle-filled`, 60017),
    primitiveDot: I(`primitive-dot`, 60017),
    closeDirty: I(`close-dirty`, 60017),
    debugBreakpoint: I(`debug-breakpoint`, 60017),
    debugBreakpointDisabled: I(`debug-breakpoint-disabled`, 60017),
    debugHint: I(`debug-hint`, 60017),
    terminalDecorationSuccess: I(`terminal-decoration-success`, 60017),
    primitiveSquare: I(`primitive-square`, 60018),
    edit: I(`edit`, 60019),
    pencil: I(`pencil`, 60019),
    info: I(`info`, 60020),
    issueOpened: I(`issue-opened`, 60020),
    gistPrivate: I(`gist-private`, 60021),
    gitForkPrivate: I(`git-fork-private`, 60021),
    lock: I(`lock`, 60021),
    mirrorPrivate: I(`mirror-private`, 60021),
    close: I(`close`, 60022),
    removeClose: I(`remove-close`, 60022),
    x: I(`x`, 60022),
    repoSync: I(`repo-sync`, 60023),
    sync: I(`sync`, 60023),
    clone: I(`clone`, 60024),
    desktopDownload: I(`desktop-download`, 60024),
    beaker: I(`beaker`, 60025),
    microscope: I(`microscope`, 60025),
    vm: I(`vm`, 60026),
    deviceDesktop: I(`device-desktop`, 60026),
    file: I(`file`, 60027),
    fileText: I(`file-text`, 60027),
    more: I(`more`, 60028),
    ellipsis: I(`ellipsis`, 60028),
    kebabHorizontal: I(`kebab-horizontal`, 60028),
    mailReply: I(`mail-reply`, 60029),
    reply: I(`reply`, 60029),
    organization: I(`organization`, 60030),
    organizationFilled: I(`organization-filled`, 60030),
    organizationOutline: I(`organization-outline`, 60030),
    newFile: I(`new-file`, 60031),
    fileAdd: I(`file-add`, 60031),
    newFolder: I(`new-folder`, 60032),
    fileDirectoryCreate: I(`file-directory-create`, 60032),
    trash: I(`trash`, 60033),
    trashcan: I(`trashcan`, 60033),
    history: I(`history`, 60034),
    clock: I(`clock`, 60034),
    folder: I(`folder`, 60035),
    fileDirectory: I(`file-directory`, 60035),
    symbolFolder: I(`symbol-folder`, 60035),
    logoGithub: I(`logo-github`, 60036),
    markGithub: I(`mark-github`, 60036),
    github: I(`github`, 60036),
    terminal: I(`terminal`, 60037),
    console: I(`console`, 60037),
    repl: I(`repl`, 60037),
    zap: I(`zap`, 60038),
    symbolEvent: I(`symbol-event`, 60038),
    error: I(`error`, 60039),
    stop: I(`stop`, 60039),
    variable: I(`variable`, 60040),
    symbolVariable: I(`symbol-variable`, 60040),
    array: I(`array`, 60042),
    symbolArray: I(`symbol-array`, 60042),
    symbolModule: I(`symbol-module`, 60043),
    symbolPackage: I(`symbol-package`, 60043),
    symbolNamespace: I(`symbol-namespace`, 60043),
    symbolObject: I(`symbol-object`, 60043),
    symbolMethod: I(`symbol-method`, 60044),
    symbolFunction: I(`symbol-function`, 60044),
    symbolConstructor: I(`symbol-constructor`, 60044),
    symbolBoolean: I(`symbol-boolean`, 60047),
    symbolNull: I(`symbol-null`, 60047),
    symbolNumeric: I(`symbol-numeric`, 60048),
    symbolNumber: I(`symbol-number`, 60048),
    symbolStructure: I(`symbol-structure`, 60049),
    symbolStruct: I(`symbol-struct`, 60049),
    symbolParameter: I(`symbol-parameter`, 60050),
    symbolTypeParameter: I(`symbol-type-parameter`, 60050),
    symbolKey: I(`symbol-key`, 60051),
    symbolText: I(`symbol-text`, 60051),
    symbolReference: I(`symbol-reference`, 60052),
    goToFile: I(`go-to-file`, 60052),
    symbolEnum: I(`symbol-enum`, 60053),
    symbolValue: I(`symbol-value`, 60053),
    symbolRuler: I(`symbol-ruler`, 60054),
    symbolUnit: I(`symbol-unit`, 60054),
    activateBreakpoints: I(`activate-breakpoints`, 60055),
    archive: I(`archive`, 60056),
    arrowBoth: I(`arrow-both`, 60057),
    arrowDown: I(`arrow-down`, 60058),
    arrowLeft: I(`arrow-left`, 60059),
    arrowRight: I(`arrow-right`, 60060),
    arrowSmallDown: I(`arrow-small-down`, 60061),
    arrowSmallLeft: I(`arrow-small-left`, 60062),
    arrowSmallRight: I(`arrow-small-right`, 60063),
    arrowSmallUp: I(`arrow-small-up`, 60064),
    arrowUp: I(`arrow-up`, 60065),
    bell: I(`bell`, 60066),
    bold: I(`bold`, 60067),
    book: I(`book`, 60068),
    bookmark: I(`bookmark`, 60069),
    debugBreakpointConditionalUnverified: I(`debug-breakpoint-conditional-unverified`, 60070),
    debugBreakpointConditional: I(`debug-breakpoint-conditional`, 60071),
    debugBreakpointConditionalDisabled: I(`debug-breakpoint-conditional-disabled`, 60071),
    debugBreakpointDataUnverified: I(`debug-breakpoint-data-unverified`, 60072),
    debugBreakpointData: I(`debug-breakpoint-data`, 60073),
    debugBreakpointDataDisabled: I(`debug-breakpoint-data-disabled`, 60073),
    debugBreakpointLogUnverified: I(`debug-breakpoint-log-unverified`, 60074),
    debugBreakpointLog: I(`debug-breakpoint-log`, 60075),
    debugBreakpointLogDisabled: I(`debug-breakpoint-log-disabled`, 60075),
    briefcase: I(`briefcase`, 60076),
    broadcast: I(`broadcast`, 60077),
    browser: I(`browser`, 60078),
    bug: I(`bug`, 60079),
    calendar: I(`calendar`, 60080),
    caseSensitive: I(`case-sensitive`, 60081),
    check: I(`check`, 60082),
    checklist: I(`checklist`, 60083),
    chevronDown: I(`chevron-down`, 60084),
    chevronLeft: I(`chevron-left`, 60085),
    chevronRight: I(`chevron-right`, 60086),
    chevronUp: I(`chevron-up`, 60087),
    chromeClose: I(`chrome-close`, 60088),
    chromeMaximize: I(`chrome-maximize`, 60089),
    chromeMinimize: I(`chrome-minimize`, 60090),
    chromeRestore: I(`chrome-restore`, 60091),
    circleOutline: I(`circle-outline`, 60092),
    circle: I(`circle`, 60092),
    debugBreakpointUnverified: I(`debug-breakpoint-unverified`, 60092),
    terminalDecorationIncomplete: I(`terminal-decoration-incomplete`, 60092),
    circleSlash: I(`circle-slash`, 60093),
    circuitBoard: I(`circuit-board`, 60094),
    clearAll: I(`clear-all`, 60095),
    clippy: I(`clippy`, 60096),
    closeAll: I(`close-all`, 60097),
    cloudDownload: I(`cloud-download`, 60098),
    cloudUpload: I(`cloud-upload`, 60099),
    code: I(`code`, 60100),
    collapseAll: I(`collapse-all`, 60101),
    colorMode: I(`color-mode`, 60102),
    commentDiscussion: I(`comment-discussion`, 60103),
    creditCard: I(`credit-card`, 60105),
    dash: I(`dash`, 60108),
    dashboard: I(`dashboard`, 60109),
    database: I(`database`, 60110),
    debugContinue: I(`debug-continue`, 60111),
    debugDisconnect: I(`debug-disconnect`, 60112),
    debugPause: I(`debug-pause`, 60113),
    debugRestart: I(`debug-restart`, 60114),
    debugStart: I(`debug-start`, 60115),
    debugStepInto: I(`debug-step-into`, 60116),
    debugStepOut: I(`debug-step-out`, 60117),
    debugStepOver: I(`debug-step-over`, 60118),
    debugStop: I(`debug-stop`, 60119),
    debug: I(`debug`, 60120),
    deviceCameraVideo: I(`device-camera-video`, 60121),
    deviceCamera: I(`device-camera`, 60122),
    deviceMobile: I(`device-mobile`, 60123),
    diffAdded: I(`diff-added`, 60124),
    diffIgnored: I(`diff-ignored`, 60125),
    diffModified: I(`diff-modified`, 60126),
    diffRemoved: I(`diff-removed`, 60127),
    diffRenamed: I(`diff-renamed`, 60128),
    diff: I(`diff`, 60129),
    diffSidebyside: I(`diff-sidebyside`, 60129),
    discard: I(`discard`, 60130),
    editorLayout: I(`editor-layout`, 60131),
    emptyWindow: I(`empty-window`, 60132),
    exclude: I(`exclude`, 60133),
    extensions: I(`extensions`, 60134),
    eyeClosed: I(`eye-closed`, 60135),
    fileBinary: I(`file-binary`, 60136),
    fileCode: I(`file-code`, 60137),
    fileMedia: I(`file-media`, 60138),
    filePdf: I(`file-pdf`, 60139),
    fileSubmodule: I(`file-submodule`, 60140),
    fileSymlinkDirectory: I(`file-symlink-directory`, 60141),
    fileSymlinkFile: I(`file-symlink-file`, 60142),
    fileZip: I(`file-zip`, 60143),
    files: I(`files`, 60144),
    filter: I(`filter`, 60145),
    flame: I(`flame`, 60146),
    foldDown: I(`fold-down`, 60147),
    foldUp: I(`fold-up`, 60148),
    fold: I(`fold`, 60149),
    folderActive: I(`folder-active`, 60150),
    folderOpened: I(`folder-opened`, 60151),
    gear: I(`gear`, 60152),
    gift: I(`gift`, 60153),
    gistSecret: I(`gist-secret`, 60154),
    gist: I(`gist`, 60155),
    gitCommit: I(`git-commit`, 60156),
    gitCompare: I(`git-compare`, 60157),
    compareChanges: I(`compare-changes`, 60157),
    gitMerge: I(`git-merge`, 60158),
    githubAction: I(`github-action`, 60159),
    githubAlt: I(`github-alt`, 60160),
    globe: I(`globe`, 60161),
    grabber: I(`grabber`, 60162),
    graph: I(`graph`, 60163),
    gripper: I(`gripper`, 60164),
    heart: I(`heart`, 60165),
    home: I(`home`, 60166),
    horizontalRule: I(`horizontal-rule`, 60167),
    hubot: I(`hubot`, 60168),
    inbox: I(`inbox`, 60169),
    issueReopened: I(`issue-reopened`, 60171),
    issues: I(`issues`, 60172),
    italic: I(`italic`, 60173),
    jersey: I(`jersey`, 60174),
    json: I(`json`, 60175),
    kebabVertical: I(`kebab-vertical`, 60176),
    key: I(`key`, 60177),
    law: I(`law`, 60178),
    lightbulbAutofix: I(`lightbulb-autofix`, 60179),
    linkExternal: I(`link-external`, 60180),
    link: I(`link`, 60181),
    listOrdered: I(`list-ordered`, 60182),
    listUnordered: I(`list-unordered`, 60183),
    liveShare: I(`live-share`, 60184),
    loading: I(`loading`, 60185),
    location: I(`location`, 60186),
    mailRead: I(`mail-read`, 60187),
    mail: I(`mail`, 60188),
    markdown: I(`markdown`, 60189),
    megaphone: I(`megaphone`, 60190),
    mention: I(`mention`, 60191),
    milestone: I(`milestone`, 60192),
    gitPullRequestMilestone: I(`git-pull-request-milestone`, 60192),
    mortarBoard: I(`mortar-board`, 60193),
    move: I(`move`, 60194),
    multipleWindows: I(`multiple-windows`, 60195),
    mute: I(`mute`, 60196),
    noNewline: I(`no-newline`, 60197),
    note: I(`note`, 60198),
    octoface: I(`octoface`, 60199),
    openPreview: I(`open-preview`, 60200),
    package: I(`package`, 60201),
    paintcan: I(`paintcan`, 60202),
    pin: I(`pin`, 60203),
    play: I(`play`, 60204),
    run: I(`run`, 60204),
    plug: I(`plug`, 60205),
    preserveCase: I(`preserve-case`, 60206),
    preview: I(`preview`, 60207),
    project: I(`project`, 60208),
    pulse: I(`pulse`, 60209),
    question: I(`question`, 60210),
    quote: I(`quote`, 60211),
    radioTower: I(`radio-tower`, 60212),
    reactions: I(`reactions`, 60213),
    references: I(`references`, 60214),
    refresh: I(`refresh`, 60215),
    regex: I(`regex`, 60216),
    remoteExplorer: I(`remote-explorer`, 60217),
    remote: I(`remote`, 60218),
    remove: I(`remove`, 60219),
    replaceAll: I(`replace-all`, 60220),
    replace: I(`replace`, 60221),
    repoClone: I(`repo-clone`, 60222),
    repoForcePush: I(`repo-force-push`, 60223),
    repoPull: I(`repo-pull`, 60224),
    repoPush: I(`repo-push`, 60225),
    report: I(`report`, 60226),
    requestChanges: I(`request-changes`, 60227),
    rocket: I(`rocket`, 60228),
    rootFolderOpened: I(`root-folder-opened`, 60229),
    rootFolder: I(`root-folder`, 60230),
    rss: I(`rss`, 60231),
    ruby: I(`ruby`, 60232),
    saveAll: I(`save-all`, 60233),
    saveAs: I(`save-as`, 60234),
    save: I(`save`, 60235),
    screenFull: I(`screen-full`, 60236),
    screenNormal: I(`screen-normal`, 60237),
    searchStop: I(`search-stop`, 60238),
    server: I(`server`, 60240),
    settingsGear: I(`settings-gear`, 60241),
    settings: I(`settings`, 60242),
    shield: I(`shield`, 60243),
    smiley: I(`smiley`, 60244),
    sortPrecedence: I(`sort-precedence`, 60245),
    splitHorizontal: I(`split-horizontal`, 60246),
    splitVertical: I(`split-vertical`, 60247),
    squirrel: I(`squirrel`, 60248),
    starFull: I(`star-full`, 60249),
    starHalf: I(`star-half`, 60250),
    symbolClass: I(`symbol-class`, 60251),
    symbolColor: I(`symbol-color`, 60252),
    symbolConstant: I(`symbol-constant`, 60253),
    symbolEnumMember: I(`symbol-enum-member`, 60254),
    symbolField: I(`symbol-field`, 60255),
    symbolFile: I(`symbol-file`, 60256),
    symbolInterface: I(`symbol-interface`, 60257),
    symbolKeyword: I(`symbol-keyword`, 60258),
    symbolMisc: I(`symbol-misc`, 60259),
    symbolOperator: I(`symbol-operator`, 60260),
    symbolProperty: I(`symbol-property`, 60261),
    wrench: I(`wrench`, 60261),
    wrenchSubaction: I(`wrench-subaction`, 60261),
    symbolSnippet: I(`symbol-snippet`, 60262),
    tasklist: I(`tasklist`, 60263),
    telescope: I(`telescope`, 60264),
    textSize: I(`text-size`, 60265),
    threeBars: I(`three-bars`, 60266),
    thumbsdown: I(`thumbsdown`, 60267),
    thumbsup: I(`thumbsup`, 60268),
    tools: I(`tools`, 60269),
    triangleDown: I(`triangle-down`, 60270),
    triangleLeft: I(`triangle-left`, 60271),
    triangleRight: I(`triangle-right`, 60272),
    triangleUp: I(`triangle-up`, 60273),
    twitter: I(`twitter`, 60274),
    unfold: I(`unfold`, 60275),
    unlock: I(`unlock`, 60276),
    unmute: I(`unmute`, 60277),
    unverified: I(`unverified`, 60278),
    verified: I(`verified`, 60279),
    versions: I(`versions`, 60280),
    vmActive: I(`vm-active`, 60281),
    vmOutline: I(`vm-outline`, 60282),
    vmRunning: I(`vm-running`, 60283),
    watch: I(`watch`, 60284),
    whitespace: I(`whitespace`, 60285),
    wholeWord: I(`whole-word`, 60286),
    window: I(`window`, 60287),
    wordWrap: I(`word-wrap`, 60288),
    zoomIn: I(`zoom-in`, 60289),
    zoomOut: I(`zoom-out`, 60290),
    listFilter: I(`list-filter`, 60291),
    listFlat: I(`list-flat`, 60292),
    listSelection: I(`list-selection`, 60293),
    selection: I(`selection`, 60293),
    listTree: I(`list-tree`, 60294),
    debugBreakpointFunctionUnverified: I(`debug-breakpoint-function-unverified`, 60295),
    debugBreakpointFunction: I(`debug-breakpoint-function`, 60296),
    debugBreakpointFunctionDisabled: I(`debug-breakpoint-function-disabled`, 60296),
    debugStackframeActive: I(`debug-stackframe-active`, 60297),
    circleSmallFilled: I(`circle-small-filled`, 60298),
    debugStackframeDot: I(`debug-stackframe-dot`, 60298),
    terminalDecorationMark: I(`terminal-decoration-mark`, 60298),
    debugStackframe: I(`debug-stackframe`, 60299),
    debugStackframeFocused: I(`debug-stackframe-focused`, 60299),
    debugBreakpointUnsupported: I(`debug-breakpoint-unsupported`, 60300),
    symbolString: I(`symbol-string`, 60301),
    debugReverseContinue: I(`debug-reverse-continue`, 60302),
    debugStepBack: I(`debug-step-back`, 60303),
    debugRestartFrame: I(`debug-restart-frame`, 60304),
    debugAlt: I(`debug-alt`, 60305),
    callIncoming: I(`call-incoming`, 60306),
    callOutgoing: I(`call-outgoing`, 60307),
    menu: I(`menu`, 60308),
    expandAll: I(`expand-all`, 60309),
    feedback: I(`feedback`, 60310),
    gitPullRequestReviewer: I(`git-pull-request-reviewer`, 60310),
    groupByRefType: I(`group-by-ref-type`, 60311),
    ungroupByRefType: I(`ungroup-by-ref-type`, 60312),
    account: I(`account`, 60313),
    gitPullRequestAssignee: I(`git-pull-request-assignee`, 60313),
    bellDot: I(`bell-dot`, 60314),
    debugConsole: I(`debug-console`, 60315),
    library: I(`library`, 60316),
    output: I(`output`, 60317),
    runAll: I(`run-all`, 60318),
    syncIgnored: I(`sync-ignored`, 60319),
    pinned: I(`pinned`, 60320),
    githubInverted: I(`github-inverted`, 60321),
    serverProcess: I(`server-process`, 60322),
    serverEnvironment: I(`server-environment`, 60323),
    pass: I(`pass`, 60324),
    issueClosed: I(`issue-closed`, 60324),
    stopCircle: I(`stop-circle`, 60325),
    playCircle: I(`play-circle`, 60326),
    record: I(`record`, 60327),
    debugAltSmall: I(`debug-alt-small`, 60328),
    vmConnect: I(`vm-connect`, 60329),
    cloud: I(`cloud`, 60330),
    merge: I(`merge`, 60331),
    export: I(`export`, 60332),
    graphLeft: I(`graph-left`, 60333),
    magnet: I(`magnet`, 60334),
    notebook: I(`notebook`, 60335),
    redo: I(`redo`, 60336),
    checkAll: I(`check-all`, 60337),
    pinnedDirty: I(`pinned-dirty`, 60338),
    passFilled: I(`pass-filled`, 60339),
    circleLargeFilled: I(`circle-large-filled`, 60340),
    circleLarge: I(`circle-large`, 60341),
    circleLargeOutline: I(`circle-large-outline`, 60341),
    combine: I(`combine`, 60342),
    gather: I(`gather`, 60342),
    table: I(`table`, 60343),
    variableGroup: I(`variable-group`, 60344),
    typeHierarchy: I(`type-hierarchy`, 60345),
    typeHierarchySub: I(`type-hierarchy-sub`, 60346),
    typeHierarchySuper: I(`type-hierarchy-super`, 60347),
    gitPullRequestCreate: I(`git-pull-request-create`, 60348),
    runAbove: I(`run-above`, 60349),
    runBelow: I(`run-below`, 60350),
    notebookTemplate: I(`notebook-template`, 60351),
    debugRerun: I(`debug-rerun`, 60352),
    workspaceTrusted: I(`workspace-trusted`, 60353),
    workspaceUntrusted: I(`workspace-untrusted`, 60354),
    workspaceUnknown: I(`workspace-unknown`, 60355),
    terminalCmd: I(`terminal-cmd`, 60356),
    terminalDebian: I(`terminal-debian`, 60357),
    terminalLinux: I(`terminal-linux`, 60358),
    terminalPowershell: I(`terminal-powershell`, 60359),
    terminalTmux: I(`terminal-tmux`, 60360),
    terminalUbuntu: I(`terminal-ubuntu`, 60361),
    terminalBash: I(`terminal-bash`, 60362),
    arrowSwap: I(`arrow-swap`, 60363),
    copy: I(`copy`, 60364),
    personAdd: I(`person-add`, 60365),
    filterFilled: I(`filter-filled`, 60366),
    wand: I(`wand`, 60367),
    debugLineByLine: I(`debug-line-by-line`, 60368),
    inspect: I(`inspect`, 60369),
    layers: I(`layers`, 60370),
    layersDot: I(`layers-dot`, 60371),
    layersActive: I(`layers-active`, 60372),
    compass: I(`compass`, 60373),
    compassDot: I(`compass-dot`, 60374),
    compassActive: I(`compass-active`, 60375),
    azure: I(`azure`, 60376),
    issueDraft: I(`issue-draft`, 60377),
    gitPullRequestClosed: I(`git-pull-request-closed`, 60378),
    gitPullRequestDraft: I(`git-pull-request-draft`, 60379),
    debugAll: I(`debug-all`, 60380),
    debugCoverage: I(`debug-coverage`, 60381),
    runErrors: I(`run-errors`, 60382),
    folderLibrary: I(`folder-library`, 60383),
    debugContinueSmall: I(`debug-continue-small`, 60384),
    beakerStop: I(`beaker-stop`, 60385),
    graphLine: I(`graph-line`, 60386),
    graphScatter: I(`graph-scatter`, 60387),
    pieChart: I(`pie-chart`, 60388),
    bracket: I(`bracket`, 60175),
    bracketDot: I(`bracket-dot`, 60389),
    bracketError: I(`bracket-error`, 60390),
    lockSmall: I(`lock-small`, 60391),
    azureDevops: I(`azure-devops`, 60392),
    verifiedFilled: I(`verified-filled`, 60393),
    newline: I(`newline`, 60394),
    layout: I(`layout`, 60395),
    layoutActivitybarLeft: I(`layout-activitybar-left`, 60396),
    layoutActivitybarRight: I(`layout-activitybar-right`, 60397),
    layoutPanelLeft: I(`layout-panel-left`, 60398),
    layoutPanelCenter: I(`layout-panel-center`, 60399),
    layoutPanelJustify: I(`layout-panel-justify`, 60400),
    layoutPanelRight: I(`layout-panel-right`, 60401),
    layoutPanel: I(`layout-panel`, 60402),
    layoutSidebarLeft: I(`layout-sidebar-left`, 60403),
    layoutSidebarRight: I(`layout-sidebar-right`, 60404),
    layoutStatusbar: I(`layout-statusbar`, 60405),
    layoutMenubar: I(`layout-menubar`, 60406),
    layoutCentered: I(`layout-centered`, 60407),
    target: I(`target`, 60408),
    indent: I(`indent`, 60409),
    recordSmall: I(`record-small`, 60410),
    errorSmall: I(`error-small`, 60411),
    terminalDecorationError: I(`terminal-decoration-error`, 60411),
    arrowCircleDown: I(`arrow-circle-down`, 60412),
    arrowCircleLeft: I(`arrow-circle-left`, 60413),
    arrowCircleRight: I(`arrow-circle-right`, 60414),
    arrowCircleUp: I(`arrow-circle-up`, 60415),
    layoutSidebarRightOff: I(`layout-sidebar-right-off`, 60416),
    layoutPanelOff: I(`layout-panel-off`, 60417),
    layoutSidebarLeftOff: I(`layout-sidebar-left-off`, 60418),
    blank: I(`blank`, 60419),
    heartFilled: I(`heart-filled`, 60420),
    map: I(`map`, 60421),
    mapHorizontal: I(`map-horizontal`, 60421),
    foldHorizontal: I(`fold-horizontal`, 60421),
    mapFilled: I(`map-filled`, 60422),
    mapHorizontalFilled: I(`map-horizontal-filled`, 60422),
    foldHorizontalFilled: I(`fold-horizontal-filled`, 60422),
    circleSmall: I(`circle-small`, 60423),
    bellSlash: I(`bell-slash`, 60424),
    bellSlashDot: I(`bell-slash-dot`, 60425),
    commentUnresolved: I(`comment-unresolved`, 60426),
    gitPullRequestGoToChanges: I(`git-pull-request-go-to-changes`, 60427),
    gitPullRequestNewChanges: I(`git-pull-request-new-changes`, 60428),
    searchFuzzy: I(`search-fuzzy`, 60429),
    commentDraft: I(`comment-draft`, 60430),
    send: I(`send`, 60431),
    sparkle: I(`sparkle`, 60432),
    insert: I(`insert`, 60433),
    mic: I(`mic`, 60434),
    thumbsdownFilled: I(`thumbsdown-filled`, 60435),
    thumbsupFilled: I(`thumbsup-filled`, 60436),
    coffee: I(`coffee`, 60437),
    snake: I(`snake`, 60438),
    game: I(`game`, 60439),
    vr: I(`vr`, 60440),
    chip: I(`chip`, 60441),
    piano: I(`piano`, 60442),
    music: I(`music`, 60443),
    micFilled: I(`mic-filled`, 60444),
    repoFetch: I(`repo-fetch`, 60445),
    copilot: I(`copilot`, 60446),
    lightbulbSparkle: I(`lightbulb-sparkle`, 60447),
    robot: I(`robot`, 60448),
    sparkleFilled: I(`sparkle-filled`, 60449),
    diffSingle: I(`diff-single`, 60450),
    diffMultiple: I(`diff-multiple`, 60451),
    surroundWith: I(`surround-with`, 60452),
    share: I(`share`, 60453),
    gitStash: I(`git-stash`, 60454),
    gitStashApply: I(`git-stash-apply`, 60455),
    gitStashPop: I(`git-stash-pop`, 60456),
    vscode: I(`vscode`, 60457),
    vscodeInsiders: I(`vscode-insiders`, 60458),
    codeOss: I(`code-oss`, 60459),
    runCoverage: I(`run-coverage`, 60460),
    runAllCoverage: I(`run-all-coverage`, 60461),
    coverage: I(`coverage`, 60462),
    githubProject: I(`github-project`, 60463),
    mapVertical: I(`map-vertical`, 60464),
    foldVertical: I(`fold-vertical`, 60464),
    mapVerticalFilled: I(`map-vertical-filled`, 60465),
    foldVerticalFilled: I(`fold-vertical-filled`, 60465),
    goToSearch: I(`go-to-search`, 60466),
    percentage: I(`percentage`, 60467),
    sortPercentage: I(`sort-percentage`, 60467),
    attach: I(`attach`, 60468)
  };
  Ia = {
    dialogError: I(`dialog-error`, `error`),
    dialogWarning: I(`dialog-warning`, `warning`),
    dialogInfo: I(`dialog-info`, `info`),
    dialogClose: I(`dialog-close`, `close`),
    treeItemExpanded: I(`tree-item-expanded`, `chevron-down`),
    treeFilterOnTypeOn: I(`tree-filter-on-type-on`, `list-filter`),
    treeFilterOnTypeOff: I(`tree-filter-on-type-off`, `list-selection`),
    treeFilterClear: I(`tree-filter-clear`, `close`),
    treeItemLoading: I(`tree-item-loading`, `loading`),
    menuSelection: I(`menu-selection`, `check`),
    menuSubmenu: I(`menu-submenu`, `chevron-right`),
    menuBarMore: I(`menubar-more`, `more`),
    scrollbarButtonLeft: I(`scrollbar-button-left`, `triangle-left`),
    scrollbarButtonRight: I(`scrollbar-button-right`, `triangle-right`),
    scrollbarButtonUp: I(`scrollbar-button-up`, `triangle-up`),
    scrollbarButtonDown: I(`scrollbar-button-down`, `triangle-down`),
    toolBarMore: I(`toolbar-more`, `more`),
    quickInputBack: I(`quick-input-back`, `arrow-left`),
    dropDownButton: I(`drop-down-button`, 60084),
    symbolCustomColor: I(`symbol-customcolor`, 60252),
    exportIcon: I(`export`, 60332),
    workspaceUnspecified: I(`workspace-unspecified`, 60355),
    newLine: I(`newline`, 60394),
    thumbsDownFilled: I(`thumbsdown-filled`, 60435),
    thumbsUpFilled: I(`thumbsup-filled`, 60436),
    gitFetch: I(`git-fetch`, 60445),
    lightbulbSparkleAutofix: I(`lightbulb-sparkle-autofix`, 60447),
    debugBreakpointPending: I(`debug-breakpoint-pending`, 60377)
  };
  L = {
    ...Fa,
    ...Ia
  };
  let La, Ra, za, Ba, Va;
  La = class {
    constructor() {
      this._tokenizationSupports = /* @__PURE__ */ new Map(), this._factories = /* @__PURE__ */ new Map(), this._onDidChange = new N(), this.onDidChange = this._onDidChange.event, this._colorMap = null;
    }
    handleChange(e10) {
      this._onDidChange.fire({
        changedLanguages: e10,
        changedColorMap: false
      });
    }
    register(e10, t10) {
      return this._tokenizationSupports.set(e10, t10), this.handleChange([
        e10
      ]), k(() => {
        this._tokenizationSupports.get(e10) === t10 && (this._tokenizationSupports.delete(e10), this.handleChange([
          e10
        ]));
      });
    }
    get(e10) {
      return this._tokenizationSupports.get(e10) || null;
    }
    registerFactory(e10, t10) {
      var _a3;
      (_a3 = this._factories.get(e10)) == null ? void 0 : _a3.dispose();
      let n10 = new Ra(this, e10, t10);
      return this._factories.set(e10, n10), k(() => {
        let t11 = this._factories.get(e10);
        !t11 || t11 !== n10 || (this._factories.delete(e10), t11.dispose());
      });
    }
    async getOrCreate(e10) {
      let t10 = this.get(e10);
      if (t10) return t10;
      let n10 = this._factories.get(e10);
      return !n10 || n10.isResolved ? null : (await n10.resolve(), this.get(e10));
    }
    isResolved(e10) {
      let t10 = this.get(e10);
      if (t10) return true;
      let n10 = this._factories.get(e10);
      return !!(!n10 || n10.isResolved);
    }
    setColorMap(e10) {
      this._colorMap = e10, this._onDidChange.fire({
        changedLanguages: Array.from(this._tokenizationSupports.keys()),
        changedColorMap: true
      });
    }
    getColorMap() {
      return this._colorMap;
    }
    getDefaultBackground() {
      return this._colorMap && this._colorMap.length > 2 ? this._colorMap[2] : null;
    }
  };
  Ra = class extends j {
    get isResolved() {
      return this._isResolved;
    }
    constructor(e10, t10, n10) {
      super(), this._registry = e10, this._languageId = t10, this._factory = n10, this._isDisposed = false, this._resolvePromise = null, this._isResolved = false;
    }
    dispose() {
      this._isDisposed = true, super.dispose();
    }
    async resolve() {
      return this._resolvePromise || (this._resolvePromise = this._create()), this._resolvePromise;
    }
    async _create() {
      let e10 = await this._factory.tokenizationSupport;
      this._isResolved = true, e10 && !this._isDisposed && this._register(this._registry.register(this._languageId, e10));
    }
  };
  za = class {
    constructor(e10, t10, n10) {
      this.offset = e10, this.type = t10, this.language = n10, this._tokenBrand = void 0;
    }
    toString() {
      return `(` + this.offset + `, ` + this.type + `)`;
    }
  };
  Ba = class {
    constructor(e10, t10) {
      this.tokens = e10, this.endState = t10, this._tokenizationResultBrand = void 0;
    }
  };
  Va = class {
    constructor(e10, t10) {
      this.tokens = e10, this.endState = t10, this._encodedTokenizationResultBrand = void 0;
    }
  };
  (function(e10) {
    e10[e10.Increase = 0] = `Increase`, e10[e10.Decrease = 1] = `Decrease`;
  })(Ha || (Ha = {}));
  (function(e10) {
    let t10 = /* @__PURE__ */ new Map();
    t10.set(0, L.symbolMethod), t10.set(1, L.symbolFunction), t10.set(2, L.symbolConstructor), t10.set(3, L.symbolField), t10.set(4, L.symbolVariable), t10.set(5, L.symbolClass), t10.set(6, L.symbolStruct), t10.set(7, L.symbolInterface), t10.set(8, L.symbolModule), t10.set(9, L.symbolProperty), t10.set(10, L.symbolEvent), t10.set(11, L.symbolOperator), t10.set(12, L.symbolUnit), t10.set(13, L.symbolValue), t10.set(15, L.symbolEnum), t10.set(14, L.symbolConstant), t10.set(15, L.symbolEnum), t10.set(16, L.symbolEnumMember), t10.set(17, L.symbolKeyword), t10.set(27, L.symbolSnippet), t10.set(18, L.symbolText), t10.set(19, L.symbolColor), t10.set(20, L.symbolFile), t10.set(21, L.symbolReference), t10.set(22, L.symbolCustomColor), t10.set(23, L.symbolFolder), t10.set(24, L.symbolTypeParameter), t10.set(25, L.account), t10.set(26, L.issues);
    function n10(e11) {
      let n11 = t10.get(e11);
      return n11 || (console.info(`No codicon found for CompletionItemKind ` + e11), n11 = L.symbolProperty), n11;
    }
    e10.toIcon = n10;
    let r10 = /* @__PURE__ */ new Map();
    r10.set(`method`, 0), r10.set(`function`, 1), r10.set(`constructor`, 2), r10.set(`field`, 3), r10.set(`variable`, 4), r10.set(`class`, 5), r10.set(`struct`, 6), r10.set(`interface`, 7), r10.set(`module`, 8), r10.set(`property`, 9), r10.set(`event`, 10), r10.set(`operator`, 11), r10.set(`unit`, 12), r10.set(`value`, 13), r10.set(`constant`, 14), r10.set(`enum`, 15), r10.set(`enum-member`, 16), r10.set(`enumMember`, 16), r10.set(`keyword`, 17), r10.set(`snippet`, 27), r10.set(`text`, 18), r10.set(`color`, 19), r10.set(`file`, 20), r10.set(`reference`, 21), r10.set(`customcolor`, 22), r10.set(`folder`, 23), r10.set(`type-parameter`, 24), r10.set(`typeParameter`, 24), r10.set(`account`, 25), r10.set(`issue`, 26);
    function i10(e11, t11) {
      let n11 = r10.get(e11);
      return n11 === void 0 && !t11 && (n11 = 9), n11;
    }
    e10.fromString = i10;
  })(Ua || (Ua = {}));
  (function(e10) {
    e10[e10.Automatic = 0] = `Automatic`, e10[e10.Explicit = 1] = `Explicit`;
  })(Wa || (Wa = {}));
  Ga = class {
    constructor(e10, t10, n10, r10) {
      this.range = e10, this.text = t10, this.completionKind = n10, this.isSnippetText = r10;
    }
    equals(e10) {
      return F.lift(this.range).equalsRange(e10.range) && this.text === e10.text && this.completionKind === e10.completionKind && this.isSnippetText === e10.isSnippetText;
    }
  };
  (function(e10) {
    e10[e10.Automatic = 0] = `Automatic`, e10[e10.PasteAs = 1] = `PasteAs`;
  })(Ka || (Ka = {}));
  (function(e10) {
    e10[e10.Invoke = 1] = `Invoke`, e10[e10.TriggerCharacter = 2] = `TriggerCharacter`, e10[e10.ContentChange = 3] = `ContentChange`;
  })(qa || (qa = {}));
  (function(e10) {
    e10[e10.Text = 0] = `Text`, e10[e10.Read = 1] = `Read`, e10[e10.Write = 2] = `Write`;
  })(Ja || (Ja = {}));
  Ya = function(e10) {
    return e10 && xa.isUri(e10.uri) && F.isIRange(e10.range) && (F.isIRange(e10.originSelectionRange) || F.isIRange(e10.targetSelectionRange));
  };
  const Xa = {
    17: T(`Array`, `array`),
    16: T(`Boolean`, `boolean`),
    4: T(`Class`, `class`),
    13: T(`Constant`, `constant`),
    8: T(`Constructor`, `constructor`),
    9: T(`Enum`, `enumeration`),
    21: T(`EnumMember`, `enumeration member`),
    23: T(`Event`, `event`),
    7: T(`Field`, `field`),
    0: T(`File`, `file`),
    11: T(`Function`, `function`),
    10: T(`Interface`, `interface`),
    19: T(`Key`, `key`),
    5: T(`Method`, `method`),
    1: T(`Module`, `module`),
    2: T(`Namespace`, `namespace`),
    20: T(`Null`, `null`),
    15: T(`Number`, `number`),
    18: T(`Object`, `object`),
    24: T(`Operator`, `operator`),
    3: T(`Package`, `package`),
    6: T(`Property`, `property`),
    14: T(`String`, `string`),
    22: T(`Struct`, `struct`),
    25: T(`TypeParameter`, `type parameter`),
    12: T(`Variable`, `variable`)
  };
  Za = function(e10, t10) {
    return T(`symbolAriaLabel`, `{0} ({1})`, e10, Xa[t10]);
  };
  (function(e10) {
    let t10 = /* @__PURE__ */ new Map();
    t10.set(0, L.symbolFile), t10.set(1, L.symbolModule), t10.set(2, L.symbolNamespace), t10.set(3, L.symbolPackage), t10.set(4, L.symbolClass), t10.set(5, L.symbolMethod), t10.set(6, L.symbolProperty), t10.set(7, L.symbolField), t10.set(8, L.symbolConstructor), t10.set(9, L.symbolEnum), t10.set(10, L.symbolInterface), t10.set(11, L.symbolFunction), t10.set(12, L.symbolVariable), t10.set(13, L.symbolConstant), t10.set(14, L.symbolString), t10.set(15, L.symbolNumber), t10.set(16, L.symbolBoolean), t10.set(17, L.symbolArray), t10.set(18, L.symbolObject), t10.set(19, L.symbolKey), t10.set(20, L.symbolNull), t10.set(21, L.symbolEnumMember), t10.set(22, L.symbolStruct), t10.set(23, L.symbolEvent), t10.set(24, L.symbolOperator), t10.set(25, L.symbolTypeParameter);
    function n10(e11) {
      let n11 = t10.get(e11);
      return n11 || (console.info(`No codicon found for SymbolKind ` + e11), n11 = L.symbolProperty), n11;
    }
    e10.toIcon = n10;
  })(Qa || (Qa = {}));
  $a = (_p2 = class {
    static fromValue(t10) {
      switch (t10) {
        case `comment`:
          return _p2.Comment;
        case `imports`:
          return _p2.Imports;
        case `region`:
          return _p2.Region;
      }
      return new _p2(t10);
    }
    constructor(e10) {
      this.value = e10;
    }
  }, _p2.Comment = new _p2(`comment`), _p2.Imports = new _p2(`imports`), _p2.Region = new _p2(`region`), _p2);
  (function(e10) {
    e10[e10.AIGenerated = 1] = `AIGenerated`;
  })(eo || (eo = {}));
  (function(e10) {
    e10[e10.Invoke = 0] = `Invoke`, e10[e10.Automatic = 1] = `Automatic`;
  })(to || (to = {}));
  (function(e10) {
    function t10(e11) {
      return !e11 || typeof e11 != `object` ? false : typeof e11.id == `string` && typeof e11.title == `string`;
    }
    e10.is = t10;
  })(no || (no = {}));
  (function(e10) {
    e10[e10.Type = 1] = `Type`, e10[e10.Parameter = 2] = `Parameter`;
  })(ro || (ro = {}));
  var io = class {
    constructor(e10) {
      this.createSupport = e10, this._tokenizationSupport = null;
    }
    dispose() {
      this._tokenizationSupport && this._tokenizationSupport.then((e10) => {
        e10 && e10.dispose();
      });
    }
    get tokenizationSupport() {
      return this._tokenizationSupport || (this._tokenizationSupport = this.createSupport()), this._tokenizationSupport;
    }
  };
  let oo;
  ao = new La();
  oo = new La();
  (function(e10) {
    e10[e10.Invoke = 0] = `Invoke`, e10[e10.Automatic = 1] = `Automatic`;
  })(so || (so = {}));
  var co;
  (function(e10) {
    e10[e10.Unknown = 0] = `Unknown`, e10[e10.Disabled = 1] = `Disabled`, e10[e10.Enabled = 2] = `Enabled`;
  })(co || (co = {}));
  var lo;
  (function(e10) {
    e10[e10.Invoke = 1] = `Invoke`, e10[e10.Auto = 2] = `Auto`;
  })(lo || (lo = {}));
  var uo;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.KeepWhitespace = 1] = `KeepWhitespace`, e10[e10.InsertAsSnippet = 4] = `InsertAsSnippet`;
  })(uo || (uo = {}));
  var fo;
  (function(e10) {
    e10[e10.Method = 0] = `Method`, e10[e10.Function = 1] = `Function`, e10[e10.Constructor = 2] = `Constructor`, e10[e10.Field = 3] = `Field`, e10[e10.Variable = 4] = `Variable`, e10[e10.Class = 5] = `Class`, e10[e10.Struct = 6] = `Struct`, e10[e10.Interface = 7] = `Interface`, e10[e10.Module = 8] = `Module`, e10[e10.Property = 9] = `Property`, e10[e10.Event = 10] = `Event`, e10[e10.Operator = 11] = `Operator`, e10[e10.Unit = 12] = `Unit`, e10[e10.Value = 13] = `Value`, e10[e10.Constant = 14] = `Constant`, e10[e10.Enum = 15] = `Enum`, e10[e10.EnumMember = 16] = `EnumMember`, e10[e10.Keyword = 17] = `Keyword`, e10[e10.Text = 18] = `Text`, e10[e10.Color = 19] = `Color`, e10[e10.File = 20] = `File`, e10[e10.Reference = 21] = `Reference`, e10[e10.Customcolor = 22] = `Customcolor`, e10[e10.Folder = 23] = `Folder`, e10[e10.TypeParameter = 24] = `TypeParameter`, e10[e10.User = 25] = `User`, e10[e10.Issue = 26] = `Issue`, e10[e10.Snippet = 27] = `Snippet`;
  })(fo || (fo = {}));
  var po;
  (function(e10) {
    e10[e10.Deprecated = 1] = `Deprecated`;
  })(po || (po = {}));
  var mo;
  (function(e10) {
    e10[e10.Invoke = 0] = `Invoke`, e10[e10.TriggerCharacter = 1] = `TriggerCharacter`, e10[e10.TriggerForIncompleteCompletions = 2] = `TriggerForIncompleteCompletions`;
  })(mo || (mo = {}));
  var ho;
  (function(e10) {
    e10[e10.EXACT = 0] = `EXACT`, e10[e10.ABOVE = 1] = `ABOVE`, e10[e10.BELOW = 2] = `BELOW`;
  })(ho || (ho = {}));
  var go;
  (function(e10) {
    e10[e10.NotSet = 0] = `NotSet`, e10[e10.ContentFlush = 1] = `ContentFlush`, e10[e10.RecoverFromMarkers = 2] = `RecoverFromMarkers`, e10[e10.Explicit = 3] = `Explicit`, e10[e10.Paste = 4] = `Paste`, e10[e10.Undo = 5] = `Undo`, e10[e10.Redo = 6] = `Redo`;
  })(go || (go = {}));
  var _o;
  (function(e10) {
    e10[e10.LF = 1] = `LF`, e10[e10.CRLF = 2] = `CRLF`;
  })(_o || (_o = {}));
  var vo;
  (function(e10) {
    e10[e10.Text = 0] = `Text`, e10[e10.Read = 1] = `Read`, e10[e10.Write = 2] = `Write`;
  })(vo || (vo = {}));
  var yo;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Keep = 1] = `Keep`, e10[e10.Brackets = 2] = `Brackets`, e10[e10.Advanced = 3] = `Advanced`, e10[e10.Full = 4] = `Full`;
  })(yo || (yo = {}));
  var bo;
  (function(e10) {
    e10[e10.acceptSuggestionOnCommitCharacter = 0] = `acceptSuggestionOnCommitCharacter`, e10[e10.acceptSuggestionOnEnter = 1] = `acceptSuggestionOnEnter`, e10[e10.accessibilitySupport = 2] = `accessibilitySupport`, e10[e10.accessibilityPageSize = 3] = `accessibilityPageSize`, e10[e10.ariaLabel = 4] = `ariaLabel`, e10[e10.ariaRequired = 5] = `ariaRequired`, e10[e10.autoClosingBrackets = 6] = `autoClosingBrackets`, e10[e10.autoClosingComments = 7] = `autoClosingComments`, e10[e10.screenReaderAnnounceInlineSuggestion = 8] = `screenReaderAnnounceInlineSuggestion`, e10[e10.autoClosingDelete = 9] = `autoClosingDelete`, e10[e10.autoClosingOvertype = 10] = `autoClosingOvertype`, e10[e10.autoClosingQuotes = 11] = `autoClosingQuotes`, e10[e10.autoIndent = 12] = `autoIndent`, e10[e10.automaticLayout = 13] = `automaticLayout`, e10[e10.autoSurround = 14] = `autoSurround`, e10[e10.bracketPairColorization = 15] = `bracketPairColorization`, e10[e10.guides = 16] = `guides`, e10[e10.codeLens = 17] = `codeLens`, e10[e10.codeLensFontFamily = 18] = `codeLensFontFamily`, e10[e10.codeLensFontSize = 19] = `codeLensFontSize`, e10[e10.colorDecorators = 20] = `colorDecorators`, e10[e10.colorDecoratorsLimit = 21] = `colorDecoratorsLimit`, e10[e10.columnSelection = 22] = `columnSelection`, e10[e10.comments = 23] = `comments`, e10[e10.contextmenu = 24] = `contextmenu`, e10[e10.copyWithSyntaxHighlighting = 25] = `copyWithSyntaxHighlighting`, e10[e10.cursorBlinking = 26] = `cursorBlinking`, e10[e10.cursorSmoothCaretAnimation = 27] = `cursorSmoothCaretAnimation`, e10[e10.cursorStyle = 28] = `cursorStyle`, e10[e10.cursorSurroundingLines = 29] = `cursorSurroundingLines`, e10[e10.cursorSurroundingLinesStyle = 30] = `cursorSurroundingLinesStyle`, e10[e10.cursorWidth = 31] = `cursorWidth`, e10[e10.disableLayerHinting = 32] = `disableLayerHinting`, e10[e10.disableMonospaceOptimizations = 33] = `disableMonospaceOptimizations`, e10[e10.domReadOnly = 34] = `domReadOnly`, e10[e10.dragAndDrop = 35] = `dragAndDrop`, e10[e10.dropIntoEditor = 36] = `dropIntoEditor`, e10[e10.emptySelectionClipboard = 37] = `emptySelectionClipboard`, e10[e10.experimentalWhitespaceRendering = 38] = `experimentalWhitespaceRendering`, e10[e10.extraEditorClassName = 39] = `extraEditorClassName`, e10[e10.fastScrollSensitivity = 40] = `fastScrollSensitivity`, e10[e10.find = 41] = `find`, e10[e10.fixedOverflowWidgets = 42] = `fixedOverflowWidgets`, e10[e10.folding = 43] = `folding`, e10[e10.foldingStrategy = 44] = `foldingStrategy`, e10[e10.foldingHighlight = 45] = `foldingHighlight`, e10[e10.foldingImportsByDefault = 46] = `foldingImportsByDefault`, e10[e10.foldingMaximumRegions = 47] = `foldingMaximumRegions`, e10[e10.unfoldOnClickAfterEndOfLine = 48] = `unfoldOnClickAfterEndOfLine`, e10[e10.fontFamily = 49] = `fontFamily`, e10[e10.fontInfo = 50] = `fontInfo`, e10[e10.fontLigatures = 51] = `fontLigatures`, e10[e10.fontSize = 52] = `fontSize`, e10[e10.fontWeight = 53] = `fontWeight`, e10[e10.fontVariations = 54] = `fontVariations`, e10[e10.formatOnPaste = 55] = `formatOnPaste`, e10[e10.formatOnType = 56] = `formatOnType`, e10[e10.glyphMargin = 57] = `glyphMargin`, e10[e10.gotoLocation = 58] = `gotoLocation`, e10[e10.hideCursorInOverviewRuler = 59] = `hideCursorInOverviewRuler`, e10[e10.hover = 60] = `hover`, e10[e10.inDiffEditor = 61] = `inDiffEditor`, e10[e10.inlineSuggest = 62] = `inlineSuggest`, e10[e10.inlineEdit = 63] = `inlineEdit`, e10[e10.letterSpacing = 64] = `letterSpacing`, e10[e10.lightbulb = 65] = `lightbulb`, e10[e10.lineDecorationsWidth = 66] = `lineDecorationsWidth`, e10[e10.lineHeight = 67] = `lineHeight`, e10[e10.lineNumbers = 68] = `lineNumbers`, e10[e10.lineNumbersMinChars = 69] = `lineNumbersMinChars`, e10[e10.linkedEditing = 70] = `linkedEditing`, e10[e10.links = 71] = `links`, e10[e10.matchBrackets = 72] = `matchBrackets`, e10[e10.minimap = 73] = `minimap`, e10[e10.mouseStyle = 74] = `mouseStyle`, e10[e10.mouseWheelScrollSensitivity = 75] = `mouseWheelScrollSensitivity`, e10[e10.mouseWheelZoom = 76] = `mouseWheelZoom`, e10[e10.multiCursorMergeOverlapping = 77] = `multiCursorMergeOverlapping`, e10[e10.multiCursorModifier = 78] = `multiCursorModifier`, e10[e10.multiCursorPaste = 79] = `multiCursorPaste`, e10[e10.multiCursorLimit = 80] = `multiCursorLimit`, e10[e10.occurrencesHighlight = 81] = `occurrencesHighlight`, e10[e10.overviewRulerBorder = 82] = `overviewRulerBorder`, e10[e10.overviewRulerLanes = 83] = `overviewRulerLanes`, e10[e10.padding = 84] = `padding`, e10[e10.pasteAs = 85] = `pasteAs`, e10[e10.parameterHints = 86] = `parameterHints`, e10[e10.peekWidgetDefaultFocus = 87] = `peekWidgetDefaultFocus`, e10[e10.placeholder = 88] = `placeholder`, e10[e10.definitionLinkOpensInPeek = 89] = `definitionLinkOpensInPeek`, e10[e10.quickSuggestions = 90] = `quickSuggestions`, e10[e10.quickSuggestionsDelay = 91] = `quickSuggestionsDelay`, e10[e10.readOnly = 92] = `readOnly`, e10[e10.readOnlyMessage = 93] = `readOnlyMessage`, e10[e10.renameOnType = 94] = `renameOnType`, e10[e10.renderControlCharacters = 95] = `renderControlCharacters`, e10[e10.renderFinalNewline = 96] = `renderFinalNewline`, e10[e10.renderLineHighlight = 97] = `renderLineHighlight`, e10[e10.renderLineHighlightOnlyWhenFocus = 98] = `renderLineHighlightOnlyWhenFocus`, e10[e10.renderValidationDecorations = 99] = `renderValidationDecorations`, e10[e10.renderWhitespace = 100] = `renderWhitespace`, e10[e10.revealHorizontalRightPadding = 101] = `revealHorizontalRightPadding`, e10[e10.roundedSelection = 102] = `roundedSelection`, e10[e10.rulers = 103] = `rulers`, e10[e10.scrollbar = 104] = `scrollbar`, e10[e10.scrollBeyondLastColumn = 105] = `scrollBeyondLastColumn`, e10[e10.scrollBeyondLastLine = 106] = `scrollBeyondLastLine`, e10[e10.scrollPredominantAxis = 107] = `scrollPredominantAxis`, e10[e10.selectionClipboard = 108] = `selectionClipboard`, e10[e10.selectionHighlight = 109] = `selectionHighlight`, e10[e10.selectOnLineNumbers = 110] = `selectOnLineNumbers`, e10[e10.showFoldingControls = 111] = `showFoldingControls`, e10[e10.showUnused = 112] = `showUnused`, e10[e10.snippetSuggestions = 113] = `snippetSuggestions`, e10[e10.smartSelect = 114] = `smartSelect`, e10[e10.smoothScrolling = 115] = `smoothScrolling`, e10[e10.stickyScroll = 116] = `stickyScroll`, e10[e10.stickyTabStops = 117] = `stickyTabStops`, e10[e10.stopRenderingLineAfter = 118] = `stopRenderingLineAfter`, e10[e10.suggest = 119] = `suggest`, e10[e10.suggestFontSize = 120] = `suggestFontSize`, e10[e10.suggestLineHeight = 121] = `suggestLineHeight`, e10[e10.suggestOnTriggerCharacters = 122] = `suggestOnTriggerCharacters`, e10[e10.suggestSelection = 123] = `suggestSelection`, e10[e10.tabCompletion = 124] = `tabCompletion`, e10[e10.tabIndex = 125] = `tabIndex`, e10[e10.unicodeHighlighting = 126] = `unicodeHighlighting`, e10[e10.unusualLineTerminators = 127] = `unusualLineTerminators`, e10[e10.useShadowDOM = 128] = `useShadowDOM`, e10[e10.useTabStops = 129] = `useTabStops`, e10[e10.wordBreak = 130] = `wordBreak`, e10[e10.wordSegmenterLocales = 131] = `wordSegmenterLocales`, e10[e10.wordSeparators = 132] = `wordSeparators`, e10[e10.wordWrap = 133] = `wordWrap`, e10[e10.wordWrapBreakAfterCharacters = 134] = `wordWrapBreakAfterCharacters`, e10[e10.wordWrapBreakBeforeCharacters = 135] = `wordWrapBreakBeforeCharacters`, e10[e10.wordWrapColumn = 136] = `wordWrapColumn`, e10[e10.wordWrapOverride1 = 137] = `wordWrapOverride1`, e10[e10.wordWrapOverride2 = 138] = `wordWrapOverride2`, e10[e10.wrappingIndent = 139] = `wrappingIndent`, e10[e10.wrappingStrategy = 140] = `wrappingStrategy`, e10[e10.showDeprecated = 141] = `showDeprecated`, e10[e10.inlayHints = 142] = `inlayHints`, e10[e10.editorClassName = 143] = `editorClassName`, e10[e10.pixelRatio = 144] = `pixelRatio`, e10[e10.tabFocusMode = 145] = `tabFocusMode`, e10[e10.layoutInfo = 146] = `layoutInfo`, e10[e10.wrappingInfo = 147] = `wrappingInfo`, e10[e10.defaultColorDecorators = 148] = `defaultColorDecorators`, e10[e10.colorDecoratorsActivatedOn = 149] = `colorDecoratorsActivatedOn`, e10[e10.inlineCompletionsAccessibilityVerbose = 150] = `inlineCompletionsAccessibilityVerbose`;
  })(bo || (bo = {}));
  var xo;
  (function(e10) {
    e10[e10.TextDefined = 0] = `TextDefined`, e10[e10.LF = 1] = `LF`, e10[e10.CRLF = 2] = `CRLF`;
  })(xo || (xo = {}));
  var So;
  (function(e10) {
    e10[e10.LF = 0] = `LF`, e10[e10.CRLF = 1] = `CRLF`;
  })(So || (So = {}));
  var Co;
  (function(e10) {
    e10[e10.Left = 1] = `Left`, e10[e10.Center = 2] = `Center`, e10[e10.Right = 3] = `Right`;
  })(Co || (Co = {}));
  var wo;
  (function(e10) {
    e10[e10.Increase = 0] = `Increase`, e10[e10.Decrease = 1] = `Decrease`;
  })(wo || (wo = {}));
  var To;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Indent = 1] = `Indent`, e10[e10.IndentOutdent = 2] = `IndentOutdent`, e10[e10.Outdent = 3] = `Outdent`;
  })(To || (To = {}));
  var Eo;
  (function(e10) {
    e10[e10.Both = 0] = `Both`, e10[e10.Right = 1] = `Right`, e10[e10.Left = 2] = `Left`, e10[e10.None = 3] = `None`;
  })(Eo || (Eo = {}));
  var Do;
  (function(e10) {
    e10[e10.Type = 1] = `Type`, e10[e10.Parameter = 2] = `Parameter`;
  })(Do || (Do = {}));
  var Oo;
  (function(e10) {
    e10[e10.Automatic = 0] = `Automatic`, e10[e10.Explicit = 1] = `Explicit`;
  })(Oo || (Oo = {}));
  var ko;
  (function(e10) {
    e10[e10.Invoke = 0] = `Invoke`, e10[e10.Automatic = 1] = `Automatic`;
  })(ko || (ko = {}));
  var Ao;
  (function(e10) {
    e10[e10.DependsOnKbLayout = -1] = `DependsOnKbLayout`, e10[e10.Unknown = 0] = `Unknown`, e10[e10.Backspace = 1] = `Backspace`, e10[e10.Tab = 2] = `Tab`, e10[e10.Enter = 3] = `Enter`, e10[e10.Shift = 4] = `Shift`, e10[e10.Ctrl = 5] = `Ctrl`, e10[e10.Alt = 6] = `Alt`, e10[e10.PauseBreak = 7] = `PauseBreak`, e10[e10.CapsLock = 8] = `CapsLock`, e10[e10.Escape = 9] = `Escape`, e10[e10.Space = 10] = `Space`, e10[e10.PageUp = 11] = `PageUp`, e10[e10.PageDown = 12] = `PageDown`, e10[e10.End = 13] = `End`, e10[e10.Home = 14] = `Home`, e10[e10.LeftArrow = 15] = `LeftArrow`, e10[e10.UpArrow = 16] = `UpArrow`, e10[e10.RightArrow = 17] = `RightArrow`, e10[e10.DownArrow = 18] = `DownArrow`, e10[e10.Insert = 19] = `Insert`, e10[e10.Delete = 20] = `Delete`, e10[e10.Digit0 = 21] = `Digit0`, e10[e10.Digit1 = 22] = `Digit1`, e10[e10.Digit2 = 23] = `Digit2`, e10[e10.Digit3 = 24] = `Digit3`, e10[e10.Digit4 = 25] = `Digit4`, e10[e10.Digit5 = 26] = `Digit5`, e10[e10.Digit6 = 27] = `Digit6`, e10[e10.Digit7 = 28] = `Digit7`, e10[e10.Digit8 = 29] = `Digit8`, e10[e10.Digit9 = 30] = `Digit9`, e10[e10.KeyA = 31] = `KeyA`, e10[e10.KeyB = 32] = `KeyB`, e10[e10.KeyC = 33] = `KeyC`, e10[e10.KeyD = 34] = `KeyD`, e10[e10.KeyE = 35] = `KeyE`, e10[e10.KeyF = 36] = `KeyF`, e10[e10.KeyG = 37] = `KeyG`, e10[e10.KeyH = 38] = `KeyH`, e10[e10.KeyI = 39] = `KeyI`, e10[e10.KeyJ = 40] = `KeyJ`, e10[e10.KeyK = 41] = `KeyK`, e10[e10.KeyL = 42] = `KeyL`, e10[e10.KeyM = 43] = `KeyM`, e10[e10.KeyN = 44] = `KeyN`, e10[e10.KeyO = 45] = `KeyO`, e10[e10.KeyP = 46] = `KeyP`, e10[e10.KeyQ = 47] = `KeyQ`, e10[e10.KeyR = 48] = `KeyR`, e10[e10.KeyS = 49] = `KeyS`, e10[e10.KeyT = 50] = `KeyT`, e10[e10.KeyU = 51] = `KeyU`, e10[e10.KeyV = 52] = `KeyV`, e10[e10.KeyW = 53] = `KeyW`, e10[e10.KeyX = 54] = `KeyX`, e10[e10.KeyY = 55] = `KeyY`, e10[e10.KeyZ = 56] = `KeyZ`, e10[e10.Meta = 57] = `Meta`, e10[e10.ContextMenu = 58] = `ContextMenu`, e10[e10.F1 = 59] = `F1`, e10[e10.F2 = 60] = `F2`, e10[e10.F3 = 61] = `F3`, e10[e10.F4 = 62] = `F4`, e10[e10.F5 = 63] = `F5`, e10[e10.F6 = 64] = `F6`, e10[e10.F7 = 65] = `F7`, e10[e10.F8 = 66] = `F8`, e10[e10.F9 = 67] = `F9`, e10[e10.F10 = 68] = `F10`, e10[e10.F11 = 69] = `F11`, e10[e10.F12 = 70] = `F12`, e10[e10.F13 = 71] = `F13`, e10[e10.F14 = 72] = `F14`, e10[e10.F15 = 73] = `F15`, e10[e10.F16 = 74] = `F16`, e10[e10.F17 = 75] = `F17`, e10[e10.F18 = 76] = `F18`, e10[e10.F19 = 77] = `F19`, e10[e10.F20 = 78] = `F20`, e10[e10.F21 = 79] = `F21`, e10[e10.F22 = 80] = `F22`, e10[e10.F23 = 81] = `F23`, e10[e10.F24 = 82] = `F24`, e10[e10.NumLock = 83] = `NumLock`, e10[e10.ScrollLock = 84] = `ScrollLock`, e10[e10.Semicolon = 85] = `Semicolon`, e10[e10.Equal = 86] = `Equal`, e10[e10.Comma = 87] = `Comma`, e10[e10.Minus = 88] = `Minus`, e10[e10.Period = 89] = `Period`, e10[e10.Slash = 90] = `Slash`, e10[e10.Backquote = 91] = `Backquote`, e10[e10.BracketLeft = 92] = `BracketLeft`, e10[e10.Backslash = 93] = `Backslash`, e10[e10.BracketRight = 94] = `BracketRight`, e10[e10.Quote = 95] = `Quote`, e10[e10.OEM_8 = 96] = `OEM_8`, e10[e10.IntlBackslash = 97] = `IntlBackslash`, e10[e10.Numpad0 = 98] = `Numpad0`, e10[e10.Numpad1 = 99] = `Numpad1`, e10[e10.Numpad2 = 100] = `Numpad2`, e10[e10.Numpad3 = 101] = `Numpad3`, e10[e10.Numpad4 = 102] = `Numpad4`, e10[e10.Numpad5 = 103] = `Numpad5`, e10[e10.Numpad6 = 104] = `Numpad6`, e10[e10.Numpad7 = 105] = `Numpad7`, e10[e10.Numpad8 = 106] = `Numpad8`, e10[e10.Numpad9 = 107] = `Numpad9`, e10[e10.NumpadMultiply = 108] = `NumpadMultiply`, e10[e10.NumpadAdd = 109] = `NumpadAdd`, e10[e10.NUMPAD_SEPARATOR = 110] = `NUMPAD_SEPARATOR`, e10[e10.NumpadSubtract = 111] = `NumpadSubtract`, e10[e10.NumpadDecimal = 112] = `NumpadDecimal`, e10[e10.NumpadDivide = 113] = `NumpadDivide`, e10[e10.KEY_IN_COMPOSITION = 114] = `KEY_IN_COMPOSITION`, e10[e10.ABNT_C1 = 115] = `ABNT_C1`, e10[e10.ABNT_C2 = 116] = `ABNT_C2`, e10[e10.AudioVolumeMute = 117] = `AudioVolumeMute`, e10[e10.AudioVolumeUp = 118] = `AudioVolumeUp`, e10[e10.AudioVolumeDown = 119] = `AudioVolumeDown`, e10[e10.BrowserSearch = 120] = `BrowserSearch`, e10[e10.BrowserHome = 121] = `BrowserHome`, e10[e10.BrowserBack = 122] = `BrowserBack`, e10[e10.BrowserForward = 123] = `BrowserForward`, e10[e10.MediaTrackNext = 124] = `MediaTrackNext`, e10[e10.MediaTrackPrevious = 125] = `MediaTrackPrevious`, e10[e10.MediaStop = 126] = `MediaStop`, e10[e10.MediaPlayPause = 127] = `MediaPlayPause`, e10[e10.LaunchMediaPlayer = 128] = `LaunchMediaPlayer`, e10[e10.LaunchMail = 129] = `LaunchMail`, e10[e10.LaunchApp2 = 130] = `LaunchApp2`, e10[e10.Clear = 131] = `Clear`, e10[e10.MAX_VALUE = 132] = `MAX_VALUE`;
  })(Ao || (Ao = {}));
  var jo;
  (function(e10) {
    e10[e10.Hint = 1] = `Hint`, e10[e10.Info = 2] = `Info`, e10[e10.Warning = 4] = `Warning`, e10[e10.Error = 8] = `Error`;
  })(jo || (jo = {}));
  var Mo;
  (function(e10) {
    e10[e10.Unnecessary = 1] = `Unnecessary`, e10[e10.Deprecated = 2] = `Deprecated`;
  })(Mo || (Mo = {}));
  var No;
  (function(e10) {
    e10[e10.Inline = 1] = `Inline`, e10[e10.Gutter = 2] = `Gutter`;
  })(No || (No = {}));
  var Po;
  (function(e10) {
    e10[e10.Normal = 1] = `Normal`, e10[e10.Underlined = 2] = `Underlined`;
  })(Po || (Po = {}));
  var Fo;
  (function(e10) {
    e10[e10.UNKNOWN = 0] = `UNKNOWN`, e10[e10.TEXTAREA = 1] = `TEXTAREA`, e10[e10.GUTTER_GLYPH_MARGIN = 2] = `GUTTER_GLYPH_MARGIN`, e10[e10.GUTTER_LINE_NUMBERS = 3] = `GUTTER_LINE_NUMBERS`, e10[e10.GUTTER_LINE_DECORATIONS = 4] = `GUTTER_LINE_DECORATIONS`, e10[e10.GUTTER_VIEW_ZONE = 5] = `GUTTER_VIEW_ZONE`, e10[e10.CONTENT_TEXT = 6] = `CONTENT_TEXT`, e10[e10.CONTENT_EMPTY = 7] = `CONTENT_EMPTY`, e10[e10.CONTENT_VIEW_ZONE = 8] = `CONTENT_VIEW_ZONE`, e10[e10.CONTENT_WIDGET = 9] = `CONTENT_WIDGET`, e10[e10.OVERVIEW_RULER = 10] = `OVERVIEW_RULER`, e10[e10.SCROLLBAR = 11] = `SCROLLBAR`, e10[e10.OVERLAY_WIDGET = 12] = `OVERLAY_WIDGET`, e10[e10.OUTSIDE_EDITOR = 13] = `OUTSIDE_EDITOR`;
  })(Fo || (Fo = {}));
  var Io;
  (function(e10) {
    e10[e10.AIGenerated = 1] = `AIGenerated`;
  })(Io || (Io = {}));
  var Lo;
  (function(e10) {
    e10[e10.Invoke = 0] = `Invoke`, e10[e10.Automatic = 1] = `Automatic`;
  })(Lo || (Lo = {}));
  var Ro;
  (function(e10) {
    e10[e10.TOP_RIGHT_CORNER = 0] = `TOP_RIGHT_CORNER`, e10[e10.BOTTOM_RIGHT_CORNER = 1] = `BOTTOM_RIGHT_CORNER`, e10[e10.TOP_CENTER = 2] = `TOP_CENTER`;
  })(Ro || (Ro = {}));
  var zo;
  (function(e10) {
    e10[e10.Left = 1] = `Left`, e10[e10.Center = 2] = `Center`, e10[e10.Right = 4] = `Right`, e10[e10.Full = 7] = `Full`;
  })(zo || (zo = {}));
  var Bo;
  (function(e10) {
    e10[e10.Word = 0] = `Word`, e10[e10.Line = 1] = `Line`, e10[e10.Suggest = 2] = `Suggest`;
  })(Bo || (Bo = {}));
  var Vo;
  (function(e10) {
    e10[e10.Left = 0] = `Left`, e10[e10.Right = 1] = `Right`, e10[e10.None = 2] = `None`, e10[e10.LeftOfInjectedText = 3] = `LeftOfInjectedText`, e10[e10.RightOfInjectedText = 4] = `RightOfInjectedText`;
  })(Vo || (Vo = {}));
  var Ho;
  (function(e10) {
    e10[e10.Off = 0] = `Off`, e10[e10.On = 1] = `On`, e10[e10.Relative = 2] = `Relative`, e10[e10.Interval = 3] = `Interval`, e10[e10.Custom = 4] = `Custom`;
  })(Ho || (Ho = {}));
  var Uo;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Text = 1] = `Text`, e10[e10.Blocks = 2] = `Blocks`;
  })(Uo || (Uo = {}));
  var Wo;
  (function(e10) {
    e10[e10.Smooth = 0] = `Smooth`, e10[e10.Immediate = 1] = `Immediate`;
  })(Wo || (Wo = {}));
  var Go;
  (function(e10) {
    e10[e10.Auto = 1] = `Auto`, e10[e10.Hidden = 2] = `Hidden`, e10[e10.Visible = 3] = `Visible`;
  })(Go || (Go = {}));
  var Ko;
  (function(e10) {
    e10[e10.LTR = 0] = `LTR`, e10[e10.RTL = 1] = `RTL`;
  })(Ko || (Ko = {}));
  var qo;
  (function(e10) {
    e10.Off = `off`, e10.OnCode = `onCode`, e10.On = `on`;
  })(qo || (qo = {}));
  var Jo;
  (function(e10) {
    e10[e10.Invoke = 1] = `Invoke`, e10[e10.TriggerCharacter = 2] = `TriggerCharacter`, e10[e10.ContentChange = 3] = `ContentChange`;
  })(Jo || (Jo = {}));
  var Yo;
  (function(e10) {
    e10[e10.File = 0] = `File`, e10[e10.Module = 1] = `Module`, e10[e10.Namespace = 2] = `Namespace`, e10[e10.Package = 3] = `Package`, e10[e10.Class = 4] = `Class`, e10[e10.Method = 5] = `Method`, e10[e10.Property = 6] = `Property`, e10[e10.Field = 7] = `Field`, e10[e10.Constructor = 8] = `Constructor`, e10[e10.Enum = 9] = `Enum`, e10[e10.Interface = 10] = `Interface`, e10[e10.Function = 11] = `Function`, e10[e10.Variable = 12] = `Variable`, e10[e10.Constant = 13] = `Constant`, e10[e10.String = 14] = `String`, e10[e10.Number = 15] = `Number`, e10[e10.Boolean = 16] = `Boolean`, e10[e10.Array = 17] = `Array`, e10[e10.Object = 18] = `Object`, e10[e10.Key = 19] = `Key`, e10[e10.Null = 20] = `Null`, e10[e10.EnumMember = 21] = `EnumMember`, e10[e10.Struct = 22] = `Struct`, e10[e10.Event = 23] = `Event`, e10[e10.Operator = 24] = `Operator`, e10[e10.TypeParameter = 25] = `TypeParameter`;
  })(Yo || (Yo = {}));
  var Xo;
  (function(e10) {
    e10[e10.Deprecated = 1] = `Deprecated`;
  })(Xo || (Xo = {}));
  var Zo;
  (function(e10) {
    e10[e10.Hidden = 0] = `Hidden`, e10[e10.Blink = 1] = `Blink`, e10[e10.Smooth = 2] = `Smooth`, e10[e10.Phase = 3] = `Phase`, e10[e10.Expand = 4] = `Expand`, e10[e10.Solid = 5] = `Solid`;
  })(Zo || (Zo = {}));
  var Qo;
  (function(e10) {
    e10[e10.Line = 1] = `Line`, e10[e10.Block = 2] = `Block`, e10[e10.Underline = 3] = `Underline`, e10[e10.LineThin = 4] = `LineThin`, e10[e10.BlockOutline = 5] = `BlockOutline`, e10[e10.UnderlineThin = 6] = `UnderlineThin`;
  })(Qo || (Qo = {}));
  var $o;
  (function(e10) {
    e10[e10.AlwaysGrowsWhenTypingAtEdges = 0] = `AlwaysGrowsWhenTypingAtEdges`, e10[e10.NeverGrowsWhenTypingAtEdges = 1] = `NeverGrowsWhenTypingAtEdges`, e10[e10.GrowsOnlyWhenTypingBefore = 2] = `GrowsOnlyWhenTypingBefore`, e10[e10.GrowsOnlyWhenTypingAfter = 3] = `GrowsOnlyWhenTypingAfter`;
  })($o || ($o = {}));
  var es;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Same = 1] = `Same`, e10[e10.Indent = 2] = `Indent`, e10[e10.DeepIndent = 3] = `DeepIndent`;
  })(es || (es = {}));
  var ts = (_q2 = class {
    static chord(e10, t10) {
      return Ai(e10, t10);
    }
  }, _q2.CtrlCmd = 2048, _q2.Shift = 1024, _q2.Alt = 512, _q2.WinCtrl = 256, _q2);
  function ns() {
    return {
      editor: void 0,
      languages: void 0,
      CancellationTokenSource: gi,
      Emitter: N,
      KeyCode: Ao,
      KeyMod: ts,
      Position: P,
      Range: F,
      Selection: Ma,
      SelectionDirection: Ko,
      MarkerSeverity: jo,
      MarkerTag: Mo,
      Uri: xa,
      Token: za
    };
  }
  function rs(e10, t10) {
    let n10 = e10;
    typeof n10.vscodeWindowId != `number` && Object.defineProperty(n10, `vscodeWindowId`, {
      get: () => t10
    });
  }
  os = window;
  function ss(e10) {
    return e10;
  }
  let cs, ls;
  cs = class {
    constructor(e10, t10) {
      this.lastCache = void 0, this.lastArgKey = void 0, typeof e10 == `function` ? (this._fn = e10, this._computeKey = ss) : (this._fn = t10, this._computeKey = e10.getCacheKey);
    }
    get(e10) {
      let t10 = this._computeKey(e10);
      return this.lastArgKey !== t10 && (this.lastArgKey = t10, this.lastCache = this._fn(e10)), this.lastCache;
    }
  };
  ls = class {
    get cachedValues() {
      return this._map;
    }
    constructor(e10, t10) {
      this._map = /* @__PURE__ */ new Map(), this._map2 = /* @__PURE__ */ new Map(), typeof e10 == `function` ? (this._fn = e10, this._computeKey = ss) : (this._fn = t10, this._computeKey = e10.getCacheKey);
    }
    get(e10) {
      let t10 = this._computeKey(e10);
      if (this._map2.has(t10)) return this._map2.get(t10);
      let n10 = this._fn(e10);
      return this._map.set(e10, n10), this._map2.set(t10, n10), n10;
    }
  };
  us = class {
    constructor(e10) {
      this.executor = e10, this._didRun = false;
    }
    get value() {
      if (!this._didRun) try {
        this._value = this.executor();
      } catch (e10) {
        this._error = e10;
      } finally {
        this._didRun = true;
      }
      if (this._error) throw this._error;
      return this._value;
    }
    get rawValue() {
      return this._value;
    }
  };
  ds = function(e10) {
    return !e10 || typeof e10 != `string` ? true : e10.trim().length === 0;
  };
  const fs = /{(\d+)}/g;
  ps = function(e10, ...t10) {
    return t10.length === 0 ? e10 : e10.replace(fs, function(e11, n10) {
      let r10 = parseInt(n10, 10);
      return isNaN(r10) || r10 < 0 || r10 >= t10.length ? e11 : t10[r10];
    });
  };
  function ms(e10) {
    return e10.replace(/[<>"'&]/g, (e11) => {
      switch (e11) {
        case `<`:
          return `&lt;`;
        case `>`:
          return `&gt;`;
        case `"`:
          return `&quot;`;
        case `'`:
          return `&apos;`;
        case `&`:
          return `&amp;`;
      }
      return e11;
    });
  }
  function hs(e10) {
    return e10.replace(/[<>&]/g, function(e11) {
      switch (e11) {
        case `<`:
          return `&lt;`;
        case `>`:
          return `&gt;`;
        case `&`:
          return `&amp;`;
        default:
          return e11;
      }
    });
  }
  gs = function(e10) {
    return e10.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, `\\$&`);
  };
  _s = function(e10, t10 = ` `) {
    let n10 = vs(e10, t10);
    return ys(n10, t10);
  };
  function vs(e10, t10) {
    if (!e10 || !t10) return e10;
    let n10 = t10.length;
    if (n10 === 0 || e10.length === 0) return e10;
    let r10 = 0;
    for (; e10.indexOf(t10, r10) === r10; ) r10 += n10;
    return e10.substring(r10);
  }
  function ys(e10, t10) {
    if (!e10 || !t10) return e10;
    let n10 = t10.length, r10 = e10.length;
    if (n10 === 0 || r10 === 0) return e10;
    let i10 = r10, a10 = -1;
    for (; a10 = e10.lastIndexOf(t10, i10 - 1), !(a10 === -1 || a10 + n10 !== i10); ) {
      if (a10 === 0) return ``;
      i10 = a10;
    }
    return e10.substring(0, i10);
  }
  function bs(e10) {
    return e10.replace(/[\-\\\{\}\+\?\|\^\$\.\,\[\]\(\)\#\s]/g, `\\$&`).replace(/[\*]/g, `.*`);
  }
  xs = function(e10) {
    return e10.replace(/\*/g, ``);
  };
  function Ss(e10, t10, n10 = {}) {
    if (!e10) throw Error(`Cannot create regex from empty string`);
    t10 || (e10 = gs(e10)), n10.wholeWord && (/\B/.test(e10.charAt(0)) || (e10 = `\\b` + e10), /\B/.test(e10.charAt(e10.length - 1)) || (e10 += `\\b`));
    let r10 = ``;
    return n10.global && (r10 += `g`), n10.matchCase || (r10 += `i`), n10.multiline && (r10 += `m`), n10.unicode && (r10 += `u`), new RegExp(e10, r10);
  }
  function Cs(e10) {
    if (e10.source === `^` || e10.source === `^$` || e10.source === `$` || e10.source === `^\\s*$`) return false;
    let t10 = e10.exec(``);
    return !!(t10 && e10.lastIndex === 0);
  }
  ws = function(e10) {
    return e10.split(/\r\n|\r|\n/);
  };
  Ts = function(e10) {
    let t10 = [], n10 = e10.split(/(\r\n|\r|\n)/);
    for (let e11 = 0; e11 < Math.ceil(n10.length / 2); e11++) t10.push(n10[2 * e11] + (n10[2 * e11 + 1] ?? ``));
    return t10;
  };
  Es = function(e10) {
    for (let t10 = 0, n10 = e10.length; t10 < n10; t10++) {
      let n11 = e10.charCodeAt(t10);
      if (n11 !== 32 && n11 !== 9) return t10;
    }
    return -1;
  };
  Ds = function(e10, t10 = 0, n10 = e10.length) {
    for (let r10 = t10; r10 < n10; r10++) {
      let n11 = e10.charCodeAt(r10);
      if (n11 !== 32 && n11 !== 9) return e10.substring(t10, r10);
    }
    return e10.substring(t10, n10);
  };
  Os = function(e10, t10 = e10.length - 1) {
    for (let n10 = t10; n10 >= 0; n10--) {
      let t11 = e10.charCodeAt(n10);
      if (t11 !== 32 && t11 !== 9) return n10;
    }
    return -1;
  };
  ks = function(e10, t10) {
    return e10 < t10 ? -1 : e10 > t10 ? 1 : 0;
  };
  function As(e10, t10, n10 = 0, r10 = e10.length, i10 = 0, a10 = t10.length) {
    for (; n10 < r10 && i10 < a10; n10++, i10++) {
      let r11 = e10.charCodeAt(n10), a11 = t10.charCodeAt(i10);
      if (r11 < a11) return -1;
      if (r11 > a11) return 1;
    }
    let o10 = r10 - n10, s10 = a10 - i10;
    return o10 < s10 ? -1 : o10 > s10 ? 1 : 0;
  }
  js = function(e10, t10) {
    return Ms(e10, t10, 0, e10.length, 0, t10.length);
  };
  function Ms(e10, t10, n10 = 0, r10 = e10.length, i10 = 0, a10 = t10.length) {
    for (; n10 < r10 && i10 < a10; n10++, i10++) {
      let o11 = e10.charCodeAt(n10), s11 = t10.charCodeAt(i10);
      if (o11 === s11) continue;
      if (o11 >= 128 || s11 >= 128) return As(e10.toLowerCase(), t10.toLowerCase(), n10, r10, i10, a10);
      Ps(o11) && (o11 -= 32), Ps(s11) && (s11 -= 32);
      let c10 = o11 - s11;
      if (c10 !== 0) return c10;
    }
    let o10 = r10 - n10, s10 = a10 - i10;
    return o10 < s10 ? -1 : o10 > s10 ? 1 : 0;
  }
  function Ns(e10) {
    return e10 >= 48 && e10 <= 57;
  }
  Ps = function(e10) {
    return e10 >= 97 && e10 <= 122;
  };
  Fs = function(e10) {
    return e10 >= 65 && e10 <= 90;
  };
  function Is(e10, t10) {
    return e10.length === t10.length && Ms(e10, t10) === 0;
  }
  function Ls(e10, t10) {
    let n10 = t10.length;
    return t10.length > e10.length ? false : Ms(e10, t10, 0, n10) === 0;
  }
  Rs = function(e10, t10) {
    let n10 = Math.min(e10.length, t10.length), r10;
    for (r10 = 0; r10 < n10; r10++) if (e10.charCodeAt(r10) !== t10.charCodeAt(r10)) return r10;
    return n10;
  };
  zs = function(e10, t10) {
    let n10 = Math.min(e10.length, t10.length), r10, i10 = e10.length - 1, a10 = t10.length - 1;
    for (r10 = 0; r10 < n10; r10++) if (e10.charCodeAt(i10 - r10) !== t10.charCodeAt(a10 - r10)) return r10;
    return n10;
  };
  Bs = function(e10) {
    return 55296 <= e10 && e10 <= 56319;
  };
  Vs = function(e10) {
    return 56320 <= e10 && e10 <= 57343;
  };
  function Hs(e10, t10) {
    return (e10 - 55296 << 10) + (t10 - 56320) + 65536;
  }
  function Us(e10, t10, n10) {
    let r10 = e10.charCodeAt(n10);
    if (Bs(r10) && n10 + 1 < t10) {
      let t11 = e10.charCodeAt(n10 + 1);
      if (Vs(t11)) return Hs(r10, t11);
    }
    return r10;
  }
  function Ws(e10, t10) {
    let n10 = e10.charCodeAt(t10 - 1);
    if (Vs(n10) && t10 > 1) {
      let r10 = e10.charCodeAt(t10 - 2);
      if (Bs(r10)) return Hs(r10, n10);
    }
    return n10;
  }
  var Gs = class {
    get offset() {
      return this._offset;
    }
    constructor(e10, t10 = 0) {
      this._str = e10, this._len = e10.length, this._offset = t10;
    }
    setOffset(e10) {
      this._offset = e10;
    }
    prevCodePoint() {
      let e10 = Ws(this._str, this._offset);
      return this._offset -= e10 >= 65536 ? 2 : 1, e10;
    }
    nextCodePoint() {
      let e10 = Us(this._str, this._len, this._offset);
      return this._offset += e10 >= 65536 ? 2 : 1, e10;
    }
    eol() {
      return this._offset >= this._len;
    }
  }, Ks = class {
    get offset() {
      return this._iterator.offset;
    }
    constructor(e10, t10 = 0) {
      this._iterator = new Gs(e10, t10);
    }
    nextGraphemeLength() {
      let e10 = uc.getInstance(), t10 = this._iterator, n10 = t10.offset, r10 = e10.getGraphemeBreakType(t10.nextCodePoint());
      for (; !t10.eol(); ) {
        let n11 = t10.offset, i10 = e10.getGraphemeBreakType(t10.nextCodePoint());
        if (lc(r10, i10)) {
          t10.setOffset(n11);
          break;
        }
        r10 = i10;
      }
      return t10.offset - n10;
    }
    prevGraphemeLength() {
      let e10 = uc.getInstance(), t10 = this._iterator, n10 = t10.offset, r10 = e10.getGraphemeBreakType(t10.prevCodePoint());
      for (; t10.offset > 0; ) {
        let n11 = t10.offset, i10 = e10.getGraphemeBreakType(t10.prevCodePoint());
        if (lc(i10, r10)) {
          t10.setOffset(n11);
          break;
        }
        r10 = i10;
      }
      return n10 - t10.offset;
    }
    eol() {
      return this._iterator.eol();
    }
  };
  function qs(e10, t10) {
    let n10 = new Ks(e10, t10);
    return n10.nextGraphemeLength();
  }
  function Js(e10, t10) {
    let n10 = new Ks(e10, t10);
    return n10.prevGraphemeLength();
  }
  function Ys(e10, t10) {
    t10 > 0 && Vs(e10.charCodeAt(t10)) && t10--;
    let n10 = t10 + qs(e10, t10), r10 = n10 - Js(e10, n10);
    return [
      r10,
      n10
    ];
  }
  let Xs;
  function Zs() {
    return /(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDC7\uFDF0-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE35\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDD23\uDE80-\uDEA9\uDEAD-\uDF45\uDF51-\uDF81\uDF86-\uDFF6]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD4B-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;
  }
  Qs = function(e10) {
    return Xs || (Xs = Zs()), Xs.test(e10);
  };
  const $s = /^[\t\n\r\x20-\x7E]*$/;
  ec = function(e10) {
    return $s.test(e10);
  };
  const tc = /[\u2028\u2029]/;
  function nc(e10) {
    return tc.test(e10);
  }
  function rc(e10) {
    return e10 >= 11904 && e10 <= 55215 || e10 >= 63744 && e10 <= 64255 || e10 >= 65281 && e10 <= 65374;
  }
  function ic(e10) {
    return e10 >= 127462 && e10 <= 127487 || e10 === 8986 || e10 === 8987 || e10 === 9200 || e10 === 9203 || e10 >= 9728 && e10 <= 10175 || e10 === 11088 || e10 === 11093 || e10 >= 127744 && e10 <= 128591 || e10 >= 128640 && e10 <= 128764 || e10 >= 128992 && e10 <= 129008 || e10 >= 129280 && e10 <= 129535 || e10 >= 129648 && e10 <= 129782;
  }
  const ac = `\uFEFF`;
  function oc(e10) {
    return !!(e10 && e10.length > 0 && e10.charCodeAt(0) === 65279);
  }
  sc = function(e10, t10 = false) {
    return e10 ? (t10 && (e10 = e10.replace(/\\./g, ``)), e10.toLowerCase() !== e10) : false;
  };
  function cc(e10) {
    let t10 = 26;
    return e10 %= 2 * t10, e10 < t10 ? String.fromCharCode(97 + e10) : String.fromCharCode(65 + e10 - t10);
  }
  function lc(e10, t10) {
    return e10 === 0 ? t10 !== 5 && t10 !== 7 : e10 === 2 && t10 === 3 ? false : e10 === 4 || e10 === 2 || e10 === 3 || t10 === 4 || t10 === 2 || t10 === 3 ? true : !(e10 === 8 && (t10 === 8 || t10 === 9 || t10 === 11 || t10 === 12) || (e10 === 11 || e10 === 9) && (t10 === 9 || t10 === 10) || (e10 === 12 || e10 === 10) && t10 === 10 || t10 === 5 || t10 === 13 || t10 === 7 || e10 === 1 || e10 === 13 && t10 === 14 || e10 === 6 && t10 === 6);
  }
  var uc = (_r2 = class {
    static getInstance() {
      return _r2._INSTANCE || (_r2._INSTANCE = new _r2()), _r2._INSTANCE;
    }
    constructor() {
      this._data = dc();
    }
    getGraphemeBreakType(e10) {
      if (e10 < 32) return e10 === 10 ? 3 : e10 === 13 ? 2 : 4;
      if (e10 < 127) return 0;
      let t10 = this._data, n10 = t10.length / 3, r10 = 1;
      for (; r10 <= n10; ) if (e10 < t10[3 * r10]) r10 = 2 * r10;
      else if (e10 > t10[3 * r10 + 1]) r10 = 2 * r10 + 1;
      else return t10[3 * r10 + 2];
      return 0;
    }
  }, _r2._INSTANCE = null, _r2);
  function dc() {
    return JSON.parse(`[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]`);
  }
  function fc(e10, t10) {
    if (e10 === 0) return 0;
    let n10 = pc(e10, t10);
    if (n10 !== void 0) return n10;
    let r10 = new Gs(t10, e10);
    return r10.prevCodePoint(), r10.offset;
  }
  function pc(e10, t10) {
    let n10 = new Gs(t10, e10), r10 = n10.prevCodePoint();
    for (; mc(r10) || r10 === 65039 || r10 === 8419; ) {
      if (n10.offset === 0) return;
      r10 = n10.prevCodePoint();
    }
    if (!ic(r10)) return;
    let i10 = n10.offset;
    if (i10 > 0) {
      let e11 = n10.prevCodePoint();
      e11 === 8205 && (i10 = n10.offset);
    }
    return i10;
  }
  function mc(e10) {
    return 127995 <= e10 && e10 <= 127999;
  }
  hc = `\xA0`;
  let gc, vc;
  gc = (_s2 = class {
    static getInstance(t10) {
      return _s2.cache.get(Array.from(t10));
    }
    static getLocales() {
      return _s2._locales.value;
    }
    constructor(e10) {
      this.confusableDictionary = e10;
    }
    isAmbiguous(e10) {
      return this.confusableDictionary.has(e10);
    }
    getPrimaryConfusable(e10) {
      return this.confusableDictionary.get(e10);
    }
    getConfusableCodePoints() {
      return new Set(this.confusableDictionary.keys());
    }
  }, _s2.ambiguousCharacterData = new us(() => JSON.parse(`{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"cs":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"es":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"fr":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"it":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ja":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],"ko":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pt-BR":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ru":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"zh-hans":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],"zh-hant":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}`)), _s2.cache = new cs({
    getCacheKey: JSON.stringify
  }, (t10) => {
    function n10(e10) {
      let t11 = /* @__PURE__ */ new Map();
      for (let n11 = 0; n11 < e10.length; n11 += 2) t11.set(e10[n11], e10[n11 + 1]);
      return t11;
    }
    function r10(e10, t11) {
      let n11 = new Map(e10);
      for (let [e11, r11] of t11) n11.set(e11, r11);
      return n11;
    }
    function i10(e10, t11) {
      if (!e10) return t11;
      let n11 = /* @__PURE__ */ new Map();
      for (let [r11, i11] of e10) t11.has(r11) && n11.set(r11, i11);
      return n11;
    }
    let a10 = _s2.ambiguousCharacterData.value, o10 = t10.filter((e10) => !e10.startsWith(`_`) && e10 in a10);
    o10.length === 0 && (o10 = [
      `_default`
    ]);
    let s10;
    for (let e10 of o10) {
      let t11 = n10(a10[e10]);
      s10 = i10(s10, t11);
    }
    let c10 = n10(a10._common), l10 = r10(c10, s10);
    return new _s2(l10);
  }), _s2._locales = new us(() => Object.keys(_s2.ambiguousCharacterData.value).filter((e10) => !e10.startsWith(`_`))), _s2);
  _c = (_t2 = class {
    static getRawData() {
      return JSON.parse(`[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]`);
    }
    static getData() {
      return this._data || (this._data = new Set(_t2.getRawData())), this._data;
    }
    static isInvisibleCharacter(t10) {
      return _t2.getData().has(t10);
    }
    static get codePoints() {
      return _t2.getData();
    }
  }, _t2._data = void 0, _t2);
  vc = (_u2 = class {
    constructor() {
      this.mapWindowIdToZoomFactor = /* @__PURE__ */ new Map();
    }
    getZoomFactor(e10) {
      return this.mapWindowIdToZoomFactor.get(this.getWindowId(e10)) ?? 1;
    }
    getWindowId(e10) {
      return e10.vscodeWindowId;
    }
  }, _u2.INSTANCE = new _u2(), _u2);
  function yc(e10, t10, n10) {
    typeof t10 == `string` && (t10 = e10.matchMedia(t10)), t10.addEventListener(`change`, n10);
  }
  function bc(e10) {
    return vc.INSTANCE.getZoomFactor(e10);
  }
  let xc, Cc, wc, Tc, Ec, eee, Dc;
  xc = navigator.userAgent;
  Sc = xc.indexOf(`Firefox`) >= 0;
  Cc = xc.indexOf(`AppleWebKit`) >= 0;
  wc = xc.indexOf(`Chrome`) >= 0;
  Tc = !wc && xc.indexOf(`Safari`) >= 0;
  Ec = !wc && !Tc && Cc;
  eee = xc.indexOf(`Electron/`) >= 0;
  Dc = xc.indexOf(`Android`) >= 0;
  let Oc = false;
  if (typeof os.matchMedia == `function`) {
    let e10 = os.matchMedia(`(display-mode: standalone) or (display-mode: window-controls-overlay)`), t10 = os.matchMedia(`(display-mode: fullscreen)`);
    Oc = e10.matches, yc(os, e10, ({ matches: e11 }) => {
      Oc && t10.matches || (Oc = e11);
    });
  }
  function kc() {
    return Oc;
  }
  const Ac = {
    clipboard: {
      writeText: gt || document.queryCommandSupported && document.queryCommandSupported(`copy`) || !!(navigator && navigator.clipboard && navigator.clipboard.writeText),
      readText: gt || !!(navigator && navigator.clipboard && navigator.clipboard.readText)
    },
    keyboard: (() => gt || kc() ? 0 : navigator.keyboard || Tc ? 1 : 2)(),
    touch: `ontouchstart` in os || navigator.maxTouchPoints > 0,
    pointerEvents: os.PointerEvent && (`ontouchstart` in os || navigator.maxTouchPoints > 0)
  };
  function jc(e10, t10) {
    if (typeof e10 == `number`) {
      if (e10 === 0) return null;
      let n10 = (e10 & 65535) >>> 0, r10 = (e10 & 4294901760) >>> 16;
      return r10 === 0 ? new Pc([
        Mc(n10, t10)
      ]) : new Pc([
        Mc(n10, t10),
        Mc(r10, t10)
      ]);
    } else {
      let n10 = [];
      for (let r10 = 0; r10 < e10.length; r10++) n10.push(Mc(e10[r10], t10));
      return new Pc(n10);
    }
  }
  function Mc(e10, t10) {
    let n10 = !!(e10 & 2048), r10 = !!(e10 & 256), i10 = t10 === 2 ? r10 : n10, a10 = !!(e10 & 1024), o10 = !!(e10 & 512), s10 = t10 === 2 ? n10 : r10, c10 = e10 & 255;
    return new Nc(i10, a10, o10, s10, c10);
  }
  let Pc, Fc, Ic;
  Nc = class e10 {
    constructor(e11, t10, n10, r10, i10) {
      this.ctrlKey = e11, this.shiftKey = t10, this.altKey = n10, this.metaKey = r10, this.keyCode = i10;
    }
    equals(t10) {
      return t10 instanceof e10 && this.ctrlKey === t10.ctrlKey && this.shiftKey === t10.shiftKey && this.altKey === t10.altKey && this.metaKey === t10.metaKey && this.keyCode === t10.keyCode;
    }
    isModifierKey() {
      return this.keyCode === 0 || this.keyCode === 5 || this.keyCode === 57 || this.keyCode === 6 || this.keyCode === 4;
    }
    isDuplicateModifierCase() {
      return this.ctrlKey && this.keyCode === 5 || this.shiftKey && this.keyCode === 4 || this.altKey && this.keyCode === 6 || this.metaKey && this.keyCode === 57;
    }
  };
  Pc = class {
    constructor(e10) {
      if (e10.length === 0) throw Cr(`chords`);
      this.chords = e10;
    }
  };
  Fc = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.ctrlKey = e10, this.shiftKey = t10, this.altKey = n10, this.metaKey = r10, this.keyLabel = i10, this.keyAriaLabel = a10;
    }
  };
  Ic = class {
  };
  function Lc(e10) {
    if (e10.charCode) {
      let t11 = String.fromCharCode(e10.charCode).toUpperCase();
      return ki.fromString(t11);
    }
    let t10 = e10.keyCode;
    if (t10 === 3) return 7;
    if (Sc) switch (t10) {
      case 59:
        return 85;
      case 60:
        if (ht) return 97;
        break;
      case 61:
        return 86;
      case 107:
        return 109;
      case 109:
        return 111;
      case 173:
        return 88;
      case 224:
        if (E) return 57;
        break;
    }
    else if (Cc && (E && t10 === 93 || !E && t10 === 92)) return 57;
    return Si[t10] || 0;
  }
  const Rc = E ? 256 : 2048, zc = 512, Bc = 1024, Vc = E ? 2048 : 256;
  Hc = class {
    constructor(e10) {
      var _a3;
      this._standardKeyboardEventBrand = true;
      let t10 = e10;
      this.browserEvent = t10, this.target = t10.target, this.ctrlKey = t10.ctrlKey, this.shiftKey = t10.shiftKey, this.altKey = t10.altKey, this.metaKey = t10.metaKey, this.altGraphKey = (_a3 = t10.getModifierState) == null ? void 0 : _a3.call(t10, `AltGraph`), this.keyCode = Lc(t10), this.code = t10.code, this.ctrlKey = this.ctrlKey || this.keyCode === 5, this.altKey = this.altKey || this.keyCode === 6, this.shiftKey = this.shiftKey || this.keyCode === 4, this.metaKey = this.metaKey || this.keyCode === 57, this._asKeybinding = this._computeKeybinding(), this._asKeyCodeChord = this._computeKeyCodeChord();
    }
    preventDefault() {
      this.browserEvent && this.browserEvent.preventDefault && this.browserEvent.preventDefault();
    }
    stopPropagation() {
      this.browserEvent && this.browserEvent.stopPropagation && this.browserEvent.stopPropagation();
    }
    toKeyCodeChord() {
      return this._asKeyCodeChord;
    }
    equals(e10) {
      return this._asKeybinding === e10;
    }
    _computeKeybinding() {
      let e10 = 0;
      this.keyCode !== 5 && this.keyCode !== 4 && this.keyCode !== 6 && this.keyCode !== 57 && (e10 = this.keyCode);
      let t10 = 0;
      return this.ctrlKey && (t10 |= Rc), this.altKey && (t10 |= zc), this.shiftKey && (t10 |= Bc), this.metaKey && (t10 |= Vc), t10 |= e10, t10;
    }
    _computeKeyCodeChord() {
      let e10 = 0;
      return this.keyCode !== 5 && this.keyCode !== 4 && this.keyCode !== 6 && this.keyCode !== 57 && (e10 = this.keyCode), new Nc(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, e10);
    }
  };
  const Uc = /* @__PURE__ */ new WeakMap();
  function Wc(e10) {
    if (!e10.parent || e10.parent === e10) return null;
    try {
      let t10 = e10.location, n10 = e10.parent.location;
      if (t10.origin !== `null` && n10.origin !== `null` && t10.origin !== n10.origin) return null;
    } catch {
      return null;
    }
    return e10.parent;
  }
  let Gc, qc;
  Gc = class {
    static getSameOriginWindowChain(e10) {
      let t10 = Uc.get(e10);
      if (!t10) {
        t10 = [], Uc.set(e10, t10);
        let n10 = e10, r10;
        do
          r10 = Wc(n10), r10 ? t10.push({
            window: new WeakRef(n10),
            iframeElement: n10.frameElement || null
          }) : t10.push({
            window: new WeakRef(n10),
            iframeElement: null
          }), n10 = r10;
        while (n10);
      }
      return t10.slice(0);
    }
    static getPositionOfChildWindowRelativeToAncestorWindow(e10, t10) {
      if (!t10 || e10 === t10) return {
        top: 0,
        left: 0
      };
      let n10 = 0, r10 = 0, i10 = this.getSameOriginWindowChain(e10);
      for (let e11 of i10) {
        let i11 = e11.window.deref();
        if (n10 += (i11 == null ? void 0 : i11.scrollY) ?? 0, r10 += (i11 == null ? void 0 : i11.scrollX) ?? 0, i11 === t10 || !e11.iframeElement) break;
        let a10 = e11.iframeElement.getBoundingClientRect();
        n10 += a10.top, r10 += a10.left;
      }
      return {
        top: n10,
        left: r10
      };
    }
  };
  Kc = class {
    constructor(e10, t10) {
      this.timestamp = Date.now(), this.browserEvent = t10, this.leftButton = t10.button === 0, this.middleButton = t10.button === 1, this.rightButton = t10.button === 2, this.buttons = t10.buttons, this.target = t10.target, this.detail = t10.detail || 1, t10.type === `dblclick` && (this.detail = 2), this.ctrlKey = t10.ctrlKey, this.shiftKey = t10.shiftKey, this.altKey = t10.altKey, this.metaKey = t10.metaKey, typeof t10.pageX == `number` ? (this.posx = t10.pageX, this.posy = t10.pageY) : (this.posx = t10.clientX + this.target.ownerDocument.body.scrollLeft + this.target.ownerDocument.documentElement.scrollLeft, this.posy = t10.clientY + this.target.ownerDocument.body.scrollTop + this.target.ownerDocument.documentElement.scrollTop);
      let n10 = Gc.getPositionOfChildWindowRelativeToAncestorWindow(e10, t10.view);
      this.posx -= n10.left, this.posy -= n10.top;
    }
    preventDefault() {
      this.browserEvent.preventDefault();
    }
    stopPropagation() {
      this.browserEvent.stopPropagation();
    }
  };
  qc = class {
    constructor(e10, t10 = 0, n10 = 0) {
      var _a3;
      this.browserEvent = e10 || null, this.target = e10 ? e10.target || e10.targetNode || e10.srcElement : null, this.deltaY = n10, this.deltaX = t10;
      let r10 = false;
      if (wc) {
        let e11 = navigator.userAgent.match(/Chrome\/(\d+)/), t11 = e11 ? parseInt(e11[1]) : 123;
        r10 = t11 <= 122;
      }
      if (e10) {
        let t11 = e10, n11 = e10, i10 = ((_a3 = e10.view) == null ? void 0 : _a3.devicePixelRatio) || 1;
        if (t11.wheelDeltaY !== void 0) r10 ? this.deltaY = t11.wheelDeltaY / (120 * i10) : this.deltaY = t11.wheelDeltaY / 120;
        else if (n11.VERTICAL_AXIS !== void 0 && n11.axis === n11.VERTICAL_AXIS) this.deltaY = -n11.detail / 3;
        else if (e10.type === `wheel`) {
          let t12 = e10;
          t12.deltaMode === t12.DOM_DELTA_LINE ? Sc && !E ? this.deltaY = -e10.deltaY / 3 : this.deltaY = -e10.deltaY : this.deltaY = -e10.deltaY / 40;
        }
        if (t11.wheelDeltaX !== void 0) Tc && mt ? this.deltaX = -(t11.wheelDeltaX / 120) : r10 ? this.deltaX = t11.wheelDeltaX / (120 * i10) : this.deltaX = t11.wheelDeltaX / 120;
        else if (n11.HORIZONTAL_AXIS !== void 0 && n11.axis === n11.HORIZONTAL_AXIS) this.deltaX = -e10.detail / 3;
        else if (e10.type === `wheel`) {
          let t12 = e10;
          t12.deltaMode === t12.DOM_DELTA_LINE ? Sc && !E ? this.deltaX = -e10.deltaX / 3 : this.deltaX = -e10.deltaX : this.deltaX = -e10.deltaX / 40;
        }
        this.deltaY === 0 && this.deltaX === 0 && e10.wheelDelta && (r10 ? this.deltaY = e10.wheelDelta / (120 * i10) : this.deltaY = e10.wheelDelta / 120);
      }
    }
    preventDefault() {
      var _a3;
      (_a3 = this.browserEvent) == null ? void 0 : _a3.preventDefault();
    }
    stopPropagation() {
      var _a3;
      (_a3 = this.browserEvent) == null ? void 0 : _a3.stopPropagation();
    }
  };
  const Jc = Symbol(`MicrotaskDelay`);
  function Yc(e10) {
    return !!e10 && typeof e10.then == `function`;
  }
  Xc = function(e10) {
    let t10 = new gi(), n10 = e10(t10.token), r10 = new Promise((e11, r11) => {
      let i10 = t10.token.onCancellationRequested(() => {
        i10.dispose(), r11(new xr());
      });
      Promise.resolve(n10).then((n11) => {
        i10.dispose(), t10.dispose(), e11(n11);
      }, (e12) => {
        i10.dispose(), t10.dispose(), r11(e12);
      });
    });
    return new class {
      cancel() {
        t10.cancel(), t10.dispose();
      }
      then(e11, t11) {
        return r10.then(e11, t11);
      }
      catch(e11) {
        return this.then(void 0, e11);
      }
      finally(e11) {
        return r10.finally(e11);
      }
    }();
  };
  Zc = function(e10, t10, n10) {
    return new Promise((r10, i10) => {
      let a10 = t10.onCancellationRequested(() => {
        a10.dispose(), r10(n10);
      });
      e10.then(r10, i10).finally(() => a10.dispose());
    });
  };
  var Qc = class {
    constructor() {
      this.isDisposed = false, this.activePromise = null, this.queuedPromise = null, this.queuedPromiseFactory = null;
    }
    queue(e10) {
      if (this.isDisposed) return Promise.reject(Error(`Throttler is disposed`));
      if (this.activePromise) {
        if (this.queuedPromiseFactory = e10, !this.queuedPromise) {
          let e11 = () => {
            if (this.queuedPromise = null, this.isDisposed) return;
            let e12 = this.queue(this.queuedPromiseFactory);
            return this.queuedPromiseFactory = null, e12;
          };
          this.queuedPromise = new Promise((t10) => {
            this.activePromise.then(e11, e11).then(t10);
          });
        }
        return new Promise((e11, t10) => {
          this.queuedPromise.then(e11, t10);
        });
      }
      return this.activePromise = e10(), new Promise((e11, t10) => {
        this.activePromise.then((t11) => {
          this.activePromise = null, e11(t11);
        }, (e12) => {
          this.activePromise = null, t10(e12);
        });
      });
    }
    dispose() {
      this.isDisposed = true;
    }
  };
  const $c = (e10, t10) => {
    let n10 = true, r10 = setTimeout(() => {
      n10 = false, t10();
    }, e10);
    return {
      isTriggered: () => n10,
      dispose: () => {
        clearTimeout(r10), n10 = false;
      }
    };
  }, el = (e10) => {
    let t10 = true;
    return queueMicrotask(() => {
      t10 && (t10 = false, e10());
    }), {
      isTriggered: () => t10,
      dispose: () => {
        t10 = false;
      }
    };
  };
  let nl;
  tl = class {
    constructor(e10) {
      this.defaultDelay = e10, this.deferred = null, this.completionPromise = null, this.doResolve = null, this.doReject = null, this.task = null;
    }
    trigger(e10, t10 = this.defaultDelay) {
      this.task = e10, this.cancelTimeout(), this.completionPromise || (this.completionPromise = new Promise((e11, t11) => {
        this.doResolve = e11, this.doReject = t11;
      }).then(() => {
        if (this.completionPromise = null, this.doResolve = null, this.task) {
          let e11 = this.task;
          return this.task = null, e11();
        }
      }));
      let n10 = () => {
        var _a3;
        this.deferred = null, (_a3 = this.doResolve) == null ? void 0 : _a3.call(this, null);
      };
      return this.deferred = t10 === Jc ? el(n10) : $c(t10, n10), this.completionPromise;
    }
    isTriggered() {
      var _a3;
      return !!((_a3 = this.deferred) == null ? void 0 : _a3.isTriggered());
    }
    cancel() {
      var _a3;
      this.cancelTimeout(), this.completionPromise && ((_a3 = this.doReject) == null ? void 0 : _a3.call(this, new xr()), this.completionPromise = null);
    }
    cancelTimeout() {
      var _a3;
      (_a3 = this.deferred) == null ? void 0 : _a3.dispose(), this.deferred = null;
    }
    dispose() {
      this.cancel();
    }
  };
  nl = class {
    constructor(e10) {
      this.delayer = new tl(e10), this.throttler = new Qc();
    }
    trigger(e10, t10) {
      return this.delayer.trigger(() => this.throttler.queue(e10), t10);
    }
    cancel() {
      this.delayer.cancel();
    }
    dispose() {
      this.delayer.dispose(), this.throttler.dispose();
    }
  };
  rl = function(e10, t10) {
    return t10 ? new Promise((n10, r10) => {
      let i10 = setTimeout(() => {
        a10.dispose(), n10();
      }, e10), a10 = t10.onCancellationRequested(() => {
        clearTimeout(i10), a10.dispose(), r10(new xr());
      });
    }) : Xc((t11) => rl(e10, t11));
  };
  il = function(e10, t10 = 0, n10) {
    let r10 = setTimeout(() => {
      e10(), n10 && i10.dispose();
    }, t10), i10 = k(() => {
      clearTimeout(r10), n10 == null ? void 0 : n10.deleteAndLeak(i10);
    });
    return n10 == null ? void 0 : n10.add(i10), i10;
  };
  al = function(e10, t10 = (e11) => !!e11, n10 = null) {
    let r10 = 0, i10 = e10.length, a10 = () => {
      if (r10 >= i10) return Promise.resolve(n10);
      let o10 = e10[r10++], s10 = Promise.resolve(o10());
      return s10.then((e11) => t10(e11) ? Promise.resolve(e11) : a10());
    };
    return a10();
  };
  let sl;
  ol = class {
    constructor(e10, t10) {
      this._isDisposed = false, this._token = -1, typeof e10 == `function` && typeof t10 == `number` && this.setIfNotSet(e10, t10);
    }
    dispose() {
      this.cancel(), this._isDisposed = true;
    }
    cancel() {
      this._token !== -1 && (clearTimeout(this._token), this._token = -1);
    }
    cancelAndSet(e10, t10) {
      if (this._isDisposed) throw new Dr(`Calling 'cancelAndSet' on a disposed TimeoutTimer`);
      this.cancel(), this._token = setTimeout(() => {
        this._token = -1, e10();
      }, t10);
    }
    setIfNotSet(e10, t10) {
      if (this._isDisposed) throw new Dr(`Calling 'setIfNotSet' on a disposed TimeoutTimer`);
      this._token === -1 && (this._token = setTimeout(() => {
        this._token = -1, e10();
      }, t10));
    }
  };
  sl = class {
    constructor() {
      this.disposable = void 0, this.isDisposed = false;
    }
    cancel() {
      var _a3;
      (_a3 = this.disposable) == null ? void 0 : _a3.dispose(), this.disposable = void 0;
    }
    cancelAndSet(e10, t10, n10 = globalThis) {
      if (this.isDisposed) throw new Dr(`Calling 'cancelAndSet' on a disposed IntervalTimer`);
      this.cancel();
      let r10 = n10.setInterval(() => {
        e10();
      }, t10);
      this.disposable = k(() => {
        n10.clearInterval(r10), this.disposable = void 0;
      });
    }
    dispose() {
      this.cancel(), this.isDisposed = true;
    }
  };
  cl = class {
    constructor(e10, t10) {
      this.timeoutToken = -1, this.runner = e10, this.timeout = t10, this.timeoutHandler = this.onTimeout.bind(this);
    }
    dispose() {
      this.cancel(), this.runner = null;
    }
    cancel() {
      this.isScheduled() && (clearTimeout(this.timeoutToken), this.timeoutToken = -1);
    }
    schedule(e10 = this.timeout) {
      this.cancel(), this.timeoutToken = setTimeout(this.timeoutHandler, e10);
    }
    get delay() {
      return this.timeout;
    }
    set delay(e10) {
      this.timeout = e10;
    }
    isScheduled() {
      return this.timeoutToken !== -1;
    }
    onTimeout() {
      this.timeoutToken = -1, this.runner && this.doRun();
    }
    doRun() {
      var _a3;
      (_a3 = this.runner) == null ? void 0 : _a3.call(this);
    }
  };
  let ll, ul;
  (function() {
    ul = typeof globalThis.requestIdleCallback != `function` || typeof globalThis.cancelIdleCallback != `function` ? (e10, t10) => {
      Tt(() => {
        if (n10) return;
        let e11 = Date.now() + 15, r10 = {
          didTimeout: true,
          timeRemaining() {
            return Math.max(0, e11 - Date.now());
          }
        };
        t10(Object.freeze(r10));
      });
      let n10 = false;
      return {
        dispose() {
          n10 || (n10 = true);
        }
      };
    } : (e10, t10, n10) => {
      let r10 = e10.requestIdleCallback(t10, typeof n10 == `number` ? {
        timeout: n10
      } : void 0), i10 = false;
      return {
        dispose() {
          i10 || (i10 = true, e10.cancelIdleCallback(r10));
        }
      };
    }, ll = (e10) => ul(globalThis, e10);
  })();
  let dl, fl, ml;
  dl = class {
    constructor(e10, t10) {
      this._didRun = false, this._executor = () => {
        try {
          this._value = t10();
        } catch (e11) {
          this._error = e11;
        } finally {
          this._didRun = true;
        }
      }, this._handle = ul(e10, () => this._executor());
    }
    dispose() {
      this._handle.dispose();
    }
    get value() {
      if (this._didRun || (this._handle.dispose(), this._executor()), this._error) throw this._error;
      return this._value;
    }
    get isInitialized() {
      return this._didRun;
    }
  };
  fl = class extends dl {
    constructor(e10) {
      super(globalThis, e10);
    }
  };
  pl = class {
    get isRejected() {
      var _a3;
      return ((_a3 = this.outcome) == null ? void 0 : _a3.outcome) === 1;
    }
    get isSettled() {
      return !!this.outcome;
    }
    constructor() {
      this.p = new Promise((e10, t10) => {
        this.completeCallback = e10, this.errorCallback = t10;
      });
    }
    complete(e10) {
      return new Promise((t10) => {
        this.completeCallback(e10), this.outcome = {
          outcome: 0,
          value: e10
        }, t10();
      });
    }
    error(e10) {
      return new Promise((t10) => {
        this.errorCallback(e10), this.outcome = {
          outcome: 1,
          value: e10
        }, t10();
      });
    }
    cancel() {
      return this.error(new xr());
    }
  };
  (function(e10) {
    async function t10(e11) {
      let t11, n11 = await Promise.all(e11.map((e12) => e12.then((e13) => e13, (e13) => {
        t11 || (t11 = e13);
      })));
      if (t11 !== void 0) throw t11;
      return n11;
    }
    e10.settled = t10;
    function n10(e11) {
      return new Promise(async (t11, n11) => {
        try {
          await e11(t11, n11);
        } catch (e12) {
          n11(e12);
        }
      });
    }
    e10.withAsyncBody = n10;
  })(ml || (ml = {}));
  let gl;
  hl = (_v2 = class {
    static fromArray(t10) {
      return new _v2((e10) => {
        e10.emitMany(t10);
      });
    }
    static fromPromise(t10) {
      return new _v2(async (e10) => {
        e10.emitMany(await t10);
      });
    }
    static fromPromises(t10) {
      return new _v2(async (e10) => {
        await Promise.all(t10.map(async (t11) => e10.emitOne(await t11)));
      });
    }
    static merge(t10) {
      return new _v2(async (e10) => {
        await Promise.all(t10.map(async (t11) => {
          for await (let n10 of t11) e10.emitOne(n10);
        }));
      });
    }
    constructor(e10, t10) {
      this._state = 0, this._results = [], this._error = null, this._onReturn = t10, this._onStateChanged = new N(), queueMicrotask(async () => {
        let t11 = {
          emitOne: (e11) => this.emitOne(e11),
          emitMany: (e11) => this.emitMany(e11),
          reject: (e11) => this.reject(e11)
        };
        try {
          await Promise.resolve(e10(t11)), this.resolve();
        } catch (e11) {
          this.reject(e11);
        } finally {
          t11.emitOne = void 0, t11.emitMany = void 0, t11.reject = void 0;
        }
      });
    }
    [Symbol.asyncIterator]() {
      let e10 = 0;
      return {
        next: async () => {
          do {
            if (this._state === 2) throw this._error;
            if (e10 < this._results.length) return {
              done: false,
              value: this._results[e10++]
            };
            if (this._state === 1) return {
              done: true,
              value: void 0
            };
            await M.toPromise(this._onStateChanged.event);
          } while (true);
        },
        return: async () => {
          var _a3;
          return (_a3 = this._onReturn) == null ? void 0 : _a3.call(this), {
            done: true,
            value: void 0
          };
        }
      };
    }
    static map(t10, n10) {
      return new _v2(async (e10) => {
        for await (let r10 of t10) e10.emitOne(n10(r10));
      });
    }
    map(t10) {
      return _v2.map(this, t10);
    }
    static filter(t10, n10) {
      return new _v2(async (e10) => {
        for await (let r10 of t10) n10(r10) && e10.emitOne(r10);
      });
    }
    filter(t10) {
      return _v2.filter(this, t10);
    }
    static coalesce(t10) {
      return _v2.filter(t10, (e10) => !!e10);
    }
    coalesce() {
      return _v2.coalesce(this);
    }
    static async toPromise(e10) {
      let t10 = [];
      for await (let n10 of e10) t10.push(n10);
      return t10;
    }
    toPromise() {
      return _v2.toPromise(this);
    }
    emitOne(e10) {
      this._state === 0 && (this._results.push(e10), this._onStateChanged.fire());
    }
    emitMany(e10) {
      this._state === 0 && (this._results = this._results.concat(e10), this._onStateChanged.fire());
    }
    resolve() {
      this._state === 0 && (this._state = 1, this._onStateChanged.fire());
    }
    reject(e10) {
      this._state === 0 && (this._state = 2, this._error = e10, this._onStateChanged.fire());
    }
  }, _v2.EMPTY = _v2.fromArray([]), _v2);
  gl = class extends hl {
    constructor(e10, t10) {
      super(t10), this._source = e10;
    }
    cancel() {
      this._source.cancel();
    }
  };
  _l = function(e10) {
    let t10 = new gi(), n10 = e10(t10.token);
    return new gl(t10, async (e11) => {
      let r10 = t10.token.onCancellationRequested(() => {
        r10.dispose(), t10.dispose(), e11.reject(new xr());
      });
      try {
        for await (let r11 of n10) {
          if (t10.token.isCancellationRequested) return;
          e11.emitOne(r11);
        }
        r10.dispose(), t10.dispose();
      } catch (n11) {
        r10.dispose(), t10.dispose(), e11.reject(n11);
      }
    });
  };
  const { entries: vl, setPrototypeOf: yl, isFrozen: bl, getPrototypeOf: xl, getOwnPropertyDescriptor: Sl } = Object;
  let { freeze: Cl, seal: wl, create: Tl } = Object, { apply: El, construct: Dl } = typeof Reflect < `u` && Reflect;
  Cl || (Cl = function(e10) {
    return e10;
  }), wl || (wl = function(e10) {
    return e10;
  }), El || (El = function(e10, t10, n10) {
    return e10.apply(t10, n10);
  }), Dl || (Dl = function(e10, t10) {
    return new e10(...t10);
  });
  const Ol = Bl(Array.prototype.forEach), kl = Bl(Array.prototype.pop), Al = Bl(Array.prototype.push), jl = Bl(String.prototype.toLowerCase), Ml = Bl(String.prototype.toString), Nl = Bl(String.prototype.match), Pl = Bl(String.prototype.replace), Fl = Bl(String.prototype.indexOf), Il = Bl(String.prototype.trim), Ll = Bl(Object.prototype.hasOwnProperty), Rl = Bl(RegExp.prototype.test), zl = Vl(TypeError);
  function Bl(e10) {
    return function(t10) {
      for (var n10 = arguments.length, r10 = Array(n10 > 1 ? n10 - 1 : 0), i10 = 1; i10 < n10; i10++) r10[i10 - 1] = arguments[i10];
      return El(e10, t10, r10);
    };
  }
  function Vl(e10) {
    return function() {
      for (var t10 = arguments.length, n10 = Array(t10), r10 = 0; r10 < t10; r10++) n10[r10] = arguments[r10];
      return Dl(e10, n10);
    };
  }
  function Hl(e10, t10) {
    let n10 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : jl;
    yl && yl(e10, null);
    let r10 = t10.length;
    for (; r10--; ) {
      let i10 = t10[r10];
      if (typeof i10 == `string`) {
        let e11 = n10(i10);
        e11 !== i10 && (bl(t10) || (t10[r10] = e11), i10 = e11);
      }
      e10[i10] = true;
    }
    return e10;
  }
  function Ul(e10) {
    for (let t10 = 0; t10 < e10.length; t10++) {
      let n10 = Ll(e10, t10);
      n10 || (e10[t10] = null);
    }
    return e10;
  }
  function Wl(e10) {
    let t10 = Tl(null);
    for (let [n10, r10] of vl(e10)) {
      let i10 = Ll(e10, n10);
      i10 && (Array.isArray(r10) ? t10[n10] = Ul(r10) : r10 && typeof r10 == `object` && r10.constructor === Object ? t10[n10] = Wl(r10) : t10[n10] = r10);
    }
    return t10;
  }
  function Gl(e10, t10) {
    for (; e10 !== null; ) {
      let n11 = Sl(e10, t10);
      if (n11) {
        if (n11.get) return Bl(n11.get);
        if (typeof n11.value == `function`) return Bl(n11.value);
      }
      e10 = xl(e10);
    }
    function n10() {
      return null;
    }
    return n10;
  }
  const Kl = Cl(`a.abbr.acronym.address.area.article.aside.audio.b.bdi.bdo.big.blink.blockquote.body.br.button.canvas.caption.center.cite.code.col.colgroup.content.data.datalist.dd.decorator.del.details.dfn.dialog.dir.div.dl.dt.element.em.fieldset.figcaption.figure.font.footer.form.h1.h2.h3.h4.h5.h6.head.header.hgroup.hr.html.i.img.input.ins.kbd.label.legend.li.main.map.mark.marquee.menu.menuitem.meter.nav.nobr.ol.optgroup.option.output.p.picture.pre.progress.q.rp.rt.ruby.s.samp.section.select.shadow.small.source.spacer.span.strike.strong.style.sub.summary.sup.table.tbody.td.template.textarea.tfoot.th.thead.time.tr.track.tt.u.ul.var.video.wbr`.split(`.`)), ql = Cl(`svg.a.altglyph.altglyphdef.altglyphitem.animatecolor.animatemotion.animatetransform.circle.clippath.defs.desc.ellipse.filter.font.g.glyph.glyphref.hkern.image.line.lineargradient.marker.mask.metadata.mpath.path.pattern.polygon.polyline.radialgradient.rect.stop.style.switch.symbol.text.textpath.title.tref.tspan.view.vkern`.split(`.`)), Jl = Cl([
    `feBlend`,
    `feColorMatrix`,
    `feComponentTransfer`,
    `feComposite`,
    `feConvolveMatrix`,
    `feDiffuseLighting`,
    `feDisplacementMap`,
    `feDistantLight`,
    `feDropShadow`,
    `feFlood`,
    `feFuncA`,
    `feFuncB`,
    `feFuncG`,
    `feFuncR`,
    `feGaussianBlur`,
    `feImage`,
    `feMerge`,
    `feMergeNode`,
    `feMorphology`,
    `feOffset`,
    `fePointLight`,
    `feSpecularLighting`,
    `feSpotLight`,
    `feTile`,
    `feTurbulence`
  ]), Yl = Cl([
    `animate`,
    `color-profile`,
    `cursor`,
    `discard`,
    `font-face`,
    `font-face-format`,
    `font-face-name`,
    `font-face-src`,
    `font-face-uri`,
    `foreignobject`,
    `hatch`,
    `hatchpath`,
    `mesh`,
    `meshgradient`,
    `meshpatch`,
    `meshrow`,
    `missing-glyph`,
    `script`,
    `set`,
    `solidcolor`,
    `unknown`,
    `use`
  ]), Xl = Cl(`math.menclose.merror.mfenced.mfrac.mglyph.mi.mlabeledtr.mmultiscripts.mn.mo.mover.mpadded.mphantom.mroot.mrow.ms.mspace.msqrt.mstyle.msub.msup.msubsup.mtable.mtd.mtext.mtr.munder.munderover.mprescripts`.split(`.`)), Zl = Cl([
    `maction`,
    `maligngroup`,
    `malignmark`,
    `mlongdiv`,
    `mscarries`,
    `mscarry`,
    `msgroup`,
    `mstack`,
    `msline`,
    `msrow`,
    `semantics`,
    `annotation`,
    `annotation-xml`,
    `mprescripts`,
    `none`
  ]), Ql = Cl([
    `#text`
  ]), $l = Cl(`accept.action.align.alt.autocapitalize.autocomplete.autopictureinpicture.autoplay.background.bgcolor.border.capture.cellpadding.cellspacing.checked.cite.class.clear.color.cols.colspan.controls.controlslist.coords.crossorigin.datetime.decoding.default.dir.disabled.disablepictureinpicture.disableremoteplayback.download.draggable.enctype.enterkeyhint.face.for.headers.height.hidden.high.href.hreflang.id.inputmode.integrity.ismap.kind.label.lang.list.loading.loop.low.max.maxlength.media.method.min.minlength.multiple.muted.name.nonce.noshade.novalidate.nowrap.open.optimum.pattern.placeholder.playsinline.popover.popovertarget.popovertargetaction.poster.preload.pubdate.radiogroup.readonly.rel.required.rev.reversed.role.rows.rowspan.spellcheck.scope.selected.shape.size.sizes.span.srclang.start.src.srcset.step.style.summary.tabindex.title.translate.type.usemap.valign.value.width.wrap.xmlns.slot`.split(`.`)), eu = Cl(`accent-height.accumulate.additive.alignment-baseline.amplitude.ascent.attributename.attributetype.azimuth.basefrequency.baseline-shift.begin.bias.by.class.clip.clippathunits.clip-path.clip-rule.color.color-interpolation.color-interpolation-filters.color-profile.color-rendering.cx.cy.d.dx.dy.diffuseconstant.direction.display.divisor.dur.edgemode.elevation.end.exponent.fill.fill-opacity.fill-rule.filter.filterunits.flood-color.flood-opacity.font-family.font-size.font-size-adjust.font-stretch.font-style.font-variant.font-weight.fx.fy.g1.g2.glyph-name.glyphref.gradientunits.gradienttransform.height.href.id.image-rendering.in.in2.intercept.k.k1.k2.k3.k4.kerning.keypoints.keysplines.keytimes.lang.lengthadjust.letter-spacing.kernelmatrix.kernelunitlength.lighting-color.local.marker-end.marker-mid.marker-start.markerheight.markerunits.markerwidth.maskcontentunits.maskunits.max.mask.media.method.mode.min.name.numoctaves.offset.operator.opacity.order.orient.orientation.origin.overflow.paint-order.path.pathlength.patterncontentunits.patterntransform.patternunits.points.preservealpha.preserveaspectratio.primitiveunits.r.rx.ry.radius.refx.refy.repeatcount.repeatdur.restart.result.rotate.scale.seed.shape-rendering.slope.specularconstant.specularexponent.spreadmethod.startoffset.stddeviation.stitchtiles.stop-color.stop-opacity.stroke-dasharray.stroke-dashoffset.stroke-linecap.stroke-linejoin.stroke-miterlimit.stroke-opacity.stroke.stroke-width.style.surfacescale.systemlanguage.tabindex.tablevalues.targetx.targety.transform.transform-origin.text-anchor.text-decoration.text-rendering.textlength.type.u1.u2.unicode.values.viewbox.visibility.version.vert-adv-y.vert-origin-x.vert-origin-y.width.word-spacing.wrap.writing-mode.xchannelselector.ychannelselector.x.x1.x2.xmlns.y.y1.y2.z.zoomandpan`.split(`.`)), tu = Cl(`accent.accentunder.align.bevelled.close.columnsalign.columnlines.columnspan.denomalign.depth.dir.display.displaystyle.encoding.fence.frame.height.href.id.largeop.length.linethickness.lspace.lquote.mathbackground.mathcolor.mathsize.mathvariant.maxsize.minsize.movablelimits.notation.numalign.open.rowalign.rowlines.rowspacing.rowspan.rspace.rquote.scriptlevel.scriptminsize.scriptsizemultiplier.selection.separator.separators.stretchy.subscriptshift.supscriptshift.symmetric.voffset.width.xmlns`.split(`.`)), nu = Cl([
    `xlink:href`,
    `xml:id`,
    `xlink:title`,
    `xml:space`,
    `xmlns:xlink`
  ]), ru = wl(/\{\{[\w\W]*|[\w\W]*\}\}/gm), iu = wl(/<%[\w\W]*|[\w\W]*%>/gm), au = wl(/\${[\w\W]*}/gm), ou = wl(/^data-[\-\w.\u00B7-\uFFFF]/), su = wl(/^aria-[\-\w]+$/), cu = wl(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i), lu = wl(/^(?:\w+script|data):/i), uu = wl(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g), du = wl(/^html$/i), fu = wl(/^[a-z][.\w]*(-[.\w]+)+$/i);
  var pu = Object.freeze({
    __proto__: null,
    MUSTACHE_EXPR: ru,
    ERB_EXPR: iu,
    TMPLIT_EXPR: au,
    DATA_ATTR: ou,
    ARIA_ATTR: su,
    IS_ALLOWED_URI: cu,
    IS_SCRIPT_OR_DATA: lu,
    ATTR_WHITESPACE: uu,
    DOCTYPE_NAME: du,
    CUSTOM_ELEMENT: fu
  });
  const mu = {
    element: 1,
    attribute: 2,
    text: 3,
    cdataSection: 4,
    entityReference: 5,
    entityNode: 6,
    progressingInstruction: 7,
    comment: 8,
    document: 9,
    documentType: 10,
    documentFragment: 11,
    notation: 12
  }, hu = function() {
    return typeof window > `u` ? null : window;
  }, gu = function(e10, t10) {
    if (typeof e10 != `object` || typeof e10.createPolicy != `function`) return null;
    let n10 = null, r10 = `data-tt-policy-suffix`;
    t10 && t10.hasAttribute(r10) && (n10 = t10.getAttribute(r10));
    let i10 = `dompurify` + (n10 ? `#` + n10 : ``);
    try {
      return e10.createPolicy(i10, {
        createHTML(e11) {
          return e11;
        },
        createScriptURL(e11) {
          return e11;
        }
      });
    } catch {
      return console.warn(`TrustedTypes policy ` + i10 + ` could not be created.`), null;
    }
  };
  function _u() {
    let e10 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : hu(), t10 = (e11) => _u(e11);
    if (t10.version = `3.1.7`, t10.removed = [], !e10 || !e10.document || e10.document.nodeType !== mu.document) return t10.isSupported = false, t10;
    let { document: n10 } = e10, r10 = n10, i10 = r10.currentScript, { DocumentFragment: a10, HTMLTemplateElement: o10, Node: s10, Element: c10, NodeFilter: l10, NamedNodeMap: u10 = e10.NamedNodeMap || e10.MozNamedAttrMap, HTMLFormElement: d10, DOMParser: f10, trustedTypes: p10 } = e10, m10 = c10.prototype, h10 = Gl(m10, `cloneNode`), g10 = Gl(m10, `remove`), _10 = Gl(m10, `nextSibling`), v10 = Gl(m10, `childNodes`), y10 = Gl(m10, `parentNode`);
    if (typeof o10 == `function`) {
      let e11 = n10.createElement(`template`);
      e11.content && e11.content.ownerDocument && (n10 = e11.content.ownerDocument);
    }
    let b10, x10 = ``, { implementation: S10, createNodeIterator: C10, createDocumentFragment: w10, getElementsByTagName: ee2 } = n10, { importNode: te2 } = r10, ne2 = {};
    t10.isSupported = typeof vl == `function` && typeof y10 == `function` && S10 && S10.createHTMLDocument !== void 0;
    let { MUSTACHE_EXPR: re2, ERB_EXPR: ie2, TMPLIT_EXPR: ae2, DATA_ATTR: oe2, ARIA_ATTR: se2, IS_SCRIPT_OR_DATA: ce2, ATTR_WHITESPACE: le2, CUSTOM_ELEMENT: ue2 } = pu, { IS_ALLOWED_URI: de2 } = pu, fe2 = null, pe2 = Hl({}, [
      ...Kl,
      ...ql,
      ...Jl,
      ...Xl,
      ...Ql
    ]), me2 = null, he2 = Hl({}, [
      ...$l,
      ...eu,
      ...tu,
      ...nu
    ]), ge2 = Object.seal(Tl(null, {
      tagNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      attributeNameCheck: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: null
      },
      allowCustomizedBuiltInElements: {
        writable: true,
        configurable: false,
        enumerable: true,
        value: false
      }
    })), _e3 = null, ve2 = null, ye2 = true, be2 = true, xe2 = false, Se2 = true, Ce2 = false, we2 = true, Te2 = false, Ee2 = false, De2 = false, Oe2 = false, ke2 = false, Ae2 = false, je2 = true, Me2 = false, Ne2 = `user-content-`, Pe2 = true, Fe2 = false, Ie2 = {}, Le2 = null, Re2 = Hl({}, [
      `annotation-xml`,
      `audio`,
      `colgroup`,
      `desc`,
      `foreignobject`,
      `head`,
      `iframe`,
      `math`,
      `mi`,
      `mn`,
      `mo`,
      `ms`,
      `mtext`,
      `noembed`,
      `noframes`,
      `noscript`,
      `plaintext`,
      `script`,
      `style`,
      `svg`,
      `template`,
      `thead`,
      `title`,
      `video`,
      `xmp`
    ]), ze2 = null, Be2 = Hl({}, [
      `audio`,
      `video`,
      `img`,
      `source`,
      `image`,
      `track`
    ]), Ve2 = null, He2 = Hl({}, [
      `alt`,
      `class`,
      `for`,
      `id`,
      `label`,
      `name`,
      `pattern`,
      `placeholder`,
      `role`,
      `summary`,
      `title`,
      `value`,
      `style`,
      `xmlns`
    ]), Ue2 = `http://www.w3.org/1998/Math/MathML`, We2 = `http://www.w3.org/2000/svg`, T10 = `http://www.w3.org/1999/xhtml`, Ge2 = T10, Ke2 = false, qe2 = null, Je2 = Hl({}, [
      Ue2,
      We2,
      T10
    ], Ml), Ye2 = null, Xe2 = [
      `application/xhtml+xml`,
      `text/html`
    ], Ze2 = `text/html`, Qe2 = null, $e2 = null, et2 = n10.createElement(`form`), tt2 = function(e11) {
      return e11 instanceof RegExp || e11 instanceof Function;
    }, nt2 = function() {
      let e11 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      if (!($e2 && $e2 === e11)) {
        if ((!e11 || typeof e11 != `object`) && (e11 = {}), e11 = Wl(e11), Ye2 = Xe2.indexOf(e11.PARSER_MEDIA_TYPE) === -1 ? Ze2 : e11.PARSER_MEDIA_TYPE, Qe2 = Ye2 === `application/xhtml+xml` ? Ml : jl, fe2 = Ll(e11, `ALLOWED_TAGS`) ? Hl({}, e11.ALLOWED_TAGS, Qe2) : pe2, me2 = Ll(e11, `ALLOWED_ATTR`) ? Hl({}, e11.ALLOWED_ATTR, Qe2) : he2, qe2 = Ll(e11, `ALLOWED_NAMESPACES`) ? Hl({}, e11.ALLOWED_NAMESPACES, Ml) : Je2, Ve2 = Ll(e11, `ADD_URI_SAFE_ATTR`) ? Hl(Wl(He2), e11.ADD_URI_SAFE_ATTR, Qe2) : He2, ze2 = Ll(e11, `ADD_DATA_URI_TAGS`) ? Hl(Wl(Be2), e11.ADD_DATA_URI_TAGS, Qe2) : Be2, Le2 = Ll(e11, `FORBID_CONTENTS`) ? Hl({}, e11.FORBID_CONTENTS, Qe2) : Re2, _e3 = Ll(e11, `FORBID_TAGS`) ? Hl({}, e11.FORBID_TAGS, Qe2) : {}, ve2 = Ll(e11, `FORBID_ATTR`) ? Hl({}, e11.FORBID_ATTR, Qe2) : {}, Ie2 = Ll(e11, `USE_PROFILES`) ? e11.USE_PROFILES : false, ye2 = e11.ALLOW_ARIA_ATTR !== false, be2 = e11.ALLOW_DATA_ATTR !== false, xe2 = e11.ALLOW_UNKNOWN_PROTOCOLS || false, Se2 = e11.ALLOW_SELF_CLOSE_IN_ATTR !== false, Ce2 = e11.SAFE_FOR_TEMPLATES || false, we2 = e11.SAFE_FOR_XML !== false, Te2 = e11.WHOLE_DOCUMENT || false, Oe2 = e11.RETURN_DOM || false, ke2 = e11.RETURN_DOM_FRAGMENT || false, Ae2 = e11.RETURN_TRUSTED_TYPE || false, De2 = e11.FORCE_BODY || false, je2 = e11.SANITIZE_DOM !== false, Me2 = e11.SANITIZE_NAMED_PROPS || false, Pe2 = e11.KEEP_CONTENT !== false, Fe2 = e11.IN_PLACE || false, de2 = e11.ALLOWED_URI_REGEXP || cu, Ge2 = e11.NAMESPACE || T10, ge2 = e11.CUSTOM_ELEMENT_HANDLING || {}, e11.CUSTOM_ELEMENT_HANDLING && tt2(e11.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (ge2.tagNameCheck = e11.CUSTOM_ELEMENT_HANDLING.tagNameCheck), e11.CUSTOM_ELEMENT_HANDLING && tt2(e11.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (ge2.attributeNameCheck = e11.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), e11.CUSTOM_ELEMENT_HANDLING && typeof e11.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == `boolean` && (ge2.allowCustomizedBuiltInElements = e11.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), Ce2 && (be2 = false), ke2 && (Oe2 = true), Ie2 && (fe2 = Hl({}, Ql), me2 = [], Ie2.html === true && (Hl(fe2, Kl), Hl(me2, $l)), Ie2.svg === true && (Hl(fe2, ql), Hl(me2, eu), Hl(me2, nu)), Ie2.svgFilters === true && (Hl(fe2, Jl), Hl(me2, eu), Hl(me2, nu)), Ie2.mathMl === true && (Hl(fe2, Xl), Hl(me2, tu), Hl(me2, nu))), e11.ADD_TAGS && (fe2 === pe2 && (fe2 = Wl(fe2)), Hl(fe2, e11.ADD_TAGS, Qe2)), e11.ADD_ATTR && (me2 === he2 && (me2 = Wl(me2)), Hl(me2, e11.ADD_ATTR, Qe2)), e11.ADD_URI_SAFE_ATTR && Hl(Ve2, e11.ADD_URI_SAFE_ATTR, Qe2), e11.FORBID_CONTENTS && (Le2 === Re2 && (Le2 = Wl(Le2)), Hl(Le2, e11.FORBID_CONTENTS, Qe2)), Pe2 && (fe2[`#text`] = true), Te2 && Hl(fe2, [
          `html`,
          `head`,
          `body`
        ]), fe2.table && (Hl(fe2, [
          `tbody`
        ]), delete _e3.tbody), e11.TRUSTED_TYPES_POLICY) {
          if (typeof e11.TRUSTED_TYPES_POLICY.createHTML != `function`) throw zl(`TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.`);
          if (typeof e11.TRUSTED_TYPES_POLICY.createScriptURL != `function`) throw zl(`TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.`);
          b10 = e11.TRUSTED_TYPES_POLICY, x10 = b10.createHTML(``);
        } else b10 === void 0 && (b10 = gu(p10, i10)), b10 !== null && typeof x10 == `string` && (x10 = b10.createHTML(``));
        Cl && Cl(e11), $e2 = e11;
      }
    }, rt2 = Hl({}, [
      `mi`,
      `mo`,
      `mn`,
      `ms`,
      `mtext`
    ]), it2 = Hl({}, [
      `annotation-xml`
    ]), at2 = Hl({}, [
      `title`,
      `style`,
      `font`,
      `a`,
      `script`
    ]), ot2 = Hl({}, [
      ...ql,
      ...Jl,
      ...Yl
    ]), st2 = Hl({}, [
      ...Xl,
      ...Zl
    ]), ct2 = function(e11) {
      let t11 = y10(e11);
      (!t11 || !t11.tagName) && (t11 = {
        namespaceURI: Ge2,
        tagName: `template`
      });
      let n11 = jl(e11.tagName), r11 = jl(t11.tagName);
      return qe2[e11.namespaceURI] ? e11.namespaceURI === We2 ? t11.namespaceURI === T10 ? n11 === `svg` : t11.namespaceURI === Ue2 ? n11 === `svg` && (r11 === `annotation-xml` || rt2[r11]) : !!ot2[n11] : e11.namespaceURI === Ue2 ? t11.namespaceURI === T10 ? n11 === `math` : t11.namespaceURI === We2 ? n11 === `math` && it2[r11] : !!st2[n11] : e11.namespaceURI === T10 ? t11.namespaceURI === We2 && !it2[r11] || t11.namespaceURI === Ue2 && !rt2[r11] ? false : !st2[n11] && (at2[n11] || !ot2[n11]) : !!(Ye2 === `application/xhtml+xml` && qe2[e11.namespaceURI]) : false;
    }, lt2 = function(e11) {
      Al(t10.removed, {
        element: e11
      });
      try {
        y10(e11).removeChild(e11);
      } catch {
        g10(e11);
      }
    }, ut2 = function(e11, n11) {
      try {
        Al(t10.removed, {
          attribute: n11.getAttributeNode(e11),
          from: n11
        });
      } catch {
        Al(t10.removed, {
          attribute: null,
          from: n11
        });
      }
      if (n11.removeAttribute(e11), e11 === `is` && !me2[e11]) if (Oe2 || ke2) try {
        lt2(n11);
      } catch {
      }
      else try {
        n11.setAttribute(e11, ``);
      } catch {
      }
    }, dt2 = function(e11) {
      let t11 = null, r11 = null;
      if (De2) e11 = `<remove></remove>` + e11;
      else {
        let t12 = Nl(e11, /^[\r\n\t ]+/);
        r11 = t12 && t12[0];
      }
      Ye2 === `application/xhtml+xml` && Ge2 === T10 && (e11 = `<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>` + e11 + `</body></html>`);
      let i11 = b10 ? b10.createHTML(e11) : e11;
      if (Ge2 === T10) try {
        t11 = new f10().parseFromString(i11, Ye2);
      } catch {
      }
      if (!t11 || !t11.documentElement) {
        t11 = S10.createDocument(Ge2, `template`, null);
        try {
          t11.documentElement.innerHTML = Ke2 ? x10 : i11;
        } catch {
        }
      }
      let a11 = t11.body || t11.documentElement;
      return e11 && r11 && a11.insertBefore(n10.createTextNode(r11), a11.childNodes[0] || null), Ge2 === T10 ? ee2.call(t11, Te2 ? `html` : `body`)[0] : Te2 ? t11.documentElement : a11;
    }, ft2 = function(e11) {
      return C10.call(e11.ownerDocument || e11, e11, l10.SHOW_ELEMENT | l10.SHOW_COMMENT | l10.SHOW_TEXT | l10.SHOW_PROCESSING_INSTRUCTION | l10.SHOW_CDATA_SECTION, null);
    }, pt2 = function(e11) {
      return e11 instanceof d10 && (typeof e11.nodeName != `string` || typeof e11.textContent != `string` || typeof e11.removeChild != `function` || !(e11.attributes instanceof u10) || typeof e11.removeAttribute != `function` || typeof e11.setAttribute != `function` || typeof e11.namespaceURI != `string` || typeof e11.insertBefore != `function` || typeof e11.hasChildNodes != `function`);
    }, mt2 = function(e11) {
      return typeof s10 == `function` && e11 instanceof s10;
    }, E10 = function(e11, n11, r11) {
      ne2[e11] && Ol(ne2[e11], (e12) => {
        e12.call(t10, n11, r11, $e2);
      });
    }, ht2 = function(e11) {
      let n11 = null;
      if (E10(`beforeSanitizeElements`, e11, null), pt2(e11)) return lt2(e11), true;
      let r11 = Qe2(e11.nodeName);
      if (E10(`uponSanitizeElement`, e11, {
        tagName: r11,
        allowedTags: fe2
      }), e11.hasChildNodes() && !mt2(e11.firstElementChild) && Rl(/<[/\w]/g, e11.innerHTML) && Rl(/<[/\w]/g, e11.textContent) || e11.nodeType === mu.progressingInstruction || we2 && e11.nodeType === mu.comment && Rl(/<[/\w]/g, e11.data)) return lt2(e11), true;
      if (!fe2[r11] || _e3[r11]) {
        if (!_e3[r11] && _t3(r11) && (ge2.tagNameCheck instanceof RegExp && Rl(ge2.tagNameCheck, r11) || ge2.tagNameCheck instanceof Function && ge2.tagNameCheck(r11))) return false;
        if (Pe2 && !Le2[r11]) {
          let t11 = y10(e11) || e11.parentNode, n12 = v10(e11) || e11.childNodes;
          if (n12 && t11) {
            let r12 = n12.length;
            for (let i11 = r12 - 1; i11 >= 0; --i11) {
              let r13 = h10(n12[i11], true);
              r13.__removalCount = (e11.__removalCount || 0) + 1, t11.insertBefore(r13, _10(e11));
            }
          }
        }
        return lt2(e11), true;
      }
      return e11 instanceof c10 && !ct2(e11) || (r11 === `noscript` || r11 === `noembed` || r11 === `noframes`) && Rl(/<\/no(script|embed|frames)/i, e11.innerHTML) ? (lt2(e11), true) : (Ce2 && e11.nodeType === mu.text && (n11 = e11.textContent, Ol([
        re2,
        ie2,
        ae2
      ], (e12) => {
        n11 = Pl(n11, e12, ` `);
      }), e11.textContent !== n11 && (Al(t10.removed, {
        element: e11.cloneNode()
      }), e11.textContent = n11)), E10(`afterSanitizeElements`, e11, null), false);
    }, gt2 = function(e11, t11, r11) {
      if (je2 && (t11 === `id` || t11 === `name`) && (r11 in n10 || r11 in et2)) return false;
      if (!(be2 && !ve2[t11] && Rl(oe2, t11)) && !(ye2 && Rl(se2, t11))) {
        if (!me2[t11] || ve2[t11]) {
          if (!(_t3(e11) && (ge2.tagNameCheck instanceof RegExp && Rl(ge2.tagNameCheck, e11) || ge2.tagNameCheck instanceof Function && ge2.tagNameCheck(e11)) && (ge2.attributeNameCheck instanceof RegExp && Rl(ge2.attributeNameCheck, t11) || ge2.attributeNameCheck instanceof Function && ge2.attributeNameCheck(t11)) || t11 === `is` && ge2.allowCustomizedBuiltInElements && (ge2.tagNameCheck instanceof RegExp && Rl(ge2.tagNameCheck, r11) || ge2.tagNameCheck instanceof Function && ge2.tagNameCheck(r11)))) return false;
        } else if (!Ve2[t11] && !Rl(de2, Pl(r11, le2, ``)) && !((t11 === `src` || t11 === `xlink:href` || t11 === `href`) && e11 !== `script` && Fl(r11, `data:`) === 0 && ze2[e11]) && !(xe2 && !Rl(ce2, Pl(r11, le2, ``))) && r11) return false;
      }
      return true;
    }, _t3 = function(e11) {
      return e11 !== `annotation-xml` && Nl(e11, ue2);
    }, vt2 = function(e11) {
      E10(`beforeSanitizeAttributes`, e11, null);
      let { attributes: n11 } = e11;
      if (!n11) return;
      let r11 = {
        attrName: ``,
        attrValue: ``,
        keepAttr: true,
        allowedAttributes: me2
      }, i11 = n11.length;
      for (; i11--; ) {
        let a11 = n11[i11], { name: o11, namespaceURI: s11, value: c11 } = a11, l11 = Qe2(o11), u11 = o11 === `value` ? c11 : Il(c11);
        if (r11.attrName = l11, r11.attrValue = u11, r11.keepAttr = true, r11.forceKeepAttr = void 0, E10(`uponSanitizeAttribute`, e11, r11), u11 = r11.attrValue, r11.forceKeepAttr || (ut2(o11, e11), !r11.keepAttr)) continue;
        if (!Se2 && Rl(/\/>/i, u11)) {
          ut2(o11, e11);
          continue;
        }
        Ce2 && Ol([
          re2,
          ie2,
          ae2
        ], (e12) => {
          u11 = Pl(u11, e12, ` `);
        });
        let d11 = Qe2(e11.nodeName);
        if (gt2(d11, l11, u11)) {
          if (Me2 && (l11 === `id` || l11 === `name`) && (ut2(o11, e11), u11 = Ne2 + u11), we2 && Rl(/((--!?|])>)|<\/(style|title)/i, u11)) {
            ut2(o11, e11);
            continue;
          }
          if (b10 && typeof p10 == `object` && typeof p10.getAttributeType == `function` && !s11) switch (p10.getAttributeType(d11, l11)) {
            case `TrustedHTML`:
              u11 = b10.createHTML(u11);
              break;
            case `TrustedScriptURL`:
              u11 = b10.createScriptURL(u11);
              break;
          }
          try {
            s11 ? e11.setAttributeNS(s11, o11, u11) : e11.setAttribute(o11, u11), pt2(e11) ? lt2(e11) : kl(t10.removed);
          } catch {
          }
        }
      }
      E10(`afterSanitizeAttributes`, e11, null);
    }, yt2 = function e11(t11) {
      let n11 = null, r11 = ft2(t11);
      for (E10(`beforeSanitizeShadowDOM`, t11, null); n11 = r11.nextNode(); ) E10(`uponSanitizeShadowNode`, n11, null), !ht2(n11) && (n11.content instanceof a10 && e11(n11.content), vt2(n11));
      E10(`afterSanitizeShadowDOM`, t11, null);
    };
    return t10.sanitize = function(e11) {
      let n11 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, i11 = null, o11 = null, c11 = null, l11 = null;
      if (Ke2 = !e11, Ke2 && (e11 = `<!-->`), typeof e11 != `string` && !mt2(e11)) if (typeof e11.toString == `function`) {
        if (e11 = e11.toString(), typeof e11 != `string`) throw zl(`dirty is not a string, aborting`);
      } else throw zl(`toString is not a function`);
      if (!t10.isSupported) return e11;
      if (Ee2 || nt2(n11), t10.removed = [], typeof e11 == `string` && (Fe2 = false), Fe2) {
        if (e11.nodeName) {
          let t11 = Qe2(e11.nodeName);
          if (!fe2[t11] || _e3[t11]) throw zl(`root node is forbidden and cannot be sanitized in-place`);
        }
      } else if (e11 instanceof s10) i11 = dt2(`<!---->`), o11 = i11.ownerDocument.importNode(e11, true), o11.nodeType === mu.element && o11.nodeName === `BODY` || o11.nodeName === `HTML` ? i11 = o11 : i11.appendChild(o11);
      else {
        if (!Oe2 && !Ce2 && !Te2 && e11.indexOf(`<`) === -1) return b10 && Ae2 ? b10.createHTML(e11) : e11;
        if (i11 = dt2(e11), !i11) return Oe2 ? null : Ae2 ? x10 : ``;
      }
      i11 && De2 && lt2(i11.firstChild);
      let u11 = ft2(Fe2 ? e11 : i11);
      for (; c11 = u11.nextNode(); ) ht2(c11) || (c11.content instanceof a10 && yt2(c11.content), vt2(c11));
      if (Fe2) return e11;
      if (Oe2) {
        if (ke2) for (l11 = w10.call(i11.ownerDocument); i11.firstChild; ) l11.appendChild(i11.firstChild);
        else l11 = i11;
        return (me2.shadowroot || me2.shadowrootmode) && (l11 = te2.call(r10, l11, true)), l11;
      }
      let d11 = Te2 ? i11.outerHTML : i11.innerHTML;
      return Te2 && fe2[`!doctype`] && i11.ownerDocument && i11.ownerDocument.doctype && i11.ownerDocument.doctype.name && Rl(du, i11.ownerDocument.doctype.name) && (d11 = `<!DOCTYPE ` + i11.ownerDocument.doctype.name + `>
` + d11), Ce2 && Ol([
        re2,
        ie2,
        ae2
      ], (e12) => {
        d11 = Pl(d11, e12, ` `);
      }), b10 && Ae2 ? b10.createHTML(d11) : d11;
    }, t10.setConfig = function() {
      let e11 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      nt2(e11), Ee2 = true;
    }, t10.clearConfig = function() {
      $e2 = null, Ee2 = false;
    }, t10.isValidAttribute = function(e11, t11, n11) {
      $e2 || nt2({});
      let r11 = Qe2(e11), i11 = Qe2(t11);
      return gt2(r11, i11, n11);
    }, t10.addHook = function(e11, t11) {
      typeof t11 == `function` && (ne2[e11] = ne2[e11] || [], Al(ne2[e11], t11));
    }, t10.removeHook = function(e11) {
      if (ne2[e11]) return kl(ne2[e11]);
    }, t10.removeHooks = function(e11) {
      ne2[e11] && (ne2[e11] = []);
    }, t10.removeAllHooks = function() {
      ne2 = {};
    }, t10;
  }
  var vu = _u();
  const tee = vu.version, nee = vu.isSupported, yu = vu.sanitize, ree = vu.setConfig, iee = vu.clearConfig, aee = vu.isValidAttribute, bu = vu.addHook, xu = vu.removeHook, oee = vu.removeHooks, see = vu.removeAllHooks;
  (function(e10) {
    e10.inMemory = `inmemory`, e10.vscode = `vscode`, e10.internal = `private`, e10.walkThrough = `walkThrough`, e10.walkThroughSnippet = `walkThroughSnippet`, e10.http = `http`, e10.https = `https`, e10.file = `file`, e10.mailto = `mailto`, e10.untitled = `untitled`, e10.data = `data`, e10.command = `command`, e10.vscodeRemote = `vscode-remote`, e10.vscodeRemoteResource = `vscode-remote-resource`, e10.vscodeManagedRemoteResource = `vscode-managed-remote-resource`, e10.vscodeUserData = `vscode-userdata`, e10.vscodeCustomEditor = `vscode-custom-editor`, e10.vscodeNotebookCell = `vscode-notebook-cell`, e10.vscodeNotebookCellMetadata = `vscode-notebook-cell-metadata`, e10.vscodeNotebookCellMetadataDiff = `vscode-notebook-cell-metadata-diff`, e10.vscodeNotebookCellOutput = `vscode-notebook-cell-output`, e10.vscodeNotebookCellOutputDiff = `vscode-notebook-cell-output-diff`, e10.vscodeNotebookMetadata = `vscode-notebook-metadata`, e10.vscodeInteractiveInput = `vscode-interactive-input`, e10.vscodeSettings = `vscode-settings`, e10.vscodeWorkspaceTrust = `vscode-workspace-trust`, e10.vscodeTerminal = `vscode-terminal`, e10.vscodeChatCodeBlock = `vscode-chat-code-block`, e10.vscodeChatCodeCompareBlock = `vscode-chat-code-compare-block`, e10.vscodeChatSesssion = `vscode-chat-editor`, e10.webviewPanel = `webview-panel`, e10.vscodeWebview = `vscode-webview`, e10.extension = `extension`, e10.vscodeFileResource = `vscode-file`, e10.tmp = `tmp`, e10.vsls = `vsls`, e10.vscodeSourceControl = `vscode-scm`, e10.commentsInput = `comment`, e10.codeSetting = `code-setting`, e10.outputChannel = `output`;
  })(Su || (Su = {}));
  Cu = function(e10, t10) {
    return xa.isUri(e10) ? Is(e10.scheme, t10) : Ls(e10, t10 + `:`);
  };
  wu = function(e10, ...t10) {
    return t10.some((t11) => Cu(e10, t11));
  };
  const Tu = `tkn`;
  var Eu = class {
    constructor() {
      this._hosts = /* @__PURE__ */ Object.create(null), this._ports = /* @__PURE__ */ Object.create(null), this._connectionTokens = /* @__PURE__ */ Object.create(null), this._preferredWebSchema = `http`, this._delegate = null, this._serverRootPath = `/`;
    }
    setPreferredWebSchema(e10) {
      this._preferredWebSchema = e10;
    }
    get _remoteResourcesPath() {
      return ra.join(this._serverRootPath, Su.vscodeRemoteResource);
    }
    rewrite(e10) {
      if (this._delegate) try {
        return this._delegate(e10);
      } catch (t11) {
        return gr(t11), e10;
      }
      let t10 = e10.authority, n10 = this._hosts[t10];
      n10 && n10.indexOf(`:`) !== -1 && n10.indexOf(`[`) === -1 && (n10 = `[${n10}]`);
      let r10 = this._ports[t10], i10 = this._connectionTokens[t10], a10 = `path=${encodeURIComponent(e10.path)}`;
      return typeof i10 == `string` && (a10 += `&${Tu}=${encodeURIComponent(i10)}`), xa.from({
        scheme: _t ? this._preferredWebSchema : Su.vscodeRemoteResource,
        authority: `${n10}:${r10}`,
        path: this._remoteResourcesPath,
        query: a10
      });
    }
  };
  const Du = new Eu(), Ou = `vscode-app`;
  var ku = (_w2 = class {
    asBrowserUri(e10) {
      let t10 = this.toUri(e10);
      return this.uriToBrowserUri(t10);
    }
    uriToBrowserUri(t10) {
      return t10.scheme === Su.vscodeRemote ? Du.rewrite(t10) : t10.scheme === Su.file && (gt || yt === `${Su.vscodeFileResource}://${_w2.FALLBACK_AUTHORITY}`) ? t10.with({
        scheme: Su.vscodeFileResource,
        authority: t10.authority || _w2.FALLBACK_AUTHORITY,
        query: null,
        fragment: null
      }) : t10;
    }
    toUri(e10, t10) {
      if (xa.isUri(e10)) return e10;
      if (globalThis._VSCODE_FILE_ROOT) {
        let t11 = globalThis._VSCODE_FILE_ROOT;
        if (/^\w[\w\d+.-]*:\/\//.test(t11)) return xa.joinPath(xa.parse(t11, true), e10);
        let n10 = aa(t11, e10);
        return xa.file(n10);
      }
      return xa.parse(t10.toUrl(e10));
    }
  }, _w2.FALLBACK_AUTHORITY = Ou, _w2);
  const Au = new ku();
  var ju;
  (function(e10) {
    let t10 = /* @__PURE__ */ new Map([
      [
        `1`,
        {
          "Cross-Origin-Opener-Policy": `same-origin`
        }
      ],
      [
        `2`,
        {
          "Cross-Origin-Embedder-Policy": `require-corp`
        }
      ],
      [
        `3`,
        {
          "Cross-Origin-Opener-Policy": `same-origin`,
          "Cross-Origin-Embedder-Policy": `require-corp`
        }
      ]
    ]);
    e10.CoopAndCoep = Object.freeze(t10.get(`3`));
    let n10 = `vscode-coi`;
    function r10(e11) {
      let r11;
      typeof e11 == `string` ? r11 = new URL(e11).searchParams : e11 instanceof URL ? r11 = e11.searchParams : xa.isUri(e11) && (r11 = new URL(e11.toString(true)).searchParams);
      let i11 = r11 == null ? void 0 : r11.get(n10);
      if (i11) return t10.get(i11);
    }
    e10.getHeadersFromQuery = r10;
    function i10(e11, t11, r11) {
      if (!globalThis.crossOriginIsolated) return;
      let i11 = t11 && r11 ? `3` : r11 ? `2` : `1`;
      e11 instanceof URLSearchParams ? e11.set(n10, i11) : e11[n10] = i11;
    }
    e10.addSearchParam = i10;
  })(ju || (ju = {}));
  Mu = function(e10) {
    return Nu(e10, 0);
  };
  function Nu(e10, t10) {
    switch (typeof e10) {
      case `object`:
        return e10 === null ? Pu(349, t10) : Array.isArray(e10) ? Lu(e10, t10) : Ru(e10, t10);
      case `string`:
        return Iu(e10, t10);
      case `boolean`:
        return Fu(e10, t10);
      case `number`:
        return Pu(e10, t10);
      case `undefined`:
        return Pu(937, t10);
      default:
        return Pu(617, t10);
    }
  }
  function Pu(e10, t10) {
    return (t10 << 5) - t10 + e10 | 0;
  }
  function Fu(e10, t10) {
    return Pu(e10 ? 433 : 863, t10);
  }
  function Iu(e10, t10) {
    t10 = Pu(149417, t10);
    for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) t10 = Pu(e10.charCodeAt(n10), t10);
    return t10;
  }
  function Lu(e10, t10) {
    return t10 = Pu(104579, t10), e10.reduce((e11, t11) => Nu(t11, e11), t10);
  }
  function Ru(e10, t10) {
    return t10 = Pu(181387, t10), Object.keys(e10).sort().reduce((t11, n10) => (t11 = Iu(n10, t11), Nu(e10[n10], t11)), t10);
  }
  function zu(e10, t10, n10 = 32) {
    let r10 = n10 - t10, i10 = ~((1 << r10) - 1);
    return (e10 << t10 | (i10 & e10) >>> r10) >>> 0;
  }
  function Bu(e10, t10 = 0, n10 = e10.byteLength, r10 = 0) {
    for (let i10 = 0; i10 < n10; i10++) e10[t10 + i10] = r10;
  }
  function Vu(e10, t10, n10 = `0`) {
    for (; e10.length < t10; ) e10 = n10 + e10;
    return e10;
  }
  function Hu(e10, t10 = 32) {
    return e10 instanceof ArrayBuffer ? Array.from(new Uint8Array(e10)).map((e11) => e11.toString(16).padStart(2, `0`)).join(``) : Vu((e10 >>> 0).toString(16), t10 / 4);
  }
  var Uu = (_x2 = class {
    constructor() {
      this._h0 = 1732584193, this._h1 = 4023233417, this._h2 = 2562383102, this._h3 = 271733878, this._h4 = 3285377520, this._buff = new Uint8Array(67), this._buffDV = new DataView(this._buff.buffer), this._buffLen = 0, this._totalLen = 0, this._leftoverHighSurrogate = 0, this._finished = false;
    }
    update(e10) {
      let t10 = e10.length;
      if (t10 === 0) return;
      let n10 = this._buff, r10 = this._buffLen, i10 = this._leftoverHighSurrogate, a10, o10;
      for (i10 === 0 ? (a10 = e10.charCodeAt(0), o10 = 0) : (a10 = i10, o10 = -1, i10 = 0); ; ) {
        let s10 = a10;
        if (Bs(a10)) if (o10 + 1 < t10) {
          let t11 = e10.charCodeAt(o10 + 1);
          Vs(t11) ? (o10++, s10 = Hs(a10, t11)) : s10 = 65533;
        } else {
          i10 = a10;
          break;
        }
        else Vs(a10) && (s10 = 65533);
        if (r10 = this._push(n10, r10, s10), o10++, o10 < t10) a10 = e10.charCodeAt(o10);
        else break;
      }
      this._buffLen = r10, this._leftoverHighSurrogate = i10;
    }
    _push(e10, t10, n10) {
      return n10 < 128 ? e10[t10++] = n10 : n10 < 2048 ? (e10[t10++] = 192 | (n10 & 1984) >>> 6, e10[t10++] = 128 | (n10 & 63) >>> 0) : n10 < 65536 ? (e10[t10++] = 224 | (n10 & 61440) >>> 12, e10[t10++] = 128 | (n10 & 4032) >>> 6, e10[t10++] = 128 | (n10 & 63) >>> 0) : (e10[t10++] = 240 | (n10 & 1835008) >>> 18, e10[t10++] = 128 | (n10 & 258048) >>> 12, e10[t10++] = 128 | (n10 & 4032) >>> 6, e10[t10++] = 128 | (n10 & 63) >>> 0), t10 >= 64 && (this._step(), t10 -= 64, this._totalLen += 64, e10[0] = e10[64], e10[1] = e10[65], e10[2] = e10[66]), t10;
    }
    digest() {
      return this._finished || (this._finished = true, this._leftoverHighSurrogate && (this._leftoverHighSurrogate = 0, this._buffLen = this._push(this._buff, this._buffLen, 65533)), this._totalLen += this._buffLen, this._wrapUp()), Hu(this._h0) + Hu(this._h1) + Hu(this._h2) + Hu(this._h3) + Hu(this._h4);
    }
    _wrapUp() {
      this._buff[this._buffLen++] = 128, Bu(this._buff, this._buffLen), this._buffLen > 56 && (this._step(), Bu(this._buff));
      let e10 = 8 * this._totalLen;
      this._buffDV.setUint32(56, Math.floor(e10 / 4294967296), false), this._buffDV.setUint32(60, e10 % 4294967296, false), this._step();
    }
    _step() {
      let t10 = _x2._bigBlock32, n10 = this._buffDV;
      for (let e10 = 0; e10 < 64; e10 += 4) t10.setUint32(e10, n10.getUint32(e10, false), false);
      for (let e10 = 64; e10 < 320; e10 += 4) t10.setUint32(e10, zu(t10.getUint32(e10 - 12, false) ^ t10.getUint32(e10 - 32, false) ^ t10.getUint32(e10 - 56, false) ^ t10.getUint32(e10 - 64, false), 1), false);
      let r10 = this._h0, i10 = this._h1, a10 = this._h2, o10 = this._h3, s10 = this._h4, c10, l10, u10;
      for (let e10 = 0; e10 < 80; e10++) e10 < 20 ? (c10 = i10 & a10 | ~i10 & o10, l10 = 1518500249) : e10 < 40 ? (c10 = i10 ^ a10 ^ o10, l10 = 1859775393) : e10 < 60 ? (c10 = i10 & a10 | i10 & o10 | a10 & o10, l10 = 2400959708) : (c10 = i10 ^ a10 ^ o10, l10 = 3395469782), u10 = zu(r10, 5) + c10 + s10 + l10 + t10.getUint32(e10 * 4, false) & 4294967295, s10 = o10, o10 = a10, a10 = zu(i10, 30), i10 = r10, r10 = u10;
      this._h0 = this._h0 + r10 & 4294967295, this._h1 = this._h1 + i10 & 4294967295, this._h2 = this._h2 + a10 & 4294967295, this._h3 = this._h3 + o10 & 4294967295, this._h4 = this._h4 + s10 & 4294967295;
    }
  }, _x2._bigBlock32 = new DataView(new ArrayBuffer(320)), _x2);
  let cee, lee, Wu, Gu, Ku, qu, uee, Ju, Yu, Xu;
  ({ registerWindow: cee, getWindow: R, getDocument: lee, getWindows: Wu, getWindowsCount: Gu, getWindowId: Ku, getWindowById: qu, hasWindow: uee, onDidRegisterWindow: Ju, onWillUnregisterWindow: Yu, onDidUnregisterWindow: Xu } = function() {
    let e10 = /* @__PURE__ */ new Map();
    rs(os, 1);
    let t10 = {
      window: os,
      disposables: new A()
    };
    e10.set(os.vscodeWindowId, t10);
    let n10 = new N(), r10 = new N(), i10 = new N();
    function a10(n11, r11) {
      let i11 = typeof n11 == `number` ? e10.get(n11) : void 0;
      return i11 ?? (r11 ? t10 : void 0);
    }
    return {
      onDidRegisterWindow: n10.event,
      onWillUnregisterWindow: i10.event,
      onDidUnregisterWindow: r10.event,
      registerWindow(t11) {
        if (e10.has(t11.vscodeWindowId)) return j.None;
        let a11 = new A(), o10 = {
          window: t11,
          disposables: a11.add(new A())
        };
        return e10.set(t11.vscodeWindowId, o10), a11.add(k(() => {
          e10.delete(t11.vscodeWindowId), r10.fire(t11);
        })), a11.add(z(t11, B.BEFORE_UNLOAD, () => {
          i10.fire(t11);
        })), n10.fire(o10), a11;
      },
      getWindows() {
        return e10.values();
      },
      getWindowsCount() {
        return e10.size;
      },
      getWindowId(e11) {
        return e11.vscodeWindowId;
      },
      hasWindow(t11) {
        return e10.has(t11);
      },
      getWindowById: a10,
      getWindow(e11) {
        var _a3;
        let t11 = e11;
        if ((_a3 = t11 == null ? void 0 : t11.ownerDocument) == null ? void 0 : _a3.defaultView) return t11.ownerDocument.defaultView.window;
        let n11 = e11;
        return (n11 == null ? void 0 : n11.view) ? n11.view.window : os;
      },
      getDocument(e11) {
        let t11 = e11;
        return R(t11).document;
      }
    };
  }());
  Zu = function(e10) {
    for (; e10.firstChild; ) e10.firstChild.remove();
  };
  var Qu = class {
    constructor(e10, t10, n10, r10) {
      this._node = e10, this._type = t10, this._handler = n10, this._options = r10 || false, this._node.addEventListener(this._type, this._handler, this._options);
    }
    dispose() {
      this._handler && (this._node.removeEventListener(this._type, this._handler, this._options), this._node = null, this._handler = null);
    }
  };
  z = function(e10, t10, n10, r10) {
    return new Qu(e10, t10, n10, r10);
  };
  function $u(e10, t10) {
    return function(n10) {
      return t10(new Kc(e10, n10));
    };
  }
  function ed(e10) {
    return function(t10) {
      return e10(new Hc(t10));
    };
  }
  td = function(e10, t10, n10, r10) {
    let i10 = n10;
    return t10 === `click` || t10 === `mousedown` || t10 === `contextmenu` ? i10 = $u(R(e10), n10) : (t10 === `keydown` || t10 === `keypress` || t10 === `keyup`) && (i10 = ed(n10)), z(e10, t10, i10, r10);
  };
  nd = function(e10, t10, n10) {
    let r10 = $u(R(e10), t10);
    return rd(e10, r10, n10);
  };
  function rd(e10, t10, n10) {
    return z(e10, bt && Ac.pointerEvents ? B.POINTER_DOWN : B.MOUSE_DOWN, t10, n10);
  }
  id = function(e10, t10, n10) {
    return ul(e10, t10, n10);
  };
  ad = class extends dl {
    constructor(e10, t10) {
      super(e10, t10);
    }
  };
  let sd;
  var cd = class extends sl {
    constructor(e10) {
      super(), this.defaultTarget = e10 && R(e10);
    }
    cancelAndSet(e10, t10, n10) {
      return super.cancelAndSet(e10, t10, n10 ?? this.defaultTarget);
    }
  }, ld = class {
    constructor(e10, t10 = 0) {
      this._runner = e10, this.priority = t10, this._canceled = false;
    }
    dispose() {
      this._canceled = true;
    }
    execute() {
      if (!this._canceled) try {
        this._runner();
      } catch (e10) {
        gr(e10);
      }
    }
    static sort(e10, t10) {
      return t10.priority - e10.priority;
    }
  };
  (function() {
    let e10 = /* @__PURE__ */ new Map(), t10 = /* @__PURE__ */ new Map(), n10 = /* @__PURE__ */ new Map(), r10 = /* @__PURE__ */ new Map(), i10 = (i11) => {
      n10.set(i11, false);
      let a10 = e10.get(i11) ?? [];
      for (t10.set(i11, a10), e10.set(i11, []), r10.set(i11, true); a10.length > 0; ) {
        a10.sort(ld.sort);
        let e11 = a10.shift();
        e11.execute();
      }
      r10.set(i11, false);
    };
    sd = (t11, r11, a10 = 0) => {
      let o10 = Ku(t11), s10 = new ld(r11, a10), c10 = e10.get(o10);
      return c10 || (c10 = [], e10.set(o10, c10)), c10.push(s10), n10.get(o10) || (n10.set(o10, true), t11.requestAnimationFrame(() => i10(o10))), s10;
    }, od = (e11, n11, i11) => {
      let a10 = Ku(e11);
      if (r10.get(a10)) {
        let e12 = new ld(n11, i11), r11 = t10.get(a10);
        return r11 || (r11 = [], t10.set(a10, r11)), r11.push(e12), e12;
      } else return sd(e11, n11, i11);
    };
  })();
  ud = function(e10) {
    return R(e10).getComputedStyle(e10, null);
  };
  dd = function(e10, t10) {
    let n10 = R(e10), r10 = n10.document;
    if (e10 !== r10.body) return new pd(e10.clientWidth, e10.clientHeight);
    if (bt && (n10 == null ? void 0 : n10.visualViewport)) return new pd(n10.visualViewport.width, n10.visualViewport.height);
    if ((n10 == null ? void 0 : n10.innerWidth) && n10.innerHeight) return new pd(n10.innerWidth, n10.innerHeight);
    if (r10.body && r10.body.clientWidth && r10.body.clientHeight) return new pd(r10.body.clientWidth, r10.body.clientHeight);
    if (r10.documentElement && r10.documentElement.clientWidth && r10.documentElement.clientHeight) return new pd(r10.documentElement.clientWidth, r10.documentElement.clientHeight);
    if (t10) return dd(t10);
    throw Error(`Unable to figure out browser width and height`);
  };
  let fd;
  fd = class e10 {
    static convertToPixels(e11, t10) {
      return parseFloat(t10) || 0;
    }
    static getDimension(t10, n10, r10) {
      let i10 = ud(t10), a10 = i10 ? i10.getPropertyValue(n10) : `0`;
      return e10.convertToPixels(t10, a10);
    }
    static getBorderLeftWidth(t10) {
      return e10.getDimension(t10, `border-left-width`, `borderLeftWidth`);
    }
    static getBorderRightWidth(t10) {
      return e10.getDimension(t10, `border-right-width`, `borderRightWidth`);
    }
    static getBorderTopWidth(t10) {
      return e10.getDimension(t10, `border-top-width`, `borderTopWidth`);
    }
    static getBorderBottomWidth(t10) {
      return e10.getDimension(t10, `border-bottom-width`, `borderBottomWidth`);
    }
    static getPaddingLeft(t10) {
      return e10.getDimension(t10, `padding-left`, `paddingLeft`);
    }
    static getPaddingRight(t10) {
      return e10.getDimension(t10, `padding-right`, `paddingRight`);
    }
    static getPaddingTop(t10) {
      return e10.getDimension(t10, `padding-top`, `paddingTop`);
    }
    static getPaddingBottom(t10) {
      return e10.getDimension(t10, `padding-bottom`, `paddingBottom`);
    }
    static getMarginLeft(t10) {
      return e10.getDimension(t10, `margin-left`, `marginLeft`);
    }
    static getMarginTop(t10) {
      return e10.getDimension(t10, `margin-top`, `marginTop`);
    }
    static getMarginRight(t10) {
      return e10.getDimension(t10, `margin-right`, `marginRight`);
    }
    static getMarginBottom(t10) {
      return e10.getDimension(t10, `margin-bottom`, `marginBottom`);
    }
  };
  pd = (_y2 = class {
    constructor(e10, t10) {
      this.width = e10, this.height = t10;
    }
    with(t10 = this.width, n10 = this.height) {
      return t10 !== this.width || n10 !== this.height ? new _y2(t10, n10) : this;
    }
    static is(e10) {
      return typeof e10 == `object` && typeof e10.height == `number` && typeof e10.width == `number`;
    }
    static lift(t10) {
      return t10 instanceof _y2 ? t10 : new _y2(t10.width, t10.height);
    }
    static equals(e10, t10) {
      return e10 === t10 ? true : !e10 || !t10 ? false : e10.width === t10.width && e10.height === t10.height;
    }
  }, _y2.None = new _y2(0, 0), _y2);
  md = function(e10) {
    let t10 = e10.offsetParent, n10 = e10.offsetTop, r10 = e10.offsetLeft;
    for (; (e10 = e10.parentNode) !== null && e10 !== e10.ownerDocument.body && e10 !== e10.ownerDocument.documentElement; ) {
      n10 -= e10.scrollTop;
      let i10 = Td(e10) ? null : ud(e10);
      i10 && (r10 -= i10.direction === `rtl` ? -e10.scrollLeft : e10.scrollLeft), e10 === t10 && (r10 += fd.getBorderLeftWidth(e10), n10 += fd.getBorderTopWidth(e10), n10 += e10.offsetTop, r10 += e10.offsetLeft, t10 = e10.offsetParent);
    }
    return {
      left: r10,
      top: n10
    };
  };
  hd = function(e10, t10, n10) {
    typeof t10 == `number` && (e10.style.width = `${t10}px`), typeof n10 == `number` && (e10.style.height = `${n10}px`);
  };
  gd = function(e10) {
    let t10 = e10.getBoundingClientRect(), n10 = R(e10);
    return {
      left: t10.left + n10.scrollX,
      top: t10.top + n10.scrollY,
      width: t10.width,
      height: t10.height
    };
  };
  function _d(e10) {
    let t10 = e10, n10 = 1;
    do {
      let e11 = ud(t10).zoom;
      e11 != null && e11 !== `1` && (n10 *= e11), t10 = t10.parentElement;
    } while (t10 !== null && t10 !== t10.ownerDocument.documentElement);
    return n10;
  }
  vd = function(e10) {
    let t10 = fd.getMarginLeft(e10) + fd.getMarginRight(e10);
    return e10.offsetWidth + t10;
  };
  function yd(e10) {
    let t10 = fd.getBorderLeftWidth(e10) + fd.getBorderRightWidth(e10), n10 = fd.getPaddingLeft(e10) + fd.getPaddingRight(e10);
    return e10.offsetWidth - t10 - n10;
  }
  function bd(e10) {
    let t10 = fd.getBorderTopWidth(e10) + fd.getBorderBottomWidth(e10), n10 = fd.getPaddingTop(e10) + fd.getPaddingBottom(e10);
    return e10.offsetHeight - t10 - n10;
  }
  xd = function(e10) {
    let t10 = fd.getMarginTop(e10) + fd.getMarginBottom(e10);
    return e10.offsetHeight + t10;
  };
  Sd = function(e10, t10) {
    return !!(t10 == null ? void 0 : t10.contains(e10));
  };
  function Cd(e10, t10, n10) {
    for (; e10 && e10.nodeType === e10.ELEMENT_NODE; ) {
      if (e10.classList.contains(t10)) return e10;
      if (n10) {
        if (typeof n10 == `string`) {
          if (e10.classList.contains(n10)) return null;
        } else if (e10 === n10) return null;
      }
      e10 = e10.parentNode;
    }
    return null;
  }
  function wd(e10, t10, n10) {
    return !!Cd(e10, t10, n10);
  }
  function Td(e10) {
    return e10 && !!e10.host && !!e10.mode;
  }
  function Ed(e10) {
    return !!Dd(e10);
  }
  Dd = function(e10) {
    var _a3;
    for (; e10.parentNode; ) {
      if (e10 === ((_a3 = e10.ownerDocument) == null ? void 0 : _a3.body)) return null;
      e10 = e10.parentNode;
    }
    return Td(e10) ? e10 : null;
  };
  Od = function() {
    let e10 = jd().activeElement;
    for (; e10 == null ? void 0 : e10.shadowRoot; ) e10 = e10.shadowRoot.activeElement;
    return e10;
  };
  kd = function(e10) {
    return Od() === e10;
  };
  function Ad(e10) {
    return Sd(Od(), e10);
  }
  jd = function() {
    if (Gu() <= 1) return os.document;
    let e10 = Array.from(Wu()).map(({ window: e11 }) => e11.document);
    return e10.find((e11) => e11.hasFocus()) ?? os.document;
  };
  function Md() {
    var _a3;
    let e10 = jd();
    return ((_a3 = e10.defaultView) == null ? void 0 : _a3.window) ?? os;
  }
  const Nd = /* @__PURE__ */ new Map();
  Pd = function() {
    return new Fd();
  };
  var Fd = class {
    constructor() {
      this._currentCssStyle = ``, this._styleSheet = void 0;
    }
    setStyle(e10) {
      e10 !== this._currentCssStyle && (this._currentCssStyle = e10, this._styleSheet ? this._styleSheet.innerText = e10 : this._styleSheet = Id(os.document.head, (t10) => t10.innerText = e10));
    }
    dispose() {
      this._styleSheet && (this._styleSheet.remove(), this._styleSheet = void 0);
    }
  };
  function Id(e10 = os.document.head, t10, n10) {
    let r10 = document.createElement(`style`);
    if (r10.type = `text/css`, r10.media = `screen`, t10 == null ? void 0 : t10(r10), e10.appendChild(r10), n10 && n10.add(k(() => r10.remove())), e10 === os.document.head) {
      let e11 = /* @__PURE__ */ new Set();
      Nd.set(r10, e11);
      for (let { window: t11, disposables: i10 } of Wu()) {
        if (t11 === os) continue;
        let a10 = i10.add(Ld(r10, e11, t11));
        n10 == null ? void 0 : n10.add(a10);
      }
    }
    return r10;
  }
  function Ld(e10, t10, n10) {
    var _a3, _b3;
    let r10 = new A(), i10 = e10.cloneNode(true);
    n10.document.head.appendChild(i10), r10.add(k(() => i10.remove()));
    for (let t11 of Vd(e10)) (_b3 = i10.sheet) == null ? void 0 : _b3.insertRule(t11.cssText, (_a3 = i10.sheet) == null ? void 0 : _a3.cssRules.length);
    return r10.add(Rd.observe(e10, r10, {
      childList: true
    })(() => {
      i10.textContent = e10.textContent;
    })), t10.add(i10), r10.add(k(() => t10.delete(i10))), r10;
  }
  const Rd = new class {
    constructor() {
      this.mutationObservers = /* @__PURE__ */ new Map();
    }
    observe(e10, t10, n10) {
      let r10 = this.mutationObservers.get(e10);
      r10 || (r10 = /* @__PURE__ */ new Map(), this.mutationObservers.set(e10, r10));
      let i10 = Mu(n10), a10 = r10.get(i10);
      if (a10) a10.users += 1;
      else {
        let o10 = new N(), s10 = new MutationObserver((e11) => o10.fire(e11));
        s10.observe(e10, n10);
        let c10 = a10 = {
          users: 1,
          observer: s10,
          onDidMutate: o10.event
        };
        t10.add(k(() => {
          --c10.users, c10.users === 0 && (o10.dispose(), s10.disconnect(), r10 == null ? void 0 : r10.delete(i10), (r10 == null ? void 0 : r10.size) === 0 && this.mutationObservers.delete(e10));
        })), r10.set(i10, a10);
      }
      return a10.onDidMutate;
    }
  }();
  let zd = null;
  function Bd() {
    return zd || (zd = Id()), zd;
  }
  function Vd(e10) {
    var _a3, _b3;
    return ((_a3 = e10 == null ? void 0 : e10.sheet) == null ? void 0 : _a3.rules) ? e10.sheet.rules : ((_b3 = e10 == null ? void 0 : e10.sheet) == null ? void 0 : _b3.cssRules) ? e10.sheet.cssRules : [];
  }
  Hd = function(e10, t10, n10 = Bd()) {
    var _a3;
    if (!(!n10 || !t10)) {
      (_a3 = n10.sheet) == null ? void 0 : _a3.insertRule(`${e10} {${t10}}`, 0);
      for (let r10 of Nd.get(n10) ?? []) Hd(e10, t10, r10);
    }
  };
  Ud = function(e10, t10 = Bd()) {
    var _a3;
    if (!t10) return;
    let n10 = Vd(t10), r10 = [];
    for (let t11 = 0; t11 < n10.length; t11++) {
      let i10 = n10[t11];
      Wd(i10) && i10.selectorText.indexOf(e10) !== -1 && r10.push(t11);
    }
    for (let e11 = r10.length - 1; e11 >= 0; e11--) (_a3 = t10.sheet) == null ? void 0 : _a3.deleteRule(r10[e11]);
    for (let n11 of Nd.get(t10) ?? []) Ud(e10, n11);
  };
  function Wd(e10) {
    return typeof e10.selectorText == `string`;
  }
  Gd = function(e10) {
    return e10 instanceof HTMLElement || e10 instanceof R(e10).HTMLElement;
  };
  function Kd(e10) {
    return e10 instanceof HTMLAnchorElement || e10 instanceof R(e10).HTMLAnchorElement;
  }
  function qd(e10) {
    return e10 instanceof SVGElement || e10 instanceof R(e10).SVGElement;
  }
  function Jd(e10) {
    return e10 instanceof MouseEvent || e10 instanceof R(e10).MouseEvent;
  }
  function Yd(e10) {
    return e10 instanceof KeyboardEvent || e10 instanceof R(e10).KeyboardEvent;
  }
  B = {
    CLICK: `click`,
    AUXCLICK: `auxclick`,
    DBLCLICK: `dblclick`,
    MOUSE_UP: `mouseup`,
    MOUSE_DOWN: `mousedown`,
    MOUSE_OVER: `mouseover`,
    MOUSE_MOVE: `mousemove`,
    MOUSE_OUT: `mouseout`,
    MOUSE_ENTER: `mouseenter`,
    MOUSE_LEAVE: `mouseleave`,
    MOUSE_WHEEL: `wheel`,
    POINTER_UP: `pointerup`,
    POINTER_DOWN: `pointerdown`,
    POINTER_MOVE: `pointermove`,
    POINTER_LEAVE: `pointerleave`,
    CONTEXT_MENU: `contextmenu`,
    WHEEL: `wheel`,
    KEY_DOWN: `keydown`,
    KEY_PRESS: `keypress`,
    KEY_UP: `keyup`,
    LOAD: `load`,
    BEFORE_UNLOAD: `beforeunload`,
    UNLOAD: `unload`,
    PAGE_SHOW: `pageshow`,
    PAGE_HIDE: `pagehide`,
    PASTE: `paste`,
    ABORT: `abort`,
    ERROR: `error`,
    RESIZE: `resize`,
    SCROLL: `scroll`,
    FULLSCREEN_CHANGE: `fullscreenchange`,
    WK_FULLSCREEN_CHANGE: `webkitfullscreenchange`,
    SELECT: `select`,
    CHANGE: `change`,
    SUBMIT: `submit`,
    RESET: `reset`,
    FOCUS: `focus`,
    FOCUS_IN: `focusin`,
    FOCUS_OUT: `focusout`,
    BLUR: `blur`,
    INPUT: `input`,
    STORAGE: `storage`,
    DRAG_START: `dragstart`,
    DRAG: `drag`,
    DRAG_ENTER: `dragenter`,
    DRAG_LEAVE: `dragleave`,
    DRAG_OVER: `dragover`,
    DROP: `drop`,
    DRAG_END: `dragend`,
    ANIMATION_START: Cc ? `webkitAnimationStart` : `animationstart`,
    ANIMATION_END: Cc ? `webkitAnimationEnd` : `animationend`,
    ANIMATION_ITERATION: Cc ? `webkitAnimationIteration` : `animationiteration`
  };
  function Xd(e10) {
    let t10 = e10;
    return !!(t10 && typeof t10.preventDefault == `function` && typeof t10.stopPropagation == `function`);
  }
  Zd = {
    stop: (e10, t10) => (e10.preventDefault(), t10 && e10.stopPropagation(), e10)
  };
  function Qd(e10) {
    let t10 = [];
    for (let n10 = 0; e10 && e10.nodeType === e10.ELEMENT_NODE; n10++) t10[n10] = e10.scrollTop, e10 = e10.parentNode;
    return t10;
  }
  function $d(e10, t10) {
    for (let n10 = 0; e10 && e10.nodeType === e10.ELEMENT_NODE; n10++) e10.scrollTop !== t10[n10] && (e10.scrollTop = t10[n10]), e10 = e10.parentNode;
  }
  var ef = class e10 extends j {
    static hasFocusWithin(e11) {
      if (Gd(e11)) {
        let t10 = Dd(e11), n10 = t10 ? t10.activeElement : e11.ownerDocument.activeElement;
        return Sd(n10, e11);
      } else {
        let t10 = e11;
        return Sd(t10.document.activeElement, t10.document);
      }
    }
    constructor(t10) {
      super(), this._onDidFocus = this._register(new N()), this.onDidFocus = this._onDidFocus.event, this._onDidBlur = this._register(new N()), this.onDidBlur = this._onDidBlur.event;
      let n10 = e10.hasFocusWithin(t10), r10 = false, i10 = () => {
        r10 = false, n10 || (n10 = true, this._onDidFocus.fire());
      }, a10 = () => {
        n10 && (r10 = true, (Gd(t10) ? R(t10) : t10).setTimeout(() => {
          r10 && (r10 = false, n10 = false, this._onDidBlur.fire());
        }, 0));
      };
      this._refreshStateHandler = () => {
        let r11 = e10.hasFocusWithin(t10);
        r11 !== n10 && (n10 ? a10() : i10());
      }, this._register(z(t10, B.FOCUS, i10, true)), this._register(z(t10, B.BLUR, a10, true)), Gd(t10) && (this._register(z(t10, B.FOCUS_IN, () => this._refreshStateHandler())), this._register(z(t10, B.FOCUS_OUT, () => this._refreshStateHandler())));
    }
  };
  tf = function(e10) {
    return new ef(e10);
  };
  function nf(e10, t10) {
    return e10.after(t10), t10;
  }
  V = function(e10, ...t10) {
    if (e10.append(...t10), t10.length === 1 && typeof t10[0] != `string`) return t10[0];
  };
  function rf(e10, t10) {
    return e10.insertBefore(t10, e10.firstChild), t10;
  }
  af = function(e10, ...t10) {
    e10.innerText = ``, V(e10, ...t10);
  };
  const sf = /([\w\-]+)?(#([\w\-]+))?((\.([\w\-]+))*)/;
  var cf;
  (function(e10) {
    e10.HTML = `http://www.w3.org/1999/xhtml`, e10.SVG = `http://www.w3.org/2000/svg`;
  })(cf || (cf = {}));
  function lf(e10, t10, n10, ...r10) {
    let i10 = sf.exec(t10);
    if (!i10) throw Error(`Bad use of emmet`);
    let a10 = i10[1] || `div`, o10;
    return o10 = e10 === cf.HTML ? document.createElement(a10) : document.createElementNS(e10, a10), i10[3] && (o10.id = i10[3]), i10[4] && (o10.className = i10[4].replace(/\./g, ` `).trim()), n10 && Object.entries(n10).forEach(([e11, t11]) => {
      t11 !== void 0 && (/^on\w+$/.test(e11) ? o10[e11] = t11 : e11 === `selected` ? t11 && o10.setAttribute(e11, `true`) : o10.setAttribute(e11, t11));
    }), o10.append(...r10), o10;
  }
  H = function(e10, t10, ...n10) {
    return lf(cf.HTML, e10, t10, ...n10);
  };
  H.SVG = function(e10, t10, ...n10) {
    return lf(cf.SVG, e10, t10, ...n10);
  };
  uf = function(e10, ...t10) {
    e10 ? df(...t10) : ff(...t10);
  };
  df = function(...e10) {
    for (let t10 of e10) t10.style.display = ``, t10.removeAttribute(`aria-hidden`);
  };
  ff = function(...e10) {
    for (let t10 of e10) t10.style.display = `none`, t10.setAttribute(`aria-hidden`, `true`);
  };
  function pf(e10, t10) {
    let n10 = e10.devicePixelRatio * t10;
    return Math.max(1, Math.floor(n10)) / e10.devicePixelRatio;
  }
  function mf(e10) {
    os.open(e10, `_blank`, `noopener`);
  }
  function hf(e10, t10) {
    let n10 = () => {
      t10(), r10 = sd(e10, n10);
    }, r10 = sd(e10, n10);
    return k(() => r10.dispose());
  }
  Du.setPreferredWebSchema(/^https:/.test(os.location.href) ? `https` : `http`);
  function gf(e10) {
    return e10 ? `url('${Au.uriToBrowserUri(e10).toString(true).replace(/'/g, `%27`)}')` : `url('')`;
  }
  function _f(e10) {
    return `'${e10.replace(/'/g, `%27`)}'`;
  }
  function vf(e10, t10) {
    if (e10 !== void 0) {
      let n10 = e10.match(/^\s*var\((.+)\)$/);
      if (n10) {
        let e11 = n10[1].split(`,`, 2);
        return e11.length === 2 && (t10 = vf(e11[1].trim(), t10)), `var(${e11[0]}, ${t10})`;
      }
      return e10;
    }
    return t10;
  }
  function yf(e10, t10 = false) {
    let n10 = document.createElement(`a`);
    return bu(`afterSanitizeAttributes`, (r10) => {
      for (let i10 of [
        `href`,
        `src`
      ]) if (r10.hasAttribute(i10)) {
        let a10 = r10.getAttribute(i10);
        if (i10 === `href` && a10.startsWith(`#`)) continue;
        if (n10.href = a10, !e10.includes(n10.protocol.replace(/:$/, ``))) {
          if (t10 && i10 === `src` && n10.href.startsWith(`data:`)) continue;
          r10.removeAttribute(i10);
        }
      }
    }), k(() => {
      xu(`afterSanitizeAttributes`);
    });
  }
  const bf = Object.freeze(`a.abbr.b.bdo.blockquote.br.caption.cite.code.col.colgroup.dd.del.details.dfn.div.dl.dt.em.figcaption.figure.h1.h2.h3.h4.h5.h6.hr.i.img.input.ins.kbd.label.li.mark.ol.p.pre.q.rp.rt.ruby.samp.small.small.source.span.strike.strong.sub.summary.sup.table.tbody.td.tfoot.th.thead.time.tr.tt.u.ul.var.video.wbr`.split(`.`)), dee = Object.freeze({
    ALLOWED_TAGS: [
      `a`,
      `button`,
      `blockquote`,
      `code`,
      `div`,
      `h1`,
      `h2`,
      `h3`,
      `h4`,
      `h5`,
      `h6`,
      `hr`,
      `input`,
      `label`,
      `li`,
      `p`,
      `pre`,
      `select`,
      `small`,
      `span`,
      `strong`,
      `textarea`,
      `ul`,
      `ol`
    ],
    ALLOWED_ATTR: [
      `href`,
      `data-href`,
      `data-command`,
      `target`,
      `title`,
      `name`,
      `src`,
      `alt`,
      `class`,
      `id`,
      `role`,
      `tabindex`,
      `style`,
      `data-code`,
      `width`,
      `height`,
      `align`,
      `x-dispatch`,
      `required`,
      `checked`,
      `placeholder`,
      `type`,
      `start`
    ],
    RETURN_DOM: false,
    RETURN_DOM_FRAGMENT: false,
    RETURN_TRUSTED_TYPE: true
  });
  let Sf;
  xf = class e10 extends N {
    constructor() {
      super(), this._subscriptions = new A(), this._keyStatus = {
        altKey: false,
        shiftKey: false,
        ctrlKey: false,
        metaKey: false
      }, this._subscriptions.add(M.runAndSubscribe(Ju, ({ window: e11, disposables: t10 }) => this.registerListeners(e11, t10), {
        window: os,
        disposables: this._subscriptions
      }));
    }
    registerListeners(e11, t10) {
      t10.add(z(e11, `keydown`, (e12) => {
        if (e12.defaultPrevented) return;
        let t11 = new Hc(e12);
        if (!(t11.keyCode === 6 && e12.repeat)) {
          if (e12.altKey && !this._keyStatus.altKey) this._keyStatus.lastKeyPressed = `alt`;
          else if (e12.ctrlKey && !this._keyStatus.ctrlKey) this._keyStatus.lastKeyPressed = `ctrl`;
          else if (e12.metaKey && !this._keyStatus.metaKey) this._keyStatus.lastKeyPressed = `meta`;
          else if (e12.shiftKey && !this._keyStatus.shiftKey) this._keyStatus.lastKeyPressed = `shift`;
          else if (t11.keyCode !== 6) this._keyStatus.lastKeyPressed = void 0;
          else return;
          this._keyStatus.altKey = e12.altKey, this._keyStatus.ctrlKey = e12.ctrlKey, this._keyStatus.metaKey = e12.metaKey, this._keyStatus.shiftKey = e12.shiftKey, this._keyStatus.lastKeyPressed && (this._keyStatus.event = e12, this.fire(this._keyStatus));
        }
      }, true)), t10.add(z(e11, `keyup`, (e12) => {
        e12.defaultPrevented || (!e12.altKey && this._keyStatus.altKey ? this._keyStatus.lastKeyReleased = `alt` : !e12.ctrlKey && this._keyStatus.ctrlKey ? this._keyStatus.lastKeyReleased = `ctrl` : !e12.metaKey && this._keyStatus.metaKey ? this._keyStatus.lastKeyReleased = `meta` : !e12.shiftKey && this._keyStatus.shiftKey ? this._keyStatus.lastKeyReleased = `shift` : this._keyStatus.lastKeyReleased = void 0, this._keyStatus.lastKeyPressed !== this._keyStatus.lastKeyReleased && (this._keyStatus.lastKeyPressed = void 0), this._keyStatus.altKey = e12.altKey, this._keyStatus.ctrlKey = e12.ctrlKey, this._keyStatus.metaKey = e12.metaKey, this._keyStatus.shiftKey = e12.shiftKey, this._keyStatus.lastKeyReleased && (this._keyStatus.event = e12, this.fire(this._keyStatus)));
      }, true)), t10.add(z(e11.document.body, `mousedown`, () => {
        this._keyStatus.lastKeyPressed = void 0;
      }, true)), t10.add(z(e11.document.body, `mouseup`, () => {
        this._keyStatus.lastKeyPressed = void 0;
      }, true)), t10.add(z(e11.document.body, `mousemove`, (e12) => {
        e12.buttons && (this._keyStatus.lastKeyPressed = void 0);
      }, true)), t10.add(z(e11, `blur`, () => {
        this.resetKeyStatus();
      }));
    }
    get keyStatus() {
      return this._keyStatus;
    }
    resetKeyStatus() {
      this.doResetKeyStatus(), this.fire(this._keyStatus);
    }
    doResetKeyStatus() {
      this._keyStatus = {
        altKey: false,
        shiftKey: false,
        ctrlKey: false,
        metaKey: false
      };
    }
    static getInstance() {
      return e10.instance || (e10.instance = new e10()), e10.instance;
    }
    dispose() {
      super.dispose(), this._subscriptions.dispose();
    }
  };
  Sf = class extends j {
    constructor(e10, t10) {
      super(), this.element = e10, this.callbacks = t10, this.counter = 0, this.dragStartTime = 0, this.registerListeners();
    }
    registerListeners() {
      this.callbacks.onDragStart && this._register(z(this.element, B.DRAG_START, (e10) => {
        var _a3, _b3;
        (_b3 = (_a3 = this.callbacks).onDragStart) == null ? void 0 : _b3.call(_a3, e10);
      })), this.callbacks.onDrag && this._register(z(this.element, B.DRAG, (e10) => {
        var _a3, _b3;
        (_b3 = (_a3 = this.callbacks).onDrag) == null ? void 0 : _b3.call(_a3, e10);
      })), this._register(z(this.element, B.DRAG_ENTER, (e10) => {
        var _a3, _b3;
        this.counter++, this.dragStartTime = e10.timeStamp, (_b3 = (_a3 = this.callbacks).onDragEnter) == null ? void 0 : _b3.call(_a3, e10);
      })), this._register(z(this.element, B.DRAG_OVER, (e10) => {
        var _a3, _b3;
        e10.preventDefault(), (_b3 = (_a3 = this.callbacks).onDragOver) == null ? void 0 : _b3.call(_a3, e10, e10.timeStamp - this.dragStartTime);
      })), this._register(z(this.element, B.DRAG_LEAVE, (e10) => {
        var _a3, _b3;
        this.counter--, this.counter === 0 && (this.dragStartTime = 0, (_b3 = (_a3 = this.callbacks).onDragLeave) == null ? void 0 : _b3.call(_a3, e10));
      })), this._register(z(this.element, B.DRAG_END, (e10) => {
        var _a3, _b3;
        this.counter = 0, this.dragStartTime = 0, (_b3 = (_a3 = this.callbacks).onDragEnd) == null ? void 0 : _b3.call(_a3, e10);
      })), this._register(z(this.element, B.DROP, (e10) => {
        var _a3, _b3;
        this.counter = 0, this.dragStartTime = 0, (_b3 = (_a3 = this.callbacks).onDrop) == null ? void 0 : _b3.call(_a3, e10);
      }));
    }
  };
  const Cf = /(?<tag>[\w\-]+)?(?:#(?<id>[\w\-]+))?(?<class>(?:\.(?:[\w\-]+))*)(?:@(?<name>(?:[\w\_])+))?/;
  wf = function(e10, ...t10) {
    let n10, r10;
    Array.isArray(t10[0]) ? (n10 = {}, r10 = t10[0]) : (n10 = t10[0] || {}, r10 = t10[1]);
    let i10 = Cf.exec(e10);
    if (!i10 || !i10.groups) throw Error(`Bad use of h`);
    let a10 = i10.groups.tag || `div`, o10 = document.createElement(a10);
    i10.groups.id && (o10.id = i10.groups.id);
    let s10 = [];
    if (i10.groups.class) for (let e11 of i10.groups.class.split(`.`)) e11 !== `` && s10.push(e11);
    if (n10.className !== void 0) for (let e11 of n10.className.split(`.`)) e11 !== `` && s10.push(e11);
    s10.length > 0 && (o10.className = s10.join(` `));
    let c10 = {};
    if (i10.groups.name && (c10[i10.groups.name] = o10), r10) for (let e11 of r10) Gd(e11) ? o10.appendChild(e11) : typeof e11 == `string` ? o10.append(e11) : `root` in e11 && (Object.assign(c10, e11), o10.appendChild(e11.root));
    for (let [e11, t11] of Object.entries(n10)) if (e11 === `className`) continue;
    else if (e11 === `style`) for (let [e12, n11] of Object.entries(t11)) o10.style.setProperty(Ef(e12), typeof n11 == `number` ? n11 + `px` : `` + n11);
    else e11 === `tabIndex` ? o10.tabIndex = t11 : o10.setAttribute(Ef(e11), t11.toString());
    return c10.root = o10, c10;
  };
  Tf = function(e10, ...t10) {
    let n10, r10;
    Array.isArray(t10[0]) ? (n10 = {}, r10 = t10[0]) : (n10 = t10[0] || {}, r10 = t10[1]);
    let i10 = Cf.exec(e10);
    if (!i10 || !i10.groups) throw Error(`Bad use of h`);
    let a10 = i10.groups.tag || `div`, o10 = document.createElementNS(`http://www.w3.org/2000/svg`, a10);
    i10.groups.id && (o10.id = i10.groups.id);
    let s10 = [];
    if (i10.groups.class) for (let e11 of i10.groups.class.split(`.`)) e11 !== `` && s10.push(e11);
    if (n10.className !== void 0) for (let e11 of n10.className.split(`.`)) e11 !== `` && s10.push(e11);
    s10.length > 0 && (o10.className = s10.join(` `));
    let c10 = {};
    if (i10.groups.name && (c10[i10.groups.name] = o10), r10) for (let e11 of r10) Gd(e11) ? o10.appendChild(e11) : typeof e11 == `string` ? o10.append(e11) : `root` in e11 && (Object.assign(c10, e11), o10.appendChild(e11.root));
    for (let [e11, t11] of Object.entries(n10)) if (e11 === `className`) continue;
    else if (e11 === `style`) for (let [e12, n11] of Object.entries(t11)) o10.style.setProperty(Ef(e12), typeof n11 == `number` ? n11 + `px` : `` + n11);
    else e11 === `tabIndex` ? o10.tabIndex = t11 : o10.setAttribute(Ef(e11), t11.toString());
    return c10.root = o10, c10;
  };
  function Ef(e10) {
    return e10.replace(/([a-z])([A-Z])/g, `$1-$2`).toLowerCase();
  }
  var Df = class extends j {
    constructor(e10) {
      super(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._listener = () => this._handleChange(e10, true), this._mediaQueryList = null, this._handleChange(e10, false);
    }
    _handleChange(e10, t10) {
      var _a3;
      (_a3 = this._mediaQueryList) == null ? void 0 : _a3.removeEventListener(`change`, this._listener), this._mediaQueryList = e10.matchMedia(`(resolution: ${e10.devicePixelRatio}dppx)`), this._mediaQueryList.addEventListener(`change`, this._listener), t10 && this._onDidChange.fire();
    }
  }, Of = class extends j {
    get value() {
      return this._value;
    }
    constructor(e10) {
      super(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._value = this._getPixelRatio(e10);
      let t10 = this._register(new Df(e10));
      this._register(t10.onDidChange(() => {
        this._value = this._getPixelRatio(e10), this._onDidChange.fire(this._value);
      }));
    }
    _getPixelRatio(e10) {
      let t10 = document.createElement(`canvas`).getContext(`2d`), n10 = e10.devicePixelRatio || 1, r10 = t10.webkitBackingStorePixelRatio || t10.mozBackingStorePixelRatio || t10.msBackingStorePixelRatio || t10.oBackingStorePixelRatio || t10.backingStorePixelRatio || 1;
      return n10 / r10;
    }
  }, kf = class {
    constructor() {
      this.mapWindowIdToPixelRatioMonitor = /* @__PURE__ */ new Map();
    }
    _getOrCreatePixelRatioMonitor(e10) {
      let t10 = Ku(e10), n10 = this.mapWindowIdToPixelRatioMonitor.get(t10);
      return n10 || (n10 = Ir(new Of(e10)), this.mapWindowIdToPixelRatioMonitor.set(t10, n10), Ir(M.once(Xu)(({ vscodeWindowId: e11 }) => {
        e11 === t10 && (n10 == null ? void 0 : n10.dispose(), this.mapWindowIdToPixelRatioMonitor.delete(t10));
      }))), n10;
    }
    getInstance(e10) {
      return this._getOrCreatePixelRatioMonitor(e10);
    }
  };
  Af = new kf();
  var jf = class {
    constructor(e10) {
      this.domNode = e10, this._maxWidth = ``, this._width = ``, this._height = ``, this._top = ``, this._left = ``, this._bottom = ``, this._right = ``, this._paddingLeft = ``, this._fontFamily = ``, this._fontWeight = ``, this._fontSize = ``, this._fontStyle = ``, this._fontFeatureSettings = ``, this._fontVariationSettings = ``, this._textDecoration = ``, this._lineHeight = ``, this._letterSpacing = ``, this._className = ``, this._display = ``, this._position = ``, this._visibility = ``, this._color = ``, this._backgroundColor = ``, this._layerHint = false, this._contain = `none`, this._boxShadow = ``;
    }
    setMaxWidth(e10) {
      let t10 = Mf(e10);
      this._maxWidth !== t10 && (this._maxWidth = t10, this.domNode.style.maxWidth = this._maxWidth);
    }
    setWidth(e10) {
      let t10 = Mf(e10);
      this._width !== t10 && (this._width = t10, this.domNode.style.width = this._width);
    }
    setHeight(e10) {
      let t10 = Mf(e10);
      this._height !== t10 && (this._height = t10, this.domNode.style.height = this._height);
    }
    setTop(e10) {
      let t10 = Mf(e10);
      this._top !== t10 && (this._top = t10, this.domNode.style.top = this._top);
    }
    setLeft(e10) {
      let t10 = Mf(e10);
      this._left !== t10 && (this._left = t10, this.domNode.style.left = this._left);
    }
    setBottom(e10) {
      let t10 = Mf(e10);
      this._bottom !== t10 && (this._bottom = t10, this.domNode.style.bottom = this._bottom);
    }
    setRight(e10) {
      let t10 = Mf(e10);
      this._right !== t10 && (this._right = t10, this.domNode.style.right = this._right);
    }
    setPaddingLeft(e10) {
      let t10 = Mf(e10);
      this._paddingLeft !== t10 && (this._paddingLeft = t10, this.domNode.style.paddingLeft = this._paddingLeft);
    }
    setFontFamily(e10) {
      this._fontFamily !== e10 && (this._fontFamily = e10, this.domNode.style.fontFamily = this._fontFamily);
    }
    setFontWeight(e10) {
      this._fontWeight !== e10 && (this._fontWeight = e10, this.domNode.style.fontWeight = this._fontWeight);
    }
    setFontSize(e10) {
      let t10 = Mf(e10);
      this._fontSize !== t10 && (this._fontSize = t10, this.domNode.style.fontSize = this._fontSize);
    }
    setFontStyle(e10) {
      this._fontStyle !== e10 && (this._fontStyle = e10, this.domNode.style.fontStyle = this._fontStyle);
    }
    setFontFeatureSettings(e10) {
      this._fontFeatureSettings !== e10 && (this._fontFeatureSettings = e10, this.domNode.style.fontFeatureSettings = this._fontFeatureSettings);
    }
    setFontVariationSettings(e10) {
      this._fontVariationSettings !== e10 && (this._fontVariationSettings = e10, this.domNode.style.fontVariationSettings = this._fontVariationSettings);
    }
    setTextDecoration(e10) {
      this._textDecoration !== e10 && (this._textDecoration = e10, this.domNode.style.textDecoration = this._textDecoration);
    }
    setLineHeight(e10) {
      let t10 = Mf(e10);
      this._lineHeight !== t10 && (this._lineHeight = t10, this.domNode.style.lineHeight = this._lineHeight);
    }
    setLetterSpacing(e10) {
      let t10 = Mf(e10);
      this._letterSpacing !== t10 && (this._letterSpacing = t10, this.domNode.style.letterSpacing = this._letterSpacing);
    }
    setClassName(e10) {
      this._className !== e10 && (this._className = e10, this.domNode.className = this._className);
    }
    toggleClassName(e10, t10) {
      this.domNode.classList.toggle(e10, t10), this._className = this.domNode.className;
    }
    setDisplay(e10) {
      this._display !== e10 && (this._display = e10, this.domNode.style.display = this._display);
    }
    setPosition(e10) {
      this._position !== e10 && (this._position = e10, this.domNode.style.position = this._position);
    }
    setVisibility(e10) {
      this._visibility !== e10 && (this._visibility = e10, this.domNode.style.visibility = this._visibility);
    }
    setColor(e10) {
      this._color !== e10 && (this._color = e10, this.domNode.style.color = this._color);
    }
    setBackgroundColor(e10) {
      this._backgroundColor !== e10 && (this._backgroundColor = e10, this.domNode.style.backgroundColor = this._backgroundColor);
    }
    setLayerHinting(e10) {
      this._layerHint !== e10 && (this._layerHint = e10, this.domNode.style.transform = this._layerHint ? `translate3d(0px, 0px, 0px)` : ``);
    }
    setBoxShadow(e10) {
      this._boxShadow !== e10 && (this._boxShadow = e10, this.domNode.style.boxShadow = e10);
    }
    setContain(e10) {
      this._contain !== e10 && (this._contain = e10, this.domNode.style.contain = this._contain);
    }
    setAttribute(e10, t10) {
      this.domNode.setAttribute(e10, t10);
    }
    removeAttribute(e10) {
      this.domNode.removeAttribute(e10);
    }
    appendChild(e10) {
      this.domNode.appendChild(e10.domNode);
    }
    removeChild(e10) {
      this.domNode.removeChild(e10.domNode);
    }
  };
  function Mf(e10) {
    return typeof e10 == `number` ? `${e10}px` : e10;
  }
  function Nf(e10) {
    return new jf(e10);
  }
  Pf = function(e10, t10) {
    e10 instanceof jf ? (e10.setFontFamily(t10.getMassagedFontFamily()), e10.setFontWeight(t10.fontWeight), e10.setFontSize(t10.fontSize), e10.setFontFeatureSettings(t10.fontFeatureSettings), e10.setFontVariationSettings(t10.fontVariationSettings), e10.setLineHeight(t10.lineHeight), e10.setLetterSpacing(t10.letterSpacing)) : (e10.style.fontFamily = t10.getMassagedFontFamily(), e10.style.fontWeight = t10.fontWeight, e10.style.fontSize = t10.fontSize + `px`, e10.style.fontFeatureSettings = t10.fontFeatureSettings, e10.style.fontVariationSettings = t10.fontVariationSettings, e10.style.lineHeight = t10.lineHeight + `px`, e10.style.letterSpacing = t10.letterSpacing + `px`);
  };
  var Ff = class {
    constructor(e10, t10) {
      this.chr = e10, this.type = t10, this.width = 0;
    }
    fulfill(e10) {
      this.width = e10;
    }
  }, If = class e10 {
    constructor(e11, t10) {
      this._bareFontInfo = e11, this._requests = t10, this._container = null, this._testElements = null;
    }
    read(e11) {
      var _a3;
      this._createDomElements(), e11.document.body.appendChild(this._container), this._readFromDomElements(), (_a3 = this._container) == null ? void 0 : _a3.remove(), this._container = null, this._testElements = null;
    }
    _createDomElements() {
      let t10 = document.createElement(`div`);
      t10.style.position = `absolute`, t10.style.top = `-50000px`, t10.style.width = `50000px`;
      let n10 = document.createElement(`div`);
      Pf(n10, this._bareFontInfo), t10.appendChild(n10);
      let r10 = document.createElement(`div`);
      Pf(r10, this._bareFontInfo), r10.style.fontWeight = `bold`, t10.appendChild(r10);
      let i10 = document.createElement(`div`);
      Pf(i10, this._bareFontInfo), i10.style.fontStyle = `italic`, t10.appendChild(i10);
      let a10 = [];
      for (let t11 of this._requests) {
        let o10;
        t11.type === 0 && (o10 = n10), t11.type === 2 && (o10 = r10), t11.type === 1 && (o10 = i10), o10.appendChild(document.createElement(`br`));
        let s10 = document.createElement(`span`);
        e10._render(s10, t11), o10.appendChild(s10), a10.push(s10);
      }
      this._container = t10, this._testElements = a10;
    }
    static _render(e11, t10) {
      if (t10.chr === ` `) {
        let t11 = `\xA0`;
        for (let e12 = 0; e12 < 8; e12++) t11 += t11;
        e11.innerText = t11;
      } else {
        let n10 = t10.chr;
        for (let e12 = 0; e12 < 8; e12++) n10 += n10;
        e11.textContent = n10;
      }
    }
    _readFromDomElements() {
      for (let e11 = 0, t10 = this._requests.length; e11 < t10; e11++) {
        let t11 = this._requests[e11], n10 = this._testElements[e11];
        t11.fulfill(n10.offsetWidth / 256);
      }
    }
  };
  function Lf(e10, t10, n10) {
    let r10 = new If(t10, n10);
    r10.read(e10);
  }
  let zf, Bf;
  Rf = new class {
    constructor() {
      this._zoomLevel = 0, this._onDidChangeZoomLevel = new N(), this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;
    }
    getZoomLevel() {
      return this._zoomLevel;
    }
    setZoomLevel(e10) {
      e10 = Math.min(Math.max(-5, e10), 20), this._zoomLevel !== e10 && (this._zoomLevel = e10, this._onDidChangeZoomLevel.fire(this._zoomLevel));
    }
  }();
  zf = E ? 1.5 : 1.35;
  Bf = 8;
  var Vf = class e10 {
    static createFromValidatedSettings(t10, n10, r10) {
      let i10 = t10.get(49), a10 = t10.get(53), o10 = t10.get(52), s10 = t10.get(51), c10 = t10.get(54), l10 = t10.get(67), u10 = t10.get(64);
      return e10._create(i10, a10, o10, s10, c10, l10, u10, n10, r10);
    }
    static _create(t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      o10 === 0 ? o10 = zf * r10 : o10 < Bf && (o10 *= r10), o10 = Math.round(o10), o10 < Bf && (o10 = Bf);
      let u10 = 1 + (l10 ? 0 : Rf.getZoomLevel() * 0.1);
      if (r10 *= u10, o10 *= u10, a10 === bn.TRANSLATE) if (n10 === `normal` || n10 === `bold`) a10 = bn.OFF;
      else {
        let e11 = parseInt(n10, 10);
        a10 = `'wght' ${e11}`, n10 = `normal`;
      }
      return new e10({
        pixelRatio: c10,
        fontFamily: t10,
        fontWeight: n10,
        fontSize: r10,
        fontFeatureSettings: i10,
        fontVariationSettings: a10,
        lineHeight: o10,
        letterSpacing: s10
      });
    }
    constructor(e11) {
      this._bareFontInfoBrand = void 0, this.pixelRatio = e11.pixelRatio, this.fontFamily = String(e11.fontFamily), this.fontWeight = String(e11.fontWeight), this.fontSize = e11.fontSize, this.fontFeatureSettings = e11.fontFeatureSettings, this.fontVariationSettings = e11.fontVariationSettings, this.lineHeight = e11.lineHeight | 0, this.letterSpacing = e11.letterSpacing;
    }
    getId() {
      return `${this.pixelRatio}-${this.fontFamily}-${this.fontWeight}-${this.fontSize}-${this.fontFeatureSettings}-${this.fontVariationSettings}-${this.lineHeight}-${this.letterSpacing}`;
    }
    getMassagedFontFamily() {
      let t10 = dr.fontFamily, n10 = e10._wrapInQuotes(this.fontFamily);
      return t10 && this.fontFamily !== t10 ? `${n10}, ${t10}` : n10;
    }
    static _wrapInQuotes(e11) {
      return /[,"']/.test(e11) ? e11 : /[+ ]/.test(e11) ? `"${e11}"` : e11;
    }
  };
  const Hf = 2;
  var Uf = class extends Vf {
    constructor(e10, t10) {
      super(e10), this._editorStylingBrand = void 0, this.version = Hf, this.isTrusted = t10, this.isMonospace = e10.isMonospace, this.typicalHalfwidthCharacterWidth = e10.typicalHalfwidthCharacterWidth, this.typicalFullwidthCharacterWidth = e10.typicalFullwidthCharacterWidth, this.canUseHalfwidthRightwardsArrow = e10.canUseHalfwidthRightwardsArrow, this.spaceWidth = e10.spaceWidth, this.middotWidth = e10.middotWidth, this.wsmiddotWidth = e10.wsmiddotWidth, this.maxDigitWidth = e10.maxDigitWidth;
    }
    equals(e10) {
      return this.fontFamily === e10.fontFamily && this.fontWeight === e10.fontWeight && this.fontSize === e10.fontSize && this.fontFeatureSettings === e10.fontFeatureSettings && this.fontVariationSettings === e10.fontVariationSettings && this.lineHeight === e10.lineHeight && this.letterSpacing === e10.letterSpacing && this.typicalHalfwidthCharacterWidth === e10.typicalHalfwidthCharacterWidth && this.typicalFullwidthCharacterWidth === e10.typicalFullwidthCharacterWidth && this.canUseHalfwidthRightwardsArrow === e10.canUseHalfwidthRightwardsArrow && this.spaceWidth === e10.spaceWidth && this.middotWidth === e10.middotWidth && this.wsmiddotWidth === e10.wsmiddotWidth && this.maxDigitWidth === e10.maxDigitWidth;
    }
  }, Wf = class extends j {
    constructor() {
      super(...arguments), this._cache = /* @__PURE__ */ new Map(), this._evictUntrustedReadingsTimeout = -1, this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event;
    }
    dispose() {
      this._evictUntrustedReadingsTimeout !== -1 && (clearTimeout(this._evictUntrustedReadingsTimeout), this._evictUntrustedReadingsTimeout = -1), super.dispose();
    }
    clearAllFontInfos() {
      this._cache.clear(), this._onDidChange.fire();
    }
    _ensureCache(e10) {
      let t10 = Ku(e10), n10 = this._cache.get(t10);
      return n10 || (n10 = new Gf(), this._cache.set(t10, n10)), n10;
    }
    _writeToCache(e10, t10, n10) {
      let r10 = this._ensureCache(e10);
      r10.put(t10, n10), !n10.isTrusted && this._evictUntrustedReadingsTimeout === -1 && (this._evictUntrustedReadingsTimeout = e10.setTimeout(() => {
        this._evictUntrustedReadingsTimeout = -1, this._evictUntrustedReadings(e10);
      }, 5e3));
    }
    _evictUntrustedReadings(e10) {
      let t10 = this._ensureCache(e10), n10 = t10.getValues(), r10 = false;
      for (let e11 of n10) e11.isTrusted || (r10 = true, t10.remove(e11));
      r10 && this._onDidChange.fire();
    }
    readFontInfo(e10, t10) {
      let n10 = this._ensureCache(e10);
      if (!n10.has(t10)) {
        let n11 = this._actualReadFontInfo(e10, t10);
        (n11.typicalHalfwidthCharacterWidth <= 2 || n11.typicalFullwidthCharacterWidth <= 2 || n11.spaceWidth <= 2 || n11.maxDigitWidth <= 2) && (n11 = new Uf({
          pixelRatio: Af.getInstance(e10).value,
          fontFamily: n11.fontFamily,
          fontWeight: n11.fontWeight,
          fontSize: n11.fontSize,
          fontFeatureSettings: n11.fontFeatureSettings,
          fontVariationSettings: n11.fontVariationSettings,
          lineHeight: n11.lineHeight,
          letterSpacing: n11.letterSpacing,
          isMonospace: n11.isMonospace,
          typicalHalfwidthCharacterWidth: Math.max(n11.typicalHalfwidthCharacterWidth, 5),
          typicalFullwidthCharacterWidth: Math.max(n11.typicalFullwidthCharacterWidth, 5),
          canUseHalfwidthRightwardsArrow: n11.canUseHalfwidthRightwardsArrow,
          spaceWidth: Math.max(n11.spaceWidth, 5),
          middotWidth: Math.max(n11.middotWidth, 5),
          wsmiddotWidth: Math.max(n11.wsmiddotWidth, 5),
          maxDigitWidth: Math.max(n11.maxDigitWidth, 5)
        }, false)), this._writeToCache(e10, t10, n11);
      }
      return n10.get(t10);
    }
    _createRequest(e10, t10, n10, r10) {
      let i10 = new Ff(e10, t10);
      return n10.push(i10), r10 == null ? void 0 : r10.push(i10), i10;
    }
    _actualReadFontInfo(e10, t10) {
      let n10 = [], r10 = [], i10 = this._createRequest(`n`, 0, n10, r10), a10 = this._createRequest(`\uFF4D`, 0, n10, null), o10 = this._createRequest(` `, 0, n10, r10), s10 = this._createRequest(`0`, 0, n10, r10), c10 = this._createRequest(`1`, 0, n10, r10), l10 = this._createRequest(`2`, 0, n10, r10), u10 = this._createRequest(`3`, 0, n10, r10), d10 = this._createRequest(`4`, 0, n10, r10), f10 = this._createRequest(`5`, 0, n10, r10), p10 = this._createRequest(`6`, 0, n10, r10), m10 = this._createRequest(`7`, 0, n10, r10), h10 = this._createRequest(`8`, 0, n10, r10), g10 = this._createRequest(`9`, 0, n10, r10), _10 = this._createRequest(`\u2192`, 0, n10, r10), v10 = this._createRequest(`\uFFEB`, 0, n10, null), y10 = this._createRequest(`\xB7`, 0, n10, r10), b10 = this._createRequest(`\u2E31`, 0, n10, null), x10 = `|/-_ilm%`;
      for (let e11 = 0, t11 = x10.length; e11 < t11; e11++) this._createRequest(x10.charAt(e11), 0, n10, r10), this._createRequest(x10.charAt(e11), 1, n10, r10), this._createRequest(x10.charAt(e11), 2, n10, r10);
      Lf(e10, t10, n10);
      let S10 = Math.max(s10.width, c10.width, l10.width, u10.width, d10.width, f10.width, p10.width, m10.width, h10.width, g10.width), C10 = t10.fontFeatureSettings === yn.OFF, w10 = r10[0].width;
      for (let e11 = 1, t11 = r10.length; C10 && e11 < t11; e11++) {
        let t12 = w10 - r10[e11].width;
        if (t12 < -1e-3 || t12 > 1e-3) {
          C10 = false;
          break;
        }
      }
      let ee2 = true;
      return C10 && v10.width !== w10 && (ee2 = false), v10.width > _10.width && (ee2 = false), new Uf({
        pixelRatio: Af.getInstance(e10).value,
        fontFamily: t10.fontFamily,
        fontWeight: t10.fontWeight,
        fontSize: t10.fontSize,
        fontFeatureSettings: t10.fontFeatureSettings,
        fontVariationSettings: t10.fontVariationSettings,
        lineHeight: t10.lineHeight,
        letterSpacing: t10.letterSpacing,
        isMonospace: C10,
        typicalHalfwidthCharacterWidth: i10.width,
        typicalFullwidthCharacterWidth: a10.width,
        canUseHalfwidthRightwardsArrow: ee2,
        spaceWidth: o10.width,
        middotWidth: y10.width,
        wsmiddotWidth: b10.width,
        maxDigitWidth: S10
      }, true);
    }
  }, Gf = class {
    constructor() {
      this._keys = /* @__PURE__ */ Object.create(null), this._values = /* @__PURE__ */ Object.create(null);
    }
    has(e10) {
      let t10 = e10.getId();
      return !!this._values[t10];
    }
    get(e10) {
      let t10 = e10.getId();
      return this._values[t10];
    }
    put(e10, t10) {
      let n10 = e10.getId();
      this._keys[n10] = e10, this._values[n10] = t10;
    }
    remove(e10) {
      let t10 = e10.getId();
      delete this._keys[t10], delete this._values[t10];
    }
    getValues() {
      return Object.keys(this._keys).map((e10) => this._values[e10]);
    }
  };
  const Kf = new Wf();
  var qf;
  (function(e10) {
    e10.serviceIds = /* @__PURE__ */ new Map(), e10.DI_TARGET = `$di$target`, e10.DI_DEPENDENCIES = `$di$dependencies`;
    function t10(t11) {
      return t11[e10.DI_DEPENDENCIES] || [];
    }
    e10.getServiceDependencies = t10;
  })(qf || (qf = {}));
  Jf = Xf(`instantiationService`);
  function Yf(e10, t10, n10) {
    t10[qf.DI_TARGET] === t10 ? t10[qf.DI_DEPENDENCIES].push({
      id: e10,
      index: n10
    }) : (t10[qf.DI_DEPENDENCIES] = [
      {
        id: e10,
        index: n10
      }
    ], t10[qf.DI_TARGET] = t10);
  }
  Xf = function(e10) {
    if (qf.serviceIds.has(e10)) return qf.serviceIds.get(e10);
    let t10 = function(e11, n10, r10) {
      if (arguments.length !== 3) throw Error(`@IServiceName-decorator can only be used to decorate a parameter`);
      Yf(t10, e11, r10);
    };
    return t10.toString = () => e10, qf.serviceIds.set(e10, t10), t10;
  };
  Zf = Xf(`codeEditorService`);
  Qf = Xf(`modelService`);
  $f = Xf(`textModelService`);
  let tp, ip;
  ep = class extends j {
    constructor(e10, t10 = ``, n10 = ``, r10 = true, i10) {
      super(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._enabled = true, this._id = e10, this._label = t10, this._cssClass = n10, this._enabled = r10, this._actionCallback = i10;
    }
    get id() {
      return this._id;
    }
    get label() {
      return this._label;
    }
    set label(e10) {
      this._setLabel(e10);
    }
    _setLabel(e10) {
      this._label !== e10 && (this._label = e10, this._onDidChange.fire({
        label: e10
      }));
    }
    get tooltip() {
      return this._tooltip || ``;
    }
    set tooltip(e10) {
      this._setTooltip(e10);
    }
    _setTooltip(e10) {
      this._tooltip !== e10 && (this._tooltip = e10, this._onDidChange.fire({
        tooltip: e10
      }));
    }
    get class() {
      return this._cssClass;
    }
    set class(e10) {
      this._setClass(e10);
    }
    _setClass(e10) {
      this._cssClass !== e10 && (this._cssClass = e10, this._onDidChange.fire({
        class: e10
      }));
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(e10) {
      this._setEnabled(e10);
    }
    _setEnabled(e10) {
      this._enabled !== e10 && (this._enabled = e10, this._onDidChange.fire({
        enabled: e10
      }));
    }
    get checked() {
      return this._checked;
    }
    set checked(e10) {
      this._setChecked(e10);
    }
    _setChecked(e10) {
      this._checked !== e10 && (this._checked = e10, this._onDidChange.fire({
        checked: e10
      }));
    }
    async run(e10, t10) {
      this._actionCallback && await this._actionCallback(e10);
    }
  };
  tp = class extends j {
    constructor() {
      super(...arguments), this._onWillRun = this._register(new N()), this.onWillRun = this._onWillRun.event, this._onDidRun = this._register(new N()), this.onDidRun = this._onDidRun.event;
    }
    async run(e10, t10) {
      if (!e10.enabled) return;
      this._onWillRun.fire({
        action: e10
      });
      let n10;
      try {
        await this.runAction(e10, t10);
      } catch (e11) {
        n10 = e11;
      }
      this._onDidRun.fire({
        action: e10,
        error: n10
      });
    }
    async runAction(e10, t10) {
      await e10.run(t10);
    }
  };
  np = (_z2 = class {
    constructor() {
      this.id = _z2.ID, this.label = ``, this.tooltip = ``, this.class = `separator`, this.enabled = false, this.checked = false;
    }
    static join(...t10) {
      let n10 = [];
      for (let r10 of t10) r10.length && (n10 = n10.length ? [
        ...n10,
        new _z2(),
        ...r10
      ] : r10);
      return n10;
    }
    async run() {
    }
  }, _z2.ID = `vs.actions.separator`, _z2);
  rp = class {
    get actions() {
      return this._actions;
    }
    constructor(e10, t10, n10, r10) {
      this.tooltip = ``, this.enabled = true, this.checked = void 0, this.id = e10, this.label = t10, this.class = r10, this._actions = n10;
    }
    async run() {
    }
  };
  ip = (_A2 = class extends ep {
    constructor() {
      super(_A2.ID, T(`submenu.empty`, `(empty)`), void 0, false);
    }
  }, _A2.ID = `vs.actions.empty`, _A2);
  ap = function(e10) {
    return {
      id: e10.id,
      label: e10.label,
      tooltip: e10.tooltip ?? e10.label,
      class: e10.class,
      enabled: e10.enabled ?? true,
      checked: e10.checked,
      run: async (...t10) => e10.run(...t10)
    };
  };
  var op;
  (function(e10) {
    function t10(e11) {
      return e11 && typeof e11 == `object` && typeof e11.id == `string`;
    }
    e10.isThemeColor = t10;
  })(op || (op = {}));
  (function(e10) {
    e10.iconNameSegment = `[A-Za-z0-9]+`, e10.iconNameExpression = `[A-Za-z0-9-]+`, e10.iconModifierExpression = `~[A-Za-z]+`, e10.iconNameCharacter = `[A-Za-z0-9~-]`;
    let t10 = RegExp(`^(${e10.iconNameExpression})(${e10.iconModifierExpression})?$`);
    function n10(e11) {
      let r11 = t10.exec(e11.id);
      if (!r11) return n10(L.error);
      let [, i11, a11] = r11, o11 = [
        `codicon`,
        `codicon-` + i11
      ];
      return a11 && o11.push(`codicon-modifier-` + a11.substring(1)), o11;
    }
    e10.asClassNameArray = n10;
    function r10(e11) {
      return n10(e11).join(` `);
    }
    e10.asClassName = r10;
    function i10(e11) {
      return `.` + n10(e11).join(`.`);
    }
    e10.asCSSSelector = i10;
    function a10(e11) {
      return e11 && typeof e11 == `object` && typeof e11.id == `string` && (e11.color === void 0 || op.isThemeColor(e11.color));
    }
    e10.isThemeIcon = a10;
    let o10 = RegExp(`^\\$\\((${e10.iconNameExpression}(?:${e10.iconModifierExpression})?)\\)$`);
    function s10(e11) {
      let t11 = o10.exec(e11);
      if (!t11) return;
      let [, n11] = t11;
      return {
        id: n11
      };
    }
    e10.fromString = s10;
    function c10(e11) {
      return {
        id: e11
      };
    }
    e10.fromId = c10;
    function l10(e11, t11) {
      let n11 = e11.id, r11 = n11.lastIndexOf(`~`);
      return r11 !== -1 && (n11 = n11.substring(0, r11)), t11 && (n11 = `${n11}~${t11}`), {
        id: n11
      };
    }
    e10.modify = l10;
    function u10(e11) {
      let t11 = e11.id.lastIndexOf(`~`);
      if (t11 !== -1) return e11.id.substring(t11 + 1);
    }
    e10.getModifier = u10;
    function d10(e11, t11) {
      var _a3, _b3;
      return e11.id === t11.id && ((_a3 = e11.color) == null ? void 0 : _a3.id) === ((_b3 = t11.color) == null ? void 0 : _b3.id);
    }
    e10.isEqual = d10;
  })(sp || (sp = {}));
  cp = Xf(`commandService`);
  lp = new class {
    constructor() {
      this._commands = /* @__PURE__ */ new Map(), this._onDidRegisterCommand = new N(), this.onDidRegisterCommand = this._onDidRegisterCommand.event;
    }
    registerCommand(e10, t10) {
      if (!e10) throw Error(`invalid command`);
      if (typeof e10 == `string`) {
        if (!t10) throw Error(`invalid command`);
        return this.registerCommand({
          id: e10,
          handler: t10
        });
      }
      if (e10.metadata && Array.isArray(e10.metadata.args)) {
        let t11 = [];
        for (let n12 of e10.metadata.args) t11.push(n12.constraint);
        let n11 = e10.handler;
        e10.handler = function(e11, ...r11) {
          return ke(r11, t11), n11(e11, ...r11);
        };
      }
      let { id: n10 } = e10, r10 = this._commands.get(n10);
      r10 || (r10 = new Rt(), this._commands.set(n10, r10));
      let i10 = r10.unshift(e10), a10 = k(() => {
        i10();
        let e11 = this._commands.get(n10);
        (e11 == null ? void 0 : e11.isEmpty()) && this._commands.delete(n10);
      });
      return this._onDidRegisterCommand.fire(n10), a10;
    }
    registerCommandAlias(e10, t10) {
      return lp.registerCommand(e10, (e11, ...n10) => e11.get(cp).executeCommand(t10, ...n10));
    }
    getCommand(e10) {
      let t10 = this._commands.get(e10);
      if (!(!t10 || t10.isEmpty())) return It.first(t10);
    }
    getCommands() {
      let e10 = /* @__PURE__ */ new Map();
      for (let t10 of this._commands.keys()) {
        let n10 = this.getCommand(t10);
        n10 && e10.set(t10, n10);
      }
      return e10;
    }
  }();
  lp.registerCommand(`noop`, () => {
  });
  function up(...e10) {
    switch (e10.length) {
      case 1:
        return T(`contextkey.scanner.hint.didYouMean1`, `Did you mean {0}?`, e10[0]);
      case 2:
        return T(`contextkey.scanner.hint.didYouMean2`, `Did you mean {0} or {1}?`, e10[0], e10[1]);
      case 3:
        return T(`contextkey.scanner.hint.didYouMean3`, `Did you mean {0}, {1} or {2}?`, e10[0], e10[1], e10[2]);
      default:
        return;
    }
  }
  const dp = T(`contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote`, `Did you forget to open or close the quote?`), fp = T(`contextkey.scanner.hint.didYouForgetToEscapeSlash`, `Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\/'.`);
  var pp = (_B2 = class {
    constructor() {
      this._input = ``, this._start = 0, this._current = 0, this._tokens = [], this._errors = [], this.stringRe = /[a-zA-Z0-9_<>\-\./\\:\*\?\+\[\]\^,#@;"%\$\p{L}-]+/uy;
    }
    static getLexeme(e10) {
      switch (e10.type) {
        case 0:
          return `(`;
        case 1:
          return `)`;
        case 2:
          return `!`;
        case 3:
          return e10.isTripleEq ? `===` : `==`;
        case 4:
          return e10.isTripleEq ? `!==` : `!=`;
        case 5:
          return `<`;
        case 6:
          return `<=`;
        case 7:
          return `>=`;
        case 8:
          return `>=`;
        case 9:
          return `=~`;
        case 10:
          return e10.lexeme;
        case 11:
          return `true`;
        case 12:
          return `false`;
        case 13:
          return `in`;
        case 14:
          return `not`;
        case 15:
          return `&&`;
        case 16:
          return `||`;
        case 17:
          return e10.lexeme;
        case 18:
          return e10.lexeme;
        case 19:
          return e10.lexeme;
        case 20:
          return `EOF`;
        default:
          throw wr(`unhandled token type: ${JSON.stringify(e10)}; have you forgotten to add a case?`);
      }
    }
    reset(e10) {
      return this._input = e10, this._start = 0, this._current = 0, this._tokens = [], this._errors = [], this;
    }
    scan() {
      for (; !this._isAtEnd(); ) {
        this._start = this._current;
        let e10 = this._advance();
        switch (e10) {
          case 40:
            this._addToken(0);
            break;
          case 41:
            this._addToken(1);
            break;
          case 33:
            if (this._match(61)) {
              let e11 = this._match(61);
              this._tokens.push({
                type: 4,
                offset: this._start,
                isTripleEq: e11
              });
            } else this._addToken(2);
            break;
          case 39:
            this._quotedString();
            break;
          case 47:
            this._regex();
            break;
          case 61:
            if (this._match(61)) {
              let e11 = this._match(61);
              this._tokens.push({
                type: 3,
                offset: this._start,
                isTripleEq: e11
              });
            } else this._match(126) ? this._addToken(9) : this._error(up(`==`, `=~`));
            break;
          case 60:
            this._addToken(this._match(61) ? 6 : 5);
            break;
          case 62:
            this._addToken(this._match(61) ? 8 : 7);
            break;
          case 38:
            this._match(38) ? this._addToken(15) : this._error(up(`&&`));
            break;
          case 124:
            this._match(124) ? this._addToken(16) : this._error(up(`||`));
            break;
          case 32:
          case 13:
          case 9:
          case 10:
          case 160:
            break;
          default:
            this._string();
        }
      }
      return this._start = this._current, this._addToken(20), Array.from(this._tokens);
    }
    _match(e10) {
      return this._isAtEnd() || this._input.charCodeAt(this._current) !== e10 ? false : (this._current++, true);
    }
    _advance() {
      return this._input.charCodeAt(this._current++);
    }
    _peek() {
      return this._isAtEnd() ? 0 : this._input.charCodeAt(this._current);
    }
    _addToken(e10) {
      this._tokens.push({
        type: e10,
        offset: this._start
      });
    }
    _error(e10) {
      let t10 = this._start, n10 = this._input.substring(this._start, this._current), r10 = {
        type: 19,
        offset: this._start,
        lexeme: n10
      };
      this._errors.push({
        offset: t10,
        lexeme: n10,
        additionalInfo: e10
      }), this._tokens.push(r10);
    }
    _string() {
      this.stringRe.lastIndex = this._start;
      let t10 = this.stringRe.exec(this._input);
      if (t10) {
        this._current = this._start + t10[0].length;
        let n10 = this._input.substring(this._start, this._current), r10 = _B2._keywords.get(n10);
        r10 ? this._addToken(r10) : this._tokens.push({
          type: 17,
          lexeme: n10,
          offset: this._start
        });
      }
    }
    _quotedString() {
      for (; this._peek() !== 39 && !this._isAtEnd(); ) this._advance();
      if (this._isAtEnd()) {
        this._error(dp);
        return;
      }
      this._advance(), this._tokens.push({
        type: 18,
        lexeme: this._input.substring(this._start + 1, this._current - 1),
        offset: this._start + 1
      });
    }
    _regex() {
      let t10 = this._current, n10 = false, r10 = false;
      for (; ; ) {
        if (t10 >= this._input.length) {
          this._current = t10, this._error(fp);
          return;
        }
        let e10 = this._input.charCodeAt(t10);
        if (n10) n10 = false;
        else if (e10 === 47 && !r10) {
          t10++;
          break;
        } else e10 === 91 ? r10 = true : e10 === 92 ? n10 = true : e10 === 93 && (r10 = false);
        t10++;
      }
      for (; t10 < this._input.length && _B2._regexFlags.has(this._input.charCodeAt(t10)); ) t10++;
      this._current = t10;
      let i10 = this._input.substring(this._start, this._current);
      this._tokens.push({
        type: 10,
        lexeme: i10,
        offset: this._start
      });
    }
    _isAtEnd() {
      return this._current >= this._input.length;
    }
  }, _B2._regexFlags = new Set([
    `i`,
    `g`,
    `s`,
    `m`,
    `y`,
    `u`
  ].map((e10) => e10.charCodeAt(0))), _B2._keywords = /* @__PURE__ */ new Map([
    [
      `not`,
      14
    ],
    [
      `in`,
      13
    ],
    [
      `false`,
      12
    ],
    [
      `true`,
      11
    ]
  ]), _B2);
  const mp = /* @__PURE__ */ new Map();
  mp.set(`false`, false), mp.set(`true`, true), mp.set(`isMac`, E), mp.set(`isLinux`, ht), mp.set(`isWindows`, mt), mp.set(`isWeb`, _t), mp.set(`isMacNative`, E && !_t), mp.set(`isEdge`, Nt), mp.set(`isFirefox`, jt), mp.set(`isChrome`, At), mp.set(`isSafari`, Mt);
  const hp = Object.prototype.hasOwnProperty, gp = {
    regexParsingWithErrorRecovery: true
  }, _p = T(`contextkey.parser.error.emptyString`, `Empty context key expression`), vp = T(`contextkey.parser.error.emptyString.hint`, `Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively.`), yp = T(`contextkey.parser.error.noInAfterNot`, `'in' after 'not'.`), bp = T(`contextkey.parser.error.closingParenthesis`, `closing parenthesis ')'`), xp = T(`contextkey.parser.error.unexpectedToken`, `Unexpected token`), Sp = T(`contextkey.parser.error.unexpectedToken.hint`, `Did you forget to put && or || before the token?`), Cp = T(`contextkey.parser.error.unexpectedEOF`, `Unexpected end of expression`), wp = T(`contextkey.parser.error.unexpectedEOF.hint`, `Did you forget to put a context key?`);
  let Tp;
  Tp = (_C2 = class {
    constructor(e10 = gp) {
      this._config = e10, this._scanner = new pp(), this._tokens = [], this._current = 0, this._parsingErrors = [], this._flagsGYRe = /g|y/g;
    }
    parse(t10) {
      if (t10 === ``) {
        this._parsingErrors.push({
          message: _p,
          offset: 0,
          lexeme: ``,
          additionalInfo: vp
        });
        return;
      }
      this._tokens = this._scanner.reset(t10).scan(), this._current = 0, this._parsingErrors = [];
      try {
        let t11 = this._expr();
        if (!this._isAtEnd()) {
          let t12 = this._peek(), n10 = t12.type === 17 ? Sp : void 0;
          throw this._parsingErrors.push({
            message: xp,
            offset: t12.offset,
            lexeme: pp.getLexeme(t12),
            additionalInfo: n10
          }), _C2._parseError;
        }
        return t11;
      } catch (t11) {
        if (t11 !== _C2._parseError) throw t11;
        return;
      }
    }
    _expr() {
      return this._or();
    }
    _or() {
      let e10 = [
        this._and()
      ];
      for (; this._matchOne(16); ) {
        let t10 = this._and();
        e10.push(t10);
      }
      return e10.length === 1 ? e10[0] : Ep.or(...e10);
    }
    _and() {
      let e10 = [
        this._term()
      ];
      for (; this._matchOne(15); ) {
        let t10 = this._term();
        e10.push(t10);
      }
      return e10.length === 1 ? e10[0] : Ep.and(...e10);
    }
    _term() {
      if (this._matchOne(2)) {
        let e10 = this._peek();
        switch (e10.type) {
          case 11:
            return this._advance(), kp.INSTANCE;
          case 12:
            return this._advance(), Ap.INSTANCE;
          case 0: {
            this._advance();
            let e11 = this._expr();
            return this._consume(1, bp), e11 == null ? void 0 : e11.negate();
          }
          case 17:
            return this._advance(), Ip.create(e10.lexeme);
          default:
            throw this._errExpectedButGot(`KEY | true | false | '(' expression ')'`, e10);
        }
      }
      return this._primary();
    }
    _primary() {
      let t10 = this._peek();
      switch (t10.type) {
        case 11:
          return this._advance(), Ep.true();
        case 12:
          return this._advance(), Ep.false();
        case 0: {
          this._advance();
          let e10 = this._expr();
          return this._consume(1, bp), e10;
        }
        case 17: {
          let e10 = t10.lexeme;
          if (this._advance(), this._matchOne(9)) {
            let t11 = this._peek();
            if (!this._config.regexParsingWithErrorRecovery) {
              if (this._advance(), t11.type !== 10) throw this._errExpectedButGot(`REGEX`, t11);
              let n11 = t11.lexeme, r10 = n11.lastIndexOf(`/`), i10 = r10 === n11.length - 1 ? void 0 : this._removeFlagsGY(n11.substring(r10 + 1)), a10;
              try {
                a10 = new RegExp(n11.substring(1, r10), i10);
              } catch {
                throw this._errExpectedButGot(`REGEX`, t11);
              }
              return Hp.create(e10, a10);
            }
            switch (t11.type) {
              case 10:
              case 19: {
                let n11 = [
                  t11.lexeme
                ];
                this._advance();
                let r10 = this._peek(), i10 = 0;
                for (let e11 = 0; e11 < t11.lexeme.length; e11++) t11.lexeme.charCodeAt(e11) === 40 ? i10++ : t11.lexeme.charCodeAt(e11) === 41 && i10--;
                for (; !this._isAtEnd() && r10.type !== 15 && r10.type !== 16; ) {
                  switch (r10.type) {
                    case 0:
                      i10++;
                      break;
                    case 1:
                      i10--;
                      break;
                    case 10:
                    case 18:
                      for (let e11 = 0; e11 < r10.lexeme.length; e11++) r10.lexeme.charCodeAt(e11) === 40 ? i10++ : t11.lexeme.charCodeAt(e11) === 41 && i10--;
                  }
                  if (i10 < 0) break;
                  n11.push(pp.getLexeme(r10)), this._advance(), r10 = this._peek();
                }
                let a10 = n11.join(``), o10 = a10.lastIndexOf(`/`), s10 = o10 === a10.length - 1 ? void 0 : this._removeFlagsGY(a10.substring(o10 + 1)), c10;
                try {
                  c10 = new RegExp(a10.substring(1, o10), s10);
                } catch {
                  throw this._errExpectedButGot(`REGEX`, t11);
                }
                return Ep.regex(e10, c10);
              }
              case 18: {
                let n11 = t11.lexeme;
                this._advance();
                let r10 = null;
                if (!ds(n11)) {
                  let e11 = n11.indexOf(`/`), i10 = n11.lastIndexOf(`/`);
                  if (e11 !== i10 && e11 >= 0) {
                    let a10 = n11.slice(e11 + 1, i10), o10 = n11[i10 + 1] === `i` ? `i` : ``;
                    try {
                      r10 = new RegExp(a10, o10);
                    } catch {
                      throw this._errExpectedButGot(`REGEX`, t11);
                    }
                  }
                }
                if (r10 === null) throw this._errExpectedButGot(`REGEX`, t11);
                return Hp.create(e10, r10);
              }
              default:
                throw this._errExpectedButGot(`REGEX`, this._peek());
            }
          }
          if (this._matchOne(14)) {
            this._consume(13, yp);
            let t11 = this._value();
            return Ep.notIn(e10, t11);
          }
          let n10 = this._peek().type;
          switch (n10) {
            case 3: {
              this._advance();
              let t11 = this._value();
              if (this._previous().type === 18) return Ep.equals(e10, t11);
              switch (t11) {
                case `true`:
                  return Ep.has(e10);
                case `false`:
                  return Ep.not(e10);
                default:
                  return Ep.equals(e10, t11);
              }
            }
            case 4: {
              this._advance();
              let t11 = this._value();
              if (this._previous().type === 18) return Ep.notEquals(e10, t11);
              switch (t11) {
                case `true`:
                  return Ep.not(e10);
                case `false`:
                  return Ep.has(e10);
                default:
                  return Ep.notEquals(e10, t11);
              }
            }
            case 5:
              return this._advance(), Bp.create(e10, this._value());
            case 6:
              return this._advance(), Vp.create(e10, this._value());
            case 7:
              return this._advance(), Rp.create(e10, this._value());
            case 8:
              return this._advance(), zp.create(e10, this._value());
            case 13:
              return this._advance(), Ep.in(e10, this._value());
            default:
              return Ep.has(e10);
          }
        }
        case 20:
          throw this._parsingErrors.push({
            message: Cp,
            offset: t10.offset,
            lexeme: ``,
            additionalInfo: wp
          }), _C2._parseError;
        default:
          throw this._errExpectedButGot(`true | false | KEY 
	| KEY '=~' REGEX 
	| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());
      }
    }
    _value() {
      let e10 = this._peek();
      switch (e10.type) {
        case 17:
        case 18:
          return this._advance(), e10.lexeme;
        case 11:
          return this._advance(), `true`;
        case 12:
          return this._advance(), `false`;
        case 13:
          return this._advance(), `in`;
        default:
          return ``;
      }
    }
    _removeFlagsGY(e10) {
      return e10.replaceAll(this._flagsGYRe, ``);
    }
    _previous() {
      return this._tokens[this._current - 1];
    }
    _matchOne(e10) {
      return this._check(e10) ? (this._advance(), true) : false;
    }
    _advance() {
      return this._isAtEnd() || this._current++, this._previous();
    }
    _consume(e10, t10) {
      if (this._check(e10)) return this._advance();
      throw this._errExpectedButGot(t10, this._peek());
    }
    _errExpectedButGot(t10, n10, r10) {
      let i10 = T(`contextkey.parser.error.expectedButGot`, `Expected: {0}
Received: '{1}'.`, t10, pp.getLexeme(n10)), a10 = n10.offset, o10 = pp.getLexeme(n10);
      return this._parsingErrors.push({
        message: i10,
        offset: a10,
        lexeme: o10,
        additionalInfo: r10
      }), _C2._parseError;
    }
    _check(e10) {
      return this._peek().type === e10;
    }
    _peek() {
      return this._tokens[this._current];
    }
    _isAtEnd() {
      return this._peek().type === 20;
    }
  }, _C2._parseError = Error(), _C2);
  Ep = (_D2 = class {
    static false() {
      return kp.INSTANCE;
    }
    static true() {
      return Ap.INSTANCE;
    }
    static has(e10) {
      return jp.create(e10);
    }
    static equals(e10, t10) {
      return Mp.create(e10, t10);
    }
    static notEquals(e10, t10) {
      return Fp.create(e10, t10);
    }
    static regex(e10, t10) {
      return Hp.create(e10, t10);
    }
    static in(e10, t10) {
      return Np.create(e10, t10);
    }
    static notIn(e10, t10) {
      return Pp.create(e10, t10);
    }
    static not(e10) {
      return Ip.create(e10);
    }
    static and(...e10) {
      return Gp.create(e10, null, true);
    }
    static or(...e10) {
      return Kp.create(e10, null, true);
    }
    static deserialize(e10) {
      if (e10 == null) return;
      let t10 = this._parser.parse(e10);
      return t10;
    }
  }, _D2._parser = new Tp({
    regexParsingWithErrorRecovery: false
  }), _D2);
  function Dp(e10, t10) {
    let n10 = e10 ? e10.substituteConstants() : void 0, r10 = t10 ? t10.substituteConstants() : void 0;
    return !n10 && !r10 ? true : !n10 || !r10 ? false : n10.equals(r10);
  }
  function Op(e10, t10) {
    return e10.cmp(t10);
  }
  let kp, Ap, jp, Np, Pp, Fp, Ip;
  kp = (_E2 = class {
    constructor() {
      this.type = 0;
    }
    cmp(e10) {
      return this.type - e10.type;
    }
    equals(e10) {
      return e10.type === this.type;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e10) {
      return false;
    }
    serialize() {
      return `false`;
    }
    keys() {
      return [];
    }
    negate() {
      return Ap.INSTANCE;
    }
  }, _E2.INSTANCE = new _E2(), _E2);
  Ap = (_F2 = class {
    constructor() {
      this.type = 1;
    }
    cmp(e10) {
      return this.type - e10.type;
    }
    equals(e10) {
      return e10.type === this.type;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e10) {
      return true;
    }
    serialize() {
      return `true`;
    }
    keys() {
      return [];
    }
    negate() {
      return kp.INSTANCE;
    }
  }, _F2.INSTANCE = new _F2(), _F2);
  jp = class e10 {
    static create(t10, n10 = null) {
      let r10 = mp.get(t10);
      return typeof r10 == `boolean` ? r10 ? Ap.INSTANCE : kp.INSTANCE : new e10(t10, n10);
    }
    constructor(e11, t10) {
      this.key = e11, this.negated = t10, this.type = 2;
    }
    cmp(e11) {
      return e11.type === this.type ? Jp(this.key, e11.key) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key : false;
    }
    substituteConstants() {
      let e11 = mp.get(this.key);
      return typeof e11 == `boolean` ? e11 ? Ap.INSTANCE : kp.INSTANCE : this;
    }
    evaluate(e11) {
      return !!e11.getValue(this.key);
    }
    serialize() {
      return this.key;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Ip.create(this.key, this)), this.negated;
    }
  };
  Mp = class e10 {
    static create(t10, n10, r10 = null) {
      if (typeof n10 == `boolean`) return n10 ? jp.create(t10, r10) : Ip.create(t10, r10);
      let i10 = mp.get(t10);
      if (typeof i10 == `boolean`) {
        let e11 = i10 ? `true` : `false`;
        return n10 === e11 ? Ap.INSTANCE : kp.INSTANCE;
      }
      return new e10(t10, n10, r10);
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 4;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      let e11 = mp.get(this.key);
      if (typeof e11 == `boolean`) {
        let t10 = e11 ? `true` : `false`;
        return this.value === t10 ? Ap.INSTANCE : kp.INSTANCE;
      }
      return this;
    }
    evaluate(e11) {
      return e11.getValue(this.key) == this.value;
    }
    serialize() {
      return `${this.key} == '${this.value}'`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Fp.create(this.key, this.value, this)), this.negated;
    }
  };
  Np = class e10 {
    static create(t10, n10) {
      return new e10(t10, n10);
    }
    constructor(e11, t10) {
      this.key = e11, this.valueKey = t10, this.type = 10, this.negated = null;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.valueKey, e11.key, e11.valueKey) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.valueKey === e11.valueKey : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      let t10 = e11.getValue(this.valueKey), n10 = e11.getValue(this.key);
      return Array.isArray(t10) ? t10.includes(n10) : typeof n10 == `string` && typeof t10 == `object` && t10 ? hp.call(t10, n10) : false;
    }
    serialize() {
      return `${this.key} in '${this.valueKey}'`;
    }
    keys() {
      return [
        this.key,
        this.valueKey
      ];
    }
    negate() {
      return this.negated || (this.negated = Pp.create(this.key, this.valueKey)), this.negated;
    }
  };
  Pp = class e10 {
    static create(t10, n10) {
      return new e10(t10, n10);
    }
    constructor(e11, t10) {
      this.key = e11, this.valueKey = t10, this.type = 11, this._negated = Np.create(e11, t10);
    }
    cmp(e11) {
      return e11.type === this.type ? this._negated.cmp(e11._negated) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this._negated.equals(e11._negated) : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return !this._negated.evaluate(e11);
    }
    serialize() {
      return `${this.key} not in '${this.valueKey}'`;
    }
    keys() {
      return this._negated.keys();
    }
    negate() {
      return this._negated;
    }
  };
  Fp = class e10 {
    static create(t10, n10, r10 = null) {
      if (typeof n10 == `boolean`) return n10 ? Ip.create(t10, r10) : jp.create(t10, r10);
      let i10 = mp.get(t10);
      if (typeof i10 == `boolean`) {
        let e11 = i10 ? `true` : `false`;
        return n10 === e11 ? kp.INSTANCE : Ap.INSTANCE;
      }
      return new e10(t10, n10, r10);
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 5;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      let e11 = mp.get(this.key);
      if (typeof e11 == `boolean`) {
        let t10 = e11 ? `true` : `false`;
        return this.value === t10 ? kp.INSTANCE : Ap.INSTANCE;
      }
      return this;
    }
    evaluate(e11) {
      return e11.getValue(this.key) != this.value;
    }
    serialize() {
      return `${this.key} != '${this.value}'`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Mp.create(this.key, this.value, this)), this.negated;
    }
  };
  Ip = class e10 {
    static create(t10, n10 = null) {
      let r10 = mp.get(t10);
      return typeof r10 == `boolean` ? r10 ? kp.INSTANCE : Ap.INSTANCE : new e10(t10, n10);
    }
    constructor(e11, t10) {
      this.key = e11, this.negated = t10, this.type = 3;
    }
    cmp(e11) {
      return e11.type === this.type ? Jp(this.key, e11.key) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key : false;
    }
    substituteConstants() {
      let e11 = mp.get(this.key);
      return typeof e11 == `boolean` ? e11 ? kp.INSTANCE : Ap.INSTANCE : this;
    }
    evaluate(e11) {
      return !e11.getValue(this.key);
    }
    serialize() {
      return `!${this.key}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = jp.create(this.key, this)), this.negated;
    }
  };
  function Lp(e10, t10) {
    if (typeof e10 == `string`) {
      let t11 = parseFloat(e10);
      isNaN(t11) || (e10 = t11);
    }
    return typeof e10 == `string` || typeof e10 == `number` ? t10(e10) : kp.INSTANCE;
  }
  var Rp = class e10 {
    static create(t10, n10, r10 = null) {
      return Lp(n10, (n11) => new e10(t10, n11, r10));
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 12;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return typeof this.value == `string` ? false : parseFloat(e11.getValue(this.key)) > this.value;
    }
    serialize() {
      return `${this.key} > ${this.value}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Vp.create(this.key, this.value, this)), this.negated;
    }
  }, zp = class e10 {
    static create(t10, n10, r10 = null) {
      return Lp(n10, (n11) => new e10(t10, n11, r10));
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 13;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return typeof this.value == `string` ? false : parseFloat(e11.getValue(this.key)) >= this.value;
    }
    serialize() {
      return `${this.key} >= ${this.value}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Bp.create(this.key, this.value, this)), this.negated;
    }
  }, Bp = class e10 {
    static create(t10, n10, r10 = null) {
      return Lp(n10, (n11) => new e10(t10, n11, r10));
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 14;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return typeof this.value == `string` ? false : parseFloat(e11.getValue(this.key)) < this.value;
    }
    serialize() {
      return `${this.key} < ${this.value}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = zp.create(this.key, this.value, this)), this.negated;
    }
  }, Vp = class e10 {
    static create(t10, n10, r10 = null) {
      return Lp(n10, (n11) => new e10(t10, n11, r10));
    }
    constructor(e11, t10, n10) {
      this.key = e11, this.value = t10, this.negated = n10, this.type = 15;
    }
    cmp(e11) {
      return e11.type === this.type ? Yp(this.key, this.value, e11.key, e11.value) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this.key === e11.key && this.value === e11.value : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return typeof this.value == `string` ? false : parseFloat(e11.getValue(this.key)) <= this.value;
    }
    serialize() {
      return `${this.key} <= ${this.value}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Rp.create(this.key, this.value, this)), this.negated;
    }
  }, Hp = class e10 {
    static create(t10, n10) {
      return new e10(t10, n10);
    }
    constructor(e11, t10) {
      this.key = e11, this.regexp = t10, this.type = 7, this.negated = null;
    }
    cmp(e11) {
      if (e11.type !== this.type) return this.type - e11.type;
      if (this.key < e11.key) return -1;
      if (this.key > e11.key) return 1;
      let t10 = this.regexp ? this.regexp.source : ``, n10 = e11.regexp ? e11.regexp.source : ``;
      return t10 < n10 ? -1 : t10 > n10 ? 1 : 0;
    }
    equals(e11) {
      if (e11.type === this.type) {
        let t10 = this.regexp ? this.regexp.source : ``, n10 = e11.regexp ? e11.regexp.source : ``;
        return this.key === e11.key && t10 === n10;
      }
      return false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      let t10 = e11.getValue(this.key);
      return this.regexp ? this.regexp.test(t10) : false;
    }
    serialize() {
      let e11 = this.regexp ? `/${this.regexp.source}/${this.regexp.flags}` : `/invalid/`;
      return `${this.key} =~ ${e11}`;
    }
    keys() {
      return [
        this.key
      ];
    }
    negate() {
      return this.negated || (this.negated = Up.create(this)), this.negated;
    }
  }, Up = class e10 {
    static create(t10) {
      return new e10(t10);
    }
    constructor(e11) {
      this._actual = e11, this.type = 8;
    }
    cmp(e11) {
      return e11.type === this.type ? this._actual.cmp(e11._actual) : this.type - e11.type;
    }
    equals(e11) {
      return e11.type === this.type ? this._actual.equals(e11._actual) : false;
    }
    substituteConstants() {
      return this;
    }
    evaluate(e11) {
      return !this._actual.evaluate(e11);
    }
    serialize() {
      return `!(${this._actual.serialize()})`;
    }
    keys() {
      return this._actual.keys();
    }
    negate() {
      return this._actual;
    }
  };
  function Wp(e10) {
    let t10 = null;
    for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
      let r11 = e10[n10].substituteConstants();
      if (e10[n10] !== r11 && t10 === null) {
        t10 = [];
        for (let r12 = 0; r12 < n10; r12++) t10[r12] = e10[r12];
      }
      t10 !== null && (t10[n10] = r11);
    }
    return t10 === null ? e10 : t10;
  }
  let Gp, Kp;
  Gp = class e10 {
    static create(t10, n10, r10) {
      return e10._normalizeArr(t10, n10, r10);
    }
    constructor(e11, t10) {
      this.expr = e11, this.negated = t10, this.type = 6;
    }
    cmp(e11) {
      if (e11.type !== this.type) return this.type - e11.type;
      if (this.expr.length < e11.expr.length) return -1;
      if (this.expr.length > e11.expr.length) return 1;
      for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) {
        let n11 = Op(this.expr[t10], e11.expr[t10]);
        if (n11 !== 0) return n11;
      }
      return 0;
    }
    equals(e11) {
      if (e11.type === this.type) {
        if (this.expr.length !== e11.expr.length) return false;
        for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) if (!this.expr[t10].equals(e11.expr[t10])) return false;
        return true;
      }
      return false;
    }
    substituteConstants() {
      let t10 = Wp(this.expr);
      return t10 === this.expr ? this : e10.create(t10, this.negated, false);
    }
    evaluate(e11) {
      for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) if (!this.expr[t10].evaluate(e11)) return false;
      return true;
    }
    static _normalizeArr(t10, n10, r10) {
      let i10 = [], a10 = false;
      for (let e11 of t10) {
        if (!e11) continue;
        if (e11.type === 1) {
          a10 = true;
          continue;
        }
        if (e11.type === 0) return kp.INSTANCE;
        if (e11.type === 6) {
          i10.push(...e11.expr);
          continue;
        }
        i10.push(e11);
      }
      if (i10.length === 0 && a10) return Ap.INSTANCE;
      if (i10.length !== 0) {
        if (i10.length === 1) return i10[0];
        i10.sort(Op);
        for (let e11 = 1; e11 < i10.length; e11++) i10[e11 - 1].equals(i10[e11]) && (i10.splice(e11, 1), e11--);
        if (i10.length === 1) return i10[0];
        for (; i10.length > 1; ) {
          let t11 = i10[i10.length - 1];
          if (t11.type !== 9) break;
          i10.pop();
          let n11 = i10.pop(), a11 = i10.length === 0, o10 = Kp.create(t11.expr.map((t12) => e10.create([
            t12,
            n11
          ], null, r10)), null, a11);
          o10 && (i10.push(o10), i10.sort(Op));
        }
        if (i10.length === 1) return i10[0];
        if (r10) {
          for (let e11 = 0; e11 < i10.length; e11++) for (let t11 = e11 + 1; t11 < i10.length; t11++) if (i10[e11].negate().equals(i10[t11])) return kp.INSTANCE;
          if (i10.length === 1) return i10[0];
        }
        return new e10(i10, n10);
      }
    }
    serialize() {
      return this.expr.map((e11) => e11.serialize()).join(` && `);
    }
    keys() {
      let e11 = [];
      for (let t10 of this.expr) e11.push(...t10.keys());
      return e11;
    }
    negate() {
      if (!this.negated) {
        let e11 = [];
        for (let t10 of this.expr) e11.push(t10.negate());
        this.negated = Kp.create(e11, this, true);
      }
      return this.negated;
    }
  };
  Kp = class e10 {
    static create(t10, n10, r10) {
      return e10._normalizeArr(t10, n10, r10);
    }
    constructor(e11, t10) {
      this.expr = e11, this.negated = t10, this.type = 9;
    }
    cmp(e11) {
      if (e11.type !== this.type) return this.type - e11.type;
      if (this.expr.length < e11.expr.length) return -1;
      if (this.expr.length > e11.expr.length) return 1;
      for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) {
        let n11 = Op(this.expr[t10], e11.expr[t10]);
        if (n11 !== 0) return n11;
      }
      return 0;
    }
    equals(e11) {
      if (e11.type === this.type) {
        if (this.expr.length !== e11.expr.length) return false;
        for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) if (!this.expr[t10].equals(e11.expr[t10])) return false;
        return true;
      }
      return false;
    }
    substituteConstants() {
      let t10 = Wp(this.expr);
      return t10 === this.expr ? this : e10.create(t10, this.negated, false);
    }
    evaluate(e11) {
      for (let t10 = 0, n10 = this.expr.length; t10 < n10; t10++) if (this.expr[t10].evaluate(e11)) return true;
      return false;
    }
    static _normalizeArr(t10, n10, r10) {
      let i10 = [], a10 = false;
      if (t10) {
        for (let e11 = 0, n11 = t10.length; e11 < n11; e11++) {
          let n12 = t10[e11];
          if (n12) {
            if (n12.type === 0) {
              a10 = true;
              continue;
            }
            if (n12.type === 1) return Ap.INSTANCE;
            if (n12.type === 9) {
              i10 = i10.concat(n12.expr);
              continue;
            }
            i10.push(n12);
          }
        }
        if (i10.length === 0 && a10) return kp.INSTANCE;
        i10.sort(Op);
      }
      if (i10.length !== 0) {
        if (i10.length === 1) return i10[0];
        for (let e11 = 1; e11 < i10.length; e11++) i10[e11 - 1].equals(i10[e11]) && (i10.splice(e11, 1), e11--);
        if (i10.length === 1) return i10[0];
        if (r10) {
          for (let e11 = 0; e11 < i10.length; e11++) for (let t11 = e11 + 1; t11 < i10.length; t11++) if (i10[e11].negate().equals(i10[t11])) return Ap.INSTANCE;
          if (i10.length === 1) return i10[0];
        }
        return new e10(i10, n10);
      }
    }
    serialize() {
      return this.expr.map((e11) => e11.serialize()).join(` || `);
    }
    keys() {
      let e11 = [];
      for (let t10 of this.expr) e11.push(...t10.keys());
      return e11;
    }
    negate() {
      if (!this.negated) {
        let t10 = [];
        for (let e11 of this.expr) t10.push(e11.negate());
        for (; t10.length > 1; ) {
          let n10 = t10.shift(), r10 = t10.shift(), i10 = [];
          for (let e11 of Qp(n10)) for (let t11 of Qp(r10)) i10.push(Gp.create([
            e11,
            t11
          ], null, false));
          t10.unshift(e10.create(i10, null, false));
        }
        this.negated = e10.create(t10, this, true);
      }
      return this.negated;
    }
  };
  U = (_G2 = class extends jp {
    static all() {
      return _G2._info.values();
    }
    constructor(t10, n10, r10) {
      super(t10, null), this._defaultValue = n10, typeof r10 == `object` ? _G2._info.push({
        ...r10,
        key: t10
      }) : r10 !== true && _G2._info.push({
        key: t10,
        description: r10,
        type: n10 == null ? void 0 : typeof n10
      });
    }
    bindTo(e10) {
      return e10.createKey(this.key, this._defaultValue);
    }
    getValue(e10) {
      return e10.getContextKeyValue(this.key);
    }
    toNegated() {
      return this.negate();
    }
    isEqualTo(e10) {
      return Mp.create(this.key, e10);
    }
  }, _G2._info = [], _G2);
  qp = Xf(`contextKeyService`);
  function Jp(e10, t10) {
    return e10 < t10 ? -1 : e10 > t10 ? 1 : 0;
  }
  function Yp(e10, t10, n10, r10) {
    return e10 < n10 ? -1 : e10 > n10 ? 1 : t10 < r10 ? -1 : t10 > r10 ? 1 : 0;
  }
  function Xp(e10, t10) {
    if (e10.type === 0 || t10.type === 1) return true;
    if (e10.type === 9) return t10.type === 9 ? Zp(e10.expr, t10.expr) : false;
    if (t10.type === 9) {
      for (let n10 of t10.expr) if (Xp(e10, n10)) return true;
      return false;
    }
    if (e10.type === 6) {
      if (t10.type === 6) return Zp(t10.expr, e10.expr);
      for (let n10 of e10.expr) if (Xp(n10, t10)) return true;
      return false;
    }
    return e10.equals(t10);
  }
  function Zp(e10, t10) {
    let n10 = 0, r10 = 0;
    for (; n10 < e10.length && r10 < t10.length; ) {
      let i10 = e10[n10].cmp(t10[r10]);
      if (i10 < 0) return false;
      i10 === 0 && n10++, r10++;
    }
    return n10 === e10.length;
  }
  function Qp(e10) {
    return e10.type === 9 ? e10.expr : [
      e10
    ];
  }
  function $p(e10, t10) {
    if (!e10) throw Error(t10 ? `Assertion failed (${t10})` : `Assertion Failed`);
  }
  em = function(e10, t10 = `Unreachable`) {
    throw Error(t10);
  };
  function tm(e10) {
    e10 || gr(new Dr(`Soft Assertion Failed`));
  }
  function nm(e10) {
    if (!e10()) {
      debugger;
      e10(), gr(new Dr(`Assertion Failed`));
    }
  }
  function rm(e10, t10) {
    let n10 = 0;
    for (; n10 < e10.length - 1; ) {
      let r10 = e10[n10], i10 = e10[n10 + 1];
      if (!t10(r10, i10)) return false;
      n10++;
    }
    return true;
  }
  var im = class {
    constructor() {
      this.data = /* @__PURE__ */ new Map();
    }
    add(e10, t10) {
      $p(_e(e10)), $p(ve(t10)), $p(!this.data.has(e10), `There is already an extension with this id`), this.data.set(e10, t10);
    }
    as(e10) {
      return this.data.get(e10) || null;
    }
  };
  am = new im();
  var om = class e10 {
    constructor() {
      this._coreKeybindings = new Rt(), this._extensionKeybindings = [], this._cachedMergedKeybindings = null;
    }
    static bindToCurrentPlatform(e11) {
      if (Et === 1) {
        if (e11 && e11.win) return e11.win;
      } else if (Et === 2) {
        if (e11 && e11.mac) return e11.mac;
      } else if (e11 && e11.linux) return e11.linux;
      return e11;
    }
    registerKeybindingRule(t10) {
      let n10 = e10.bindToCurrentPlatform(t10), r10 = new A();
      if (n10 && n10.primary) {
        let e11 = jc(n10.primary, Et);
        e11 && r10.add(this._registerDefaultKeybinding(e11, t10.id, t10.args, t10.weight, 0, t10.when));
      }
      if (n10 && Array.isArray(n10.secondary)) for (let e11 = 0, i10 = n10.secondary.length; e11 < i10; e11++) {
        let i11 = n10.secondary[e11], a10 = jc(i11, Et);
        a10 && r10.add(this._registerDefaultKeybinding(a10, t10.id, t10.args, t10.weight, -e11 - 1, t10.when));
      }
      return r10;
    }
    registerCommandAndKeybindingRule(e11) {
      return zr(this.registerKeybindingRule(e11), lp.registerCommand(e11));
    }
    _registerDefaultKeybinding(e11, t10, n10, r10, i10, a10) {
      let o10 = this._coreKeybindings.push({
        keybinding: e11,
        command: t10,
        commandArgs: n10,
        when: a10,
        weight1: r10,
        weight2: i10,
        extensionId: null,
        isBuiltinExtension: false
      });
      return this._cachedMergedKeybindings = null, k(() => {
        o10(), this._cachedMergedKeybindings = null;
      });
    }
    getDefaultKeybindings() {
      return this._cachedMergedKeybindings || (this._cachedMergedKeybindings = Array.from(this._coreKeybindings).concat(this._extensionKeybindings), this._cachedMergedKeybindings.sort(lm)), this._cachedMergedKeybindings.slice(0);
    }
  };
  let cm;
  sm = new om();
  cm = {
    EditorModes: `platform.keybindingsRegistry`
  };
  am.add(cm.EditorModes, sm);
  function lm(e10, t10) {
    if (e10.weight1 !== t10.weight1) return e10.weight1 - t10.weight1;
    if (e10.command && t10.command) {
      if (e10.command < t10.command) return -1;
      if (e10.command > t10.command) return 1;
    }
    return e10.weight2 - t10.weight2;
  }
  var um = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, dm = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, fm;
  pm = function(e10) {
    return e10.command !== void 0;
  };
  function mm(e10) {
    return e10.submenu !== void 0;
  }
  hm = (_H2 = class {
    constructor(t10) {
      if (_H2._instances.has(t10)) throw TypeError(`MenuId with identifier '${t10}' already exists. Use MenuId.for(ident) or a unique identifier`);
      _H2._instances.set(t10, this), this.id = t10;
    }
  }, _H2._instances = /* @__PURE__ */ new Map(), _H2.CommandPalette = new _H2(`CommandPalette`), _H2.DebugBreakpointsContext = new _H2(`DebugBreakpointsContext`), _H2.DebugCallStackContext = new _H2(`DebugCallStackContext`), _H2.DebugConsoleContext = new _H2(`DebugConsoleContext`), _H2.DebugVariablesContext = new _H2(`DebugVariablesContext`), _H2.NotebookVariablesContext = new _H2(`NotebookVariablesContext`), _H2.DebugHoverContext = new _H2(`DebugHoverContext`), _H2.DebugWatchContext = new _H2(`DebugWatchContext`), _H2.DebugToolBar = new _H2(`DebugToolBar`), _H2.DebugToolBarStop = new _H2(`DebugToolBarStop`), _H2.DebugCallStackToolbar = new _H2(`DebugCallStackToolbar`), _H2.DebugCreateConfiguration = new _H2(`DebugCreateConfiguration`), _H2.EditorContext = new _H2(`EditorContext`), _H2.SimpleEditorContext = new _H2(`SimpleEditorContext`), _H2.EditorContent = new _H2(`EditorContent`), _H2.EditorLineNumberContext = new _H2(`EditorLineNumberContext`), _H2.EditorContextCopy = new _H2(`EditorContextCopy`), _H2.EditorContextPeek = new _H2(`EditorContextPeek`), _H2.EditorContextShare = new _H2(`EditorContextShare`), _H2.EditorTitle = new _H2(`EditorTitle`), _H2.EditorTitleRun = new _H2(`EditorTitleRun`), _H2.EditorTitleContext = new _H2(`EditorTitleContext`), _H2.EditorTitleContextShare = new _H2(`EditorTitleContextShare`), _H2.EmptyEditorGroup = new _H2(`EmptyEditorGroup`), _H2.EmptyEditorGroupContext = new _H2(`EmptyEditorGroupContext`), _H2.EditorTabsBarContext = new _H2(`EditorTabsBarContext`), _H2.EditorTabsBarShowTabsSubmenu = new _H2(`EditorTabsBarShowTabsSubmenu`), _H2.EditorTabsBarShowTabsZenModeSubmenu = new _H2(`EditorTabsBarShowTabsZenModeSubmenu`), _H2.EditorActionsPositionSubmenu = new _H2(`EditorActionsPositionSubmenu`), _H2.ExplorerContext = new _H2(`ExplorerContext`), _H2.ExplorerContextShare = new _H2(`ExplorerContextShare`), _H2.ExtensionContext = new _H2(`ExtensionContext`), _H2.GlobalActivity = new _H2(`GlobalActivity`), _H2.CommandCenter = new _H2(`CommandCenter`), _H2.CommandCenterCenter = new _H2(`CommandCenterCenter`), _H2.LayoutControlMenuSubmenu = new _H2(`LayoutControlMenuSubmenu`), _H2.LayoutControlMenu = new _H2(`LayoutControlMenu`), _H2.MenubarMainMenu = new _H2(`MenubarMainMenu`), _H2.MenubarAppearanceMenu = new _H2(`MenubarAppearanceMenu`), _H2.MenubarDebugMenu = new _H2(`MenubarDebugMenu`), _H2.MenubarEditMenu = new _H2(`MenubarEditMenu`), _H2.MenubarCopy = new _H2(`MenubarCopy`), _H2.MenubarFileMenu = new _H2(`MenubarFileMenu`), _H2.MenubarGoMenu = new _H2(`MenubarGoMenu`), _H2.MenubarHelpMenu = new _H2(`MenubarHelpMenu`), _H2.MenubarLayoutMenu = new _H2(`MenubarLayoutMenu`), _H2.MenubarNewBreakpointMenu = new _H2(`MenubarNewBreakpointMenu`), _H2.PanelAlignmentMenu = new _H2(`PanelAlignmentMenu`), _H2.PanelPositionMenu = new _H2(`PanelPositionMenu`), _H2.ActivityBarPositionMenu = new _H2(`ActivityBarPositionMenu`), _H2.MenubarPreferencesMenu = new _H2(`MenubarPreferencesMenu`), _H2.MenubarRecentMenu = new _H2(`MenubarRecentMenu`), _H2.MenubarSelectionMenu = new _H2(`MenubarSelectionMenu`), _H2.MenubarShare = new _H2(`MenubarShare`), _H2.MenubarSwitchEditorMenu = new _H2(`MenubarSwitchEditorMenu`), _H2.MenubarSwitchGroupMenu = new _H2(`MenubarSwitchGroupMenu`), _H2.MenubarTerminalMenu = new _H2(`MenubarTerminalMenu`), _H2.MenubarViewMenu = new _H2(`MenubarViewMenu`), _H2.MenubarHomeMenu = new _H2(`MenubarHomeMenu`), _H2.OpenEditorsContext = new _H2(`OpenEditorsContext`), _H2.OpenEditorsContextShare = new _H2(`OpenEditorsContextShare`), _H2.ProblemsPanelContext = new _H2(`ProblemsPanelContext`), _H2.SCMInputBox = new _H2(`SCMInputBox`), _H2.SCMChangesSeparator = new _H2(`SCMChangesSeparator`), _H2.SCMChangesContext = new _H2(`SCMChangesContext`), _H2.SCMIncomingChanges = new _H2(`SCMIncomingChanges`), _H2.SCMIncomingChangesContext = new _H2(`SCMIncomingChangesContext`), _H2.SCMIncomingChangesSetting = new _H2(`SCMIncomingChangesSetting`), _H2.SCMOutgoingChanges = new _H2(`SCMOutgoingChanges`), _H2.SCMOutgoingChangesContext = new _H2(`SCMOutgoingChangesContext`), _H2.SCMOutgoingChangesSetting = new _H2(`SCMOutgoingChangesSetting`), _H2.SCMIncomingChangesAllChangesContext = new _H2(`SCMIncomingChangesAllChangesContext`), _H2.SCMIncomingChangesHistoryItemContext = new _H2(`SCMIncomingChangesHistoryItemContext`), _H2.SCMOutgoingChangesAllChangesContext = new _H2(`SCMOutgoingChangesAllChangesContext`), _H2.SCMOutgoingChangesHistoryItemContext = new _H2(`SCMOutgoingChangesHistoryItemContext`), _H2.SCMChangeContext = new _H2(`SCMChangeContext`), _H2.SCMResourceContext = new _H2(`SCMResourceContext`), _H2.SCMResourceContextShare = new _H2(`SCMResourceContextShare`), _H2.SCMResourceFolderContext = new _H2(`SCMResourceFolderContext`), _H2.SCMResourceGroupContext = new _H2(`SCMResourceGroupContext`), _H2.SCMSourceControl = new _H2(`SCMSourceControl`), _H2.SCMSourceControlInline = new _H2(`SCMSourceControlInline`), _H2.SCMSourceControlTitle = new _H2(`SCMSourceControlTitle`), _H2.SCMHistoryTitle = new _H2(`SCMHistoryTitle`), _H2.SCMTitle = new _H2(`SCMTitle`), _H2.SearchContext = new _H2(`SearchContext`), _H2.SearchActionMenu = new _H2(`SearchActionContext`), _H2.StatusBarWindowIndicatorMenu = new _H2(`StatusBarWindowIndicatorMenu`), _H2.StatusBarRemoteIndicatorMenu = new _H2(`StatusBarRemoteIndicatorMenu`), _H2.StickyScrollContext = new _H2(`StickyScrollContext`), _H2.TestItem = new _H2(`TestItem`), _H2.TestItemGutter = new _H2(`TestItemGutter`), _H2.TestProfilesContext = new _H2(`TestProfilesContext`), _H2.TestMessageContext = new _H2(`TestMessageContext`), _H2.TestMessageContent = new _H2(`TestMessageContent`), _H2.TestPeekElement = new _H2(`TestPeekElement`), _H2.TestPeekTitle = new _H2(`TestPeekTitle`), _H2.TestCallStack = new _H2(`TestCallStack`), _H2.TouchBarContext = new _H2(`TouchBarContext`), _H2.TitleBarContext = new _H2(`TitleBarContext`), _H2.TitleBarTitleContext = new _H2(`TitleBarTitleContext`), _H2.TunnelContext = new _H2(`TunnelContext`), _H2.TunnelPrivacy = new _H2(`TunnelPrivacy`), _H2.TunnelProtocol = new _H2(`TunnelProtocol`), _H2.TunnelPortInline = new _H2(`TunnelInline`), _H2.TunnelTitle = new _H2(`TunnelTitle`), _H2.TunnelLocalAddressInline = new _H2(`TunnelLocalAddressInline`), _H2.TunnelOriginInline = new _H2(`TunnelOriginInline`), _H2.ViewItemContext = new _H2(`ViewItemContext`), _H2.ViewContainerTitle = new _H2(`ViewContainerTitle`), _H2.ViewContainerTitleContext = new _H2(`ViewContainerTitleContext`), _H2.ViewTitle = new _H2(`ViewTitle`), _H2.ViewTitleContext = new _H2(`ViewTitleContext`), _H2.CommentEditorActions = new _H2(`CommentEditorActions`), _H2.CommentThreadTitle = new _H2(`CommentThreadTitle`), _H2.CommentThreadActions = new _H2(`CommentThreadActions`), _H2.CommentThreadAdditionalActions = new _H2(`CommentThreadAdditionalActions`), _H2.CommentThreadTitleContext = new _H2(`CommentThreadTitleContext`), _H2.CommentThreadCommentContext = new _H2(`CommentThreadCommentContext`), _H2.CommentTitle = new _H2(`CommentTitle`), _H2.CommentActions = new _H2(`CommentActions`), _H2.CommentsViewThreadActions = new _H2(`CommentsViewThreadActions`), _H2.InteractiveToolbar = new _H2(`InteractiveToolbar`), _H2.InteractiveCellTitle = new _H2(`InteractiveCellTitle`), _H2.InteractiveCellDelete = new _H2(`InteractiveCellDelete`), _H2.InteractiveCellExecute = new _H2(`InteractiveCellExecute`), _H2.InteractiveInputExecute = new _H2(`InteractiveInputExecute`), _H2.InteractiveInputConfig = new _H2(`InteractiveInputConfig`), _H2.ReplInputExecute = new _H2(`ReplInputExecute`), _H2.IssueReporter = new _H2(`IssueReporter`), _H2.NotebookToolbar = new _H2(`NotebookToolbar`), _H2.NotebookStickyScrollContext = new _H2(`NotebookStickyScrollContext`), _H2.NotebookCellTitle = new _H2(`NotebookCellTitle`), _H2.NotebookCellDelete = new _H2(`NotebookCellDelete`), _H2.NotebookCellInsert = new _H2(`NotebookCellInsert`), _H2.NotebookCellBetween = new _H2(`NotebookCellBetween`), _H2.NotebookCellListTop = new _H2(`NotebookCellTop`), _H2.NotebookCellExecute = new _H2(`NotebookCellExecute`), _H2.NotebookCellExecuteGoTo = new _H2(`NotebookCellExecuteGoTo`), _H2.NotebookCellExecutePrimary = new _H2(`NotebookCellExecutePrimary`), _H2.NotebookDiffCellInputTitle = new _H2(`NotebookDiffCellInputTitle`), _H2.NotebookDiffCellMetadataTitle = new _H2(`NotebookDiffCellMetadataTitle`), _H2.NotebookDiffCellOutputsTitle = new _H2(`NotebookDiffCellOutputsTitle`), _H2.NotebookOutputToolbar = new _H2(`NotebookOutputToolbar`), _H2.NotebookOutlineFilter = new _H2(`NotebookOutlineFilter`), _H2.NotebookOutlineActionMenu = new _H2(`NotebookOutlineActionMenu`), _H2.NotebookEditorLayoutConfigure = new _H2(`NotebookEditorLayoutConfigure`), _H2.NotebookKernelSource = new _H2(`NotebookKernelSource`), _H2.BulkEditTitle = new _H2(`BulkEditTitle`), _H2.BulkEditContext = new _H2(`BulkEditContext`), _H2.TimelineItemContext = new _H2(`TimelineItemContext`), _H2.TimelineTitle = new _H2(`TimelineTitle`), _H2.TimelineTitleContext = new _H2(`TimelineTitleContext`), _H2.TimelineFilterSubMenu = new _H2(`TimelineFilterSubMenu`), _H2.AccountsContext = new _H2(`AccountsContext`), _H2.SidebarTitle = new _H2(`SidebarTitle`), _H2.PanelTitle = new _H2(`PanelTitle`), _H2.AuxiliaryBarTitle = new _H2(`AuxiliaryBarTitle`), _H2.AuxiliaryBarHeader = new _H2(`AuxiliaryBarHeader`), _H2.TerminalInstanceContext = new _H2(`TerminalInstanceContext`), _H2.TerminalEditorInstanceContext = new _H2(`TerminalEditorInstanceContext`), _H2.TerminalNewDropdownContext = new _H2(`TerminalNewDropdownContext`), _H2.TerminalTabContext = new _H2(`TerminalTabContext`), _H2.TerminalTabEmptyAreaContext = new _H2(`TerminalTabEmptyAreaContext`), _H2.TerminalStickyScrollContext = new _H2(`TerminalStickyScrollContext`), _H2.WebviewContext = new _H2(`WebviewContext`), _H2.InlineCompletionsActions = new _H2(`InlineCompletionsActions`), _H2.InlineEditsActions = new _H2(`InlineEditsActions`), _H2.InlineEditActions = new _H2(`InlineEditActions`), _H2.NewFile = new _H2(`NewFile`), _H2.MergeInput1Toolbar = new _H2(`MergeToolbar1Toolbar`), _H2.MergeInput2Toolbar = new _H2(`MergeToolbar2Toolbar`), _H2.MergeBaseToolbar = new _H2(`MergeBaseToolbar`), _H2.MergeInputResultToolbar = new _H2(`MergeToolbarResultToolbar`), _H2.InlineSuggestionToolbar = new _H2(`InlineSuggestionToolbar`), _H2.InlineEditToolbar = new _H2(`InlineEditToolbar`), _H2.ChatContext = new _H2(`ChatContext`), _H2.ChatCodeBlock = new _H2(`ChatCodeblock`), _H2.ChatCompareBlock = new _H2(`ChatCompareBlock`), _H2.ChatMessageTitle = new _H2(`ChatMessageTitle`), _H2.ChatExecute = new _H2(`ChatExecute`), _H2.ChatExecuteSecondary = new _H2(`ChatExecuteSecondary`), _H2.ChatInputSide = new _H2(`ChatInputSide`), _H2.AccessibleView = new _H2(`AccessibleView`), _H2.MultiDiffEditorFileToolbar = new _H2(`MultiDiffEditorFileToolbar`), _H2.DiffEditorHunkToolbar = new _H2(`DiffEditorHunkToolbar`), _H2.DiffEditorSelectionToolbar = new _H2(`DiffEditorSelectionToolbar`), _H2);
  gm = Xf(`menuService`);
  var _m = (_I2 = class {
    static for(t10) {
      let n10 = this._all.get(t10);
      return n10 || (n10 = new _I2(t10), this._all.set(t10, n10)), n10;
    }
    static merge(t10) {
      let n10 = /* @__PURE__ */ new Set();
      for (let r10 of t10) r10 instanceof _I2 && n10.add(r10.id);
      return n10;
    }
    constructor(e10) {
      this.id = e10, this.has = (t10) => t10 === e10;
    }
  }, _I2._all = /* @__PURE__ */ new Map(), _I2);
  vm = new class {
    constructor() {
      this._commands = /* @__PURE__ */ new Map(), this._menuItems = /* @__PURE__ */ new Map(), this._onDidChangeMenu = new li({
        merge: _m.merge
      }), this.onDidChangeMenu = this._onDidChangeMenu.event;
    }
    addCommand(e10) {
      return this._commands.set(e10.id, e10), this._onDidChangeMenu.fire(_m.for(hm.CommandPalette)), k(() => {
        this._commands.delete(e10.id) && this._onDidChangeMenu.fire(_m.for(hm.CommandPalette));
      });
    }
    getCommand(e10) {
      return this._commands.get(e10);
    }
    getCommands() {
      let e10 = /* @__PURE__ */ new Map();
      return this._commands.forEach((t10, n10) => e10.set(n10, t10)), e10;
    }
    appendMenuItem(e10, t10) {
      let n10 = this._menuItems.get(e10);
      n10 || (n10 = new Rt(), this._menuItems.set(e10, n10));
      let r10 = n10.push(t10);
      return this._onDidChangeMenu.fire(_m.for(e10)), k(() => {
        r10(), this._onDidChangeMenu.fire(_m.for(e10));
      });
    }
    appendMenuItems(e10) {
      let t10 = new A();
      for (let { id: n10, item: r10 } of e10) t10.add(this.appendMenuItem(n10, r10));
      return t10;
    }
    getMenuItems(e10) {
      let t10;
      return t10 = this._menuItems.has(e10) ? [
        ...this._menuItems.get(e10)
      ] : [], e10 === hm.CommandPalette && this._appendImplicitItems(t10), t10;
    }
    _appendImplicitItems(e10) {
      let t10 = /* @__PURE__ */ new Set();
      for (let n10 of e10) pm(n10) && (t10.add(n10.command.id), n10.alt && t10.add(n10.alt.id));
      this._commands.forEach((n10, r10) => {
        t10.has(r10) || e10.push({
          command: n10
        });
      });
    }
  }();
  ym = class extends rp {
    constructor(e10, t10, n10) {
      super(`submenuitem.${e10.submenu.id}`, typeof e10.title == `string` ? e10.title : e10.title.value, n10, `submenu`), this.item = e10, this.hideActions = t10;
    }
  };
  bm = fm = class {
    static label(e10, t10) {
      return (t10 == null ? void 0 : t10.renderShortTitle) && e10.shortTitle ? typeof e10.shortTitle == `string` ? e10.shortTitle : e10.shortTitle.value : typeof e10.title == `string` ? e10.title : e10.title.value;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      var _a3;
      this.hideActions = r10, this.menuKeybinding = i10, this._commandService = o10, this.id = e10.id, this.label = fm.label(e10, n10), this.tooltip = (typeof e10.tooltip == `string` ? e10.tooltip : (_a3 = e10.tooltip) == null ? void 0 : _a3.value) ?? ``, this.enabled = !e10.precondition || a10.contextMatchesRules(e10.precondition), this.checked = void 0;
      let s10;
      if (e10.toggled) {
        let t11 = e10.toggled.condition ? e10.toggled : {
          condition: e10.toggled
        };
        this.checked = a10.contextMatchesRules(t11.condition), this.checked && t11.tooltip && (this.tooltip = typeof t11.tooltip == `string` ? t11.tooltip : t11.tooltip.value), this.checked && sp.isThemeIcon(t11.icon) && (s10 = t11.icon), this.checked && t11.title && (this.label = typeof t11.title == `string` ? t11.title : t11.title.value);
      }
      s10 || (s10 = sp.isThemeIcon(e10.icon) ? e10.icon : void 0), this.item = e10, this.alt = t10 ? new fm(t10, void 0, n10, r10, void 0, a10, o10) : void 0, this._options = n10, this.class = s10 && sp.asClassName(s10);
    }
    run(...e10) {
      var _a3, _b3;
      let t10 = [];
      return ((_a3 = this._options) == null ? void 0 : _a3.arg) && (t10 = [
        ...t10,
        this._options.arg
      ]), ((_b3 = this._options) == null ? void 0 : _b3.shouldForwardArgs) && (t10 = [
        ...t10,
        ...e10
      ]), this._commandService.executeCommand(this.id, ...t10);
    }
  };
  bm = fm = um([
    dm(5, qp),
    dm(6, cp)
  ], bm);
  xm = class {
    constructor(e10) {
      this.desc = e10;
    }
  };
  Sm = function(e10) {
    let t10 = [], n10 = new e10(), { f1: r10, menu: i10, keybinding: a10, ...o10 } = n10.desc;
    if (lp.getCommand(o10.id)) throw Error(`Cannot register two commands with the same id: ${o10.id}`);
    if (t10.push(lp.registerCommand({
      id: o10.id,
      handler: (e11, ...t11) => n10.run(e11, ...t11),
      metadata: o10.metadata
    })), Array.isArray(i10)) for (let e11 of i10) t10.push(vm.appendMenuItem(e11.id, {
      command: {
        ...o10,
        precondition: e11.precondition === null ? void 0 : o10.precondition
      },
      ...e11
    }));
    else i10 && t10.push(vm.appendMenuItem(i10.id, {
      command: {
        ...o10,
        precondition: i10.precondition === null ? void 0 : o10.precondition
      },
      ...i10
    }));
    if (r10 && (t10.push(vm.appendMenuItem(hm.CommandPalette, {
      command: o10,
      when: o10.precondition
    })), t10.push(vm.addCommand(o10))), Array.isArray(a10)) for (let e11 of a10) t10.push(sm.registerKeybindingRule({
      ...e11,
      id: o10.id,
      when: o10.precondition ? Ep.and(o10.precondition, e11.when) : e11.when
    }));
    else a10 && t10.push(sm.registerKeybindingRule({
      ...a10,
      id: o10.id,
      when: o10.precondition ? Ep.and(o10.precondition, a10.when) : a10.when
    }));
    return {
      dispose() {
        Rr(t10);
      }
    };
  };
  Cm = Xf(`telemetryService`);
  wm = Xf(`logService`);
  var Tm;
  (function(e10) {
    e10[e10.Off = 0] = `Off`, e10[e10.Trace = 1] = `Trace`, e10[e10.Debug = 2] = `Debug`, e10[e10.Info = 3] = `Info`, e10[e10.Warning = 4] = `Warning`, e10[e10.Error = 5] = `Error`;
  })(Tm || (Tm = {}));
  const Em = Tm.Info;
  var Dm = class extends j {
    constructor() {
      super(...arguments), this.level = Em, this._onDidChangeLogLevel = this._register(new N()), this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;
    }
    setLevel(e10) {
      this.level !== e10 && (this.level = e10, this._onDidChangeLogLevel.fire(this.level));
    }
    getLevel() {
      return this.level;
    }
    checkLogLevel(e10) {
      return this.level !== Tm.Off && this.level <= e10;
    }
  }, Om = class extends Dm {
    constructor(e10 = Em, t10 = true) {
      super(), this.useColors = t10, this.setLevel(e10);
    }
    trace(e10, ...t10) {
      this.checkLogLevel(Tm.Trace) && (this.useColors ? console.log(`%cTRACE`, `color: #888`, e10, ...t10) : console.log(e10, ...t10));
    }
    debug(e10, ...t10) {
      this.checkLogLevel(Tm.Debug) && (this.useColors ? console.log(`%cDEBUG`, `background: #eee; color: #888`, e10, ...t10) : console.log(e10, ...t10));
    }
    info(e10, ...t10) {
      this.checkLogLevel(Tm.Info) && (this.useColors ? console.log(`%c INFO`, `color: #33f`, e10, ...t10) : console.log(e10, ...t10));
    }
    warn(e10, ...t10) {
      this.checkLogLevel(Tm.Warning) && (this.useColors ? console.log(`%c WARN`, `color: #993`, e10, ...t10) : console.log(e10, ...t10));
    }
    error(e10, ...t10) {
      this.checkLogLevel(Tm.Error) && (this.useColors ? console.log(`%c  ERR`, `color: #f33`, e10, ...t10) : console.error(e10, ...t10));
    }
  }, km = class extends Dm {
    constructor(e10) {
      super(), this.loggers = e10, e10.length && this.setLevel(e10[0].getLevel());
    }
    setLevel(e10) {
      for (let t10 of this.loggers) t10.setLevel(e10);
      super.setLevel(e10);
    }
    trace(e10, ...t10) {
      for (let n10 of this.loggers) n10.trace(e10, ...t10);
    }
    debug(e10, ...t10) {
      for (let n10 of this.loggers) n10.debug(e10, ...t10);
    }
    info(e10, ...t10) {
      for (let n10 of this.loggers) n10.info(e10, ...t10);
    }
    warn(e10, ...t10) {
      for (let n10 of this.loggers) n10.warn(e10, ...t10);
    }
    error(e10, ...t10) {
      for (let n10 of this.loggers) n10.error(e10, ...t10);
    }
    dispose() {
      for (let e10 of this.loggers) e10.dispose();
      super.dispose();
    }
  };
  function Am(e10) {
    switch (e10) {
      case Tm.Trace:
        return `trace`;
      case Tm.Debug:
        return `debug`;
      case Tm.Info:
        return `info`;
      case Tm.Warning:
        return `warn`;
      case Tm.Error:
        return `error`;
      case Tm.Off:
        return `off`;
    }
  }
  const fee = new U(`logLevel`, Am(Tm.Info));
  let jm, Nm;
  jm = class {
    constructor(e10) {
      this.id = e10.id, this.precondition = e10.precondition, this._kbOpts = e10.kbOpts, this._menuOpts = e10.menuOpts, this.metadata = e10.metadata;
    }
    register() {
      if (Array.isArray(this._menuOpts) ? this._menuOpts.forEach(this._registerMenuItem, this) : this._menuOpts && this._registerMenuItem(this._menuOpts), this._kbOpts) {
        let e10 = Array.isArray(this._kbOpts) ? this._kbOpts : [
          this._kbOpts
        ];
        for (let t10 of e10) {
          let e11 = t10.kbExpr;
          this.precondition && (e11 = e11 ? Ep.and(e11, this.precondition) : this.precondition);
          let n10 = {
            id: this.id,
            weight: t10.weight,
            args: t10.args,
            when: e11,
            primary: t10.primary,
            secondary: t10.secondary,
            win: t10.win,
            linux: t10.linux,
            mac: t10.mac
          };
          sm.registerKeybindingRule(n10);
        }
      }
      lp.registerCommand({
        id: this.id,
        handler: (e10, t10) => this.runCommand(e10, t10),
        metadata: this.metadata
      });
    }
    _registerMenuItem(e10) {
      vm.appendMenuItem(e10.menuId, {
        group: e10.group,
        command: {
          id: this.id,
          title: e10.title,
          icon: e10.icon,
          precondition: this.precondition
        },
        when: e10.when,
        order: e10.order
      });
    }
  };
  Mm = class extends jm {
    constructor() {
      super(...arguments), this._implementations = [];
    }
    addImplementation(e10, t10, n10, r10) {
      return this._implementations.push({
        priority: e10,
        name: t10,
        implementation: n10,
        when: r10
      }), this._implementations.sort((e11, t11) => t11.priority - e11.priority), {
        dispose: () => {
          for (let e11 = 0; e11 < this._implementations.length; e11++) if (this._implementations[e11].implementation === n10) {
            this._implementations.splice(e11, 1);
            return;
          }
        }
      };
    }
    runCommand(e10, t10) {
      let n10 = e10.get(wm), r10 = e10.get(qp);
      n10.trace(`Executing Command '${this.id}' which has ${this._implementations.length} bound.`);
      for (let i10 of this._implementations) {
        if (i10.when) {
          let e11 = r10.getContext(Od()), t11 = i10.when.evaluate(e11);
          if (!t11) continue;
        }
        let a10 = i10.implementation(e10, t10);
        if (a10) return n10.trace(`Command '${this.id}' was handled by '${i10.name}'.`), typeof a10 == `boolean` ? void 0 : a10;
      }
      n10.trace(`The Command '${this.id}' was not handled by any implementation.`);
    }
  };
  Nm = class extends jm {
    constructor(e10, t10) {
      super(t10), this.command = e10;
    }
    runCommand(e10, t10) {
      return this.command.runCommand(e10, t10);
    }
  };
  Pm = class e10 extends jm {
    static bindToContribution(t10) {
      return class extends e10 {
        constructor(e11) {
          super(e11), this._callback = e11.handler;
        }
        runEditorCommand(e11, n10, r10) {
          let i10 = t10(n10);
          i10 && this._callback(i10, r10);
        }
      };
    }
    static runEditorCommand(e11, t10, n10, r10) {
      let i10 = e11.get(Zf), a10 = i10.getFocusedCodeEditor() || i10.getActiveCodeEditor();
      if (a10) return a10.invokeWithinContext((e12) => {
        let i11 = e12.get(qp);
        if (i11.contextMatchesRules(n10 ?? void 0)) return r10(e12, a10, t10);
      });
    }
    runCommand(t10, n10) {
      return e10.runEditorCommand(t10, n10, this.precondition, (e11, t11, n11) => this.runEditorCommand(e11, t11, n11));
    }
  };
  Fm = class e10 extends Pm {
    static convertOptions(e11) {
      let t10;
      t10 = Array.isArray(e11.menuOpts) ? e11.menuOpts : e11.menuOpts ? [
        e11.menuOpts
      ] : [];
      function n10(t11) {
        return t11.menuId || (t11.menuId = hm.EditorContext), t11.title || (t11.title = e11.label), t11.when = Ep.and(e11.precondition, t11.when), t11;
      }
      return Array.isArray(e11.contextMenuOpts) ? t10.push(...e11.contextMenuOpts.map(n10)) : e11.contextMenuOpts && t10.push(n10(e11.contextMenuOpts)), e11.menuOpts = t10, e11;
    }
    constructor(t10) {
      super(e10.convertOptions(t10)), this.label = t10.label, this.alias = t10.alias;
    }
    runEditorCommand(e11, t10, n10) {
      return this.reportTelemetry(e11, t10), this.run(e11, t10, n10 || {});
    }
    reportTelemetry(e11, t10) {
      e11.get(Cm).publicLog2(`editorActionInvoked`, {
        name: this.label,
        id: this.id
      });
    }
  };
  Im = class extends Fm {
    constructor() {
      super(...arguments), this._implementations = [];
    }
    addImplementation(e10, t10) {
      return this._implementations.push([
        e10,
        t10
      ]), this._implementations.sort((e11, t11) => t11[0] - e11[0]), {
        dispose: () => {
          for (let e11 = 0; e11 < this._implementations.length; e11++) if (this._implementations[e11][1] === t10) {
            this._implementations.splice(e11, 1);
            return;
          }
        }
      };
    }
    run(e10, t10, n10) {
      for (let r10 of this._implementations) {
        let i10 = r10[1](e10, t10, n10);
        if (i10) return typeof i10 == `boolean` ? void 0 : i10;
      }
    }
  };
  Lm = class extends xm {
    run(e10, ...t10) {
      let n10 = e10.get(Zf), r10 = n10.getFocusedCodeEditor() || n10.getActiveCodeEditor();
      if (r10) return r10.invokeWithinContext((e11) => {
        var _a3;
        let n11 = e11.get(qp), i10 = e11.get(wm), a10 = n11.contextMatchesRules(this.desc.precondition ?? void 0);
        if (!a10) {
          i10.debug(`[EditorAction2] NOT running command because its precondition is FALSE`, this.desc.id, (_a3 = this.desc.precondition) == null ? void 0 : _a3.serialize());
          return;
        }
        return this.runEditorCommand(e11, r10, ...t10);
      });
    }
  };
  Rm = function(e10, t10) {
    lp.registerCommand(e10, function(e11, ...n10) {
      let r10 = e11.get(Jf), [i10, a10] = n10;
      Ee(xa.isUri(i10)), Ee(P.isIPosition(a10));
      let o10 = e11.get(Qf).getModel(i10);
      if (o10) {
        let e12 = P.lift(a10);
        return r10.invokeFunction(t10, o10, e12, ...n10.slice(2));
      }
      return e11.get($f).createModelReference(i10).then((e12) => new Promise((i11, o11) => {
        try {
          let o12 = r10.invokeFunction(t10, e12.object.textEditorModel, P.lift(a10), n10.slice(2));
          i11(o12);
        } catch (e13) {
          o11(e13);
        }
      }).finally(() => {
        e12.dispose();
      }));
    });
  };
  W = function(e10) {
    return Gm.INSTANCE.registerEditorCommand(e10), e10;
  };
  zm = function(e10) {
    let t10 = new e10();
    return Gm.INSTANCE.registerEditorAction(t10), t10;
  };
  Bm = function(e10) {
    return Gm.INSTANCE.registerEditorAction(e10), e10;
  };
  Vm = function(e10) {
    Gm.INSTANCE.registerEditorAction(e10);
  };
  Hm = function(e10, t10, n10) {
    Gm.INSTANCE.registerEditorContribution(e10, t10, n10);
  };
  (function(e10) {
    function t10(e11) {
      return Gm.INSTANCE.getEditorCommand(e11);
    }
    e10.getEditorCommand = t10;
    function n10() {
      return Gm.INSTANCE.getEditorActions();
    }
    e10.getEditorActions = n10;
    function r10() {
      return Gm.INSTANCE.getEditorContributions();
    }
    e10.getEditorContributions = r10;
    function i10(e11) {
      return Gm.INSTANCE.getEditorContributions().filter((t11) => e11.indexOf(t11.id) >= 0);
    }
    e10.getSomeEditorContributions = i10;
    function a10() {
      return Gm.INSTANCE.getDiffEditorContributions();
    }
    e10.getDiffEditorContributions = a10;
  })(Um || (Um = {}));
  const Wm = {
    EditorCommonContributions: `editor.contributions`
  };
  var Gm = (_J2 = class {
    constructor() {
      this.editorContributions = [], this.diffEditorContributions = [], this.editorActions = [], this.editorCommands = /* @__PURE__ */ Object.create(null);
    }
    registerEditorContribution(e10, t10, n10) {
      this.editorContributions.push({
        id: e10,
        ctor: t10,
        instantiation: n10
      });
    }
    getEditorContributions() {
      return this.editorContributions.slice(0);
    }
    getDiffEditorContributions() {
      return this.diffEditorContributions.slice(0);
    }
    registerEditorAction(e10) {
      e10.register(), this.editorActions.push(e10);
    }
    getEditorActions() {
      return this.editorActions;
    }
    registerEditorCommand(e10) {
      e10.register(), this.editorCommands[e10.id] = e10;
    }
    getEditorCommand(e10) {
      return this.editorCommands[e10] || null;
    }
  }, _J2.INSTANCE = new _J2(), _J2);
  am.add(Wm.EditorCommonContributions, Gm.INSTANCE);
  function Km(e10) {
    return e10.register(), e10;
  }
  const qm = Km(new Mm({
    id: `undo`,
    precondition: void 0,
    kbOpts: {
      weight: 0,
      primary: 2104
    },
    menuOpts: [
      {
        menuId: hm.MenubarEditMenu,
        group: `1_do`,
        title: T({
          key: `miUndo`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Undo`),
        order: 1
      },
      {
        menuId: hm.CommandPalette,
        group: ``,
        title: T(`undo`, `Undo`),
        order: 1
      }
    ]
  }));
  Km(new Nm(qm, {
    id: `default:undo`,
    precondition: void 0
  }));
  const Jm = Km(new Mm({
    id: `redo`,
    precondition: void 0,
    kbOpts: {
      weight: 0,
      primary: 2103,
      secondary: [
        3128
      ],
      mac: {
        primary: 3128
      }
    },
    menuOpts: [
      {
        menuId: hm.MenubarEditMenu,
        group: `1_do`,
        title: T({
          key: `miRedo`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Redo`),
        order: 2
      },
      {
        menuId: hm.CommandPalette,
        group: ``,
        title: T(`redo`, `Redo`),
        order: 1
      }
    ]
  }));
  Km(new Nm(Jm, {
    id: `default:redo`,
    precondition: void 0
  }));
  const Ym = Km(new Mm({
    id: `editor.action.selectAll`,
    precondition: void 0,
    kbOpts: {
      weight: 0,
      kbExpr: null,
      primary: 2079
    },
    menuOpts: [
      {
        menuId: hm.MenubarSelectionMenu,
        group: `1_basic`,
        title: T({
          key: `miSelectAll`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Select All`),
        order: 1
      },
      {
        menuId: hm.CommandPalette,
        group: ``,
        title: T(`selectAll`, `Select All`),
        order: 1
      }
    ]
  })), Xm = `default`, Zm = `$initialize`;
  let Qm = false;
  function $m(e10) {
    _t && (Qm || (Qm = true, console.warn(`Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq`)), console.warn(e10.message));
  }
  var eh = class {
    constructor(e10, t10, n10, r10, i10) {
      this.vsWorker = e10, this.req = t10, this.channel = n10, this.method = r10, this.args = i10, this.type = 0;
    }
  }, th = class {
    constructor(e10, t10, n10, r10) {
      this.vsWorker = e10, this.seq = t10, this.res = n10, this.err = r10, this.type = 1;
    }
  }, nh = class {
    constructor(e10, t10, n10, r10, i10) {
      this.vsWorker = e10, this.req = t10, this.channel = n10, this.eventName = r10, this.arg = i10, this.type = 2;
    }
  }, rh = class {
    constructor(e10, t10, n10) {
      this.vsWorker = e10, this.req = t10, this.event = n10, this.type = 3;
    }
  }, ih = class {
    constructor(e10, t10) {
      this.vsWorker = e10, this.req = t10, this.type = 4;
    }
  }, ah = class {
    constructor(e10) {
      this._workerId = -1, this._handler = e10, this._lastSentReq = 0, this._pendingReplies = /* @__PURE__ */ Object.create(null), this._pendingEmitters = /* @__PURE__ */ new Map(), this._pendingEvents = /* @__PURE__ */ new Map();
    }
    setWorkerId(e10) {
      this._workerId = e10;
    }
    sendMessage(e10, t10, n10) {
      let r10 = String(++this._lastSentReq);
      return new Promise((i10, a10) => {
        this._pendingReplies[r10] = {
          resolve: i10,
          reject: a10
        }, this._send(new eh(this._workerId, r10, e10, t10, n10));
      });
    }
    listen(e10, t10, n10) {
      let r10 = null, i10 = new N({
        onWillAddFirstListener: () => {
          r10 = String(++this._lastSentReq), this._pendingEmitters.set(r10, i10), this._send(new nh(this._workerId, r10, e10, t10, n10));
        },
        onDidRemoveLastListener: () => {
          this._pendingEmitters.delete(r10), this._send(new ih(this._workerId, r10)), r10 = null;
        }
      });
      return i10.event;
    }
    handleMessage(e10) {
      !e10 || !e10.vsWorker || this._workerId !== -1 && e10.vsWorker !== this._workerId || this._handleMessage(e10);
    }
    createProxyToRemoteChannel(e10, t10) {
      let n10 = {
        get: (n11, r10) => (typeof r10 == `string` && !n11[r10] && (ch(r10) ? n11[r10] = (t11) => this.listen(e10, r10, t11) : sh(r10) ? n11[r10] = this.listen(e10, r10, void 0) : r10.charCodeAt(0) === 36 && (n11[r10] = async (...n12) => (await (t10 == null ? void 0 : t10()), this.sendMessage(e10, r10, n12)))), n11[r10])
      };
      return new Proxy(/* @__PURE__ */ Object.create(null), n10);
    }
    _handleMessage(e10) {
      switch (e10.type) {
        case 1:
          return this._handleReplyMessage(e10);
        case 0:
          return this._handleRequestMessage(e10);
        case 2:
          return this._handleSubscribeEventMessage(e10);
        case 3:
          return this._handleEventMessage(e10);
        case 4:
          return this._handleUnsubscribeEventMessage(e10);
      }
    }
    _handleReplyMessage(e10) {
      if (!this._pendingReplies[e10.seq]) {
        console.warn(`Got reply to unknown seq`);
        return;
      }
      let t10 = this._pendingReplies[e10.seq];
      if (delete this._pendingReplies[e10.seq], e10.err) {
        let n10 = e10.err;
        e10.err.$isError && (n10 = Error(), n10.name = e10.err.name, n10.message = e10.err.message, n10.stack = e10.err.stack), t10.reject(n10);
        return;
      }
      t10.resolve(e10.res);
    }
    _handleRequestMessage(e10) {
      let t10 = e10.req, n10 = this._handler.handleMessage(e10.channel, e10.method, e10.args);
      n10.then((e11) => {
        this._send(new th(this._workerId, t10, e11, void 0));
      }, (e11) => {
        e11.detail instanceof Error && (e11.detail = vr(e11.detail)), this._send(new th(this._workerId, t10, void 0, vr(e11)));
      });
    }
    _handleSubscribeEventMessage(e10) {
      let t10 = e10.req, n10 = this._handler.handleEvent(e10.channel, e10.eventName, e10.arg)((e11) => {
        this._send(new rh(this._workerId, t10, e11));
      });
      this._pendingEvents.set(t10, n10);
    }
    _handleEventMessage(e10) {
      if (!this._pendingEmitters.has(e10.req)) {
        console.warn(`Got event for unknown req`);
        return;
      }
      this._pendingEmitters.get(e10.req).fire(e10.event);
    }
    _handleUnsubscribeEventMessage(e10) {
      if (!this._pendingEvents.has(e10.req)) {
        console.warn(`Got unsubscribe for unknown req`);
        return;
      }
      this._pendingEvents.get(e10.req).dispose(), this._pendingEvents.delete(e10.req);
    }
    _send(e10) {
      let t10 = [];
      if (e10.type === 0) for (let n10 = 0; n10 < e10.args.length; n10++) e10.args[n10] instanceof ArrayBuffer && t10.push(e10.args[n10]);
      else e10.type === 1 && e10.res instanceof ArrayBuffer && t10.push(e10.res);
      this._handler.sendMessage(e10, t10);
    }
  }, oh = class extends j {
    constructor(e10, t10) {
      super(), this._localChannels = /* @__PURE__ */ new Map(), this._worker = this._register(e10.create({
        amdModuleId: `vs/base/common/worker/simpleWorker`,
        esmModuleLocation: t10.esmModuleLocation,
        label: t10.label
      }, (e11) => {
        this._protocol.handleMessage(e11);
      }, (e11) => {
        gr(e11);
      })), this._protocol = new ah({
        sendMessage: (e11, t11) => {
          this._worker.postMessage(e11, t11);
        },
        handleMessage: (e11, t11, n11) => this._handleMessage(e11, t11, n11),
        handleEvent: (e11, t11, n11) => this._handleEvent(e11, t11, n11)
      }), this._protocol.setWorkerId(this._worker.getId());
      let n10 = null, r10 = globalThis.require;
      r10 !== void 0 && typeof r10.getConfig == `function` ? n10 = r10.getConfig() : globalThis.requirejs !== void 0 && (n10 = globalThis.requirejs.s.contexts._.config), this._onModuleLoaded = this._protocol.sendMessage(Xm, Zm, [
        this._worker.getId(),
        JSON.parse(JSON.stringify(n10)),
        t10.amdModuleId
      ]), this.proxy = this._protocol.createProxyToRemoteChannel(Xm, async () => {
        await this._onModuleLoaded;
      }), this._onModuleLoaded.catch((e11) => {
        this._onError(`Worker failed to load ` + t10.amdModuleId, e11);
      });
    }
    _handleMessage(e10, t10, n10) {
      let r10 = this._localChannels.get(e10);
      if (!r10) return Promise.reject(Error(`Missing channel ${e10} on main thread`));
      if (typeof r10[t10] != `function`) return Promise.reject(Error(`Missing method ${t10} on main thread channel ${e10}`));
      try {
        return Promise.resolve(r10[t10].apply(r10, n10));
      } catch (e11) {
        return Promise.reject(e11);
      }
    }
    _handleEvent(e10, t10, n10) {
      let r10 = this._localChannels.get(e10);
      if (!r10) throw Error(`Missing channel ${e10} on main thread`);
      if (ch(t10)) {
        let i10 = r10[t10].call(r10, n10);
        if (typeof i10 != `function`) throw Error(`Missing dynamic event ${t10} on main thread channel ${e10}.`);
        return i10;
      }
      if (sh(t10)) {
        let n11 = r10[t10];
        if (typeof n11 != `function`) throw Error(`Missing event ${t10} on main thread channel ${e10}.`);
        return n11;
      }
      throw Error(`Malformed event name ${t10}`);
    }
    setChannel(e10, t10) {
      this._localChannels.set(e10, t10);
    }
    _onError(e10, t10) {
      console.error(e10), console.info(t10);
    }
  };
  function sh(e10) {
    return e10[0] === `o` && e10[1] === `n` && Fs(e10.charCodeAt(2));
  }
  function ch(e10) {
    return /^onDynamic/.test(e10) && Fs(e10.charCodeAt(9));
  }
  lh = function(e10, t10) {
    var _a3;
    let n10 = globalThis.MonacoEnvironment;
    if (n10 == null ? void 0 : n10.createTrustedTypesPolicy) try {
      return n10.createTrustedTypesPolicy(e10, t10);
    } catch (e11) {
      gr(e11);
      return;
    }
    try {
      return (_a3 = globalThis.trustedTypes) == null ? void 0 : _a3.createPolicy(e10, t10);
    } catch (e11) {
      gr(e11);
      return;
    }
  };
  const uh = true;
  let dh;
  dh = typeof self == `object` && self.constructor && self.constructor.name === `DedicatedWorkerGlobalScope` && globalThis.workerttPolicy !== void 0 ? globalThis.workerttPolicy : lh(`defaultWorkerFactory`, {
    createScriptURL: (e10) => e10
  });
  function fh(e10, t10) {
    let n10 = globalThis.MonacoEnvironment;
    if (n10) {
      if (typeof n10.getWorker == `function`) return n10.getWorker(`workerMain.js`, t10);
      if (typeof n10.getWorkerUrl == `function`) {
        let e11 = n10.getWorkerUrl(`workerMain.js`, t10);
        return new Worker(dh ? dh.createScriptURL(e11) : e11, {
          name: t10,
          type: uh ? `module` : void 0
        });
      }
    }
    if (e10) {
      let n11 = ph(t10, e10.toString(true)), r10 = new Worker(dh ? dh.createScriptURL(n11) : n11, {
        name: t10,
        type: uh ? `module` : void 0
      });
      return uh ? mh(r10) : r10;
    }
    throw Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);
  }
  function ph(e10, t10, n10) {
    let r10 = /^((http:)|(https:)|(file:)|(vscode-file:))/.test(t10);
    if (!(r10 && t10.substring(0, globalThis.origin.length) !== globalThis.origin)) {
      let n11 = t10.lastIndexOf(`?`), r11 = t10.lastIndexOf(`#`, n11), i11 = n11 > 0 ? new URLSearchParams(t10.substring(n11 + 1, ~r11 ? r11 : void 0)) : new URLSearchParams();
      ju.addSearchParam(i11, true, true);
      let a10 = i11.toString();
      t10 = a10 ? `${t10}?${i11.toString()}#${e10}` : `${t10}#${e10}`;
    }
    !uh && !r10 && (t10 = new URL(t10, globalThis.origin).toString());
    let i10 = new Blob([
      v([
        `/*${e10}*/`,
        n10 ? `globalThis.MonacoEnvironment = { baseUrl: '${n10}' };` : void 0,
        `globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(Ve())};`,
        `globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(He())};`,
        `globalThis._VSCODE_FILE_ROOT = '${globalThis._VSCODE_FILE_ROOT}';`,
        `const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,
        `globalThis.workerttPolicy = ttPolicy;`,
        uh ? `await import(ttPolicy?.createScriptURL('${t10}') ?? '${t10}');` : `importScripts(ttPolicy?.createScriptURL('${t10}') ?? '${t10}');`,
        uh ? `globalThis.postMessage({ type: 'vscode-worker-ready' });` : void 0,
        `/*${e10}*/`
      ]).join(``)
    ], {
      type: `application/javascript`
    });
    return URL.createObjectURL(i10);
  }
  function mh(e10) {
    return new Promise((t10, n10) => {
      e10.onmessage = function(n11) {
        n11.data.type === `vscode-worker-ready` && (e10.onmessage = null, t10(e10));
      }, e10.onerror = n10;
    });
  }
  function hh(e10) {
    return typeof e10.then == `function`;
  }
  var gh = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this.id = n10, this.label = r10;
      let o10 = fh(e10, r10);
      hh(o10) ? this.worker = o10 : this.worker = Promise.resolve(o10), this.postMessage(t10, []), this.worker.then((e11) => {
        e11.onmessage = function(e12) {
          i10(e12.data);
        }, e11.onmessageerror = a10, typeof e11.addEventListener == `function` && e11.addEventListener(`error`, a10);
      }), this._register(k(() => {
        var _a3;
        (_a3 = this.worker) == null ? void 0 : _a3.then((e11) => {
          e11.onmessage = null, e11.onmessageerror = null, e11.removeEventListener(`error`, a10), e11.terminate();
        }), this.worker = null;
      }));
    }
    getId() {
      return this.id;
    }
    postMessage(e10, t10) {
      var _a3;
      (_a3 = this.worker) == null ? void 0 : _a3.then((n10) => {
        try {
          n10.postMessage(e10, t10);
        } catch (e11) {
          gr(e11), gr(Error(`FAILED to post message to '${this.label}'-worker`, {
            cause: e11
          }));
        }
      });
    }
  }, _h = class {
    constructor(e10, t10) {
      this.amdModuleId = e10, this.label = t10, this.esmModuleLocation = uh ? Au.asBrowserUri(`${e10}.esm.js`) : void 0;
    }
  }, vh = (_K2 = class {
    constructor() {
      this._webWorkerFailedBeforeError = false;
    }
    create(t10, n10, r10) {
      let i10 = ++_K2.LAST_WORKER_ID;
      if (this._webWorkerFailedBeforeError) throw this._webWorkerFailedBeforeError;
      return new gh(t10.esmModuleLocation, t10.amdModuleId, i10, t10.label || `anonymous` + i10, n10, (e10) => {
        $m(e10), this._webWorkerFailedBeforeError = e10, r10(e10);
      });
    }
  }, _K2.LAST_WORKER_ID = 0, _K2);
  function yh(e10, t10) {
    let n10 = typeof e10 == `string` ? new _h(e10, t10) : e10;
    return new oh(new vh(), n10);
  }
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Indent = 1] = `Indent`, e10[e10.IndentOutdent = 2] = `IndentOutdent`, e10[e10.Outdent = 3] = `Outdent`;
  })(bh || (bh = {}));
  var xh = class {
    constructor(e10) {
      if (this._neutralCharacter = null, this._neutralCharacterSearched = false, this.open = e10.open, this.close = e10.close, this._inString = true, this._inComment = true, this._inRegEx = true, Array.isArray(e10.notIn)) for (let t10 = 0, n10 = e10.notIn.length; t10 < n10; t10++) {
        let n11 = e10.notIn[t10];
        switch (n11) {
          case `string`:
            this._inString = false;
            break;
          case `comment`:
            this._inComment = false;
            break;
          case `regex`:
            this._inRegEx = false;
            break;
        }
      }
    }
    isOK(e10) {
      switch (e10) {
        case 0:
          return true;
        case 1:
          return this._inComment;
        case 2:
          return this._inString;
        case 3:
          return this._inRegEx;
      }
    }
    shouldAutoClose(e10, t10) {
      if (e10.getTokenCount() === 0) return true;
      let n10 = e10.findTokenIndexAtOffset(t10 - 2), r10 = e10.getStandardTokenType(n10);
      return this.isOK(r10);
    }
    _findNeutralCharacterInRange(e10, t10) {
      for (let n10 = e10; n10 <= t10; n10++) {
        let e11 = String.fromCharCode(n10);
        if (!this.open.includes(e11) && !this.close.includes(e11)) return e11;
      }
      return null;
    }
    findNeutralCharacter() {
      return this._neutralCharacterSearched || (this._neutralCharacterSearched = true, this._neutralCharacter || (this._neutralCharacter = this._findNeutralCharacterInRange(48, 57)), this._neutralCharacter || (this._neutralCharacter = this._findNeutralCharacterInRange(97, 122)), this._neutralCharacter || (this._neutralCharacter = this._findNeutralCharacterInRange(65, 90))), this._neutralCharacter;
    }
  }, Sh = class {
    constructor(e10) {
      this.autoClosingPairsOpenByStart = /* @__PURE__ */ new Map(), this.autoClosingPairsOpenByEnd = /* @__PURE__ */ new Map(), this.autoClosingPairsCloseByStart = /* @__PURE__ */ new Map(), this.autoClosingPairsCloseByEnd = /* @__PURE__ */ new Map(), this.autoClosingPairsCloseSingleChar = /* @__PURE__ */ new Map();
      for (let t10 of e10) Ch(this.autoClosingPairsOpenByStart, t10.open.charAt(0), t10), Ch(this.autoClosingPairsOpenByEnd, t10.open.charAt(t10.open.length - 1), t10), Ch(this.autoClosingPairsCloseByStart, t10.close.charAt(0), t10), Ch(this.autoClosingPairsCloseByEnd, t10.close.charAt(t10.close.length - 1), t10), t10.close.length === 1 && t10.open.length === 1 && Ch(this.autoClosingPairsCloseSingleChar, t10.close, t10);
    }
  };
  function Ch(e10, t10, n10) {
    e10.has(t10) ? e10.get(t10).push(n10) : e10.set(t10, [
      n10
    ]);
  }
  var wh = (_L2 = class {
    constructor(t10) {
      if (t10.autoClosingPairs ? this._autoClosingPairs = t10.autoClosingPairs.map((e10) => new xh(e10)) : t10.brackets ? this._autoClosingPairs = t10.brackets.map((e10) => new xh({
        open: e10[0],
        close: e10[1]
      })) : this._autoClosingPairs = [], t10.__electricCharacterSupport && t10.__electricCharacterSupport.docComment) {
        let e10 = t10.__electricCharacterSupport.docComment;
        this._autoClosingPairs.push(new xh({
          open: e10.open,
          close: e10.close || ``
        }));
      }
      this._autoCloseBeforeForQuotes = typeof t10.autoCloseBefore == `string` ? t10.autoCloseBefore : _L2.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES, this._autoCloseBeforeForBrackets = typeof t10.autoCloseBefore == `string` ? t10.autoCloseBefore : _L2.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS, this._surroundingPairs = t10.surroundingPairs || this._autoClosingPairs;
    }
    getAutoClosingPairs() {
      return this._autoClosingPairs;
    }
    getAutoCloseBeforeSet(e10) {
      return e10 ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets;
    }
    getSurroundingPairs() {
      return this._surroundingPairs;
    }
  }, _L2.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = `;:.,=}])> 
	`, _L2.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = `'"\`;:.,=}])> 
	`, _L2);
  function Th(e10, t10) {
    let n10 = e10.getCount(), r10 = e10.findTokenIndexAtOffset(t10), i10 = e10.getLanguageId(r10), a10 = r10;
    for (; a10 + 1 < n10 && e10.getLanguageId(a10 + 1) === i10; ) a10++;
    let o10 = r10;
    for (; o10 > 0 && e10.getLanguageId(o10 - 1) === i10; ) o10--;
    return new Eh(e10, i10, o10, a10 + 1, e10.getStartOffset(o10), e10.getEndOffset(a10));
  }
  var Eh = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this._scopedLineTokensBrand = void 0, this._actual = e10, this.languageId = t10, this._firstTokenIndex = n10, this._lastTokenIndex = r10, this.firstCharOffset = i10, this._lastCharOffset = a10, this.languageIdCodec = e10.languageIdCodec;
    }
    getLineContent() {
      let e10 = this._actual.getLineContent();
      return e10.substring(this.firstCharOffset, this._lastCharOffset);
    }
    getLineLength() {
      return this._lastCharOffset - this.firstCharOffset;
    }
    getActualLineContentBefore(e10) {
      let t10 = this._actual.getLineContent();
      return t10.substring(0, this.firstCharOffset + e10);
    }
    getTokenCount() {
      return this._lastTokenIndex - this._firstTokenIndex;
    }
    findTokenIndexAtOffset(e10) {
      return this._actual.findTokenIndexAtOffset(e10 + this.firstCharOffset) - this._firstTokenIndex;
    }
    getStandardTokenType(e10) {
      return this._actual.getStandardTokenType(e10 + this._firstTokenIndex);
    }
    toIViewLineTokens() {
      return this._actual.sliceAndInflate(this.firstCharOffset, this._lastCharOffset, 0);
    }
  };
  function Dh(e10) {
    return (e10 & 3) != 0;
  }
  i();
  const Oh = r !== void 0, pee = new us(() => new Uint8Array(256));
  let kh;
  Ah = class e10 {
    static wrap(t10) {
      return Oh && !r.isBuffer(t10) && (t10 = r.from(t10.buffer, t10.byteOffset, t10.byteLength)), new e10(t10);
    }
    constructor(e11) {
      this.buffer = e11, this.byteLength = this.buffer.byteLength;
    }
    toString() {
      return Oh ? this.buffer.toString() : (kh || (kh = new TextDecoder()), kh.decode(this.buffer));
    }
  };
  function jh(e10, t10) {
    return e10[t10 + 0] << 0 >>> 0 | e10[t10 + 1] << 8 >>> 0;
  }
  function Mh(e10, t10, n10) {
    e10[n10 + 0] = t10 & 255, t10 >>>= 8, e10[n10 + 1] = t10 & 255;
  }
  function Nh(e10, t10) {
    return e10[t10] * 2 ** 24 + e10[t10 + 1] * 2 ** 16 + e10[t10 + 2] * 2 ** 8 + e10[t10 + 3];
  }
  function Ph(e10, t10, n10) {
    e10[n10 + 3] = t10, t10 >>>= 8, e10[n10 + 2] = t10, t10 >>>= 8, e10[n10 + 1] = t10, t10 >>>= 8, e10[n10] = t10;
  }
  function Fh(e10, t10) {
    return e10[t10];
  }
  function Ih(e10, t10, n10) {
    e10[n10] = t10;
  }
  let Lh;
  function Rh() {
    return Lh || (Lh = new TextDecoder(`UTF-16LE`)), Lh;
  }
  let zh;
  function Bh() {
    return zh || (zh = new TextDecoder(`UTF-16BE`)), zh;
  }
  let Vh;
  function Hh() {
    return Vh || (Vh = kt() ? Rh() : Bh()), Vh;
  }
  function Uh(e10, t10, n10) {
    let r10 = new Uint16Array(e10.buffer, t10, n10);
    return n10 > 0 && (r10[0] === 65279 || r10[0] === 65534) ? Wh(e10, t10, n10) : Rh().decode(r10);
  }
  function Wh(e10, t10, n10) {
    let r10 = [], i10 = 0;
    for (let a10 = 0; a10 < n10; a10++) {
      let n11 = jh(e10, t10);
      t10 += 2, r10[i10++] = String.fromCharCode(n11);
    }
    return r10.join(``);
  }
  let Kh;
  Gh = class {
    constructor(e10) {
      this._capacity = e10 | 0, this._buffer = new Uint16Array(this._capacity), this._completedStrings = null, this._bufferLength = 0;
    }
    reset() {
      this._completedStrings = null, this._bufferLength = 0;
    }
    build() {
      return this._completedStrings === null ? this._buildBuffer() : (this._flushBuffer(), this._completedStrings.join(``));
    }
    _buildBuffer() {
      if (this._bufferLength === 0) return ``;
      let e10 = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);
      return Hh().decode(e10);
    }
    _flushBuffer() {
      let e10 = this._buildBuffer();
      this._bufferLength = 0, this._completedStrings === null ? this._completedStrings = [
        e10
      ] : this._completedStrings[this._completedStrings.length] = e10;
    }
    appendCharCode(e10) {
      let t10 = this._capacity - this._bufferLength;
      t10 <= 1 && (t10 === 0 || Bs(e10)) && this._flushBuffer(), this._buffer[this._bufferLength++] = e10;
    }
    appendASCIICharCode(e10) {
      this._bufferLength === this._capacity && this._flushBuffer(), this._buffer[this._bufferLength++] = e10;
    }
    appendString(e10) {
      let t10 = e10.length;
      if (this._bufferLength + t10 >= this._capacity) {
        this._flushBuffer(), this._completedStrings[this._completedStrings.length] = e10;
        return;
      }
      for (let n10 = 0; n10 < t10; n10++) this._buffer[this._bufferLength++] = e10.charCodeAt(n10);
    }
  };
  Kh = class e10 {
    constructor(t10, n10, r10, i10, a10, o10) {
      this._richEditBracketBrand = void 0, this.languageId = t10, this.index = n10, this.open = r10, this.close = i10, this.forwardRegex = a10, this.reversedRegex = o10, this._openSet = e10._toSet(this.open), this._closeSet = e10._toSet(this.close);
    }
    isOpen(e11) {
      return this._openSet.has(e11);
    }
    isClose(e11) {
      return this._closeSet.has(e11);
    }
    static _toSet(e11) {
      let t10 = /* @__PURE__ */ new Set();
      for (let n10 of e11) t10.add(n10);
      return t10;
    }
  };
  function qh(e10) {
    let t10 = e10.length;
    e10 = e10.map((e11) => [
      e11[0].toLowerCase(),
      e11[1].toLowerCase()
    ]);
    let n10 = [];
    for (let e11 = 0; e11 < t10; e11++) n10[e11] = e11;
    let r10 = (e11, t11) => {
      let [n11, r11] = e11, [i11, a11] = t11;
      return n11 === i11 || n11 === a11 || r11 === i11 || r11 === a11;
    }, i10 = (e11, r11) => {
      let i11 = Math.min(e11, r11), a11 = Math.max(e11, r11);
      for (let e12 = 0; e12 < t10; e12++) n10[e12] === a11 && (n10[e12] = i11);
    };
    for (let a11 = 0; a11 < t10; a11++) {
      let o10 = e10[a11];
      for (let s10 = a11 + 1; s10 < t10; s10++) {
        let t11 = e10[s10];
        r10(o10, t11) && i10(n10[a11], n10[s10]);
      }
    }
    let a10 = [];
    for (let r11 = 0; r11 < t10; r11++) {
      let i11 = [], o10 = [];
      for (let a11 = 0; a11 < t10; a11++) if (n10[a11] === r11) {
        let [t11, n11] = e10[a11];
        i11.push(t11), o10.push(n11);
      }
      i11.length > 0 && a10.push({
        open: i11,
        close: o10
      });
    }
    return a10;
  }
  var Jh = class {
    constructor(e10, t10) {
      this._richEditBracketsBrand = void 0;
      let n10 = qh(t10);
      this.brackets = n10.map((t11, r10) => new Kh(e10, r10, t11.open, t11.close, Qh(t11.open, t11.close, n10, r10), $h(t11.open, t11.close, n10, r10))), this.forwardRegex = eg(this.brackets), this.reversedRegex = tg(this.brackets), this.textIsBracket = {}, this.textIsOpenBracket = {}, this.maxBracketLength = 0;
      for (let e11 of this.brackets) {
        for (let t11 of e11.open) this.textIsBracket[t11] = e11, this.textIsOpenBracket[t11] = true, this.maxBracketLength = Math.max(this.maxBracketLength, t11.length);
        for (let t11 of e11.close) this.textIsBracket[t11] = e11, this.textIsOpenBracket[t11] = false, this.maxBracketLength = Math.max(this.maxBracketLength, t11.length);
      }
    }
  };
  function Yh(e10, t10, n10, r10) {
    for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
      if (i10 === n10) continue;
      let a11 = t10[i10];
      for (let t11 of a11.open) t11.indexOf(e10) >= 0 && r10.push(t11);
      for (let t11 of a11.close) t11.indexOf(e10) >= 0 && r10.push(t11);
    }
  }
  function Xh(e10, t10) {
    return e10.length - t10.length;
  }
  function Zh(e10) {
    if (e10.length <= 1) return e10;
    let t10 = [], n10 = /* @__PURE__ */ new Set();
    for (let r10 of e10) {
      if (n10.has(r10)) continue;
      t10.push(r10), n10.add(r10);
    }
    return t10;
  }
  function Qh(e10, t10, n10, r10) {
    let i10 = [];
    i10 = i10.concat(e10), i10 = i10.concat(t10);
    for (let e11 = 0, t11 = i10.length; e11 < t11; e11++) Yh(i10[e11], n10, r10, i10);
    return i10 = Zh(i10), i10.sort(Xh), i10.reverse(), rg(i10);
  }
  function $h(e10, t10, n10, r10) {
    let i10 = [];
    i10 = i10.concat(e10), i10 = i10.concat(t10);
    for (let e11 = 0, t11 = i10.length; e11 < t11; e11++) Yh(i10[e11], n10, r10, i10);
    return i10 = Zh(i10), i10.sort(Xh), i10.reverse(), rg(i10.map(ig));
  }
  function eg(e10) {
    let t10 = [];
    for (let n10 of e10) {
      for (let e11 of n10.open) t10.push(e11);
      for (let e11 of n10.close) t10.push(e11);
    }
    return t10 = Zh(t10), rg(t10);
  }
  function tg(e10) {
    let t10 = [];
    for (let n10 of e10) {
      for (let e11 of n10.open) t10.push(e11);
      for (let e11 of n10.close) t10.push(e11);
    }
    return t10 = Zh(t10), rg(t10.map(ig));
  }
  function ng(e10) {
    let t10 = /^[\w ]+$/.test(e10);
    return e10 = gs(e10), t10 ? `\\b${e10}\\b` : e10;
  }
  function rg(e10, t10) {
    let n10 = `(${e10.map(ng).join(`)|(`)})`;
    return Ss(n10, true, t10);
  }
  const ig = /* @__PURE__ */ function() {
    function e10(e11) {
      let t11 = new Uint16Array(e11.length), n11 = 0;
      for (let r10 = e11.length - 1; r10 >= 0; r10--) t11[n11++] = e11.charCodeAt(r10);
      return Hh().decode(t11);
    }
    let t10 = null, n10 = null;
    return function(r10) {
      return t10 !== r10 && (t10 = r10, n10 = e10(t10)), n10;
    };
  }();
  var ag = class {
    static _findPrevBracketInText(e10, t10, n10, r10) {
      let i10 = n10.match(e10);
      if (!i10) return null;
      let a10 = n10.length - (i10.index || 0), o10 = i10[0].length, s10 = r10 + a10;
      return new F(t10, s10 - o10 + 1, t10, s10 + 1);
    }
    static findPrevBracketInRange(e10, t10, n10, r10, i10) {
      let a10 = ig(n10), o10 = a10.substring(n10.length - i10, n10.length - r10);
      return this._findPrevBracketInText(e10, t10, o10, r10);
    }
    static findNextBracketInText(e10, t10, n10, r10) {
      let i10 = n10.match(e10);
      if (!i10) return null;
      let a10 = i10.index || 0, o10 = i10[0].length;
      if (o10 === 0) return null;
      let s10 = r10 + a10;
      return new F(t10, s10 + 1, t10, s10 + 1 + o10);
    }
    static findNextBracketInRange(e10, t10, n10, r10, i10) {
      let a10 = n10.substring(r10, i10);
      return this.findNextBracketInText(e10, t10, a10, r10);
    }
  }, og = class {
    constructor(e10) {
      this._richEditBrackets = e10;
    }
    getElectricCharacters() {
      let e10 = [];
      if (this._richEditBrackets) for (let t10 of this._richEditBrackets.brackets) for (let n10 of t10.close) {
        let t11 = n10.charAt(n10.length - 1);
        e10.push(t11);
      }
      return S(e10);
    }
    onElectricCharacter(e10, t10, n10) {
      if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) return null;
      let r10 = t10.findTokenIndexAtOffset(n10 - 1);
      if (Dh(t10.getStandardTokenType(r10))) return null;
      let i10 = this._richEditBrackets.reversedRegex, a10 = t10.getLineContent().substring(0, n10 - 1) + e10, o10 = ag.findPrevBracketInRange(i10, 1, a10, 0, a10.length);
      if (!o10) return null;
      let s10 = a10.substring(o10.startColumn - 1, o10.endColumn - 1).toLowerCase(), c10 = this._richEditBrackets.textIsOpenBracket[s10];
      if (c10) return null;
      let l10 = t10.getActualLineContentBefore(o10.startColumn - 1);
      return /^\s*$/.test(l10) ? {
        matchOpenBracket: s10
      } : null;
    }
  };
  function sg(e10) {
    return e10.global && (e10.lastIndex = 0), true;
  }
  var cg = class {
    constructor(e10) {
      this._indentationRules = e10;
    }
    shouldIncrease(e10) {
      return !!(this._indentationRules && this._indentationRules.increaseIndentPattern && sg(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(e10));
    }
    shouldDecrease(e10) {
      return !!(this._indentationRules && this._indentationRules.decreaseIndentPattern && sg(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(e10));
    }
    shouldIndentNextLine(e10) {
      return !!(this._indentationRules && this._indentationRules.indentNextLinePattern && sg(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(e10));
    }
    shouldIgnore(e10) {
      return !!(this._indentationRules && this._indentationRules.unIndentedLinePattern && sg(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(e10));
    }
    getIndentMetadata(e10) {
      let t10 = 0;
      return this.shouldIncrease(e10) && (t10 += 1), this.shouldDecrease(e10) && (t10 += 2), this.shouldIndentNextLine(e10) && (t10 += 4), this.shouldIgnore(e10) && (t10 += 8), t10;
    }
  }, lg = class e10 {
    constructor(t10) {
      t10 || (t10 = {}), t10.brackets = t10.brackets || [
        [
          `(`,
          `)`
        ],
        [
          `{`,
          `}`
        ],
        [
          `[`,
          `]`
        ]
      ], this._brackets = [], t10.brackets.forEach((t11) => {
        let n10 = e10._createOpenBracketRegExp(t11[0]), r10 = e10._createCloseBracketRegExp(t11[1]);
        n10 && r10 && this._brackets.push({
          open: t11[0],
          openRegExp: n10,
          close: t11[1],
          closeRegExp: r10
        });
      }), this._regExpRules = t10.onEnterRules || [];
    }
    onEnter(e11, t10, n10, r10) {
      if (e11 >= 3) for (let e12 = 0, i10 = this._regExpRules.length; e12 < i10; e12++) {
        let i11 = this._regExpRules[e12], a10 = [
          {
            reg: i11.beforeText,
            text: n10
          },
          {
            reg: i11.afterText,
            text: r10
          },
          {
            reg: i11.previousLineText,
            text: t10
          }
        ].every((e13) => e13.reg ? (e13.reg.lastIndex = 0, e13.reg.test(e13.text)) : true);
        if (a10) return i11.action;
      }
      if (e11 >= 2 && n10.length > 0 && r10.length > 0) for (let e12 = 0, t11 = this._brackets.length; e12 < t11; e12++) {
        let t12 = this._brackets[e12];
        if (t12.openRegExp.test(n10) && t12.closeRegExp.test(r10)) return {
          indentAction: bh.IndentOutdent
        };
      }
      if (e11 >= 2 && n10.length > 0) for (let e12 = 0, t11 = this._brackets.length; e12 < t11; e12++) {
        let t12 = this._brackets[e12];
        if (t12.openRegExp.test(n10)) return {
          indentAction: bh.Indent
        };
      }
      return null;
    }
    static _createOpenBracketRegExp(t10) {
      let n10 = gs(t10);
      return /\B/.test(n10.charAt(0)) || (n10 = `\\b` + n10), n10 += `\\s*$`, e10._safeRegExp(n10);
    }
    static _createCloseBracketRegExp(t10) {
      let n10 = gs(t10);
      return /\B/.test(n10.charAt(n10.length - 1)) || (n10 += `\\b`), n10 = `^\\s*` + n10, e10._safeRegExp(n10);
    }
    static _safeRegExp(e11) {
      try {
        return new RegExp(e11);
      } catch (e12) {
        return gr(e12), null;
      }
    }
  };
  ug = Xf(`configurationService`);
  function dg(e10, t10) {
    let n10 = /* @__PURE__ */ Object.create(null);
    for (let r10 in e10) fg(n10, r10, e10[r10], t10);
    return n10;
  }
  function fg(e10, t10, n10, r10) {
    let i10 = t10.split(`.`), a10 = i10.pop(), o10 = e10;
    for (let e11 = 0; e11 < i10.length; e11++) {
      let n11 = i10[e11], a11 = o10[n11];
      switch (typeof a11) {
        case `undefined`:
          a11 = o10[n11] = /* @__PURE__ */ Object.create(null);
          break;
        case `object`:
          if (a11 === null) {
            r10(`Ignoring ${t10} as ${i10.slice(0, e11 + 1).join(`.`)} is null`);
            return;
          }
          break;
        default:
          r10(`Ignoring ${t10} as ${i10.slice(0, e11 + 1).join(`.`)} is ${JSON.stringify(a11)}`);
          return;
      }
      o10 = a11;
    }
    if (typeof o10 == `object` && o10) try {
      o10[a10] = n10;
    } catch {
      r10(`Ignoring ${t10} as ${i10.join(`.`)} is ${JSON.stringify(o10)}`);
    }
    else r10(`Ignoring ${t10} as ${i10.join(`.`)} is ${JSON.stringify(o10)}`);
  }
  function pg(e10, t10) {
    let n10 = t10.split(`.`);
    mg(e10, n10);
  }
  function mg(e10, t10) {
    let n10 = t10.shift();
    if (t10.length === 0) {
      delete e10[n10];
      return;
    }
    if (Object.keys(e10).indexOf(n10) !== -1) {
      let r10 = e10[n10];
      typeof r10 == `object` && !Array.isArray(r10) && (mg(r10, t10), Object.keys(r10).length === 0 && delete e10[n10]);
    }
  }
  function hg(e10, t10, n10) {
    function r10(e11, t11) {
      let n11 = e11;
      for (let e12 of t11) {
        if (typeof n11 != `object` || !n11) return;
        n11 = n11[e12];
      }
      return n11;
    }
    let i10 = t10.split(`.`), a10 = r10(e10, i10);
    return a10 === void 0 ? n10 : a10;
  }
  function gg(e10) {
    return e10.replace(/[\[\]]/g, ``);
  }
  _g = Xf(`languageService`);
  var vg = class {
    constructor(e10, t10 = [], n10 = false) {
      this.ctor = e10, this.staticArguments = t10, this.supportsDelayedInstantiation = n10;
    }
  };
  const yg = [];
  bg = function(e10, t10, n10) {
    t10 instanceof vg || (t10 = new vg(t10, [], !!n10)), yg.push([
      e10,
      t10
    ]);
  };
  function xg() {
    return yg;
  }
  let Cg;
  Sg = Object.freeze({
    text: `text/plain`,
    binary: `application/octet-stream`,
    unknown: `application/unknown`,
    markdown: `text/markdown`,
    latex: `text/latex`,
    uriList: `text/uri-list`
  });
  Cg = {
    JSONContribution: `base.contributions.json`
  };
  function wg(e10) {
    return e10.length > 0 && e10.charAt(e10.length - 1) === `#` ? e10.substring(0, e10.length - 1) : e10;
  }
  var Tg = class {
    constructor() {
      this._onDidChangeSchema = new N(), this.schemasById = {};
    }
    registerSchema(e10, t10) {
      this.schemasById[wg(e10)] = t10, this._onDidChangeSchema.fire(e10);
    }
    notifySchemaChanged(e10) {
      this._onDidChangeSchema.fire(e10);
    }
  };
  const Eg = new Tg();
  am.add(Cg.JSONContribution, Eg);
  let Og, kg, Ag, jg, Mg, Ng, Pg, Fg;
  Dg = {
    Configuration: `base.contributions.configuration`
  };
  Og = {
    properties: {},
    patternProperties: {}
  };
  kg = {
    properties: {},
    patternProperties: {}
  };
  Ag = {
    properties: {},
    patternProperties: {}
  };
  jg = {
    properties: {},
    patternProperties: {}
  };
  Mg = {
    properties: {},
    patternProperties: {}
  };
  Ng = {
    properties: {},
    patternProperties: {}
  };
  Pg = `vscode://schemas/settings/resourceLanguage`;
  Fg = am.as(Cg.JSONContribution);
  var Ig = class {
    constructor() {
      this.registeredConfigurationDefaults = [], this.overrideIdentifiers = /* @__PURE__ */ new Set(), this._onDidSchemaChange = new N(), this._onDidUpdateConfiguration = new N(), this.configurationDefaultsOverrides = /* @__PURE__ */ new Map(), this.defaultLanguageConfigurationOverridesNode = {
        id: `defaultOverrides`,
        title: T(`defaultLanguageConfigurationOverrides.title`, `Default Language Configuration Overrides`),
        properties: {}
      }, this.configurationContributors = [
        this.defaultLanguageConfigurationOverridesNode
      ], this.resourceLanguageSettingsSchema = {
        properties: {},
        patternProperties: {},
        additionalProperties: true,
        allowTrailingCommas: true,
        allowComments: true
      }, this.configurationProperties = {}, this.policyConfigurations = /* @__PURE__ */ new Map(), this.excludedConfigurationProperties = {}, Fg.registerSchema(Pg, this.resourceLanguageSettingsSchema), this.registerOverridePropertyPatternKey();
    }
    registerConfiguration(e10, t10 = true) {
      this.registerConfigurations([
        e10
      ], t10);
    }
    registerConfigurations(e10, t10 = true) {
      let n10 = /* @__PURE__ */ new Set();
      this.doRegisterConfigurations(e10, t10, n10), Fg.registerSchema(Pg, this.resourceLanguageSettingsSchema), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({
        properties: n10
      });
    }
    registerDefaultConfigurations(e10) {
      let t10 = /* @__PURE__ */ new Set();
      this.doRegisterDefaultConfigurations(e10, t10), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({
        properties: t10,
        defaultsOverrides: true
      });
    }
    doRegisterDefaultConfigurations(e10, t10) {
      this.registeredConfigurationDefaults.push(...e10);
      let n10 = [];
      for (let { overrides: r10, source: i10 } of e10) for (let e11 in r10) {
        t10.add(e11);
        let a10 = this.configurationDefaultsOverrides.get(e11) ?? this.configurationDefaultsOverrides.set(e11, {
          configurationDefaultOverrides: []
        }).get(e11), o10 = r10[e11];
        if (a10.configurationDefaultOverrides.push({
          value: o10,
          source: i10
        }), Bg.test(e11)) {
          let t11 = this.mergeDefaultConfigurationsForOverrideIdentifier(e11, o10, i10, a10.configurationDefaultOverrideValue);
          if (!t11) continue;
          a10.configurationDefaultOverrideValue = t11, this.updateDefaultOverrideProperty(e11, t11, i10), n10.push(...Vg(e11));
        } else {
          let t11 = this.mergeDefaultConfigurationsForConfigurationProperty(e11, o10, i10, a10.configurationDefaultOverrideValue);
          if (!t11) continue;
          a10.configurationDefaultOverrideValue = t11;
          let n11 = this.configurationProperties[e11];
          n11 && (this.updatePropertyDefaultValue(e11, n11), this.updateSchema(e11, n11));
        }
      }
      this.doRegisterOverrideIdentifiers(n10);
    }
    updateDefaultOverrideProperty(e10, t10, n10) {
      let r10 = {
        type: `object`,
        default: t10.value,
        description: T(`defaultLanguageConfiguration.description`, `Configure settings to be overridden for the {0} language.`, gg(e10)),
        $ref: Pg,
        defaultDefaultValue: t10.value,
        source: n10,
        defaultValueSource: n10
      };
      this.configurationProperties[e10] = r10, this.defaultLanguageConfigurationOverridesNode.properties[e10] = r10;
    }
    mergeDefaultConfigurationsForOverrideIdentifier(e10, t10, n10, r10) {
      let i10 = (r10 == null ? void 0 : r10.value) || {}, a10 = (r10 == null ? void 0 : r10.source) ?? /* @__PURE__ */ new Map();
      if (!(a10 instanceof Map)) {
        console.error(`objectConfigurationSources is not a Map`);
        return;
      }
      for (let e11 of Object.keys(t10)) {
        let r11 = t10[e11], o10 = ve(r11) && (Ce(i10[e11]) || ve(i10[e11]));
        if (o10) {
          if (i10[e11] = {
            ...i10[e11] ?? {},
            ...r11
          }, n10) for (let t11 in r11) a10.set(`${e11}.${t11}`, n10);
        } else i10[e11] = r11, n10 ? a10.set(e11, n10) : a10.delete(e11);
      }
      return {
        value: i10,
        source: a10
      };
    }
    mergeDefaultConfigurationsForConfigurationProperty(e10, t10, n10, r10) {
      let i10 = this.configurationProperties[e10], a10 = (r10 == null ? void 0 : r10.value) ?? (i10 == null ? void 0 : i10.defaultDefaultValue), o10 = n10, s10 = ve(t10) && (i10 !== void 0 && i10.type === `object` || i10 === void 0 && (Ce(a10) || ve(a10)));
      if (s10) {
        if (o10 = (r10 == null ? void 0 : r10.source) ?? /* @__PURE__ */ new Map(), !(o10 instanceof Map)) {
          console.error(`defaultValueSource is not a Map`);
          return;
        }
        for (let r11 in t10) n10 && o10.set(`${e10}.${r11}`, n10);
        t10 = {
          ...ve(a10) ? a10 : {},
          ...t10
        };
      }
      return {
        value: t10,
        source: o10
      };
    }
    registerOverrideIdentifiers(e10) {
      this.doRegisterOverrideIdentifiers(e10), this._onDidSchemaChange.fire();
    }
    doRegisterOverrideIdentifiers(e10) {
      for (let t10 of e10) this.overrideIdentifiers.add(t10);
      this.updateOverridePropertyPatternKey();
    }
    doRegisterConfigurations(e10, t10, n10) {
      e10.forEach((e11) => {
        this.validateAndRegisterProperties(e11, t10, e11.extensionInfo, e11.restrictedProperties, void 0, n10), this.configurationContributors.push(e11), this.registerJSONConfiguration(e11);
      });
    }
    validateAndRegisterProperties(e10, t10 = true, n10, r10, i10 = 3, a10) {
      var _a3;
      i10 = Te(e10.scope) ? i10 : e10.scope;
      let o10 = e10.properties;
      if (o10) for (let e11 in o10) {
        let s11 = o10[e11];
        if (t10 && Wg(e11, s11)) {
          delete o10[e11];
          continue;
        }
        if (s11.source = n10, s11.defaultDefaultValue = o10[e11].default, this.updatePropertyDefaultValue(e11, s11), Bg.test(e11) ? s11.scope = void 0 : (s11.scope = Te(s11.scope) ? i10 : s11.scope, s11.restricted = Te(s11.restricted) ? !!(r10 == null ? void 0 : r10.includes(e11)) : s11.restricted), o10[e11].hasOwnProperty(`included`) && !o10[e11].included) {
          this.excludedConfigurationProperties[e11] = o10[e11], delete o10[e11];
          continue;
        } else this.configurationProperties[e11] = o10[e11], ((_a3 = o10[e11].policy) == null ? void 0 : _a3.name) && this.policyConfigurations.set(o10[e11].policy.name, e11);
        !o10[e11].deprecationMessage && o10[e11].markdownDeprecationMessage && (o10[e11].deprecationMessage = o10[e11].markdownDeprecationMessage), a10.add(e11);
      }
      let s10 = e10.allOf;
      if (s10) for (let e11 of s10) this.validateAndRegisterProperties(e11, t10, n10, r10, i10, a10);
    }
    getConfigurationProperties() {
      return this.configurationProperties;
    }
    getPolicyConfigurations() {
      return this.policyConfigurations;
    }
    registerJSONConfiguration(e10) {
      let t10 = (e11) => {
        let n10 = e11.properties;
        if (n10) for (let e12 in n10) this.updateSchema(e12, n10[e12]);
        let r10 = e11.allOf;
        r10 == null ? void 0 : r10.forEach(t10);
      };
      t10(e10);
    }
    updateSchema(e10, t10) {
      switch (Og.properties[e10] = t10, t10.scope) {
        case 1:
          kg.properties[e10] = t10;
          break;
        case 2:
          Ag.properties[e10] = t10;
          break;
        case 6:
          jg.properties[e10] = t10;
          break;
        case 3:
          Mg.properties[e10] = t10;
          break;
        case 4:
          Ng.properties[e10] = t10;
          break;
        case 5:
          Ng.properties[e10] = t10, this.resourceLanguageSettingsSchema.properties[e10] = t10;
          break;
      }
    }
    updateOverridePropertyPatternKey() {
      for (let e10 of this.overrideIdentifiers.values()) {
        let t10 = `[${e10}]`, n10 = {
          type: `object`,
          description: T(`overrideSettings.defaultDescription`, `Configure editor settings to be overridden for a language.`),
          errorMessage: T(`overrideSettings.errorMessage`, `This setting does not support per-language configuration.`),
          $ref: Pg
        };
        this.updatePropertyDefaultValue(t10, n10), Og.properties[t10] = n10, kg.properties[t10] = n10, Ag.properties[t10] = n10, jg.properties[t10] = n10, Mg.properties[t10] = n10, Ng.properties[t10] = n10;
      }
    }
    registerOverridePropertyPatternKey() {
      let e10 = {
        type: `object`,
        description: T(`overrideSettings.defaultDescription`, `Configure editor settings to be overridden for a language.`),
        errorMessage: T(`overrideSettings.errorMessage`, `This setting does not support per-language configuration.`),
        $ref: Pg
      };
      Og.patternProperties[zg] = e10, kg.patternProperties[zg] = e10, Ag.patternProperties[zg] = e10, jg.patternProperties[zg] = e10, Mg.patternProperties[zg] = e10, Ng.patternProperties[zg] = e10, this._onDidSchemaChange.fire();
    }
    updatePropertyDefaultValue(e10, t10) {
      var _a3;
      let n10 = (_a3 = this.configurationDefaultsOverrides.get(e10)) == null ? void 0 : _a3.configurationDefaultOverrideValue, r10, i10;
      n10 && (!t10.disallowConfigurationDefault || !n10.source) && (r10 = n10.value, i10 = n10.source), Ce(r10) && (r10 = t10.defaultDefaultValue, i10 = void 0), Ce(r10) && (r10 = Hg(t10.type)), t10.default = r10, t10.defaultValueSource = i10;
    }
  };
  const Lg = `\\[([^\\]]+)\\]`, Rg = new RegExp(Lg, `g`), zg = `^(${Lg})+$`, Bg = new RegExp(zg);
  function Vg(e10) {
    let t10 = [];
    if (Bg.test(e10)) {
      let n10 = Rg.exec(e10);
      for (; n10 == null ? void 0 : n10.length; ) {
        let r10 = n10[1].trim();
        r10 && t10.push(r10), n10 = Rg.exec(e10);
      }
    }
    return S(t10);
  }
  function Hg(e10) {
    let t10 = Array.isArray(e10) ? e10[0] : e10;
    switch (t10) {
      case `boolean`:
        return false;
      case `integer`:
      case `number`:
        return 0;
      case `string`:
        return ``;
      case `array`:
        return [];
      case `object`:
        return {};
      default:
        return null;
    }
  }
  const Ug = new Ig();
  am.add(Dg.Configuration, Ug);
  function Wg(e10, t10) {
    var _a3, _b3, _c3, _d3;
    return e10.trim() ? Bg.test(e10) ? T(`config.property.languageDefault`, `Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.`, e10) : Ug.getConfigurationProperties()[e10] === void 0 ? ((_a3 = t10.policy) == null ? void 0 : _a3.name) && Ug.getPolicyConfigurations().get((_b3 = t10.policy) == null ? void 0 : _b3.name) !== void 0 ? T(`config.policy.duplicate`, `Cannot register '{0}'. The associated policy {1} is already registered with {2}.`, e10, (_c3 = t10.policy) == null ? void 0 : _c3.name, Ug.getPolicyConfigurations().get((_d3 = t10.policy) == null ? void 0 : _d3.name)) : null : T(`config.property.duplicate`, `Cannot register '{0}'. This property is already registered.`, e10) : T(`config.property.empty`, `Cannot register an empty property`);
  }
  const Gg = {
    ModesRegistry: `editor.modesRegistry`
  };
  var Kg = class {
    constructor() {
      this._onDidChangeLanguages = new N(), this.onDidChangeLanguages = this._onDidChangeLanguages.event, this._languages = [];
    }
    registerLanguage(e10) {
      return this._languages.push(e10), this._onDidChangeLanguages.fire(void 0), {
        dispose: () => {
          for (let t10 = 0, n10 = this._languages.length; t10 < n10; t10++) if (this._languages[t10] === e10) {
            this._languages.splice(t10, 1);
            return;
          }
        }
      };
    }
    getLanguages() {
      return this._languages;
    }
  };
  const qg = new Kg();
  am.add(Gg.ModesRegistry, qg);
  let Yg;
  Jg = `plaintext`;
  Yg = `.txt`;
  qg.registerLanguage({
    id: Jg,
    extensions: [
      Yg
    ],
    aliases: [
      T(`plainText.alias`, `Plain Text`),
      `text`
    ],
    mimetypes: [
      Sg.text
    ]
  }), am.as(Dg.Configuration).registerDefaultConfigurations([
    {
      overrides: {
        "[plaintext]": {
          "editor.unicodeHighlight.ambiguousCharacters": false,
          "editor.unicodeHighlight.invisibleCharacters": false
        }
      }
    }
  ]);
  var Xg = class {
    constructor(e10, t10) {
      this.languageId = e10;
      let n10 = t10.brackets ? Zg(t10.brackets) : [], r10 = new ls((e11) => {
        let t11 = /* @__PURE__ */ new Set();
        return {
          info: new $g(this, e11, t11),
          closing: t11
        };
      }), i10 = new ls((e11) => {
        let t11 = /* @__PURE__ */ new Set(), n11 = /* @__PURE__ */ new Set();
        return {
          info: new e_(this, e11, t11, n11),
          opening: t11,
          openingColorized: n11
        };
      });
      for (let [e11, t11] of n10) {
        let n11 = r10.get(e11), a11 = i10.get(t11);
        n11.closing.add(a11.info), a11.opening.add(n11.info);
      }
      let a10 = t10.colorizedBracketPairs ? Zg(t10.colorizedBracketPairs) : n10.filter((e11) => !(e11[0] === `<` && e11[1] === `>`));
      for (let [e11, t11] of a10) {
        let n11 = r10.get(e11), a11 = i10.get(t11);
        n11.closing.add(a11.info), a11.openingColorized.add(n11.info), a11.opening.add(n11.info);
      }
      this._openingBrackets = new Map([
        ...r10.cachedValues
      ].map(([e11, t11]) => [
        e11,
        t11.info
      ])), this._closingBrackets = new Map([
        ...i10.cachedValues
      ].map(([e11, t11]) => [
        e11,
        t11.info
      ]));
    }
    get openingBrackets() {
      return [
        ...this._openingBrackets.values()
      ];
    }
    get closingBrackets() {
      return [
        ...this._closingBrackets.values()
      ];
    }
    getOpeningBracketInfo(e10) {
      return this._openingBrackets.get(e10);
    }
    getClosingBracketInfo(e10) {
      return this._closingBrackets.get(e10);
    }
    getBracketInfo(e10) {
      return this.getOpeningBracketInfo(e10) || this.getClosingBracketInfo(e10);
    }
    getBracketRegExp(e10) {
      let t10 = Array.from([
        ...this._openingBrackets.keys(),
        ...this._closingBrackets.keys()
      ]);
      return rg(t10, e10);
    }
  };
  function Zg(e10) {
    return e10.filter(([e11, t10]) => e11 !== `` && t10 !== ``);
  }
  var Qg = class {
    constructor(e10, t10) {
      this.config = e10, this.bracketText = t10;
    }
    get languageId() {
      return this.config.languageId;
    }
  }, $g = class extends Qg {
    constructor(e10, t10, n10) {
      super(e10, t10), this.openedBrackets = n10, this.isOpeningBracket = true;
    }
  }, e_ = class extends Qg {
    constructor(e10, t10, n10, r10) {
      super(e10, t10), this.openingBrackets = n10, this.openingColorizedBrackets = r10, this.isOpeningBracket = false;
    }
    closes(e10) {
      return e10.config === this.config ? this.openingBrackets.has(e10) : false;
    }
    closesColorized(e10) {
      return e10.config === this.config ? this.openingColorizedBrackets.has(e10) : false;
    }
    getOpeningBrackets() {
      return [
        ...this.openingBrackets
      ];
    }
  }, t_ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, n_ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, r_ = class {
    constructor(e10) {
      this.languageId = e10;
    }
    affects(e10) {
      return this.languageId ? this.languageId === e10 : true;
    }
  };
  i_ = Xf(`languageConfigurationService`);
  let a_ = class extends j {
    constructor(e10, t10) {
      super(), this.configurationService = e10, this.languageService = t10, this._registry = this._register(new h_()), this.onDidChangeEmitter = this._register(new N()), this.onDidChange = this.onDidChangeEmitter.event, this.configurations = /* @__PURE__ */ new Map();
      let n10 = new Set(Object.values(s_));
      this._register(this.configurationService.onDidChangeConfiguration((e11) => {
        let t11 = e11.change.keys.some((e12) => n10.has(e12)), r10 = e11.change.overrides.filter(([e12, t12]) => t12.some((e13) => n10.has(e13))).map(([e12]) => e12);
        if (t11) this.configurations.clear(), this.onDidChangeEmitter.fire(new r_(void 0));
        else for (let e12 of r10) this.languageService.isRegisteredLanguageId(e12) && (this.configurations.delete(e12), this.onDidChangeEmitter.fire(new r_(e12)));
      })), this._register(this._registry.onDidChange((e11) => {
        this.configurations.delete(e11.languageId), this.onDidChangeEmitter.fire(new r_(e11.languageId));
      }));
    }
    register(e10, t10, n10) {
      return this._registry.register(e10, t10, n10);
    }
    getLanguageConfiguration(e10) {
      let t10 = this.configurations.get(e10);
      return t10 || (t10 = o_(e10, this._registry, this.configurationService, this.languageService), this.configurations.set(e10, t10)), t10;
    }
  };
  a_ = t_([
    n_(0, ug),
    n_(1, _g)
  ], a_);
  function o_(e10, t10, n10, r10) {
    let i10 = t10.getLanguageConfiguration(e10);
    if (!i10) {
      if (!r10.isRegisteredLanguageId(e10)) return new g_(e10, {});
      i10 = new g_(e10, {});
    }
    let a10 = c_(i10.languageId, n10), o10 = f_([
      i10.underlyingConfig,
      a10
    ]), s10 = new g_(i10.languageId, o10);
    return s10;
  }
  const s_ = {
    brackets: `editor.language.brackets`,
    colorizedBracketPairs: `editor.language.colorizedBracketPairs`
  };
  function c_(e10, t10) {
    let n10 = t10.getValue(s_.brackets, {
      overrideIdentifier: e10
    }), r10 = t10.getValue(s_.colorizedBracketPairs, {
      overrideIdentifier: e10
    });
    return {
      brackets: l_(n10),
      colorizedBracketPairs: l_(r10)
    };
  }
  function l_(e10) {
    if (Array.isArray(e10)) return e10.map((e11) => {
      if (!(!Array.isArray(e11) || e11.length !== 2)) return [
        e11[0],
        e11[1]
      ];
    }).filter((e11) => !!e11);
  }
  function u_(e10, t10, n10) {
    let r10 = e10.getLineContent(t10), i10 = Ds(r10);
    return i10.length > n10 - 1 && (i10 = i10.substring(0, n10 - 1)), i10;
  }
  var d_ = class {
    constructor(e10) {
      this.languageId = e10, this._resolved = null, this._entries = [], this._order = 0, this._resolved = null;
    }
    register(e10, t10) {
      let n10 = new p_(e10, t10, ++this._order);
      return this._entries.push(n10), this._resolved = null, k(() => {
        for (let e11 = 0; e11 < this._entries.length; e11++) if (this._entries[e11] === n10) {
          this._entries.splice(e11, 1), this._resolved = null;
          break;
        }
      });
    }
    getResolvedConfiguration() {
      if (!this._resolved) {
        let e10 = this._resolve();
        e10 && (this._resolved = new g_(this.languageId, e10));
      }
      return this._resolved;
    }
    _resolve() {
      return this._entries.length === 0 ? null : (this._entries.sort(p_.cmp), f_(this._entries.map((e10) => e10.configuration)));
    }
  };
  function f_(e10) {
    let t10 = {
      comments: void 0,
      brackets: void 0,
      wordPattern: void 0,
      indentationRules: void 0,
      onEnterRules: void 0,
      autoClosingPairs: void 0,
      surroundingPairs: void 0,
      autoCloseBefore: void 0,
      folding: void 0,
      colorizedBracketPairs: void 0,
      __electricCharacterSupport: void 0
    };
    for (let n10 of e10) t10 = {
      comments: n10.comments || t10.comments,
      brackets: n10.brackets || t10.brackets,
      wordPattern: n10.wordPattern || t10.wordPattern,
      indentationRules: n10.indentationRules || t10.indentationRules,
      onEnterRules: n10.onEnterRules || t10.onEnterRules,
      autoClosingPairs: n10.autoClosingPairs || t10.autoClosingPairs,
      surroundingPairs: n10.surroundingPairs || t10.surroundingPairs,
      autoCloseBefore: n10.autoCloseBefore || t10.autoCloseBefore,
      folding: n10.folding || t10.folding,
      colorizedBracketPairs: n10.colorizedBracketPairs || t10.colorizedBracketPairs,
      __electricCharacterSupport: n10.__electricCharacterSupport || t10.__electricCharacterSupport
    };
    return t10;
  }
  var p_ = class {
    constructor(e10, t10, n10) {
      this.configuration = e10, this.priority = t10, this.order = n10;
    }
    static cmp(e10, t10) {
      return e10.priority === t10.priority ? e10.order - t10.order : e10.priority - t10.priority;
    }
  }, m_ = class {
    constructor(e10) {
      this.languageId = e10;
    }
  }, h_ = class extends j {
    constructor() {
      super(), this._entries = /* @__PURE__ */ new Map(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._register(this.register(Jg, {
        brackets: [
          [
            `(`,
            `)`
          ],
          [
            `[`,
            `]`
          ],
          [
            `{`,
            `}`
          ]
        ],
        surroundingPairs: [
          {
            open: `{`,
            close: `}`
          },
          {
            open: `[`,
            close: `]`
          },
          {
            open: `(`,
            close: `)`
          },
          {
            open: `<`,
            close: `>`
          },
          {
            open: `"`,
            close: `"`
          },
          {
            open: `'`,
            close: `'`
          },
          {
            open: "`",
            close: "`"
          }
        ],
        colorizedBracketPairs: [],
        folding: {
          offSide: true
        }
      }, 0));
    }
    register(e10, t10, n10 = 0) {
      let r10 = this._entries.get(e10);
      r10 || (r10 = new d_(e10), this._entries.set(e10, r10));
      let i10 = r10.register(t10, n10);
      return this._onDidChange.fire(new m_(e10)), k(() => {
        i10.dispose(), this._onDidChange.fire(new m_(e10));
      });
    }
    getLanguageConfiguration(e10) {
      let t10 = this._entries.get(e10);
      return (t10 == null ? void 0 : t10.getResolvedConfiguration()) || null;
    }
  }, g_ = class e10 {
    constructor(t10, n10) {
      this.languageId = t10, this.underlyingConfig = n10, this._brackets = null, this._electricCharacter = null, this._onEnterSupport = this.underlyingConfig.brackets || this.underlyingConfig.indentationRules || this.underlyingConfig.onEnterRules ? new lg(this.underlyingConfig) : null, this.comments = e10._handleComments(this.underlyingConfig), this.characterPair = new wh(this.underlyingConfig), this.wordDefinition = this.underlyingConfig.wordPattern || Vt, this.indentationRules = this.underlyingConfig.indentationRules, this.underlyingConfig.indentationRules ? this.indentRulesSupport = new cg(this.underlyingConfig.indentationRules) : this.indentRulesSupport = null, this.foldingRules = this.underlyingConfig.folding || {}, this.bracketsNew = new Xg(t10, this.underlyingConfig);
    }
    getWordDefinition() {
      return Ht(this.wordDefinition);
    }
    get brackets() {
      return !this._brackets && this.underlyingConfig.brackets && (this._brackets = new Jh(this.languageId, this.underlyingConfig.brackets)), this._brackets;
    }
    get electricCharacter() {
      return this._electricCharacter || (this._electricCharacter = new og(this.brackets)), this._electricCharacter;
    }
    onEnter(e11, t10, n10, r10) {
      return this._onEnterSupport ? this._onEnterSupport.onEnter(e11, t10, n10, r10) : null;
    }
    getAutoClosingPairs() {
      return new Sh(this.characterPair.getAutoClosingPairs());
    }
    getAutoCloseBeforeSet(e11) {
      return this.characterPair.getAutoCloseBeforeSet(e11);
    }
    getSurroundingPairs() {
      return this.characterPair.getSurroundingPairs();
    }
    static _handleComments(e11) {
      let t10 = e11.comments;
      if (!t10) return null;
      let n10 = {};
      if (t10.lineComment && (n10.lineCommentToken = t10.lineComment), t10.blockComment) {
        let [e12, r10] = t10.blockComment;
        n10.blockCommentStartToken = e12, n10.blockCommentEndToken = r10;
      }
      return n10;
    }
  };
  bg(i_, a_, 1);
  var __ = class {
    constructor(e10, t10, n10, r10) {
      this.originalStart = e10, this.originalLength = t10, this.modifiedStart = n10, this.modifiedLength = r10;
    }
    getOriginalEnd() {
      return this.originalStart + this.originalLength;
    }
    getModifiedEnd() {
      return this.modifiedStart + this.modifiedLength;
    }
  }, v_ = class {
    constructor(e10) {
      this.source = e10;
    }
    getElements() {
      let e10 = this.source, t10 = new Int32Array(e10.length);
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) t10[n10] = e10.charCodeAt(n10);
      return t10;
    }
  };
  function y_(e10, t10, n10) {
    return new C_(new v_(e10), new v_(t10)).ComputeDiff(n10).changes;
  }
  let b_, x_, S_;
  b_ = class {
    static Assert(e10, t10) {
      if (!e10) throw Error(t10);
    }
  };
  x_ = class {
    static Copy(e10, t10, n10, r10, i10) {
      for (let a10 = 0; a10 < i10; a10++) n10[r10 + a10] = e10[t10 + a10];
    }
    static Copy2(e10, t10, n10, r10, i10) {
      for (let a10 = 0; a10 < i10; a10++) n10[r10 + a10] = e10[t10 + a10];
    }
  };
  S_ = class {
    constructor() {
      this.m_changes = [], this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824, this.m_originalCount = 0, this.m_modifiedCount = 0;
    }
    MarkNextChange() {
      (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.m_changes.push(new __(this.m_originalStart, this.m_originalCount, this.m_modifiedStart, this.m_modifiedCount)), this.m_originalCount = 0, this.m_modifiedCount = 0, this.m_originalStart = 1073741824, this.m_modifiedStart = 1073741824;
    }
    AddOriginalElement(e10, t10) {
      this.m_originalStart = Math.min(this.m_originalStart, e10), this.m_modifiedStart = Math.min(this.m_modifiedStart, t10), this.m_originalCount++;
    }
    AddModifiedElement(e10, t10) {
      this.m_originalStart = Math.min(this.m_originalStart, e10), this.m_modifiedStart = Math.min(this.m_modifiedStart, t10), this.m_modifiedCount++;
    }
    getChanges() {
      return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes;
    }
    getReverseChanges() {
      return (this.m_originalCount > 0 || this.m_modifiedCount > 0) && this.MarkNextChange(), this.m_changes.reverse(), this.m_changes;
    }
  };
  C_ = class e10 {
    constructor(t10, n10, r10 = null) {
      this.ContinueProcessingPredicate = r10, this._originalSequence = t10, this._modifiedSequence = n10;
      let [i10, a10, o10] = e10._getElements(t10), [s10, c10, l10] = e10._getElements(n10);
      this._hasStrings = o10 && l10, this._originalStringElements = i10, this._originalElementsOrHash = a10, this._modifiedStringElements = s10, this._modifiedElementsOrHash = c10, this.m_forwardHistory = [], this.m_reverseHistory = [];
    }
    static _isStringArray(e11) {
      return e11.length > 0 && typeof e11[0] == `string`;
    }
    static _getElements(t10) {
      let n10 = t10.getElements();
      if (e10._isStringArray(n10)) {
        let e11 = new Int32Array(n10.length);
        for (let t11 = 0, r10 = n10.length; t11 < r10; t11++) e11[t11] = Iu(n10[t11], 0);
        return [
          n10,
          e11,
          true
        ];
      }
      return n10 instanceof Int32Array ? [
        [],
        n10,
        false
      ] : [
        [],
        new Int32Array(n10),
        false
      ];
    }
    ElementsAreEqual(e11, t10) {
      return this._originalElementsOrHash[e11] === this._modifiedElementsOrHash[t10] ? this._hasStrings ? this._originalStringElements[e11] === this._modifiedStringElements[t10] : true : false;
    }
    ElementsAreStrictEqual(t10, n10) {
      if (!this.ElementsAreEqual(t10, n10)) return false;
      let r10 = e10._getStrictElement(this._originalSequence, t10), i10 = e10._getStrictElement(this._modifiedSequence, n10);
      return r10 === i10;
    }
    static _getStrictElement(e11, t10) {
      return typeof e11.getStrictElement == `function` ? e11.getStrictElement(t10) : null;
    }
    OriginalElementsAreEqual(e11, t10) {
      return this._originalElementsOrHash[e11] === this._originalElementsOrHash[t10] ? this._hasStrings ? this._originalStringElements[e11] === this._originalStringElements[t10] : true : false;
    }
    ModifiedElementsAreEqual(e11, t10) {
      return this._modifiedElementsOrHash[e11] === this._modifiedElementsOrHash[t10] ? this._hasStrings ? this._modifiedStringElements[e11] === this._modifiedStringElements[t10] : true : false;
    }
    ComputeDiff(e11) {
      return this._ComputeDiff(0, this._originalElementsOrHash.length - 1, 0, this._modifiedElementsOrHash.length - 1, e11);
    }
    _ComputeDiff(e11, t10, n10, r10, i10) {
      let a10 = [
        false
      ], o10 = this.ComputeDiffRecursive(e11, t10, n10, r10, a10);
      return i10 && (o10 = this.PrettifyChanges(o10)), {
        quitEarly: a10[0],
        changes: o10
      };
    }
    ComputeDiffRecursive(e11, t10, n10, r10, i10) {
      for (i10[0] = false; e11 <= t10 && n10 <= r10 && this.ElementsAreEqual(e11, n10); ) e11++, n10++;
      for (; t10 >= e11 && r10 >= n10 && this.ElementsAreEqual(t10, r10); ) t10--, r10--;
      if (e11 > t10 || n10 > r10) {
        let i11;
        return n10 <= r10 ? (b_.Assert(e11 === t10 + 1, `originalStart should only be one more than originalEnd`), i11 = [
          new __(e11, 0, n10, r10 - n10 + 1)
        ]) : e11 <= t10 ? (b_.Assert(n10 === r10 + 1, `modifiedStart should only be one more than modifiedEnd`), i11 = [
          new __(e11, t10 - e11 + 1, n10, 0)
        ]) : (b_.Assert(e11 === t10 + 1, `originalStart should only be one more than originalEnd`), b_.Assert(n10 === r10 + 1, `modifiedStart should only be one more than modifiedEnd`), i11 = []), i11;
      }
      let a10 = [
        0
      ], o10 = [
        0
      ], s10 = this.ComputeRecursionPoint(e11, t10, n10, r10, a10, o10, i10), c10 = a10[0], l10 = o10[0];
      if (s10 !== null) return s10;
      if (!i10[0]) {
        let a11 = this.ComputeDiffRecursive(e11, c10, n10, l10, i10), o11 = [];
        return o11 = i10[0] ? [
          new __(c10 + 1, t10 - (c10 + 1) + 1, l10 + 1, r10 - (l10 + 1) + 1)
        ] : this.ComputeDiffRecursive(c10 + 1, t10, l10 + 1, r10, i10), this.ConcatenateChanges(a11, o11);
      }
      return [
        new __(e11, t10 - e11 + 1, n10, r10 - n10 + 1)
      ];
    }
    WALKTRACE(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10, p10, m10, h10, g10, _10) {
      let v10 = null, y10 = null, b10 = new S_(), x10 = t10, S10 = n10, C10 = f10[0] - h10[0] - r10, w10 = -1073741824, ee2 = this.m_forwardHistory.length - 1;
      do {
        let t11 = C10 + e11;
        t11 === x10 || t11 < S10 && c10[t11 - 1] < c10[t11 + 1] ? (u10 = c10[t11 + 1], p10 = u10 - C10 - r10, u10 < w10 && b10.MarkNextChange(), w10 = u10, b10.AddModifiedElement(u10 + 1, p10), C10 = t11 + 1 - e11) : (u10 = c10[t11 - 1] + 1, p10 = u10 - C10 - r10, u10 < w10 && b10.MarkNextChange(), w10 = u10 - 1, b10.AddOriginalElement(u10, p10 + 1), C10 = t11 - 1 - e11), ee2 >= 0 && (c10 = this.m_forwardHistory[ee2], e11 = c10[0], x10 = 1, S10 = c10.length - 1);
      } while (--ee2 >= -1);
      if (v10 = b10.getReverseChanges(), _10[0]) {
        let e12 = f10[0] + 1, t11 = h10[0] + 1;
        if (v10 !== null && v10.length > 0) {
          let n11 = v10[v10.length - 1];
          e12 = Math.max(e12, n11.getOriginalEnd()), t11 = Math.max(t11, n11.getModifiedEnd());
        }
        y10 = [
          new __(e12, d10 - e12 + 1, t11, m10 - t11 + 1)
        ];
      } else {
        b10 = new S_(), x10 = a10, S10 = o10, C10 = f10[0] - h10[0] - s10, w10 = 1073741824, ee2 = g10 ? this.m_reverseHistory.length - 1 : this.m_reverseHistory.length - 2;
        do {
          let e12 = C10 + i10;
          e12 === x10 || e12 < S10 && l10[e12 - 1] >= l10[e12 + 1] ? (u10 = l10[e12 + 1] - 1, p10 = u10 - C10 - s10, u10 > w10 && b10.MarkNextChange(), w10 = u10 + 1, b10.AddOriginalElement(u10 + 1, p10 + 1), C10 = e12 + 1 - i10) : (u10 = l10[e12 - 1], p10 = u10 - C10 - s10, u10 > w10 && b10.MarkNextChange(), w10 = u10, b10.AddModifiedElement(u10 + 1, p10 + 1), C10 = e12 - 1 - i10), ee2 >= 0 && (l10 = this.m_reverseHistory[ee2], i10 = l10[0], x10 = 1, S10 = l10.length - 1);
        } while (--ee2 >= -1);
        y10 = b10.getChanges();
      }
      return this.ConcatenateChanges(v10, y10);
    }
    ComputeRecursionPoint(e11, t10, n10, r10, i10, a10, o10) {
      let s10 = 0, c10 = 0, l10 = 0, u10 = 0, d10 = 0, f10 = 0;
      e11--, n10--, i10[0] = 0, a10[0] = 0, this.m_forwardHistory = [], this.m_reverseHistory = [];
      let p10 = t10 - e11 + (r10 - n10), m10 = p10 + 1, h10 = new Int32Array(m10), g10 = new Int32Array(m10), _10 = r10 - n10, v10 = t10 - e11, y10 = e11 - n10, b10 = t10 - r10, x10 = v10 - _10, S10 = x10 % 2 == 0;
      h10[_10] = e11, g10[v10] = t10, o10[0] = false;
      for (let x11 = 1; x11 <= p10 / 2 + 1; x11++) {
        let p11 = 0, C10 = 0;
        l10 = this.ClipDiagonalBound(_10 - x11, x11, _10, m10), u10 = this.ClipDiagonalBound(_10 + x11, x11, _10, m10);
        for (let e12 = l10; e12 <= u10; e12 += 2) {
          s10 = e12 === l10 || e12 < u10 && h10[e12 - 1] < h10[e12 + 1] ? h10[e12 + 1] : h10[e12 - 1] + 1, c10 = s10 - (e12 - _10) - y10;
          let n11 = s10;
          for (; s10 < t10 && c10 < r10 && this.ElementsAreEqual(s10 + 1, c10 + 1); ) s10++, c10++;
          if (h10[e12] = s10, s10 + c10 > p11 + C10 && (p11 = s10, C10 = c10), !S10 && Math.abs(e12 - v10) <= x11 - 1 && s10 >= g10[e12]) return i10[0] = s10, a10[0] = c10, n11 <= g10[e12] && x11 <= 1448 ? this.WALKTRACE(_10, l10, u10, y10, v10, d10, f10, b10, h10, g10, s10, t10, i10, c10, r10, a10, S10, o10) : null;
        }
        let w10 = (p11 - e11 + (C10 - n10) - x11) / 2;
        if (this.ContinueProcessingPredicate !== null && !this.ContinueProcessingPredicate(p11, w10)) return o10[0] = true, i10[0] = p11, a10[0] = C10, w10 > 0 && x11 <= 1448 ? this.WALKTRACE(_10, l10, u10, y10, v10, d10, f10, b10, h10, g10, s10, t10, i10, c10, r10, a10, S10, o10) : (e11++, n10++, [
          new __(e11, t10 - e11 + 1, n10, r10 - n10 + 1)
        ]);
        d10 = this.ClipDiagonalBound(v10 - x11, x11, v10, m10), f10 = this.ClipDiagonalBound(v10 + x11, x11, v10, m10);
        for (let p12 = d10; p12 <= f10; p12 += 2) {
          s10 = p12 === d10 || p12 < f10 && g10[p12 - 1] >= g10[p12 + 1] ? g10[p12 + 1] - 1 : g10[p12 - 1], c10 = s10 - (p12 - v10) - b10;
          let m11 = s10;
          for (; s10 > e11 && c10 > n10 && this.ElementsAreEqual(s10, c10); ) s10--, c10--;
          if (g10[p12] = s10, S10 && Math.abs(p12 - _10) <= x11 && s10 <= h10[p12]) return i10[0] = s10, a10[0] = c10, m11 >= h10[p12] && x11 <= 1448 ? this.WALKTRACE(_10, l10, u10, y10, v10, d10, f10, b10, h10, g10, s10, t10, i10, c10, r10, a10, S10, o10) : null;
        }
        if (x11 <= 1447) {
          let e12 = new Int32Array(u10 - l10 + 2);
          e12[0] = _10 - l10 + 1, x_.Copy2(h10, l10, e12, 1, u10 - l10 + 1), this.m_forwardHistory.push(e12), e12 = new Int32Array(f10 - d10 + 2), e12[0] = v10 - d10 + 1, x_.Copy2(g10, d10, e12, 1, f10 - d10 + 1), this.m_reverseHistory.push(e12);
        }
      }
      return this.WALKTRACE(_10, l10, u10, y10, v10, d10, f10, b10, h10, g10, s10, t10, i10, c10, r10, a10, S10, o10);
    }
    PrettifyChanges(e11) {
      for (let t10 = 0; t10 < e11.length; t10++) {
        let n10 = e11[t10], r10 = t10 < e11.length - 1 ? e11[t10 + 1].originalStart : this._originalElementsOrHash.length, i10 = t10 < e11.length - 1 ? e11[t10 + 1].modifiedStart : this._modifiedElementsOrHash.length, a10 = n10.originalLength > 0, o10 = n10.modifiedLength > 0;
        for (; n10.originalStart + n10.originalLength < r10 && n10.modifiedStart + n10.modifiedLength < i10 && (!a10 || this.OriginalElementsAreEqual(n10.originalStart, n10.originalStart + n10.originalLength)) && (!o10 || this.ModifiedElementsAreEqual(n10.modifiedStart, n10.modifiedStart + n10.modifiedLength)); ) {
          let e12 = this.ElementsAreStrictEqual(n10.originalStart, n10.modifiedStart), t11 = this.ElementsAreStrictEqual(n10.originalStart + n10.originalLength, n10.modifiedStart + n10.modifiedLength);
          if (t11 && !e12) break;
          n10.originalStart++, n10.modifiedStart++;
        }
        let s10 = [
          null
        ];
        if (t10 < e11.length - 1 && this.ChangesOverlap(e11[t10], e11[t10 + 1], s10)) {
          e11[t10] = s10[0], e11.splice(t10 + 1, 1), t10--;
          continue;
        }
      }
      for (let t10 = e11.length - 1; t10 >= 0; t10--) {
        let n10 = e11[t10], r10 = 0, i10 = 0;
        if (t10 > 0) {
          let n11 = e11[t10 - 1];
          r10 = n11.originalStart + n11.originalLength, i10 = n11.modifiedStart + n11.modifiedLength;
        }
        let a10 = n10.originalLength > 0, o10 = n10.modifiedLength > 0, s10 = 0, c10 = this._boundaryScore(n10.originalStart, n10.originalLength, n10.modifiedStart, n10.modifiedLength);
        for (let e12 = 1; ; e12++) {
          let t11 = n10.originalStart - e12, l11 = n10.modifiedStart - e12;
          if (t11 < r10 || l11 < i10 || a10 && !this.OriginalElementsAreEqual(t11, t11 + n10.originalLength) || o10 && !this.ModifiedElementsAreEqual(l11, l11 + n10.modifiedLength)) break;
          let u10 = t11 === r10 && l11 === i10, d10 = (u10 ? 5 : 0) + this._boundaryScore(t11, n10.originalLength, l11, n10.modifiedLength);
          d10 > c10 && (c10 = d10, s10 = e12);
        }
        n10.originalStart -= s10, n10.modifiedStart -= s10;
        let l10 = [
          null
        ];
        if (t10 > 0 && this.ChangesOverlap(e11[t10 - 1], e11[t10], l10)) {
          e11[t10 - 1] = l10[0], e11.splice(t10, 1), t10++;
          continue;
        }
      }
      if (this._hasStrings) for (let t10 = 1, n10 = e11.length; t10 < n10; t10++) {
        let n11 = e11[t10 - 1], r10 = e11[t10], i10 = r10.originalStart - n11.originalStart - n11.originalLength, a10 = n11.originalStart, o10 = r10.originalStart + r10.originalLength, s10 = o10 - a10, c10 = n11.modifiedStart, l10 = r10.modifiedStart + r10.modifiedLength, u10 = l10 - c10;
        if (i10 < 5 && s10 < 20 && u10 < 20) {
          let e12 = this._findBetterContiguousSequence(a10, s10, c10, u10, i10);
          if (e12) {
            let [t11, a11] = e12;
            (t11 !== n11.originalStart + n11.originalLength || a11 !== n11.modifiedStart + n11.modifiedLength) && (n11.originalLength = t11 - n11.originalStart, n11.modifiedLength = a11 - n11.modifiedStart, r10.originalStart = t11 + i10, r10.modifiedStart = a11 + i10, r10.originalLength = o10 - r10.originalStart, r10.modifiedLength = l10 - r10.modifiedStart);
          }
        }
      }
      return e11;
    }
    _findBetterContiguousSequence(e11, t10, n10, r10, i10) {
      if (t10 < i10 || r10 < i10) return null;
      let a10 = e11 + t10 - i10 + 1, o10 = n10 + r10 - i10 + 1, s10 = 0, c10 = 0, l10 = 0;
      for (let t11 = e11; t11 < a10; t11++) for (let e12 = n10; e12 < o10; e12++) {
        let n11 = this._contiguousSequenceScore(t11, e12, i10);
        n11 > 0 && n11 > s10 && (s10 = n11, c10 = t11, l10 = e12);
      }
      return s10 > 0 ? [
        c10,
        l10
      ] : null;
    }
    _contiguousSequenceScore(e11, t10, n10) {
      let r10 = 0;
      for (let i10 = 0; i10 < n10; i10++) {
        if (!this.ElementsAreEqual(e11 + i10, t10 + i10)) return 0;
        r10 += this._originalStringElements[e11 + i10].length;
      }
      return r10;
    }
    _OriginalIsBoundary(e11) {
      return e11 <= 0 || e11 >= this._originalElementsOrHash.length - 1 ? true : this._hasStrings && /^\s*$/.test(this._originalStringElements[e11]);
    }
    _OriginalRegionIsBoundary(e11, t10) {
      if (this._OriginalIsBoundary(e11) || this._OriginalIsBoundary(e11 - 1)) return true;
      if (t10 > 0) {
        let n10 = e11 + t10;
        if (this._OriginalIsBoundary(n10 - 1) || this._OriginalIsBoundary(n10)) return true;
      }
      return false;
    }
    _ModifiedIsBoundary(e11) {
      return e11 <= 0 || e11 >= this._modifiedElementsOrHash.length - 1 ? true : this._hasStrings && /^\s*$/.test(this._modifiedStringElements[e11]);
    }
    _ModifiedRegionIsBoundary(e11, t10) {
      if (this._ModifiedIsBoundary(e11) || this._ModifiedIsBoundary(e11 - 1)) return true;
      if (t10 > 0) {
        let n10 = e11 + t10;
        if (this._ModifiedIsBoundary(n10 - 1) || this._ModifiedIsBoundary(n10)) return true;
      }
      return false;
    }
    _boundaryScore(e11, t10, n10, r10) {
      let i10 = this._OriginalRegionIsBoundary(e11, t10) ? 1 : 0, a10 = this._ModifiedRegionIsBoundary(n10, r10) ? 1 : 0;
      return i10 + a10;
    }
    ConcatenateChanges(e11, t10) {
      let n10 = [];
      if (e11.length === 0 || t10.length === 0) return t10.length > 0 ? t10 : e11;
      if (this.ChangesOverlap(e11[e11.length - 1], t10[0], n10)) {
        let r10 = Array(e11.length + t10.length - 1);
        return x_.Copy(e11, 0, r10, 0, e11.length - 1), r10[e11.length - 1] = n10[0], x_.Copy(t10, 1, r10, e11.length, t10.length - 1), r10;
      } else {
        let n11 = Array(e11.length + t10.length);
        return x_.Copy(e11, 0, n11, 0, e11.length), x_.Copy(t10, 0, n11, e11.length, t10.length), n11;
      }
    }
    ChangesOverlap(e11, t10, n10) {
      if (b_.Assert(e11.originalStart <= t10.originalStart, `Left change is not less than or equal to right change`), b_.Assert(e11.modifiedStart <= t10.modifiedStart, `Left change is not less than or equal to right change`), e11.originalStart + e11.originalLength >= t10.originalStart || e11.modifiedStart + e11.modifiedLength >= t10.modifiedStart) {
        let r10 = e11.originalStart, i10 = e11.originalLength, a10 = e11.modifiedStart, o10 = e11.modifiedLength;
        return e11.originalStart + e11.originalLength >= t10.originalStart && (i10 = t10.originalStart + t10.originalLength - e11.originalStart), e11.modifiedStart + e11.modifiedLength >= t10.modifiedStart && (o10 = t10.modifiedStart + t10.modifiedLength - e11.modifiedStart), n10[0] = new __(r10, i10, a10, o10), true;
      } else return n10[0] = null, false;
    }
    ClipDiagonalBound(e11, t10, n10, r10) {
      if (e11 >= 0 && e11 < r10) return e11;
      let i10 = n10, a10 = r10 - n10 - 1, o10 = t10 % 2 == 0;
      if (e11 < 0) {
        let e12 = i10 % 2 == 0;
        return o10 === e12 ? 0 : 1;
      } else {
        let e12 = a10 % 2 == 0;
        return o10 === e12 ? r10 - 1 : r10 - 2;
      }
    }
  };
  function w_(e10) {
    return e10 < 0 ? 0 : e10 > 255 ? 255 : e10 | 0;
  }
  function T_(e10) {
    return e10 < 0 ? 0 : e10 > 4294967295 ? 4294967295 : e10 | 0;
  }
  let E_, O_, k_;
  E_ = class e10 {
    constructor(t10) {
      let n10 = w_(t10);
      this._defaultValue = n10, this._asciiMap = e10._createAsciiMap(n10), this._map = /* @__PURE__ */ new Map();
    }
    static _createAsciiMap(e11) {
      let t10 = new Uint8Array(256);
      return t10.fill(e11), t10;
    }
    set(e11, t10) {
      let n10 = w_(t10);
      e11 >= 0 && e11 < 256 ? this._asciiMap[e11] = n10 : this._map.set(e11, n10);
    }
    get(e11) {
      return e11 >= 0 && e11 < 256 ? this._asciiMap[e11] : this._map.get(e11) || this._defaultValue;
    }
    clear() {
      this._asciiMap.fill(this._defaultValue), this._map.clear();
    }
  };
  D_ = class {
    constructor() {
      this._actual = new E_(0);
    }
    add(e10) {
      this._actual.set(e10, 1);
    }
    has(e10) {
      return this._actual.get(e10) === 1;
    }
    clear() {
      return this._actual.clear();
    }
  };
  O_ = class {
    constructor(e10, t10, n10) {
      let r10 = new Uint8Array(e10 * t10);
      for (let i10 = 0, a10 = e10 * t10; i10 < a10; i10++) r10[i10] = n10;
      this._data = r10, this.rows = e10, this.cols = t10;
    }
    get(e10, t10) {
      return this._data[e10 * this.cols + t10];
    }
    set(e10, t10, n10) {
      this._data[e10 * this.cols + t10] = n10;
    }
  };
  k_ = class {
    constructor(e10) {
      let t10 = 0, n10 = 0;
      for (let r11 = 0, i10 = e10.length; r11 < i10; r11++) {
        let [i11, a10, o10] = e10[r11];
        a10 > t10 && (t10 = a10), i11 > n10 && (n10 = i11), o10 > n10 && (n10 = o10);
      }
      t10++, n10++;
      let r10 = new O_(n10, t10, 0);
      for (let t11 = 0, n11 = e10.length; t11 < n11; t11++) {
        let [n12, i10, a10] = e10[t11];
        r10.set(n12, i10, a10);
      }
      this._states = r10, this._maxCharCode = t10;
    }
    nextState(e10, t10) {
      return t10 < 0 || t10 >= this._maxCharCode ? 0 : this._states.get(e10, t10);
    }
  };
  let A_ = null;
  function j_() {
    return A_ === null && (A_ = new k_([
      [
        1,
        104,
        2
      ],
      [
        1,
        72,
        2
      ],
      [
        1,
        102,
        6
      ],
      [
        1,
        70,
        6
      ],
      [
        2,
        116,
        3
      ],
      [
        2,
        84,
        3
      ],
      [
        3,
        116,
        4
      ],
      [
        3,
        84,
        4
      ],
      [
        4,
        112,
        5
      ],
      [
        4,
        80,
        5
      ],
      [
        5,
        115,
        9
      ],
      [
        5,
        83,
        9
      ],
      [
        5,
        58,
        10
      ],
      [
        6,
        105,
        7
      ],
      [
        6,
        73,
        7
      ],
      [
        7,
        108,
        8
      ],
      [
        7,
        76,
        8
      ],
      [
        8,
        101,
        9
      ],
      [
        8,
        69,
        9
      ],
      [
        9,
        58,
        10
      ],
      [
        10,
        47,
        11
      ],
      [
        11,
        47,
        12
      ]
    ])), A_;
  }
  let M_ = null;
  function N_() {
    if (M_ === null) {
      M_ = new E_(0);
      let e10 = ` 	<>'"\u3001\u3002\uFF61\uFF64\uFF0C\uFF0E\uFF1A\uFF1B\u2018\u3008\u300C\u300E\u3014\uFF08\uFF3B\uFF5B\uFF62\uFF63\uFF5D\uFF3D\uFF09\u3015\u300F\u300D\u3009\u2019\uFF40\uFF5E\u2026`;
      for (let t11 = 0; t11 < e10.length; t11++) M_.set(e10.charCodeAt(t11), 1);
      let t10 = `.,;:`;
      for (let e11 = 0; e11 < t10.length; e11++) M_.set(t10.charCodeAt(e11), 2);
    }
    return M_;
  }
  var P_ = class e10 {
    static _createLink(e11, t10, n10, r10, i10) {
      let a10 = i10 - 1;
      do {
        let n11 = t10.charCodeAt(a10), r11 = e11.get(n11);
        if (r11 !== 2) break;
        a10--;
      } while (a10 > r10);
      if (r10 > 0) {
        let e12 = t10.charCodeAt(r10 - 1), n11 = t10.charCodeAt(a10);
        (e12 === 40 && n11 === 41 || e12 === 91 && n11 === 93 || e12 === 123 && n11 === 125) && a10--;
      }
      return {
        range: {
          startLineNumber: n10,
          startColumn: r10 + 1,
          endLineNumber: n10,
          endColumn: a10 + 2
        },
        url: t10.substring(r10, a10 + 1)
      };
    }
    static computeLinks(t10, n10 = j_()) {
      let r10 = N_(), i10 = [];
      for (let a10 = 1, o10 = t10.getLineCount(); a10 <= o10; a10++) {
        let o11 = t10.getLineContent(a10), s10 = o11.length, c10 = 0, l10 = 0, u10 = 0, d10 = 1, f10 = false, p10 = false, m10 = false, h10 = false;
        for (; c10 < s10; ) {
          let t11 = false, s11 = o11.charCodeAt(c10);
          if (d10 === 13) {
            let n11;
            switch (s11) {
              case 40:
                f10 = true, n11 = 0;
                break;
              case 41:
                n11 = f10 ? 0 : 1;
                break;
              case 91:
                m10 = true, p10 = true, n11 = 0;
                break;
              case 93:
                m10 = false, n11 = p10 ? 0 : 1;
                break;
              case 123:
                h10 = true, n11 = 0;
                break;
              case 125:
                n11 = h10 ? 0 : 1;
                break;
              case 39:
              case 34:
              case 96:
                n11 = u10 === s11 ? 1 : u10 === 39 || u10 === 34 || u10 === 96 ? 0 : 1;
                break;
              case 42:
                n11 = u10 === 42 ? 1 : 0;
                break;
              case 124:
                n11 = u10 === 124 ? 1 : 0;
                break;
              case 32:
                n11 = m10 ? 0 : 1;
                break;
              default:
                n11 = r10.get(s11);
            }
            n11 === 1 && (i10.push(e10._createLink(r10, o11, a10, l10, c10)), t11 = true);
          } else if (d10 === 12) {
            let e11;
            s11 === 91 ? (p10 = true, e11 = 0) : e11 = r10.get(s11), e11 === 1 ? t11 = true : d10 = 13;
          } else d10 = n10.nextState(d10, s11), d10 === 0 && (t11 = true);
          t11 && (d10 = 1, f10 = false, p10 = false, h10 = false, l10 = c10 + 1, u10 = s11), c10++;
        }
        d10 === 13 && i10.push(e10._createLink(r10, o11, a10, l10, s10));
      }
      return i10;
    }
  };
  function F_(e10) {
    return !e10 || typeof e10.getLineCount != `function` || typeof e10.getLineContent != `function` ? [] : P_.computeLinks(e10);
  }
  var I_ = (_M2 = class {
    constructor() {
      this._defaultValueSet = [
        [
          `true`,
          `false`
        ],
        [
          `True`,
          `False`
        ],
        [
          `Private`,
          `Public`,
          `Friend`,
          `ReadOnly`,
          `Partial`,
          `Protected`,
          `WriteOnly`
        ],
        [
          `public`,
          `protected`,
          `private`
        ]
      ];
    }
    navigateValueSet(e10, t10, n10, r10, i10) {
      if (e10 && t10) {
        let n11 = this.doNavigateValueSet(t10, i10);
        if (n11) return {
          range: e10,
          value: n11
        };
      }
      if (n10 && r10) {
        let e11 = this.doNavigateValueSet(r10, i10);
        if (e11) return {
          range: n10,
          value: e11
        };
      }
      return null;
    }
    doNavigateValueSet(e10, t10) {
      let n10 = this.numberReplace(e10, t10);
      return n10 === null ? this.textReplace(e10, t10) : n10;
    }
    numberReplace(e10, t10) {
      let n10 = 10 ** (e10.length - (e10.lastIndexOf(`.`) + 1)), r10 = Number(e10), i10 = parseFloat(e10);
      return !isNaN(r10) && !isNaN(i10) && r10 === i10 ? r10 === 0 && !t10 ? null : (r10 = Math.floor(r10 * n10), r10 += t10 ? n10 : -n10, String(r10 / n10)) : null;
    }
    textReplace(e10, t10) {
      return this.valueSetsReplace(this._defaultValueSet, e10, t10);
    }
    valueSetsReplace(e10, t10, n10) {
      let r10 = null;
      for (let i10 = 0, a10 = e10.length; r10 === null && i10 < a10; i10++) r10 = this.valueSetReplace(e10[i10], t10, n10);
      return r10;
    }
    valueSetReplace(e10, t10, n10) {
      let r10 = e10.indexOf(t10);
      return r10 >= 0 ? (r10 += n10 ? 1 : -1, r10 < 0 ? r10 = e10.length - 1 : r10 %= e10.length, e10[r10]) : null;
    }
  }, _M2.INSTANCE = new _M2(), _M2), L_ = (_N2 = class {
    static getChannel(t10) {
      return t10.getChannel(_N2.CHANNEL_NAME);
    }
    static setChannel(t10, n10) {
      t10.setChannel(_N2.CHANNEL_NAME, n10);
    }
  }, _N2.CHANNEL_NAME = `editorWorkerHost`, _N2), R_, z_, B_ = class {
    constructor(e10, t10) {
      this.uri = e10, this.value = t10;
    }
  };
  function V_(e10) {
    return Array.isArray(e10);
  }
  let U_, W_, K_, J_;
  H_ = (_O2 = class {
    constructor(t10, n10) {
      if (this[R_] = `ResourceMap`, t10 instanceof _O2) this.map = new Map(t10.map), this.toKey = n10 ?? _O2.defaultToKey;
      else if (V_(t10)) {
        this.map = /* @__PURE__ */ new Map(), this.toKey = n10 ?? _O2.defaultToKey;
        for (let [e10, n11] of t10) this.set(e10, n11);
      } else this.map = /* @__PURE__ */ new Map(), this.toKey = t10 ?? _O2.defaultToKey;
    }
    set(e10, t10) {
      return this.map.set(this.toKey(e10), new B_(e10, t10)), this;
    }
    get(e10) {
      var _a3;
      return (_a3 = this.map.get(this.toKey(e10))) == null ? void 0 : _a3.value;
    }
    has(e10) {
      return this.map.has(this.toKey(e10));
    }
    get size() {
      return this.map.size;
    }
    clear() {
      this.map.clear();
    }
    delete(e10) {
      return this.map.delete(this.toKey(e10));
    }
    forEach(e10, t10) {
      t10 !== void 0 && (e10 = e10.bind(t10));
      for (let [t11, n10] of this.map) e10(n10.value, n10.uri, this);
    }
    *values() {
      for (let e10 of this.map.values()) yield e10.value;
    }
    *keys() {
      for (let e10 of this.map.values()) yield e10.uri;
    }
    *entries() {
      for (let e10 of this.map.values()) yield [
        e10.uri,
        e10.value
      ];
    }
    *[(R_ = Symbol.toStringTag, Symbol.iterator)]() {
      for (let [, e10] of this.map) yield [
        e10.uri,
        e10.value
      ];
    }
  }, _O2.defaultToKey = (e10) => e10.toString(), _O2);
  U_ = class {
    constructor() {
      this[z_] = `LinkedMap`, this._map = /* @__PURE__ */ new Map(), this._head = void 0, this._tail = void 0, this._size = 0, this._state = 0;
    }
    clear() {
      this._map.clear(), this._head = void 0, this._tail = void 0, this._size = 0, this._state++;
    }
    isEmpty() {
      return !this._head && !this._tail;
    }
    get size() {
      return this._size;
    }
    get first() {
      var _a3;
      return (_a3 = this._head) == null ? void 0 : _a3.value;
    }
    get last() {
      var _a3;
      return (_a3 = this._tail) == null ? void 0 : _a3.value;
    }
    has(e10) {
      return this._map.has(e10);
    }
    get(e10, t10 = 0) {
      let n10 = this._map.get(e10);
      if (n10) return t10 !== 0 && this.touch(n10, t10), n10.value;
    }
    set(e10, t10, n10 = 0) {
      let r10 = this._map.get(e10);
      if (r10) r10.value = t10, n10 !== 0 && this.touch(r10, n10);
      else {
        switch (r10 = {
          key: e10,
          value: t10,
          next: void 0,
          previous: void 0
        }, n10) {
          case 0:
            this.addItemLast(r10);
            break;
          case 1:
            this.addItemFirst(r10);
            break;
          case 2:
            this.addItemLast(r10);
            break;
          default:
            this.addItemLast(r10);
            break;
        }
        this._map.set(e10, r10), this._size++;
      }
      return this;
    }
    delete(e10) {
      return !!this.remove(e10);
    }
    remove(e10) {
      let t10 = this._map.get(e10);
      if (t10) return this._map.delete(e10), this.removeItem(t10), this._size--, t10.value;
    }
    shift() {
      if (!this._head && !this._tail) return;
      if (!this._head || !this._tail) throw Error(`Invalid list`);
      let e10 = this._head;
      return this._map.delete(e10.key), this.removeItem(e10), this._size--, e10.value;
    }
    forEach(e10, t10) {
      let n10 = this._state, r10 = this._head;
      for (; r10; ) {
        if (t10 ? e10.bind(t10)(r10.value, r10.key, this) : e10(r10.value, r10.key, this), this._state !== n10) throw Error(`LinkedMap got modified during iteration.`);
        r10 = r10.next;
      }
    }
    keys() {
      let e10 = this, t10 = this._state, n10 = this._head, r10 = {
        [Symbol.iterator]() {
          return r10;
        },
        next() {
          if (e10._state !== t10) throw Error(`LinkedMap got modified during iteration.`);
          if (n10) {
            let e11 = {
              value: n10.key,
              done: false
            };
            return n10 = n10.next, e11;
          } else return {
            value: void 0,
            done: true
          };
        }
      };
      return r10;
    }
    values() {
      let e10 = this, t10 = this._state, n10 = this._head, r10 = {
        [Symbol.iterator]() {
          return r10;
        },
        next() {
          if (e10._state !== t10) throw Error(`LinkedMap got modified during iteration.`);
          if (n10) {
            let e11 = {
              value: n10.value,
              done: false
            };
            return n10 = n10.next, e11;
          } else return {
            value: void 0,
            done: true
          };
        }
      };
      return r10;
    }
    entries() {
      let e10 = this, t10 = this._state, n10 = this._head, r10 = {
        [Symbol.iterator]() {
          return r10;
        },
        next() {
          if (e10._state !== t10) throw Error(`LinkedMap got modified during iteration.`);
          if (n10) {
            let e11 = {
              value: [
                n10.key,
                n10.value
              ],
              done: false
            };
            return n10 = n10.next, e11;
          } else return {
            value: void 0,
            done: true
          };
        }
      };
      return r10;
    }
    [(z_ = Symbol.toStringTag, Symbol.iterator)]() {
      return this.entries();
    }
    trimOld(e10) {
      if (e10 >= this.size) return;
      if (e10 === 0) {
        this.clear();
        return;
      }
      let t10 = this._head, n10 = this.size;
      for (; t10 && n10 > e10; ) this._map.delete(t10.key), t10 = t10.next, n10--;
      this._head = t10, this._size = n10, t10 && (t10.previous = void 0), this._state++;
    }
    trimNew(e10) {
      if (e10 >= this.size) return;
      if (e10 === 0) {
        this.clear();
        return;
      }
      let t10 = this._tail, n10 = this.size;
      for (; t10 && n10 > e10; ) this._map.delete(t10.key), t10 = t10.previous, n10--;
      this._tail = t10, this._size = n10, t10 && (t10.next = void 0), this._state++;
    }
    addItemFirst(e10) {
      if (!this._head && !this._tail) this._tail = e10;
      else if (this._head) e10.next = this._head, this._head.previous = e10;
      else throw Error(`Invalid list`);
      this._head = e10, this._state++;
    }
    addItemLast(e10) {
      if (!this._head && !this._tail) this._head = e10;
      else if (this._tail) e10.previous = this._tail, this._tail.next = e10;
      else throw Error(`Invalid list`);
      this._tail = e10, this._state++;
    }
    removeItem(e10) {
      if (e10 === this._head && e10 === this._tail) this._head = void 0, this._tail = void 0;
      else if (e10 === this._head) {
        if (!e10.next) throw Error(`Invalid list`);
        e10.next.previous = void 0, this._head = e10.next;
      } else if (e10 === this._tail) {
        if (!e10.previous) throw Error(`Invalid list`);
        e10.previous.next = void 0, this._tail = e10.previous;
      } else {
        let t10 = e10.next, n10 = e10.previous;
        if (!t10 || !n10) throw Error(`Invalid list`);
        t10.previous = n10, n10.next = t10;
      }
      e10.next = void 0, e10.previous = void 0, this._state++;
    }
    touch(e10, t10) {
      if (!this._head || !this._tail) throw Error(`Invalid list`);
      if (!(t10 !== 1 && t10 !== 2)) {
        if (t10 === 1) {
          if (e10 === this._head) return;
          let t11 = e10.next, n10 = e10.previous;
          e10 === this._tail ? (n10.next = void 0, this._tail = n10) : (t11.previous = n10, n10.next = t11), e10.previous = void 0, e10.next = this._head, this._head.previous = e10, this._head = e10, this._state++;
        } else if (t10 === 2) {
          if (e10 === this._tail) return;
          let t11 = e10.next, n10 = e10.previous;
          e10 === this._head ? (t11.previous = void 0, this._head = t11) : (t11.previous = n10, n10.next = t11), e10.next = void 0, e10.previous = this._tail, this._tail.next = e10, this._tail = e10, this._state++;
        }
      }
    }
    toJSON() {
      let e10 = [];
      return this.forEach((t10, n10) => {
        e10.push([
          n10,
          t10
        ]);
      }), e10;
    }
    fromJSON(e10) {
      this.clear();
      for (let [t10, n10] of e10) this.set(t10, n10);
    }
  };
  W_ = class extends U_ {
    constructor(e10, t10 = 1) {
      super(), this._limit = e10, this._ratio = Math.min(Math.max(0, t10), 1);
    }
    get limit() {
      return this._limit;
    }
    set limit(e10) {
      this._limit = e10, this.checkTrim();
    }
    get(e10, t10 = 2) {
      return super.get(e10, t10);
    }
    peek(e10) {
      return super.get(e10, 0);
    }
    set(e10, t10) {
      return super.set(e10, t10, 2), this;
    }
    checkTrim() {
      this.size > this._limit && this.trim(Math.round(this._limit * this._ratio));
    }
  };
  G_ = class extends W_ {
    constructor(e10, t10 = 1) {
      super(e10, t10);
    }
    trim(e10) {
      this.trimOld(e10);
    }
    set(e10, t10) {
      return super.set(e10, t10), this.checkTrim(), this;
    }
  };
  K_ = class {
    constructor(e10) {
      if (this._m1 = /* @__PURE__ */ new Map(), this._m2 = /* @__PURE__ */ new Map(), e10) for (let [t10, n10] of e10) this.set(t10, n10);
    }
    clear() {
      this._m1.clear(), this._m2.clear();
    }
    set(e10, t10) {
      this._m1.set(e10, t10), this._m2.set(t10, e10);
    }
    get(e10) {
      return this._m1.get(e10);
    }
    getKey(e10) {
      return this._m2.get(e10);
    }
    delete(e10) {
      let t10 = this._m1.get(e10);
      return t10 === void 0 ? false : (this._m1.delete(e10), this._m2.delete(t10), true);
    }
    keys() {
      return this._m1.keys();
    }
    values() {
      return this._m1.values();
    }
  };
  q_ = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    add(e10, t10) {
      let n10 = this.map.get(e10);
      n10 || (n10 = /* @__PURE__ */ new Set(), this.map.set(e10, n10)), n10.add(t10);
    }
    delete(e10, t10) {
      let n10 = this.map.get(e10);
      n10 && (n10.delete(t10), n10.size === 0 && this.map.delete(e10));
    }
    forEach(e10, t10) {
      let n10 = this.map.get(e10);
      n10 && n10.forEach(t10);
    }
    get(e10) {
      let t10 = this.map.get(e10);
      return t10 || /* @__PURE__ */ new Set();
    }
  };
  J_ = class extends E_ {
    constructor(e10, t10) {
      super(0), this._segmenter = null, this._cachedLine = null, this._cachedSegments = [], this.intlSegmenterLocales = t10, this.intlSegmenterLocales.length > 0 ? this._segmenter = new Intl.Segmenter(this.intlSegmenterLocales, {
        granularity: `word`
      }) : this._segmenter = null;
      for (let t11 = 0, n10 = e10.length; t11 < n10; t11++) this.set(e10.charCodeAt(t11), 2);
      this.set(32, 1), this.set(9, 1);
    }
    findPrevIntlWordBeforeOrAtOffset(e10, t10) {
      let n10 = null;
      for (let r10 of this._getIntlSegmenterWordsOnLine(e10)) {
        if (r10.index > t10) break;
        n10 = r10;
      }
      return n10;
    }
    findNextIntlWordAtOrAfterOffset(e10, t10) {
      for (let n10 of this._getIntlSegmenterWordsOnLine(e10)) {
        if (n10.index < t10) continue;
        return n10;
      }
      return null;
    }
    _getIntlSegmenterWordsOnLine(e10) {
      return this._segmenter ? this._cachedLine === e10 ? this._cachedSegments : (this._cachedLine = e10, this._cachedSegments = this._filterWordSegments(this._segmenter.segment(e10)), this._cachedSegments) : [];
    }
    _filterWordSegments(e10) {
      let t10 = [];
      for (let n10 of e10) this._isWordLike(n10) && t10.push(n10);
      return t10;
    }
    _isWordLike(e10) {
      return !!e10.isWordLike;
    }
  };
  const Y_ = new G_(10);
  X_ = function(e10, t10) {
    let n10 = `${e10}/${t10.join(`,`)}`, r10 = Y_.get(n10);
    return r10 || (r10 = new J_(e10, t10), Y_.set(n10, r10)), r10;
  };
  (function(e10) {
    e10[e10.Left = 1] = `Left`, e10[e10.Center = 2] = `Center`, e10[e10.Right = 4] = `Right`, e10[e10.Full = 7] = `Full`;
  })(Z_ || (Z_ = {}));
  (function(e10) {
    e10[e10.Left = 1] = `Left`, e10[e10.Center = 2] = `Center`, e10[e10.Right = 3] = `Right`;
  })(Q_ || (Q_ = {}));
  (function(e10) {
    e10[e10.Both = 0] = `Both`, e10[e10.Right = 1] = `Right`, e10[e10.Left = 2] = `Left`, e10[e10.None = 3] = `None`;
  })($_ || ($_ = {}));
  var ev = class {
    get originalIndentSize() {
      return this._indentSizeIsTabSize ? `tabSize` : this.indentSize;
    }
    constructor(e10) {
      this._textModelResolvedOptionsBrand = void 0, this.tabSize = Math.max(1, e10.tabSize | 0), e10.indentSize === `tabSize` ? (this.indentSize = this.tabSize, this._indentSizeIsTabSize = true) : (this.indentSize = Math.max(1, e10.indentSize | 0), this._indentSizeIsTabSize = false), this.insertSpaces = !!e10.insertSpaces, this.defaultEOL = e10.defaultEOL | 0, this.trimAutoWhitespace = !!e10.trimAutoWhitespace, this.bracketPairColorizationOptions = e10.bracketPairColorizationOptions;
    }
    equals(e10) {
      return this.tabSize === e10.tabSize && this._indentSizeIsTabSize === e10._indentSizeIsTabSize && this.indentSize === e10.indentSize && this.insertSpaces === e10.insertSpaces && this.defaultEOL === e10.defaultEOL && this.trimAutoWhitespace === e10.trimAutoWhitespace && Le(this.bracketPairColorizationOptions, e10.bracketPairColorizationOptions);
    }
    createChangeEvent(e10) {
      return {
        tabSize: this.tabSize !== e10.tabSize,
        indentSize: this.indentSize !== e10.indentSize,
        insertSpaces: this.insertSpaces !== e10.insertSpaces,
        trimAutoWhitespace: this.trimAutoWhitespace !== e10.trimAutoWhitespace
      };
    }
  }, tv = class {
    constructor(e10, t10) {
      this._findMatchBrand = void 0, this.range = e10, this.matches = t10;
    }
  };
  function nv(e10) {
    return e10 && typeof e10.read == `function`;
  }
  var rv = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.identifier = e10, this.range = t10, this.text = n10, this.forceMoveMarkers = r10, this.isAutoWhitespaceEdit = i10, this._isTracked = a10;
    }
  }, iv = class {
    constructor(e10, t10, n10) {
      this.regex = e10, this.wordSeparators = t10, this.simpleSearch = n10;
    }
  }, av = class {
    constructor(e10, t10, n10) {
      this.reverseEdits = e10, this.changes = t10, this.trimAutoWhitespaceLineNumbers = n10;
    }
  };
  ov = function(e10) {
    return !e10.isTooLargeForSyncing() && !e10.isForSimpleWidget;
  };
  const sv = 999;
  cv = class {
    constructor(e10, t10, n10, r10) {
      this.searchString = e10, this.isRegex = t10, this.matchCase = n10, this.wordSeparators = r10;
    }
    parseSearchRequest() {
      if (this.searchString === ``) return null;
      let e10;
      e10 = this.isRegex ? lv(this.searchString) : this.searchString.indexOf(`
`) >= 0;
      let t10 = null;
      try {
        t10 = Ss(this.searchString, this.isRegex, {
          matchCase: this.matchCase,
          wholeWord: false,
          multiline: e10,
          global: true,
          unicode: true
        });
      } catch {
        return null;
      }
      if (!t10) return null;
      let n10 = !this.isRegex && !e10;
      return n10 && this.searchString.toLowerCase() !== this.searchString.toUpperCase() && (n10 = this.matchCase), new iv(t10, this.wordSeparators ? X_(this.wordSeparators, []) : null, n10 ? this.searchString : null);
    }
  };
  function lv(e10) {
    if (!e10 || e10.length === 0) return false;
    for (let t10 = 0, n10 = e10.length; t10 < n10; t10++) {
      let r10 = e10.charCodeAt(t10);
      if (r10 === 10) return true;
      if (r10 === 92) {
        if (t10++, t10 >= n10) break;
        let r11 = e10.charCodeAt(t10);
        if (r11 === 110 || r11 === 114 || r11 === 87) return true;
      }
    }
    return false;
  }
  function uv(e10, t10, n10) {
    if (!n10) return new tv(e10, null);
    let r10 = [];
    for (let e11 = 0, n11 = t10.length; e11 < n11; e11++) r10[e11] = t10[e11];
    return new tv(e10, r10);
  }
  var dv = class {
    constructor(e10) {
      let t10 = [], n10 = 0;
      for (let r10 = 0, i10 = e10.length; r10 < i10; r10++) e10.charCodeAt(r10) === 10 && (t10[n10++] = r10);
      this._lineFeedsOffsets = t10;
    }
    findLineFeedCountBeforeOffset(e10) {
      let t10 = this._lineFeedsOffsets, n10 = 0, r10 = t10.length - 1;
      if (r10 === -1 || e10 <= t10[0]) return 0;
      for (; n10 < r10; ) {
        let i10 = n10 + ((r10 - n10) / 2 >> 0);
        t10[i10] >= e10 ? r10 = i10 - 1 : t10[i10 + 1] >= e10 ? (n10 = i10, r10 = i10) : n10 = i10 + 1;
      }
      return n10 + 1;
    }
  }, fv = class {
    static findMatches(e10, t10, n10, r10, i10) {
      let a10 = t10.parseSearchRequest();
      return a10 ? a10.regex.multiline ? this._doFindMatchesMultiline(e10, n10, new gv(a10.wordSeparators, a10.regex), r10, i10) : this._doFindMatchesLineByLine(e10, n10, a10, r10, i10) : [];
    }
    static _getMultilineMatchRange(e10, t10, n10, r10, i10, a10) {
      let o10, s10 = 0;
      r10 ? (s10 = r10.findLineFeedCountBeforeOffset(i10), o10 = t10 + i10 + s10) : o10 = t10 + i10;
      let c10;
      if (r10) {
        let e11 = r10.findLineFeedCountBeforeOffset(i10 + a10.length), t11 = e11 - s10;
        c10 = o10 + a10.length + t11;
      } else c10 = o10 + a10.length;
      let l10 = e10.getPositionAt(o10), u10 = e10.getPositionAt(c10);
      return new F(l10.lineNumber, l10.column, u10.lineNumber, u10.column);
    }
    static _doFindMatchesMultiline(e10, t10, n10, r10, i10) {
      let a10 = e10.getOffsetAt(t10.getStartPosition()), o10 = e10.getValueInRange(t10, 1), s10 = e10.getEOL() === `\r
` ? new dv(o10) : null, c10 = [], l10 = 0, u10;
      for (n10.reset(0); u10 = n10.next(o10); ) if (c10[l10++] = uv(this._getMultilineMatchRange(e10, a10, o10, s10, u10.index, u10[0]), u10, r10), l10 >= i10) return c10;
      return c10;
    }
    static _doFindMatchesLineByLine(e10, t10, n10, r10, i10) {
      let a10 = [], o10 = 0;
      if (t10.startLineNumber === t10.endLineNumber) {
        let s11 = e10.getLineContent(t10.startLineNumber).substring(t10.startColumn - 1, t10.endColumn - 1);
        return o10 = this._findMatchesInLine(n10, s11, t10.startLineNumber, t10.startColumn - 1, o10, a10, r10, i10), a10;
      }
      let s10 = e10.getLineContent(t10.startLineNumber).substring(t10.startColumn - 1);
      o10 = this._findMatchesInLine(n10, s10, t10.startLineNumber, t10.startColumn - 1, o10, a10, r10, i10);
      for (let s11 = t10.startLineNumber + 1; s11 < t10.endLineNumber && o10 < i10; s11++) o10 = this._findMatchesInLine(n10, e10.getLineContent(s11), s11, 0, o10, a10, r10, i10);
      if (o10 < i10) {
        let s11 = e10.getLineContent(t10.endLineNumber).substring(0, t10.endColumn - 1);
        o10 = this._findMatchesInLine(n10, s11, t10.endLineNumber, 0, o10, a10, r10, i10);
      }
      return a10;
    }
    static _findMatchesInLine(e10, t10, n10, r10, i10, a10, o10, s10) {
      let c10 = e10.wordSeparators;
      if (!o10 && e10.simpleSearch) {
        let o11 = e10.simpleSearch, l11 = o11.length, u11 = t10.length, d10 = -l11;
        for (; (d10 = t10.indexOf(o11, d10 + l11)) !== -1; ) if ((!c10 || hv(c10, t10, u11, d10, l11)) && (a10[i10++] = new tv(new F(n10, d10 + 1 + r10, n10, d10 + 1 + l11 + r10), null), i10 >= s10)) return i10;
        return i10;
      }
      let l10 = new gv(e10.wordSeparators, e10.regex), u10;
      l10.reset(0);
      do
        if (u10 = l10.next(t10), u10 && (a10[i10++] = uv(new F(n10, u10.index + 1 + r10, n10, u10.index + 1 + u10[0].length + r10), u10, o10), i10 >= s10)) return i10;
      while (u10);
      return i10;
    }
    static findNextMatch(e10, t10, n10, r10) {
      let i10 = t10.parseSearchRequest();
      if (!i10) return null;
      let a10 = new gv(i10.wordSeparators, i10.regex);
      return i10.regex.multiline ? this._doFindNextMatchMultiline(e10, n10, a10, r10) : this._doFindNextMatchLineByLine(e10, n10, a10, r10);
    }
    static _doFindNextMatchMultiline(e10, t10, n10, r10) {
      let i10 = new P(t10.lineNumber, 1), a10 = e10.getOffsetAt(i10), o10 = e10.getLineCount(), s10 = e10.getValueInRange(new F(i10.lineNumber, i10.column, o10, e10.getLineMaxColumn(o10)), 1), c10 = e10.getEOL() === `\r
` ? new dv(s10) : null;
      n10.reset(t10.column - 1);
      let l10 = n10.next(s10);
      return l10 ? uv(this._getMultilineMatchRange(e10, a10, s10, c10, l10.index, l10[0]), l10, r10) : t10.lineNumber !== 1 || t10.column !== 1 ? this._doFindNextMatchMultiline(e10, new P(1, 1), n10, r10) : null;
    }
    static _doFindNextMatchLineByLine(e10, t10, n10, r10) {
      let i10 = e10.getLineCount(), a10 = t10.lineNumber, o10 = e10.getLineContent(a10), s10 = this._findFirstMatchInLine(n10, o10, a10, t10.column, r10);
      if (s10) return s10;
      for (let t11 = 1; t11 <= i10; t11++) {
        let o11 = (a10 + t11 - 1) % i10, s11 = e10.getLineContent(o11 + 1), c10 = this._findFirstMatchInLine(n10, s11, o11 + 1, 1, r10);
        if (c10) return c10;
      }
      return null;
    }
    static _findFirstMatchInLine(e10, t10, n10, r10, i10) {
      e10.reset(r10 - 1);
      let a10 = e10.next(t10);
      return a10 ? uv(new F(n10, a10.index + 1, n10, a10.index + 1 + a10[0].length), a10, i10) : null;
    }
    static findPreviousMatch(e10, t10, n10, r10) {
      let i10 = t10.parseSearchRequest();
      if (!i10) return null;
      let a10 = new gv(i10.wordSeparators, i10.regex);
      return i10.regex.multiline ? this._doFindPreviousMatchMultiline(e10, n10, a10, r10) : this._doFindPreviousMatchLineByLine(e10, n10, a10, r10);
    }
    static _doFindPreviousMatchMultiline(e10, t10, n10, r10) {
      let i10 = this._doFindMatchesMultiline(e10, new F(1, 1, t10.lineNumber, t10.column), n10, r10, 10 * sv);
      if (i10.length > 0) return i10[i10.length - 1];
      let a10 = e10.getLineCount();
      return t10.lineNumber !== a10 || t10.column !== e10.getLineMaxColumn(a10) ? this._doFindPreviousMatchMultiline(e10, new P(a10, e10.getLineMaxColumn(a10)), n10, r10) : null;
    }
    static _doFindPreviousMatchLineByLine(e10, t10, n10, r10) {
      let i10 = e10.getLineCount(), a10 = t10.lineNumber, o10 = e10.getLineContent(a10).substring(0, t10.column - 1), s10 = this._findLastMatchInLine(n10, o10, a10, r10);
      if (s10) return s10;
      for (let t11 = 1; t11 <= i10; t11++) {
        let o11 = (i10 + a10 - t11 - 1) % i10, s11 = e10.getLineContent(o11 + 1), c10 = this._findLastMatchInLine(n10, s11, o11 + 1, r10);
        if (c10) return c10;
      }
      return null;
    }
    static _findLastMatchInLine(e10, t10, n10, r10) {
      let i10 = null, a10;
      for (e10.reset(0); a10 = e10.next(t10); ) i10 = uv(new F(n10, a10.index + 1, n10, a10.index + 1 + a10[0].length), a10, r10);
      return i10;
    }
  };
  function pv(e10, t10, n10, r10, i10) {
    if (r10 === 0) return true;
    let a10 = t10.charCodeAt(r10 - 1);
    if (e10.get(a10) !== 0 || a10 === 13 || a10 === 10) return true;
    if (i10 > 0) {
      let n11 = t10.charCodeAt(r10);
      if (e10.get(n11) !== 0) return true;
    }
    return false;
  }
  function mv(e10, t10, n10, r10, i10) {
    if (r10 + i10 === n10) return true;
    let a10 = t10.charCodeAt(r10 + i10);
    if (e10.get(a10) !== 0 || a10 === 13 || a10 === 10) return true;
    if (i10 > 0) {
      let n11 = t10.charCodeAt(r10 + i10 - 1);
      if (e10.get(n11) !== 0) return true;
    }
    return false;
  }
  function hv(e10, t10, n10, r10, i10) {
    return pv(e10, t10, n10, r10, i10) && mv(e10, t10, n10, r10, i10);
  }
  let gv;
  gv = class {
    constructor(e10, t10) {
      this._wordSeparators = e10, this._searchRegex = t10, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
    }
    reset(e10) {
      this._searchRegex.lastIndex = e10, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
    }
    next(e10) {
      let t10 = e10.length, n10;
      do {
        if (this._prevMatchStartIndex + this._prevMatchLength === t10 || (n10 = this._searchRegex.exec(e10), !n10)) return null;
        let r10 = n10.index, i10 = n10[0].length;
        if (r10 === this._prevMatchStartIndex && i10 === this._prevMatchLength) {
          if (i10 === 0) {
            Us(e10, t10, this._searchRegex.lastIndex) > 65535 ? this._searchRegex.lastIndex += 2 : this._searchRegex.lastIndex += 1;
            continue;
          }
          return null;
        }
        if (this._prevMatchStartIndex = r10, this._prevMatchLength = i10, !this._wordSeparators || hv(this._wordSeparators, e10, t10, r10, i10)) return n10;
      } while (n10);
      return null;
    }
  };
  _v = class {
    static computeUnicodeHighlights(e10, t10, n10) {
      let r10 = n10 ? n10.startLineNumber : 1, i10 = n10 ? n10.endLineNumber : e10.getLineCount(), a10 = new yv(t10), o10 = a10.getCandidateCodePoints(), s10;
      s10 = o10 === `allNonBasicAscii` ? RegExp(`[^\\t\\n\\r\\x20-\\x7E]`, `g`) : RegExp(`${vv(Array.from(o10))}`, `g`);
      let c10 = new gv(null, s10), l10 = [], u10 = false, d10, f10 = 0, p10 = 0, m10 = 0;
      forLoop: for (let t11 = r10, n11 = i10; t11 <= n11; t11++) {
        let n12 = e10.getLineContent(t11), r11 = n12.length;
        c10.reset(0);
        do
          if (d10 = c10.next(n12), d10) {
            let e11 = d10.index, i11 = d10.index + d10[0].length;
            if (e11 > 0) {
              let t12 = n12.charCodeAt(e11 - 1);
              Bs(t12) && e11--;
            }
            if (i11 + 1 < r11) {
              let e12 = n12.charCodeAt(i11 - 1);
              Bs(e12) && i11++;
            }
            let o11 = n12.substring(e11, i11), s11 = Wt(e11 + 1, Vt, n12, 0);
            s11 && s11.endColumn <= e11 + 1 && (s11 = null);
            let c11 = a10.shouldHighlightNonBasicASCII(o11, s11 ? s11.word : null);
            if (c11 !== 0) {
              c11 === 3 ? f10++ : c11 === 2 ? p10++ : c11 === 1 ? m10++ : em(c11);
              let n13 = 1e3;
              if (l10.length >= n13) {
                u10 = true;
                break forLoop;
              }
              l10.push(new F(t11, e11 + 1, t11, i11 + 1));
            }
          }
        while (d10);
      }
      return {
        ranges: l10,
        hasMore: u10,
        ambiguousCharacterCount: f10,
        invisibleCharacterCount: p10,
        nonBasicAsciiCharacterCount: m10
      };
    }
    static computeUnicodeHighlightReason(e10, t10) {
      let n10 = new yv(t10), r10 = n10.shouldHighlightNonBasicASCII(e10, null);
      switch (r10) {
        case 0:
          return null;
        case 2:
          return {
            kind: 1
          };
        case 3: {
          let r11 = e10.codePointAt(0), i10 = n10.ambiguousCharacters.getPrimaryConfusable(r11), a10 = gc.getLocales().filter((e11) => !gc.getInstance(/* @__PURE__ */ new Set([
            ...t10.allowedLocales,
            e11
          ])).isAmbiguous(r11));
          return {
            kind: 0,
            confusableWith: String.fromCodePoint(i10),
            notAmbiguousInLocales: a10
          };
        }
        case 1:
          return {
            kind: 2
          };
      }
    }
  };
  function vv(e10, t10) {
    let n10 = `[${gs(e10.map((e11) => String.fromCodePoint(e11)).join(``))}]`;
    return n10;
  }
  var yv = class {
    constructor(e10) {
      this.options = e10, this.allowedCodePoints = new Set(e10.allowedCodePoints), this.ambiguousCharacters = gc.getInstance(new Set(e10.allowedLocales));
    }
    getCandidateCodePoints() {
      if (this.options.nonBasicASCII) return `allNonBasicAscii`;
      let e10 = /* @__PURE__ */ new Set();
      if (this.options.invisibleCharacters) for (let t10 of _c.codePoints) bv(String.fromCodePoint(t10)) || e10.add(t10);
      if (this.options.ambiguousCharacters) for (let t10 of this.ambiguousCharacters.getConfusableCodePoints()) e10.add(t10);
      for (let t10 of this.allowedCodePoints) e10.delete(t10);
      return e10;
    }
    shouldHighlightNonBasicASCII(e10, t10) {
      let n10 = e10.codePointAt(0);
      if (this.allowedCodePoints.has(n10)) return 0;
      if (this.options.nonBasicASCII) return 1;
      let r10 = false, i10 = false;
      if (t10) for (let e11 of t10) {
        let t11 = e11.codePointAt(0), n11 = ec(e11);
        r10 || (r10 = n11), !n11 && !this.ambiguousCharacters.isAmbiguous(t11) && !_c.isInvisibleCharacter(t11) && (i10 = true);
      }
      return !r10 && i10 ? 0 : this.options.invisibleCharacters && !bv(e10) && _c.isInvisibleCharacter(n10) ? 2 : this.options.ambiguousCharacters && this.ambiguousCharacters.isAmbiguous(n10) ? 3 : 0;
    }
  };
  function bv(e10) {
    return e10 === ` ` || e10 === `
` || e10 === `	`;
  }
  var xv = class {
    constructor(e10, t10, n10) {
      this.changes = e10, this.moves = t10, this.hitTimeout = n10;
    }
  }, Sv = class {
    constructor(e10, t10) {
      this.lineRangeMapping = e10, this.changes = t10;
    }
  }, Cv = class e10 {
    static addRange(t10, n10) {
      let r10 = 0;
      for (; r10 < n10.length && n10[r10].endExclusive < t10.start; ) r10++;
      let i10 = r10;
      for (; i10 < n10.length && n10[i10].start <= t10.endExclusive; ) i10++;
      if (r10 === i10) n10.splice(r10, 0, t10);
      else {
        let a10 = Math.min(t10.start, n10[r10].start), o10 = Math.max(t10.endExclusive, n10[i10 - 1].endExclusive);
        n10.splice(r10, i10 - r10, new e10(a10, o10));
      }
    }
    static tryCreate(t10, n10) {
      if (!(t10 > n10)) return new e10(t10, n10);
    }
    static ofLength(t10) {
      return new e10(0, t10);
    }
    static ofStartAndLength(t10, n10) {
      return new e10(t10, t10 + n10);
    }
    constructor(e11, t10) {
      if (this.start = e11, this.endExclusive = t10, e11 > t10) throw new Dr(`Invalid range: ${this.toString()}`);
    }
    get isEmpty() {
      return this.start === this.endExclusive;
    }
    delta(t10) {
      return new e10(this.start + t10, this.endExclusive + t10);
    }
    deltaStart(t10) {
      return new e10(this.start + t10, this.endExclusive);
    }
    deltaEnd(t10) {
      return new e10(this.start, this.endExclusive + t10);
    }
    get length() {
      return this.endExclusive - this.start;
    }
    toString() {
      return `[${this.start}, ${this.endExclusive})`;
    }
    contains(e11) {
      return this.start <= e11 && e11 < this.endExclusive;
    }
    join(t10) {
      return new e10(Math.min(this.start, t10.start), Math.max(this.endExclusive, t10.endExclusive));
    }
    intersect(t10) {
      let n10 = Math.max(this.start, t10.start), r10 = Math.min(this.endExclusive, t10.endExclusive);
      if (n10 <= r10) return new e10(n10, r10);
    }
    intersects(e11) {
      let t10 = Math.max(this.start, e11.start), n10 = Math.min(this.endExclusive, e11.endExclusive);
      return t10 < n10;
    }
    isBefore(e11) {
      return this.endExclusive <= e11.start;
    }
    isAfter(e11) {
      return this.start >= e11.endExclusive;
    }
    slice(e11) {
      return e11.slice(this.start, this.endExclusive);
    }
    substring(e11) {
      return e11.substring(this.start, this.endExclusive);
    }
    clip(e11) {
      if (this.isEmpty) throw new Dr(`Invalid clipping range: ${this.toString()}`);
      return Math.max(this.start, Math.min(this.endExclusive - 1, e11));
    }
    clipCyclic(e11) {
      if (this.isEmpty) throw new Dr(`Invalid clipping range: ${this.toString()}`);
      return e11 < this.start ? this.endExclusive - (this.start - e11) % this.length : e11 >= this.endExclusive ? this.start + (e11 - this.start) % this.length : e11;
    }
    forEach(e11) {
      for (let t10 = this.start; t10 < this.endExclusive; t10++) e11(t10);
    }
  }, wv = class e10 {
    constructor() {
      this._sortedRanges = [];
    }
    addRange(e11) {
      let t10 = 0;
      for (; t10 < this._sortedRanges.length && this._sortedRanges[t10].endExclusive < e11.start; ) t10++;
      let n10 = t10;
      for (; n10 < this._sortedRanges.length && this._sortedRanges[n10].start <= e11.endExclusive; ) n10++;
      if (t10 === n10) this._sortedRanges.splice(t10, 0, e11);
      else {
        let r10 = Math.min(e11.start, this._sortedRanges[t10].start), i10 = Math.max(e11.endExclusive, this._sortedRanges[n10 - 1].endExclusive);
        this._sortedRanges.splice(t10, n10 - t10, new Cv(r10, i10));
      }
    }
    toString() {
      return this._sortedRanges.map((e11) => e11.toString()).join(`, `);
    }
    intersectsStrict(e11) {
      let t10 = 0;
      for (; t10 < this._sortedRanges.length && this._sortedRanges[t10].endExclusive <= e11.start; ) t10++;
      return t10 < this._sortedRanges.length && this._sortedRanges[t10].start < e11.endExclusive;
    }
    intersectWithRange(t10) {
      let n10 = new e10();
      for (let e11 of this._sortedRanges) {
        let r10 = e11.intersect(t10);
        r10 && n10.addRange(r10);
      }
      return n10;
    }
    intersectWithRangeLength(e11) {
      return this.intersectWithRange(e11).length;
    }
    get length() {
      return this._sortedRanges.reduce((e11, t10) => e11 + t10.length, 0);
    }
  };
  Tv = function(e10, t10) {
    let n10 = Ev(e10, t10);
    if (n10 !== -1) return e10[n10];
  };
  function Ev(e10, t10, n10 = e10.length - 1) {
    for (let r10 = n10; r10 >= 0; r10--) {
      let n11 = e10[r10];
      if (t10(n11)) return r10;
    }
    return -1;
  }
  function Dv(e10, t10) {
    let n10 = Ov(e10, t10);
    return n10 === -1 ? void 0 : e10[n10];
  }
  function Ov(e10, t10, n10 = 0, r10 = e10.length) {
    let i10 = n10, a10 = r10;
    for (; i10 < a10; ) {
      let n11 = Math.floor((i10 + a10) / 2);
      t10(e10[n11]) ? i10 = n11 + 1 : a10 = n11;
    }
    return i10 - 1;
  }
  function kv(e10, t10) {
    let n10 = Av(e10, t10);
    return n10 === e10.length ? void 0 : e10[n10];
  }
  Av = function(e10, t10, n10 = 0, r10 = e10.length) {
    let i10 = n10, a10 = r10;
    for (; i10 < a10; ) {
      let n11 = Math.floor((i10 + a10) / 2);
      t10(e10[n11]) ? a10 = n11 : i10 = n11 + 1;
    }
    return i10;
  };
  var jv = (_P2 = class {
    constructor(e10) {
      this._array = e10, this._findLastMonotonousLastIdx = 0;
    }
    findLastMonotonous(t10) {
      if (_P2.assertInvariants) {
        if (this._prevFindLastPredicate) {
          for (let e10 of this._array) if (this._prevFindLastPredicate(e10) && !t10(e10)) throw Error(`MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.`);
        }
        this._prevFindLastPredicate = t10;
      }
      let n10 = Ov(this._array, t10, this._findLastMonotonousLastIdx);
      return this._findLastMonotonousLastIdx = n10 + 1, n10 === -1 ? void 0 : this._array[n10];
    }
  }, _P2.assertInvariants = false, _P2);
  Mv = function(e10, t10) {
    if (e10.length === 0) return;
    let n10 = e10[0];
    for (let r10 = 1; r10 < e10.length; r10++) {
      let i10 = e10[r10];
      t10(i10, n10) > 0 && (n10 = i10);
    }
    return n10;
  };
  function Nv(e10, t10) {
    if (e10.length === 0) return;
    let n10 = e10[0];
    for (let r10 = 1; r10 < e10.length; r10++) {
      let i10 = e10[r10];
      t10(i10, n10) >= 0 && (n10 = i10);
    }
    return n10;
  }
  function Pv(e10, t10) {
    return Mv(e10, (e11, n10) => -t10(e11, n10));
  }
  function Fv(e10, t10) {
    if (e10.length === 0) return -1;
    let n10 = 0;
    for (let r10 = 1; r10 < e10.length; r10++) {
      let i10 = e10[r10];
      t10(i10, e10[n10]) > 0 && (n10 = r10);
    }
    return n10;
  }
  Iv = function(e10, t10) {
    for (let n10 of e10) {
      let e11 = t10(n10);
      if (e11 !== void 0) return e11;
    }
  };
  let Lv, zv;
  G = class e10 {
    static fromRangeInclusive(t10) {
      return new e10(t10.startLineNumber, t10.endLineNumber + 1);
    }
    static joinMany(e11) {
      if (e11.length === 0) return [];
      let t10 = new Lv(e11[0].slice());
      for (let n10 = 1; n10 < e11.length; n10++) t10 = t10.getUnion(new Lv(e11[n10].slice()));
      return t10.ranges;
    }
    static join(t10) {
      if (t10.length === 0) throw new Dr(`lineRanges cannot be empty`);
      let n10 = t10[0].startLineNumber, r10 = t10[0].endLineNumberExclusive;
      for (let e11 = 1; e11 < t10.length; e11++) n10 = Math.min(n10, t10[e11].startLineNumber), r10 = Math.max(r10, t10[e11].endLineNumberExclusive);
      return new e10(n10, r10);
    }
    static ofLength(t10, n10) {
      return new e10(t10, t10 + n10);
    }
    static deserialize(t10) {
      return new e10(t10[0], t10[1]);
    }
    constructor(e11, t10) {
      if (e11 > t10) throw new Dr(`startLineNumber ${e11} cannot be after endLineNumberExclusive ${t10}`);
      this.startLineNumber = e11, this.endLineNumberExclusive = t10;
    }
    contains(e11) {
      return this.startLineNumber <= e11 && e11 < this.endLineNumberExclusive;
    }
    get isEmpty() {
      return this.startLineNumber === this.endLineNumberExclusive;
    }
    delta(t10) {
      return new e10(this.startLineNumber + t10, this.endLineNumberExclusive + t10);
    }
    deltaLength(t10) {
      return new e10(this.startLineNumber, this.endLineNumberExclusive + t10);
    }
    get length() {
      return this.endLineNumberExclusive - this.startLineNumber;
    }
    join(t10) {
      return new e10(Math.min(this.startLineNumber, t10.startLineNumber), Math.max(this.endLineNumberExclusive, t10.endLineNumberExclusive));
    }
    toString() {
      return `[${this.startLineNumber},${this.endLineNumberExclusive})`;
    }
    intersect(t10) {
      let n10 = Math.max(this.startLineNumber, t10.startLineNumber), r10 = Math.min(this.endLineNumberExclusive, t10.endLineNumberExclusive);
      if (n10 <= r10) return new e10(n10, r10);
    }
    intersectsStrict(e11) {
      return this.startLineNumber < e11.endLineNumberExclusive && e11.startLineNumber < this.endLineNumberExclusive;
    }
    overlapOrTouch(e11) {
      return this.startLineNumber <= e11.endLineNumberExclusive && e11.startLineNumber <= this.endLineNumberExclusive;
    }
    equals(e11) {
      return this.startLineNumber === e11.startLineNumber && this.endLineNumberExclusive === e11.endLineNumberExclusive;
    }
    toInclusiveRange() {
      return this.isEmpty ? null : new F(this.startLineNumber, 1, this.endLineNumberExclusive - 1, 2 ** 53 - 1);
    }
    toExclusiveRange() {
      return new F(this.startLineNumber, 1, this.endLineNumberExclusive, 1);
    }
    mapToLineArray(e11) {
      let t10 = [];
      for (let n10 = this.startLineNumber; n10 < this.endLineNumberExclusive; n10++) t10.push(e11(n10));
      return t10;
    }
    forEach(e11) {
      for (let t10 = this.startLineNumber; t10 < this.endLineNumberExclusive; t10++) e11(t10);
    }
    serialize() {
      return [
        this.startLineNumber,
        this.endLineNumberExclusive
      ];
    }
    includes(e11) {
      return this.startLineNumber <= e11 && e11 < this.endLineNumberExclusive;
    }
    toOffsetRange() {
      return new Cv(this.startLineNumber - 1, this.endLineNumberExclusive - 1);
    }
  };
  Lv = class e10 {
    constructor(e11 = []) {
      this._normalizedRanges = e11;
    }
    get ranges() {
      return this._normalizedRanges;
    }
    addRange(e11) {
      if (e11.length === 0) return;
      let t10 = Av(this._normalizedRanges, (t11) => t11.endLineNumberExclusive >= e11.startLineNumber), n10 = Ov(this._normalizedRanges, (t11) => t11.startLineNumber <= e11.endLineNumberExclusive) + 1;
      if (t10 === n10) this._normalizedRanges.splice(t10, 0, e11);
      else if (t10 === n10 - 1) {
        let n11 = this._normalizedRanges[t10];
        this._normalizedRanges[t10] = n11.join(e11);
      } else {
        let r10 = this._normalizedRanges[t10].join(this._normalizedRanges[n10 - 1]).join(e11);
        this._normalizedRanges.splice(t10, n10 - t10, r10);
      }
    }
    contains(e11) {
      let t10 = Dv(this._normalizedRanges, (t11) => t11.startLineNumber <= e11);
      return !!t10 && t10.endLineNumberExclusive > e11;
    }
    intersects(e11) {
      let t10 = Dv(this._normalizedRanges, (t11) => t11.startLineNumber < e11.endLineNumberExclusive);
      return !!t10 && t10.endLineNumberExclusive > e11.startLineNumber;
    }
    getUnion(t10) {
      if (this._normalizedRanges.length === 0) return t10;
      if (t10._normalizedRanges.length === 0) return this;
      let n10 = [], r10 = 0, i10 = 0, a10 = null;
      for (; r10 < this._normalizedRanges.length || i10 < t10._normalizedRanges.length; ) {
        let e11 = null;
        if (r10 < this._normalizedRanges.length && i10 < t10._normalizedRanges.length) {
          let n11 = this._normalizedRanges[r10], a11 = t10._normalizedRanges[i10];
          n11.startLineNumber < a11.startLineNumber ? (e11 = n11, r10++) : (e11 = a11, i10++);
        } else r10 < this._normalizedRanges.length ? (e11 = this._normalizedRanges[r10], r10++) : (e11 = t10._normalizedRanges[i10], i10++);
        a10 === null ? a10 = e11 : a10.endLineNumberExclusive >= e11.startLineNumber ? a10 = new G(a10.startLineNumber, Math.max(a10.endLineNumberExclusive, e11.endLineNumberExclusive)) : (n10.push(a10), a10 = e11);
      }
      return a10 !== null && n10.push(a10), new e10(n10);
    }
    subtractFrom(t10) {
      let n10 = Av(this._normalizedRanges, (e11) => e11.endLineNumberExclusive >= t10.startLineNumber), r10 = Ov(this._normalizedRanges, (e11) => e11.startLineNumber <= t10.endLineNumberExclusive) + 1;
      if (n10 === r10) return new e10([
        t10
      ]);
      let i10 = [], a10 = t10.startLineNumber;
      for (let e11 = n10; e11 < r10; e11++) {
        let t11 = this._normalizedRanges[e11];
        t11.startLineNumber > a10 && i10.push(new G(a10, t11.startLineNumber)), a10 = t11.endLineNumberExclusive;
      }
      return a10 < t10.endLineNumberExclusive && i10.push(new G(a10, t10.endLineNumberExclusive)), new e10(i10);
    }
    toString() {
      return this._normalizedRanges.map((e11) => e11.toString()).join(`, `);
    }
    getIntersection(t10) {
      let n10 = [], r10 = 0, i10 = 0;
      for (; r10 < this._normalizedRanges.length && i10 < t10._normalizedRanges.length; ) {
        let e11 = this._normalizedRanges[r10], a10 = t10._normalizedRanges[i10], o10 = e11.intersect(a10);
        o10 && !o10.isEmpty && n10.push(o10), e11.endLineNumberExclusive < a10.endLineNumberExclusive ? r10++ : i10++;
      }
      return new e10(n10);
    }
    getWithDelta(t10) {
      return new e10(this._normalizedRanges.map((e11) => e11.delta(t10)));
    }
  };
  Rv = (_Q2 = class {
    static betweenPositions(t10, n10) {
      return t10.lineNumber === n10.lineNumber ? new _Q2(0, n10.column - t10.column) : new _Q2(n10.lineNumber - t10.lineNumber, n10.column - 1);
    }
    static ofRange(t10) {
      return _Q2.betweenPositions(t10.getStartPosition(), t10.getEndPosition());
    }
    static ofText(t10) {
      let n10 = 0, r10 = 0;
      for (let e10 of t10) e10 === `
` ? (n10++, r10 = 0) : r10++;
      return new _Q2(n10, r10);
    }
    constructor(e10, t10) {
      this.lineCount = e10, this.columnCount = t10;
    }
    isGreaterThanOrEqualTo(e10) {
      return this.lineCount === e10.lineCount ? this.columnCount >= e10.columnCount : this.lineCount > e10.lineCount;
    }
    createRange(e10) {
      return this.lineCount === 0 ? new F(e10.lineNumber, e10.column, e10.lineNumber, e10.column + this.columnCount) : new F(e10.lineNumber, e10.column, e10.lineNumber + this.lineCount, this.columnCount + 1);
    }
    addToPosition(e10) {
      return this.lineCount === 0 ? new P(e10.lineNumber, e10.column + this.columnCount) : new P(e10.lineNumber + this.lineCount, this.columnCount + 1);
    }
    toString() {
      return `${this.lineCount},${this.columnCount}`;
    }
  }, _Q2.zero = new _Q2(0, 0), _Q2);
  zv = class {
    constructor(e10) {
      this.text = e10, this.lineStartOffsetByLineIdx = [], this.lineStartOffsetByLineIdx.push(0);
      for (let t10 = 0; t10 < e10.length; t10++) e10.charAt(t10) === `
` && this.lineStartOffsetByLineIdx.push(t10 + 1);
    }
    getOffset(e10) {
      return this.lineStartOffsetByLineIdx[e10.lineNumber - 1] + e10.column - 1;
    }
    getOffsetRange(e10) {
      return new Cv(this.getOffset(e10.getStartPosition()), this.getOffset(e10.getEndPosition()));
    }
    get textLength() {
      let e10 = this.lineStartOffsetByLineIdx.length - 1;
      return new Rv(e10, this.text.length - this.lineStartOffsetByLineIdx[e10]);
    }
  };
  Bv = class {
    constructor(e10) {
      this.edits = e10, nm(() => rm(e10, (e11, t10) => e11.range.getEndPosition().isBeforeOrEqual(t10.range.getStartPosition())));
    }
    apply(e10) {
      let t10 = ``, n10 = new P(1, 1);
      for (let r11 of this.edits) {
        let i10 = r11.range, a10 = i10.getStartPosition(), o10 = i10.getEndPosition(), s10 = Hv(n10, a10);
        s10.isEmpty() || (t10 += e10.getValueOfRange(s10)), t10 += r11.text, n10 = o10;
      }
      let r10 = Hv(n10, e10.endPositionExclusive);
      return r10.isEmpty() || (t10 += e10.getValueOfRange(r10)), t10;
    }
    applyToString(e10) {
      let t10 = new Wv(e10);
      return this.apply(t10);
    }
    getNewRanges() {
      let e10 = [], t10 = 0, n10 = 0, r10 = 0;
      for (let i10 of this.edits) {
        let a10 = Rv.ofText(i10.text), o10 = P.lift({
          lineNumber: i10.range.startLineNumber + n10,
          column: i10.range.startColumn + (i10.range.startLineNumber === t10 ? r10 : 0)
        }), s10 = a10.createRange(o10);
        e10.push(s10), n10 = s10.endLineNumber - i10.range.endLineNumber, r10 = s10.endColumn - i10.range.endColumn, t10 = i10.range.endLineNumber;
      }
      return e10;
    }
  };
  Vv = class {
    constructor(e10, t10) {
      this.range = e10, this.text = t10;
    }
    toSingleEditOperation() {
      return {
        range: this.range,
        text: this.text
      };
    }
  };
  function Hv(e10, t10) {
    if (e10.lineNumber === t10.lineNumber && e10.column === 2 ** 53 - 1) return F.fromPositions(t10, t10);
    if (!e10.isBeforeOrEqual(t10)) throw new Dr(`start must be before end`);
    return new F(e10.lineNumber, e10.column, t10.lineNumber, t10.column);
  }
  var Uv = class {
    get endPositionExclusive() {
      return this.length.addToPosition(new P(1, 1));
    }
  }, Wv = class extends Uv {
    constructor(e10) {
      super(), this.value = e10, this._t = new zv(this.value);
    }
    getValueOfRange(e10) {
      return this._t.getOffsetRange(e10).substring(this.value);
    }
    get length() {
      return this._t.textLength;
    }
  }, Gv = class e10 {
    static inverse(t10, n10, r10) {
      let i10 = [], a10 = 1, o10 = 1;
      for (let n11 of t10) {
        let t11 = new e10(new G(a10, n11.original.startLineNumber), new G(o10, n11.modified.startLineNumber));
        t11.modified.isEmpty || i10.push(t11), a10 = n11.original.endLineNumberExclusive, o10 = n11.modified.endLineNumberExclusive;
      }
      let s10 = new e10(new G(a10, n10 + 1), new G(o10, r10 + 1));
      return s10.modified.isEmpty || i10.push(s10), i10;
    }
    static clip(t10, n10, r10) {
      let i10 = [];
      for (let a10 of t10) {
        let t11 = a10.original.intersect(n10), o10 = a10.modified.intersect(r10);
        t11 && !t11.isEmpty && o10 && !o10.isEmpty && i10.push(new e10(t11, o10));
      }
      return i10;
    }
    constructor(e11, t10) {
      this.original = e11, this.modified = t10;
    }
    toString() {
      return `{${this.original.toString()}->${this.modified.toString()}}`;
    }
    flip() {
      return new e10(this.modified, this.original);
    }
    join(t10) {
      return new e10(this.original.join(t10.original), this.modified.join(t10.modified));
    }
    toRangeMapping() {
      let e11 = this.original.toInclusiveRange(), t10 = this.modified.toInclusiveRange();
      if (e11 && t10) return new Yv(e11, t10);
      if (this.original.startLineNumber === 1 || this.modified.startLineNumber === 1) {
        if (!(this.modified.startLineNumber === 1 && this.original.startLineNumber === 1)) throw new Dr(`not a valid diff`);
        return new Yv(new F(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new F(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
      } else return new Yv(new F(this.original.startLineNumber - 1, 2 ** 53 - 1, this.original.endLineNumberExclusive - 1, 2 ** 53 - 1), new F(this.modified.startLineNumber - 1, 2 ** 53 - 1, this.modified.endLineNumberExclusive - 1, 2 ** 53 - 1));
    }
    toRangeMapping2(e11, t10) {
      if (qv(this.original.endLineNumberExclusive, e11) && qv(this.modified.endLineNumberExclusive, t10)) return new Yv(new F(this.original.startLineNumber, 1, this.original.endLineNumberExclusive, 1), new F(this.modified.startLineNumber, 1, this.modified.endLineNumberExclusive, 1));
      if (!this.original.isEmpty && !this.modified.isEmpty) return new Yv(F.fromPositions(new P(this.original.startLineNumber, 1), Kv(new P(this.original.endLineNumberExclusive - 1, 2 ** 53 - 1), e11)), F.fromPositions(new P(this.modified.startLineNumber, 1), Kv(new P(this.modified.endLineNumberExclusive - 1, 2 ** 53 - 1), t10)));
      if (this.original.startLineNumber > 1 && this.modified.startLineNumber > 1) return new Yv(F.fromPositions(Kv(new P(this.original.startLineNumber - 1, 2 ** 53 - 1), e11), Kv(new P(this.original.endLineNumberExclusive - 1, 2 ** 53 - 1), e11)), F.fromPositions(Kv(new P(this.modified.startLineNumber - 1, 2 ** 53 - 1), t10), Kv(new P(this.modified.endLineNumberExclusive - 1, 2 ** 53 - 1), t10)));
      throw new Dr();
    }
  };
  function Kv(e10, t10) {
    if (e10.lineNumber < 1) return new P(1, 1);
    if (e10.lineNumber > t10.length) return new P(t10.length, t10[t10.length - 1].length + 1);
    let n10 = t10[e10.lineNumber - 1];
    return e10.column > n10.length + 1 ? new P(e10.lineNumber, n10.length + 1) : e10;
  }
  function qv(e10, t10) {
    return e10 >= 1 && e10 <= t10.length;
  }
  var Jv = class e10 extends Gv {
    static fromRangeMappings(t10) {
      let n10 = G.join(t10.map((e11) => G.fromRangeInclusive(e11.originalRange))), r10 = G.join(t10.map((e11) => G.fromRangeInclusive(e11.modifiedRange)));
      return new e10(n10, r10, t10);
    }
    constructor(e11, t10, n10) {
      super(e11, t10), this.innerChanges = n10;
    }
    flip() {
      var _a3;
      return new e10(this.modified, this.original, (_a3 = this.innerChanges) == null ? void 0 : _a3.map((e11) => e11.flip()));
    }
    withInnerChangesFromLineRanges() {
      return new e10(this.original, this.modified, [
        this.toRangeMapping()
      ]);
    }
  }, Yv = class e10 {
    static assertSorted(e11) {
      for (let t10 = 1; t10 < e11.length; t10++) {
        let n10 = e11[t10 - 1], r10 = e11[t10];
        if (!(n10.originalRange.getEndPosition().isBeforeOrEqual(r10.originalRange.getStartPosition()) && n10.modifiedRange.getEndPosition().isBeforeOrEqual(r10.modifiedRange.getStartPosition()))) throw new Dr(`Range mappings must be sorted`);
      }
    }
    constructor(e11, t10) {
      this.originalRange = e11, this.modifiedRange = t10;
    }
    toString() {
      return `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;
    }
    flip() {
      return new e10(this.modifiedRange, this.originalRange);
    }
    toTextEdit(e11) {
      let t10 = e11.getValueOfRange(this.modifiedRange);
      return new Vv(this.originalRange, t10);
    }
  };
  const Xv = 3;
  var Zv = class {
    computeDiff(e10, t10, n10) {
      var _a3;
      let r10 = new iy(e10, t10, {
        maxComputationTime: n10.maxComputationTimeMs,
        shouldIgnoreTrimWhitespace: n10.ignoreTrimWhitespace,
        shouldComputeCharChanges: true,
        shouldMakePrettyDiff: true,
        shouldPostProcessCharChanges: true
      }), i10 = r10.computeDiff(), a10 = [], o10 = null;
      for (let e11 of i10.changes) {
        let t11;
        t11 = e11.originalEndLineNumber === 0 ? new G(e11.originalStartLineNumber + 1, e11.originalStartLineNumber + 1) : new G(e11.originalStartLineNumber, e11.originalEndLineNumber + 1);
        let n11;
        n11 = e11.modifiedEndLineNumber === 0 ? new G(e11.modifiedStartLineNumber + 1, e11.modifiedStartLineNumber + 1) : new G(e11.modifiedStartLineNumber, e11.modifiedEndLineNumber + 1);
        let r11 = new Jv(t11, n11, (_a3 = e11.charChanges) == null ? void 0 : _a3.map((e12) => new Yv(new F(e12.originalStartLineNumber, e12.originalStartColumn, e12.originalEndLineNumber, e12.originalEndColumn), new F(e12.modifiedStartLineNumber, e12.modifiedStartColumn, e12.modifiedEndLineNumber, e12.modifiedEndColumn))));
        o10 && (o10.modified.endLineNumberExclusive === r11.modified.startLineNumber || o10.original.endLineNumberExclusive === r11.original.startLineNumber) && (r11 = new Jv(o10.original.join(r11.original), o10.modified.join(r11.modified), o10.innerChanges && r11.innerChanges ? o10.innerChanges.concat(r11.innerChanges) : void 0), a10.pop()), a10.push(r11), o10 = r11;
      }
      return nm(() => rm(a10, (e11, t11) => t11.original.startLineNumber - e11.original.endLineNumberExclusive === t11.modified.startLineNumber - e11.modified.endLineNumberExclusive && e11.original.endLineNumberExclusive < t11.original.startLineNumber && e11.modified.endLineNumberExclusive < t11.modified.startLineNumber)), new xv(a10, [], i10.quitEarly);
    }
  };
  function Qv(e10, t10, n10, r10) {
    let i10 = new C_(e10, t10, n10);
    return i10.ComputeDiff(r10);
  }
  var $v = class {
    constructor(e10) {
      let t10 = [], n10 = [];
      for (let r10 = 0, i10 = e10.length; r10 < i10; r10++) t10[r10] = ay(e10[r10], 1), n10[r10] = oy(e10[r10], 1);
      this.lines = e10, this._startColumns = t10, this._endColumns = n10;
    }
    getElements() {
      let e10 = [];
      for (let t10 = 0, n10 = this.lines.length; t10 < n10; t10++) e10[t10] = this.lines[t10].substring(this._startColumns[t10] - 1, this._endColumns[t10] - 1);
      return e10;
    }
    getStrictElement(e10) {
      return this.lines[e10];
    }
    getStartLineNumber(e10) {
      return e10 + 1;
    }
    getEndLineNumber(e10) {
      return e10 + 1;
    }
    createCharSequence(e10, t10, n10) {
      let r10 = [], i10 = [], a10 = [], o10 = 0;
      for (let s10 = t10; s10 <= n10; s10++) {
        let t11 = this.lines[s10], c10 = e10 ? this._startColumns[s10] : 1, l10 = e10 ? this._endColumns[s10] : t11.length + 1;
        for (let e11 = c10; e11 < l10; e11++) r10[o10] = t11.charCodeAt(e11 - 1), i10[o10] = s10 + 1, a10[o10] = e11, o10++;
        !e10 && s10 < n10 && (r10[o10] = 10, i10[o10] = s10 + 1, a10[o10] = t11.length + 1, o10++);
      }
      return new ey(r10, i10, a10);
    }
  }, ey = class {
    constructor(e10, t10, n10) {
      this._charCodes = e10, this._lineNumbers = t10, this._columns = n10;
    }
    toString() {
      return `[` + this._charCodes.map((e10, t10) => (e10 === 10 ? `\\n` : String.fromCharCode(e10)) + `-(${this._lineNumbers[t10]},${this._columns[t10]})`).join(`, `) + `]`;
    }
    _assertIndex(e10, t10) {
      if (e10 < 0 || e10 >= t10.length) throw Error(`Illegal index`);
    }
    getElements() {
      return this._charCodes;
    }
    getStartLineNumber(e10) {
      return e10 > 0 && e10 === this._lineNumbers.length ? this.getEndLineNumber(e10 - 1) : (this._assertIndex(e10, this._lineNumbers), this._lineNumbers[e10]);
    }
    getEndLineNumber(e10) {
      return e10 === -1 ? this.getStartLineNumber(e10 + 1) : (this._assertIndex(e10, this._lineNumbers), this._charCodes[e10] === 10 ? this._lineNumbers[e10] + 1 : this._lineNumbers[e10]);
    }
    getStartColumn(e10) {
      return e10 > 0 && e10 === this._columns.length ? this.getEndColumn(e10 - 1) : (this._assertIndex(e10, this._columns), this._columns[e10]);
    }
    getEndColumn(e10) {
      return e10 === -1 ? this.getStartColumn(e10 + 1) : (this._assertIndex(e10, this._columns), this._charCodes[e10] === 10 ? 1 : this._columns[e10] + 1);
    }
  }, ty = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10, s10) {
      this.originalStartLineNumber = e11, this.originalStartColumn = t10, this.originalEndLineNumber = n10, this.originalEndColumn = r10, this.modifiedStartLineNumber = i10, this.modifiedStartColumn = a10, this.modifiedEndLineNumber = o10, this.modifiedEndColumn = s10;
    }
    static createFromDiffChange(t10, n10, r10) {
      let i10 = n10.getStartLineNumber(t10.originalStart), a10 = n10.getStartColumn(t10.originalStart), o10 = n10.getEndLineNumber(t10.originalStart + t10.originalLength - 1), s10 = n10.getEndColumn(t10.originalStart + t10.originalLength - 1), c10 = r10.getStartLineNumber(t10.modifiedStart), l10 = r10.getStartColumn(t10.modifiedStart), u10 = r10.getEndLineNumber(t10.modifiedStart + t10.modifiedLength - 1), d10 = r10.getEndColumn(t10.modifiedStart + t10.modifiedLength - 1);
      return new e10(i10, a10, o10, s10, c10, l10, u10, d10);
    }
  };
  function ny(e10) {
    if (e10.length <= 1) return e10;
    let t10 = [
      e10[0]
    ], n10 = t10[0];
    for (let r10 = 1, i10 = e10.length; r10 < i10; r10++) {
      let i11 = e10[r10], a10 = i11.originalStart - (n10.originalStart + n10.originalLength), o10 = i11.modifiedStart - (n10.modifiedStart + n10.modifiedLength), s10 = Math.min(a10, o10);
      s10 < Xv ? (n10.originalLength = i11.originalStart + i11.originalLength - n10.originalStart, n10.modifiedLength = i11.modifiedStart + i11.modifiedLength - n10.modifiedStart) : (t10.push(i11), n10 = i11);
    }
    return t10;
  }
  var ry = class e10 {
    constructor(e11, t10, n10, r10, i10) {
      this.originalStartLineNumber = e11, this.originalEndLineNumber = t10, this.modifiedStartLineNumber = n10, this.modifiedEndLineNumber = r10, this.charChanges = i10;
    }
    static createFromDiffResult(t10, n10, r10, i10, a10, o10, s10) {
      let c10, l10, u10, d10, f10;
      if (n10.originalLength === 0 ? (c10 = r10.getStartLineNumber(n10.originalStart) - 1, l10 = 0) : (c10 = r10.getStartLineNumber(n10.originalStart), l10 = r10.getEndLineNumber(n10.originalStart + n10.originalLength - 1)), n10.modifiedLength === 0 ? (u10 = i10.getStartLineNumber(n10.modifiedStart) - 1, d10 = 0) : (u10 = i10.getStartLineNumber(n10.modifiedStart), d10 = i10.getEndLineNumber(n10.modifiedStart + n10.modifiedLength - 1)), o10 && n10.originalLength > 0 && n10.originalLength < 20 && n10.modifiedLength > 0 && n10.modifiedLength < 20 && a10()) {
        let e11 = r10.createCharSequence(t10, n10.originalStart, n10.originalStart + n10.originalLength - 1), o11 = i10.createCharSequence(t10, n10.modifiedStart, n10.modifiedStart + n10.modifiedLength - 1);
        if (e11.getElements().length > 0 && o11.getElements().length > 0) {
          let t11 = Qv(e11, o11, a10, true).changes;
          s10 && (t11 = ny(t11)), f10 = [];
          for (let n11 = 0, r11 = t11.length; n11 < r11; n11++) f10.push(ty.createFromDiffChange(t11[n11], e11, o11));
        }
      }
      return new e10(c10, l10, u10, d10, f10);
    }
  }, iy = class {
    constructor(e10, t10, n10) {
      this.shouldComputeCharChanges = n10.shouldComputeCharChanges, this.shouldPostProcessCharChanges = n10.shouldPostProcessCharChanges, this.shouldIgnoreTrimWhitespace = n10.shouldIgnoreTrimWhitespace, this.shouldMakePrettyDiff = n10.shouldMakePrettyDiff, this.originalLines = e10, this.modifiedLines = t10, this.original = new $v(e10), this.modified = new $v(t10), this.continueLineDiff = sy(n10.maxComputationTime), this.continueCharDiff = sy(n10.maxComputationTime === 0 ? 0 : Math.min(n10.maxComputationTime, 5e3));
    }
    computeDiff() {
      if (this.original.lines.length === 1 && this.original.lines[0].length === 0) return this.modified.lines.length === 1 && this.modified.lines[0].length === 0 ? {
        quitEarly: false,
        changes: []
      } : {
        quitEarly: false,
        changes: [
          {
            originalStartLineNumber: 1,
            originalEndLineNumber: 1,
            modifiedStartLineNumber: 1,
            modifiedEndLineNumber: this.modified.lines.length,
            charChanges: void 0
          }
        ]
      };
      if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) return {
        quitEarly: false,
        changes: [
          {
            originalStartLineNumber: 1,
            originalEndLineNumber: this.original.lines.length,
            modifiedStartLineNumber: 1,
            modifiedEndLineNumber: 1,
            charChanges: void 0
          }
        ]
      };
      let e10 = Qv(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff), t10 = e10.changes, n10 = e10.quitEarly;
      if (this.shouldIgnoreTrimWhitespace) {
        let e11 = [];
        for (let n11 = 0, r11 = t10.length; n11 < r11; n11++) e11.push(ry.createFromDiffResult(this.shouldIgnoreTrimWhitespace, t10[n11], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));
        return {
          quitEarly: n10,
          changes: e11
        };
      }
      let r10 = [], i10 = 0, a10 = 0;
      for (let e11 = -1, n11 = t10.length; e11 < n11; e11++) {
        let o10 = e11 + 1 < n11 ? t10[e11 + 1] : null, s10 = o10 ? o10.originalStart : this.originalLines.length, c10 = o10 ? o10.modifiedStart : this.modifiedLines.length;
        for (; i10 < s10 && a10 < c10; ) {
          let e12 = this.originalLines[i10], t11 = this.modifiedLines[a10];
          if (e12 !== t11) {
            {
              let n12 = ay(e12, 1), o11 = ay(t11, 1);
              for (; n12 > 1 && o11 > 1; ) {
                let r11 = e12.charCodeAt(n12 - 2), i11 = t11.charCodeAt(o11 - 2);
                if (r11 !== i11) break;
                n12--, o11--;
              }
              (n12 > 1 || o11 > 1) && this._pushTrimWhitespaceCharChange(r10, i10 + 1, 1, n12, a10 + 1, 1, o11);
            }
            {
              let n12 = oy(e12, 1), o11 = oy(t11, 1), s11 = e12.length + 1, c11 = t11.length + 1;
              for (; n12 < s11 && o11 < c11; ) {
                let t12 = e12.charCodeAt(n12 - 1), r11 = e12.charCodeAt(o11 - 1);
                if (t12 !== r11) break;
                n12++, o11++;
              }
              (n12 < s11 || o11 < c11) && this._pushTrimWhitespaceCharChange(r10, i10 + 1, n12, s11, a10 + 1, o11, c11);
            }
          }
          i10++, a10++;
        }
        o10 && (r10.push(ry.createFromDiffResult(this.shouldIgnoreTrimWhitespace, o10, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges)), i10 += o10.originalLength, a10 += o10.modifiedLength);
      }
      return {
        quitEarly: n10,
        changes: r10
      };
    }
    _pushTrimWhitespaceCharChange(e10, t10, n10, r10, i10, a10, o10) {
      if (this._mergeTrimWhitespaceCharChange(e10, t10, n10, r10, i10, a10, o10)) return;
      let s10;
      this.shouldComputeCharChanges && (s10 = [
        new ty(t10, n10, t10, r10, i10, a10, i10, o10)
      ]), e10.push(new ry(t10, t10, i10, i10, s10));
    }
    _mergeTrimWhitespaceCharChange(e10, t10, n10, r10, i10, a10, o10) {
      let s10 = e10.length;
      if (s10 === 0) return false;
      let c10 = e10[s10 - 1];
      return c10.originalEndLineNumber === 0 || c10.modifiedEndLineNumber === 0 ? false : c10.originalEndLineNumber === t10 && c10.modifiedEndLineNumber === i10 ? (this.shouldComputeCharChanges && c10.charChanges && c10.charChanges.push(new ty(t10, n10, t10, r10, i10, a10, i10, o10)), true) : c10.originalEndLineNumber + 1 === t10 && c10.modifiedEndLineNumber + 1 === i10 ? (c10.originalEndLineNumber = t10, c10.modifiedEndLineNumber = i10, this.shouldComputeCharChanges && c10.charChanges && c10.charChanges.push(new ty(t10, n10, t10, r10, i10, a10, i10, o10)), true) : false;
    }
  };
  function ay(e10, t10) {
    let n10 = Es(e10);
    return n10 === -1 ? t10 : n10 + 1;
  }
  function oy(e10, t10) {
    let n10 = Os(e10);
    return n10 === -1 ? t10 : n10 + 2;
  }
  function sy(e10) {
    if (e10 === 0) return () => true;
    let t10 = Date.now();
    return () => Date.now() - t10 < e10;
  }
  var cy = class e10 {
    static trivial(t10, n10) {
      return new e10([
        new ly(Cv.ofLength(t10.length), Cv.ofLength(n10.length))
      ], false);
    }
    static trivialTimedOut(t10, n10) {
      return new e10([
        new ly(Cv.ofLength(t10.length), Cv.ofLength(n10.length))
      ], true);
    }
    constructor(e11, t10) {
      this.diffs = e11, this.hitTimeout = t10;
    }
  }, ly = class e10 {
    static invert(t10, n10) {
      let r10 = [];
      return g(t10, (t11, i10) => {
        r10.push(e10.fromOffsetPairs(t11 ? t11.getEndExclusives() : uy.zero, i10 ? i10.getStarts() : new uy(n10, (t11 ? t11.seq2Range.endExclusive - t11.seq1Range.endExclusive : 0) + n10)));
      }), r10;
    }
    static fromOffsetPairs(t10, n10) {
      return new e10(new Cv(t10.offset1, n10.offset1), new Cv(t10.offset2, n10.offset2));
    }
    static assertSorted(e11) {
      let t10;
      for (let n10 of e11) {
        if (t10 && !(t10.seq1Range.endExclusive <= n10.seq1Range.start && t10.seq2Range.endExclusive <= n10.seq2Range.start)) throw new Dr(`Sequence diffs must be sorted`);
        t10 = n10;
      }
    }
    constructor(e11, t10) {
      this.seq1Range = e11, this.seq2Range = t10;
    }
    swap() {
      return new e10(this.seq2Range, this.seq1Range);
    }
    toString() {
      return `${this.seq1Range} <-> ${this.seq2Range}`;
    }
    join(t10) {
      return new e10(this.seq1Range.join(t10.seq1Range), this.seq2Range.join(t10.seq2Range));
    }
    delta(t10) {
      return t10 === 0 ? this : new e10(this.seq1Range.delta(t10), this.seq2Range.delta(t10));
    }
    deltaStart(t10) {
      return t10 === 0 ? this : new e10(this.seq1Range.deltaStart(t10), this.seq2Range.deltaStart(t10));
    }
    deltaEnd(t10) {
      return t10 === 0 ? this : new e10(this.seq1Range.deltaEnd(t10), this.seq2Range.deltaEnd(t10));
    }
    intersect(t10) {
      let n10 = this.seq1Range.intersect(t10.seq1Range), r10 = this.seq2Range.intersect(t10.seq2Range);
      if (!(!n10 || !r10)) return new e10(n10, r10);
    }
    getStarts() {
      return new uy(this.seq1Range.start, this.seq2Range.start);
    }
    getEndExclusives() {
      return new uy(this.seq1Range.endExclusive, this.seq2Range.endExclusive);
    }
  }, uy = (_R2 = class {
    constructor(e10, t10) {
      this.offset1 = e10, this.offset2 = t10;
    }
    toString() {
      return `${this.offset1} <-> ${this.offset2}`;
    }
    delta(t10) {
      return t10 === 0 ? this : new _R2(this.offset1 + t10, this.offset2 + t10);
    }
    equals(e10) {
      return this.offset1 === e10.offset1 && this.offset2 === e10.offset2;
    }
  }, _R2.zero = new _R2(0, 0), _R2.max = new _R2(2 ** 53 - 1, 2 ** 53 - 1), _R2), dy = (_S2 = class {
    isValid() {
      return true;
    }
  }, _S2.instance = new _S2(), _S2), fy = class {
    constructor(e10) {
      if (this.timeout = e10, this.startTime = Date.now(), this.valid = true, e10 <= 0) throw new Dr(`timeout must be positive`);
    }
    isValid() {
      let e10 = Date.now() - this.startTime < this.timeout;
      if (!e10 && this.valid) {
        this.valid = false;
        debugger;
      }
      return this.valid;
    }
  }, py = class {
    constructor(e10, t10) {
      this.width = e10, this.height = t10, this.array = [], this.array = Array(e10 * t10);
    }
    get(e10, t10) {
      return this.array[e10 + t10 * this.width];
    }
    set(e10, t10, n10) {
      this.array[e10 + t10 * this.width] = n10;
    }
  };
  function my(e10) {
    return e10 === 32 || e10 === 9;
  }
  var hy = (_T2 = class {
    static getKey(e10) {
      let t10 = this.chrKeys.get(e10);
      return t10 === void 0 && (t10 = this.chrKeys.size, this.chrKeys.set(e10, t10)), t10;
    }
    constructor(t10, n10, r10) {
      this.range = t10, this.lines = n10, this.source = r10, this.histogram = [];
      let i10 = 0;
      for (let r11 = t10.startLineNumber - 1; r11 < t10.endLineNumberExclusive - 1; r11++) {
        let t11 = n10[r11];
        for (let n11 = 0; n11 < t11.length; n11++) {
          i10++;
          let r12 = t11[n11], a11 = _T2.getKey(r12);
          this.histogram[a11] = (this.histogram[a11] || 0) + 1;
        }
        i10++;
        let a10 = _T2.getKey(`
`);
        this.histogram[a10] = (this.histogram[a10] || 0) + 1;
      }
      this.totalCount = i10;
    }
    computeSimilarity(e10) {
      let t10 = 0, n10 = Math.max(this.histogram.length, e10.histogram.length);
      for (let r10 = 0; r10 < n10; r10++) t10 += Math.abs((this.histogram[r10] ?? 0) - (e10.histogram[r10] ?? 0));
      return 1 - t10 / (this.totalCount + e10.totalCount);
    }
  }, _T2.chrKeys = /* @__PURE__ */ new Map(), _T2), gy = class {
    compute(e10, t10, n10 = dy.instance, r10) {
      if (e10.length === 0 || t10.length === 0) return cy.trivial(e10, t10);
      let i10 = new py(e10.length, t10.length), a10 = new py(e10.length, t10.length), o10 = new py(e10.length, t10.length);
      for (let s11 = 0; s11 < e10.length; s11++) for (let c11 = 0; c11 < t10.length; c11++) {
        if (!n10.isValid()) return cy.trivialTimedOut(e10, t10);
        let l11 = s11 === 0 ? 0 : i10.get(s11 - 1, c11), u11 = c11 === 0 ? 0 : i10.get(s11, c11 - 1), d11;
        e10.getElement(s11) === t10.getElement(c11) ? (d11 = s11 === 0 || c11 === 0 ? 0 : i10.get(s11 - 1, c11 - 1), s11 > 0 && c11 > 0 && a10.get(s11 - 1, c11 - 1) === 3 && (d11 += o10.get(s11 - 1, c11 - 1)), d11 += r10 ? r10(s11, c11) : 1) : d11 = -1;
        let f11 = Math.max(l11, u11, d11);
        if (f11 === d11) {
          let e11 = s11 > 0 && c11 > 0 ? o10.get(s11 - 1, c11 - 1) : 0;
          o10.set(s11, c11, e11 + 1), a10.set(s11, c11, 3);
        } else f11 === l11 ? (o10.set(s11, c11, 0), a10.set(s11, c11, 1)) : f11 === u11 && (o10.set(s11, c11, 0), a10.set(s11, c11, 2));
        i10.set(s11, c11, f11);
      }
      let s10 = [], c10 = e10.length, l10 = t10.length;
      function u10(e11, t11) {
        (e11 + 1 !== c10 || t11 + 1 !== l10) && s10.push(new ly(new Cv(e11 + 1, c10), new Cv(t11 + 1, l10))), c10 = e11, l10 = t11;
      }
      let d10 = e10.length - 1, f10 = t10.length - 1;
      for (; d10 >= 0 && f10 >= 0; ) a10.get(d10, f10) === 3 ? (u10(d10, f10), d10--, f10--) : a10.get(d10, f10) === 1 ? d10-- : f10--;
      return u10(-1, -1), s10.reverse(), new cy(s10, false);
    }
  }, _y = class {
    compute(e10, t10, n10 = dy.instance) {
      if (e10.length === 0 || t10.length === 0) return cy.trivial(e10, t10);
      let r10 = e10, i10 = t10;
      function a10(e11, t11) {
        for (; e11 < r10.length && t11 < i10.length && r10.getElement(e11) === i10.getElement(t11); ) e11++, t11++;
        return e11;
      }
      let o10 = 0, s10 = new yy();
      s10.set(0, a10(0, 0));
      let c10 = new by();
      c10.set(0, s10.get(0) === 0 ? null : new vy(null, 0, 0, s10.get(0)));
      let l10 = 0;
      loop: for (; ; ) {
        if (o10++, !n10.isValid()) return cy.trivialTimedOut(r10, i10);
        let e11 = -Math.min(o10, i10.length + o10 % 2), t11 = Math.min(o10, r10.length + o10 % 2);
        for (l10 = e11; l10 <= t11; l10 += 2) {
          let n11 = 0, o11 = l10 === t11 ? -1 : s10.get(l10 + 1), u11 = l10 === e11 ? -1 : s10.get(l10 - 1) + 1;
          n11++;
          let d11 = Math.min(Math.max(o11, u11), r10.length), f11 = d11 - l10;
          if (n11++, d11 > r10.length || f11 > i10.length) continue;
          let p11 = a10(d11, f11);
          s10.set(l10, p11);
          let m10 = d11 === o11 ? c10.get(l10 + 1) : c10.get(l10 - 1);
          if (c10.set(l10, p11 === d11 ? m10 : new vy(m10, d11, f11, p11 - d11)), s10.get(l10) === r10.length && s10.get(l10) - l10 === i10.length) break loop;
        }
      }
      let u10 = c10.get(l10), d10 = [], f10 = r10.length, p10 = i10.length;
      for (; ; ) {
        let e11 = u10 ? u10.x + u10.length : 0, t11 = u10 ? u10.y + u10.length : 0;
        if ((e11 !== f10 || t11 !== p10) && d10.push(new ly(new Cv(e11, f10), new Cv(t11, p10))), !u10) break;
        f10 = u10.x, p10 = u10.y, u10 = u10.prev;
      }
      return d10.reverse(), new cy(d10, false);
    }
  }, vy = class {
    constructor(e10, t10, n10, r10) {
      this.prev = e10, this.x = t10, this.y = n10, this.length = r10;
    }
  }, yy = class {
    constructor() {
      this.positiveArr = new Int32Array(10), this.negativeArr = new Int32Array(10);
    }
    get(e10) {
      return e10 < 0 ? (e10 = -e10 - 1, this.negativeArr[e10]) : this.positiveArr[e10];
    }
    set(e10, t10) {
      if (e10 < 0) {
        if (e10 = -e10 - 1, e10 >= this.negativeArr.length) {
          let e11 = this.negativeArr;
          this.negativeArr = new Int32Array(e11.length * 2), this.negativeArr.set(e11);
        }
        this.negativeArr[e10] = t10;
      } else {
        if (e10 >= this.positiveArr.length) {
          let e11 = this.positiveArr;
          this.positiveArr = new Int32Array(e11.length * 2), this.positiveArr.set(e11);
        }
        this.positiveArr[e10] = t10;
      }
    }
  }, by = class {
    constructor() {
      this.positiveArr = [], this.negativeArr = [];
    }
    get(e10) {
      return e10 < 0 ? (e10 = -e10 - 1, this.negativeArr[e10]) : this.positiveArr[e10];
    }
    set(e10, t10) {
      e10 < 0 ? (e10 = -e10 - 1, this.negativeArr[e10] = t10) : this.positiveArr[e10] = t10;
    }
  }, xy = class {
    constructor(e10, t10, n10) {
      this.lines = e10, this.range = t10, this.considerWhitespaceChanges = n10, this.elements = [], this.firstElementOffsetByLineIdx = [], this.lineStartOffsets = [], this.trimmedWsLengthsByLineIdx = [], this.firstElementOffsetByLineIdx.push(0);
      for (let t11 = this.range.startLineNumber; t11 <= this.range.endLineNumber; t11++) {
        let r10 = e10[t11 - 1], i10 = 0;
        t11 === this.range.startLineNumber && this.range.startColumn > 1 && (i10 = this.range.startColumn - 1, r10 = r10.substring(i10)), this.lineStartOffsets.push(i10);
        let a10 = 0;
        if (!n10) {
          let e11 = r10.trimStart();
          a10 = r10.length - e11.length, r10 = e11.trimEnd();
        }
        this.trimmedWsLengthsByLineIdx.push(a10);
        let o10 = t11 === this.range.endLineNumber ? Math.min(this.range.endColumn - 1 - i10 - a10, r10.length) : r10.length;
        for (let e11 = 0; e11 < o10; e11++) this.elements.push(r10.charCodeAt(e11));
        t11 < this.range.endLineNumber && (this.elements.push(10), this.firstElementOffsetByLineIdx.push(this.elements.length));
      }
    }
    toString() {
      return `Slice: "${this.text}"`;
    }
    get text() {
      return this.getText(new Cv(0, this.length));
    }
    getText(e10) {
      return this.elements.slice(e10.start, e10.endExclusive).map((e11) => String.fromCharCode(e11)).join(``);
    }
    getElement(e10) {
      return this.elements[e10];
    }
    get length() {
      return this.elements.length;
    }
    getBoundaryScore(e10) {
      let t10 = Ty(e10 > 0 ? this.elements[e10 - 1] : -1), n10 = Ty(e10 < this.elements.length ? this.elements[e10] : -1);
      if (t10 === 7 && n10 === 8) return 0;
      if (t10 === 8) return 150;
      let r10 = 0;
      return t10 !== n10 && (r10 += 10, t10 === 0 && n10 === 1 && (r10 += 1)), r10 += wy(t10), r10 += wy(n10), r10;
    }
    translateOffset(e10, t10 = `right`) {
      let n10 = Ov(this.firstElementOffsetByLineIdx, (t11) => t11 <= e10), r10 = e10 - this.firstElementOffsetByLineIdx[n10];
      return new P(this.range.startLineNumber + n10, 1 + this.lineStartOffsets[n10] + r10 + (r10 === 0 && t10 === `left` ? 0 : this.trimmedWsLengthsByLineIdx[n10]));
    }
    translateRange(e10) {
      let t10 = this.translateOffset(e10.start, `right`), n10 = this.translateOffset(e10.endExclusive, `left`);
      return n10.isBefore(t10) ? F.fromPositions(n10, n10) : F.fromPositions(t10, n10);
    }
    findWordContaining(e10) {
      if (e10 < 0 || e10 >= this.elements.length || !Sy(this.elements[e10])) return;
      let t10 = e10;
      for (; t10 > 0 && Sy(this.elements[t10 - 1]); ) t10--;
      let n10 = e10;
      for (; n10 < this.elements.length && Sy(this.elements[n10]); ) n10++;
      return new Cv(t10, n10);
    }
    countLinesIn(e10) {
      return this.translateOffset(e10.endExclusive).lineNumber - this.translateOffset(e10.start).lineNumber;
    }
    isStronglyEqual(e10, t10) {
      return this.elements[e10] === this.elements[t10];
    }
    extendToFullLines(e10) {
      let t10 = Dv(this.firstElementOffsetByLineIdx, (t11) => t11 <= e10.start) ?? 0, n10 = kv(this.firstElementOffsetByLineIdx, (t11) => e10.endExclusive <= t11) ?? this.elements.length;
      return new Cv(t10, n10);
    }
  };
  function Sy(e10) {
    return e10 >= 97 && e10 <= 122 || e10 >= 65 && e10 <= 90 || e10 >= 48 && e10 <= 57;
  }
  const Cy = {
    0: 0,
    1: 0,
    2: 0,
    3: 10,
    4: 2,
    5: 30,
    6: 3,
    7: 10,
    8: 10
  };
  function wy(e10) {
    return Cy[e10];
  }
  function Ty(e10) {
    return e10 === 10 ? 8 : e10 === 13 ? 7 : my(e10) ? 6 : e10 >= 97 && e10 <= 122 ? 0 : e10 >= 65 && e10 <= 90 ? 1 : e10 >= 48 && e10 <= 57 ? 2 : e10 === -1 ? 3 : e10 === 44 || e10 === 59 ? 5 : 4;
  }
  function Ey(e10, t10, n10, r10, i10, a10) {
    let { moves: o10, excludedChanges: s10 } = Oy(e10, t10, n10, a10);
    if (!a10.isValid()) return [];
    let c10 = e10.filter((e11) => !s10.has(e11)), l10 = ky(c10, r10, i10, t10, n10, a10);
    return re(o10, l10), o10 = jy(o10), o10 = o10.filter((e11) => {
      let n11 = e11.original.toOffsetRange().slice(t10).map((e12) => e12.trim()), r11 = n11.join(`
`);
      return r11.length >= 15 && Dy(n11, (e12) => e12.length >= 2) >= 2;
    }), o10 = My(e10, o10), o10;
  }
  function Dy(e10, t10) {
    let n10 = 0;
    for (let r10 of e10) t10(r10) && n10++;
    return n10;
  }
  function Oy(e10, t10, n10, r10) {
    let i10 = [], a10 = e10.filter((e11) => e11.modified.isEmpty && e11.original.length >= 3).map((e11) => new hy(e11.original, t10, e11)), o10 = new Set(e10.filter((e11) => e11.original.isEmpty && e11.modified.length >= 3).map((e11) => new hy(e11.modified, n10, e11))), s10 = /* @__PURE__ */ new Set();
    for (let e11 of a10) {
      let t11 = -1, n11;
      for (let r11 of o10) {
        let i11 = e11.computeSimilarity(r11);
        i11 > t11 && (t11 = i11, n11 = r11);
      }
      if (t11 > 0.9 && n11 && (o10.delete(n11), i10.push(new Gv(e11.range, n11.range)), s10.add(e11.source), s10.add(n11.source)), !r10.isValid()) return {
        moves: i10,
        excludedChanges: s10
      };
    }
    return {
      moves: i10,
      excludedChanges: s10
    };
  }
  function ky(e10, t10, n10, r10, i10, a10) {
    let o10 = [], s10 = new q_();
    for (let n11 of e10) for (let e11 = n11.original.startLineNumber; e11 < n11.original.endLineNumberExclusive - 2; e11++) {
      let n12 = `${t10[e11 - 1]}:${t10[e11 + 1 - 1]}:${t10[e11 + 2 - 1]}`;
      s10.add(n12, {
        range: new G(e11, e11 + 3)
      });
    }
    let c10 = [];
    e10.sort(le((e11) => e11.modified.startLineNumber, de));
    for (let t11 of e10) {
      let e11 = [];
      for (let r11 = t11.modified.startLineNumber; r11 < t11.modified.endLineNumberExclusive - 2; r11++) {
        let t12 = `${n10[r11 - 1]}:${n10[r11 + 1 - 1]}:${n10[r11 + 2 - 1]}`, i11 = new G(r11, r11 + 3), a11 = [];
        s10.forEach(t12, ({ range: t13 }) => {
          for (let n12 of e11) if (n12.originalLineRange.endLineNumberExclusive + 1 === t13.endLineNumberExclusive && n12.modifiedLineRange.endLineNumberExclusive + 1 === i11.endLineNumberExclusive) {
            n12.originalLineRange = new G(n12.originalLineRange.startLineNumber, t13.endLineNumberExclusive), n12.modifiedLineRange = new G(n12.modifiedLineRange.startLineNumber, i11.endLineNumberExclusive), a11.push(n12);
            return;
          }
          let n11 = {
            modifiedLineRange: i11,
            originalLineRange: t13
          };
          c10.push(n11), a11.push(n11);
        }), e11 = a11;
      }
      if (!a10.isValid()) return [];
    }
    c10.sort(pe(le((e11) => e11.modifiedLineRange.length, de)));
    let l10 = new Lv(), u10 = new Lv();
    for (let e11 of c10) {
      let t11 = e11.modifiedLineRange.startLineNumber - e11.originalLineRange.startLineNumber, n11 = l10.subtractFrom(e11.modifiedLineRange), r11 = u10.subtractFrom(e11.originalLineRange).getWithDelta(t11), i11 = n11.getIntersection(r11);
      for (let e12 of i11.ranges) {
        if (e12.length < 3) continue;
        let n12 = e12, r12 = e12.delta(-t11);
        o10.push(new Gv(r12, n12)), l10.addRange(n12), u10.addRange(r12);
      }
    }
    o10.sort(le((e11) => e11.original.startLineNumber, de));
    let d10 = new jv(e10);
    for (let t11 = 0; t11 < o10.length; t11++) {
      let n11 = o10[t11], s11 = d10.findLastMonotonous((e11) => e11.original.startLineNumber <= n11.original.startLineNumber), c11 = Dv(e10, (e11) => e11.modified.startLineNumber <= n11.modified.startLineNumber), f10 = Math.max(n11.original.startLineNumber - s11.original.startLineNumber, n11.modified.startLineNumber - c11.modified.startLineNumber), p10 = d10.findLastMonotonous((e11) => e11.original.startLineNumber < n11.original.endLineNumberExclusive), m10 = Dv(e10, (e11) => e11.modified.startLineNumber < n11.modified.endLineNumberExclusive), h10 = Math.max(p10.original.endLineNumberExclusive - n11.original.endLineNumberExclusive, m10.modified.endLineNumberExclusive - n11.modified.endLineNumberExclusive), g10;
      for (g10 = 0; g10 < f10; g10++) {
        let e11 = n11.original.startLineNumber - g10 - 1, t12 = n11.modified.startLineNumber - g10 - 1;
        if (e11 > r10.length || t12 > i10.length || l10.contains(t12) || u10.contains(e11) || !Ay(r10[e11 - 1], i10[t12 - 1], a10)) break;
      }
      g10 > 0 && (u10.addRange(new G(n11.original.startLineNumber - g10, n11.original.startLineNumber)), l10.addRange(new G(n11.modified.startLineNumber - g10, n11.modified.startLineNumber)));
      let _10;
      for (_10 = 0; _10 < h10; _10++) {
        let e11 = n11.original.endLineNumberExclusive + _10, t12 = n11.modified.endLineNumberExclusive + _10;
        if (e11 > r10.length || t12 > i10.length || l10.contains(t12) || u10.contains(e11) || !Ay(r10[e11 - 1], i10[t12 - 1], a10)) break;
      }
      _10 > 0 && (u10.addRange(new G(n11.original.endLineNumberExclusive, n11.original.endLineNumberExclusive + _10)), l10.addRange(new G(n11.modified.endLineNumberExclusive, n11.modified.endLineNumberExclusive + _10))), (g10 > 0 || _10 > 0) && (o10[t11] = new Gv(new G(n11.original.startLineNumber - g10, n11.original.endLineNumberExclusive + _10), new G(n11.modified.startLineNumber - g10, n11.modified.endLineNumberExclusive + _10)));
    }
    return o10;
  }
  function Ay(e10, t10, n10) {
    if (e10.trim() === t10.trim()) return true;
    if (e10.length > 300 && t10.length > 300) return false;
    let r10 = new _y(), i10 = r10.compute(new xy([
      e10
    ], new F(1, 1, 1, e10.length), false), new xy([
      t10
    ], new F(1, 1, 1, t10.length), false), n10), a10 = 0, o10 = ly.invert(i10.diffs, e10.length);
    for (let t11 of o10) t11.seq1Range.forEach((t12) => {
      my(e10.charCodeAt(t12)) || a10++;
    });
    function s10(t11) {
      let n11 = 0;
      for (let r11 = 0; r11 < e10.length; r11++) my(t11.charCodeAt(r11)) || n11++;
      return n11;
    }
    let c10 = s10(e10.length > t10.length ? e10 : t10), l10 = a10 / c10 > 0.6 && c10 > 10;
    return l10;
  }
  function jy(e10) {
    if (e10.length === 0) return e10;
    e10.sort(le((e11) => e11.original.startLineNumber, de));
    let t10 = [
      e10[0]
    ];
    for (let n10 = 1; n10 < e10.length; n10++) {
      let r10 = t10[t10.length - 1], i10 = e10[n10], a10 = i10.original.startLineNumber - r10.original.endLineNumberExclusive, o10 = i10.modified.startLineNumber - r10.modified.endLineNumberExclusive, s10 = a10 >= 0 && o10 >= 0;
      if (s10 && a10 + o10 <= 2) {
        t10[t10.length - 1] = r10.join(i10);
        continue;
      }
      t10.push(i10);
    }
    return t10;
  }
  function My(e10, t10) {
    let n10 = new jv(e10);
    return t10 = t10.filter((t11) => {
      let r10 = n10.findLastMonotonous((e11) => e11.original.startLineNumber < t11.original.endLineNumberExclusive) || new Gv(new G(1, 1), new G(1, 1)), i10 = Dv(e10, (e11) => e11.modified.startLineNumber < t11.modified.endLineNumberExclusive), a10 = r10 !== i10;
      return a10;
    }), t10;
  }
  function Ny(e10, t10, n10) {
    let r10 = n10;
    return r10 = Py(e10, t10, r10), r10 = Py(e10, t10, r10), r10 = Fy(e10, t10, r10), r10;
  }
  function Py(e10, t10, n10) {
    if (n10.length === 0) return n10;
    let r10 = [];
    r10.push(n10[0]);
    for (let i11 = 1; i11 < n10.length; i11++) {
      let a10 = r10[r10.length - 1], o10 = n10[i11];
      if (o10.seq1Range.isEmpty || o10.seq2Range.isEmpty) {
        let n11 = o10.seq1Range.start - a10.seq1Range.endExclusive, i12;
        for (i12 = 1; i12 <= n11 && !(e10.getElement(o10.seq1Range.start - i12) !== e10.getElement(o10.seq1Range.endExclusive - i12) || t10.getElement(o10.seq2Range.start - i12) !== t10.getElement(o10.seq2Range.endExclusive - i12)); i12++) ;
        if (i12--, i12 === n11) {
          r10[r10.length - 1] = new ly(new Cv(a10.seq1Range.start, o10.seq1Range.endExclusive - n11), new Cv(a10.seq2Range.start, o10.seq2Range.endExclusive - n11));
          continue;
        }
        o10 = o10.delta(-i12);
      }
      r10.push(o10);
    }
    let i10 = [];
    for (let n11 = 0; n11 < r10.length - 1; n11++) {
      let a10 = r10[n11 + 1], o10 = r10[n11];
      if (o10.seq1Range.isEmpty || o10.seq2Range.isEmpty) {
        let i11 = a10.seq1Range.start - o10.seq1Range.endExclusive, s10;
        for (s10 = 0; s10 < i11 && !(!e10.isStronglyEqual(o10.seq1Range.start + s10, o10.seq1Range.endExclusive + s10) || !t10.isStronglyEqual(o10.seq2Range.start + s10, o10.seq2Range.endExclusive + s10)); s10++) ;
        if (s10 === i11) {
          r10[n11 + 1] = new ly(new Cv(o10.seq1Range.start + i11, a10.seq1Range.endExclusive), new Cv(o10.seq2Range.start + i11, a10.seq2Range.endExclusive));
          continue;
        }
        s10 > 0 && (o10 = o10.delta(s10));
      }
      i10.push(o10);
    }
    return r10.length > 0 && i10.push(r10[r10.length - 1]), i10;
  }
  function Fy(e10, t10, n10) {
    if (!e10.getBoundaryScore || !t10.getBoundaryScore) return n10;
    for (let r10 = 0; r10 < n10.length; r10++) {
      let i10 = r10 > 0 ? n10[r10 - 1] : void 0, a10 = n10[r10], o10 = r10 + 1 < n10.length ? n10[r10 + 1] : void 0, s10 = new Cv(i10 ? i10.seq1Range.endExclusive + 1 : 0, o10 ? o10.seq1Range.start - 1 : e10.length), c10 = new Cv(i10 ? i10.seq2Range.endExclusive + 1 : 0, o10 ? o10.seq2Range.start - 1 : t10.length);
      a10.seq1Range.isEmpty ? n10[r10] = Iy(a10, e10, t10, s10, c10) : a10.seq2Range.isEmpty && (n10[r10] = Iy(a10.swap(), t10, e10, c10, s10).swap());
    }
    return n10;
  }
  function Iy(e10, t10, n10, r10, i10) {
    let a10 = 100, o10 = 1;
    for (; e10.seq1Range.start - o10 >= r10.start && e10.seq2Range.start - o10 >= i10.start && n10.isStronglyEqual(e10.seq2Range.start - o10, e10.seq2Range.endExclusive - o10) && o10 < a10; ) o10++;
    o10--;
    let s10 = 0;
    for (; e10.seq1Range.start + s10 < r10.endExclusive && e10.seq2Range.endExclusive + s10 < i10.endExclusive && n10.isStronglyEqual(e10.seq2Range.start + s10, e10.seq2Range.endExclusive + s10) && s10 < a10; ) s10++;
    if (o10 === 0 && s10 === 0) return e10;
    let c10 = 0, l10 = -1;
    for (let r11 = -o10; r11 <= s10; r11++) {
      let i11 = e10.seq2Range.start + r11, a11 = e10.seq2Range.endExclusive + r11, o11 = e10.seq1Range.start + r11, s11 = t10.getBoundaryScore(o11) + n10.getBoundaryScore(i11) + n10.getBoundaryScore(a11);
      s11 > l10 && (l10 = s11, c10 = r11);
    }
    return e10.delta(c10);
  }
  function Ly(e10, t10, n10) {
    let r10 = [];
    for (let e11 of n10) {
      let t11 = r10[r10.length - 1];
      if (!t11) {
        r10.push(e11);
        continue;
      }
      e11.seq1Range.start - t11.seq1Range.endExclusive <= 2 || e11.seq2Range.start - t11.seq2Range.endExclusive <= 2 ? r10[r10.length - 1] = new ly(t11.seq1Range.join(e11.seq1Range), t11.seq2Range.join(e11.seq2Range)) : r10.push(e11);
    }
    return r10;
  }
  function Ry(e10, t10, n10) {
    let r10 = ly.invert(n10, e10.length), i10 = [], a10 = new uy(0, 0);
    function o10(n11, o11) {
      if (n11.offset1 < a10.offset1 || n11.offset2 < a10.offset2) return;
      let s11 = e10.findWordContaining(n11.offset1), c10 = t10.findWordContaining(n11.offset2);
      if (!s11 || !c10) return;
      let l10 = new ly(s11, c10), u10 = l10.intersect(o11), d10 = u10.seq1Range.length, f10 = u10.seq2Range.length;
      for (; r10.length > 0; ) {
        let n12 = r10[0], i11 = n12.seq1Range.intersects(l10.seq1Range) || n12.seq2Range.intersects(l10.seq2Range);
        if (!i11) break;
        let a11 = e10.findWordContaining(n12.seq1Range.start), o12 = t10.findWordContaining(n12.seq2Range.start), s12 = new ly(a11, o12), c11 = s12.intersect(n12);
        if (d10 += c11.seq1Range.length, f10 += c11.seq2Range.length, l10 = l10.join(s12), l10.seq1Range.endExclusive >= n12.seq1Range.endExclusive) r10.shift();
        else break;
      }
      d10 + f10 < (l10.seq1Range.length + l10.seq2Range.length) * 2 / 3 && i10.push(l10), a10 = l10.getEndExclusives();
    }
    for (; r10.length > 0; ) {
      let e11 = r10.shift();
      e11.seq1Range.isEmpty || (o10(e11.getStarts(), e11), o10(e11.getEndExclusives().delta(-1), e11));
    }
    let s10 = zy(n10, i10);
    return s10;
  }
  function zy(e10, t10) {
    let n10 = [];
    for (; e10.length > 0 || t10.length > 0; ) {
      let r10 = e10[0], i10 = t10[0], a10;
      a10 = r10 && (!i10 || r10.seq1Range.start < i10.seq1Range.start) ? e10.shift() : t10.shift(), n10.length > 0 && n10[n10.length - 1].seq1Range.endExclusive >= a10.seq1Range.start ? n10[n10.length - 1] = n10[n10.length - 1].join(a10) : n10.push(a10);
    }
    return n10;
  }
  function By(e10, t10, n10) {
    let r10 = n10;
    if (r10.length === 0) return r10;
    let i10 = 0, a10;
    do {
      a10 = false;
      let t11 = [
        r10[0]
      ];
      for (let n11 = 1; n11 < r10.length; n11++) {
        let s10 = function(t12, n12) {
          let r11 = new Cv(o10.seq1Range.endExclusive, i11.seq1Range.start), a11 = e10.getText(r11), s11 = a11.replace(/\s/g, ``);
          return s11.length <= 4 && (t12.seq1Range.length + t12.seq2Range.length > 5 || n12.seq1Range.length + n12.seq2Range.length > 5);
        };
        let i11 = r10[n11], o10 = t11[t11.length - 1];
        let c10 = s10(o10, i11);
        c10 ? (a10 = true, t11[t11.length - 1] = t11[t11.length - 1].join(i11)) : t11.push(i11);
      }
      r10 = t11;
    } while (i10++ < 10 && a10);
    return r10;
  }
  function Vy(e10, t10, n10) {
    let r10 = n10;
    if (r10.length === 0) return r10;
    let i10 = 0, a10;
    do {
      a10 = false;
      let n11 = [
        r10[0]
      ];
      for (let i11 = 1; i11 < r10.length; i11++) {
        let c10 = function(n12, r11) {
          let i12 = new Cv(s10.seq1Range.endExclusive, o11.seq1Range.start), a11 = e10.countLinesIn(i12);
          if (a11 > 5 || i12.length > 500) return false;
          let c11 = e10.getText(i12).trim();
          if (c11.length > 20 || c11.split(/\r\n|\r|\n/).length > 1) return false;
          let l11 = e10.countLinesIn(n12.seq1Range), u10 = n12.seq1Range.length, d10 = t10.countLinesIn(n12.seq2Range), f10 = n12.seq2Range.length, p10 = e10.countLinesIn(r11.seq1Range), m10 = r11.seq1Range.length, h10 = t10.countLinesIn(r11.seq2Range), g10 = r11.seq2Range.length, _10 = 130;
          function v10(e11) {
            return Math.min(e11, _10);
          }
          return (v10(l11 * 40 + u10) ** 1.5 + v10(d10 * 40 + f10) ** 1.5) ** 1.5 + (v10(p10 * 40 + m10) ** 1.5 + v10(h10 * 40 + g10) ** 1.5) ** 1.5 > (_10 ** 1.5) ** 1.5 * 1.3;
        };
        let o11 = r10[i11], s10 = n11[n11.length - 1];
        let l10 = c10(s10, o11);
        l10 ? (a10 = true, n11[n11.length - 1] = n11[n11.length - 1].join(o11)) : n11.push(o11);
      }
      r10 = n11;
    } while (i10++ < 10 && a10);
    let o10 = [];
    return _(r10, (t11, n11, r11) => {
      let i11 = n11;
      function a11(e11) {
        return e11.length > 0 && e11.trim().length <= 3 && n11.seq1Range.length + n11.seq2Range.length > 100;
      }
      let s10 = e10.extendToFullLines(n11.seq1Range), c10 = e10.getText(new Cv(s10.start, n11.seq1Range.start));
      a11(c10) && (i11 = i11.deltaStart(-c10.length));
      let l10 = e10.getText(new Cv(n11.seq1Range.endExclusive, s10.endExclusive));
      a11(l10) && (i11 = i11.deltaEnd(l10.length));
      let u10 = ly.fromOffsetPairs(t11 ? t11.getEndExclusives() : uy.zero, r11 ? r11.getStarts() : uy.max), d10 = i11.intersect(u10);
      o10.length > 0 && d10.getStarts().equals(o10[o10.length - 1].getEndExclusives()) ? o10[o10.length - 1] = o10[o10.length - 1].join(d10) : o10.push(d10);
    }), o10;
  }
  var Hy = class {
    constructor(e10, t10) {
      this.trimmedHash = e10, this.lines = t10;
    }
    getElement(e10) {
      return this.trimmedHash[e10];
    }
    get length() {
      return this.trimmedHash.length;
    }
    getBoundaryScore(e10) {
      let t10 = e10 === 0 ? 0 : Uy(this.lines[e10 - 1]), n10 = e10 === this.lines.length ? 0 : Uy(this.lines[e10]);
      return 1e3 - (t10 + n10);
    }
    getText(e10) {
      return this.lines.slice(e10.start, e10.endExclusive).join(`
`);
    }
    isStronglyEqual(e10, t10) {
      return this.lines[e10] === this.lines[t10];
    }
  };
  function Uy(e10) {
    let t10 = 0;
    for (; t10 < e10.length && (e10.charCodeAt(t10) === 32 || e10.charCodeAt(t10) === 9); ) t10++;
    return t10;
  }
  var Wy = class {
    constructor() {
      this.dynamicProgrammingDiffing = new gy(), this.myersDiffingAlgorithm = new _y();
    }
    computeDiff(e10, t10, n10) {
      if (e10.length <= 1 && l(e10, t10, (e11, t11) => e11 === t11)) return new xv([], [], false);
      if (e10.length === 1 && e10[0].length === 0 || t10.length === 1 && t10[0].length === 0) return new xv([
        new Jv(new G(1, e10.length + 1), new G(1, t10.length + 1), [
          new Yv(new F(1, 1, e10.length, e10[e10.length - 1].length + 1), new F(1, 1, t10.length, t10[t10.length - 1].length + 1))
        ])
      ], [], false);
      let r10 = n10.maxComputationTimeMs === 0 ? dy.instance : new fy(n10.maxComputationTimeMs), i10 = !n10.ignoreTrimWhitespace, a10 = /* @__PURE__ */ new Map();
      function o10(e11) {
        let t11 = a10.get(e11);
        return t11 === void 0 && (t11 = a10.size, a10.set(e11, t11)), t11;
      }
      let s10 = e10.map((e11) => o10(e11.trim())), c10 = t10.map((e11) => o10(e11.trim())), u10 = new Hy(s10, e10), d10 = new Hy(c10, t10), f10 = (() => u10.length + d10.length < 1700 ? this.dynamicProgrammingDiffing.compute(u10, d10, r10, (n11, r11) => e10[n11] === t10[r11] ? t10[r11].length === 0 ? 0.1 : 1 + Math.log(1 + t10[r11].length) : 0.99) : this.myersDiffingAlgorithm.compute(u10, d10, r10))(), p10 = f10.diffs, m10 = f10.hitTimeout;
      p10 = Ny(u10, d10, p10), p10 = By(u10, d10, p10);
      let h10 = [], g10 = (n11) => {
        if (i10) for (let a11 = 0; a11 < n11; a11++) {
          let n12 = _10 + a11, o11 = v10 + a11;
          if (e10[n12] !== t10[o11]) {
            let a12 = this.refineDiff(e10, t10, new ly(new Cv(n12, n12 + 1), new Cv(o11, o11 + 1)), r10, i10);
            for (let e11 of a12.mappings) h10.push(e11);
            a12.hitTimeout && (m10 = true);
          }
        }
      }, _10 = 0, v10 = 0;
      for (let n11 of p10) {
        nm(() => n11.seq1Range.start - _10 === n11.seq2Range.start - v10);
        let a11 = n11.seq1Range.start - _10;
        g10(a11), _10 = n11.seq1Range.endExclusive, v10 = n11.seq2Range.endExclusive;
        let o11 = this.refineDiff(e10, t10, n11, r10, i10);
        o11.hitTimeout && (m10 = true);
        for (let e11 of o11.mappings) h10.push(e11);
      }
      g10(e10.length - _10);
      let y10 = Gy(h10, e10, t10), b10 = [];
      return n10.computeMoves && (b10 = this.computeMoves(y10, e10, t10, s10, c10, r10, i10)), nm(() => {
        function n11(e11, t11) {
          if (e11.lineNumber < 1 || e11.lineNumber > t11.length) return false;
          let n12 = t11[e11.lineNumber - 1];
          return !(e11.column < 1 || e11.column > n12.length + 1);
        }
        function r11(e11, t11) {
          return !(e11.startLineNumber < 1 || e11.startLineNumber > t11.length + 1 || e11.endLineNumberExclusive < 1 || e11.endLineNumberExclusive > t11.length + 1);
        }
        for (let i11 of y10) {
          if (!i11.innerChanges) return false;
          for (let r12 of i11.innerChanges) {
            let i12 = n11(r12.modifiedRange.getStartPosition(), t10) && n11(r12.modifiedRange.getEndPosition(), t10) && n11(r12.originalRange.getStartPosition(), e10) && n11(r12.originalRange.getEndPosition(), e10);
            if (!i12) return false;
          }
          if (!r11(i11.modified, t10) || !r11(i11.original, e10)) return false;
        }
        return true;
      }), new xv(y10, b10, m10);
    }
    computeMoves(e10, t10, n10, r10, i10, a10, o10) {
      let s10 = Ey(e10, t10, n10, r10, i10, a10), c10 = s10.map((e11) => {
        let r11 = this.refineDiff(t10, n10, new ly(e11.original.toOffsetRange(), e11.modified.toOffsetRange()), a10, o10), i11 = Gy(r11.mappings, t10, n10, true);
        return new Sv(e11, i11);
      });
      return c10;
    }
    refineDiff(e10, t10, n10, r10, i10) {
      let a10 = qy(n10), o10 = a10.toRangeMapping2(e10, t10), s10 = new xy(e10, o10.originalRange, i10), c10 = new xy(t10, o10.modifiedRange, i10), l10 = s10.length + c10.length < 500 ? this.dynamicProgrammingDiffing.compute(s10, c10, r10) : this.myersDiffingAlgorithm.compute(s10, c10, r10), u10 = false, d10 = l10.diffs;
      u10 && ly.assertSorted(d10), d10 = Ny(s10, c10, d10), u10 && ly.assertSorted(d10), d10 = Ry(s10, c10, d10), u10 && ly.assertSorted(d10), d10 = Ly(s10, c10, d10), u10 && ly.assertSorted(d10), d10 = Vy(s10, c10, d10), u10 && ly.assertSorted(d10);
      let f10 = d10.map((e11) => new Yv(s10.translateRange(e11.seq1Range), c10.translateRange(e11.seq2Range)));
      return u10 && Yv.assertSorted(f10), {
        mappings: f10,
        hitTimeout: l10.hitTimeout
      };
    }
  };
  function Gy(e10, t10, n10, r10 = false) {
    let i10 = [];
    for (let r11 of h(e10.map((e11) => Ky(e11, t10, n10)), (e11, t11) => e11.original.overlapOrTouch(t11.original) || e11.modified.overlapOrTouch(t11.modified))) {
      let e11 = r11[0], t11 = r11[r11.length - 1];
      i10.push(new Jv(e11.original.join(t11.original), e11.modified.join(t11.modified), r11.map((e12) => e12.innerChanges[0])));
    }
    return nm(() => !r10 && i10.length > 0 && (i10[0].modified.startLineNumber !== i10[0].original.startLineNumber || n10.length - i10[i10.length - 1].modified.endLineNumberExclusive !== t10.length - i10[i10.length - 1].original.endLineNumberExclusive) ? false : rm(i10, (e11, t11) => t11.original.startLineNumber - e11.original.endLineNumberExclusive === t11.modified.startLineNumber - e11.modified.endLineNumberExclusive && e11.original.endLineNumberExclusive < t11.original.startLineNumber && e11.modified.endLineNumberExclusive < t11.modified.startLineNumber)), i10;
  }
  function Ky(e10, t10, n10) {
    let r10 = 0, i10 = 0;
    e10.modifiedRange.endColumn === 1 && e10.originalRange.endColumn === 1 && e10.originalRange.startLineNumber + r10 <= e10.originalRange.endLineNumber && e10.modifiedRange.startLineNumber + r10 <= e10.modifiedRange.endLineNumber && (i10 = -1), e10.modifiedRange.startColumn - 1 >= n10[e10.modifiedRange.startLineNumber - 1].length && e10.originalRange.startColumn - 1 >= t10[e10.originalRange.startLineNumber - 1].length && e10.originalRange.startLineNumber <= e10.originalRange.endLineNumber + i10 && e10.modifiedRange.startLineNumber <= e10.modifiedRange.endLineNumber + i10 && (r10 = 1);
    let a10 = new G(e10.originalRange.startLineNumber + r10, e10.originalRange.endLineNumber + 1 + i10), o10 = new G(e10.modifiedRange.startLineNumber + r10, e10.modifiedRange.endLineNumber + 1 + i10);
    return new Jv(a10, o10, [
      e10
    ]);
  }
  function qy(e10) {
    return new Gv(new G(e10.seq1Range.start + 1, e10.seq1Range.endExclusive + 1), new G(e10.seq2Range.start + 1, e10.seq2Range.endExclusive + 1));
  }
  const Jy = {
    getLegacy: () => new Zv(),
    getDefault: () => new Wy()
  };
  function Yy(e10, t10) {
    let n10 = 10 ** t10;
    return Math.round(e10 * n10) / n10;
  }
  let Zy;
  Xy = class {
    constructor(e10, t10, n10, r10 = 1) {
      this._rgbaBrand = void 0, this.r = Math.min(255, Math.max(0, e10)) | 0, this.g = Math.min(255, Math.max(0, t10)) | 0, this.b = Math.min(255, Math.max(0, n10)) | 0, this.a = Yy(Math.max(Math.min(1, r10), 0), 3);
    }
    static equals(e10, t10) {
      return e10.r === t10.r && e10.g === t10.g && e10.b === t10.b && e10.a === t10.a;
    }
  };
  Zy = class e10 {
    constructor(e11, t10, n10, r10) {
      this._hslaBrand = void 0, this.h = Math.max(Math.min(360, e11), 0) | 0, this.s = Yy(Math.max(Math.min(1, t10), 0), 3), this.l = Yy(Math.max(Math.min(1, n10), 0), 3), this.a = Yy(Math.max(Math.min(1, r10), 0), 3);
    }
    static equals(e11, t10) {
      return e11.h === t10.h && e11.s === t10.s && e11.l === t10.l && e11.a === t10.a;
    }
    static fromRGBA(t10) {
      let n10 = t10.r / 255, r10 = t10.g / 255, i10 = t10.b / 255, a10 = t10.a, o10 = Math.max(n10, r10, i10), s10 = Math.min(n10, r10, i10), c10 = 0, l10 = 0, u10 = (s10 + o10) / 2, d10 = o10 - s10;
      if (d10 > 0) {
        switch (l10 = Math.min(u10 <= 0.5 ? d10 / (2 * u10) : d10 / (2 - 2 * u10), 1), o10) {
          case n10:
            c10 = (r10 - i10) / d10 + (r10 < i10 ? 6 : 0);
            break;
          case r10:
            c10 = (i10 - n10) / d10 + 2;
            break;
          case i10:
            c10 = (n10 - r10) / d10 + 4;
            break;
        }
        c10 *= 60, c10 = Math.round(c10);
      }
      return new e10(c10, l10, u10, a10);
    }
    static _hue2rgb(e11, t10, n10) {
      return n10 < 0 && (n10 += 1), n10 > 1 && --n10, n10 < 1 / 6 ? e11 + (t10 - e11) * 6 * n10 : n10 < 1 / 2 ? t10 : n10 < 2 / 3 ? e11 + (t10 - e11) * (2 / 3 - n10) * 6 : e11;
    }
    static toRGBA(t10) {
      let n10 = t10.h / 360, { s: r10, l: i10, a: a10 } = t10, o10, s10, c10;
      if (r10 === 0) o10 = s10 = c10 = i10;
      else {
        let t11 = i10 < 0.5 ? i10 * (1 + r10) : i10 + r10 - i10 * r10, a11 = 2 * i10 - t11;
        o10 = e10._hue2rgb(a11, t11, n10 + 1 / 3), s10 = e10._hue2rgb(a11, t11, n10), c10 = e10._hue2rgb(a11, t11, n10 - 1 / 3);
      }
      return new Xy(Math.round(o10 * 255), Math.round(s10 * 255), Math.round(c10 * 255), a10);
    }
  };
  Qy = class e10 {
    constructor(e11, t10, n10, r10) {
      this._hsvaBrand = void 0, this.h = Math.max(Math.min(360, e11), 0) | 0, this.s = Yy(Math.max(Math.min(1, t10), 0), 3), this.v = Yy(Math.max(Math.min(1, n10), 0), 3), this.a = Yy(Math.max(Math.min(1, r10), 0), 3);
    }
    static equals(e11, t10) {
      return e11.h === t10.h && e11.s === t10.s && e11.v === t10.v && e11.a === t10.a;
    }
    static fromRGBA(t10) {
      let n10 = t10.r / 255, r10 = t10.g / 255, i10 = t10.b / 255, a10 = Math.max(n10, r10, i10), o10 = Math.min(n10, r10, i10), s10 = a10 - o10, c10 = a10 === 0 ? 0 : s10 / a10, l10;
      return l10 = s10 === 0 ? 0 : a10 === n10 ? ((r10 - i10) / s10 % 6 + 6) % 6 : a10 === r10 ? (i10 - n10) / s10 + 2 : (n10 - r10) / s10 + 4, new e10(Math.round(l10 * 60), c10, a10, t10.a);
    }
    static toRGBA(e11) {
      let { h: t10, s: n10, v: r10, a: i10 } = e11, a10 = r10 * n10, o10 = a10 * (1 - Math.abs(t10 / 60 % 2 - 1)), s10 = r10 - a10, [c10, l10, u10] = [
        0,
        0,
        0
      ];
      return t10 < 60 ? (c10 = a10, l10 = o10) : t10 < 120 ? (c10 = o10, l10 = a10) : t10 < 180 ? (l10 = a10, u10 = o10) : t10 < 240 ? (l10 = o10, u10 = a10) : t10 < 300 ? (c10 = o10, u10 = a10) : t10 <= 360 && (c10 = a10, u10 = o10), c10 = Math.round((c10 + s10) * 255), l10 = Math.round((l10 + s10) * 255), u10 = Math.round((u10 + s10) * 255), new Xy(c10, l10, u10, i10);
    }
  };
  K = (_U2 = class {
    static fromHex(t10) {
      return _U2.Format.CSS.parseHex(t10) || _U2.red;
    }
    static equals(e10, t10) {
      return !e10 && !t10 ? true : !e10 || !t10 ? false : e10.equals(t10);
    }
    get hsla() {
      return this._hsla ? this._hsla : Zy.fromRGBA(this.rgba);
    }
    get hsva() {
      return this._hsva ? this._hsva : Qy.fromRGBA(this.rgba);
    }
    constructor(e10) {
      if (e10) if (e10 instanceof Xy) this.rgba = e10;
      else if (e10 instanceof Zy) this._hsla = e10, this.rgba = Zy.toRGBA(e10);
      else if (e10 instanceof Qy) this._hsva = e10, this.rgba = Qy.toRGBA(e10);
      else throw Error(`Invalid color ctor argument`);
      else throw Error(`Color needs a value`);
    }
    equals(e10) {
      return !!e10 && Xy.equals(this.rgba, e10.rgba) && Zy.equals(this.hsla, e10.hsla) && Qy.equals(this.hsva, e10.hsva);
    }
    getRelativeLuminance() {
      let t10 = _U2._relativeLuminanceForComponent(this.rgba.r), n10 = _U2._relativeLuminanceForComponent(this.rgba.g), r10 = _U2._relativeLuminanceForComponent(this.rgba.b), i10 = 0.2126 * t10 + 0.7152 * n10 + 0.0722 * r10;
      return Yy(i10, 4);
    }
    static _relativeLuminanceForComponent(e10) {
      let t10 = e10 / 255;
      return t10 <= 0.03928 ? t10 / 12.92 : ((t10 + 0.055) / 1.055) ** 2.4;
    }
    isLighter() {
      let e10 = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1e3;
      return e10 >= 128;
    }
    isLighterThan(e10) {
      let t10 = this.getRelativeLuminance(), n10 = e10.getRelativeLuminance();
      return t10 > n10;
    }
    isDarkerThan(e10) {
      let t10 = this.getRelativeLuminance(), n10 = e10.getRelativeLuminance();
      return t10 < n10;
    }
    lighten(t10) {
      return new _U2(new Zy(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * t10, this.hsla.a));
    }
    darken(t10) {
      return new _U2(new Zy(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * t10, this.hsla.a));
    }
    transparent(t10) {
      let { r: n10, g: r10, b: i10, a: a10 } = this.rgba;
      return new _U2(new Xy(n10, r10, i10, a10 * t10));
    }
    isTransparent() {
      return this.rgba.a === 0;
    }
    isOpaque() {
      return this.rgba.a === 1;
    }
    opposite() {
      return new _U2(new Xy(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));
    }
    makeOpaque(t10) {
      if (this.isOpaque() || t10.rgba.a !== 1) return this;
      let { r: n10, g: r10, b: i10, a: a10 } = this.rgba;
      return new _U2(new Xy(t10.rgba.r - a10 * (t10.rgba.r - n10), t10.rgba.g - a10 * (t10.rgba.g - r10), t10.rgba.b - a10 * (t10.rgba.b - i10), 1));
    }
    toString() {
      return this._toString || (this._toString = _U2.Format.CSS.format(this)), this._toString;
    }
    static getLighterColor(e10, t10, n10) {
      if (e10.isLighterThan(t10)) return e10;
      n10 || (n10 = 0.5);
      let r10 = e10.getRelativeLuminance(), i10 = t10.getRelativeLuminance();
      return n10 = n10 * (i10 - r10) / i10, e10.lighten(n10);
    }
    static getDarkerColor(e10, t10, n10) {
      if (e10.isDarkerThan(t10)) return e10;
      n10 || (n10 = 0.5);
      let r10 = e10.getRelativeLuminance(), i10 = t10.getRelativeLuminance();
      return n10 = n10 * (r10 - i10) / r10, e10.darken(n10);
    }
  }, _U2.white = new _U2(new Xy(255, 255, 255, 1)), _U2.black = new _U2(new Xy(0, 0, 0, 1)), _U2.red = new _U2(new Xy(255, 0, 0, 1)), _U2.blue = new _U2(new Xy(0, 0, 255, 1)), _U2.green = new _U2(new Xy(0, 255, 0, 1)), _U2.cyan = new _U2(new Xy(0, 255, 255, 1)), _U2.lightgrey = new _U2(new Xy(211, 211, 211, 1)), _U2.transparent = new _U2(new Xy(0, 0, 0, 0)), _U2);
  (function(e10) {
    let t10;
    (function(t11) {
      let n10;
      (function(t12) {
        function n11(t13) {
          return t13.rgba.a === 1 ? `rgb(${t13.rgba.r}, ${t13.rgba.g}, ${t13.rgba.b})` : e10.Format.CSS.formatRGBA(t13);
        }
        t12.formatRGB = n11;
        function r10(e11) {
          return `rgba(${e11.rgba.r}, ${e11.rgba.g}, ${e11.rgba.b}, ${+e11.rgba.a.toFixed(2)})`;
        }
        t12.formatRGBA = r10;
        function i10(t13) {
          return t13.hsla.a === 1 ? `hsl(${t13.hsla.h}, ${(t13.hsla.s * 100).toFixed(2)}%, ${(t13.hsla.l * 100).toFixed(2)}%)` : e10.Format.CSS.formatHSLA(t13);
        }
        t12.formatHSL = i10;
        function a10(e11) {
          return `hsla(${e11.hsla.h}, ${(e11.hsla.s * 100).toFixed(2)}%, ${(e11.hsla.l * 100).toFixed(2)}%, ${e11.hsla.a.toFixed(2)})`;
        }
        t12.formatHSLA = a10;
        function o10(e11) {
          let t13 = e11.toString(16);
          return t13.length === 2 ? t13 : `0` + t13;
        }
        function s10(e11) {
          return `#${o10(e11.rgba.r)}${o10(e11.rgba.g)}${o10(e11.rgba.b)}`;
        }
        t12.formatHex = s10;
        function c10(t13, n12 = false) {
          return n12 && t13.rgba.a === 1 ? e10.Format.CSS.formatHex(t13) : `#${o10(t13.rgba.r)}${o10(t13.rgba.g)}${o10(t13.rgba.b)}${o10(Math.round(t13.rgba.a * 255))}`;
        }
        t12.formatHexA = c10;
        function l10(t13) {
          return t13.isOpaque() ? e10.Format.CSS.formatHex(t13) : e10.Format.CSS.formatRGBA(t13);
        }
        t12.format = l10;
        function u10(t13) {
          let n12 = t13.length;
          if (n12 === 0 || t13.charCodeAt(0) !== 35) return null;
          if (n12 === 7) {
            let n13 = 16 * d10(t13.charCodeAt(1)) + d10(t13.charCodeAt(2)), r11 = 16 * d10(t13.charCodeAt(3)) + d10(t13.charCodeAt(4)), i11 = 16 * d10(t13.charCodeAt(5)) + d10(t13.charCodeAt(6));
            return new e10(new Xy(n13, r11, i11, 1));
          }
          if (n12 === 9) {
            let n13 = 16 * d10(t13.charCodeAt(1)) + d10(t13.charCodeAt(2)), r11 = 16 * d10(t13.charCodeAt(3)) + d10(t13.charCodeAt(4)), i11 = 16 * d10(t13.charCodeAt(5)) + d10(t13.charCodeAt(6)), a11 = 16 * d10(t13.charCodeAt(7)) + d10(t13.charCodeAt(8));
            return new e10(new Xy(n13, r11, i11, a11 / 255));
          }
          if (n12 === 4) {
            let n13 = d10(t13.charCodeAt(1)), r11 = d10(t13.charCodeAt(2)), i11 = d10(t13.charCodeAt(3));
            return new e10(new Xy(16 * n13 + n13, 16 * r11 + r11, 16 * i11 + i11));
          }
          if (n12 === 5) {
            let n13 = d10(t13.charCodeAt(1)), r11 = d10(t13.charCodeAt(2)), i11 = d10(t13.charCodeAt(3)), a11 = d10(t13.charCodeAt(4));
            return new e10(new Xy(16 * n13 + n13, 16 * r11 + r11, 16 * i11 + i11, (16 * a11 + a11) / 255));
          }
          return null;
        }
        t12.parseHex = u10;
        function d10(e11) {
          switch (e11) {
            case 48:
              return 0;
            case 49:
              return 1;
            case 50:
              return 2;
            case 51:
              return 3;
            case 52:
              return 4;
            case 53:
              return 5;
            case 54:
              return 6;
            case 55:
              return 7;
            case 56:
              return 8;
            case 57:
              return 9;
            case 97:
              return 10;
            case 65:
              return 10;
            case 98:
              return 11;
            case 66:
              return 11;
            case 99:
              return 12;
            case 67:
              return 12;
            case 100:
              return 13;
            case 68:
              return 13;
            case 101:
              return 14;
            case 69:
              return 14;
            case 102:
              return 15;
            case 70:
              return 15;
          }
          return 0;
        }
      })(n10 = t11.CSS || (t11.CSS = {}));
    })(t10 = e10.Format || (e10.Format = {}));
  })(K || (K = {}));
  function $y(e10) {
    let t10 = [];
    for (let n10 of e10) {
      let e11 = Number(n10);
      (e11 || e11 === 0 && n10.replace(/\s/g, ``) !== ``) && t10.push(e11);
    }
    return t10;
  }
  function eb(e10, t10, n10, r10) {
    return {
      red: e10 / 255,
      blue: n10 / 255,
      green: t10 / 255,
      alpha: r10
    };
  }
  function tb(e10, t10) {
    let n10 = t10.index, r10 = t10[0].length;
    if (!n10) return;
    let i10 = e10.positionAt(n10), a10 = {
      startLineNumber: i10.lineNumber,
      startColumn: i10.column,
      endLineNumber: i10.lineNumber,
      endColumn: i10.column + r10
    };
    return a10;
  }
  function nb(e10, t10) {
    if (!e10) return;
    let n10 = K.Format.CSS.parseHex(t10);
    if (n10) return {
      range: e10,
      color: eb(n10.rgba.r, n10.rgba.g, n10.rgba.b, n10.rgba.a)
    };
  }
  function rb(e10, t10, n10) {
    if (!e10 || t10.length !== 1) return;
    let r10 = t10[0], i10 = r10.values(), a10 = $y(i10);
    return {
      range: e10,
      color: eb(a10[0], a10[1], a10[2], n10 ? a10[3] : 1)
    };
  }
  function ib(e10, t10, n10) {
    if (!e10 || t10.length !== 1) return;
    let r10 = t10[0], i10 = r10.values(), a10 = $y(i10), o10 = new K(new Zy(a10[0], a10[1] / 100, a10[2] / 100, n10 ? a10[3] : 1));
    return {
      range: e10,
      color: eb(o10.rgba.r, o10.rgba.g, o10.rgba.b, o10.rgba.a)
    };
  }
  function ab(e10, t10) {
    return typeof e10 == `string` ? [
      ...e10.matchAll(t10)
    ] : e10.findMatches(t10);
  }
  function ob(e10) {
    let t10 = [], n10 = /\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm, r10 = ab(e10, n10);
    if (r10.length > 0) for (let n11 of r10) {
      let r11 = n11.filter((e11) => e11 !== void 0), i10 = r11[1], a10 = r11[2];
      if (!a10) continue;
      let o10;
      if (i10 === `rgb`) {
        let t11 = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;
        o10 = rb(tb(e10, n11), ab(a10, t11), false);
      } else if (i10 === `rgba`) {
        let t11 = /^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        o10 = rb(tb(e10, n11), ab(a10, t11), true);
      } else if (i10 === `hsl`) {
        let t11 = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;
        o10 = ib(tb(e10, n11), ab(a10, t11), false);
      } else if (i10 === `hsla`) {
        let t11 = /^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;
        o10 = ib(tb(e10, n11), ab(a10, t11), true);
      } else i10 === `#` && (o10 = nb(tb(e10, n11), i10 + a10));
      o10 && t10.push(o10);
    }
    return t10;
  }
  function sb(e10) {
    return !e10 || typeof e10.getValue != `function` || typeof e10.positionAt != `function` ? [] : ob(e10);
  }
  const cb = RegExp(`\\bMARK:\\s*(.*)$`, `d`), lb = /^-+|-+$/g;
  function ub(e10, t10) {
    var _a3;
    let n10 = [];
    if (t10.findRegionSectionHeaders && ((_a3 = t10.foldingRules) == null ? void 0 : _a3.markers)) {
      let r10 = db(e10, t10);
      n10 = n10.concat(r10);
    }
    if (t10.findMarkSectionHeaders) {
      let t11 = fb(e10);
      n10 = n10.concat(t11);
    }
    return n10;
  }
  function db(e10, t10) {
    let n10 = [], r10 = e10.getLineCount();
    for (let i10 = 1; i10 <= r10; i10++) {
      let r11 = e10.getLineContent(i10), a10 = r11.match(t10.foldingRules.markers.start);
      if (a10) {
        let e11 = {
          startLineNumber: i10,
          startColumn: a10[0].length + 1,
          endLineNumber: i10,
          endColumn: r11.length + 1
        };
        if (e11.endColumn > e11.startColumn) {
          let t11 = {
            range: e11,
            ...mb(r11.substring(a10[0].length)),
            shouldBeInComments: false
          };
          (t11.text || t11.hasSeparatorLine) && n10.push(t11);
        }
      }
    }
    return n10;
  }
  function fb(e10) {
    let t10 = [], n10 = e10.getLineCount();
    for (let r10 = 1; r10 <= n10; r10++) {
      let n11 = e10.getLineContent(r10);
      pb(n11, r10, t10);
    }
    return t10;
  }
  function pb(e10, t10, n10) {
    cb.lastIndex = 0;
    let r10 = cb.exec(e10);
    if (r10) {
      let e11 = r10.indices[1][0] + 1, i10 = r10.indices[1][1] + 1, a10 = {
        startLineNumber: t10,
        startColumn: e11,
        endLineNumber: t10,
        endColumn: i10
      };
      if (a10.endColumn > a10.startColumn) {
        let e12 = {
          range: a10,
          ...mb(r10[1]),
          shouldBeInComments: true
        };
        (e12.text || e12.hasSeparatorLine) && n10.push(e12);
      }
    }
  }
  function mb(e10) {
    e10 = e10.trim();
    let t10 = e10.startsWith(`-`);
    return e10 = e10.replace(lb, ``), {
      text: e10,
      hasSeparatorLine: t10
    };
  }
  var hb = class {
    constructor(e10) {
      this.values = e10, this.prefixSum = new Uint32Array(e10.length), this.prefixSumValidIndex = new Int32Array(1), this.prefixSumValidIndex[0] = -1;
    }
    insertValues(e10, t10) {
      e10 = T_(e10);
      let n10 = this.values, r10 = this.prefixSum, i10 = t10.length;
      return i10 === 0 ? false : (this.values = new Uint32Array(n10.length + i10), this.values.set(n10.subarray(0, e10), 0), this.values.set(n10.subarray(e10), e10 + i10), this.values.set(t10, e10), e10 - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e10 - 1), this.prefixSum = new Uint32Array(this.values.length), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r10.subarray(0, this.prefixSumValidIndex[0] + 1)), true);
    }
    setValue(e10, t10) {
      return e10 = T_(e10), t10 = T_(t10), this.values[e10] === t10 ? false : (this.values[e10] = t10, e10 - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e10 - 1), true);
    }
    removeValues(e10, t10) {
      e10 = T_(e10), t10 = T_(t10);
      let n10 = this.values, r10 = this.prefixSum;
      if (e10 >= n10.length) return false;
      let i10 = n10.length - e10;
      return t10 >= i10 && (t10 = i10), t10 === 0 ? false : (this.values = new Uint32Array(n10.length - t10), this.values.set(n10.subarray(0, e10), 0), this.values.set(n10.subarray(e10 + t10), e10), this.prefixSum = new Uint32Array(this.values.length), e10 - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e10 - 1), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r10.subarray(0, this.prefixSumValidIndex[0] + 1)), true);
    }
    getTotalSum() {
      return this.values.length === 0 ? 0 : this._getPrefixSum(this.values.length - 1);
    }
    getPrefixSum(e10) {
      return e10 < 0 ? 0 : (e10 = T_(e10), this._getPrefixSum(e10));
    }
    _getPrefixSum(e10) {
      if (e10 <= this.prefixSumValidIndex[0]) return this.prefixSum[e10];
      let t10 = this.prefixSumValidIndex[0] + 1;
      t10 === 0 && (this.prefixSum[0] = this.values[0], t10++), e10 >= this.values.length && (e10 = this.values.length - 1);
      for (let n10 = t10; n10 <= e10; n10++) this.prefixSum[n10] = this.prefixSum[n10 - 1] + this.values[n10];
      return this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], e10), this.prefixSum[e10];
    }
    getIndexOf(e10) {
      e10 = Math.floor(e10), this.getTotalSum();
      let t10 = 0, n10 = this.values.length - 1, r10 = 0, i10 = 0, a10 = 0;
      for (; t10 <= n10; ) if (r10 = t10 + (n10 - t10) / 2 | 0, i10 = this.prefixSum[r10], a10 = i10 - this.values[r10], e10 < a10) n10 = r10 - 1;
      else if (e10 >= i10) t10 = r10 + 1;
      else break;
      return new _b(r10, e10 - a10);
    }
  }, gb = class {
    constructor(e10) {
      this._values = e10, this._isValid = false, this._validEndIndex = -1, this._prefixSum = [], this._indexBySum = [];
    }
    getTotalSum() {
      return this._ensureValid(), this._indexBySum.length;
    }
    getPrefixSum(e10) {
      return this._ensureValid(), e10 === 0 ? 0 : this._prefixSum[e10 - 1];
    }
    getIndexOf(e10) {
      this._ensureValid();
      let t10 = this._indexBySum[e10], n10 = t10 > 0 ? this._prefixSum[t10 - 1] : 0;
      return new _b(t10, e10 - n10);
    }
    removeValues(e10, t10) {
      this._values.splice(e10, t10), this._invalidate(e10);
    }
    insertValues(e10, t10) {
      this._values = ee(this._values, e10, t10), this._invalidate(e10);
    }
    _invalidate(e10) {
      this._isValid = false, this._validEndIndex = Math.min(this._validEndIndex, e10 - 1);
    }
    _ensureValid() {
      if (!this._isValid) {
        for (let e10 = this._validEndIndex + 1, t10 = this._values.length; e10 < t10; e10++) {
          let t11 = this._values[e10], n10 = e10 > 0 ? this._prefixSum[e10 - 1] : 0;
          this._prefixSum[e10] = n10 + t11;
          for (let r10 = 0; r10 < t11; r10++) this._indexBySum[n10 + r10] = e10;
        }
        this._prefixSum.length = this._values.length, this._indexBySum.length = this._prefixSum[this._prefixSum.length - 1], this._isValid = true, this._validEndIndex = this._values.length - 1;
      }
    }
    setValue(e10, t10) {
      this._values[e10] !== t10 && (this._values[e10] = t10, this._invalidate(e10));
    }
  }, _b = class {
    constructor(e10, t10) {
      this.index = e10, this.remainder = t10, this._prefixSumIndexOfResultBrand = void 0, this.index = e10, this.remainder = t10;
    }
  }, vb = class {
    constructor(e10, t10, n10, r10) {
      this._uri = e10, this._lines = t10, this._eol = n10, this._versionId = r10, this._lineStarts = null, this._cachedTextValue = null;
    }
    dispose() {
      this._lines.length = 0;
    }
    get version() {
      return this._versionId;
    }
    getText() {
      return this._cachedTextValue === null && (this._cachedTextValue = this._lines.join(this._eol)), this._cachedTextValue;
    }
    onEvents(e10) {
      e10.eol && e10.eol !== this._eol && (this._eol = e10.eol, this._lineStarts = null);
      let t10 = e10.changes;
      for (let e11 of t10) this._acceptDeleteRange(e11.range), this._acceptInsertText(new P(e11.range.startLineNumber, e11.range.startColumn), e11.text);
      this._versionId = e10.versionId, this._cachedTextValue = null;
    }
    _ensureLineStarts() {
      if (!this._lineStarts) {
        let e10 = this._eol.length, t10 = this._lines.length, n10 = new Uint32Array(t10);
        for (let r10 = 0; r10 < t10; r10++) n10[r10] = this._lines[r10].length + e10;
        this._lineStarts = new hb(n10);
      }
    }
    _setLineText(e10, t10) {
      this._lines[e10] = t10, this._lineStarts && this._lineStarts.setValue(e10, this._lines[e10].length + this._eol.length);
    }
    _acceptDeleteRange(e10) {
      if (e10.startLineNumber === e10.endLineNumber) {
        if (e10.startColumn === e10.endColumn) return;
        this._setLineText(e10.startLineNumber - 1, this._lines[e10.startLineNumber - 1].substring(0, e10.startColumn - 1) + this._lines[e10.startLineNumber - 1].substring(e10.endColumn - 1));
        return;
      }
      this._setLineText(e10.startLineNumber - 1, this._lines[e10.startLineNumber - 1].substring(0, e10.startColumn - 1) + this._lines[e10.endLineNumber - 1].substring(e10.endColumn - 1)), this._lines.splice(e10.startLineNumber, e10.endLineNumber - e10.startLineNumber), this._lineStarts && this._lineStarts.removeValues(e10.startLineNumber, e10.endLineNumber - e10.startLineNumber);
    }
    _acceptInsertText(e10, t10) {
      if (t10.length === 0) return;
      let n10 = ws(t10);
      if (n10.length === 1) {
        this._setLineText(e10.lineNumber - 1, this._lines[e10.lineNumber - 1].substring(0, e10.column - 1) + n10[0] + this._lines[e10.lineNumber - 1].substring(e10.column - 1));
        return;
      }
      n10[n10.length - 1] += this._lines[e10.lineNumber - 1].substring(e10.column - 1), this._setLineText(e10.lineNumber - 1, this._lines[e10.lineNumber - 1].substring(0, e10.column - 1) + n10[0]);
      let r10 = new Uint32Array(n10.length - 1);
      for (let t11 = 1; t11 < n10.length; t11++) this._lines.splice(e10.lineNumber + t11 - 1, 0, n10[t11]), r10[t11 - 1] = n10[t11].length + this._eol.length;
      this._lineStarts && this._lineStarts.insertValues(e10.lineNumber, r10);
    }
  };
  const yb = 60 * 1e3;
  var bb = class extends j {
    constructor(e10, t10, n10 = false) {
      if (super(), this._syncedModels = /* @__PURE__ */ Object.create(null), this._syncedModelsLastUsedTime = /* @__PURE__ */ Object.create(null), this._proxy = e10, this._modelService = t10, !n10) {
        let e11 = new sl();
        e11.cancelAndSet(() => this._checkStopModelSync(), Math.round(yb / 2)), this._register(e11);
      }
    }
    dispose() {
      for (let e10 in this._syncedModels) Rr(this._syncedModels[e10]);
      this._syncedModels = /* @__PURE__ */ Object.create(null), this._syncedModelsLastUsedTime = /* @__PURE__ */ Object.create(null), super.dispose();
    }
    ensureSyncedResources(e10, t10 = false) {
      for (let n10 of e10) {
        let e11 = n10.toString();
        this._syncedModels[e11] || this._beginModelSync(n10, t10), this._syncedModels[e11] && (this._syncedModelsLastUsedTime[e11] = (/* @__PURE__ */ new Date()).getTime());
      }
    }
    _checkStopModelSync() {
      let e10 = (/* @__PURE__ */ new Date()).getTime(), t10 = [];
      for (let n10 in this._syncedModelsLastUsedTime) {
        let r10 = e10 - this._syncedModelsLastUsedTime[n10];
        r10 > yb && t10.push(n10);
      }
      for (let e11 of t10) this._stopModelSync(e11);
    }
    _beginModelSync(e10, t10) {
      let n10 = this._modelService.getModel(e10);
      if (!n10 || !t10 && n10.isTooLargeForSyncing()) return;
      let r10 = e10.toString();
      this._proxy.$acceptNewModel({
        url: n10.uri.toString(),
        lines: n10.getLinesContent(),
        EOL: n10.getEOL(),
        versionId: n10.getVersionId()
      });
      let i10 = new A();
      i10.add(n10.onDidChangeContent((e11) => {
        this._proxy.$acceptModelChanged(r10.toString(), e11);
      })), i10.add(n10.onWillDispose(() => {
        this._stopModelSync(r10);
      })), i10.add(k(() => {
        this._proxy.$acceptRemovedModel(r10);
      })), this._syncedModels[r10] = i10;
    }
    _stopModelSync(e10) {
      let t10 = this._syncedModels[e10];
      delete this._syncedModels[e10], delete this._syncedModelsLastUsedTime[e10], Rr(t10);
    }
  }, xb = class {
    constructor() {
      this._models = /* @__PURE__ */ Object.create(null);
    }
    getModel(e10) {
      return this._models[e10];
    }
    getModels() {
      let e10 = [];
      return Object.keys(this._models).forEach((t10) => e10.push(this._models[t10])), e10;
    }
    $acceptNewModel(e10) {
      this._models[e10.url] = new Sb(xa.parse(e10.url), e10.lines, e10.EOL, e10.versionId);
    }
    $acceptModelChanged(e10, t10) {
      if (!this._models[e10]) return;
      let n10 = this._models[e10];
      n10.onEvents(t10);
    }
    $acceptRemovedModel(e10) {
      this._models[e10] && delete this._models[e10];
    }
  }, Sb = class extends vb {
    get uri() {
      return this._uri;
    }
    get eol() {
      return this._eol;
    }
    getValue() {
      return this.getText();
    }
    findMatches(e10) {
      let t10 = [];
      for (let n10 = 0; n10 < this._lines.length; n10++) {
        let r10 = this._lines[n10], i10 = this.offsetAt(new P(n10 + 1, 1)), a10 = r10.matchAll(e10);
        for (let e11 of a10) (e11.index || e11.index === 0) && (e11.index += i10), t10.push(e11);
      }
      return t10;
    }
    getLinesContent() {
      return this._lines.slice(0);
    }
    getLineCount() {
      return this._lines.length;
    }
    getLineContent(e10) {
      return this._lines[e10 - 1];
    }
    getWordAtPosition(e10, t10) {
      let n10 = Wt(e10.column, Ht(t10), this._lines[e10.lineNumber - 1], 0);
      return n10 ? new F(e10.lineNumber, n10.startColumn, e10.lineNumber, n10.endColumn) : null;
    }
    words(e10) {
      let t10 = this._lines, n10 = this._wordenize.bind(this), r10 = 0, i10 = ``, a10 = 0, o10 = [];
      return {
        *[Symbol.iterator]() {
          for (; ; ) if (a10 < o10.length) {
            let e11 = i10.substring(o10[a10].start, o10[a10].end);
            a10 += 1, yield e11;
          } else if (r10 < t10.length) i10 = t10[r10], o10 = n10(i10, e10), a10 = 0, r10 += 1;
          else break;
        }
      };
    }
    getLineWords(e10, t10) {
      let n10 = this._lines[e10 - 1], r10 = this._wordenize(n10, t10), i10 = [];
      for (let e11 of r10) i10.push({
        word: n10.substring(e11.start, e11.end),
        startColumn: e11.start + 1,
        endColumn: e11.end + 1
      });
      return i10;
    }
    _wordenize(e10, t10) {
      let n10 = [], r10;
      for (t10.lastIndex = 0; (r10 = t10.exec(e10)) && r10[0].length !== 0; ) n10.push({
        start: r10.index,
        end: r10.index + r10[0].length
      });
      return n10;
    }
    getValueInRange(e10) {
      if (e10 = this._validateRange(e10), e10.startLineNumber === e10.endLineNumber) return this._lines[e10.startLineNumber - 1].substring(e10.startColumn - 1, e10.endColumn - 1);
      let t10 = this._eol, n10 = e10.startLineNumber - 1, r10 = e10.endLineNumber - 1, i10 = [];
      i10.push(this._lines[n10].substring(e10.startColumn - 1));
      for (let e11 = n10 + 1; e11 < r10; e11++) i10.push(this._lines[e11]);
      return i10.push(this._lines[r10].substring(0, e10.endColumn - 1)), i10.join(t10);
    }
    offsetAt(e10) {
      return e10 = this._validatePosition(e10), this._ensureLineStarts(), this._lineStarts.getPrefixSum(e10.lineNumber - 2) + (e10.column - 1);
    }
    positionAt(e10) {
      e10 = Math.floor(e10), e10 = Math.max(0, e10), this._ensureLineStarts();
      let t10 = this._lineStarts.getIndexOf(e10), n10 = this._lines[t10.index].length;
      return {
        lineNumber: 1 + t10.index,
        column: 1 + Math.min(t10.remainder, n10)
      };
    }
    _validateRange(e10) {
      let t10 = this._validatePosition({
        lineNumber: e10.startLineNumber,
        column: e10.startColumn
      }), n10 = this._validatePosition({
        lineNumber: e10.endLineNumber,
        column: e10.endColumn
      });
      return t10.lineNumber !== e10.startLineNumber || t10.column !== e10.startColumn || n10.lineNumber !== e10.endLineNumber || n10.column !== e10.endColumn ? {
        startLineNumber: t10.lineNumber,
        startColumn: t10.column,
        endLineNumber: n10.lineNumber,
        endColumn: n10.column
      } : e10;
    }
    _validatePosition(e10) {
      if (!P.isIPosition(e10)) throw Error(`bad position`);
      let { lineNumber: t10, column: n10 } = e10, r10 = false;
      if (t10 < 1) t10 = 1, n10 = 1, r10 = true;
      else if (t10 > this._lines.length) t10 = this._lines.length, n10 = this._lines[t10 - 1].length + 1, r10 = true;
      else {
        let e11 = this._lines[t10 - 1].length + 1;
        n10 < 1 ? (n10 = 1, r10 = true) : n10 > e11 && (n10 = e11, r10 = true);
      }
      return r10 ? {
        lineNumber: t10,
        column: n10
      } : e10;
    }
  };
  const Cb = true;
  var wb = (_V2 = class {
    constructor() {
      this._workerTextModelSyncServer = new xb();
    }
    dispose() {
    }
    _getModel(e10) {
      return this._workerTextModelSyncServer.getModel(e10);
    }
    _getModels() {
      return this._workerTextModelSyncServer.getModels();
    }
    $acceptNewModel(e10) {
      this._workerTextModelSyncServer.$acceptNewModel(e10);
    }
    $acceptModelChanged(e10, t10) {
      this._workerTextModelSyncServer.$acceptModelChanged(e10, t10);
    }
    $acceptRemovedModel(e10) {
      this._workerTextModelSyncServer.$acceptRemovedModel(e10);
    }
    async $computeUnicodeHighlights(e10, t10, n10) {
      let r10 = this._getModel(e10);
      return r10 ? _v.computeUnicodeHighlights(r10, t10, n10) : {
        ranges: [],
        hasMore: false,
        ambiguousCharacterCount: 0,
        invisibleCharacterCount: 0,
        nonBasicAsciiCharacterCount: 0
      };
    }
    async $findSectionHeaders(e10, t10) {
      let n10 = this._getModel(e10);
      return n10 ? ub(n10, t10) : [];
    }
    async $computeDiff(e10, t10, n10, r10) {
      let i10 = this._getModel(e10), a10 = this._getModel(t10);
      if (!i10 || !a10) return null;
      let o10 = Tb.computeDiff(i10, a10, n10, r10);
      return o10;
    }
    static computeDiff(e10, t10, n10, r10) {
      let i10 = r10 === `advanced` ? Jy.getDefault() : Jy.getLegacy(), a10 = e10.getLinesContent(), o10 = t10.getLinesContent(), s10 = i10.computeDiff(a10, o10, n10), c10 = s10.changes.length > 0 ? false : this._modelsAreIdentical(e10, t10);
      function l10(e11) {
        return e11.map((e12) => {
          var _a3;
          return [
            e12.original.startLineNumber,
            e12.original.endLineNumberExclusive,
            e12.modified.startLineNumber,
            e12.modified.endLineNumberExclusive,
            (_a3 = e12.innerChanges) == null ? void 0 : _a3.map((e13) => [
              e13.originalRange.startLineNumber,
              e13.originalRange.startColumn,
              e13.originalRange.endLineNumber,
              e13.originalRange.endColumn,
              e13.modifiedRange.startLineNumber,
              e13.modifiedRange.startColumn,
              e13.modifiedRange.endLineNumber,
              e13.modifiedRange.endColumn
            ])
          ];
        });
      }
      return {
        identical: c10,
        quitEarly: s10.hitTimeout,
        changes: l10(s10.changes),
        moves: s10.moves.map((e11) => [
          e11.lineRangeMapping.original.startLineNumber,
          e11.lineRangeMapping.original.endLineNumberExclusive,
          e11.lineRangeMapping.modified.startLineNumber,
          e11.lineRangeMapping.modified.endLineNumberExclusive,
          l10(e11.changes)
        ])
      };
    }
    static _modelsAreIdentical(e10, t10) {
      let n10 = e10.getLineCount(), r10 = t10.getLineCount();
      if (n10 !== r10) return false;
      for (let r11 = 1; r11 <= n10; r11++) {
        let n11 = e10.getLineContent(r11), i10 = t10.getLineContent(r11);
        if (n11 !== i10) return false;
      }
      return true;
    }
    async $computeMoreMinimalEdits(e10, t10, n10) {
      let r10 = this._getModel(e10);
      if (!r10) return t10;
      let i10 = [], a10;
      t10 = t10.slice(0).sort((e11, t11) => {
        if (e11.range && t11.range) return F.compareRangesUsingStarts(e11.range, t11.range);
        let n11 = e11.range ? 0 : 1, r11 = t11.range ? 0 : 1;
        return n11 - r11;
      });
      let o10 = 0;
      for (let e11 = 1; e11 < t10.length; e11++) F.getEndPosition(t10[o10].range).equals(F.getStartPosition(t10[e11].range)) ? (t10[o10].range = F.fromPositions(F.getStartPosition(t10[o10].range), F.getEndPosition(t10[e11].range)), t10[o10].text += t10[e11].text) : (o10++, t10[o10] = t10[e11]);
      t10.length = o10 + 1;
      for (let { range: e11, text: o11, eol: s10 } of t10) {
        if (typeof s10 == `number` && (a10 = s10), F.isEmpty(e11) && !o11) continue;
        let t11 = r10.getValueInRange(e11);
        if (o11 = o11.replace(/\r\n|\n|\r/g, r10.eol), t11 === o11) continue;
        if (Math.max(o11.length, t11.length) > Tb._diffLimit) {
          i10.push({
            range: e11,
            text: o11
          });
          continue;
        }
        let c10 = y_(t11, o11, n10), l10 = r10.offsetAt(F.lift(e11).getStartPosition());
        for (let e12 of c10) {
          let t12 = r10.positionAt(l10 + e12.originalStart), n11 = r10.positionAt(l10 + e12.originalStart + e12.originalLength), a11 = {
            text: o11.substr(e12.modifiedStart, e12.modifiedLength),
            range: {
              startLineNumber: t12.lineNumber,
              startColumn: t12.column,
              endLineNumber: n11.lineNumber,
              endColumn: n11.column
            }
          };
          r10.getValueInRange(a11.range) !== a11.text && i10.push(a11);
        }
      }
      return typeof a10 == `number` && i10.push({
        eol: a10,
        text: ``,
        range: {
          startLineNumber: 0,
          startColumn: 0,
          endLineNumber: 0,
          endColumn: 0
        }
      }), i10;
    }
    async $computeLinks(e10) {
      let t10 = this._getModel(e10);
      return t10 ? F_(t10) : null;
    }
    async $computeDefaultDocumentColors(e10) {
      let t10 = this._getModel(e10);
      return t10 ? sb(t10) : null;
    }
    async $textualSuggest(e10, t10, n10, r10) {
      let i10 = new Gr(), a10 = new RegExp(n10, r10), o10 = /* @__PURE__ */ new Set();
      outer: for (let n11 of e10) {
        let e11 = this._getModel(n11);
        if (!e11) continue;
        for (let n12 of e11.words(a10)) {
          if (n12 === t10 || !isNaN(Number(n12))) continue;
          if (o10.add(n12), o10.size > Tb._suggestionsLimit) break outer;
        }
      }
      return {
        words: Array.from(o10),
        duration: i10.elapsed()
      };
    }
    async $computeWordRanges(e10, t10, n10, r10) {
      let i10 = this._getModel(e10);
      if (!i10) return /* @__PURE__ */ Object.create(null);
      let a10 = new RegExp(n10, r10), o10 = /* @__PURE__ */ Object.create(null);
      for (let e11 = t10.startLineNumber; e11 < t10.endLineNumber; e11++) {
        let t11 = i10.getLineWords(e11, a10);
        for (let n11 of t11) {
          if (!isNaN(Number(n11.word))) continue;
          let t12 = o10[n11.word];
          t12 || (t12 = [], o10[n11.word] = t12), t12.push({
            startLineNumber: e11,
            startColumn: n11.startColumn,
            endLineNumber: e11,
            endColumn: n11.endColumn
          });
        }
      }
      return o10;
    }
    async $navigateValueSet(e10, t10, n10, r10, i10) {
      let a10 = this._getModel(e10);
      if (!a10) return null;
      let o10 = new RegExp(r10, i10);
      t10.startColumn === t10.endColumn && (t10 = {
        startLineNumber: t10.startLineNumber,
        startColumn: t10.startColumn,
        endLineNumber: t10.endLineNumber,
        endColumn: t10.endColumn + 1
      });
      let s10 = a10.getValueInRange(t10), c10 = a10.getWordAtPosition({
        lineNumber: t10.startLineNumber,
        column: t10.startColumn
      }, o10);
      if (!c10) return null;
      let l10 = a10.getValueInRange(c10), u10 = I_.INSTANCE.navigateValueSet(t10, s10, c10, l10, n10);
      return u10;
    }
  }, _V2._diffLimit = 1e5, _V2._suggestionsLimit = 1e4, _V2), Tb = class extends wb {
    constructor(e10, t10) {
      super(), this._host = e10, this._foreignModuleFactory = t10, this._foreignModule = null;
    }
    async $ping() {
      return `pong`;
    }
    $loadForeignModule(e10, r10, i10) {
      let a10 = (e11, t10) => this._host.$fhr(e11, t10), o10 = Be(i10, a10), s10 = {
        host: o10,
        getMirrorModels: () => this._getModels()
      };
      return this._foreignModuleFactory ? (this._foreignModule = this._foreignModuleFactory(s10, r10), Promise.resolve(ze(this._foreignModule))) : new Promise((i11, a11) => {
        let o11 = (e11) => {
          this._foreignModule = e11.create(s10, r10), i11(ze(this._foreignModule));
        };
        if (!Cb) t([
          `${e10}`
        ], o11, a11);
        else {
          let t10 = Au.asBrowserUri(`${e10}.js`).toString(true);
          n(() => import(`${t10}`).then(async (m10) => {
            await m10.__tla;
            return m10;
          }), [], import.meta.url).then(o11).catch(a11);
        }
      });
    }
    $fmr(e10, t10) {
      if (!this._foreignModule || typeof this._foreignModule[e10] != `function`) return Promise.reject(Error(`Missing requestHandler or method: ` + e10));
      try {
        return Promise.resolve(this._foreignModule[e10].apply(this._foreignModule, t10));
      } catch (e11) {
        return Promise.reject(e11);
      }
    }
  };
  typeof importScripts == `function` && (globalThis.monaco = ns());
  let Db;
  Eb = Xf(`textResourceConfigurationService`);
  Db = Xf(`textResourcePropertiesService`);
  Ob = Xf(`ILanguageFeaturesService`);
  var kb = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, Ab = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const jb = 5 * 60 * 1e3;
  function Mb(e10, t10) {
    let n10 = e10.getModel(t10);
    return !(!n10 || n10.isTooLargeForSyncing());
  }
  let Nb = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._languageConfigurationService = i10, this._modelService = t10, this._workerManager = this._register(new Fb(e10, this._modelService)), this._logService = r10, this._register(a10.linkProvider.register({
        language: `*`,
        hasAccessToAllModels: true
      }, {
        provideLinks: async (e11, t11) => {
          if (!Mb(this._modelService, e11.uri)) return Promise.resolve({
            links: []
          });
          let n11 = await this._workerWithResources([
            e11.uri
          ]), r11 = await n11.$computeLinks(e11.uri.toString());
          return r11 && {
            links: r11
          };
        }
      })), this._register(a10.completionProvider.register(`*`, new Pb(this._workerManager, n10, this._modelService, this._languageConfigurationService)));
    }
    dispose() {
      super.dispose();
    }
    canComputeUnicodeHighlights(e10) {
      return Mb(this._modelService, e10);
    }
    async computedUnicodeHighlights(e10, t10, n10) {
      let r10 = await this._workerWithResources([
        e10
      ]);
      return r10.$computeUnicodeHighlights(e10.toString(), t10, n10);
    }
    async computeDiff(e10, t10, n10, r10) {
      let i10 = await this._workerWithResources([
        e10,
        t10
      ], true), a10 = await i10.$computeDiff(e10.toString(), t10.toString(), n10, r10);
      if (!a10) return null;
      let o10 = {
        identical: a10.identical,
        quitEarly: a10.quitEarly,
        changes: s10(a10.changes),
        moves: a10.moves.map((e11) => new Sv(new Gv(new G(e11[0], e11[1]), new G(e11[2], e11[3])), s10(e11[4])))
      };
      return o10;
      function s10(e11) {
        return e11.map((e12) => {
          var _a3;
          return new Jv(new G(e12[0], e12[1]), new G(e12[2], e12[3]), (_a3 = e12[4]) == null ? void 0 : _a3.map((e13) => new Yv(new F(e13[0], e13[1], e13[2], e13[3]), new F(e13[4], e13[5], e13[6], e13[7]))));
        });
      }
    }
    async computeMoreMinimalEdits(e10, t10, n10 = false) {
      if (x(t10)) {
        if (!Mb(this._modelService, e10)) return Promise.resolve(t10);
        let r10 = Gr.create(), i10 = this._workerWithResources([
          e10
        ]).then((r11) => r11.$computeMoreMinimalEdits(e10.toString(), t10, n10));
        return i10.finally(() => this._logService.trace(`FORMAT#computeMoreMinimalEdits`, e10.toString(true), r10.elapsed())), Promise.race([
          i10,
          rl(1e3).then(() => t10)
        ]);
      } else return Promise.resolve(void 0);
    }
    canNavigateValueSet(e10) {
      return Mb(this._modelService, e10);
    }
    async navigateValueSet(e10, t10, n10) {
      let r10 = this._modelService.getModel(e10);
      if (!r10) return null;
      let i10 = this._languageConfigurationService.getLanguageConfiguration(r10.getLanguageId()).getWordDefinition(), a10 = i10.source, o10 = i10.flags, s10 = await this._workerWithResources([
        e10
      ]);
      return s10.$navigateValueSet(e10.toString(), t10, n10, a10, o10);
    }
    canComputeWordRanges(e10) {
      return Mb(this._modelService, e10);
    }
    async computeWordRanges(e10, t10) {
      let n10 = this._modelService.getModel(e10);
      if (!n10) return Promise.resolve(null);
      let r10 = this._languageConfigurationService.getLanguageConfiguration(n10.getLanguageId()).getWordDefinition(), i10 = r10.source, a10 = r10.flags, o10 = await this._workerWithResources([
        e10
      ]);
      return o10.$computeWordRanges(e10.toString(), t10, i10, a10);
    }
    async findSectionHeaders(e10, t10) {
      let n10 = await this._workerWithResources([
        e10
      ]);
      return n10.$findSectionHeaders(e10.toString(), t10);
    }
    async computeDefaultDocumentColors(e10) {
      let t10 = await this._workerWithResources([
        e10
      ]);
      return t10.$computeDefaultDocumentColors(e10.toString());
    }
    async _workerWithResources(e10, t10 = false) {
      let n10 = await this._workerManager.withWorker();
      return await n10.workerWithSyncedResources(e10, t10);
    }
  };
  Nb = kb([
    Ab(1, Qf),
    Ab(2, Eb),
    Ab(3, wm),
    Ab(4, i_),
    Ab(5, Ob)
  ], Nb);
  var Pb = class {
    constructor(e10, t10, n10, r10) {
      this.languageConfigurationService = r10, this._debugDisplayName = `wordbasedCompletions`, this._workerManager = e10, this._configurationService = t10, this._modelService = n10;
    }
    async provideCompletionItems(e10, t10) {
      let n10 = this._configurationService.getValue(e10.uri, t10, `editor`);
      if (n10.wordBasedSuggestions === `off`) return;
      let r10 = [];
      if (n10.wordBasedSuggestions === `currentDocument`) Mb(this._modelService, e10.uri) && r10.push(e10.uri);
      else for (let t11 of this._modelService.getModels()) {
        if (!Mb(this._modelService, t11.uri)) continue;
        t11 === e10 ? r10.unshift(t11.uri) : (n10.wordBasedSuggestions === `allDocuments` || t11.getLanguageId() === e10.getLanguageId()) && r10.push(t11.uri);
      }
      if (r10.length === 0) return;
      let i10 = this.languageConfigurationService.getLanguageConfiguration(e10.getLanguageId()).getWordDefinition(), a10 = e10.getWordAtPosition(t10), o10 = a10 ? new F(t10.lineNumber, a10.startColumn, t10.lineNumber, a10.endColumn) : F.fromPositions(t10), s10 = o10.setEndPosition(t10.lineNumber, t10.column), c10 = await this._workerManager.withWorker(), l10 = await c10.textualSuggest(r10, a10 == null ? void 0 : a10.word, i10);
      if (l10) return {
        duration: l10.duration,
        suggestions: l10.words.map((e11) => ({
          kind: 18,
          label: e11,
          insertText: e11,
          range: {
            insert: s10,
            replace: o10
          }
        }))
      };
    }
  };
  let Fb = class extends j {
    constructor(e10, t10) {
      super(), this._workerDescriptor = e10, this._modelService = t10, this._editorWorkerClient = null, this._lastWorkerUsedTime = (/* @__PURE__ */ new Date()).getTime();
      let n10 = this._register(new cd());
      n10.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(jb / 2), os), this._register(this._modelService.onModelRemoved((e11) => this._checkStopEmptyWorker()));
    }
    dispose() {
      this._editorWorkerClient && (this._editorWorkerClient.dispose(), this._editorWorkerClient = null), super.dispose();
    }
    _checkStopEmptyWorker() {
      if (!this._editorWorkerClient) return;
      let e10 = this._modelService.getModels();
      e10.length === 0 && (this._editorWorkerClient.dispose(), this._editorWorkerClient = null);
    }
    _checkStopIdleWorker() {
      if (!this._editorWorkerClient) return;
      let e10 = (/* @__PURE__ */ new Date()).getTime() - this._lastWorkerUsedTime;
      e10 > jb && (this._editorWorkerClient.dispose(), this._editorWorkerClient = null);
    }
    withWorker() {
      return this._lastWorkerUsedTime = (/* @__PURE__ */ new Date()).getTime(), this._editorWorkerClient || (this._editorWorkerClient = new Lb(this._workerDescriptor, false, this._modelService)), Promise.resolve(this._editorWorkerClient);
    }
  };
  Fb = kb([
    Ab(1, Qf)
  ], Fb);
  var Ib = class {
    constructor(e10) {
      this._instance = e10, this.proxy = this._instance;
    }
    dispose() {
      this._instance.dispose();
    }
    setChannel(e10, t10) {
      throw Error(`Not supported`);
    }
  };
  let Lb = class extends j {
    constructor(e10, t10, n10) {
      super(), this._workerDescriptor = e10, this._disposed = false, this._modelService = n10, this._keepIdleModels = t10, this._worker = null, this._modelManager = null;
    }
    fhr(e10, t10) {
      throw Error(`Not implemented!`);
    }
    _getOrCreateWorker() {
      if (!this._worker) try {
        this._worker = this._register(yh(this._workerDescriptor)), L_.setChannel(this._worker, this._createEditorWorkerHost());
      } catch (e10) {
        $m(e10), this._worker = this._createFallbackLocalWorker();
      }
      return this._worker;
    }
    async _getProxy() {
      try {
        let e10 = this._getOrCreateWorker().proxy;
        return await e10.$ping(), e10;
      } catch (e10) {
        return $m(e10), this._worker = this._createFallbackLocalWorker(), this._worker.proxy;
      }
    }
    _createFallbackLocalWorker() {
      return new Ib(new Tb(this._createEditorWorkerHost(), null));
    }
    _createEditorWorkerHost() {
      return {
        $fhr: (e10, t10) => this.fhr(e10, t10)
      };
    }
    _getOrCreateModelManager(e10) {
      return this._modelManager || (this._modelManager = this._register(new bb(e10, this._modelService, this._keepIdleModels))), this._modelManager;
    }
    async workerWithSyncedResources(e10, t10 = false) {
      if (this._disposed) return Promise.reject(Sr());
      let n10 = await this._getProxy();
      return this._getOrCreateModelManager(n10).ensureSyncedResources(e10, t10), n10;
    }
    async textualSuggest(e10, t10, n10) {
      let r10 = await this.workerWithSyncedResources(e10), i10 = n10.source, a10 = n10.flags;
      return r10.$textualSuggest(e10.map((e11) => e11.toString()), t10, i10, a10);
    }
    dispose() {
      super.dispose(), this._disposed = true;
    }
  };
  Lb = kb([
    Ab(2, Qf)
  ], Lb);
  var Rb;
  (function(e10) {
    e10.DARK = `dark`, e10.LIGHT = `light`, e10.HIGH_CONTRAST_DARK = `hcDark`, e10.HIGH_CONTRAST_LIGHT = `hcLight`;
  })(Rb || (Rb = {}));
  zb = function(e10) {
    return e10 === Rb.HIGH_CONTRAST_DARK || e10 === Rb.HIGH_CONTRAST_LIGHT;
  };
  Bb = function(e10) {
    return e10 === Rb.DARK || e10 === Rb.HIGH_CONTRAST_DARK;
  };
  Vb = Xf(`themeService`);
  Hb = function(e10) {
    return {
      id: e10
    };
  };
  function Ub(e10) {
    switch (e10) {
      case Rb.DARK:
        return `vs-dark`;
      case Rb.HIGH_CONTRAST_DARK:
        return `hc-black`;
      case Rb.HIGH_CONTRAST_LIGHT:
        return `hc-light`;
      default:
        return `vs`;
    }
  }
  const Wb = {
    ThemingContribution: `base.contributions.theming`
  };
  var Gb = class {
    constructor() {
      this.themingParticipants = [], this.themingParticipants = [], this.onThemingParticipantAddedEmitter = new N();
    }
    onColorThemeChange(e10) {
      return this.themingParticipants.push(e10), this.onThemingParticipantAddedEmitter.fire(e10), k(() => {
        let t10 = this.themingParticipants.indexOf(e10);
        this.themingParticipants.splice(t10, 1);
      });
    }
    getThemingParticipants() {
      return this.themingParticipants;
    }
  };
  const Kb = new Gb();
  am.add(Wb.ThemingContribution, Kb);
  qb = function(e10) {
    return Kb.onColorThemeChange(e10);
  };
  var Jb = class extends j {
    constructor(e10) {
      super(), this.themeService = e10, this.theme = e10.getColorTheme(), this._register(this.themeService.onDidColorThemeChange((e11) => this.onThemeChange(e11)));
    }
    onThemeChange(e10) {
      this.theme = e10, this.updateStyles();
    }
    updateStyles() {
    }
  }, Yb = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, Xb = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let Zb = class extends j {
    constructor(e10) {
      super(), this._themeService = e10, this._onWillCreateCodeEditor = this._register(new N()), this._onCodeEditorAdd = this._register(new N()), this.onCodeEditorAdd = this._onCodeEditorAdd.event, this._onCodeEditorRemove = this._register(new N()), this.onCodeEditorRemove = this._onCodeEditorRemove.event, this._onWillCreateDiffEditor = this._register(new N()), this._onDiffEditorAdd = this._register(new N()), this.onDiffEditorAdd = this._onDiffEditorAdd.event, this._onDiffEditorRemove = this._register(new N()), this.onDiffEditorRemove = this._onDiffEditorRemove.event, this._decorationOptionProviders = /* @__PURE__ */ new Map(), this._codeEditorOpenHandlers = new Rt(), this._modelProperties = /* @__PURE__ */ new Map(), this._codeEditors = /* @__PURE__ */ Object.create(null), this._diffEditors = /* @__PURE__ */ Object.create(null), this._globalStyleSheet = null;
    }
    willCreateCodeEditor() {
      this._onWillCreateCodeEditor.fire();
    }
    addCodeEditor(e10) {
      this._codeEditors[e10.getId()] = e10, this._onCodeEditorAdd.fire(e10);
    }
    removeCodeEditor(e10) {
      delete this._codeEditors[e10.getId()] && this._onCodeEditorRemove.fire(e10);
    }
    listCodeEditors() {
      return Object.keys(this._codeEditors).map((e10) => this._codeEditors[e10]);
    }
    willCreateDiffEditor() {
      this._onWillCreateDiffEditor.fire();
    }
    addDiffEditor(e10) {
      this._diffEditors[e10.getId()] = e10, this._onDiffEditorAdd.fire(e10);
    }
    listDiffEditors() {
      return Object.keys(this._diffEditors).map((e10) => this._diffEditors[e10]);
    }
    getFocusedCodeEditor() {
      let e10 = null, t10 = this.listCodeEditors();
      for (let n10 of t10) {
        if (n10.hasTextFocus()) return n10;
        n10.hasWidgetFocus() && (e10 = n10);
      }
      return e10;
    }
    removeDecorationType(e10) {
      let t10 = this._decorationOptionProviders.get(e10);
      t10 && (t10.refCount--, t10.refCount <= 0 && (this._decorationOptionProviders.delete(e10), t10.dispose(), this.listCodeEditors().forEach((t11) => t11.removeDecorationsByType(e10))));
    }
    setModelProperty(e10, t10, n10) {
      let r10 = e10.toString(), i10;
      this._modelProperties.has(r10) ? i10 = this._modelProperties.get(r10) : (i10 = /* @__PURE__ */ new Map(), this._modelProperties.set(r10, i10)), i10.set(t10, n10);
    }
    getModelProperty(e10, t10) {
      let n10 = e10.toString();
      if (this._modelProperties.has(n10)) {
        let e11 = this._modelProperties.get(n10);
        return e11.get(t10);
      }
    }
    async openCodeEditor(e10, t10, n10) {
      for (let r10 of this._codeEditorOpenHandlers) {
        let i10 = await r10(e10, t10, n10);
        if (i10 !== null) return i10;
      }
      return null;
    }
    registerCodeEditorOpenHandler(e10) {
      let t10 = this._codeEditorOpenHandlers.unshift(e10);
      return k(t10);
    }
  };
  Zb = Yb([
    Xb(0, Vb)
  ], Zb);
  var Qb = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, $b = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let ex = class extends Zb {
    constructor(e10, t10) {
      super(t10), this._register(this.onCodeEditorAdd(() => this._checkContextKey())), this._register(this.onCodeEditorRemove(() => this._checkContextKey())), this._editorIsOpen = e10.createKey(`editorIsOpen`, false), this._activeCodeEditor = null, this._register(this.registerCodeEditorOpenHandler(async (e11, t11, n10) => t11 ? this.doOpenEditor(t11, e11) : null));
    }
    _checkContextKey() {
      let e10 = false;
      for (let t10 of this.listCodeEditors()) if (!t10.isSimpleWidget) {
        e10 = true;
        break;
      }
      this._editorIsOpen.set(e10);
    }
    setActiveCodeEditor(e10) {
      this._activeCodeEditor = e10;
    }
    getActiveCodeEditor() {
      return this._activeCodeEditor;
    }
    doOpenEditor(e10, t10) {
      let n10 = this.findModel(e10, t10.resource);
      if (!n10) {
        if (t10.resource) {
          let n11 = t10.resource.scheme;
          if (n11 === Su.http || n11 === Su.https) return mf(t10.resource.toString()), e10;
        }
        return null;
      }
      let r10 = t10.options ? t10.options.selection : null;
      if (r10) if (typeof r10.endLineNumber == `number` && typeof r10.endColumn == `number`) e10.setSelection(r10), e10.revealRangeInCenter(r10, 1);
      else {
        let t11 = {
          lineNumber: r10.startLineNumber,
          column: r10.startColumn
        };
        e10.setPosition(t11), e10.revealPositionInCenter(t11, 1);
      }
      return e10;
    }
    findModel(e10, t10) {
      let n10 = e10.getModel();
      return n10 && n10.uri.toString() !== t10.toString() ? null : n10;
    }
  };
  ex = Qb([
    $b(0, qp),
    $b(1, Vb)
  ], ex), bg(Zf, ex, 0);
  const tx = Xf(`layoutService`);
  var nx = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, rx = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let ix = class {
    get mainContainer() {
      var _a3;
      return ((_a3 = C(this._codeEditorService.listCodeEditors())) == null ? void 0 : _a3.getContainerDomNode()) ?? os.document.body;
    }
    get activeContainer() {
      let e10 = this._codeEditorService.getFocusedCodeEditor() ?? this._codeEditorService.getActiveCodeEditor();
      return (e10 == null ? void 0 : e10.getContainerDomNode()) ?? this.mainContainer;
    }
    get mainContainerDimension() {
      return dd(this.mainContainer);
    }
    get activeContainerDimension() {
      return dd(this.activeContainer);
    }
    get containers() {
      return v(this._codeEditorService.listCodeEditors().map((e10) => e10.getContainerDomNode()));
    }
    getContainer() {
      return this.activeContainer;
    }
    whenContainerStylesLoaded() {
    }
    focus() {
      var _a3;
      (_a3 = this._codeEditorService.getFocusedCodeEditor()) == null ? void 0 : _a3.focus();
    }
    constructor(e10) {
      this._codeEditorService = e10, this.onDidLayoutMainContainer = M.None, this.onDidLayoutActiveContainer = M.None, this.onDidLayoutContainer = M.None, this.onDidChangeActiveContainer = M.None, this.onDidAddContainer = M.None, this.mainContainerOffset = {
        top: 0,
        quickPickTop: 0
      }, this.activeContainerOffset = {
        top: 0,
        quickPickTop: 0
      };
    }
  };
  ix = nx([
    rx(0, Zf)
  ], ix);
  let ax = class extends ix {
    get mainContainer() {
      return this._container;
    }
    constructor(e10, t10) {
      super(t10), this._container = e10;
    }
  };
  ax = nx([
    rx(1, Zf)
  ], ax), bg(tx, ix, 1);
  var ox;
  (function(e10) {
    e10[e10.Ignore = 0] = `Ignore`, e10[e10.Info = 1] = `Info`, e10[e10.Warning = 2] = `Warning`, e10[e10.Error = 3] = `Error`;
  })(ox || (ox = {})), function(e10) {
    let t10 = `error`, n10 = `warning`, r10 = `warn`, i10 = `info`, a10 = `ignore`;
    function o10(a11) {
      return a11 ? Is(t10, a11) ? e10.Error : Is(n10, a11) || Is(r10, a11) ? e10.Warning : Is(i10, a11) ? e10.Info : e10.Ignore : e10.Ignore;
    }
    e10.fromValue = o10;
    function s10(r11) {
      switch (r11) {
        case e10.Error:
          return t10;
        case e10.Warning:
          return n10;
        case e10.Info:
          return i10;
        default:
          return a10;
      }
    }
    e10.toString = s10;
  }(ox || (ox = {}));
  sx = ox;
  cx = Xf(`dialogService`);
  lx = sx;
  ux = Xf(`notificationService`);
  var dx = class {
  };
  const fx = Xf(`undoRedoService`);
  var px = class {
    constructor(e10, t10) {
      this.resource = e10, this.elements = t10;
    }
  }, mx = (_W2 = class {
    constructor() {
      this.id = _W2._ID++, this.order = 1;
    }
    nextOrder() {
      return this.id === 0 ? 0 : this.order++;
    }
  }, _W2._ID = 0, _W2.None = new _W2(), _W2), hx = (_X2 = class {
    constructor() {
      this.id = _X2._ID++, this.order = 1;
    }
    nextOrder() {
      return this.id === 0 ? 0 : this.order++;
    }
  }, _X2._ID = 0, _X2.None = new _X2(), _X2), gx = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, _x = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const vx = false;
  function yx(e10) {
    return e10.scheme === Su.file ? e10.fsPath : e10.path;
  }
  let bx = 0;
  var xx = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.id = ++bx, this.type = 0, this.actual = e10, this.label = e10.label, this.confirmBeforeUndo = e10.confirmBeforeUndo || false, this.resourceLabel = t10, this.strResource = n10, this.resourceLabels = [
        this.resourceLabel
      ], this.strResources = [
        this.strResource
      ], this.groupId = r10, this.groupOrder = i10, this.sourceId = a10, this.sourceOrder = o10, this.isValid = true;
    }
    setValid(e10) {
      this.isValid = e10;
    }
    toString() {
      return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? `  VALID` : `INVALID`}] ${this.actual.constructor.name} - ${this.actual}`;
    }
  }, Sx = class {
    constructor(e10, t10) {
      this.resourceLabel = e10, this.reason = t10;
    }
  }, Cx = class {
    constructor() {
      this.elements = /* @__PURE__ */ new Map();
    }
    createMessage() {
      let e10 = [], t10 = [];
      for (let [, n11] of this.elements) {
        let r10 = n11.reason === 0 ? e10 : t10;
        r10.push(n11.resourceLabel);
      }
      let n10 = [];
      return e10.length > 0 && n10.push(T({
        key: `externalRemoval`,
        comment: [
          `{0} is a list of filenames`
        ]
      }, `The following files have been closed and modified on disk: {0}.`, e10.join(`, `))), t10.length > 0 && n10.push(T({
        key: `noParallelUniverses`,
        comment: [
          `{0} is a list of filenames`
        ]
      }, `The following files have been modified in an incompatible way: {0}.`, t10.join(`, `))), n10.join(`
`);
    }
    get size() {
      return this.elements.size;
    }
    has(e10) {
      return this.elements.has(e10);
    }
    set(e10, t10) {
      this.elements.set(e10, t10);
    }
    delete(e10) {
      return this.elements.delete(e10);
    }
  }, wx = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.id = ++bx, this.type = 1, this.actual = e10, this.label = e10.label, this.confirmBeforeUndo = e10.confirmBeforeUndo || false, this.resourceLabels = t10, this.strResources = n10, this.groupId = r10, this.groupOrder = i10, this.sourceId = a10, this.sourceOrder = o10, this.removedResources = null, this.invalidatedResources = null;
    }
    canSplit() {
      return typeof this.actual.split == `function`;
    }
    removeResource(e10, t10, n10) {
      this.removedResources || (this.removedResources = new Cx()), this.removedResources.has(t10) || this.removedResources.set(t10, new Sx(e10, n10));
    }
    setValid(e10, t10, n10) {
      n10 ? this.invalidatedResources && (this.invalidatedResources.delete(t10), this.invalidatedResources.size === 0 && (this.invalidatedResources = null)) : (this.invalidatedResources || (this.invalidatedResources = new Cx()), this.invalidatedResources.has(t10) || this.invalidatedResources.set(t10, new Sx(e10, 0)));
    }
    toString() {
      return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? `INVALID` : `  VALID`}] ${this.actual.constructor.name} - ${this.actual}`;
    }
  }, Tx = class {
    constructor(e10, t10) {
      this.resourceLabel = e10, this.strResource = t10, this._past = [], this._future = [], this.locked = false, this.versionId = 1;
    }
    dispose() {
      for (let e10 of this._past) e10.type === 1 && e10.removeResource(this.resourceLabel, this.strResource, 0);
      for (let e10 of this._future) e10.type === 1 && e10.removeResource(this.resourceLabel, this.strResource, 0);
      this.versionId++;
    }
    toString() {
      let e10 = [];
      e10.push(`* ${this.strResource}:`);
      for (let t10 = 0; t10 < this._past.length; t10++) e10.push(`   * [UNDO] ${this._past[t10]}`);
      for (let t10 = this._future.length - 1; t10 >= 0; t10--) e10.push(`   * [REDO] ${this._future[t10]}`);
      return e10.join(`
`);
    }
    flushAllElements() {
      this._past = [], this._future = [], this.versionId++;
    }
    _setElementValidFlag(e10, t10) {
      e10.type === 1 ? e10.setValid(this.resourceLabel, this.strResource, t10) : e10.setValid(t10);
    }
    setElementsValidFlag(e10, t10) {
      for (let n10 of this._past) t10(n10.actual) && this._setElementValidFlag(n10, e10);
      for (let n10 of this._future) t10(n10.actual) && this._setElementValidFlag(n10, e10);
    }
    pushElement(e10) {
      for (let e11 of this._future) e11.type === 1 && e11.removeResource(this.resourceLabel, this.strResource, 1);
      this._future = [], this._past.push(e10), this.versionId++;
    }
    createSnapshot(e10) {
      let t10 = [];
      for (let e11 = 0, n10 = this._past.length; e11 < n10; e11++) t10.push(this._past[e11].id);
      for (let e11 = this._future.length - 1; e11 >= 0; e11--) t10.push(this._future[e11].id);
      return new px(e10, t10);
    }
    restoreSnapshot(e10) {
      let t10 = e10.elements.length, n10 = true, r10 = 0, i10 = -1;
      for (let a11 = 0, o10 = this._past.length; a11 < o10; a11++, r10++) {
        let o11 = this._past[a11];
        n10 && (r10 >= t10 || o11.id !== e10.elements[r10]) && (n10 = false, i10 = 0), !n10 && o11.type === 1 && o11.removeResource(this.resourceLabel, this.strResource, 0);
      }
      let a10 = -1;
      for (let i11 = this._future.length - 1; i11 >= 0; i11--, r10++) {
        let o10 = this._future[i11];
        n10 && (r10 >= t10 || o10.id !== e10.elements[r10]) && (n10 = false, a10 = i11), !n10 && o10.type === 1 && o10.removeResource(this.resourceLabel, this.strResource, 0);
      }
      i10 !== -1 && (this._past = this._past.slice(0, i10)), a10 !== -1 && (this._future = this._future.slice(a10 + 1)), this.versionId++;
    }
    getElements() {
      let e10 = [], t10 = [];
      for (let t11 of this._past) e10.push(t11.actual);
      for (let e11 of this._future) t10.push(e11.actual);
      return {
        past: e10,
        future: t10
      };
    }
    getClosestPastElement() {
      return this._past.length === 0 ? null : this._past[this._past.length - 1];
    }
    getSecondClosestPastElement() {
      return this._past.length < 2 ? null : this._past[this._past.length - 2];
    }
    getClosestFutureElement() {
      return this._future.length === 0 ? null : this._future[this._future.length - 1];
    }
    hasPastElements() {
      return this._past.length > 0;
    }
    hasFutureElements() {
      return this._future.length > 0;
    }
    splitPastWorkspaceElement(e10, t10) {
      for (let n10 = this._past.length - 1; n10 >= 0; n10--) if (this._past[n10] === e10) {
        t10.has(this.strResource) ? this._past[n10] = t10.get(this.strResource) : this._past.splice(n10, 1);
        break;
      }
      this.versionId++;
    }
    splitFutureWorkspaceElement(e10, t10) {
      for (let n10 = this._future.length - 1; n10 >= 0; n10--) if (this._future[n10] === e10) {
        t10.has(this.strResource) ? this._future[n10] = t10.get(this.strResource) : this._future.splice(n10, 1);
        break;
      }
      this.versionId++;
    }
    moveBackward(e10) {
      this._past.pop(), this._future.push(e10), this.versionId++;
    }
    moveForward(e10) {
      this._future.pop(), this._past.push(e10), this.versionId++;
    }
  }, Ex = class {
    constructor(e10) {
      this.editStacks = e10, this._versionIds = [];
      for (let e11 = 0, t10 = this.editStacks.length; e11 < t10; e11++) this._versionIds[e11] = this.editStacks[e11].versionId;
    }
    isValid() {
      for (let e10 = 0, t10 = this.editStacks.length; e10 < t10; e10++) if (this._versionIds[e10] !== this.editStacks[e10].versionId) return false;
      return true;
    }
  };
  const Dx = new Tx(``, ``);
  Dx.locked = true;
  let Ox = class {
    constructor(e10, t10) {
      this._dialogService = e10, this._notificationService = t10, this._editStacks = /* @__PURE__ */ new Map(), this._uriComparisonKeyComputers = [];
    }
    getUriComparisonKey(e10) {
      for (let t10 of this._uriComparisonKeyComputers) if (t10[0] === e10.scheme) return t10[1].getComparisonKey(e10);
      return e10.toString();
    }
    _print(e10) {
      console.log(`------------------------------------`), console.log(`AFTER ${e10}: `);
      let t10 = [];
      for (let e11 of this._editStacks) t10.push(e11[1].toString());
      console.log(t10.join(`
`));
    }
    pushElement(e10, t10 = mx.None, n10 = hx.None) {
      if (e10.type === 0) {
        let r10 = yx(e10.resource), i10 = this.getUriComparisonKey(e10.resource);
        this._pushElement(new xx(e10, r10, i10, t10.id, t10.nextOrder(), n10.id, n10.nextOrder()));
      } else {
        let r10 = /* @__PURE__ */ new Set(), i10 = [], a10 = [];
        for (let t11 of e10.resources) {
          let e11 = yx(t11), n11 = this.getUriComparisonKey(t11);
          if (r10.has(n11)) continue;
          r10.add(n11), i10.push(e11), a10.push(n11);
        }
        i10.length === 1 ? this._pushElement(new xx(e10, i10[0], a10[0], t10.id, t10.nextOrder(), n10.id, n10.nextOrder())) : this._pushElement(new wx(e10, i10, a10, t10.id, t10.nextOrder(), n10.id, n10.nextOrder()));
      }
      vx && this._print(`pushElement`);
    }
    _pushElement(e10) {
      for (let t10 = 0, n10 = e10.strResources.length; t10 < n10; t10++) {
        let n11 = e10.resourceLabels[t10], r10 = e10.strResources[t10], i10;
        this._editStacks.has(r10) ? i10 = this._editStacks.get(r10) : (i10 = new Tx(n11, r10), this._editStacks.set(r10, i10)), i10.pushElement(e10);
      }
    }
    getLastElement(e10) {
      let t10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let e11 = this._editStacks.get(t10);
        if (e11.hasFutureElements()) return null;
        let n10 = e11.getClosestPastElement();
        return n10 ? n10.actual : null;
      }
      return null;
    }
    _splitPastWorkspaceElement(e10, t10) {
      let n10 = e10.actual.split(), r10 = /* @__PURE__ */ new Map();
      for (let e11 of n10) {
        let t11 = yx(e11.resource), n11 = this.getUriComparisonKey(e11.resource), i10 = new xx(e11, t11, n11, 0, 0, 0, 0);
        r10.set(i10.strResource, i10);
      }
      for (let n11 of e10.strResources) {
        if (t10 && t10.has(n11)) continue;
        let i10 = this._editStacks.get(n11);
        i10.splitPastWorkspaceElement(e10, r10);
      }
    }
    _splitFutureWorkspaceElement(e10, t10) {
      let n10 = e10.actual.split(), r10 = /* @__PURE__ */ new Map();
      for (let e11 of n10) {
        let t11 = yx(e11.resource), n11 = this.getUriComparisonKey(e11.resource), i10 = new xx(e11, t11, n11, 0, 0, 0, 0);
        r10.set(i10.strResource, i10);
      }
      for (let n11 of e10.strResources) {
        if (t10 && t10.has(n11)) continue;
        let i10 = this._editStacks.get(n11);
        i10.splitFutureWorkspaceElement(e10, r10);
      }
    }
    removeElements(e10) {
      let t10 = typeof e10 == `string` ? e10 : this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let e11 = this._editStacks.get(t10);
        e11.dispose(), this._editStacks.delete(t10);
      }
      vx && this._print(`removeElements`);
    }
    setElementsValidFlag(e10, t10, n10) {
      let r10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(r10)) {
        let e11 = this._editStacks.get(r10);
        e11.setElementsValidFlag(t10, n10);
      }
      vx && this._print(`setElementsValidFlag`);
    }
    createSnapshot(e10) {
      let t10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let n10 = this._editStacks.get(t10);
        return n10.createSnapshot(e10);
      }
      return new px(e10, []);
    }
    restoreSnapshot(e10) {
      let t10 = this.getUriComparisonKey(e10.resource);
      if (this._editStacks.has(t10)) {
        let n10 = this._editStacks.get(t10);
        n10.restoreSnapshot(e10), !n10.hasPastElements() && !n10.hasFutureElements() && (n10.dispose(), this._editStacks.delete(t10));
      }
      vx && this._print(`restoreSnapshot`);
    }
    getElements(e10) {
      let t10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let e11 = this._editStacks.get(t10);
        return e11.getElements();
      }
      return {
        past: [],
        future: []
      };
    }
    _findClosestUndoElementWithSource(e10) {
      if (!e10) return [
        null,
        null
      ];
      let t10 = null, n10 = null;
      for (let [r10, i10] of this._editStacks) {
        let a10 = i10.getClosestPastElement();
        if (!a10) continue;
        a10.sourceId === e10 && (!t10 || a10.sourceOrder > t10.sourceOrder) && (t10 = a10, n10 = r10);
      }
      return [
        t10,
        n10
      ];
    }
    canUndo(e10) {
      if (e10 instanceof hx) {
        let [, t11] = this._findClosestUndoElementWithSource(e10.id);
        return !!t11;
      }
      let t10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let e11 = this._editStacks.get(t10);
        return e11.hasPastElements();
      }
      return false;
    }
    _onError(e10, t10) {
      gr(e10);
      for (let e11 of t10.strResources) this.removeElements(e11);
      this._notificationService.error(e10);
    }
    _acquireLocks(e10) {
      for (let t10 of e10.editStacks) if (t10.locked) throw Error(`Cannot acquire edit stack lock`);
      for (let t10 of e10.editStacks) t10.locked = true;
      return () => {
        for (let t10 of e10.editStacks) t10.locked = false;
      };
    }
    _safeInvokeWithLocks(e10, t10, n10, r10, i10) {
      let a10 = this._acquireLocks(n10), o10;
      try {
        o10 = t10();
      } catch (t11) {
        return a10(), r10.dispose(), this._onError(t11, e10);
      }
      return o10 ? o10.then(() => (a10(), r10.dispose(), i10()), (t11) => (a10(), r10.dispose(), this._onError(t11, e10))) : (a10(), r10.dispose(), i10());
    }
    async _invokeWorkspacePrepare(e10) {
      if (e10.actual.prepareUndoRedo === void 0) return j.None;
      let t10 = e10.actual.prepareUndoRedo();
      return t10 === void 0 ? j.None : t10;
    }
    _invokeResourcePrepare(e10, t10) {
      if (e10.actual.type !== 1 || e10.actual.prepareUndoRedo === void 0) return t10(j.None);
      let n10 = e10.actual.prepareUndoRedo();
      return n10 ? Lr(n10) ? t10(n10) : n10.then((e11) => t10(e11)) : t10(j.None);
    }
    _getAffectedEditStacks(e10) {
      let t10 = [];
      for (let n10 of e10.strResources) t10.push(this._editStacks.get(n10) || Dx);
      return new Ex(t10);
    }
    _tryToSplitAndUndo(e10, t10, n10, r10) {
      if (t10.canSplit()) return this._splitPastWorkspaceElement(t10, n10), this._notificationService.warn(r10), new kx(this._undo(e10, 0, true));
      for (let e11 of t10.strResources) this.removeElements(e11);
      return this._notificationService.warn(r10), new kx();
    }
    _checkWorkspaceUndo(e10, t10, n10, r10) {
      if (t10.removedResources) return this._tryToSplitAndUndo(e10, t10, t10.removedResources, T({
        key: `cannotWorkspaceUndo`,
        comment: [
          `{0} is a label for an operation. {1} is another message.`
        ]
      }, `Could not undo '{0}' across all files. {1}`, t10.label, t10.removedResources.createMessage()));
      if (r10 && t10.invalidatedResources) return this._tryToSplitAndUndo(e10, t10, t10.invalidatedResources, T({
        key: `cannotWorkspaceUndo`,
        comment: [
          `{0} is a label for an operation. {1} is another message.`
        ]
      }, `Could not undo '{0}' across all files. {1}`, t10.label, t10.invalidatedResources.createMessage()));
      let i10 = [];
      for (let e11 of n10.editStacks) e11.getClosestPastElement() !== t10 && i10.push(e11.resourceLabel);
      if (i10.length > 0) return this._tryToSplitAndUndo(e10, t10, null, T({
        key: `cannotWorkspaceUndoDueToChanges`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not undo '{0}' across all files because changes were made to {1}`, t10.label, i10.join(`, `)));
      let a10 = [];
      for (let e11 of n10.editStacks) e11.locked && a10.push(e11.resourceLabel);
      return a10.length > 0 ? this._tryToSplitAndUndo(e10, t10, null, T({
        key: `cannotWorkspaceUndoDueToInProgressUndoRedo`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}`, t10.label, a10.join(`, `))) : n10.isValid() ? null : this._tryToSplitAndUndo(e10, t10, null, T({
        key: `cannotWorkspaceUndoDueToInMeantimeUndoRedo`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime`, t10.label));
    }
    _workspaceUndo(e10, t10, n10) {
      let r10 = this._getAffectedEditStacks(t10), i10 = this._checkWorkspaceUndo(e10, t10, r10, false);
      return i10 ? i10.returnValue : this._confirmAndExecuteWorkspaceUndo(e10, t10, r10, n10);
    }
    _isPartOfUndoGroup(e10) {
      if (!e10.groupId) return false;
      for (let [, t10] of this._editStacks) {
        let n10 = t10.getClosestPastElement();
        if (!n10) continue;
        if (n10 === e10) {
          let n11 = t10.getSecondClosestPastElement();
          if (n11 && n11.groupId === e10.groupId) return true;
        }
        if (n10.groupId === e10.groupId) return true;
      }
      return false;
    }
    async _confirmAndExecuteWorkspaceUndo(e10, t10, n10, r10) {
      if (t10.canSplit() && !this._isPartOfUndoGroup(t10)) {
        let i11;
        (function(e11) {
          e11[e11.All = 0] = `All`, e11[e11.This = 1] = `This`, e11[e11.Cancel = 2] = `Cancel`;
        })(i11 || (i11 = {}));
        let { result: a11 } = await this._dialogService.prompt({
          type: sx.Info,
          message: T(`confirmWorkspace`, `Would you like to undo '{0}' across all files?`, t10.label),
          buttons: [
            {
              label: T({
                key: `ok`,
                comment: [
                  `{0} denotes a number that is > 1, && denotes a mnemonic`
                ]
              }, `&&Undo in {0} Files`, n10.editStacks.length),
              run: () => i11.All
            },
            {
              label: T({
                key: `nok`,
                comment: [
                  `&& denotes a mnemonic`
                ]
              }, `Undo this &&File`),
              run: () => i11.This
            }
          ],
          cancelButton: {
            run: () => i11.Cancel
          }
        });
        if (a11 === i11.Cancel) return;
        if (a11 === i11.This) return this._splitPastWorkspaceElement(t10, null), this._undo(e10, 0, true);
        let o10 = this._checkWorkspaceUndo(e10, t10, n10, false);
        if (o10) return o10.returnValue;
        r10 = true;
      }
      let i10;
      try {
        i10 = await this._invokeWorkspacePrepare(t10);
      } catch (e11) {
        return this._onError(e11, t10);
      }
      let a10 = this._checkWorkspaceUndo(e10, t10, n10, true);
      if (a10) return i10.dispose(), a10.returnValue;
      for (let e11 of n10.editStacks) e11.moveBackward(t10);
      return this._safeInvokeWithLocks(t10, () => t10.actual.undo(), n10, i10, () => this._continueUndoInGroup(t10.groupId, r10));
    }
    _resourceUndo(e10, t10, n10) {
      if (!t10.isValid) {
        e10.flushAllElements();
        return;
      }
      if (e10.locked) {
        let e11 = T({
          key: `cannotResourceUndoDueToInProgressUndoRedo`,
          comment: [
            `{0} is a label for an operation.`
          ]
        }, `Could not undo '{0}' because there is already an undo or redo operation running.`, t10.label);
        this._notificationService.warn(e11);
        return;
      }
      return this._invokeResourcePrepare(t10, (r10) => (e10.moveBackward(t10), this._safeInvokeWithLocks(t10, () => t10.actual.undo(), new Ex([
        e10
      ]), r10, () => this._continueUndoInGroup(t10.groupId, n10))));
    }
    _findClosestUndoElementInGroup(e10) {
      if (!e10) return [
        null,
        null
      ];
      let t10 = null, n10 = null;
      for (let [r10, i10] of this._editStacks) {
        let a10 = i10.getClosestPastElement();
        if (!a10) continue;
        a10.groupId === e10 && (!t10 || a10.groupOrder > t10.groupOrder) && (t10 = a10, n10 = r10);
      }
      return [
        t10,
        n10
      ];
    }
    _continueUndoInGroup(e10, t10) {
      if (!e10) return;
      let [, n10] = this._findClosestUndoElementInGroup(e10);
      if (n10) return this._undo(n10, 0, t10);
    }
    undo(e10) {
      if (e10 instanceof hx) {
        let [, t10] = this._findClosestUndoElementWithSource(e10.id);
        return t10 ? this._undo(t10, e10.id, false) : void 0;
      }
      return typeof e10 == `string` ? this._undo(e10, 0, false) : this._undo(this.getUriComparisonKey(e10), 0, false);
    }
    _undo(e10, t10 = 0, n10) {
      if (!this._editStacks.has(e10)) return;
      let r10 = this._editStacks.get(e10), i10 = r10.getClosestPastElement();
      if (!i10) return;
      if (i10.groupId) {
        let [e11, r11] = this._findClosestUndoElementInGroup(i10.groupId);
        if (i10 !== e11 && r11) return this._undo(r11, t10, n10);
      }
      let a10 = i10.sourceId !== t10 || i10.confirmBeforeUndo;
      if (a10 && !n10) return this._confirmAndContinueUndo(e10, t10, i10);
      try {
        return i10.type === 1 ? this._workspaceUndo(e10, i10, n10) : this._resourceUndo(r10, i10, n10);
      } finally {
        vx && this._print(`undo`);
      }
    }
    async _confirmAndContinueUndo(e10, t10, n10) {
      let r10 = await this._dialogService.confirm({
        message: T(`confirmDifferentSource`, `Would you like to undo '{0}'?`, n10.label),
        primaryButton: T({
          key: `confirmDifferentSource.yes`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Yes`),
        cancelButton: T(`confirmDifferentSource.no`, `No`)
      });
      if (r10.confirmed) return this._undo(e10, t10, true);
    }
    _findClosestRedoElementWithSource(e10) {
      if (!e10) return [
        null,
        null
      ];
      let t10 = null, n10 = null;
      for (let [r10, i10] of this._editStacks) {
        let a10 = i10.getClosestFutureElement();
        if (!a10) continue;
        a10.sourceId === e10 && (!t10 || a10.sourceOrder < t10.sourceOrder) && (t10 = a10, n10 = r10);
      }
      return [
        t10,
        n10
      ];
    }
    canRedo(e10) {
      if (e10 instanceof hx) {
        let [, t11] = this._findClosestRedoElementWithSource(e10.id);
        return !!t11;
      }
      let t10 = this.getUriComparisonKey(e10);
      if (this._editStacks.has(t10)) {
        let e11 = this._editStacks.get(t10);
        return e11.hasFutureElements();
      }
      return false;
    }
    _tryToSplitAndRedo(e10, t10, n10, r10) {
      if (t10.canSplit()) return this._splitFutureWorkspaceElement(t10, n10), this._notificationService.warn(r10), new kx(this._redo(e10));
      for (let e11 of t10.strResources) this.removeElements(e11);
      return this._notificationService.warn(r10), new kx();
    }
    _checkWorkspaceRedo(e10, t10, n10, r10) {
      if (t10.removedResources) return this._tryToSplitAndRedo(e10, t10, t10.removedResources, T({
        key: `cannotWorkspaceRedo`,
        comment: [
          `{0} is a label for an operation. {1} is another message.`
        ]
      }, `Could not redo '{0}' across all files. {1}`, t10.label, t10.removedResources.createMessage()));
      if (r10 && t10.invalidatedResources) return this._tryToSplitAndRedo(e10, t10, t10.invalidatedResources, T({
        key: `cannotWorkspaceRedo`,
        comment: [
          `{0} is a label for an operation. {1} is another message.`
        ]
      }, `Could not redo '{0}' across all files. {1}`, t10.label, t10.invalidatedResources.createMessage()));
      let i10 = [];
      for (let e11 of n10.editStacks) e11.getClosestFutureElement() !== t10 && i10.push(e11.resourceLabel);
      if (i10.length > 0) return this._tryToSplitAndRedo(e10, t10, null, T({
        key: `cannotWorkspaceRedoDueToChanges`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not redo '{0}' across all files because changes were made to {1}`, t10.label, i10.join(`, `)));
      let a10 = [];
      for (let e11 of n10.editStacks) e11.locked && a10.push(e11.resourceLabel);
      return a10.length > 0 ? this._tryToSplitAndRedo(e10, t10, null, T({
        key: `cannotWorkspaceRedoDueToInProgressUndoRedo`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}`, t10.label, a10.join(`, `))) : n10.isValid() ? null : this._tryToSplitAndRedo(e10, t10, null, T({
        key: `cannotWorkspaceRedoDueToInMeantimeUndoRedo`,
        comment: [
          `{0} is a label for an operation. {1} is a list of filenames.`
        ]
      }, `Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime`, t10.label));
    }
    _workspaceRedo(e10, t10) {
      let n10 = this._getAffectedEditStacks(t10), r10 = this._checkWorkspaceRedo(e10, t10, n10, false);
      return r10 ? r10.returnValue : this._executeWorkspaceRedo(e10, t10, n10);
    }
    async _executeWorkspaceRedo(e10, t10, n10) {
      let r10;
      try {
        r10 = await this._invokeWorkspacePrepare(t10);
      } catch (e11) {
        return this._onError(e11, t10);
      }
      let i10 = this._checkWorkspaceRedo(e10, t10, n10, true);
      if (i10) return r10.dispose(), i10.returnValue;
      for (let e11 of n10.editStacks) e11.moveForward(t10);
      return this._safeInvokeWithLocks(t10, () => t10.actual.redo(), n10, r10, () => this._continueRedoInGroup(t10.groupId));
    }
    _resourceRedo(e10, t10) {
      if (!t10.isValid) {
        e10.flushAllElements();
        return;
      }
      if (e10.locked) {
        let e11 = T({
          key: `cannotResourceRedoDueToInProgressUndoRedo`,
          comment: [
            `{0} is a label for an operation.`
          ]
        }, `Could not redo '{0}' because there is already an undo or redo operation running.`, t10.label);
        this._notificationService.warn(e11);
        return;
      }
      return this._invokeResourcePrepare(t10, (n10) => (e10.moveForward(t10), this._safeInvokeWithLocks(t10, () => t10.actual.redo(), new Ex([
        e10
      ]), n10, () => this._continueRedoInGroup(t10.groupId))));
    }
    _findClosestRedoElementInGroup(e10) {
      if (!e10) return [
        null,
        null
      ];
      let t10 = null, n10 = null;
      for (let [r10, i10] of this._editStacks) {
        let a10 = i10.getClosestFutureElement();
        if (!a10) continue;
        a10.groupId === e10 && (!t10 || a10.groupOrder < t10.groupOrder) && (t10 = a10, n10 = r10);
      }
      return [
        t10,
        n10
      ];
    }
    _continueRedoInGroup(e10) {
      if (!e10) return;
      let [, t10] = this._findClosestRedoElementInGroup(e10);
      if (t10) return this._redo(t10);
    }
    redo(e10) {
      if (e10 instanceof hx) {
        let [, t10] = this._findClosestRedoElementWithSource(e10.id);
        return t10 ? this._redo(t10) : void 0;
      }
      return typeof e10 == `string` ? this._redo(e10) : this._redo(this.getUriComparisonKey(e10));
    }
    _redo(e10) {
      if (!this._editStacks.has(e10)) return;
      let t10 = this._editStacks.get(e10), n10 = t10.getClosestFutureElement();
      if (n10) {
        if (n10.groupId) {
          let [e11, t11] = this._findClosestRedoElementInGroup(n10.groupId);
          if (n10 !== e11 && t11) return this._redo(t11);
        }
        try {
          return n10.type === 1 ? this._workspaceRedo(e10, n10) : this._resourceRedo(t10, n10);
        } finally {
          vx && this._print(`redo`);
        }
      }
    }
  };
  Ox = gx([
    _x(0, cx),
    _x(1, ux)
  ], Ox);
  var kx = class {
    constructor(e10) {
      this.returnValue = e10;
    }
  };
  bg(fx, Ox, 1);
  Ax = function(e10, t10, n10) {
    return Math.min(Math.max(e10, t10), n10);
  };
  var jx = class {
    constructor() {
      this._n = 1, this._val = 0;
    }
    update(e10) {
      return this._val += (e10 - this._val) / this._n, this._n += 1, this._val;
    }
    get value() {
      return this._val;
    }
  }, Mx = class {
    constructor(e10) {
      this._n = 0, this._val = 0, this._values = [], this._index = 0, this._sum = 0, this._values = Array(e10), this._values.fill(0, 0, e10);
    }
    update(e10) {
      let t10 = this._values[this._index];
      return this._values[this._index] = e10, this._index = (this._index + 1) % this._values.length, this._sum -= t10, this._sum += e10, this._n < this._values.length && (this._n += 1), this._val = this._sum / this._n, this._val;
    }
    get value() {
      return this._val;
    }
  };
  Nx = Xf(`environmentService`);
  var Px = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, Fx = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  Ix = Xf(`ILanguageFeatureDebounceService`);
  var Lx;
  (function(e10) {
    let t10 = /* @__PURE__ */ new WeakMap(), n10 = 0;
    function r10(e11) {
      let r11 = t10.get(e11);
      return r11 === void 0 && (r11 = ++n10, t10.set(e11, r11)), r11;
    }
    e10.of = r10;
  })(Lx || (Lx = {}));
  var Rx = class {
    constructor(e10) {
      this._default = e10;
    }
    get(e10) {
      return this._default;
    }
    update(e10, t10) {
      return this._default;
    }
    default() {
      return this._default;
    }
  }, zx = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this._logService = e10, this._name = t10, this._registry = n10, this._default = r10, this._min = i10, this._max = a10, this._cache = new G_(50, 0.7);
    }
    _key(e10) {
      return e10.id + this._registry.all(e10).reduce((e11, t10) => Nu(Lx.of(t10), e11), 0);
    }
    get(e10) {
      let t10 = this._key(e10), n10 = this._cache.get(t10);
      return n10 ? Ax(n10.value, this._min, this._max) : this.default();
    }
    update(e10, t10) {
      let n10 = this._key(e10), r10 = this._cache.get(n10);
      r10 || (r10 = new Mx(6), this._cache.set(n10, r10));
      let i10 = Ax(r10.update(t10), this._min, this._max);
      return Cu(e10.uri, `output`) || this._logService.trace(`[DEBOUNCE: ${this._name}] for ${e10.uri.toString()} is ${i10}ms`), i10;
    }
    _overall() {
      let e10 = new jx();
      for (let [, t10] of this._cache) e10.update(t10.value);
      return e10.value;
    }
    default() {
      let e10 = this._overall() | 0 || this._default;
      return Ax(e10, this._min, this._max);
    }
  };
  let Bx = class {
    constructor(e10, t10) {
      this._logService = e10, this._data = /* @__PURE__ */ new Map(), this._isDev = t10.isExtensionDevelopment || !t10.isBuilt;
    }
    for(e10, t10, n10) {
      let r10 = (n10 == null ? void 0 : n10.min) ?? 50, i10 = (n10 == null ? void 0 : n10.max) ?? r10 ** 2, a10 = (n10 == null ? void 0 : n10.key) ?? void 0, o10 = `${Lx.of(e10)},${r10}${a10 ? `,` + a10 : ``}`, s10 = this._data.get(o10);
      return s10 || (this._isDev ? (this._logService.debug(`[DEBOUNCE: ${t10}] is disabled in developed mode`), s10 = new Rx(r10 * 1.5)) : s10 = new zx(this._logService, t10, e10, this._overallAverage() | 0 || r10 * 1.5, r10, i10), this._data.set(o10, s10)), s10;
    }
    _overallAverage() {
      let e10 = new jx();
      for (let t10 of this._data.values()) e10.update(t10.default());
      return e10.value;
    }
  };
  Bx = Px([
    Fx(0, wm),
    Fx(1, Nx)
  ], Bx), bg(Ix, Bx, 1);
  Vx = class {
    static getLanguageId(e10) {
      return (e10 & 255) >>> 0;
    }
    static getTokenType(e10) {
      return (e10 & 768) >>> 8;
    }
    static containsBalancedBrackets(e10) {
      return (e10 & 1024) != 0;
    }
    static getFontStyle(e10) {
      return (e10 & 30720) >>> 11;
    }
    static getForeground(e10) {
      return (e10 & 16744448) >>> 15;
    }
    static getBackground(e10) {
      return (e10 & 4278190080) >>> 24;
    }
    static getClassNameFromMetadata(e10) {
      let t10 = this.getForeground(e10), n10 = `mtk` + t10, r10 = this.getFontStyle(e10);
      return r10 & 1 && (n10 += ` mtki`), r10 & 2 && (n10 += ` mtkb`), r10 & 4 && (n10 += ` mtku`), r10 & 8 && (n10 += ` mtks`), n10;
    }
    static getInlineStyleFromMetadata(e10, t10) {
      let n10 = this.getForeground(e10), r10 = this.getFontStyle(e10), i10 = `color: ${t10[n10]};`;
      r10 & 1 && (i10 += `font-style: italic;`), r10 & 2 && (i10 += `font-weight: bold;`);
      let a10 = ``;
      return r10 & 4 && (a10 += ` underline`), r10 & 8 && (a10 += ` line-through`), a10 && (i10 += `text-decoration:${a10};`), i10;
    }
    static getPresentationFromMetadata(e10) {
      let t10 = this.getForeground(e10), n10 = this.getFontStyle(e10);
      return {
        foreground: t10,
        italic: !!(n10 & 1),
        bold: !!(n10 & 2),
        underline: !!(n10 & 4),
        strikethrough: !!(n10 & 8)
      };
    }
  };
  Hx = function(e10) {
    let t10 = 0, n10 = 0, r10 = 0, i10 = 0;
    for (let a10 = 0, o10 = e10.length; a10 < o10; a10++) {
      let s10 = e10.charCodeAt(a10);
      s10 === 13 ? (t10 === 0 && (n10 = a10), t10++, a10 + 1 < o10 && e10.charCodeAt(a10 + 1) === 10 ? (i10 |= 2, a10++) : i10 |= 3, r10 = a10 + 1) : s10 === 10 && (i10 |= 1, t10 === 0 && (n10 = a10), t10++, r10 = a10 + 1);
    }
    return t10 === 0 && (n10 = e10.length), [
      t10,
      n10,
      e10.length - r10,
      i10
    ];
  };
  var Ux = class e10 {
    static create(t10, n10) {
      return new e10(t10, new Wx(n10));
    }
    get startLineNumber() {
      return this._startLineNumber;
    }
    get endLineNumber() {
      return this._endLineNumber;
    }
    constructor(e11, t10) {
      this._startLineNumber = e11, this._tokens = t10, this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();
    }
    toString() {
      return this._tokens.toString(this._startLineNumber);
    }
    _updateEndLineNumber() {
      this._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();
    }
    isEmpty() {
      return this._tokens.isEmpty();
    }
    getLineTokens(e11) {
      return this._startLineNumber <= e11 && e11 <= this._endLineNumber ? this._tokens.getLineTokens(e11 - this._startLineNumber) : null;
    }
    getRange() {
      let e11 = this._tokens.getRange();
      return e11 && new F(this._startLineNumber + e11.startLineNumber, e11.startColumn, this._startLineNumber + e11.endLineNumber, e11.endColumn);
    }
    removeTokens(e11) {
      let t10 = e11.startLineNumber - this._startLineNumber, n10 = e11.endLineNumber - this._startLineNumber;
      this._startLineNumber += this._tokens.removeTokens(t10, e11.startColumn - 1, n10, e11.endColumn - 1), this._updateEndLineNumber();
    }
    split(t10) {
      let n10 = t10.startLineNumber - this._startLineNumber, r10 = t10.endLineNumber - this._startLineNumber, [i10, a10, o10] = this._tokens.split(n10, t10.startColumn - 1, r10, t10.endColumn - 1);
      return [
        new e10(this._startLineNumber, i10),
        new e10(this._startLineNumber + o10, a10)
      ];
    }
    applyEdit(e11, t10) {
      let [n10, r10, i10] = Hx(t10);
      this.acceptEdit(e11, n10, r10, i10, t10.length > 0 ? t10.charCodeAt(0) : 0);
    }
    acceptEdit(e11, t10, n10, r10, i10) {
      this._acceptDeleteRange(e11), this._acceptInsertText(new P(e11.startLineNumber, e11.startColumn), t10, n10, r10, i10), this._updateEndLineNumber();
    }
    _acceptDeleteRange(e11) {
      if (e11.startLineNumber === e11.endLineNumber && e11.startColumn === e11.endColumn) return;
      let t10 = e11.startLineNumber - this._startLineNumber, n10 = e11.endLineNumber - this._startLineNumber;
      if (n10 < 0) {
        let e12 = n10 - t10;
        this._startLineNumber -= e12;
        return;
      }
      let r10 = this._tokens.getMaxDeltaLine();
      if (!(t10 >= r10 + 1)) {
        if (t10 < 0 && n10 >= r10 + 1) {
          this._startLineNumber = 0, this._tokens.clear();
          return;
        }
        if (t10 < 0) {
          let r11 = -t10;
          this._startLineNumber -= r11, this._tokens.acceptDeleteRange(e11.startColumn - 1, 0, 0, n10, e11.endColumn - 1);
        } else this._tokens.acceptDeleteRange(0, t10, e11.startColumn - 1, n10, e11.endColumn - 1);
      }
    }
    _acceptInsertText(e11, t10, n10, r10, i10) {
      if (t10 === 0 && n10 === 0) return;
      let a10 = e11.lineNumber - this._startLineNumber;
      if (a10 < 0) {
        this._startLineNumber += t10;
        return;
      }
      let o10 = this._tokens.getMaxDeltaLine();
      a10 >= o10 + 1 || this._tokens.acceptInsertText(a10, e11.column - 1, t10, n10, r10, i10);
    }
  }, Wx = class e10 {
    constructor(e11) {
      this._tokens = e11, this._tokenCount = e11.length / 4;
    }
    toString(e11) {
      let t10 = [];
      for (let n10 = 0; n10 < this._tokenCount; n10++) t10.push(`(${this._getDeltaLine(n10) + e11},${this._getStartCharacter(n10)}-${this._getEndCharacter(n10)})`);
      return `[${t10.join(`,`)}]`;
    }
    getMaxDeltaLine() {
      let e11 = this._getTokenCount();
      return e11 === 0 ? -1 : this._getDeltaLine(e11 - 1);
    }
    getRange() {
      let e11 = this._getTokenCount();
      if (e11 === 0) return null;
      let t10 = this._getStartCharacter(0), n10 = this._getDeltaLine(e11 - 1), r10 = this._getEndCharacter(e11 - 1);
      return new F(0, t10 + 1, n10, r10 + 1);
    }
    _getTokenCount() {
      return this._tokenCount;
    }
    _getDeltaLine(e11) {
      return this._tokens[4 * e11];
    }
    _getStartCharacter(e11) {
      return this._tokens[4 * e11 + 1];
    }
    _getEndCharacter(e11) {
      return this._tokens[4 * e11 + 2];
    }
    isEmpty() {
      return this._getTokenCount() === 0;
    }
    getLineTokens(e11) {
      let t10 = 0, n10 = this._getTokenCount() - 1;
      for (; t10 < n10; ) {
        let r10 = t10 + Math.floor((n10 - t10) / 2), i10 = this._getDeltaLine(r10);
        if (i10 < e11) t10 = r10 + 1;
        else if (i10 > e11) n10 = r10 - 1;
        else {
          let i11 = r10;
          for (; i11 > t10 && this._getDeltaLine(i11 - 1) === e11; ) i11--;
          let a10 = r10;
          for (; a10 < n10 && this._getDeltaLine(a10 + 1) === e11; ) a10++;
          return new Gx(this._tokens.subarray(4 * i11, 4 * a10 + 4));
        }
      }
      return this._getDeltaLine(t10) === e11 ? new Gx(this._tokens.subarray(4 * t10, 4 * t10 + 4)) : null;
    }
    clear() {
      this._tokenCount = 0;
    }
    removeTokens(e11, t10, n10, r10) {
      let i10 = this._tokens, a10 = this._tokenCount, o10 = 0, s10 = false, c10 = 0;
      for (let l10 = 0; l10 < a10; l10++) {
        let a11 = 4 * l10, u10 = i10[a11], d10 = i10[a11 + 1], f10 = i10[a11 + 2], p10 = i10[a11 + 3];
        if ((u10 > e11 || u10 === e11 && f10 >= t10) && (u10 < n10 || u10 === n10 && d10 <= r10)) s10 = true;
        else {
          if (o10 === 0 && (c10 = u10), s10) {
            let e12 = 4 * o10;
            i10[e12] = u10 - c10, i10[e12 + 1] = d10, i10[e12 + 2] = f10, i10[e12 + 3] = p10;
          }
          o10++;
        }
      }
      return this._tokenCount = o10, c10;
    }
    split(t10, n10, r10, i10) {
      let a10 = this._tokens, o10 = this._tokenCount, s10 = [], c10 = [], l10 = s10, u10 = 0, d10 = 0;
      for (let e11 = 0; e11 < o10; e11++) {
        let o11 = 4 * e11, s11 = a10[o11], f10 = a10[o11 + 1], p10 = a10[o11 + 2], m10 = a10[o11 + 3];
        if (s11 > t10 || s11 === t10 && p10 >= n10) {
          if (s11 < r10 || s11 === r10 && f10 <= i10) continue;
          l10 !== c10 && (l10 = c10, u10 = 0, d10 = s11);
        }
        l10[u10++] = s11 - d10, l10[u10++] = f10, l10[u10++] = p10, l10[u10++] = m10;
      }
      return [
        new e10(new Uint32Array(s10)),
        new e10(new Uint32Array(c10)),
        d10
      ];
    }
    acceptDeleteRange(e11, t10, n10, r10, i10) {
      let a10 = this._tokens, o10 = this._tokenCount, s10 = r10 - t10, c10 = 0, l10 = false;
      for (let u10 = 0; u10 < o10; u10++) {
        let d10 = 4 * u10, f10 = a10[d10], p10 = a10[d10 + 1], m10 = a10[d10 + 2], h10 = a10[d10 + 3];
        if (f10 < t10 || f10 === t10 && m10 <= n10) {
          c10++;
          continue;
        } else if (f10 === t10 && p10 < n10) f10 === r10 && m10 > i10 ? m10 -= i10 - n10 : m10 = n10;
        else if (f10 === t10 && p10 === n10) if (f10 === r10 && m10 > i10) m10 -= i10 - n10;
        else {
          l10 = true;
          continue;
        }
        else if (f10 < r10 || f10 === r10 && p10 < i10) if (f10 === r10 && m10 > i10) f10 = t10, p10 = n10, m10 = p10 + (m10 - i10);
        else {
          l10 = true;
          continue;
        }
        else if (f10 > r10) {
          if (s10 === 0 && !l10) {
            c10 = o10;
            break;
          }
          f10 -= s10;
        } else if (f10 === r10 && p10 >= i10) e11 && f10 === 0 && (p10 += e11, m10 += e11), f10 -= s10, p10 -= i10 - n10, m10 -= i10 - n10;
        else throw Error(`Not possible!`);
        let g10 = 4 * c10;
        a10[g10] = f10, a10[g10 + 1] = p10, a10[g10 + 2] = m10, a10[g10 + 3] = h10, c10++;
      }
      this._tokenCount = c10;
    }
    acceptInsertText(e11, t10, n10, r10, i10, a10) {
      let o10 = n10 === 0 && r10 === 1 && (a10 >= 48 && a10 <= 57 || a10 >= 65 && a10 <= 90 || a10 >= 97 && a10 <= 122), s10 = this._tokens, c10 = this._tokenCount;
      for (let a11 = 0; a11 < c10; a11++) {
        let c11 = 4 * a11, l10 = s10[c11], u10 = s10[c11 + 1], d10 = s10[c11 + 2];
        if (!(l10 < e11 || l10 === e11 && d10 < t10)) {
          if (l10 === e11 && d10 === t10) if (o10) d10 += 1;
          else continue;
          else if (l10 === e11 && u10 < t10 && t10 < d10) n10 === 0 ? d10 += r10 : d10 = t10;
          else {
            if (l10 === e11 && u10 === t10 && o10) continue;
            if (l10 === e11) if (l10 += n10, n10 === 0) u10 += r10, d10 += r10;
            else {
              let e12 = d10 - u10;
              u10 = i10 + (u10 - t10), d10 = u10 + e12;
            }
            else l10 += n10;
          }
          s10[c11] = l10, s10[c11 + 1] = u10, s10[c11 + 2] = d10;
        }
      }
    }
  }, Gx = class {
    constructor(e10) {
      this._tokens = e10;
    }
    getCount() {
      return this._tokens.length / 4;
    }
    getStartCharacter(e10) {
      return this._tokens[4 * e10 + 1];
    }
    getEndCharacter(e10) {
      return this._tokens[4 * e10 + 2];
    }
    getMetadata(e10) {
      return this._tokens[4 * e10 + 3];
    }
  }, Kx = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, qx = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const Jx = false;
  let Yx = class {
    constructor(e10, t10, n10, r10) {
      this._legend = e10, this._themeService = t10, this._languageService = n10, this._logService = r10, this._hasWarnedOverlappingTokens = false, this._hasWarnedInvalidLengthTokens = false, this._hasWarnedInvalidEditStart = false, this._hashTable = new Qx();
    }
    getMetadata(e10, t10, n10) {
      let r10 = this._languageService.languageIdCodec.encodeLanguageId(n10), i10 = this._hashTable.get(e10, t10, r10), a10;
      if (i10) a10 = i10.metadata, Jx && this._logService.getLevel() === Tm.Trace && this._logService.trace(`SemanticTokensProviderStyling [CACHED] ${e10} / ${t10}: foreground ${Vx.getForeground(a10)}, fontStyle ${Vx.getFontStyle(a10).toString(2)}`);
      else {
        let i11 = this._legend.tokenTypes[e10], o10 = [];
        if (i11) {
          let e11 = t10;
          for (let t11 = 0; e11 > 0 && t11 < this._legend.tokenModifiers.length; t11++) e11 & 1 && o10.push(this._legend.tokenModifiers[t11]), e11 >>= 1;
          Jx && e11 > 0 && this._logService.getLevel() === Tm.Trace && (this._logService.trace(`SemanticTokensProviderStyling: unknown token modifier index: ${t10.toString(2)} for legend: ${JSON.stringify(this._legend.tokenModifiers)}`), o10.push(`not-in-legend`));
          let r11 = this._themeService.getColorTheme().getTokenStyleMetadata(i11, o10, n10);
          if (r11 === void 0) a10 = 2147483647;
          else {
            if (a10 = 0, r11.italic !== void 0) {
              let e12 = (r11.italic ? 1 : 0) << 11;
              a10 |= e12 | 1;
            }
            if (r11.bold !== void 0) {
              let e12 = (r11.bold ? 2 : 0) << 11;
              a10 |= e12 | 2;
            }
            if (r11.underline !== void 0) {
              let e12 = (r11.underline ? 4 : 0) << 11;
              a10 |= e12 | 4;
            }
            if (r11.strikethrough !== void 0) {
              let e12 = (r11.strikethrough ? 8 : 0) << 11;
              a10 |= e12 | 8;
            }
            if (r11.foreground) {
              let e12 = r11.foreground << 15;
              a10 |= e12 | 16;
            }
            a10 === 0 && (a10 = 2147483647);
          }
        } else Jx && this._logService.getLevel() === Tm.Trace && this._logService.trace(`SemanticTokensProviderStyling: unknown token type index: ${e10} for legend: ${JSON.stringify(this._legend.tokenTypes)}`), a10 = 2147483647, i11 = `not-in-legend`;
        this._hashTable.add(e10, t10, r10, a10), Jx && this._logService.getLevel() === Tm.Trace && this._logService.trace(`SemanticTokensProviderStyling ${e10} (${i11}) / ${t10} (${o10.join(` `)}): foreground ${Vx.getForeground(a10)}, fontStyle ${Vx.getFontStyle(a10).toString(2)}`);
      }
      return a10;
    }
    warnOverlappingSemanticTokens(e10, t10) {
      this._hasWarnedOverlappingTokens || (this._hasWarnedOverlappingTokens = true, this._logService.warn(`Overlapping semantic tokens detected at lineNumber ${e10}, column ${t10}`));
    }
    warnInvalidLengthSemanticTokens(e10, t10) {
      this._hasWarnedInvalidLengthTokens || (this._hasWarnedInvalidLengthTokens = true, this._logService.warn(`Semantic token with invalid length detected at lineNumber ${e10}, column ${t10}`));
    }
    warnInvalidEditStart(e10, t10, n10, r10, i10) {
      this._hasWarnedInvalidEditStart || (this._hasWarnedInvalidEditStart = true, this._logService.warn(`Invalid semantic tokens edit detected (previousResultId: ${e10}, resultId: ${t10}) at edit #${n10}: The provided start offset ${r10} is outside the previous data (length ${i10}).`));
    }
  };
  Yx = Kx([
    qx(1, Vb),
    qx(2, _g),
    qx(3, wm)
  ], Yx);
  Xx = function(e10, t10, n10) {
    let r10 = e10.data, i10 = e10.data.length / 5 | 0, a10 = Math.max(Math.ceil(i10 / 1024), 400), o10 = [], s10 = 0, c10 = 1, l10 = 0;
    for (; s10 < i10; ) {
      let e11 = s10, u10 = Math.min(e11 + a10, i10);
      if (u10 < i10) {
        let t11 = u10;
        for (; t11 - 1 > e11 && r10[5 * t11] === 0; ) t11--;
        if (t11 - 1 === e11) {
          let e12 = u10;
          for (; e12 + 1 < i10 && r10[5 * e12] === 0; ) e12++;
          u10 = e12;
        } else u10 = t11;
      }
      let d10 = new Uint32Array((u10 - e11) * 4), f10 = 0, p10 = 0, m10 = 0, h10 = 0;
      for (; s10 < u10; ) {
        let e12 = 5 * s10, i11 = r10[e12], a11 = r10[e12 + 1], o11 = c10 + i11 | 0, u11 = i11 === 0 ? l10 + a11 | 0 : a11, g11 = r10[e12 + 2], _10 = u11 + g11 | 0, v10 = r10[e12 + 3], y10 = r10[e12 + 4];
        if (_10 <= u11) t10.warnInvalidLengthSemanticTokens(o11, u11 + 1);
        else if (m10 === o11 && h10 > u11) t10.warnOverlappingSemanticTokens(o11, u11 + 1);
        else {
          let e13 = t10.getMetadata(v10, y10, n10);
          e13 !== 2147483647 && (p10 === 0 && (p10 = o11), d10[f10] = o11 - p10, d10[f10 + 1] = u11, d10[f10 + 2] = _10, d10[f10 + 3] = e13, f10 += 4, m10 = o11, h10 = _10);
        }
        c10 = o11, l10 = u11, s10++;
      }
      f10 !== d10.length && (d10 = d10.subarray(0, f10));
      let g10 = Ux.create(p10, d10);
      o10.push(g10);
    }
    return o10;
  };
  var Zx = class {
    constructor(e10, t10, n10, r10) {
      this.tokenTypeIndex = e10, this.tokenModifierSet = t10, this.languageId = n10, this.metadata = r10, this.next = null;
    }
  }, Qx = (_Y2 = class {
    constructor() {
      this._elementsCount = 0, this._currentLengthIndex = 0, this._currentLength = _Y2._SIZES[this._currentLengthIndex], this._growCount = Math.round(this._currentLengthIndex + 1 < _Y2._SIZES.length ? 2 / 3 * this._currentLength : 0), this._elements = [], _Y2._nullOutEntries(this._elements, this._currentLength);
    }
    static _nullOutEntries(e10, t10) {
      for (let n10 = 0; n10 < t10; n10++) e10[n10] = null;
    }
    _hash2(e10, t10) {
      return (e10 << 5) - e10 + t10 | 0;
    }
    _hashFunc(e10, t10, n10) {
      return this._hash2(this._hash2(e10, t10), n10) % this._currentLength;
    }
    get(e10, t10, n10) {
      let r10 = this._hashFunc(e10, t10, n10), i10 = this._elements[r10];
      for (; i10; ) {
        if (i10.tokenTypeIndex === e10 && i10.tokenModifierSet === t10 && i10.languageId === n10) return i10;
        i10 = i10.next;
      }
      return null;
    }
    add(t10, n10, r10, i10) {
      if (this._elementsCount++, this._growCount !== 0 && this._elementsCount >= this._growCount) {
        let t11 = this._elements;
        this._currentLengthIndex++, this._currentLength = _Y2._SIZES[this._currentLengthIndex], this._growCount = Math.round(this._currentLengthIndex + 1 < _Y2._SIZES.length ? 2 / 3 * this._currentLength : 0), this._elements = [], _Y2._nullOutEntries(this._elements, this._currentLength);
        for (let e10 of t11) {
          let t12 = e10;
          for (; t12; ) {
            let e11 = t12.next;
            t12.next = null, this._add(t12), t12 = e11;
          }
        }
      }
      this._add(new Zx(t10, n10, r10, i10));
    }
    _add(e10) {
      let t10 = this._hashFunc(e10.tokenTypeIndex, e10.tokenModifierSet, e10.languageId);
      e10.next = this._elements[t10], this._elements[t10] = e10;
    }
  }, _Y2._SIZES = [
    3,
    7,
    13,
    31,
    61,
    127,
    251,
    509,
    1021,
    2039,
    4093,
    8191,
    16381,
    32749,
    65521,
    131071,
    262139,
    524287,
    1048573,
    2097143
  ], _Y2);
  $x = Xf(`semanticTokensStylingService`);
  var eS = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, tS = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let nS = class extends j {
    constructor(e10, t10, n10) {
      super(), this._themeService = e10, this._logService = t10, this._languageService = n10, this._caches = /* @__PURE__ */ new WeakMap(), this._register(this._themeService.onDidColorThemeChange(() => {
        this._caches = /* @__PURE__ */ new WeakMap();
      }));
    }
    getStyling(e10) {
      return this._caches.has(e10) || this._caches.set(e10, new Yx(e10.getLegend(), this._themeService, this._languageService, this._logService)), this._caches.get(e10);
    }
  };
  nS = eS([
    tS(0, Vb),
    tS(1, wm),
    tS(2, _g)
  ], nS), bg($x, nS, 1);
  function rS(e10) {
    return e10 === 47 || e10 === 92;
  }
  function iS(e10) {
    return e10.replace(/[\\/]/g, ra.sep);
  }
  function aS(e10) {
    return e10.indexOf(`/`) === -1 && (e10 = iS(e10)), /^[a-zA-Z]:(\/|$)/.test(e10) && (e10 = `/` + e10), e10;
  }
  function oS(e10, t10 = ra.sep) {
    if (!e10) return ``;
    let n10 = e10.length, r10 = e10.charCodeAt(0);
    if (rS(r10)) {
      if (rS(e10.charCodeAt(1)) && !rS(e10.charCodeAt(2))) {
        let r11 = 3, i11 = r11;
        for (; r11 < n10 && !rS(e10.charCodeAt(r11)); r11++) ;
        if (i11 !== r11 && !rS(e10.charCodeAt(r11 + 1))) {
          for (r11 += 1; r11 < n10; r11++) if (rS(e10.charCodeAt(r11))) return e10.slice(0, r11 + 1).replace(/[\\/]/g, t10);
        }
      }
      return t10;
    } else if (cS(r10) && e10.charCodeAt(1) === 58) return rS(e10.charCodeAt(2)) ? e10.slice(0, 2) + t10 : e10.slice(0, 2);
    let i10 = e10.indexOf(`://`);
    if (i10 !== -1) {
      for (i10 += 3; i10 < n10; i10++) if (rS(e10.charCodeAt(i10))) return e10.slice(0, i10 + 1);
    }
    return ``;
  }
  function sS(e10, t10, n10, r10 = da) {
    if (e10 === t10) return true;
    if (!e10 || !t10 || t10.length > e10.length) return false;
    if (n10) {
      let n11 = Ls(e10, t10);
      if (!n11) return false;
      if (t10.length === e10.length) return true;
      let i10 = t10.length;
      return t10.charAt(t10.length - 1) === r10 && i10--, e10.charAt(i10) === r10;
    }
    return t10.charAt(t10.length - 1) !== r10 && (t10 += r10), e10.indexOf(t10) === 0;
  }
  function cS(e10) {
    return e10 >= 65 && e10 <= 90 || e10 >= 97 && e10 <= 122;
  }
  lS = function(e10, t10 = mt) {
    return t10 ? cS(e10.charCodeAt(0)) && e10.charCodeAt(1) === 58 : false;
  };
  const uS = `**`, dS = `/`, fS = `[/\\\\]`, pS = `[^/\\\\]`, mS = /\//g;
  function hS(e10, t10) {
    switch (e10) {
      case 0:
        return ``;
      case 1:
        return `${pS}*?`;
      default:
        return `(?:${fS}|${pS}+${fS}${t10 ? `|${fS}${pS}+` : ``})*?`;
    }
  }
  function gS(e10, t10) {
    if (!e10) return [];
    let n10 = [], r10 = false, i10 = false, a10 = ``;
    for (let o10 of e10) {
      switch (o10) {
        case t10:
          if (!r10 && !i10) {
            n10.push(a10), a10 = ``;
            continue;
          }
          break;
        case `{`:
          r10 = true;
          break;
        case `}`:
          r10 = false;
          break;
        case `[`:
          i10 = true;
          break;
        case `]`:
          i10 = false;
          break;
      }
      a10 += o10;
    }
    return a10 && n10.push(a10), n10;
  }
  function _S(e10) {
    if (!e10) return ``;
    let t10 = ``, n10 = gS(e10, dS);
    if (n10.every((e11) => e11 === uS)) t10 = `.*`;
    else {
      let e11 = false;
      n10.forEach((r10, i10) => {
        if (r10 === uS) {
          if (e11) return;
          t10 += hS(2, i10 === n10.length - 1);
        } else {
          let e12 = false, a10 = ``, o10 = false, s10 = ``;
          for (let n11 of r10) {
            if (n11 !== `}` && e12) {
              a10 += n11;
              continue;
            }
            if (o10 && (n11 !== `]` || !s10)) {
              let e13;
              e13 = n11 === `-` ? n11 : (n11 === `^` || n11 === `!`) && !s10 ? `^` : n11 === dS ? `` : gs(n11), s10 += e13;
              continue;
            }
            switch (n11) {
              case `{`:
                e12 = true;
                continue;
              case `[`:
                o10 = true;
                continue;
              case `}`: {
                let n12 = gS(a10, `,`), r11 = `(?:${n12.map((e13) => _S(e13)).join(`|`)})`;
                t10 += r11, e12 = false, a10 = ``;
                break;
              }
              case `]`:
                t10 += `[` + s10 + `]`, o10 = false, s10 = ``;
                break;
              case `?`:
                t10 += pS;
                continue;
              case `*`:
                t10 += hS(1);
                continue;
              default:
                t10 += gs(n11);
            }
          }
          i10 < n10.length - 1 && (n10[i10 + 1] !== uS || i10 + 2 < n10.length) && (t10 += fS);
        }
        e11 = r10 === uS;
      });
    }
    return t10;
  }
  const vS = /^\*\*\/\*\.[\w\.-]+$/, yS = /^\*\*\/([\w\.-]+)\/?$/, bS = /^{\*\*\/\*?[\w\.-]+\/?(,\*\*\/\*?[\w\.-]+\/?)*}$/, xS = /^{\*\*\/\*?[\w\.-]+(\/(\*\*)?)?(,\*\*\/\*?[\w\.-]+(\/(\*\*)?)?)*}$/, SS = /^\*\*((\/[\w\.-]+)+)\/?$/, CS = /^([\w\.-]+(\/[\w\.-]+)*)\/?$/, wS = new G_(1e4), TS = function() {
    return false;
  }, ES = function() {
    return null;
  };
  function DS(e10, t10) {
    if (!e10) return ES;
    let n10;
    n10 = typeof e10 == `string` ? e10 : e10.pattern, n10 = n10.trim();
    let r10 = `${n10}_${!!t10.trimForExclusions}`, i10 = wS.get(r10);
    if (i10) return OS(i10, e10);
    let a10;
    return i10 = vS.test(n10) ? AS(n10.substr(4), n10) : (a10 = yS.exec(kS(n10, t10))) ? jS(a10[1], n10) : (t10.trimForExclusions ? xS : bS).test(n10) ? MS(n10, t10) : (a10 = SS.exec(kS(n10, t10))) ? NS(a10[1].substr(1), n10, true) : (a10 = CS.exec(kS(n10, t10))) ? NS(a10[1], n10, false) : PS(n10), wS.set(r10, i10), OS(i10, e10);
  }
  function OS(e10, t10) {
    if (typeof t10 == `string`) return e10;
    let n10 = function(n11, r10) {
      return sS(n11, t10.base, !ht) ? e10(vs(n11.substr(t10.base.length), da), r10) : null;
    };
    return n10.allBasenames = e10.allBasenames, n10.allPaths = e10.allPaths, n10.basenames = e10.basenames, n10.patterns = e10.patterns, n10;
  }
  function kS(e10, t10) {
    return t10.trimForExclusions && e10.endsWith(`/**`) ? e10.substr(0, e10.length - 2) : e10;
  }
  function AS(e10, t10) {
    return function(n10, r10) {
      return typeof n10 == `string` && n10.endsWith(e10) ? t10 : null;
    };
  }
  function jS(e10, t10) {
    let n10 = `/${e10}`, r10 = `\\${e10}`, i10 = function(i11, a11) {
      return typeof i11 == `string` ? a11 ? a11 === e10 ? t10 : null : i11 === e10 || i11.endsWith(n10) || i11.endsWith(r10) ? t10 : null : null;
    }, a10 = [
      e10
    ];
    return i10.basenames = a10, i10.patterns = [
      t10
    ], i10.allBasenames = a10, i10;
  }
  function MS(e10, t10) {
    let n10 = BS(e10.slice(1, -1).split(`,`).map((e11) => DS(e11, t10)).filter((e11) => e11 !== ES), e10), r10 = n10.length;
    if (!r10) return ES;
    if (r10 === 1) return n10[0];
    let i10 = function(t11, r11) {
      for (let i11 = 0, a11 = n10.length; i11 < a11; i11++) if (n10[i11](t11, r11)) return e10;
      return null;
    }, a10 = n10.find((e11) => !!e11.allBasenames);
    a10 && (i10.allBasenames = a10.allBasenames);
    let o10 = n10.reduce((e11, t11) => t11.allPaths ? e11.concat(t11.allPaths) : e11, []);
    return o10.length && (i10.allPaths = o10), i10;
  }
  function NS(e10, t10, n10) {
    let r10 = da === ra.sep, i10 = r10 ? e10 : e10.replace(mS, da), a10 = da + i10, o10 = ra.sep + e10, s10;
    return s10 = n10 ? function(n11, s11) {
      return typeof n11 == `string` && (n11 === i10 || n11.endsWith(a10) || !r10 && (n11 === e10 || n11.endsWith(o10))) ? t10 : null;
    } : function(n11, a11) {
      return typeof n11 == `string` && (n11 === i10 || !r10 && n11 === e10) ? t10 : null;
    }, s10.allPaths = [
      (n10 ? `*/` : `./`) + e10
    ], s10;
  }
  function PS(e10) {
    try {
      let t10 = RegExp(`^${_S(e10)}$`);
      return function(n10) {
        return t10.lastIndex = 0, typeof n10 == `string` && t10.test(n10) ? e10 : null;
      };
    } catch {
      return ES;
    }
  }
  function FS(e10, t10, n10) {
    return !e10 || typeof t10 != `string` ? false : IS(e10)(t10, void 0, n10);
  }
  function IS(e10, t10 = {}) {
    if (!e10) return TS;
    if (typeof e10 == `string` || LS(e10)) {
      let n10 = DS(e10, t10);
      if (n10 === ES) return TS;
      let r10 = function(e11, t11) {
        return !!n10(e11, t11);
      };
      return n10.allBasenames && (r10.allBasenames = n10.allBasenames), n10.allPaths && (r10.allPaths = n10.allPaths), r10;
    }
    return RS(e10, t10);
  }
  function LS(e10) {
    let t10 = e10;
    return t10 ? typeof t10.base == `string` && typeof t10.pattern == `string` : false;
  }
  function RS(e10, t10) {
    let n10 = BS(Object.getOwnPropertyNames(e10).map((n11) => zS(n11, e10[n11], t10)).filter((e11) => e11 !== ES)), r10 = n10.length;
    if (!r10) return ES;
    if (!n10.some((e11) => !!e11.requiresSiblings)) {
      if (r10 === 1) return n10[0];
      let e11 = function(e12, t12) {
        let r11;
        for (let i12 = 0, a11 = n10.length; i12 < a11; i12++) {
          let a12 = n10[i12](e12, t12);
          if (typeof a12 == `string`) return a12;
          Yc(a12) && (r11 || (r11 = []), r11.push(a12));
        }
        return r11 ? (async () => {
          for (let e13 of r11) {
            let t13 = await e13;
            if (typeof t13 == `string`) return t13;
          }
          return null;
        })() : null;
      }, t11 = n10.find((e12) => !!e12.allBasenames);
      t11 && (e11.allBasenames = t11.allBasenames);
      let i11 = n10.reduce((e12, t12) => t12.allPaths ? e12.concat(t12.allPaths) : e12, []);
      return i11.length && (e11.allPaths = i11), e11;
    }
    let i10 = function(e11, t11, r11) {
      let i11, a11;
      for (let o11 = 0, s10 = n10.length; o11 < s10; o11++) {
        let s11 = n10[o11];
        s11.requiresSiblings && r11 && (t11 || (t11 = la(e11)), i11 || (i11 = t11.substr(0, t11.length - ua(e11).length)));
        let c10 = s11(e11, t11, i11, r11);
        if (typeof c10 == `string`) return c10;
        Yc(c10) && (a11 || (a11 = []), a11.push(c10));
      }
      return a11 ? (async () => {
        for (let e12 of a11) {
          let t12 = await e12;
          if (typeof t12 == `string`) return t12;
        }
        return null;
      })() : null;
    }, a10 = n10.find((e11) => !!e11.allBasenames);
    a10 && (i10.allBasenames = a10.allBasenames);
    let o10 = n10.reduce((e11, t11) => t11.allPaths ? e11.concat(t11.allPaths) : e11, []);
    return o10.length && (i10.allPaths = o10), i10;
  }
  function zS(e10, t10, n10) {
    if (t10 === false) return ES;
    let r10 = DS(e10, n10);
    if (r10 === ES) return ES;
    if (typeof t10 == `boolean`) return r10;
    if (t10) {
      let n11 = t10.when;
      if (typeof n11 == `string`) {
        let t11 = (t12, i10, a10, o10) => {
          if (!o10 || !r10(t12, i10)) return null;
          let s10 = n11.replace(`$(basename)`, () => a10), c10 = o10(s10);
          return Yc(c10) ? c10.then((t13) => t13 ? e10 : null) : c10 ? e10 : null;
        };
        return t11.requiresSiblings = true, t11;
      }
    }
    return r10;
  }
  function BS(e10, t10) {
    let n10 = e10.filter((e11) => !!e11.basenames);
    if (n10.length < 2) return e10;
    let r10 = n10.reduce((e11, t11) => {
      let n11 = t11.basenames;
      return n11 ? e11.concat(n11) : e11;
    }, []), i10;
    if (t10) {
      i10 = [];
      for (let e11 = 0, n11 = r10.length; e11 < n11; e11++) i10.push(t10);
    } else i10 = n10.reduce((e11, t11) => {
      let n11 = t11.patterns;
      return n11 ? e11.concat(n11) : e11;
    }, []);
    let a10 = function(e11, t11) {
      if (typeof e11 != `string`) return null;
      if (!t11) {
        let n12;
        for (n12 = e11.length; n12 > 0; n12--) {
          let t12 = e11.charCodeAt(n12 - 1);
          if (t12 === 47 || t12 === 92) break;
        }
        t11 = e11.substr(n12);
      }
      let n11 = r10.indexOf(t11);
      return n11 === -1 ? null : i10[n11];
    };
    a10.basenames = r10, a10.patterns = i10, a10.allBasenames = r10;
    let o10 = e10.filter((e11) => !e11.basenames);
    return o10.push(a10), o10;
  }
  VS = function(e10, t10, n10, r10, i10, a10) {
    if (Array.isArray(e10)) {
      let o10 = 0;
      for (let s10 of e10) {
        let e11 = VS(s10, t10, n10, r10, i10, a10);
        if (e11 === 10) return e11;
        e11 > o10 && (o10 = e11);
      }
      return o10;
    } else if (typeof e10 == `string`) return r10 ? e10 === `*` ? 5 : e10 === n10 ? 10 : 0 : 0;
    else if (e10) {
      let { language: o10, pattern: s10, scheme: c10, hasAccessToAllModels: l10, notebookType: u10 } = e10;
      if (!r10 && !l10) return 0;
      u10 && i10 && (t10 = i10);
      let d10 = 0;
      if (c10) if (c10 === t10.scheme) d10 = 10;
      else if (c10 === `*`) d10 = 5;
      else return 0;
      if (o10) if (o10 === n10) d10 = 10;
      else if (o10 === `*`) d10 = Math.max(d10, 5);
      else return 0;
      if (u10) if (u10 === a10) d10 = 10;
      else if (u10 === `*` && a10 !== void 0) d10 = Math.max(d10, 5);
      else return 0;
      if (s10) {
        let e11;
        if (e11 = typeof s10 == `string` ? s10 : {
          ...s10,
          base: ia(s10.base)
        }, e11 === t10.fsPath || FS(e11, t10.fsPath)) d10 = 10;
        else return 0;
      }
      return d10;
    } else return 0;
  };
  function HS(e10) {
    return typeof e10 == `string` ? false : Array.isArray(e10) ? e10.every(HS) : !!e10.exclusive;
  }
  var US = class {
    constructor(e10, t10, n10, r10, i10) {
      this.uri = e10, this.languageId = t10, this.notebookUri = n10, this.notebookType = r10, this.recursive = i10;
    }
    equals(e10) {
      var _a3, _b3;
      return this.notebookType === e10.notebookType && this.languageId === e10.languageId && this.uri.toString() === e10.uri.toString() && ((_a3 = this.notebookUri) == null ? void 0 : _a3.toString()) === ((_b3 = e10.notebookUri) == null ? void 0 : _b3.toString()) && this.recursive === e10.recursive;
    }
  }, WS = class e10 {
    constructor(e11) {
      this._notebookInfoResolver = e11, this._clock = 0, this._entries = [], this._onDidChange = new N(), this.onDidChange = this._onDidChange.event;
    }
    register(e11, t10) {
      let n10 = {
        selector: e11,
        provider: t10,
        _score: -1,
        _time: this._clock++
      };
      return this._entries.push(n10), this._lastCandidate = void 0, this._onDidChange.fire(this._entries.length), k(() => {
        if (n10) {
          let e12 = this._entries.indexOf(n10);
          e12 >= 0 && (this._entries.splice(e12, 1), this._lastCandidate = void 0, this._onDidChange.fire(this._entries.length), n10 = void 0);
        }
      });
    }
    has(e11) {
      return this.all(e11).length > 0;
    }
    all(e11) {
      if (!e11) return [];
      this._updateScores(e11, false);
      let t10 = [];
      for (let e12 of this._entries) e12._score > 0 && t10.push(e12.provider);
      return t10;
    }
    ordered(e11, t10 = false) {
      let n10 = [];
      return this._orderedForEach(e11, t10, (e12) => n10.push(e12.provider)), n10;
    }
    orderedGroups(e11) {
      let t10 = [], n10, r10;
      return this._orderedForEach(e11, false, (e12) => {
        n10 && r10 === e12._score ? n10.push(e12.provider) : (r10 = e12._score, n10 = [
          e12.provider
        ], t10.push(n10));
      }), t10;
    }
    _orderedForEach(e11, t10, n10) {
      this._updateScores(e11, t10);
      for (let e12 of this._entries) e12._score > 0 && n10(e12);
    }
    _updateScores(t10, n10) {
      var _a3, _b3;
      let r10 = (_a3 = this._notebookInfoResolver) == null ? void 0 : _a3.call(this, t10.uri), i10 = r10 ? new US(t10.uri, t10.getLanguageId(), r10.uri, r10.type, n10) : new US(t10.uri, t10.getLanguageId(), void 0, void 0, n10);
      if (!((_b3 = this._lastCandidate) == null ? void 0 : _b3.equals(i10))) {
        this._lastCandidate = i10;
        for (let e11 of this._entries) if (e11._score = VS(e11.selector, i10.uri, i10.languageId, ov(t10), i10.notebookUri, i10.notebookType), HS(e11.selector) && e11._score > 0) if (n10) e11._score = 0;
        else {
          for (let e12 of this._entries) e12._score = 0;
          e11._score = 1e3;
          break;
        }
        this._entries.sort(e10._compareByScoreAndTime);
      }
    }
    static _compareByScoreAndTime(e11, t10) {
      return e11._score < t10._score ? 1 : e11._score > t10._score ? -1 : GS(e11.selector) && !GS(t10.selector) ? 1 : !GS(e11.selector) && GS(t10.selector) ? -1 : e11._time < t10._time ? 1 : e11._time > t10._time ? -1 : 0;
    }
  };
  function GS(e10) {
    return typeof e10 == `string` ? false : Array.isArray(e10) ? e10.some(GS) : !!e10.isBuiltin;
  }
  var KS = class {
    constructor() {
      this.referenceProvider = new WS(this._score.bind(this)), this.renameProvider = new WS(this._score.bind(this)), this.newSymbolNamesProvider = new WS(this._score.bind(this)), this.codeActionProvider = new WS(this._score.bind(this)), this.definitionProvider = new WS(this._score.bind(this)), this.typeDefinitionProvider = new WS(this._score.bind(this)), this.declarationProvider = new WS(this._score.bind(this)), this.implementationProvider = new WS(this._score.bind(this)), this.documentSymbolProvider = new WS(this._score.bind(this)), this.inlayHintsProvider = new WS(this._score.bind(this)), this.colorProvider = new WS(this._score.bind(this)), this.codeLensProvider = new WS(this._score.bind(this)), this.documentFormattingEditProvider = new WS(this._score.bind(this)), this.documentRangeFormattingEditProvider = new WS(this._score.bind(this)), this.onTypeFormattingEditProvider = new WS(this._score.bind(this)), this.signatureHelpProvider = new WS(this._score.bind(this)), this.hoverProvider = new WS(this._score.bind(this)), this.documentHighlightProvider = new WS(this._score.bind(this)), this.multiDocumentHighlightProvider = new WS(this._score.bind(this)), this.selectionRangeProvider = new WS(this._score.bind(this)), this.foldingRangeProvider = new WS(this._score.bind(this)), this.linkProvider = new WS(this._score.bind(this)), this.inlineCompletionsProvider = new WS(this._score.bind(this)), this.inlineEditProvider = new WS(this._score.bind(this)), this.completionProvider = new WS(this._score.bind(this)), this.linkedEditingRangeProvider = new WS(this._score.bind(this)), this.documentRangeSemanticTokensProvider = new WS(this._score.bind(this)), this.documentSemanticTokensProvider = new WS(this._score.bind(this)), this.documentDropEditProvider = new WS(this._score.bind(this)), this.documentPasteEditProvider = new WS(this._score.bind(this));
    }
    _score(e10) {
      var _a3;
      return (_a3 = this._notebookTypeResolver) == null ? void 0 : _a3.call(this, e10);
    }
  };
  bg(Ob, KS, 1);
  function qS(e10) {
    return `--vscode-${e10.replace(/\./g, `-`)}`;
  }
  q = function(e10) {
    return `var(${qS(e10)})`;
  };
  function JS(e10, t10) {
    return `var(${qS(e10)}, ${t10})`;
  }
  function YS(e10) {
    return typeof e10 == `object` && !!e10 && `light` in e10 && `dark` in e10;
  }
  const XS = {
    ColorContribution: `base.contributions.colors`
  }, ZS = `default`;
  var QS = class {
    constructor() {
      this._onDidChangeSchema = new N(), this.onDidChangeSchema = this._onDidChangeSchema.event, this.colorSchema = {
        type: `object`,
        properties: {}
      }, this.colorReferenceSchema = {
        type: `string`,
        enum: [],
        enumDescriptions: []
      }, this.colorsById = {};
    }
    registerColor(e10, t10, n10, r10 = false, i10) {
      let a10 = {
        id: e10,
        description: n10,
        defaults: t10,
        needsTransparency: r10,
        deprecationMessage: i10
      };
      this.colorsById[e10] = a10;
      let o10 = {
        type: `string`,
        format: `color-hex`,
        defaultSnippets: [
          {
            body: "${1:#ff0000}"
          }
        ]
      };
      return i10 && (o10.deprecationMessage = i10), r10 && (o10.pattern = `^#(?:(?<rgba>[0-9a-fA-f]{3}[0-9a-eA-E])|(?:[0-9a-fA-F]{6}(?:(?![fF]{2})(?:[0-9a-fA-F]{2}))))?$`, o10.patternErrorMessage = T(`transparecyRequired`, `This color must be transparent or it will obscure content`)), this.colorSchema.properties[e10] = {
        description: n10,
        oneOf: [
          o10,
          {
            type: `string`,
            const: ZS,
            description: T(`useDefault`, `Use the default color.`)
          }
        ]
      }, this.colorReferenceSchema.enum.push(e10), this.colorReferenceSchema.enumDescriptions.push(n10), this._onDidChangeSchema.fire(), e10;
    }
    getColors() {
      return Object.keys(this.colorsById).map((e10) => this.colorsById[e10]);
    }
    resolveDefaultColor(e10, t10) {
      let n10 = this.colorsById[e10];
      if (n10 == null ? void 0 : n10.defaults) {
        let e11 = YS(n10.defaults) ? n10.defaults[t10.type] : n10.defaults;
        return sC(e11, t10);
      }
    }
    getColorSchema() {
      return this.colorSchema;
    }
    toString() {
      let e10 = (e11, t10) => {
        let n10 = e11.indexOf(`.`) === -1 ? 0 : 1, r10 = t10.indexOf(`.`) === -1 ? 0 : 1;
        return n10 === r10 ? e11.localeCompare(t10) : n10 - r10;
      };
      return Object.keys(this.colorsById).sort(e10).map((e11) => `- \`${e11}\`: ${this.colorsById[e11].description}`).join(`
`);
    }
  };
  const $S = new QS();
  am.add(XS.ColorContribution, $S);
  J = function(e10, t10, n10, r10, i10) {
    return $S.registerColor(e10, t10, n10, r10, i10);
  };
  function eC(e10, t10) {
    var _a3, _b3, _c3, _d3;
    switch (e10.op) {
      case 0:
        return (_a3 = sC(e10.value, t10)) == null ? void 0 : _a3.darken(e10.factor);
      case 1:
        return (_b3 = sC(e10.value, t10)) == null ? void 0 : _b3.lighten(e10.factor);
      case 2:
        return (_c3 = sC(e10.value, t10)) == null ? void 0 : _c3.transparent(e10.factor);
      case 3: {
        let n10 = sC(e10.background, t10);
        return n10 ? (_d3 = sC(e10.value, t10)) == null ? void 0 : _d3.makeOpaque(n10) : sC(e10.value, t10);
      }
      case 4:
        for (let n10 of e10.values) {
          let e11 = sC(n10, t10);
          if (e11) return e11;
        }
        return;
      case 6:
        return sC(t10.defines(e10.if) ? e10.then : e10.else, t10);
      case 5: {
        let n10 = sC(e10.value, t10);
        if (!n10) return;
        let r10 = sC(e10.background, t10);
        return r10 ? n10.isDarkerThan(r10) ? K.getLighterColor(n10, r10, e10.factor).transparent(e10.transparency) : K.getDarkerColor(n10, r10, e10.factor).transparent(e10.transparency) : n10.transparent(e10.factor * e10.transparency);
      }
      default:
        throw em(e10);
    }
  }
  function tC(e10, t10) {
    return {
      op: 0,
      value: e10,
      factor: t10
    };
  }
  function nC(e10, t10) {
    return {
      op: 1,
      value: e10,
      factor: t10
    };
  }
  rC = function(e10, t10) {
    return {
      op: 2,
      value: e10,
      factor: t10
    };
  };
  iC = function(...e10) {
    return {
      op: 4,
      values: e10
    };
  };
  function aC(e10, t10, n10) {
    return {
      op: 6,
      if: e10,
      then: t10,
      else: n10
    };
  }
  function oC(e10, t10, n10, r10) {
    return {
      op: 5,
      value: e10,
      background: t10,
      factor: n10,
      transparency: r10
    };
  }
  function sC(e10, t10) {
    if (e10 !== null) {
      if (typeof e10 == `string`) return e10[0] === `#` ? K.fromHex(e10) : t10.getColor(e10);
      if (e10 instanceof K) return e10;
      if (typeof e10 == `object`) return eC(e10, t10);
    }
  }
  const cC = `vscode://schemas/workbench-colors`, lC = am.as(Cg.JSONContribution);
  lC.registerSchema(cC, $S.getColorSchema());
  const uC = new cl(() => lC.notifySchemaChanged(cC), 200);
  $S.onDidChangeSchema(() => {
    uC.isScheduled() || uC.schedule();
  });
  let fC, pC, mC, gC, mee, yC, hee, gee, _ee, vee, yee, bee, xee, See, bC, xC, SC, CC, wC, TC, EC, Cee, wee, Tee, Eee, AC, Dee, Oee, PC, kee, zC, Aee, HC, UC, GC, jee, Mee, Nee, Pee, Fee, $C, ow, Iee, sw, cw, lw, Lee, Ree, uw, dw, fw, pw, mw, hw, gw, _w, vw, yw, zee, Bee, Vee, Hee, Uee, Wee, Gee, Sw, Kee, qee, Cw, ww, Tw, Ew, Jee, Dw, Ow, kw, Aw, jw, Mw, Nw, Yee, Pw, Xee, Fw, Zee, Iw, Qee, $ee, ete, zw, Bw, Vw, Ww, Gw, Kw, qw, Jw, Yw, tte, nte, rte, ite, ate, ote, ste, cte, lte, ute, dte, eT, fte, rT, iT, aT, oT, sT, cT, lT, uT, dT, fT, pT, mT, hT, gT, _T, vT, yT, bT, xT, ST, CT, wT, TT, ET, DT, OT, kT, AT, jT, pte, MT, NT, mte, PT, FT, IT, LT, RT, zT, BT, VT, HT, UT, WT, GT, KT, qT, JT, YT, XT, ZT, QT, $T, hte, gte, _te, nE, rE, iE, aE, vte, yte, bte, oE, sE, cE, lE, xte, Ste, Cte, wte, uE, dE, fE, pE, mE, hE, gE, _E, vE, yE, bE, xE, SE, Tte, Ete, Dte;
  dC = J(`foreground`, {
    dark: `#CCCCCC`,
    light: `#616161`,
    hcDark: `#FFFFFF`,
    hcLight: `#292929`
  }, T(`foreground`, `Overall foreground color. This color is only used if not overridden by a component.`));
  fC = J(`disabledForeground`, {
    dark: `#CCCCCC80`,
    light: `#61616180`,
    hcDark: `#A5A5A5`,
    hcLight: `#7F7F7F`
  }, T(`disabledForeground`, `Overall foreground for disabled elements. This color is only used if not overridden by a component.`));
  pC = J(`errorForeground`, {
    dark: `#F48771`,
    light: `#A1260D`,
    hcDark: `#F48771`,
    hcLight: `#B5200D`
  }, T(`errorForeground`, `Overall foreground color for error messages. This color is only used if not overridden by a component.`));
  mC = J(`descriptionForeground`, {
    light: `#717171`,
    dark: rC(dC, 0.7),
    hcDark: rC(dC, 0.7),
    hcLight: rC(dC, 0.7)
  }, T(`descriptionForeground`, `Foreground color for description text providing additional information, for example for a label.`));
  hC = J(`icon.foreground`, {
    dark: `#C5C5C5`,
    light: `#424242`,
    hcDark: `#FFFFFF`,
    hcLight: `#292929`
  }, T(`iconForeground`, `The default color for icons in the workbench.`));
  gC = J(`focusBorder`, {
    dark: `#007FD4`,
    light: `#0090F1`,
    hcDark: `#F38518`,
    hcLight: `#006BBD`
  }, T(`focusBorder`, `Overall border color for focused elements. This color is only used if not overridden by a component.`));
  _C = J(`contrastBorder`, {
    light: null,
    dark: null,
    hcDark: `#6FC3DF`,
    hcLight: `#0F4A85`
  }, T(`contrastBorder`, `An extra border around elements to separate them from others for greater contrast.`));
  vC = J(`contrastActiveBorder`, {
    light: null,
    dark: null,
    hcDark: gC,
    hcLight: gC
  }, T(`activeContrastBorder`, `An extra border around active elements to separate them from others for greater contrast.`));
  mee = J(`selection.background`, null, T(`selectionBackground`, `The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.`));
  yC = J(`textLink.foreground`, {
    light: `#006AB1`,
    dark: `#3794FF`,
    hcDark: `#21A6FF`,
    hcLight: `#0F4A85`
  }, T(`textLinkForeground`, `Foreground color for links in text.`));
  hee = J(`textLink.activeForeground`, {
    light: `#006AB1`,
    dark: `#3794FF`,
    hcDark: `#21A6FF`,
    hcLight: `#0F4A85`
  }, T(`textLinkActiveForeground`, `Foreground color for links in text when clicked on and on mouse hover.`));
  gee = J(`textSeparator.foreground`, {
    light: `#0000002e`,
    dark: `#ffffff2e`,
    hcDark: K.black,
    hcLight: `#292929`
  }, T(`textSeparatorForeground`, `Color for text separators.`));
  _ee = J(`textPreformat.foreground`, {
    light: `#A31515`,
    dark: `#D7BA7D`,
    hcDark: `#000000`,
    hcLight: `#FFFFFF`
  }, T(`textPreformatForeground`, `Foreground color for preformatted text segments.`));
  vee = J(`textPreformat.background`, {
    light: `#0000001A`,
    dark: `#FFFFFF1A`,
    hcDark: `#FFFFFF`,
    hcLight: `#09345f`
  }, T(`textPreformatBackground`, `Background color for preformatted text segments.`));
  yee = J(`textBlockQuote.background`, {
    light: `#f2f2f2`,
    dark: `#222222`,
    hcDark: null,
    hcLight: `#F2F2F2`
  }, T(`textBlockQuoteBackground`, `Background color for block quotes in text.`));
  bee = J(`textBlockQuote.border`, {
    light: `#007acc80`,
    dark: `#007acc80`,
    hcDark: K.white,
    hcLight: `#292929`
  }, T(`textBlockQuoteBorder`, `Border color for block quotes in text.`));
  xee = J(`textCodeBlock.background`, {
    light: `#dcdcdc66`,
    dark: `#0a0a0a66`,
    hcDark: K.black,
    hcLight: `#F2F2F2`
  }, T(`textCodeBlockBackground`, `Background color for code blocks in text.`));
  See = J(`sash.hoverBorder`, gC, T(`sashActiveBorder`, `Border color of active sashes.`));
  bC = J(`badge.background`, {
    dark: `#4D4D4D`,
    light: `#C4C4C4`,
    hcDark: K.black,
    hcLight: `#0F4A85`
  }, T(`badgeBackground`, `Badge background color. Badges are small information labels, e.g. for search results count.`));
  xC = J(`badge.foreground`, {
    dark: K.white,
    light: `#333`,
    hcDark: K.white,
    hcLight: K.white
  }, T(`badgeForeground`, `Badge foreground color. Badges are small information labels, e.g. for search results count.`));
  SC = J(`scrollbar.shadow`, {
    dark: `#000000`,
    light: `#DDDDDD`,
    hcDark: null,
    hcLight: null
  }, T(`scrollbarShadow`, `Scrollbar shadow to indicate that the view is scrolled.`));
  CC = J(`scrollbarSlider.background`, {
    dark: K.fromHex(`#797979`).transparent(0.4),
    light: K.fromHex(`#646464`).transparent(0.4),
    hcDark: rC(_C, 0.6),
    hcLight: rC(_C, 0.4)
  }, T(`scrollbarSliderBackground`, `Scrollbar slider background color.`));
  wC = J(`scrollbarSlider.hoverBackground`, {
    dark: K.fromHex(`#646464`).transparent(0.7),
    light: K.fromHex(`#646464`).transparent(0.7),
    hcDark: rC(_C, 0.8),
    hcLight: rC(_C, 0.8)
  }, T(`scrollbarSliderHoverBackground`, `Scrollbar slider background color when hovering.`));
  TC = J(`scrollbarSlider.activeBackground`, {
    dark: K.fromHex(`#BFBFBF`).transparent(0.4),
    light: K.fromHex(`#000000`).transparent(0.6),
    hcDark: _C,
    hcLight: _C
  }, T(`scrollbarSliderActiveBackground`, `Scrollbar slider background color when clicked on.`));
  EC = J(`progressBar.background`, {
    dark: K.fromHex(`#0E70C0`),
    light: K.fromHex(`#0E70C0`),
    hcDark: _C,
    hcLight: _C
  }, T(`progressBarBackground`, `Background color of the progress bar that can show for long running operations.`));
  DC = J(`editor.background`, {
    light: `#ffffff`,
    dark: `#1E1E1E`,
    hcDark: K.black,
    hcLight: K.white
  }, T(`editorBackground`, `Editor background color.`));
  OC = J(`editor.foreground`, {
    light: `#333333`,
    dark: `#BBBBBB`,
    hcDark: K.white,
    hcLight: dC
  }, T(`editorForeground`, `Editor default foreground color.`));
  Cee = J(`editorStickyScroll.background`, DC, T(`editorStickyScrollBackground`, `Background color of sticky scroll in the editor`));
  wee = J(`editorStickyScrollHover.background`, {
    dark: `#2A2D2E`,
    light: `#F0F0F0`,
    hcDark: null,
    hcLight: K.fromHex(`#0F4A85`).transparent(0.1)
  }, T(`editorStickyScrollHoverBackground`, `Background color of sticky scroll on hover in the editor`));
  Tee = J(`editorStickyScroll.border`, {
    dark: null,
    light: null,
    hcDark: _C,
    hcLight: _C
  }, T(`editorStickyScrollBorder`, `Border color of sticky scroll in the editor`));
  Eee = J(`editorStickyScroll.shadow`, SC, T(`editorStickyScrollShadow`, ` Shadow color of sticky scroll in the editor`));
  kC = J(`editorWidget.background`, {
    dark: `#252526`,
    light: `#F3F3F3`,
    hcDark: `#0C141F`,
    hcLight: K.white
  }, T(`editorWidgetBackground`, `Background color of editor widgets, such as find/replace.`));
  AC = J(`editorWidget.foreground`, dC, T(`editorWidgetForeground`, `Foreground color of editor widgets, such as find/replace.`));
  jC = J(`editorWidget.border`, {
    dark: `#454545`,
    light: `#C8C8C8`,
    hcDark: _C,
    hcLight: _C
  }, T(`editorWidgetBorder`, `Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.`));
  Dee = J(`editorWidget.resizeBorder`, null, T(`editorWidgetResizeBorder`, `Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.`));
  Oee = J(`editorError.background`, null, T(`editorError.background`, `Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.`), true);
  MC = J(`editorError.foreground`, {
    dark: `#F14C4C`,
    light: `#E51400`,
    hcDark: `#F48771`,
    hcLight: `#B5200D`
  }, T(`editorError.foreground`, `Foreground color of error squigglies in the editor.`));
  NC = J(`editorError.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#E47777`).transparent(0.8),
    hcLight: `#B5200D`
  }, T(`errorBorder`, `If set, color of double underlines for errors in the editor.`));
  PC = J(`editorWarning.background`, null, T(`editorWarning.background`, `Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.`), true);
  FC = J(`editorWarning.foreground`, {
    dark: `#CCA700`,
    light: `#BF8803`,
    hcDark: `#FFD370`,
    hcLight: `#895503`
  }, T(`editorWarning.foreground`, `Foreground color of warning squigglies in the editor.`));
  IC = J(`editorWarning.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#FFCC00`).transparent(0.8),
    hcLight: K.fromHex(`#FFCC00`).transparent(0.8)
  }, T(`warningBorder`, `If set, color of double underlines for warnings in the editor.`));
  kee = J(`editorInfo.background`, null, T(`editorInfo.background`, `Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.`), true);
  LC = J(`editorInfo.foreground`, {
    dark: `#3794FF`,
    light: `#1a85ff`,
    hcDark: `#3794FF`,
    hcLight: `#1a85ff`
  }, T(`editorInfo.foreground`, `Foreground color of info squigglies in the editor.`));
  RC = J(`editorInfo.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#3794FF`).transparent(0.8),
    hcLight: `#292929`
  }, T(`infoBorder`, `If set, color of double underlines for infos in the editor.`));
  zC = J(`editorHint.foreground`, {
    dark: K.fromHex(`#eeeeee`).transparent(0.7),
    light: `#6c6c6c`,
    hcDark: null,
    hcLight: null
  }, T(`editorHint.foreground`, `Foreground color of hint squigglies in the editor.`));
  Aee = J(`editorHint.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#eeeeee`).transparent(0.8),
    hcLight: `#292929`
  }, T(`hintBorder`, `If set, color of double underlines for hints in the editor.`));
  BC = J(`editorLink.activeForeground`, {
    dark: `#4E94CE`,
    light: K.blue,
    hcDark: K.cyan,
    hcLight: `#292929`
  }, T(`activeLinkForeground`, `Color of active links.`));
  VC = J(`editor.selectionBackground`, {
    light: `#ADD6FF`,
    dark: `#264F78`,
    hcDark: `#f3f518`,
    hcLight: `#0F4A85`
  }, T(`editorSelectionBackground`, `Color of the editor selection.`));
  HC = J(`editor.selectionForeground`, {
    light: null,
    dark: null,
    hcDark: `#000000`,
    hcLight: K.white
  }, T(`editorSelectionForeground`, `Color of the selected text for high contrast.`));
  UC = J(`editor.inactiveSelectionBackground`, {
    light: rC(VC, 0.5),
    dark: rC(VC, 0.5),
    hcDark: rC(VC, 0.7),
    hcLight: rC(VC, 0.5)
  }, T(`editorInactiveSelection`, `Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.`), true);
  WC = J(`editor.selectionHighlightBackground`, {
    light: oC(VC, DC, 0.3, 0.6),
    dark: oC(VC, DC, 0.3, 0.6),
    hcDark: null,
    hcLight: null
  }, T(`editorSelectionHighlight`, `Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.`), true);
  GC = J(`editor.selectionHighlightBorder`, {
    light: null,
    dark: null,
    hcDark: vC,
    hcLight: vC
  }, T(`editorSelectionHighlightBorder`, `Border color for regions with the same content as the selection.`));
  jee = J(`editor.findMatchBackground`, {
    light: `#A8AC94`,
    dark: `#515C6A`,
    hcDark: null,
    hcLight: null
  }, T(`editorFindMatch`, `Color of the current search match.`));
  KC = J(`editor.findMatchForeground`, null, T(`editorFindMatchForeground`, `Text color of the current search match.`));
  qC = J(`editor.findMatchHighlightBackground`, {
    light: `#EA5C0055`,
    dark: `#EA5C0055`,
    hcDark: null,
    hcLight: null
  }, T(`findMatchHighlight`, `Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.`), true);
  JC = J(`editor.findMatchHighlightForeground`, null, T(`findMatchHighlightForeground`, `Foreground color of the other search matches.`), true);
  Mee = J(`editor.findRangeHighlightBackground`, {
    dark: `#3a3d4166`,
    light: `#b4b4b44d`,
    hcDark: null,
    hcLight: null
  }, T(`findRangeHighlight`, `Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.`), true);
  Nee = J(`editor.findMatchBorder`, {
    light: null,
    dark: null,
    hcDark: vC,
    hcLight: vC
  }, T(`editorFindMatchBorder`, `Border color of the current search match.`));
  YC = J(`editor.findMatchHighlightBorder`, {
    light: null,
    dark: null,
    hcDark: vC,
    hcLight: vC
  }, T(`findMatchHighlightBorder`, `Border color of the other search matches.`));
  XC = J(`editor.findRangeHighlightBorder`, {
    dark: null,
    light: null,
    hcDark: rC(vC, 0.4),
    hcLight: rC(vC, 0.4)
  }, T(`findRangeHighlightBorder`, `Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.`), true);
  Pee = J(`editor.hoverHighlightBackground`, {
    light: `#ADD6FF26`,
    dark: `#264f7840`,
    hcDark: `#ADD6FF26`,
    hcLight: null
  }, T(`hoverHighlight`, `Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.`), true);
  ZC = J(`editorHoverWidget.background`, kC, T(`hoverBackground`, `Background color of the editor hover.`));
  Fee = J(`editorHoverWidget.foreground`, AC, T(`hoverForeground`, `Foreground color of the editor hover.`));
  QC = J(`editorHoverWidget.border`, jC, T(`hoverBorder`, `Border color of the editor hover.`));
  $C = J(`editorHoverWidget.statusBarBackground`, {
    dark: nC(ZC, 0.2),
    light: tC(ZC, 0.05),
    hcDark: kC,
    hcLight: kC
  }, T(`statusBarBackground`, `Background color of the editor hover status bar.`));
  ew = J(`editorInlayHint.foreground`, {
    dark: `#969696`,
    light: `#969696`,
    hcDark: K.white,
    hcLight: K.black
  }, T(`editorInlayHintForeground`, `Foreground color of inline hints`));
  tw = J(`editorInlayHint.background`, {
    dark: rC(bC, 0.1),
    light: rC(bC, 0.1),
    hcDark: rC(K.white, 0.1),
    hcLight: rC(bC, 0.1)
  }, T(`editorInlayHintBackground`, `Background color of inline hints`));
  nw = J(`editorInlayHint.typeForeground`, ew, T(`editorInlayHintForegroundTypes`, `Foreground color of inline hints for types`));
  rw = J(`editorInlayHint.typeBackground`, tw, T(`editorInlayHintBackgroundTypes`, `Background color of inline hints for types`));
  iw = J(`editorInlayHint.parameterForeground`, ew, T(`editorInlayHintForegroundParameter`, `Foreground color of inline hints for parameters`));
  aw = J(`editorInlayHint.parameterBackground`, tw, T(`editorInlayHintBackgroundParameter`, `Background color of inline hints for parameters`));
  ow = J(`editorLightBulb.foreground`, {
    dark: `#FFCC00`,
    light: `#DDB100`,
    hcDark: `#FFCC00`,
    hcLight: `#007ACC`
  }, T(`editorLightBulbForeground`, `The color used for the lightbulb actions icon.`));
  Iee = J(`editorLightBulbAutoFix.foreground`, {
    dark: `#75BEFF`,
    light: `#007ACC`,
    hcDark: `#75BEFF`,
    hcLight: `#007ACC`
  }, T(`editorLightBulbAutoFixForeground`, `The color used for the lightbulb auto fix actions icon.`));
  sw = J(`editorLightBulbAi.foreground`, ow, T(`editorLightBulbAiForeground`, `The color used for the lightbulb AI icon.`));
  cw = J(`editor.snippetTabstopHighlightBackground`, {
    dark: new K(new Xy(124, 124, 124, 0.3)),
    light: new K(new Xy(10, 50, 100, 0.2)),
    hcDark: new K(new Xy(124, 124, 124, 0.3)),
    hcLight: new K(new Xy(10, 50, 100, 0.2))
  }, T(`snippetTabstopHighlightBackground`, `Highlight background color of a snippet tabstop.`));
  lw = J(`editor.snippetTabstopHighlightBorder`, null, T(`snippetTabstopHighlightBorder`, `Highlight border color of a snippet tabstop.`));
  Lee = J(`editor.snippetFinalTabstopHighlightBackground`, null, T(`snippetFinalTabstopHighlightBackground`, `Highlight background color of the final tabstop of a snippet.`));
  Ree = J(`editor.snippetFinalTabstopHighlightBorder`, {
    dark: `#525252`,
    light: new K(new Xy(10, 50, 100, 0.5)),
    hcDark: `#525252`,
    hcLight: `#292929`
  }, T(`snippetFinalTabstopHighlightBorder`, `Highlight border color of the final tabstop of a snippet.`));
  uw = new K(new Xy(155, 185, 85, 0.2));
  dw = new K(new Xy(255, 0, 0, 0.2));
  fw = J(`diffEditor.insertedTextBackground`, {
    dark: `#9ccc2c33`,
    light: `#9ccc2c40`,
    hcDark: null,
    hcLight: null
  }, T(`diffEditorInserted`, `Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.`), true);
  pw = J(`diffEditor.removedTextBackground`, {
    dark: `#ff000033`,
    light: `#ff000033`,
    hcDark: null,
    hcLight: null
  }, T(`diffEditorRemoved`, `Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.`), true);
  mw = J(`diffEditor.insertedLineBackground`, {
    dark: uw,
    light: uw,
    hcDark: null,
    hcLight: null
  }, T(`diffEditorInsertedLines`, `Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.`), true);
  hw = J(`diffEditor.removedLineBackground`, {
    dark: dw,
    light: dw,
    hcDark: null,
    hcLight: null
  }, T(`diffEditorRemovedLines`, `Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.`), true);
  gw = J(`diffEditorGutter.insertedLineBackground`, null, T(`diffEditorInsertedLineGutter`, `Background color for the margin where lines got inserted.`));
  _w = J(`diffEditorGutter.removedLineBackground`, null, T(`diffEditorRemovedLineGutter`, `Background color for the margin where lines got removed.`));
  vw = J(`diffEditorOverview.insertedForeground`, null, T(`diffEditorOverviewInserted`, `Diff overview ruler foreground for inserted content.`));
  yw = J(`diffEditorOverview.removedForeground`, null, T(`diffEditorOverviewRemoved`, `Diff overview ruler foreground for removed content.`));
  zee = J(`diffEditor.insertedTextBorder`, {
    dark: null,
    light: null,
    hcDark: `#33ff2eff`,
    hcLight: `#374E06`
  }, T(`diffEditorInsertedOutline`, `Outline color for the text that got inserted.`));
  Bee = J(`diffEditor.removedTextBorder`, {
    dark: null,
    light: null,
    hcDark: `#FF008F`,
    hcLight: `#AD0707`
  }, T(`diffEditorRemovedOutline`, `Outline color for text that got removed.`));
  Vee = J(`diffEditor.border`, {
    dark: null,
    light: null,
    hcDark: _C,
    hcLight: _C
  }, T(`diffEditorBorder`, `Border color between the two text editors.`));
  Hee = J(`diffEditor.diagonalFill`, {
    dark: `#cccccc33`,
    light: `#22222233`,
    hcDark: null,
    hcLight: null
  }, T(`diffDiagonalFill`, `Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.`));
  Uee = J(`diffEditor.unchangedRegionBackground`, `sideBar.background`, T(`diffEditor.unchangedRegionBackground`, `The background color of unchanged blocks in the diff editor.`));
  Wee = J(`diffEditor.unchangedRegionForeground`, `foreground`, T(`diffEditor.unchangedRegionForeground`, `The foreground color of unchanged blocks in the diff editor.`));
  Gee = J(`diffEditor.unchangedCodeBackground`, {
    dark: `#74747429`,
    light: `#b8b8b829`,
    hcDark: null,
    hcLight: null
  }, T(`diffEditor.unchangedCodeBackground`, `The background color of unchanged code in the diff editor.`));
  bw = J(`widget.shadow`, {
    dark: rC(K.black, 0.36),
    light: rC(K.black, 0.16),
    hcDark: null,
    hcLight: null
  }, T(`widgetShadow`, `Shadow color of widgets such as find/replace inside the editor.`));
  xw = J(`widget.border`, {
    dark: null,
    light: null,
    hcDark: _C,
    hcLight: _C
  }, T(`widgetBorder`, `Border color of widgets such as find/replace inside the editor.`));
  Sw = J(`toolbar.hoverBackground`, {
    dark: `#5a5d5e50`,
    light: `#b8b8b850`,
    hcDark: null,
    hcLight: null
  }, T(`toolbarHoverBackground`, `Toolbar background when hovering over actions using the mouse`));
  Kee = J(`toolbar.hoverOutline`, {
    dark: null,
    light: null,
    hcDark: vC,
    hcLight: vC
  }, T(`toolbarHoverOutline`, `Toolbar outline when hovering over actions using the mouse`));
  qee = J(`toolbar.activeBackground`, {
    dark: nC(Sw, 0.1),
    light: tC(Sw, 0.1),
    hcDark: null,
    hcLight: null
  }, T(`toolbarActiveBackground`, `Toolbar background when holding the mouse over actions`));
  Cw = J(`breadcrumb.foreground`, rC(dC, 0.8), T(`breadcrumbsFocusForeground`, `Color of focused breadcrumb items.`));
  ww = J(`breadcrumb.background`, DC, T(`breadcrumbsBackground`, `Background color of breadcrumb items.`));
  Tw = J(`breadcrumb.focusForeground`, {
    light: tC(dC, 0.2),
    dark: nC(dC, 0.1),
    hcDark: nC(dC, 0.1),
    hcLight: nC(dC, 0.1)
  }, T(`breadcrumbsFocusForeground`, `Color of focused breadcrumb items.`));
  Ew = J(`breadcrumb.activeSelectionForeground`, {
    light: tC(dC, 0.2),
    dark: nC(dC, 0.1),
    hcDark: nC(dC, 0.1),
    hcLight: nC(dC, 0.1)
  }, T(`breadcrumbsSelectedForeground`, `Color of selected breadcrumb items.`));
  Jee = J(`breadcrumbPicker.background`, kC, T(`breadcrumbsSelectedBackground`, `Background color of breadcrumb item picker.`));
  Dw = 0.5;
  Ow = K.fromHex(`#40C8AE`).transparent(Dw);
  kw = K.fromHex(`#40A6FF`).transparent(Dw);
  Aw = K.fromHex(`#606060`).transparent(0.4);
  jw = 0.4;
  Mw = 1;
  Nw = J(`merge.currentHeaderBackground`, {
    dark: Ow,
    light: Ow,
    hcDark: null,
    hcLight: null
  }, T(`mergeCurrentHeaderBackground`, `Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Yee = J(`merge.currentContentBackground`, rC(Nw, jw), T(`mergeCurrentContentBackground`, `Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Pw = J(`merge.incomingHeaderBackground`, {
    dark: kw,
    light: kw,
    hcDark: null,
    hcLight: null
  }, T(`mergeIncomingHeaderBackground`, `Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Xee = J(`merge.incomingContentBackground`, rC(Pw, jw), T(`mergeIncomingContentBackground`, `Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Fw = J(`merge.commonHeaderBackground`, {
    dark: Aw,
    light: Aw,
    hcDark: null,
    hcLight: null
  }, T(`mergeCommonHeaderBackground`, `Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Zee = J(`merge.commonContentBackground`, rC(Fw, jw), T(`mergeCommonContentBackground`, `Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.`), true);
  Iw = J(`merge.border`, {
    dark: null,
    light: null,
    hcDark: `#C3DF6F`,
    hcLight: `#007ACC`
  }, T(`mergeBorder`, `Border color on headers and the splitter in inline merge-conflicts.`));
  Qee = J(`editorOverviewRuler.currentContentForeground`, {
    dark: rC(Nw, Mw),
    light: rC(Nw, Mw),
    hcDark: Iw,
    hcLight: Iw
  }, T(`overviewRulerCurrentContentForeground`, `Current overview ruler foreground for inline merge-conflicts.`));
  $ee = J(`editorOverviewRuler.incomingContentForeground`, {
    dark: rC(Pw, Mw),
    light: rC(Pw, Mw),
    hcDark: Iw,
    hcLight: Iw
  }, T(`overviewRulerIncomingContentForeground`, `Incoming overview ruler foreground for inline merge-conflicts.`));
  ete = J(`editorOverviewRuler.commonContentForeground`, {
    dark: rC(Fw, Mw),
    light: rC(Fw, Mw),
    hcDark: Iw,
    hcLight: Iw
  }, T(`overviewRulerCommonContentForeground`, `Common ancestor overview ruler foreground for inline merge-conflicts.`));
  Lw = J(`editorOverviewRuler.findMatchForeground`, {
    dark: `#d186167e`,
    light: `#d186167e`,
    hcDark: `#AB5A00`,
    hcLight: `#AB5A00`
  }, T(`overviewRulerFindMatchForeground`, `Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.`), true);
  Rw = J(`editorOverviewRuler.selectionHighlightForeground`, `#A0A0A0CC`, T(`overviewRulerSelectionHighlightForeground`, `Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.`), true);
  zw = J(`problemsErrorIcon.foreground`, MC, T(`problemsErrorIconForeground`, `The color used for the problems error icon.`));
  Bw = J(`problemsWarningIcon.foreground`, FC, T(`problemsWarningIconForeground`, `The color used for the problems warning icon.`));
  Vw = J(`problemsInfoIcon.foreground`, LC, T(`problemsInfoIconForeground`, `The color used for the problems info icon.`));
  Hw = J(`minimap.findMatchHighlight`, {
    light: `#d18616`,
    dark: `#d18616`,
    hcDark: `#AB5A00`,
    hcLight: `#0F4A85`
  }, T(`minimapFindMatchHighlight`, `Minimap marker color for find matches.`), true);
  Uw = J(`minimap.selectionOccurrenceHighlight`, {
    light: `#c9c9c9`,
    dark: `#676767`,
    hcDark: `#ffffff`,
    hcLight: `#0F4A85`
  }, T(`minimapSelectionOccurrenceHighlight`, `Minimap marker color for repeating editor selections.`), true);
  Ww = J(`minimap.selectionHighlight`, {
    light: `#ADD6FF`,
    dark: `#264F78`,
    hcDark: `#ffffff`,
    hcLight: `#0F4A85`
  }, T(`minimapSelectionHighlight`, `Minimap marker color for the editor selection.`), true);
  Gw = J(`minimap.infoHighlight`, {
    dark: LC,
    light: LC,
    hcDark: RC,
    hcLight: RC
  }, T(`minimapInfo`, `Minimap marker color for infos.`));
  Kw = J(`minimap.warningHighlight`, {
    dark: FC,
    light: FC,
    hcDark: IC,
    hcLight: IC
  }, T(`overviewRuleWarning`, `Minimap marker color for warnings.`));
  qw = J(`minimap.errorHighlight`, {
    dark: new K(new Xy(255, 18, 18, 0.7)),
    light: new K(new Xy(255, 18, 18, 0.7)),
    hcDark: new K(new Xy(255, 50, 50, 1)),
    hcLight: `#B5200D`
  }, T(`minimapError`, `Minimap marker color for errors.`));
  Jw = J(`minimap.background`, null, T(`minimapBackground`, `Minimap background color.`));
  Yw = J(`minimap.foregroundOpacity`, K.fromHex(`#000f`), T(`minimapForegroundOpacity`, `Opacity of foreground elements rendered in the minimap. For example, "#000000c0" will render the elements with 75% opacity.`));
  tte = J(`minimapSlider.background`, rC(CC, 0.5), T(`minimapSliderBackground`, `Minimap slider background color.`));
  nte = J(`minimapSlider.hoverBackground`, rC(wC, 0.5), T(`minimapSliderHoverBackground`, `Minimap slider background color when hovering.`));
  rte = J(`minimapSlider.activeBackground`, rC(TC, 0.5), T(`minimapSliderActiveBackground`, `Minimap slider background color when clicked on.`));
  ite = J(`charts.foreground`, dC, T(`chartsForeground`, `The foreground color used in charts.`));
  ate = J(`charts.lines`, rC(dC, 0.5), T(`chartsLines`, `The color used for horizontal lines in charts.`));
  ote = J(`charts.red`, MC, T(`chartsRed`, `The red color used in chart visualizations.`));
  ste = J(`charts.blue`, LC, T(`chartsBlue`, `The blue color used in chart visualizations.`));
  cte = J(`charts.yellow`, FC, T(`chartsYellow`, `The yellow color used in chart visualizations.`));
  lte = J(`charts.orange`, Hw, T(`chartsOrange`, `The orange color used in chart visualizations.`));
  ute = J(`charts.green`, {
    dark: `#89D185`,
    light: `#388A34`,
    hcDark: `#89D185`,
    hcLight: `#374e06`
  }, T(`chartsGreen`, `The green color used in chart visualizations.`));
  dte = J(`charts.purple`, {
    dark: `#B180D7`,
    light: `#652D90`,
    hcDark: `#B180D7`,
    hcLight: `#652D90`
  }, T(`chartsPurple`, `The purple color used in chart visualizations.`));
  Xw = J(`input.background`, {
    dark: `#3C3C3C`,
    light: K.white,
    hcDark: K.black,
    hcLight: K.white
  }, T(`inputBoxBackground`, `Input box background.`));
  Zw = J(`input.foreground`, dC, T(`inputBoxForeground`, `Input box foreground.`));
  Qw = J(`input.border`, {
    dark: null,
    light: null,
    hcDark: _C,
    hcLight: _C
  }, T(`inputBoxBorder`, `Input box border.`));
  $w = J(`inputOption.activeBorder`, {
    dark: `#007ACC`,
    light: `#007ACC`,
    hcDark: _C,
    hcLight: _C
  }, T(`inputBoxActiveOptionBorder`, `Border color of activated options in input fields.`));
  eT = J(`inputOption.hoverBackground`, {
    dark: `#5a5d5e80`,
    light: `#b8b8b850`,
    hcDark: null,
    hcLight: null
  }, T(`inputOption.hoverBackground`, `Background color of activated options in input fields.`));
  tT = J(`inputOption.activeBackground`, {
    dark: rC(gC, 0.4),
    light: rC(gC, 0.2),
    hcDark: K.transparent,
    hcLight: K.transparent
  }, T(`inputOption.activeBackground`, `Background hover color of options in input fields.`));
  nT = J(`inputOption.activeForeground`, {
    dark: K.white,
    light: K.black,
    hcDark: dC,
    hcLight: dC
  }, T(`inputOption.activeForeground`, `Foreground color of activated options in input fields.`));
  fte = J(`input.placeholderForeground`, {
    light: rC(dC, 0.5),
    dark: rC(dC, 0.5),
    hcDark: rC(dC, 0.7),
    hcLight: rC(dC, 0.7)
  }, T(`inputPlaceholderForeground`, `Input box foreground color for placeholder text.`));
  rT = J(`inputValidation.infoBackground`, {
    dark: `#063B49`,
    light: `#D6ECF2`,
    hcDark: K.black,
    hcLight: K.white
  }, T(`inputValidationInfoBackground`, `Input validation background color for information severity.`));
  iT = J(`inputValidation.infoForeground`, {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: dC
  }, T(`inputValidationInfoForeground`, `Input validation foreground color for information severity.`));
  aT = J(`inputValidation.infoBorder`, {
    dark: `#007acc`,
    light: `#007acc`,
    hcDark: _C,
    hcLight: _C
  }, T(`inputValidationInfoBorder`, `Input validation border color for information severity.`));
  oT = J(`inputValidation.warningBackground`, {
    dark: `#352A05`,
    light: `#F6F5D2`,
    hcDark: K.black,
    hcLight: K.white
  }, T(`inputValidationWarningBackground`, `Input validation background color for warning severity.`));
  sT = J(`inputValidation.warningForeground`, {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: dC
  }, T(`inputValidationWarningForeground`, `Input validation foreground color for warning severity.`));
  cT = J(`inputValidation.warningBorder`, {
    dark: `#B89500`,
    light: `#B89500`,
    hcDark: _C,
    hcLight: _C
  }, T(`inputValidationWarningBorder`, `Input validation border color for warning severity.`));
  lT = J(`inputValidation.errorBackground`, {
    dark: `#5A1D1D`,
    light: `#F2DEDE`,
    hcDark: K.black,
    hcLight: K.white
  }, T(`inputValidationErrorBackground`, `Input validation background color for error severity.`));
  uT = J(`inputValidation.errorForeground`, {
    dark: null,
    light: null,
    hcDark: null,
    hcLight: dC
  }, T(`inputValidationErrorForeground`, `Input validation foreground color for error severity.`));
  dT = J(`inputValidation.errorBorder`, {
    dark: `#BE1100`,
    light: `#BE1100`,
    hcDark: _C,
    hcLight: _C
  }, T(`inputValidationErrorBorder`, `Input validation border color for error severity.`));
  fT = J(`dropdown.background`, {
    dark: `#3C3C3C`,
    light: K.white,
    hcDark: K.black,
    hcLight: K.white
  }, T(`dropdownBackground`, `Dropdown background.`));
  pT = J(`dropdown.listBackground`, {
    dark: null,
    light: null,
    hcDark: K.black,
    hcLight: K.white
  }, T(`dropdownListBackground`, `Dropdown list background.`));
  mT = J(`dropdown.foreground`, {
    dark: `#F0F0F0`,
    light: dC,
    hcDark: K.white,
    hcLight: dC
  }, T(`dropdownForeground`, `Dropdown foreground.`));
  hT = J(`dropdown.border`, {
    dark: fT,
    light: `#CECECE`,
    hcDark: _C,
    hcLight: _C
  }, T(`dropdownBorder`, `Dropdown border.`));
  gT = J(`button.foreground`, K.white, T(`buttonForeground`, `Button foreground color.`));
  _T = J(`button.separator`, rC(gT, 0.4), T(`buttonSeparator`, `Button separator color.`));
  vT = J(`button.background`, {
    dark: `#0E639C`,
    light: `#007ACC`,
    hcDark: null,
    hcLight: `#0F4A85`
  }, T(`buttonBackground`, `Button background color.`));
  yT = J(`button.hoverBackground`, {
    dark: nC(vT, 0.2),
    light: tC(vT, 0.2),
    hcDark: vT,
    hcLight: vT
  }, T(`buttonHoverBackground`, `Button background color when hovering.`));
  bT = J(`button.border`, _C, T(`buttonBorder`, `Button border color.`));
  xT = J(`button.secondaryForeground`, {
    dark: K.white,
    light: K.white,
    hcDark: K.white,
    hcLight: dC
  }, T(`buttonSecondaryForeground`, `Secondary button foreground color.`));
  ST = J(`button.secondaryBackground`, {
    dark: `#3A3D41`,
    light: `#5F6A79`,
    hcDark: null,
    hcLight: K.white
  }, T(`buttonSecondaryBackground`, `Secondary button background color.`));
  CT = J(`button.secondaryHoverBackground`, {
    dark: nC(ST, 0.2),
    light: tC(ST, 0.2),
    hcDark: null,
    hcLight: null
  }, T(`buttonSecondaryHoverBackground`, `Secondary button background color when hovering.`));
  wT = J(`radio.activeForeground`, nT, T(`radioActiveForeground`, `Foreground color of active radio option.`));
  TT = J(`radio.activeBackground`, tT, T(`radioBackground`, `Background color of active radio option.`));
  ET = J(`radio.activeBorder`, $w, T(`radioActiveBorder`, `Border color of the active radio option.`));
  DT = J(`radio.inactiveForeground`, null, T(`radioInactiveForeground`, `Foreground color of inactive radio option.`));
  OT = J(`radio.inactiveBackground`, null, T(`radioInactiveBackground`, `Background color of inactive radio option.`));
  kT = J(`radio.inactiveBorder`, {
    light: rC(wT, 0.2),
    dark: rC(wT, 0.2),
    hcDark: rC(wT, 0.4),
    hcLight: rC(wT, 0.2)
  }, T(`radioInactiveBorder`, `Border color of the inactive radio option.`));
  AT = J(`radio.inactiveHoverBackground`, eT, T(`radioHoverBackground`, `Background color of inactive active radio option when hovering.`));
  jT = J(`checkbox.background`, fT, T(`checkbox.background`, `Background color of checkbox widget.`));
  pte = J(`checkbox.selectBackground`, kC, T(`checkbox.select.background`, `Background color of checkbox widget when the element it's in is selected.`));
  MT = J(`checkbox.foreground`, mT, T(`checkbox.foreground`, `Foreground color of checkbox widget.`));
  NT = J(`checkbox.border`, hT, T(`checkbox.border`, `Border color of checkbox widget.`));
  mte = J(`checkbox.selectBorder`, hC, T(`checkbox.select.border`, `Border color of checkbox widget when the element it's in is selected.`));
  PT = J(`keybindingLabel.background`, {
    dark: new K(new Xy(128, 128, 128, 0.17)),
    light: new K(new Xy(221, 221, 221, 0.4)),
    hcDark: K.transparent,
    hcLight: K.transparent
  }, T(`keybindingLabelBackground`, `Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.`));
  FT = J(`keybindingLabel.foreground`, {
    dark: K.fromHex(`#CCCCCC`),
    light: K.fromHex(`#555555`),
    hcDark: K.white,
    hcLight: dC
  }, T(`keybindingLabelForeground`, `Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.`));
  IT = J(`keybindingLabel.border`, {
    dark: new K(new Xy(51, 51, 51, 0.6)),
    light: new K(new Xy(204, 204, 204, 0.4)),
    hcDark: new K(new Xy(111, 195, 223)),
    hcLight: _C
  }, T(`keybindingLabelBorder`, `Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.`));
  LT = J(`keybindingLabel.bottomBorder`, {
    dark: new K(new Xy(68, 68, 68, 0.6)),
    light: new K(new Xy(187, 187, 187, 0.4)),
    hcDark: new K(new Xy(111, 195, 223)),
    hcLight: dC
  }, T(`keybindingLabelBottomBorder`, `Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.`));
  RT = J(`list.focusBackground`, null, T(`listFocusBackground`, `List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  zT = J(`list.focusForeground`, null, T(`listFocusForeground`, `List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  BT = J(`list.focusOutline`, {
    dark: gC,
    light: gC,
    hcDark: vC,
    hcLight: vC
  }, T(`listFocusOutline`, `List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  VT = J(`list.focusAndSelectionOutline`, null, T(`listFocusAndSelectionOutline`, `List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.`));
  HT = J(`list.activeSelectionBackground`, {
    dark: `#04395E`,
    light: `#0060C0`,
    hcDark: null,
    hcLight: K.fromHex(`#0F4A85`).transparent(0.1)
  }, T(`listActiveSelectionBackground`, `List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  UT = J(`list.activeSelectionForeground`, {
    dark: K.white,
    light: K.white,
    hcDark: null,
    hcLight: null
  }, T(`listActiveSelectionForeground`, `List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  WT = J(`list.activeSelectionIconForeground`, null, T(`listActiveSelectionIconForeground`, `List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.`));
  GT = J(`list.inactiveSelectionBackground`, {
    dark: `#37373D`,
    light: `#E4E6F1`,
    hcDark: null,
    hcLight: K.fromHex(`#0F4A85`).transparent(0.1)
  }, T(`listInactiveSelectionBackground`, `List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.`));
  KT = J(`list.inactiveSelectionForeground`, null, T(`listInactiveSelectionForeground`, `List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.`));
  qT = J(`list.inactiveSelectionIconForeground`, null, T(`listInactiveSelectionIconForeground`, `List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.`));
  JT = J(`list.inactiveFocusBackground`, null, T(`listInactiveFocusBackground`, `List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.`));
  YT = J(`list.inactiveFocusOutline`, null, T(`listInactiveFocusOutline`, `List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.`));
  XT = J(`list.hoverBackground`, {
    dark: `#2A2D2E`,
    light: `#F0F0F0`,
    hcDark: K.white.transparent(0.1),
    hcLight: K.fromHex(`#0F4A85`).transparent(0.1)
  }, T(`listHoverBackground`, `List/Tree background when hovering over items using the mouse.`));
  ZT = J(`list.hoverForeground`, null, T(`listHoverForeground`, `List/Tree foreground when hovering over items using the mouse.`));
  QT = J(`list.dropBackground`, {
    dark: `#062F4A`,
    light: `#D6EBFF`,
    hcDark: null,
    hcLight: null
  }, T(`listDropBackground`, `List/Tree drag and drop background when moving items over other items when using the mouse.`));
  $T = J(`list.dropBetweenBackground`, {
    dark: hC,
    light: hC,
    hcDark: null,
    hcLight: null
  }, T(`listDropBetweenBackground`, `List/Tree drag and drop border color when moving items between items when using the mouse.`));
  eE = J(`list.highlightForeground`, {
    dark: `#2AAAFF`,
    light: `#0066BF`,
    hcDark: gC,
    hcLight: gC
  }, T(`highlight`, `List/Tree foreground color of the match highlights when searching inside the list/tree.`));
  tE = J(`list.focusHighlightForeground`, {
    dark: eE,
    light: aC(HT, eE, `#BBE7FF`),
    hcDark: eE,
    hcLight: eE
  }, T(`listFocusHighlightForeground`, `List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.`));
  hte = J(`list.invalidItemForeground`, {
    dark: `#B89500`,
    light: `#B89500`,
    hcDark: `#B89500`,
    hcLight: `#B5200D`
  }, T(`invalidItemForeground`, `List/Tree foreground color for invalid items, for example an unresolved root in explorer.`));
  gte = J(`list.errorForeground`, {
    dark: `#F88070`,
    light: `#B01011`,
    hcDark: null,
    hcLight: null
  }, T(`listErrorForeground`, `Foreground color of list items containing errors.`));
  _te = J(`list.warningForeground`, {
    dark: `#CCA700`,
    light: `#855F00`,
    hcDark: null,
    hcLight: null
  }, T(`listWarningForeground`, `Foreground color of list items containing warnings.`));
  nE = J(`listFilterWidget.background`, {
    light: tC(kC, 0),
    dark: nC(kC, 0),
    hcDark: kC,
    hcLight: kC
  }, T(`listFilterWidgetBackground`, `Background color of the type filter widget in lists and trees.`));
  rE = J(`listFilterWidget.outline`, {
    dark: K.transparent,
    light: K.transparent,
    hcDark: `#f38518`,
    hcLight: `#007ACC`
  }, T(`listFilterWidgetOutline`, `Outline color of the type filter widget in lists and trees.`));
  iE = J(`listFilterWidget.noMatchesOutline`, {
    dark: `#BE1100`,
    light: `#BE1100`,
    hcDark: _C,
    hcLight: _C
  }, T(`listFilterWidgetNoMatchesOutline`, `Outline color of the type filter widget in lists and trees, when there are no matches.`));
  aE = J(`listFilterWidget.shadow`, bw, T(`listFilterWidgetShadow`, `Shadow color of the type filter widget in lists and trees.`));
  vte = J(`list.filterMatchBackground`, {
    dark: qC,
    light: qC,
    hcDark: null,
    hcLight: null
  }, T(`listFilterMatchHighlight`, `Background color of the filtered match.`));
  yte = J(`list.filterMatchBorder`, {
    dark: YC,
    light: YC,
    hcDark: _C,
    hcLight: vC
  }, T(`listFilterMatchHighlightBorder`, `Border color of the filtered match.`));
  bte = J(`list.deemphasizedForeground`, {
    dark: `#8C8C8C`,
    light: `#8E8E90`,
    hcDark: `#A7A8A9`,
    hcLight: `#666666`
  }, T(`listDeemphasizedForeground`, `List/Tree foreground color for items that are deemphasized.`));
  oE = J(`tree.indentGuidesStroke`, {
    dark: `#585858`,
    light: `#a9a9a9`,
    hcDark: `#a9a9a9`,
    hcLight: `#a5a5a5`
  }, T(`treeIndentGuidesStroke`, `Tree stroke color for the indentation guides.`));
  sE = J(`tree.inactiveIndentGuidesStroke`, rC(oE, 0.4), T(`treeInactiveIndentGuidesStroke`, `Tree stroke color for the indentation guides that are not active.`));
  cE = J(`tree.tableColumnsBorder`, {
    dark: `#CCCCCC20`,
    light: `#61616120`,
    hcDark: null,
    hcLight: null
  }, T(`tableColumnsBorder`, `Table border color between columns.`));
  lE = J(`tree.tableOddRowsBackground`, {
    dark: rC(dC, 0.04),
    light: rC(dC, 0.04),
    hcDark: null,
    hcLight: null
  }, T(`tableOddRowsBackgroundColor`, `Background color for odd table rows.`));
  xte = J(`editorActionList.background`, kC, T(`editorActionListBackground`, `Action List background color.`));
  Ste = J(`editorActionList.foreground`, AC, T(`editorActionListForeground`, `Action List foreground color.`));
  Cte = J(`editorActionList.focusForeground`, UT, T(`editorActionListFocusForeground`, `Action List foreground color for the focused item.`));
  wte = J(`editorActionList.focusBackground`, HT, T(`editorActionListFocusBackground`, `Action List background color for the focused item.`));
  uE = J(`menu.border`, {
    dark: null,
    light: null,
    hcDark: _C,
    hcLight: _C
  }, T(`menuBorder`, `Border color of menus.`));
  dE = J(`menu.foreground`, mT, T(`menuForeground`, `Foreground color of menu items.`));
  fE = J(`menu.background`, fT, T(`menuBackground`, `Background color of menu items.`));
  pE = J(`menu.selectionForeground`, UT, T(`menuSelectionForeground`, `Foreground color of the selected menu item in menus.`));
  mE = J(`menu.selectionBackground`, HT, T(`menuSelectionBackground`, `Background color of the selected menu item in menus.`));
  hE = J(`menu.selectionBorder`, {
    dark: null,
    light: null,
    hcDark: vC,
    hcLight: vC
  }, T(`menuSelectionBorder`, `Border color of the selected menu item in menus.`));
  gE = J(`menu.separatorBackground`, {
    dark: `#606060`,
    light: `#D4D4D4`,
    hcDark: _C,
    hcLight: _C
  }, T(`menuSeparatorBackground`, `Color of a separator menu item in menus.`));
  _E = J(`quickInput.background`, kC, T(`pickerBackground`, `Quick picker background color. The quick picker widget is the container for pickers like the command palette.`));
  vE = J(`quickInput.foreground`, AC, T(`pickerForeground`, `Quick picker foreground color. The quick picker widget is the container for pickers like the command palette.`));
  yE = J(`quickInputTitle.background`, {
    dark: new K(new Xy(255, 255, 255, 0.105)),
    light: new K(new Xy(0, 0, 0, 0.06)),
    hcDark: `#000000`,
    hcLight: K.white
  }, T(`pickerTitleBackground`, `Quick picker title background color. The quick picker widget is the container for pickers like the command palette.`));
  bE = J(`pickerGroup.foreground`, {
    dark: `#3794FF`,
    light: `#0066BF`,
    hcDark: K.white,
    hcLight: `#0F4A85`
  }, T(`pickerGroupForeground`, `Quick picker color for grouping labels.`));
  xE = J(`pickerGroup.border`, {
    dark: `#3F3F46`,
    light: `#CCCEDB`,
    hcDark: K.white,
    hcLight: `#0F4A85`
  }, T(`pickerGroupBorder`, `Quick picker color for grouping borders.`));
  SE = J(`quickInput.list.focusBackground`, null, ``, void 0, T(`quickInput.list.focusBackground deprecation`, `Please use quickInputList.focusBackground instead`));
  CE = J(`quickInputList.focusForeground`, UT, T(`quickInput.listFocusForeground`, `Quick picker foreground color for the focused item.`));
  wE = J(`quickInputList.focusIconForeground`, WT, T(`quickInput.listFocusIconForeground`, `Quick picker icon foreground color for the focused item.`));
  TE = J(`quickInputList.focusBackground`, {
    dark: iC(SE, HT),
    light: iC(SE, HT),
    hcDark: null,
    hcLight: null
  }, T(`quickInput.listFocusBackground`, `Quick picker background color for the focused item.`));
  Tte = J(`search.resultsInfoForeground`, {
    light: dC,
    dark: rC(dC, 0.65),
    hcDark: dC,
    hcLight: dC
  }, T(`search.resultsInfoForeground`, `Color of the text in the search viewlet's completion message.`));
  Ete = J(`searchEditor.findMatchBackground`, {
    light: rC(qC, 0.66),
    dark: rC(qC, 0.66),
    hcDark: qC,
    hcLight: qC
  }, T(`searchEditor.queryMatch`, `Color of the Search Editor query matches.`));
  Dte = J(`searchEditor.findMatchBorder`, {
    light: rC(YC, 0.66),
    dark: rC(YC, 0.66),
    hcDark: YC,
    hcLight: YC
  }, T(`searchEditor.editorFindMatchBorder`, `Border color of the Search Editor query matches.`));
  var EE = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, DE = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  OE = Xf(`hoverService`);
  kE = class extends j {
    get delay() {
      return this.isInstantlyHovering() ? 0 : this._delay;
    }
    constructor(e10, t10, n10 = {}, r10, i10) {
      super(), this.placement = e10, this.instantHover = t10, this.overrideOptions = n10, this.configurationService = r10, this.hoverService = i10, this.lastHoverHideTime = 0, this.timeLimit = 200, this.hoverDisposables = this._register(new A()), this._delay = this.configurationService.getValue(`workbench.hover.delay`), this._register(this.configurationService.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(`workbench.hover.delay`) && (this._delay = this.configurationService.getValue(`workbench.hover.delay`));
      }));
    }
    showHover(e10, t10) {
      let n10 = typeof this.overrideOptions == `function` ? this.overrideOptions(e10, t10) : this.overrideOptions;
      this.hoverDisposables.clear();
      let r10 = Gd(e10.target) ? [
        e10.target
      ] : e10.target.targetElements;
      for (let e11 of r10) this.hoverDisposables.add(td(e11, `keydown`, (e12) => {
        e12.equals(9) && this.hoverService.hideHover();
      }));
      let i10 = Gd(e10.content) ? void 0 : e10.content.toString();
      return this.hoverService.showHover({
        ...e10,
        ...n10,
        persistence: {
          hideOnKeyDown: true,
          ...n10.persistence
        },
        id: i10,
        appearance: {
          ...e10.appearance,
          compact: true,
          skipFadeInAnimation: this.isInstantlyHovering(),
          ...n10.appearance
        }
      }, t10);
    }
    isInstantlyHovering() {
      return this.instantHover && Date.now() - this.lastHoverHideTime < this.timeLimit;
    }
    onDidHideHover() {
      this.hoverDisposables.clear(), this.instantHover && (this.lastHoverHideTime = Date.now());
    }
  };
  kE = EE([
    DE(3, ug),
    DE(4, OE)
  ], kE);
  AE = Xf(`contextViewService`);
  jE = Xf(`contextMenuService`);
  ME = Xf(`keybindingService`);
  NE = class {
    constructor() {
      this._hooks = new A(), this._pointerMoveCallback = null, this._onStopCallback = null;
    }
    dispose() {
      this.stopMonitoring(false), this._hooks.dispose();
    }
    stopMonitoring(e10, t10) {
      if (!this.isMonitoring()) return;
      this._hooks.clear(), this._pointerMoveCallback = null;
      let n10 = this._onStopCallback;
      this._onStopCallback = null, e10 && n10 && n10(t10);
    }
    isMonitoring() {
      return !!this._pointerMoveCallback;
    }
    startMonitoring(e10, t10, n10, r10, i10) {
      this.isMonitoring() && this.stopMonitoring(false), this._pointerMoveCallback = r10, this._onStopCallback = i10;
      let a10 = e10;
      try {
        e10.setPointerCapture(t10), this._hooks.add(k(() => {
          try {
            e10.releasePointerCapture(t10);
          } catch {
          }
        }));
      } catch {
        a10 = R(e10);
      }
      this._hooks.add(z(a10, B.POINTER_MOVE, (e11) => {
        if (e11.buttons !== n10) {
          this.stopMonitoring(true);
          return;
        }
        e11.preventDefault(), this._pointerMoveCallback(e11);
      })), this._hooks.add(z(a10, B.POINTER_UP, (e11) => this.stopMonitoring(true)));
    }
  };
  function PE(e10, t10, n10) {
    let r10 = null, i10 = null;
    if (typeof n10.value == `function` ? (r10 = `value`, i10 = n10.value, i10.length !== 0 && console.warn(`Memoize should only be used in functions with zero parameters`)) : typeof n10.get == `function` && (r10 = `get`, i10 = n10.get), !i10) throw Error(`not supported`);
    let a10 = `$memoize$${t10}`;
    n10[r10] = function(...e11) {
      return this.hasOwnProperty(a10) || Object.defineProperty(this, a10, {
        configurable: false,
        enumerable: false,
        writable: false,
        value: i10.apply(this, e11)
      }), this[a10];
    };
  }
  let FE;
  FE = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  };
  (function(e10) {
    e10.Tap = `-monaco-gesturetap`, e10.Change = `-monaco-gesturechange`, e10.Start = `-monaco-gesturestart`, e10.End = `-monaco-gesturesend`, e10.Contextmenu = `-monaco-gesturecontextmenu`;
  })(IE || (IE = {}));
  LE = (_Z2 = class extends j {
    constructor() {
      super(), this.dispatched = false, this.targets = new Rt(), this.ignoreTargets = new Rt(), this.activeTouches = {}, this.handle = null, this._lastSetTapCountTime = 0, this._register(M.runAndSubscribe(Ju, ({ window: e10, disposables: t10 }) => {
        t10.add(z(e10.document, `touchstart`, (e11) => this.onTouchStart(e11), {
          passive: false
        })), t10.add(z(e10.document, `touchend`, (t11) => this.onTouchEnd(e10, t11))), t10.add(z(e10.document, `touchmove`, (e11) => this.onTouchMove(e11), {
          passive: false
        }));
      }, {
        window: os,
        disposables: this._store
      }));
    }
    static addTarget(t10) {
      if (!_Z2.isTouchDevice()) return j.None;
      _Z2.INSTANCE || (_Z2.INSTANCE = Ir(new _Z2()));
      let n10 = _Z2.INSTANCE.targets.push(t10);
      return k(n10);
    }
    static ignoreTarget(t10) {
      if (!_Z2.isTouchDevice()) return j.None;
      _Z2.INSTANCE || (_Z2.INSTANCE = Ir(new _Z2()));
      let n10 = _Z2.INSTANCE.ignoreTargets.push(t10);
      return k(n10);
    }
    static isTouchDevice() {
      return `ontouchstart` in os || navigator.maxTouchPoints > 0;
    }
    dispose() {
      this.handle && (this.handle.dispose(), this.handle = null), super.dispose();
    }
    onTouchStart(e10) {
      let t10 = Date.now();
      this.handle && (this.handle.dispose(), this.handle = null);
      for (let n10 = 0, r10 = e10.targetTouches.length; n10 < r10; n10++) {
        let r11 = e10.targetTouches.item(n10);
        this.activeTouches[r11.identifier] = {
          id: r11.identifier,
          initialTarget: r11.target,
          initialTimeStamp: t10,
          initialPageX: r11.pageX,
          initialPageY: r11.pageY,
          rollingTimestamps: [
            t10
          ],
          rollingPageX: [
            r11.pageX
          ],
          rollingPageY: [
            r11.pageY
          ]
        };
        let i10 = this.newGestureEvent(IE.Start, r11.target);
        i10.pageX = r11.pageX, i10.pageY = r11.pageY, this.dispatchEvent(i10);
      }
      this.dispatched && (e10.preventDefault(), e10.stopPropagation(), this.dispatched = false);
    }
    onTouchEnd(t10, n10) {
      let r10 = Date.now(), i10 = Object.keys(this.activeTouches).length;
      for (let a10 = 0, o10 = n10.changedTouches.length; a10 < o10; a10++) {
        let o11 = n10.changedTouches.item(a10);
        if (!this.activeTouches.hasOwnProperty(String(o11.identifier))) {
          console.warn(`move of an UNKNOWN touch`, o11);
          continue;
        }
        let c10 = this.activeTouches[o11.identifier], l10 = Date.now() - c10.initialTimeStamp;
        if (l10 < _Z2.HOLD_DELAY && Math.abs(c10.initialPageX - s(c10.rollingPageX)) < 30 && Math.abs(c10.initialPageY - s(c10.rollingPageY)) < 30) {
          let e10 = this.newGestureEvent(IE.Tap, c10.initialTarget);
          e10.pageX = s(c10.rollingPageX), e10.pageY = s(c10.rollingPageY), this.dispatchEvent(e10);
        } else if (l10 >= _Z2.HOLD_DELAY && Math.abs(c10.initialPageX - s(c10.rollingPageX)) < 30 && Math.abs(c10.initialPageY - s(c10.rollingPageY)) < 30) {
          let e10 = this.newGestureEvent(IE.Contextmenu, c10.initialTarget);
          e10.pageX = s(c10.rollingPageX), e10.pageY = s(c10.rollingPageY), this.dispatchEvent(e10);
        } else if (i10 === 1) {
          let e10 = s(c10.rollingPageX), n11 = s(c10.rollingPageY), i11 = s(c10.rollingTimestamps) - c10.rollingTimestamps[0], a11 = e10 - c10.rollingPageX[0], o12 = n11 - c10.rollingPageY[0], l11 = [
            ...this.targets
          ].filter((e11) => c10.initialTarget instanceof Node && e11.contains(c10.initialTarget));
          this.inertia(t10, l11, r10, Math.abs(a11) / i11, a11 > 0 ? 1 : -1, e10, Math.abs(o12) / i11, o12 > 0 ? 1 : -1, n11);
        }
        this.dispatchEvent(this.newGestureEvent(IE.End, c10.initialTarget)), delete this.activeTouches[o11.identifier];
      }
      this.dispatched && (n10.preventDefault(), n10.stopPropagation(), this.dispatched = false);
    }
    newGestureEvent(e10, t10) {
      let n10 = document.createEvent(`CustomEvent`);
      return n10.initEvent(e10, false, true), n10.initialTarget = t10, n10.tapCount = 0, n10;
    }
    dispatchEvent(t10) {
      if (t10.type === IE.Tap) {
        let n10 = (/* @__PURE__ */ new Date()).getTime(), r10 = 0;
        r10 = n10 - this._lastSetTapCountTime > _Z2.CLEAR_TAP_COUNT_TIME ? 1 : 2, this._lastSetTapCountTime = n10, t10.tapCount = r10;
      } else (t10.type === IE.Change || t10.type === IE.Contextmenu) && (this._lastSetTapCountTime = 0);
      if (t10.initialTarget instanceof Node) {
        for (let e11 of this.ignoreTargets) if (e11.contains(t10.initialTarget)) return;
        let e10 = [];
        for (let n10 of this.targets) if (n10.contains(t10.initialTarget)) {
          let r10 = 0, i10 = t10.initialTarget;
          for (; i10 && i10 !== n10; ) r10++, i10 = i10.parentElement;
          e10.push([
            r10,
            n10
          ]);
        }
        e10.sort((e11, t11) => e11[0] - t11[0]);
        for (let [n10, r10] of e10) r10.dispatchEvent(t10), this.dispatched = true;
      }
    }
    inertia(t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      this.handle = sd(t10, () => {
        let u10 = Date.now(), d10 = u10 - r10, f10 = 0, p10 = 0, m10 = true;
        i10 += _Z2.SCROLL_FRICTION * d10, s10 += _Z2.SCROLL_FRICTION * d10, i10 > 0 && (m10 = false, f10 = a10 * i10 * d10), s10 > 0 && (m10 = false, p10 = c10 * s10 * d10);
        let h10 = this.newGestureEvent(IE.Change);
        h10.translationX = f10, h10.translationY = p10, n10.forEach((e10) => e10.dispatchEvent(h10)), m10 || this.inertia(t10, n10, u10, i10, a10, o10 + f10, s10, c10, l10 + p10);
      });
    }
    onTouchMove(e10) {
      let t10 = Date.now();
      for (let n10 = 0, r10 = e10.changedTouches.length; n10 < r10; n10++) {
        let r11 = e10.changedTouches.item(n10);
        if (!this.activeTouches.hasOwnProperty(String(r11.identifier))) {
          console.warn(`end of an UNKNOWN touch`, r11);
          continue;
        }
        let i10 = this.activeTouches[r11.identifier], a10 = this.newGestureEvent(IE.Change, i10.initialTarget);
        a10.translationX = r11.pageX - s(i10.rollingPageX), a10.translationY = r11.pageY - s(i10.rollingPageY), a10.pageX = r11.pageX, a10.pageY = r11.pageY, this.dispatchEvent(a10), i10.rollingPageX.length > 3 && (i10.rollingPageX.shift(), i10.rollingPageY.shift(), i10.rollingTimestamps.shift()), i10.rollingPageX.push(r11.pageX), i10.rollingPageY.push(r11.pageY), i10.rollingTimestamps.push(t10);
      }
      this.dispatched && (e10.preventDefault(), e10.stopPropagation(), this.dispatched = false);
    }
  }, _Z2.SCROLL_FRICTION = -5e-3, _Z2.HOLD_DELAY = 700, _Z2.CLEAR_TAP_COUNT_TIME = 400, _Z2);
  FE([
    PE
  ], LE, `isTouchDevice`, null);
  RE = class extends j {
    onclick(e10, t10) {
      this._register(z(e10, B.CLICK, (n10) => t10(new Kc(R(e10), n10))));
    }
    onmousedown(e10, t10) {
      this._register(z(e10, B.MOUSE_DOWN, (n10) => t10(new Kc(R(e10), n10))));
    }
    onmouseover(e10, t10) {
      this._register(z(e10, B.MOUSE_OVER, (n10) => t10(new Kc(R(e10), n10))));
    }
    onmouseleave(e10, t10) {
      this._register(z(e10, B.MOUSE_LEAVE, (n10) => t10(new Kc(R(e10), n10))));
    }
    onkeydown(e10, t10) {
      this._register(z(e10, B.KEY_DOWN, (e11) => t10(new Hc(e11))));
    }
    onkeyup(e10, t10) {
      this._register(z(e10, B.KEY_UP, (e11) => t10(new Hc(e11))));
    }
    oninput(e10, t10) {
      this._register(z(e10, B.INPUT, t10));
    }
    onblur(e10, t10) {
      this._register(z(e10, B.BLUR, t10));
    }
    onfocus(e10, t10) {
      this._register(z(e10, B.FOCUS, t10));
    }
    ignoreGesture(e10) {
      return LE.ignoreTarget(e10);
    }
  };
  const zE = 11;
  var BE = class extends RE {
    constructor(e10) {
      super(), this._onActivate = e10.onActivate, this.bgDomNode = document.createElement(`div`), this.bgDomNode.className = `arrow-background`, this.bgDomNode.style.position = `absolute`, this.bgDomNode.style.width = e10.bgWidth + `px`, this.bgDomNode.style.height = e10.bgHeight + `px`, e10.top !== void 0 && (this.bgDomNode.style.top = `0px`), e10.left !== void 0 && (this.bgDomNode.style.left = `0px`), e10.bottom !== void 0 && (this.bgDomNode.style.bottom = `0px`), e10.right !== void 0 && (this.bgDomNode.style.right = `0px`), this.domNode = document.createElement(`div`), this.domNode.className = e10.className, this.domNode.classList.add(...sp.asClassNameArray(e10.icon)), this.domNode.style.position = `absolute`, this.domNode.style.width = zE + `px`, this.domNode.style.height = zE + `px`, e10.top !== void 0 && (this.domNode.style.top = e10.top + `px`), e10.left !== void 0 && (this.domNode.style.left = e10.left + `px`), e10.bottom !== void 0 && (this.domNode.style.bottom = e10.bottom + `px`), e10.right !== void 0 && (this.domNode.style.right = e10.right + `px`), this._pointerMoveMonitor = this._register(new NE()), this._register(td(this.bgDomNode, B.POINTER_DOWN, (e11) => this._arrowPointerDown(e11))), this._register(td(this.domNode, B.POINTER_DOWN, (e11) => this._arrowPointerDown(e11))), this._pointerdownRepeatTimer = this._register(new cd()), this._pointerdownScheduleRepeatTimer = this._register(new ol());
    }
    _arrowPointerDown(e10) {
      if (!e10.target || !(e10.target instanceof Element)) return;
      let t10 = () => {
        this._pointerdownRepeatTimer.cancelAndSet(() => this._onActivate(), 1e3 / 24, R(e10));
      };
      this._onActivate(), this._pointerdownRepeatTimer.cancel(), this._pointerdownScheduleRepeatTimer.cancelAndSet(t10, 200), this._pointerMoveMonitor.startMonitoring(e10.target, e10.pointerId, e10.buttons, (e11) => {
      }, () => {
        this._pointerdownRepeatTimer.cancel(), this._pointerdownScheduleRepeatTimer.cancel();
      }), e10.preventDefault();
    }
  }, VE = class extends j {
    constructor(e10, t10, n10) {
      super(), this._visibility = e10, this._visibleClassName = t10, this._invisibleClassName = n10, this._domNode = null, this._isVisible = false, this._isNeeded = false, this._rawShouldBeVisible = false, this._shouldBeVisible = false, this._revealTimer = this._register(new ol());
    }
    setVisibility(e10) {
      this._visibility !== e10 && (this._visibility = e10, this._updateShouldBeVisible());
    }
    setShouldBeVisible(e10) {
      this._rawShouldBeVisible = e10, this._updateShouldBeVisible();
    }
    _applyVisibilitySetting() {
      return this._visibility === 2 ? false : this._visibility === 3 ? true : this._rawShouldBeVisible;
    }
    _updateShouldBeVisible() {
      let e10 = this._applyVisibilitySetting();
      this._shouldBeVisible !== e10 && (this._shouldBeVisible = e10, this.ensureVisibility());
    }
    setIsNeeded(e10) {
      this._isNeeded !== e10 && (this._isNeeded = e10, this.ensureVisibility());
    }
    setDomNode(e10) {
      this._domNode = e10, this._domNode.setClassName(this._invisibleClassName), this.setShouldBeVisible(false);
    }
    ensureVisibility() {
      if (!this._isNeeded) {
        this._hide(false);
        return;
      }
      this._shouldBeVisible ? this._reveal() : this._hide(true);
    }
    _reveal() {
      this._isVisible || (this._isVisible = true, this._revealTimer.setIfNotSet(() => {
        var _a3;
        (_a3 = this._domNode) == null ? void 0 : _a3.setClassName(this._visibleClassName);
      }, 0));
    }
    _hide(e10) {
      var _a3;
      this._revealTimer.cancel(), this._isVisible && (this._isVisible = false, (_a3 = this._domNode) == null ? void 0 : _a3.setClassName(this._invisibleClassName + (e10 ? ` fade` : ``)));
    }
  };
  const HE = 140;
  var UE = class extends RE {
    constructor(e10) {
      super(), this._lazyRender = e10.lazyRender, this._host = e10.host, this._scrollable = e10.scrollable, this._scrollByPage = e10.scrollByPage, this._scrollbarState = e10.scrollbarState, this._visibilityController = this._register(new VE(e10.visibility, `visible scrollbar ` + e10.extraScrollbarClassName, `invisible scrollbar ` + e10.extraScrollbarClassName)), this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded()), this._pointerMoveMonitor = this._register(new NE()), this._shouldRender = true, this.domNode = Nf(document.createElement(`div`)), this.domNode.setAttribute(`role`, `presentation`), this.domNode.setAttribute(`aria-hidden`, `true`), this._visibilityController.setDomNode(this.domNode), this.domNode.setPosition(`absolute`), this._register(z(this.domNode.domNode, B.POINTER_DOWN, (e11) => this._domNodePointerDown(e11)));
    }
    _createArrow(e10) {
      let t10 = this._register(new BE(e10));
      this.domNode.domNode.appendChild(t10.bgDomNode), this.domNode.domNode.appendChild(t10.domNode);
    }
    _createSlider(e10, t10, n10, r10) {
      this.slider = Nf(document.createElement(`div`)), this.slider.setClassName(`slider`), this.slider.setPosition(`absolute`), this.slider.setTop(e10), this.slider.setLeft(t10), typeof n10 == `number` && this.slider.setWidth(n10), typeof r10 == `number` && this.slider.setHeight(r10), this.slider.setLayerHinting(true), this.slider.setContain(`strict`), this.domNode.domNode.appendChild(this.slider.domNode), this._register(z(this.slider.domNode, B.POINTER_DOWN, (e11) => {
        e11.button === 0 && (e11.preventDefault(), this._sliderPointerDown(e11));
      })), this.onclick(this.slider.domNode, (e11) => {
        e11.leftButton && e11.stopPropagation();
      });
    }
    _onElementSize(e10) {
      return this._scrollbarState.setVisibleSize(e10) && (this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded()), this._shouldRender = true, this._lazyRender || this.render()), this._shouldRender;
    }
    _onElementScrollSize(e10) {
      return this._scrollbarState.setScrollSize(e10) && (this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded()), this._shouldRender = true, this._lazyRender || this.render()), this._shouldRender;
    }
    _onElementScrollPosition(e10) {
      return this._scrollbarState.setScrollPosition(e10) && (this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded()), this._shouldRender = true, this._lazyRender || this.render()), this._shouldRender;
    }
    beginReveal() {
      this._visibilityController.setShouldBeVisible(true);
    }
    beginHide() {
      this._visibilityController.setShouldBeVisible(false);
    }
    render() {
      this._shouldRender && (this._shouldRender = false, this._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize()), this._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition()));
    }
    _domNodePointerDown(e10) {
      e10.target === this.domNode.domNode && this._onPointerDown(e10);
    }
    delegatePointerDown(e10) {
      let t10 = this.domNode.domNode.getClientRects()[0].top, n10 = t10 + this._scrollbarState.getSliderPosition(), r10 = t10 + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize(), i10 = this._sliderPointerPosition(e10);
      n10 <= i10 && i10 <= r10 ? e10.button === 0 && (e10.preventDefault(), this._sliderPointerDown(e10)) : this._onPointerDown(e10);
    }
    _onPointerDown(e10) {
      let t10, n10;
      if (e10.target === this.domNode.domNode && typeof e10.offsetX == `number` && typeof e10.offsetY == `number`) t10 = e10.offsetX, n10 = e10.offsetY;
      else {
        let r11 = gd(this.domNode.domNode);
        t10 = e10.pageX - r11.left, n10 = e10.pageY - r11.top;
      }
      let r10 = this._pointerDownRelativePosition(t10, n10);
      this._setDesiredScrollPositionNow(this._scrollByPage ? this._scrollbarState.getDesiredScrollPositionFromOffsetPaged(r10) : this._scrollbarState.getDesiredScrollPositionFromOffset(r10)), e10.button === 0 && (e10.preventDefault(), this._sliderPointerDown(e10));
    }
    _sliderPointerDown(e10) {
      if (!e10.target || !(e10.target instanceof Element)) return;
      let t10 = this._sliderPointerPosition(e10), n10 = this._sliderOrthogonalPointerPosition(e10), r10 = this._scrollbarState.clone();
      this.slider.toggleClassName(`active`, true), this._pointerMoveMonitor.startMonitoring(e10.target, e10.pointerId, e10.buttons, (e11) => {
        let i10 = this._sliderOrthogonalPointerPosition(e11), a10 = Math.abs(i10 - n10);
        if (mt && a10 > HE) {
          this._setDesiredScrollPositionNow(r10.getScrollPosition());
          return;
        }
        let o10 = this._sliderPointerPosition(e11), s10 = o10 - t10;
        this._setDesiredScrollPositionNow(r10.getDesiredScrollPositionFromDelta(s10));
      }, () => {
        this.slider.toggleClassName(`active`, false), this._host.onDragEnd();
      }), this._host.onDragStart();
    }
    _setDesiredScrollPositionNow(e10) {
      let t10 = {};
      this.writeScrollPosition(t10, e10), this._scrollable.setScrollPositionNow(t10);
    }
    updateScrollbarSize(e10) {
      this._updateScrollbarSize(e10), this._scrollbarState.setScrollbarSize(e10), this._shouldRender = true, this._lazyRender || this.render();
    }
    isNeeded() {
      return this._scrollbarState.isNeeded();
    }
  };
  const WE = 20;
  var GE = class e10 {
    constructor(e11, t10, n10, r10, i10, a10) {
      this._scrollbarSize = Math.round(t10), this._oppositeScrollbarSize = Math.round(n10), this._arrowSize = Math.round(e11), this._visibleSize = r10, this._scrollSize = i10, this._scrollPosition = a10, this._computedAvailableSize = 0, this._computedIsNeeded = false, this._computedSliderSize = 0, this._computedSliderRatio = 0, this._computedSliderPosition = 0, this._refreshComputedValues();
    }
    clone() {
      return new e10(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize, this._visibleSize, this._scrollSize, this._scrollPosition);
    }
    setVisibleSize(e11) {
      let t10 = Math.round(e11);
      return this._visibleSize === t10 ? false : (this._visibleSize = t10, this._refreshComputedValues(), true);
    }
    setScrollSize(e11) {
      let t10 = Math.round(e11);
      return this._scrollSize === t10 ? false : (this._scrollSize = t10, this._refreshComputedValues(), true);
    }
    setScrollPosition(e11) {
      let t10 = Math.round(e11);
      return this._scrollPosition === t10 ? false : (this._scrollPosition = t10, this._refreshComputedValues(), true);
    }
    setScrollbarSize(e11) {
      this._scrollbarSize = Math.round(e11);
    }
    setOppositeScrollbarSize(e11) {
      this._oppositeScrollbarSize = Math.round(e11);
    }
    static _computeValues(e11, t10, n10, r10, i10) {
      let a10 = Math.max(0, n10 - e11), o10 = Math.max(0, a10 - 2 * t10), s10 = r10 > 0 && r10 > n10;
      if (!s10) return {
        computedAvailableSize: Math.round(a10),
        computedIsNeeded: s10,
        computedSliderSize: Math.round(o10),
        computedSliderRatio: 0,
        computedSliderPosition: 0
      };
      let c10 = Math.round(Math.max(WE, Math.floor(n10 * o10 / r10))), l10 = (o10 - c10) / (r10 - n10), u10 = i10 * l10;
      return {
        computedAvailableSize: Math.round(a10),
        computedIsNeeded: s10,
        computedSliderSize: Math.round(c10),
        computedSliderRatio: l10,
        computedSliderPosition: Math.round(u10)
      };
    }
    _refreshComputedValues() {
      let t10 = e10._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);
      this._computedAvailableSize = t10.computedAvailableSize, this._computedIsNeeded = t10.computedIsNeeded, this._computedSliderSize = t10.computedSliderSize, this._computedSliderRatio = t10.computedSliderRatio, this._computedSliderPosition = t10.computedSliderPosition;
    }
    getArrowSize() {
      return this._arrowSize;
    }
    getScrollPosition() {
      return this._scrollPosition;
    }
    getRectangleLargeSize() {
      return this._computedAvailableSize;
    }
    getRectangleSmallSize() {
      return this._scrollbarSize;
    }
    isNeeded() {
      return this._computedIsNeeded;
    }
    getSliderSize() {
      return this._computedSliderSize;
    }
    getSliderPosition() {
      return this._computedSliderPosition;
    }
    getDesiredScrollPositionFromOffset(e11) {
      if (!this._computedIsNeeded) return 0;
      let t10 = e11 - this._arrowSize - this._computedSliderSize / 2;
      return Math.round(t10 / this._computedSliderRatio);
    }
    getDesiredScrollPositionFromOffsetPaged(e11) {
      if (!this._computedIsNeeded) return 0;
      let t10 = e11 - this._arrowSize, n10 = this._scrollPosition;
      return t10 < this._computedSliderPosition ? n10 -= this._visibleSize : n10 += this._visibleSize, n10;
    }
    getDesiredScrollPositionFromDelta(e11) {
      if (!this._computedIsNeeded) return 0;
      let t10 = this._computedSliderPosition + e11;
      return Math.round(t10 / this._computedSliderRatio);
    }
  }, KE = class extends UE {
    constructor(e10, t10, n10) {
      let r10 = e10.getScrollDimensions(), i10 = e10.getCurrentScrollPosition();
      if (super({
        lazyRender: t10.lazyRender,
        host: n10,
        scrollbarState: new GE(t10.horizontalHasArrows ? t10.arrowSize : 0, t10.horizontal === 2 ? 0 : t10.horizontalScrollbarSize, t10.vertical === 2 ? 0 : t10.verticalScrollbarSize, r10.width, r10.scrollWidth, i10.scrollLeft),
        visibility: t10.horizontal,
        extraScrollbarClassName: `horizontal`,
        scrollable: e10,
        scrollByPage: t10.scrollByPage
      }), t10.horizontalHasArrows) {
        let e11 = (t10.arrowSize - zE) / 2, n11 = (t10.horizontalScrollbarSize - zE) / 2;
        this._createArrow({
          className: `scra`,
          icon: L.scrollbarButtonLeft,
          top: n11,
          left: e11,
          bottom: void 0,
          right: void 0,
          bgWidth: t10.arrowSize,
          bgHeight: t10.horizontalScrollbarSize,
          onActivate: () => this._host.onMouseWheel(new qc(null, 1, 0))
        }), this._createArrow({
          className: `scra`,
          icon: L.scrollbarButtonRight,
          top: n11,
          left: void 0,
          bottom: void 0,
          right: e11,
          bgWidth: t10.arrowSize,
          bgHeight: t10.horizontalScrollbarSize,
          onActivate: () => this._host.onMouseWheel(new qc(null, -1, 0))
        });
      }
      this._createSlider(Math.floor((t10.horizontalScrollbarSize - t10.horizontalSliderSize) / 2), 0, void 0, t10.horizontalSliderSize);
    }
    _updateSlider(e10, t10) {
      this.slider.setWidth(e10), this.slider.setLeft(t10);
    }
    _renderDomNode(e10, t10) {
      this.domNode.setWidth(e10), this.domNode.setHeight(t10), this.domNode.setLeft(0), this.domNode.setBottom(0);
    }
    onDidScroll(e10) {
      return this._shouldRender = this._onElementScrollSize(e10.scrollWidth) || this._shouldRender, this._shouldRender = this._onElementScrollPosition(e10.scrollLeft) || this._shouldRender, this._shouldRender = this._onElementSize(e10.width) || this._shouldRender, this._shouldRender;
    }
    _pointerDownRelativePosition(e10, t10) {
      return e10;
    }
    _sliderPointerPosition(e10) {
      return e10.pageX;
    }
    _sliderOrthogonalPointerPosition(e10) {
      return e10.pageY;
    }
    _updateScrollbarSize(e10) {
      this.slider.setHeight(e10);
    }
    writeScrollPosition(e10, t10) {
      e10.scrollLeft = t10;
    }
    updateOptions(e10) {
      this.updateScrollbarSize(e10.horizontal === 2 ? 0 : e10.horizontalScrollbarSize), this._scrollbarState.setOppositeScrollbarSize(e10.vertical === 2 ? 0 : e10.verticalScrollbarSize), this._visibilityController.setVisibility(e10.horizontal), this._scrollByPage = e10.scrollByPage;
    }
  }, qE = class extends UE {
    constructor(e10, t10, n10) {
      let r10 = e10.getScrollDimensions(), i10 = e10.getCurrentScrollPosition();
      if (super({
        lazyRender: t10.lazyRender,
        host: n10,
        scrollbarState: new GE(t10.verticalHasArrows ? t10.arrowSize : 0, t10.vertical === 2 ? 0 : t10.verticalScrollbarSize, 0, r10.height, r10.scrollHeight, i10.scrollTop),
        visibility: t10.vertical,
        extraScrollbarClassName: `vertical`,
        scrollable: e10,
        scrollByPage: t10.scrollByPage
      }), t10.verticalHasArrows) {
        let e11 = (t10.arrowSize - zE) / 2, n11 = (t10.verticalScrollbarSize - zE) / 2;
        this._createArrow({
          className: `scra`,
          icon: L.scrollbarButtonUp,
          top: e11,
          left: n11,
          bottom: void 0,
          right: void 0,
          bgWidth: t10.verticalScrollbarSize,
          bgHeight: t10.arrowSize,
          onActivate: () => this._host.onMouseWheel(new qc(null, 0, 1))
        }), this._createArrow({
          className: `scra`,
          icon: L.scrollbarButtonDown,
          top: void 0,
          left: n11,
          bottom: e11,
          right: void 0,
          bgWidth: t10.verticalScrollbarSize,
          bgHeight: t10.arrowSize,
          onActivate: () => this._host.onMouseWheel(new qc(null, 0, -1))
        });
      }
      this._createSlider(0, Math.floor((t10.verticalScrollbarSize - t10.verticalSliderSize) / 2), t10.verticalSliderSize, void 0);
    }
    _updateSlider(e10, t10) {
      this.slider.setHeight(e10), this.slider.setTop(t10);
    }
    _renderDomNode(e10, t10) {
      this.domNode.setWidth(t10), this.domNode.setHeight(e10), this.domNode.setRight(0), this.domNode.setTop(0);
    }
    onDidScroll(e10) {
      return this._shouldRender = this._onElementScrollSize(e10.scrollHeight) || this._shouldRender, this._shouldRender = this._onElementScrollPosition(e10.scrollTop) || this._shouldRender, this._shouldRender = this._onElementSize(e10.height) || this._shouldRender, this._shouldRender;
    }
    _pointerDownRelativePosition(e10, t10) {
      return t10;
    }
    _sliderPointerPosition(e10) {
      return e10.pageY;
    }
    _sliderOrthogonalPointerPosition(e10) {
      return e10.pageX;
    }
    _updateScrollbarSize(e10) {
      this.slider.setWidth(e10);
    }
    writeScrollPosition(e10, t10) {
      e10.scrollTop = t10;
    }
    updateOptions(e10) {
      this.updateScrollbarSize(e10.vertical === 2 ? 0 : e10.verticalScrollbarSize), this._scrollbarState.setOppositeScrollbarSize(0), this._visibilityController.setVisibility(e10.vertical), this._scrollByPage = e10.scrollByPage;
    }
  }, JE = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10) {
      this._forceIntegerValues = e11, this._scrollStateBrand = void 0, this._forceIntegerValues && (t10 |= 0, n10 |= 0, r10 |= 0, i10 |= 0, a10 |= 0, o10 |= 0), this.rawScrollLeft = r10, this.rawScrollTop = o10, t10 < 0 && (t10 = 0), r10 + t10 > n10 && (r10 = n10 - t10), r10 < 0 && (r10 = 0), i10 < 0 && (i10 = 0), o10 + i10 > a10 && (o10 = a10 - i10), o10 < 0 && (o10 = 0), this.width = t10, this.scrollWidth = n10, this.scrollLeft = r10, this.height = i10, this.scrollHeight = a10, this.scrollTop = o10;
    }
    equals(e11) {
      return this.rawScrollLeft === e11.rawScrollLeft && this.rawScrollTop === e11.rawScrollTop && this.width === e11.width && this.scrollWidth === e11.scrollWidth && this.scrollLeft === e11.scrollLeft && this.height === e11.height && this.scrollHeight === e11.scrollHeight && this.scrollTop === e11.scrollTop;
    }
    withScrollDimensions(t10, n10) {
      return new e10(this._forceIntegerValues, t10.width === void 0 ? this.width : t10.width, t10.scrollWidth === void 0 ? this.scrollWidth : t10.scrollWidth, n10 ? this.rawScrollLeft : this.scrollLeft, t10.height === void 0 ? this.height : t10.height, t10.scrollHeight === void 0 ? this.scrollHeight : t10.scrollHeight, n10 ? this.rawScrollTop : this.scrollTop);
    }
    withScrollPosition(t10) {
      return new e10(this._forceIntegerValues, this.width, this.scrollWidth, t10.scrollLeft === void 0 ? this.rawScrollLeft : t10.scrollLeft, this.height, this.scrollHeight, t10.scrollTop === void 0 ? this.rawScrollTop : t10.scrollTop);
    }
    createScrollEvent(e11, t10) {
      let n10 = this.width !== e11.width, r10 = this.scrollWidth !== e11.scrollWidth, i10 = this.scrollLeft !== e11.scrollLeft, a10 = this.height !== e11.height, o10 = this.scrollHeight !== e11.scrollHeight, s10 = this.scrollTop !== e11.scrollTop;
      return {
        inSmoothScrolling: t10,
        oldWidth: e11.width,
        oldScrollWidth: e11.scrollWidth,
        oldScrollLeft: e11.scrollLeft,
        width: this.width,
        scrollWidth: this.scrollWidth,
        scrollLeft: this.scrollLeft,
        oldHeight: e11.height,
        oldScrollHeight: e11.scrollHeight,
        oldScrollTop: e11.scrollTop,
        height: this.height,
        scrollHeight: this.scrollHeight,
        scrollTop: this.scrollTop,
        widthChanged: n10,
        scrollWidthChanged: r10,
        scrollLeftChanged: i10,
        heightChanged: a10,
        scrollHeightChanged: o10,
        scrollTopChanged: s10
      };
    }
  }, YE = class extends j {
    constructor(e10) {
      super(), this._scrollableBrand = void 0, this._onScroll = this._register(new N()), this.onScroll = this._onScroll.event, this._smoothScrollDuration = e10.smoothScrollDuration, this._scheduleAtNextAnimationFrame = e10.scheduleAtNextAnimationFrame, this._state = new JE(e10.forceIntegerValues, 0, 0, 0, 0, 0, 0), this._smoothScrolling = null;
    }
    dispose() {
      this._smoothScrolling && (this._smoothScrolling.dispose(), this._smoothScrolling = null), super.dispose();
    }
    setSmoothScrollDuration(e10) {
      this._smoothScrollDuration = e10;
    }
    validateScrollPosition(e10) {
      return this._state.withScrollPosition(e10);
    }
    getScrollDimensions() {
      return this._state;
    }
    setScrollDimensions(e10, t10) {
      var _a3;
      let n10 = this._state.withScrollDimensions(e10, t10);
      this._setState(n10, !!this._smoothScrolling), (_a3 = this._smoothScrolling) == null ? void 0 : _a3.acceptScrollDimensions(this._state);
    }
    getFutureScrollPosition() {
      return this._smoothScrolling ? this._smoothScrolling.to : this._state;
    }
    getCurrentScrollPosition() {
      return this._state;
    }
    setScrollPositionNow(e10) {
      let t10 = this._state.withScrollPosition(e10);
      this._smoothScrolling && (this._smoothScrolling.dispose(), this._smoothScrolling = null), this._setState(t10, false);
    }
    setScrollPositionSmooth(e10, t10) {
      if (this._smoothScrollDuration === 0) return this.setScrollPositionNow(e10);
      if (this._smoothScrolling) {
        e10 = {
          scrollLeft: e10.scrollLeft === void 0 ? this._smoothScrolling.to.scrollLeft : e10.scrollLeft,
          scrollTop: e10.scrollTop === void 0 ? this._smoothScrolling.to.scrollTop : e10.scrollTop
        };
        let n10 = this._state.withScrollPosition(e10);
        if (this._smoothScrolling.to.scrollLeft === n10.scrollLeft && this._smoothScrolling.to.scrollTop === n10.scrollTop) return;
        let r10;
        r10 = t10 ? new $E(this._smoothScrolling.from, n10, this._smoothScrolling.startTime, this._smoothScrolling.duration) : this._smoothScrolling.combine(this._state, n10, this._smoothScrollDuration), this._smoothScrolling.dispose(), this._smoothScrolling = r10;
      } else {
        let t11 = this._state.withScrollPosition(e10);
        this._smoothScrolling = $E.start(this._state, t11, this._smoothScrollDuration);
      }
      this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {
        this._smoothScrolling && (this._smoothScrolling.animationFrameDisposable = null, this._performSmoothScrolling());
      });
    }
    hasPendingScrollAnimation() {
      return !!this._smoothScrolling;
    }
    _performSmoothScrolling() {
      if (!this._smoothScrolling) return;
      let e10 = this._smoothScrolling.tick(), t10 = this._state.withScrollPosition(e10);
      if (this._setState(t10, true), this._smoothScrolling) {
        if (e10.isDone) {
          this._smoothScrolling.dispose(), this._smoothScrolling = null;
          return;
        }
        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {
          this._smoothScrolling && (this._smoothScrolling.animationFrameDisposable = null, this._performSmoothScrolling());
        });
      }
    }
    _setState(e10, t10) {
      let n10 = this._state;
      n10.equals(e10) || (this._state = e10, this._onScroll.fire(this._state.createScrollEvent(n10, t10)));
    }
  }, XE = class {
    constructor(e10, t10, n10) {
      this.scrollLeft = e10, this.scrollTop = t10, this.isDone = n10;
    }
  };
  function ZE(e10, t10) {
    let n10 = t10 - e10;
    return function(t11) {
      return e10 + n10 * tD(t11);
    };
  }
  function QE(e10, t10, n10) {
    return function(r10) {
      return r10 < n10 ? e10(r10 / n10) : t10((r10 - n10) / (1 - n10));
    };
  }
  var $E = class e10 {
    constructor(e11, t10, n10, r10) {
      this.from = e11, this.to = t10, this.duration = r10, this.startTime = n10, this.animationFrameDisposable = null, this._initAnimations();
    }
    _initAnimations() {
      this.scrollLeft = this._initAnimation(this.from.scrollLeft, this.to.scrollLeft, this.to.width), this.scrollTop = this._initAnimation(this.from.scrollTop, this.to.scrollTop, this.to.height);
    }
    _initAnimation(e11, t10, n10) {
      let r10 = Math.abs(e11 - t10);
      if (r10 > 2.5 * n10) {
        let r11, i10;
        return e11 < t10 ? (r11 = e11 + 0.75 * n10, i10 = t10 - 0.75 * n10) : (r11 = e11 - 0.75 * n10, i10 = t10 + 0.75 * n10), QE(ZE(e11, r11), ZE(i10, t10), 0.33);
      }
      return ZE(e11, t10);
    }
    dispose() {
      this.animationFrameDisposable !== null && (this.animationFrameDisposable.dispose(), this.animationFrameDisposable = null);
    }
    acceptScrollDimensions(e11) {
      this.to = e11.withScrollPosition(this.to), this._initAnimations();
    }
    tick() {
      return this._tick(Date.now());
    }
    _tick(e11) {
      let t10 = (e11 - this.startTime) / this.duration;
      if (t10 < 1) {
        let e12 = this.scrollLeft(t10), n10 = this.scrollTop(t10);
        return new XE(e12, n10, false);
      }
      return new XE(this.to.scrollLeft, this.to.scrollTop, true);
    }
    combine(t10, n10, r10) {
      return e10.start(t10, n10, r10);
    }
    static start(t10, n10, r10) {
      r10 += 10;
      let i10 = Date.now() - 10;
      return new e10(t10, n10, i10, r10);
    }
  };
  function eD(e10) {
    return e10 ** 3;
  }
  function tD(e10) {
    return 1 - eD(1 - e10);
  }
  const nD = 500, rD = 50, iD = true;
  let aD, oD, sD, lD;
  aD = class {
    constructor(e10, t10, n10) {
      this.timestamp = e10, this.deltaX = t10, this.deltaY = n10, this.score = 0;
    }
  };
  oD = (__2 = class {
    constructor() {
      this._capacity = 5, this._memory = [], this._front = -1, this._rear = -1;
    }
    isPhysicalMouseWheel() {
      if (this._front === -1 && this._rear === -1) return false;
      let e10 = 1, t10 = 0, n10 = 1, r10 = this._rear;
      do {
        let i10 = r10 === this._front ? e10 : 2 ** -n10;
        if (e10 -= i10, t10 += this._memory[r10].score * i10, r10 === this._front) break;
        r10 = (this._capacity + r10 - 1) % this._capacity, n10++;
      } while (true);
      return t10 <= 0.5;
    }
    acceptStandardWheelEvent(e10) {
      if (wc) {
        let t10 = R(e10.browserEvent), n10 = bc(t10);
        this.accept(Date.now(), e10.deltaX * n10, e10.deltaY * n10);
      } else this.accept(Date.now(), e10.deltaX, e10.deltaY);
    }
    accept(e10, t10, n10) {
      let r10 = null, i10 = new aD(e10, t10, n10);
      this._front === -1 && this._rear === -1 ? (this._memory[0] = i10, this._front = 0, this._rear = 0) : (r10 = this._memory[this._rear], this._rear = (this._rear + 1) % this._capacity, this._rear === this._front && (this._front = (this._front + 1) % this._capacity), this._memory[this._rear] = i10), i10.score = this._computeScore(i10, r10);
    }
    _computeScore(e10, t10) {
      if (Math.abs(e10.deltaX) > 0 && Math.abs(e10.deltaY) > 0) return 1;
      let n10 = 0.5;
      if ((!this._isAlmostInt(e10.deltaX) || !this._isAlmostInt(e10.deltaY)) && (n10 += 0.25), t10) {
        let r10 = Math.abs(e10.deltaX), i10 = Math.abs(e10.deltaY), a10 = Math.abs(t10.deltaX), o10 = Math.abs(t10.deltaY), s10 = Math.max(Math.min(r10, a10), 1), c10 = Math.max(Math.min(i10, o10), 1), l10 = Math.max(r10, a10), u10 = Math.max(i10, o10), d10 = l10 % s10 === 0 && u10 % c10 === 0;
        d10 && (n10 -= 0.5);
      }
      return Math.min(Math.max(n10, 0), 1);
    }
    _isAlmostInt(e10) {
      let t10 = Math.abs(Math.round(e10) - e10);
      return t10 < 0.01;
    }
  }, __2.INSTANCE = new __2(), __2);
  sD = class extends RE {
    get options() {
      return this._options;
    }
    constructor(e10, t10, n10) {
      super(), this._onScroll = this._register(new N()), this.onScroll = this._onScroll.event, this._onWillScroll = this._register(new N()), e10.style.overflow = `hidden`, this._options = dD(t10), this._scrollable = n10, this._register(this._scrollable.onScroll((e11) => {
        this._onWillScroll.fire(e11), this._onDidScroll(e11), this._onScroll.fire(e11);
      }));
      let r10 = {
        onMouseWheel: (e11) => this._onMouseWheel(e11),
        onDragStart: () => this._onDragStart(),
        onDragEnd: () => this._onDragEnd()
      };
      this._verticalScrollbar = this._register(new qE(this._scrollable, this._options, r10)), this._horizontalScrollbar = this._register(new KE(this._scrollable, this._options, r10)), this._domNode = document.createElement(`div`), this._domNode.className = `monaco-scrollable-element ` + this._options.className, this._domNode.setAttribute(`role`, `presentation`), this._domNode.style.position = `relative`, this._domNode.style.overflow = `hidden`, this._domNode.appendChild(e10), this._domNode.appendChild(this._horizontalScrollbar.domNode.domNode), this._domNode.appendChild(this._verticalScrollbar.domNode.domNode), this._options.useShadows ? (this._leftShadowDomNode = Nf(document.createElement(`div`)), this._leftShadowDomNode.setClassName(`shadow`), this._domNode.appendChild(this._leftShadowDomNode.domNode), this._topShadowDomNode = Nf(document.createElement(`div`)), this._topShadowDomNode.setClassName(`shadow`), this._domNode.appendChild(this._topShadowDomNode.domNode), this._topLeftShadowDomNode = Nf(document.createElement(`div`)), this._topLeftShadowDomNode.setClassName(`shadow`), this._domNode.appendChild(this._topLeftShadowDomNode.domNode)) : (this._leftShadowDomNode = null, this._topShadowDomNode = null, this._topLeftShadowDomNode = null), this._listenOnDomNode = this._options.listenOnDomNode || this._domNode, this._mouseWheelToDispose = [], this._setListeningToMouseWheel(this._options.handleMouseWheel), this.onmouseover(this._listenOnDomNode, (e11) => this._onMouseOver(e11)), this.onmouseleave(this._listenOnDomNode, (e11) => this._onMouseLeave(e11)), this._hideTimeout = this._register(new ol()), this._isDragging = false, this._mouseIsOver = false, this._shouldRender = true, this._revealOnScroll = true;
    }
    dispose() {
      this._mouseWheelToDispose = Rr(this._mouseWheelToDispose), super.dispose();
    }
    getDomNode() {
      return this._domNode;
    }
    getOverviewRulerLayoutInfo() {
      return {
        parent: this._domNode,
        insertBefore: this._verticalScrollbar.domNode.domNode
      };
    }
    delegateVerticalScrollbarPointerDown(e10) {
      this._verticalScrollbar.delegatePointerDown(e10);
    }
    getScrollDimensions() {
      return this._scrollable.getScrollDimensions();
    }
    setScrollDimensions(e10) {
      this._scrollable.setScrollDimensions(e10, false);
    }
    updateClassName(e10) {
      this._options.className = e10, E && (this._options.className += ` mac`), this._domNode.className = `monaco-scrollable-element ` + this._options.className;
    }
    updateOptions(e10) {
      e10.handleMouseWheel !== void 0 && (this._options.handleMouseWheel = e10.handleMouseWheel, this._setListeningToMouseWheel(this._options.handleMouseWheel)), e10.mouseWheelScrollSensitivity !== void 0 && (this._options.mouseWheelScrollSensitivity = e10.mouseWheelScrollSensitivity), e10.fastScrollSensitivity !== void 0 && (this._options.fastScrollSensitivity = e10.fastScrollSensitivity), e10.scrollPredominantAxis !== void 0 && (this._options.scrollPredominantAxis = e10.scrollPredominantAxis), e10.horizontal !== void 0 && (this._options.horizontal = e10.horizontal), e10.vertical !== void 0 && (this._options.vertical = e10.vertical), e10.horizontalScrollbarSize !== void 0 && (this._options.horizontalScrollbarSize = e10.horizontalScrollbarSize), e10.verticalScrollbarSize !== void 0 && (this._options.verticalScrollbarSize = e10.verticalScrollbarSize), e10.scrollByPage !== void 0 && (this._options.scrollByPage = e10.scrollByPage), this._horizontalScrollbar.updateOptions(this._options), this._verticalScrollbar.updateOptions(this._options), this._options.lazyRender || this._render();
    }
    delegateScrollFromMouseWheelEvent(e10) {
      this._onMouseWheel(new qc(e10));
    }
    _setListeningToMouseWheel(e10) {
      let t10 = this._mouseWheelToDispose.length > 0;
      if (t10 !== e10 && (this._mouseWheelToDispose = Rr(this._mouseWheelToDispose), e10)) {
        let e11 = (e12) => {
          this._onMouseWheel(new qc(e12));
        };
        this._mouseWheelToDispose.push(z(this._listenOnDomNode, B.MOUSE_WHEEL, e11, {
          passive: false
        }));
      }
    }
    _onMouseWheel(e10) {
      var _a3;
      if ((_a3 = e10.browserEvent) == null ? void 0 : _a3.defaultPrevented) return;
      let t10 = oD.INSTANCE;
      iD && t10.acceptStandardWheelEvent(e10);
      let n10 = false;
      if (e10.deltaY || e10.deltaX) {
        let r11 = e10.deltaY * this._options.mouseWheelScrollSensitivity, i10 = e10.deltaX * this._options.mouseWheelScrollSensitivity;
        this._options.scrollPredominantAxis && (this._options.scrollYToX && i10 + r11 === 0 ? i10 = r11 = 0 : Math.abs(r11) >= Math.abs(i10) ? i10 = 0 : r11 = 0), this._options.flipAxes && ([r11, i10] = [
          i10,
          r11
        ]);
        let a10 = !E && e10.browserEvent && e10.browserEvent.shiftKey;
        (this._options.scrollYToX || a10) && !i10 && (i10 = r11, r11 = 0), e10.browserEvent && e10.browserEvent.altKey && (i10 *= this._options.fastScrollSensitivity, r11 *= this._options.fastScrollSensitivity);
        let o10 = this._scrollable.getFutureScrollPosition(), s10 = {};
        if (r11) {
          let e11 = rD * r11, t11 = o10.scrollTop - (e11 < 0 ? Math.floor(e11) : Math.ceil(e11));
          this._verticalScrollbar.writeScrollPosition(s10, t11);
        }
        if (i10) {
          let e11 = rD * i10, t11 = o10.scrollLeft - (e11 < 0 ? Math.floor(e11) : Math.ceil(e11));
          this._horizontalScrollbar.writeScrollPosition(s10, t11);
        }
        if (s10 = this._scrollable.validateScrollPosition(s10), o10.scrollLeft !== s10.scrollLeft || o10.scrollTop !== s10.scrollTop) {
          let e11 = iD && this._options.mouseWheelSmoothScroll && t10.isPhysicalMouseWheel();
          e11 ? this._scrollable.setScrollPositionSmooth(s10) : this._scrollable.setScrollPositionNow(s10), n10 = true;
        }
      }
      let r10 = n10;
      !r10 && this._options.alwaysConsumeMouseWheel && (r10 = true), !r10 && this._options.consumeMouseWheelIfScrollbarIsNeeded && (this._verticalScrollbar.isNeeded() || this._horizontalScrollbar.isNeeded()) && (r10 = true), r10 && (e10.preventDefault(), e10.stopPropagation());
    }
    _onDidScroll(e10) {
      this._shouldRender = this._horizontalScrollbar.onDidScroll(e10) || this._shouldRender, this._shouldRender = this._verticalScrollbar.onDidScroll(e10) || this._shouldRender, this._options.useShadows && (this._shouldRender = true), this._revealOnScroll && this._reveal(), this._options.lazyRender || this._render();
    }
    renderNow() {
      if (!this._options.lazyRender) throw Error("Please use `lazyRender` together with `renderNow`!");
      this._render();
    }
    _render() {
      if (this._shouldRender && (this._shouldRender = false, this._horizontalScrollbar.render(), this._verticalScrollbar.render(), this._options.useShadows)) {
        let e10 = this._scrollable.getCurrentScrollPosition(), t10 = e10.scrollTop > 0, n10 = e10.scrollLeft > 0, r10 = n10 ? ` left` : ``, i10 = t10 ? ` top` : ``, a10 = n10 || t10 ? ` top-left-corner` : ``;
        this._leftShadowDomNode.setClassName(`shadow${r10}`), this._topShadowDomNode.setClassName(`shadow${i10}`), this._topLeftShadowDomNode.setClassName(`shadow${a10}${i10}${r10}`);
      }
    }
    _onDragStart() {
      this._isDragging = true, this._reveal();
    }
    _onDragEnd() {
      this._isDragging = false, this._hide();
    }
    _onMouseLeave(e10) {
      this._mouseIsOver = false, this._hide();
    }
    _onMouseOver(e10) {
      this._mouseIsOver = true, this._reveal();
    }
    _reveal() {
      this._verticalScrollbar.beginReveal(), this._horizontalScrollbar.beginReveal(), this._scheduleHide();
    }
    _hide() {
      !this._mouseIsOver && !this._isDragging && (this._verticalScrollbar.beginHide(), this._horizontalScrollbar.beginHide());
    }
    _scheduleHide() {
      !this._mouseIsOver && !this._isDragging && this._hideTimeout.cancelAndSet(() => this._hide(), nD);
    }
  };
  cD = class extends sD {
    constructor(e10, t10) {
      t10 || (t10 = {}), t10.mouseWheelSmoothScroll = false;
      let n10 = new YE({
        forceIntegerValues: true,
        smoothScrollDuration: 0,
        scheduleAtNextAnimationFrame: (t11) => sd(R(e10), t11)
      });
      super(e10, t10, n10), this._register(n10);
    }
    setScrollPosition(e10) {
      this._scrollable.setScrollPositionNow(e10);
    }
  };
  lD = class extends sD {
    constructor(e10, t10, n10) {
      super(e10, t10, n10);
    }
    setScrollPosition(e10) {
      e10.reuseAnimation ? this._scrollable.setScrollPositionSmooth(e10, e10.reuseAnimation) : this._scrollable.setScrollPositionNow(e10);
    }
    getScrollPosition() {
      return this._scrollable.getCurrentScrollPosition();
    }
  };
  uD = class extends sD {
    constructor(e10, t10) {
      t10 || (t10 = {}), t10.mouseWheelSmoothScroll = false;
      let n10 = new YE({
        forceIntegerValues: false,
        smoothScrollDuration: 0,
        scheduleAtNextAnimationFrame: (t11) => sd(R(e10), t11)
      });
      super(e10, t10, n10), this._register(n10), this._element = e10, this._register(this.onScroll((e11) => {
        e11.scrollTopChanged && (this._element.scrollTop = e11.scrollTop), e11.scrollLeftChanged && (this._element.scrollLeft = e11.scrollLeft);
      })), this.scanDomNode();
    }
    setScrollPosition(e10) {
      this._scrollable.setScrollPositionNow(e10);
    }
    getScrollPosition() {
      return this._scrollable.getCurrentScrollPosition();
    }
    scanDomNode() {
      this.setScrollDimensions({
        width: this._element.clientWidth,
        scrollWidth: this._element.scrollWidth,
        height: this._element.clientHeight,
        scrollHeight: this._element.scrollHeight
      }), this.setScrollPosition({
        scrollLeft: this._element.scrollLeft,
        scrollTop: this._element.scrollTop
      });
    }
  };
  function dD(e10) {
    let t10 = {
      lazyRender: e10.lazyRender === void 0 ? false : e10.lazyRender,
      className: e10.className === void 0 ? `` : e10.className,
      useShadows: e10.useShadows === void 0 ? true : e10.useShadows,
      handleMouseWheel: e10.handleMouseWheel === void 0 ? true : e10.handleMouseWheel,
      flipAxes: e10.flipAxes === void 0 ? false : e10.flipAxes,
      consumeMouseWheelIfScrollbarIsNeeded: e10.consumeMouseWheelIfScrollbarIsNeeded === void 0 ? false : e10.consumeMouseWheelIfScrollbarIsNeeded,
      alwaysConsumeMouseWheel: e10.alwaysConsumeMouseWheel === void 0 ? false : e10.alwaysConsumeMouseWheel,
      scrollYToX: e10.scrollYToX === void 0 ? false : e10.scrollYToX,
      mouseWheelScrollSensitivity: e10.mouseWheelScrollSensitivity === void 0 ? 1 : e10.mouseWheelScrollSensitivity,
      fastScrollSensitivity: e10.fastScrollSensitivity === void 0 ? 5 : e10.fastScrollSensitivity,
      scrollPredominantAxis: e10.scrollPredominantAxis === void 0 ? true : e10.scrollPredominantAxis,
      mouseWheelSmoothScroll: e10.mouseWheelSmoothScroll === void 0 ? true : e10.mouseWheelSmoothScroll,
      arrowSize: e10.arrowSize === void 0 ? 11 : e10.arrowSize,
      listenOnDomNode: e10.listenOnDomNode === void 0 ? null : e10.listenOnDomNode,
      horizontal: e10.horizontal === void 0 ? 1 : e10.horizontal,
      horizontalScrollbarSize: e10.horizontalScrollbarSize === void 0 ? 10 : e10.horizontalScrollbarSize,
      horizontalSliderSize: e10.horizontalSliderSize === void 0 ? 0 : e10.horizontalSliderSize,
      horizontalHasArrows: e10.horizontalHasArrows === void 0 ? false : e10.horizontalHasArrows,
      vertical: e10.vertical === void 0 ? 1 : e10.vertical,
      verticalScrollbarSize: e10.verticalScrollbarSize === void 0 ? 10 : e10.verticalScrollbarSize,
      verticalHasArrows: e10.verticalHasArrows === void 0 ? false : e10.verticalHasArrows,
      verticalSliderSize: e10.verticalSliderSize === void 0 ? 0 : e10.verticalSliderSize,
      scrollByPage: e10.scrollByPage === void 0 ? false : e10.scrollByPage
    };
    return t10.horizontalSliderSize = e10.horizontalSliderSize === void 0 ? t10.horizontalScrollbarSize : e10.horizontalSliderSize, t10.verticalSliderSize = e10.verticalSliderSize === void 0 ? t10.verticalScrollbarSize : e10.verticalSliderSize, E && (t10.className += ` mac`), t10;
  }
  const fD = H;
  pD = class extends j {
    constructor() {
      super(), this.containerDomNode = document.createElement(`div`), this.containerDomNode.className = `monaco-hover`, this.containerDomNode.tabIndex = 0, this.containerDomNode.setAttribute(`role`, `tooltip`), this.contentsDomNode = document.createElement(`div`), this.contentsDomNode.className = `monaco-hover-content`, this.scrollbar = this._register(new uD(this.contentsDomNode, {
        consumeMouseWheelIfScrollbarIsNeeded: true
      })), this.containerDomNode.appendChild(this.scrollbar.getDomNode());
    }
    onContentsChanged() {
      this.scrollbar.scanDomNode();
    }
  };
  mD = class e10 extends j {
    static render(t10, n10, r10) {
      return new e10(t10, n10, r10);
    }
    constructor(e11, t10, n10) {
      super(), this.actionLabel = t10.label, this.actionKeybindingLabel = n10, this.actionContainer = V(e11, fD(`div.action-container`)), this.actionContainer.setAttribute(`tabindex`, `0`), this.action = V(this.actionContainer, fD(`a.action`)), this.action.setAttribute(`role`, `button`), t10.iconClass && V(this.action, fD(`span.icon.${t10.iconClass}`));
      let r10 = V(this.action, fD(`span`));
      r10.textContent = n10 ? `${t10.label} (${n10})` : t10.label, this._store.add(new gD(this.actionContainer, t10.run)), this._store.add(new _D(this.actionContainer, t10.run, [
        3,
        10
      ])), this.setEnabled(true);
    }
    setEnabled(e11) {
      e11 ? (this.actionContainer.classList.remove(`disabled`), this.actionContainer.removeAttribute(`aria-disabled`)) : (this.actionContainer.classList.add(`disabled`), this.actionContainer.setAttribute(`aria-disabled`, `true`));
    }
  };
  hD = function(e10, t10) {
    return e10 && t10 ? T(`acessibleViewHint`, `Inspect this in the accessible view with {0}.`, t10) : e10 ? T(`acessibleViewHintNoKbOpen`, `Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding.`) : ``;
  };
  gD = class extends j {
    constructor(e10, t10) {
      super(), this._register(z(e10, B.CLICK, (n10) => {
        n10.stopPropagation(), n10.preventDefault(), t10(e10);
      }));
    }
  };
  _D = class extends j {
    constructor(e10, t10, n10) {
      super(), this._register(z(e10, B.KEY_DOWN, (r10) => {
        let i10 = new Hc(r10);
        n10.some((e11) => i10.equals(e11)) && (r10.stopPropagation(), r10.preventDefault(), t10(e10));
      }));
    }
  };
  vD = Xf(`openerService`);
  function yD(e10) {
    let t10, n10 = /^L?(\d+)(?:,(\d+))?(-L?(\d+)(?:,(\d+))?)?/.exec(e10.fragment);
    return n10 && (t10 = {
      startLineNumber: parseInt(n10[1]),
      startColumn: n10[2] ? parseInt(n10[2]) : 1,
      endLineNumber: n10[4] ? parseInt(n10[4]) : void 0,
      endColumn: n10[4] ? n10[5] ? parseInt(n10[5]) : 1 : void 0
    }, e10 = e10.with({
      fragment: ``
    })), {
      selection: t10,
      uri: e10
    };
  }
  bD = class {
    get event() {
      return this.emitter.event;
    }
    constructor(e10, t10, n10) {
      let r10 = (e11) => this.emitter.fire(e11);
      this.emitter = new N({
        onWillAddFirstListener: () => e10.addEventListener(t10, r10, n10),
        onDidRemoveLastListener: () => e10.removeEventListener(t10, r10, n10)
      });
    }
    dispose() {
      this.emitter.dispose();
    }
  };
  function xD(e10, t10 = {}) {
    let n10 = CD(t10);
    return n10.textContent = e10, n10;
  }
  function SD(e10, t10 = {}) {
    let n10 = CD(t10);
    return TD(n10, ED(e10, !!t10.renderCodeSegments), t10.actionHandler, t10.renderCodeSegments), n10;
  }
  function CD(e10) {
    let t10 = e10.inline ? `span` : `div`, n10 = document.createElement(t10);
    return e10.className && (n10.className = e10.className), n10;
  }
  var wD = class {
    constructor(e10) {
      this.source = e10, this.index = 0;
    }
    eos() {
      return this.index >= this.source.length;
    }
    next() {
      let e10 = this.peek();
      return this.advance(), e10;
    }
    peek() {
      return this.source[this.index];
    }
    advance() {
      this.index++;
    }
  };
  function TD(e10, t10, n10, r10) {
    let i10;
    if (t10.type === 2) i10 = document.createTextNode(t10.content || ``);
    else if (t10.type === 3) i10 = document.createElement(`b`);
    else if (t10.type === 4) i10 = document.createElement(`i`);
    else if (t10.type === 7 && r10) i10 = document.createElement(`code`);
    else if (t10.type === 5 && n10) {
      let e11 = document.createElement(`a`);
      n10.disposables.add(td(e11, `click`, (e12) => {
        n10.callback(String(t10.index), e12);
      })), i10 = e11;
    } else t10.type === 8 ? i10 = document.createElement(`br`) : t10.type === 1 && (i10 = e10);
    i10 && e10 !== i10 && e10.appendChild(i10), i10 && Array.isArray(t10.children) && t10.children.forEach((e11) => {
      TD(i10, e11, n10, r10);
    });
  }
  function ED(e10, t10) {
    let n10 = {
      type: 1,
      children: []
    }, r10 = 0, i10 = n10, a10 = [], o10 = new wD(e10);
    for (; !o10.eos(); ) {
      let e11 = o10.next(), n11 = e11 === `\\` && OD(o10.peek(), t10) !== 0;
      if (n11 && (e11 = o10.next()), !n11 && DD(e11, t10) && e11 === o10.peek()) {
        o10.advance(), i10.type === 2 && (i10 = a10.pop());
        let n12 = OD(e11, t10);
        if (i10.type === n12 || i10.type === 5 && n12 === 6) i10 = a10.pop();
        else {
          let e12 = {
            type: n12,
            children: []
          };
          n12 === 5 && (e12.index = r10, r10++), i10.children.push(e12), a10.push(i10), i10 = e12;
        }
      } else if (e11 === `
`) i10.type === 2 && (i10 = a10.pop()), i10.children.push({
        type: 8
      });
      else if (i10.type !== 2) {
        let t11 = {
          type: 2,
          content: e11
        };
        i10.children.push(t11), a10.push(i10), i10 = t11;
      } else i10.content += e11;
    }
    return i10.type === 2 && (i10 = a10.pop()), a10.length, n10;
  }
  function DD(e10, t10) {
    return OD(e10, t10) !== 0;
  }
  function OD(e10, t10) {
    switch (e10) {
      case `*`:
        return 3;
      case `_`:
        return 4;
      case `[`:
        return 5;
      case `]`:
        return 6;
      case "`":
        return t10 ? 7 : 0;
      default:
        return 0;
    }
  }
  const kD = RegExp(`(\\\\)?\\$\\((${sp.iconNameExpression}(?:${sp.iconModifierExpression})?)\\)`, `g`);
  AD = function(e10) {
    let t10 = [], n10, r10 = 0, i10 = 0;
    for (; (n10 = kD.exec(e10)) !== null; ) {
      i10 = n10.index || 0, r10 < i10 && t10.push(e10.substring(r10, i10)), r10 = (n10.index || 0) + n10[0].length;
      let [, a10, o10] = n10;
      t10.push(a10 ? `$(${o10})` : jD({
        id: o10
      }));
    }
    return r10 < e10.length && t10.push(e10.substring(r10)), t10;
  };
  jD = function(e10) {
    let t10 = H(`span`);
    return t10.classList.add(...sp.asClassNameArray(e10)), t10;
  };
  function MD(e10) {
    let t10 = FD(e10);
    if (t10 && t10.length > 0) return new Uint32Array(t10);
  }
  let ND = 0;
  const PD = new Uint32Array(10);
  function FD(e10) {
    if (ND = 0, ID(e10, RD, 4352), ND > 0 || (ID(e10, zD, 4449), ND > 0) || (ID(e10, BD, 4520), ND > 0) || (ID(e10, VD, 12593), ND)) return PD.subarray(0, ND);
    if (e10 >= 44032 && e10 <= 55203) {
      let t10 = e10 - 44032, n10 = t10 % 588, r10 = Math.floor(t10 / 588), i10 = Math.floor(n10 / 28), a10 = n10 % 28 - 1;
      if (r10 < RD.length ? ID(r10, RD, 0) : 4352 + r10 - 12593 < VD.length && ID(4352 + r10, VD, 12593), i10 < zD.length ? ID(i10, zD, 0) : 4449 + i10 - 12593 < VD.length && ID(4449 + i10 - 12593, VD, 12593), a10 >= 0 && (a10 < BD.length ? ID(a10, BD, 0) : 4520 + a10 - 12593 < VD.length && ID(4520 + a10 - 12593, VD, 12593)), ND > 0) return PD.subarray(0, ND);
    }
  }
  function ID(e10, t10, n10) {
    e10 >= n10 && e10 < n10 + t10.length && LD(t10[e10 - n10]);
  }
  function LD(e10) {
    e10 !== 0 && (PD[ND++] = e10 & 255, e10 >> 8 && (PD[ND++] = e10 >> 8 & 255), e10 >> 16 && (PD[ND++] = e10 >> 16 & 255));
  }
  const RD = new Uint8Array([
    114,
    82,
    115,
    101,
    69,
    102,
    97,
    113,
    81,
    116,
    84,
    100,
    119,
    87,
    99,
    122,
    120,
    118,
    103
  ]), zD = new Uint16Array([
    107,
    111,
    105,
    79,
    106,
    112,
    117,
    80,
    104,
    27496,
    28520,
    27752,
    121,
    110,
    27246,
    28782,
    27758,
    98,
    109,
    27757,
    108
  ]), BD = new Uint16Array([
    114,
    82,
    29810,
    115,
    30579,
    26483,
    101,
    102,
    29286,
    24934,
    29030,
    29798,
    30822,
    30310,
    26470,
    97,
    113,
    29809,
    116,
    84,
    100,
    119,
    99,
    122,
    120,
    118,
    103
  ]), VD = new Uint16Array([
    114,
    82,
    29810,
    115,
    30579,
    26483,
    101,
    69,
    102,
    29286,
    24934,
    29030,
    29798,
    30822,
    30310,
    26470,
    97,
    113,
    81,
    29809,
    116,
    84,
    100,
    119,
    87,
    99,
    122,
    120,
    118,
    103,
    107,
    111,
    105,
    79,
    106,
    112,
    117,
    80,
    104,
    27496,
    28520,
    27752,
    121,
    110,
    27246,
    28782,
    27758,
    98,
    109,
    27757,
    108
  ]);
  HD = function(...e10) {
    return function(t10, n10) {
      for (let r10 = 0, i10 = e10.length; r10 < i10; r10++) {
        let i11 = e10[r10](t10, n10);
        if (i11) return i11;
      }
      return null;
    };
  };
  let Ote;
  Ote = WD.bind(void 0, false);
  UD = WD.bind(void 0, true);
  function WD(e10, t10, n10) {
    if (!n10 || n10.length < t10.length) return null;
    let r10;
    return r10 = e10 ? Ls(n10, t10) : n10.indexOf(t10) === 0, r10 ? t10.length > 0 ? [
      {
        start: 0,
        end: t10.length
      }
    ] : [] : null;
  }
  GD = function(e10, t10) {
    let n10 = t10.toLowerCase().indexOf(e10.toLowerCase());
    return n10 === -1 ? null : [
      {
        start: n10,
        end: n10 + e10.length
      }
    ];
  };
  KD = function(e10, t10) {
    return qD(e10.toLowerCase(), t10.toLowerCase(), 0, 0);
  };
  function qD(e10, t10, n10, r10) {
    if (n10 === e10.length) return [];
    if (r10 === t10.length) return null;
    if (e10[n10] === t10[r10]) {
      let i10 = null;
      return (i10 = qD(e10, t10, n10 + 1, r10 + 1)) ? iO({
        start: r10,
        end: r10 + 1
      }, i10) : null;
    }
    return qD(e10, t10, n10, r10 + 1);
  }
  function JD(e10) {
    return 97 <= e10 && e10 <= 122;
  }
  function YD(e10) {
    return 65 <= e10 && e10 <= 90;
  }
  function XD(e10) {
    return 48 <= e10 && e10 <= 57;
  }
  function ZD(e10) {
    return e10 === 32 || e10 === 9 || e10 === 10 || e10 === 13;
  }
  const QD = /* @__PURE__ */ new Set();
  `()[]{}<>\`'"-/;:,.?!`.split(``).forEach((e10) => QD.add(e10.charCodeAt(0)));
  function $D(e10) {
    return ZD(e10) || QD.has(e10);
  }
  function eO(e10, t10) {
    return e10 === t10 || $D(e10) && $D(t10);
  }
  const tO = /* @__PURE__ */ new Map();
  function nO(e10) {
    if (tO.has(e10)) return tO.get(e10);
    let t10, n10 = MD(e10);
    return n10 && (t10 = n10), tO.set(e10, t10), t10;
  }
  function rO(e10) {
    return JD(e10) || YD(e10) || XD(e10);
  }
  function iO(e10, t10) {
    return t10.length === 0 ? t10 = [
      e10
    ] : e10.end === t10[0].start ? t10[0].start = e10.start : t10.unshift(e10), t10;
  }
  function aO(e10, t10) {
    for (let n10 = t10; n10 < e10.length; n10++) {
      let t11 = e10.charCodeAt(n10);
      if (YD(t11) || XD(t11) || n10 > 0 && !rO(e10.charCodeAt(n10 - 1))) return n10;
    }
    return e10.length;
  }
  function oO(e10, t10, n10, r10) {
    if (n10 === e10.length) return [];
    if (r10 === t10.length || e10[n10] !== t10[r10].toLowerCase()) return null;
    {
      let i10 = null, a10 = r10 + 1;
      for (i10 = oO(e10, t10, n10 + 1, r10 + 1); !i10 && (a10 = aO(t10, a10)) < t10.length; ) i10 = oO(e10, t10, n10 + 1, a10), a10++;
      return i10 === null ? null : iO({
        start: r10,
        end: r10 + 1
      }, i10);
    }
  }
  function sO(e10) {
    let t10 = 0, n10 = 0, r10 = 0, i10 = 0, a10 = 0;
    for (let o11 = 0; o11 < e10.length; o11++) a10 = e10.charCodeAt(o11), YD(a10) && t10++, JD(a10) && n10++, rO(a10) && r10++, XD(a10) && i10++;
    let o10 = t10 / e10.length, s10 = n10 / e10.length, c10 = r10 / e10.length, l10 = i10 / e10.length;
    return {
      upperPercent: o10,
      lowerPercent: s10,
      alphaPercent: c10,
      numericPercent: l10
    };
  }
  function cO(e10) {
    let { upperPercent: t10, lowerPercent: n10 } = e10;
    return n10 === 0 && t10 > 0.6;
  }
  function lO(e10) {
    let { upperPercent: t10, lowerPercent: n10, alphaPercent: r10, numericPercent: i10 } = e10;
    return n10 > 0.2 && t10 < 0.8 && r10 > 0.6 && i10 < 0.2;
  }
  function uO(e10) {
    let t10 = 0, n10 = 0, r10 = 0, i10 = 0;
    for (let a10 = 0; a10 < e10.length; a10++) r10 = e10.charCodeAt(a10), YD(r10) && t10++, JD(r10) && n10++, ZD(r10) && i10++;
    return (t10 === 0 || n10 === 0) && i10 === 0 ? e10.length <= 30 : t10 <= 5;
  }
  function dO(e10, t10) {
    if (!t10 || (t10 = t10.trim(), t10.length === 0) || !uO(e10)) return null;
    t10.length > 60 && (t10 = t10.substring(0, 60));
    let n10 = sO(t10);
    if (!lO(n10)) {
      if (!cO(n10)) return null;
      t10 = t10.toLowerCase();
    }
    let r10 = null, i10 = 0;
    for (e10 = e10.toLowerCase(); i10 < t10.length && (r10 = oO(e10, t10, 0, i10)) === null; ) i10 = aO(t10, i10 + 1);
    return r10;
  }
  fO = function(e10, t10, n10 = false) {
    if (!t10 || t10.length === 0) return null;
    let r10 = null, i10 = 0;
    for (e10 = e10.toLowerCase(), t10 = t10.toLowerCase(); i10 < t10.length && (r10 = pO(e10, t10, 0, i10, n10), r10 === null); ) i10 = mO(t10, i10 + 1);
    return r10;
  };
  function pO(e10, t10, n10, r10, i10) {
    let a10 = 0;
    if (n10 === e10.length) return [];
    if (r10 === t10.length) return null;
    if (!eO(e10.charCodeAt(n10), t10.charCodeAt(r10))) {
      let i11 = nO(e10.charCodeAt(n10));
      if (!i11) return null;
      for (let e11 = 0; e11 < i11.length; e11++) if (!eO(i11[e11], t10.charCodeAt(r10 + e11))) return null;
      a10 += i11.length - 1;
    }
    let o10 = null, s10 = r10 + a10 + 1;
    if (o10 = pO(e10, t10, n10 + 1, s10, i10), !i10) for (; !o10 && (s10 = mO(t10, s10)) < t10.length; ) o10 = pO(e10, t10, n10 + 1, s10, i10), s10++;
    if (!o10) return null;
    if (e10.charCodeAt(n10) !== t10.charCodeAt(r10)) {
      let i11 = nO(e10.charCodeAt(n10));
      if (!i11) return o10;
      for (let e11 = 0; e11 < i11.length; e11++) if (i11[e11] !== t10.charCodeAt(r10 + e11)) return o10;
    }
    return iO({
      start: r10,
      end: r10 + a10 + 1
    }, o10);
  }
  function mO(e10, t10) {
    for (let n10 = t10; n10 < e10.length; n10++) if ($D(e10.charCodeAt(n10)) || n10 > 0 && $D(e10.charCodeAt(n10 - 1))) return n10;
    return e10.length;
  }
  const hO = HD(UD, dO, GD), gO = HD(UD, dO, KD), _O = new G_(1e4);
  function vO(e10, t10, n10 = false) {
    if (typeof e10 != `string` || typeof t10 != `string`) return null;
    let r10 = _O.get(e10);
    r10 || (r10 = new RegExp(bs(e10), `i`), _O.set(e10, r10));
    let i10 = r10.exec(t10);
    return i10 ? [
      {
        start: i10.index,
        end: i10.index + i10[0].length
      }
    ] : n10 ? gO(e10, t10) : hO(e10, t10);
  }
  function yO(e10, t10) {
    let n10 = zO(e10, e10.toLowerCase(), 0, t10, t10.toLowerCase(), 0, {
      firstMatchCanBeWeak: true,
      boostFullMatch: true
    });
    return n10 ? xO(n10) : null;
  }
  bO = function(e10, t10, n10, r10, i10, a10) {
    let o10 = Math.min(13, e10.length);
    for (; n10 < o10; n10++) {
      let o11 = zO(e10, t10, n10, r10, i10, a10, {
        firstMatchCanBeWeak: true,
        boostFullMatch: true
      });
      if (o11) return o11;
    }
    return [
      0,
      a10
    ];
  };
  xO = function(e10) {
    if (e10 === void 0) return [];
    let t10 = [], n10 = e10[1];
    for (let r10 = e10.length - 1; r10 > 1; r10--) {
      let i10 = e10[r10] + n10, a10 = t10[t10.length - 1];
      a10 && a10.end === i10 ? a10.end = i10 + 1 : t10.push({
        start: i10,
        end: i10 + 1
      });
    }
    return t10;
  };
  const SO = 128;
  function CO() {
    let e10 = [], t10 = [];
    for (let e11 = 0; e11 <= SO; e11++) t10[e11] = 0;
    for (let n10 = 0; n10 <= SO; n10++) e10.push(t10.slice(0));
    return e10;
  }
  function wO(e10) {
    let t10 = [];
    for (let n10 = 0; n10 <= e10; n10++) t10[n10] = 0;
    return t10;
  }
  const TO = wO(2 * SO), EO = wO(2 * SO), DO = CO(), OO = CO(), kO = CO(), AO = false;
  function jO(e10, t10, n10, r10, i10) {
    function a10(e11, t11, n11 = ` `) {
      for (; e11.length < t11; ) e11 = n11 + e11;
      return e11;
    }
    let o10 = ` |   |${r10.split(``).map((e11) => a10(e11, 3)).join(`|`)}
`;
    for (let r11 = 0; r11 <= n10; r11++) r11 === 0 ? o10 += ` |` : o10 += `${t10[r11 - 1]}|`, o10 += e10[r11].slice(0, i10 + 1).map((e11) => a10(e11.toString(), 3)).join(`|`) + `
`;
    return o10;
  }
  function MO(e10, t10, n10, r10) {
    e10 = e10.substr(t10), n10 = n10.substr(r10), console.log(jO(OO, e10, e10.length, n10, n10.length)), console.log(jO(kO, e10, e10.length, n10, n10.length)), console.log(jO(DO, e10, e10.length, n10, n10.length));
  }
  function NO(e10, t10) {
    if (t10 < 0 || t10 >= e10.length) return false;
    let n10 = e10.codePointAt(t10);
    switch (n10) {
      case 95:
      case 45:
      case 46:
      case 32:
      case 47:
      case 92:
      case 39:
      case 34:
      case 58:
      case 36:
      case 60:
      case 62:
      case 40:
      case 41:
      case 91:
      case 93:
      case 123:
      case 125:
        return true;
      case void 0:
        return false;
      default:
        return !!ic(n10);
    }
  }
  function PO(e10, t10) {
    if (t10 < 0 || t10 >= e10.length) return false;
    let n10 = e10.charCodeAt(t10);
    switch (n10) {
      case 32:
      case 9:
        return true;
      default:
        return false;
    }
  }
  function FO(e10, t10, n10) {
    return t10[e10] !== n10[e10];
  }
  function IO(e10, t10, n10, r10, i10, a10, o10 = false) {
    for (; t10 < n10 && i10 < a10; ) e10[t10] === r10[i10] && (o10 && (TO[t10] = i10), t10 += 1), i10 += 1;
    return t10 === n10;
  }
  (function(e10) {
    e10.Default = [
      -100,
      0
    ];
    function t10(e11) {
      return !e11 || e11.length === 2 && e11[0] === -100 && e11[1] === 0;
    }
    e10.isDefault = t10;
  })(LO || (LO = {}));
  RO = (_$2 = class {
    constructor(e10, t10) {
      this.firstMatchCanBeWeak = e10, this.boostFullMatch = t10;
    }
  }, _$2.default = {
    boostFullMatch: true,
    firstMatchCanBeWeak: false
  }, _$2);
  zO = function(e10, t10, n10, r10, i10, a10, o10 = RO.default) {
    let s10 = e10.length > SO ? SO : e10.length, c10 = r10.length > SO ? SO : r10.length;
    if (n10 >= s10 || a10 >= c10 || s10 - n10 > c10 - a10 || !IO(t10, n10, s10, i10, a10, c10, true)) return;
    BO(s10, c10, n10, a10, t10, i10);
    let l10 = 1, u10 = 1, d10 = n10, f10 = a10, p10 = [
      false
    ];
    for (l10 = 1, d10 = n10; d10 < s10; l10++, d10++) {
      let o11 = TO[d10], m11 = EO[d10], h11 = d10 + 1 < s10 ? EO[d10 + 1] : c10;
      for (u10 = o11 - a10 + 1, f10 = o11; f10 < h11; u10++, f10++) {
        let s11 = -(2 ** 53 - 1), h12 = false;
        f10 <= m11 && (s11 = VO(e10, t10, d10, n10, r10, i10, f10, c10, a10, DO[l10 - 1][u10 - 1] === 0, p10));
        let g11 = 0;
        s11 !== 2 ** 53 - 1 && (h12 = true, g11 = s11 + OO[l10 - 1][u10 - 1]);
        let _11 = f10 > o11, v10 = _11 ? OO[l10][u10 - 1] + (DO[l10][u10 - 1] > 0 ? -5 : 0) : 0, y10 = f10 > o11 + 1 && DO[l10][u10 - 1] > 0, b10 = y10 ? OO[l10][u10 - 2] + (DO[l10][u10 - 2] > 0 ? -5 : 0) : 0;
        if (y10 && (!_11 || b10 >= v10) && (!h12 || b10 >= g11)) OO[l10][u10] = b10, kO[l10][u10] = 3, DO[l10][u10] = 0;
        else if (_11 && (!h12 || v10 >= g11)) OO[l10][u10] = v10, kO[l10][u10] = 2, DO[l10][u10] = 0;
        else if (h12) OO[l10][u10] = g11, kO[l10][u10] = 1, DO[l10][u10] = DO[l10 - 1][u10 - 1] + 1;
        else throw Error(`not possible`);
      }
    }
    if (AO && MO(e10, n10, r10, a10), !p10[0] && !o10.firstMatchCanBeWeak) return;
    l10--, u10--;
    let m10 = [
      OO[l10][u10],
      a10
    ], h10 = 0, g10 = 0;
    for (; l10 >= 1; ) {
      let e11 = u10;
      do {
        let t11 = kO[l10][e11];
        if (t11 === 3) e11 -= 2;
        else if (t11 === 2) --e11;
        else break;
      } while (e11 >= 1);
      h10 > 1 && t10[n10 + l10 - 1] === i10[a10 + u10 - 1] && !FO(e11 + a10 - 1, r10, i10) && h10 + 1 > DO[l10][e11] && (e11 = u10), e11 === u10 ? h10++ : h10 = 1, g10 || (g10 = e11), l10--, u10 = e11 - 1, m10.push(u10);
    }
    c10 - a10 === s10 && o10.boostFullMatch && (m10[0] += 2);
    let _10 = g10 - s10;
    return m10[0] -= _10, m10;
  };
  function BO(e10, t10, n10, r10, i10, a10) {
    let o10 = e10 - 1, s10 = t10 - 1;
    for (; o10 >= n10 && s10 >= r10; ) i10[o10] === a10[s10] && (EO[o10] = s10, o10--), s10--;
  }
  function VO(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
    if (t10[n10] !== a10[o10]) return -(2 ** 53 - 1);
    let d10 = 1, f10 = false;
    return o10 === n10 - r10 ? d10 = e10[n10] === i10[o10] ? 7 : 5 : FO(o10, i10, a10) && (o10 === 0 || !FO(o10 - 1, i10, a10)) ? (d10 = e10[n10] === i10[o10] ? 7 : 5, f10 = true) : NO(a10, o10) && (o10 === 0 || !NO(a10, o10 - 1)) ? d10 = 5 : (NO(a10, o10 - 1) || PO(a10, o10 - 1)) && (d10 = 5, f10 = true), d10 > 1 && n10 === r10 && (u10[0] = true), f10 || (f10 = FO(o10, i10, a10) || NO(a10, o10 - 1) || PO(a10, o10 - 1)), n10 === r10 ? o10 > c10 && (d10 -= f10 ? 3 : 5) : l10 ? d10 += f10 ? 2 : 0 : d10 += f10 ? 0 : 1, o10 + 1 === s10 && (d10 -= f10 ? 3 : 5), d10;
  }
  HO = function(e10, t10, n10, r10, i10, a10, o10) {
    return UO(e10, t10, n10, r10, i10, a10, true, o10);
  };
  function UO(e10, t10, n10, r10, i10, a10, o10, s10) {
    let c10 = zO(e10, t10, n10, r10, i10, a10, s10);
    if (c10 && !o10) return c10;
    if (e10.length >= 3) {
      let t11 = Math.min(7, e10.length - 1);
      for (let o11 = n10 + 1; o11 < t11; o11++) {
        let t12 = WO(e10, o11);
        if (t12) {
          let e11 = zO(t12, t12.toLowerCase(), n10, r10, i10, a10, s10);
          e11 && (e11[0] -= 3, (!c10 || e11[0] > c10[0]) && (c10 = e11));
        }
      }
    }
    return c10;
  }
  function WO(e10, t10) {
    if (t10 + 1 >= e10.length) return;
    let n10 = e10[t10], r10 = e10[t10 + 1];
    if (n10 !== r10) return e10.slice(0, t10) + r10 + n10 + e10.slice(t10 + 2);
  }
  const GO = `$(`, KO = RegExp(`\\$\\(${sp.iconNameExpression}(?:${sp.iconModifierExpression})?\\)`, `g`), qO = RegExp(`(\\\\)?${KO.source}`, `g`);
  function JO(e10) {
    return e10.replace(qO, (e11, t10) => t10 ? e11 : `\\${e11}`);
  }
  const YO = RegExp(`\\\\${KO.source}`, `g`);
  function XO(e10) {
    return e10.replace(YO, (e11) => `\\${e11}`);
  }
  const ZO = RegExp(`(\\s)?(\\\\)?${KO.source}(\\s)?`, `g`);
  QO = function(e10) {
    return e10.indexOf(GO) === -1 ? e10 : e10.replace(ZO, (e11, t10, n10, r10) => n10 ? e11 : t10 || r10 || ``);
  };
  function $O(e10) {
    return e10 ? e10.replace(/\$\((.*?)\)/g, (e11, t10) => ` ${t10} `).trim() : ``;
  }
  const ek = RegExp(`\\$\\(${sp.iconNameCharacter}+\\)`, `g`);
  function tk(e10) {
    ek.lastIndex = 0;
    let t10 = ``, n10 = [], r10 = 0;
    for (; ; ) {
      let i10 = ek.lastIndex, a10 = ek.exec(e10), o10 = e10.substring(i10, a10 == null ? void 0 : a10.index);
      if (o10.length > 0) {
        t10 += o10;
        for (let e11 = 0; e11 < o10.length; e11++) n10.push(r10);
      }
      if (!a10) break;
      r10 += a10[0].length;
    }
    return {
      text: t10,
      iconOffsets: n10
    };
  }
  function nk(e10, t10, n10 = false) {
    let { text: r10, iconOffsets: i10 } = t10;
    if (!i10 || i10.length === 0) return vO(e10, r10, n10);
    let a10 = vs(r10, ` `), o10 = r10.length - a10.length, s10 = vO(e10, a10, n10);
    if (s10) for (let e11 of s10) {
      let t11 = i10[e11.start + o10] + o10;
      e11.start += t11, e11.end += t11;
    }
    return s10;
  }
  rk = function(e10) {
    return Da(e10, true);
  };
  var ik = class {
    constructor(e10) {
      this._ignorePathCasing = e10;
    }
    compare(e10, t10, n10 = false) {
      return e10 === t10 ? 0 : ks(this.getComparisonKey(e10, n10), this.getComparisonKey(t10, n10));
    }
    isEqual(e10, t10, n10 = false) {
      return e10 === t10 ? true : !e10 || !t10 ? false : this.getComparisonKey(e10, n10) === this.getComparisonKey(t10, n10);
    }
    getComparisonKey(e10, t10 = false) {
      return e10.with({
        path: this._ignorePathCasing(e10) ? e10.path.toLowerCase() : void 0,
        fragment: t10 ? null : void 0
      }).toString();
    }
    isEqualOrParent(e10, t10, n10 = false) {
      if (e10.scheme === t10.scheme) {
        if (e10.scheme === Su.file) return sS(rk(e10), rk(t10), this._ignorePathCasing(e10)) && e10.query === t10.query && (n10 || e10.fragment === t10.fragment);
        if (hk(e10.authority, t10.authority)) return sS(e10.path, t10.path, this._ignorePathCasing(e10), `/`) && e10.query === t10.query && (n10 || e10.fragment === t10.fragment);
      }
      return false;
    }
    joinPath(e10, ...t10) {
      return xa.joinPath(e10, ...t10);
    }
    basenameOrAuthority(e10) {
      return ck(e10) || e10.authority;
    }
    basename(e10) {
      return ra.basename(e10.path);
    }
    extname(e10) {
      return ra.extname(e10.path);
    }
    dirname(e10) {
      if (e10.path.length === 0) return e10;
      let t10;
      return e10.scheme === Su.file ? t10 = xa.file(ca(rk(e10))).path : (t10 = ra.dirname(e10.path), e10.authority && t10.length && t10.charCodeAt(0) !== 47 && (console.error(`dirname("${e10.toString})) resulted in a relative path`), t10 = `/`)), e10.with({
        path: t10
      });
    }
    normalizePath(e10) {
      if (!e10.path.length) return e10;
      let t10;
      return t10 = e10.scheme === Su.file ? xa.file(ia(rk(e10))).path : ra.normalize(e10.path), e10.with({
        path: t10
      });
    }
    relativePath(e10, t10) {
      if (e10.scheme !== t10.scheme || !hk(e10.authority, t10.authority)) return;
      if (e10.scheme === Su.file) {
        let n11 = sa(rk(e10), rk(t10));
        return mt ? iS(n11) : n11;
      }
      let n10 = e10.path || `/`, r10 = t10.path || `/`;
      if (this._ignorePathCasing(e10)) {
        let e11 = 0;
        for (let t11 = Math.min(n10.length, r10.length); e11 < t11 && !(n10.charCodeAt(e11) !== r10.charCodeAt(e11) && n10.charAt(e11).toLowerCase() !== r10.charAt(e11).toLowerCase()); e11++) ;
        n10 = r10.substr(0, e11) + n10.substr(e11);
      }
      return ra.relative(n10, r10);
    }
    resolvePath(e10, t10) {
      if (e10.scheme === Su.file) {
        let n10 = xa.file(oa(rk(e10), t10));
        return e10.with({
          authority: n10.authority,
          path: n10.path
        });
      }
      return t10 = aS(t10), e10.with({
        path: ra.resolve(e10.path, t10)
      });
    }
    isAbsolutePath(e10) {
      return !!e10.path && e10.path[0] === `/`;
    }
    isEqualAuthority(e10, t10) {
      return e10 === t10 || e10 !== void 0 && t10 !== void 0 && Is(e10, t10);
    }
    hasTrailingPathSeparator(e10, t10 = da) {
      if (e10.scheme === Su.file) {
        let n10 = rk(e10);
        return n10.length > oS(n10).length && n10[n10.length - 1] === t10;
      } else {
        let t11 = e10.path;
        return t11.length > 1 && t11.charCodeAt(t11.length - 1) === 47 && !/^[a-zA-Z]:(\/$|\\$)/.test(e10.fsPath);
      }
    }
    removeTrailingPathSeparator(e10, t10 = da) {
      return gk(e10, t10) ? e10.with({
        path: e10.path.substr(0, e10.path.length - 1)
      }) : e10;
    }
    addTrailingPathSeparator(e10, t10 = da) {
      let n10 = false;
      if (e10.scheme === Su.file) {
        let r10 = rk(e10);
        n10 = r10 !== void 0 && r10.length === oS(r10).length && r10[r10.length - 1] === t10;
      } else {
        t10 = `/`;
        let r10 = e10.path;
        n10 = r10.length === 1 && r10.charCodeAt(r10.length - 1) === 47;
      }
      return !n10 && !gk(e10, t10) ? e10.with({
        path: e10.path + `/`
      }) : e10;
    }
  };
  let kte, Ate, jte, Mte, fk, mk, Nte, hk, gk, Pte, Fte;
  ak = new ik(() => false);
  kte = new ik((e10) => e10.scheme === Su.file ? !ht : true);
  Ate = new ik((e10) => true);
  ok = ak.isEqual.bind(ak);
  jte = ak.isEqualOrParent.bind(ak);
  Mte = ak.getComparisonKey.bind(ak);
  sk = ak.basenameOrAuthority.bind(ak);
  ck = ak.basename.bind(ak);
  lk = ak.extname.bind(ak);
  uk = ak.dirname.bind(ak);
  dk = ak.joinPath.bind(ak);
  fk = ak.normalizePath.bind(ak);
  pk = ak.relativePath.bind(ak);
  mk = ak.resolvePath.bind(ak);
  Nte = ak.isAbsolutePath.bind(ak);
  hk = ak.isEqualAuthority.bind(ak);
  gk = ak.hasTrailingPathSeparator.bind(ak);
  Pte = ak.removeTrailingPathSeparator.bind(ak);
  Fte = ak.addTrailingPathSeparator.bind(ak);
  (function(e10) {
    e10.META_DATA_LABEL = `label`, e10.META_DATA_DESCRIPTION = `description`, e10.META_DATA_SIZE = `size`, e10.META_DATA_MIME = `mime`;
    function t10(t11) {
      let n10 = /* @__PURE__ */ new Map(), r10 = t11.path.substring(t11.path.indexOf(`;`) + 1, t11.path.lastIndexOf(`;`));
      r10.split(`;`).forEach((e11) => {
        let [t12, r11] = e11.split(`:`);
        t12 && r11 && n10.set(t12, r11);
      });
      let i10 = t11.path.substring(0, t11.path.indexOf(`;`));
      return i10 && n10.set(e10.META_DATA_MIME, i10), n10;
    }
    e10.parseMetaData = t10;
  })(_k || (_k = {}));
  vk = class {
    constructor(e10 = ``, t10 = false) {
      if (this.value = e10, typeof this.value != `string`) throw Cr(`value`);
      typeof t10 == `boolean` ? (this.isTrusted = t10, this.supportThemeIcons = false, this.supportHtml = false) : (this.isTrusted = t10.isTrusted ?? void 0, this.supportThemeIcons = t10.supportThemeIcons ?? false, this.supportHtml = t10.supportHtml ?? false);
    }
    appendText(e10, t10 = 0) {
      return this.value += Sk(this.supportThemeIcons ? JO(e10) : e10).replace(/([ \t]+)/g, (e11, t11) => `&nbsp;`.repeat(t11.length)).replace(/\>/gm, `\\>`).replace(/\n/g, t10 === 1 ? `\\
` : `

`), this;
    }
    appendMarkdown(e10) {
      return this.value += e10, this;
    }
    appendCodeblock(e10, t10) {
      return this.value += `
${Ck(t10, e10)}
`, this;
    }
    appendLink(e10, t10, n10) {
      return this.value += `[`, this.value += this._escape(t10, `]`), this.value += `](`, this.value += this._escape(String(e10), `)`), n10 && (this.value += ` "${this._escape(this._escape(n10, `"`), `)`)}"`), this.value += `)`, this;
    }
    _escape(e10, t10) {
      let n10 = new RegExp(gs(t10), `g`);
      return e10.replace(n10, (t11, n11) => e10.charAt(n11 - 1) === `\\` ? t11 : `\\${t11}`);
    }
  };
  yk = function(e10) {
    return bk(e10) ? !e10.value : Array.isArray(e10) ? e10.every(yk) : true;
  };
  bk = function(e10) {
    return e10 instanceof vk ? true : e10 && typeof e10 == `object` ? typeof e10.value == `string` && (typeof e10.isTrusted == `boolean` || typeof e10.isTrusted == `object` || e10.isTrusted === void 0) && (typeof e10.supportThemeIcons == `boolean` || e10.supportThemeIcons === void 0) : false;
  };
  function xk(e10, t10) {
    return e10 === t10 ? true : !e10 || !t10 ? false : e10.value === t10.value && e10.isTrusted === t10.isTrusted && e10.supportThemeIcons === t10.supportThemeIcons && e10.supportHtml === t10.supportHtml && (e10.baseUri === t10.baseUri || !!e10.baseUri && !!t10.baseUri && ok(xa.from(e10.baseUri), xa.from(t10.baseUri)));
  }
  function Sk(e10) {
    return e10.replace(/[\\`*_{}[\]()#+\-!~]/g, `\\$&`);
  }
  function Ck(e10, t10) {
    var _a3;
    let n10 = ((_a3 = e10.match(/^`+/gm)) == null ? void 0 : _a3.reduce((e11, t11) => e11.length > t11.length ? e11 : t11).length) ?? 0, r10 = n10 >= 3 ? n10 + 1 : 3;
    return [
      `${"`".repeat(r10)}${t10}`,
      e10,
      `${"`".repeat(r10)}`
    ].join(`
`);
  }
  function wk(e10) {
    return e10.replace(/"/g, `&quot;`);
  }
  function Tk(e10) {
    return e10 && e10.replace(/\\([\\`*_{}[\]()#+\-.!~])/g, `$1`);
  }
  function Ek(e10) {
    let t10 = [], n10 = e10.split(`|`).map((e11) => e11.trim());
    e10 = n10[0];
    let r10 = n10[1];
    if (r10) {
      let e11 = /height=(\d+)/.exec(r10), n11 = /width=(\d+)/.exec(r10), i10 = e11 ? e11[1] : ``, a10 = n11 ? n11[1] : ``, o10 = isFinite(parseInt(a10)), s10 = isFinite(parseInt(i10));
      o10 && t10.push(`width="${a10}"`), s10 && t10.push(`height="${i10}"`);
    }
    return {
      href: e10,
      dimensions: t10
    };
  }
  Dk = class {
    constructor(e10) {
      this._prefix = e10, this._lastId = 0;
    }
    nextId() {
      return this._prefix + ++this._lastId;
    }
  };
  Ok = new Dk(`id#`);
  let kk = {};
  (function() {
    function e10(e11, t10) {
      t10(kk);
    }
    e10.amd = true, function(t10, n10) {
      typeof e10 == `function` && e10.amd ? e10([
        `exports`
      ], n10) : typeof exports == `object` && typeof module < `u` ? n10(exports) : (t10 = typeof globalThis < `u` ? globalThis : t10 || self, n10(t10.marked = {}));
    }(this, function(e11) {
      "use strict";
      function t10() {
        return {
          async: false,
          breaks: false,
          extensions: null,
          gfm: true,
          hooks: null,
          pedantic: false,
          renderer: null,
          silent: false,
          tokenizer: null,
          walkTokens: null
        };
      }
      e11.defaults = t10();
      function n10(t11) {
        e11.defaults = t11;
      }
      let r10 = /[&<>"']/, i10 = new RegExp(r10.source, `g`), a10 = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, o10 = new RegExp(a10.source, `g`), s10 = {
        "&": `&amp;`,
        "<": `&lt;`,
        ">": `&gt;`,
        '"': `&quot;`,
        "'": `&#39;`
      }, c10 = (e12) => s10[e12];
      function l10(e12, t11) {
        if (t11) {
          if (r10.test(e12)) return e12.replace(i10, c10);
        } else if (a10.test(e12)) return e12.replace(o10, c10);
        return e12;
      }
      let u10 = /(^|[^\[])\^/g;
      function d10(e12, t11) {
        let n11 = typeof e12 == `string` ? e12 : e12.source;
        t11 || (t11 = ``);
        let r11 = {
          replace: (e13, t12) => {
            let i11 = typeof t12 == `string` ? t12 : t12.source;
            return i11 = i11.replace(u10, `$1`), n11 = n11.replace(e13, i11), r11;
          },
          getRegex: () => new RegExp(n11, t11)
        };
        return r11;
      }
      function f10(e12) {
        try {
          e12 = encodeURI(e12).replace(/%25/g, `%`);
        } catch {
          return null;
        }
        return e12;
      }
      let p10 = {
        exec: () => null
      };
      function m10(e12, t11) {
        let n11 = e12.replace(/\|/g, (e13, t12, n12) => {
          let r12 = false, i12 = t12;
          for (; --i12 >= 0 && n12[i12] === `\\`; ) r12 = !r12;
          return r12 ? `|` : ` |`;
        }), r11 = n11.split(/ \|/), i11 = 0;
        if (r11[0].trim() || r11.shift(), r11.length > 0 && !r11[r11.length - 1].trim() && r11.pop(), t11) if (r11.length > t11) r11.splice(t11);
        else for (; r11.length < t11; ) r11.push(``);
        for (; i11 < r11.length; i11++) r11[i11] = r11[i11].trim().replace(/\\\|/g, `|`);
        return r11;
      }
      function h10(e12, t11, n11) {
        let r11 = e12.length;
        if (r11 === 0) return ``;
        let i11 = 0;
        for (; i11 < r11; ) {
          let a11 = e12.charAt(r11 - i11 - 1);
          if (a11 === t11 && !n11) i11++;
          else if (a11 !== t11 && n11) i11++;
          else break;
        }
        return e12.slice(0, r11 - i11);
      }
      function g10(e12, t11) {
        if (e12.indexOf(t11[1]) === -1) return -1;
        let n11 = 0;
        for (let r11 = 0; r11 < e12.length; r11++) if (e12[r11] === `\\`) r11++;
        else if (e12[r11] === t11[0]) n11++;
        else if (e12[r11] === t11[1] && (n11--, n11 < 0)) return r11;
        return -1;
      }
      function _10(e12, t11, n11, r11) {
        let i11 = t11.href, a11 = t11.title ? l10(t11.title) : null, o11 = e12[1].replace(/\\([\[\]])/g, `$1`);
        if (e12[0].charAt(0) !== `!`) {
          r11.state.inLink = true;
          let e13 = {
            type: `link`,
            raw: n11,
            href: i11,
            title: a11,
            text: o11,
            tokens: r11.inlineTokens(o11)
          };
          return r11.state.inLink = false, e13;
        }
        return {
          type: `image`,
          raw: n11,
          href: i11,
          title: a11,
          text: l10(o11)
        };
      }
      function v10(e12, t11) {
        let n11 = e12.match(/^(\s+)(?:```)/);
        if (n11 === null) return t11;
        let r11 = n11[1];
        return t11.split(`
`).map((e13) => {
          let t12 = e13.match(/^\s+/);
          if (t12 === null) return e13;
          let [n12] = t12;
          return n12.length >= r11.length ? e13.slice(r11.length) : e13;
        }).join(`
`);
      }
      class y10 {
        constructor(t11) {
          __publicField(this, "options");
          __publicField(this, "rules");
          __publicField(this, "lexer");
          this.options = t11 || e11.defaults;
        }
        space(e12) {
          let t11 = this.rules.block.newline.exec(e12);
          if (t11 && t11[0].length > 0) return {
            type: `space`,
            raw: t11[0]
          };
        }
        code(e12) {
          let t11 = this.rules.block.code.exec(e12);
          if (t11) {
            let e13 = t11[0].replace(/^ {1,4}/gm, ``);
            return {
              type: `code`,
              raw: t11[0],
              codeBlockStyle: `indented`,
              text: this.options.pedantic ? e13 : h10(e13, `
`)
            };
          }
        }
        fences(e12) {
          let t11 = this.rules.block.fences.exec(e12);
          if (t11) {
            let e13 = t11[0], n11 = v10(e13, t11[3] || ``);
            return {
              type: `code`,
              raw: e13,
              lang: t11[2] ? t11[2].trim().replace(this.rules.inline.anyPunctuation, `$1`) : t11[2],
              text: n11
            };
          }
        }
        heading(e12) {
          let t11 = this.rules.block.heading.exec(e12);
          if (t11) {
            let e13 = t11[2].trim();
            if (/#$/.test(e13)) {
              let t12 = h10(e13, `#`);
              (this.options.pedantic || !t12 || / $/.test(t12)) && (e13 = t12.trim());
            }
            return {
              type: `heading`,
              raw: t11[0],
              depth: t11[1].length,
              text: e13,
              tokens: this.lexer.inline(e13)
            };
          }
        }
        hr(e12) {
          let t11 = this.rules.block.hr.exec(e12);
          if (t11) return {
            type: `hr`,
            raw: h10(t11[0], `
`)
          };
        }
        blockquote(e12) {
          let t11 = this.rules.block.blockquote.exec(e12);
          if (t11) {
            let e13 = h10(t11[0], `
`).split(`
`), n11 = ``, r11 = ``, i11 = [];
            for (; e13.length > 0; ) {
              let t12 = false, a11 = [], o11;
              for (o11 = 0; o11 < e13.length; o11++) if (/^ {0,3}>/.test(e13[o11])) a11.push(e13[o11]), t12 = true;
              else if (!t12) a11.push(e13[o11]);
              else break;
              e13 = e13.slice(o11);
              let s11 = a11.join(`
`), c11 = s11.replace(/\n {0,3}((?:=+|-+) *)(?=\n|$)/g, `
    $1`).replace(/^ {0,3}>[ \t]?/gm, ``);
              n11 = n11 ? `${n11}
${s11}` : s11, r11 = r11 ? `${r11}
${c11}` : c11;
              let l11 = this.lexer.state.top;
              if (this.lexer.state.top = true, this.lexer.blockTokens(c11, i11, true), this.lexer.state.top = l11, e13.length === 0) break;
              let u11 = i11[i11.length - 1];
              if ((u11 == null ? void 0 : u11.type) === `code`) break;
              if ((u11 == null ? void 0 : u11.type) === `blockquote`) {
                let t13 = u11, a12 = t13.raw + `
` + e13.join(`
`), o12 = this.blockquote(a12);
                i11[i11.length - 1] = o12, n11 = n11.substring(0, n11.length - t13.raw.length) + o12.raw, r11 = r11.substring(0, r11.length - t13.text.length) + o12.text;
                break;
              } else if ((u11 == null ? void 0 : u11.type) === `list`) {
                let t13 = u11, a12 = t13.raw + `
` + e13.join(`
`), o12 = this.list(a12);
                i11[i11.length - 1] = o12, n11 = n11.substring(0, n11.length - u11.raw.length) + o12.raw, r11 = r11.substring(0, r11.length - t13.raw.length) + o12.raw, e13 = a12.substring(i11[i11.length - 1].raw.length).split(`
`);
                continue;
              }
            }
            return {
              type: `blockquote`,
              raw: n11,
              tokens: i11,
              text: r11
            };
          }
        }
        list(e12) {
          let t11 = this.rules.block.list.exec(e12);
          if (t11) {
            let n11 = t11[1].trim(), r11 = n11.length > 1, i11 = {
              type: `list`,
              raw: ``,
              ordered: r11,
              start: r11 ? +n11.slice(0, -1) : ``,
              loose: false,
              items: []
            };
            n11 = r11 ? `\\d{1,9}\\${n11.slice(-1)}` : `\\${n11}`, this.options.pedantic && (n11 = r11 ? n11 : `[*+-]`);
            let a11 = RegExp(`^( {0,3}${n11})((?:[	 ][^\\n]*)?(?:\\n|$))`), o11 = false;
            for (; e12; ) {
              let n12 = false, r12 = ``, s11 = ``;
              if (!(t11 = a11.exec(e12)) || this.rules.block.hr.test(e12)) break;
              r12 = t11[0], e12 = e12.substring(r12.length);
              let c11 = t11[2].split(`
`, 1)[0].replace(/^\t+/, (e13) => ` `.repeat(3 * e13.length)), l11 = e12.split(`
`, 1)[0], u11 = !c11.trim(), d11 = 0;
              if (this.options.pedantic ? (d11 = 2, s11 = c11.trimStart()) : u11 ? d11 = t11[1].length + 1 : (d11 = t11[2].search(/[^ ]/), d11 = d11 > 4 ? 1 : d11, s11 = c11.slice(d11), d11 += t11[1].length), u11 && /^ *$/.test(l11) && (r12 += l11 + `
`, e12 = e12.substring(l11.length + 1), n12 = true), !n12) {
                let t12 = RegExp(`^ {0,${Math.min(3, d11 - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`), n13 = RegExp(`^ {0,${Math.min(3, d11 - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`), i12 = RegExp(`^ {0,${Math.min(3, d11 - 1)}}(?:\`\`\`|~~~)`), a12 = RegExp(`^ {0,${Math.min(3, d11 - 1)}}#`);
                for (; e12; ) {
                  let o12 = e12.split(`
`, 1)[0];
                  if (l11 = o12, this.options.pedantic && (l11 = l11.replace(/^ {1,4}(?=( {4})*[^ ])/g, `  `)), i12.test(l11) || a12.test(l11) || t12.test(l11) || n13.test(e12)) break;
                  if (l11.search(/[^ ]/) >= d11 || !l11.trim()) s11 += `
` + l11.slice(d11);
                  else {
                    if (u11 || c11.search(/[^ ]/) >= 4 || i12.test(c11) || a12.test(c11) || n13.test(c11)) break;
                    s11 += `
` + l11;
                  }
                  !u11 && !l11.trim() && (u11 = true), r12 += o12 + `
`, e12 = e12.substring(o12.length + 1), c11 = l11.slice(d11);
                }
              }
              i11.loose || (o11 ? i11.loose = true : /\n *\n *$/.test(r12) && (o11 = true));
              let f11 = null, p11;
              this.options.gfm && (f11 = /^\[[ xX]\] /.exec(s11), f11 && (p11 = f11[0] !== `[ ] `, s11 = s11.replace(/^\[[ xX]\] +/, ``))), i11.items.push({
                type: `list_item`,
                raw: r12,
                task: !!f11,
                checked: p11,
                loose: false,
                text: s11,
                tokens: []
              }), i11.raw += r12;
            }
            i11.items[i11.items.length - 1].raw = i11.items[i11.items.length - 1].raw.trimEnd(), i11.items[i11.items.length - 1].text = i11.items[i11.items.length - 1].text.trimEnd(), i11.raw = i11.raw.trimEnd();
            for (let e13 = 0; e13 < i11.items.length; e13++) if (this.lexer.state.top = false, i11.items[e13].tokens = this.lexer.blockTokens(i11.items[e13].text, []), !i11.loose) {
              let t12 = i11.items[e13].tokens.filter((e14) => e14.type === `space`), n12 = t12.length > 0 && t12.some((e14) => /\n.*\n/.test(e14.raw));
              i11.loose = n12;
            }
            if (i11.loose) for (let e13 = 0; e13 < i11.items.length; e13++) i11.items[e13].loose = true;
            return i11;
          }
        }
        html(e12) {
          let t11 = this.rules.block.html.exec(e12);
          if (t11) {
            let e13 = {
              type: `html`,
              block: true,
              raw: t11[0],
              pre: t11[1] === `pre` || t11[1] === `script` || t11[1] === `style`,
              text: t11[0]
            };
            return e13;
          }
        }
        def(e12) {
          let t11 = this.rules.block.def.exec(e12);
          if (t11) {
            let e13 = t11[1].toLowerCase().replace(/\s+/g, ` `), n11 = t11[2] ? t11[2].replace(/^<(.*)>$/, `$1`).replace(this.rules.inline.anyPunctuation, `$1`) : ``, r11 = t11[3] ? t11[3].substring(1, t11[3].length - 1).replace(this.rules.inline.anyPunctuation, `$1`) : t11[3];
            return {
              type: `def`,
              tag: e13,
              raw: t11[0],
              href: n11,
              title: r11
            };
          }
        }
        table(e12) {
          let t11 = this.rules.block.table.exec(e12);
          if (!t11 || !/[:|]/.test(t11[2])) return;
          let n11 = m10(t11[1]), r11 = t11[2].replace(/^\||\| *$/g, ``).split(`|`), i11 = t11[3] && t11[3].trim() ? t11[3].replace(/\n[ \t]*$/, ``).split(`
`) : [], a11 = {
            type: `table`,
            raw: t11[0],
            header: [],
            align: [],
            rows: []
          };
          if (n11.length === r11.length) {
            for (let e13 of r11) /^ *-+: *$/.test(e13) ? a11.align.push(`right`) : /^ *:-+: *$/.test(e13) ? a11.align.push(`center`) : /^ *:-+ *$/.test(e13) ? a11.align.push(`left`) : a11.align.push(null);
            for (let e13 = 0; e13 < n11.length; e13++) a11.header.push({
              text: n11[e13],
              tokens: this.lexer.inline(n11[e13]),
              header: true,
              align: a11.align[e13]
            });
            for (let e13 of i11) a11.rows.push(m10(e13, a11.header.length).map((e14, t12) => ({
              text: e14,
              tokens: this.lexer.inline(e14),
              header: false,
              align: a11.align[t12]
            })));
            return a11;
          }
        }
        lheading(e12) {
          let t11 = this.rules.block.lheading.exec(e12);
          if (t11) return {
            type: `heading`,
            raw: t11[0],
            depth: t11[2].charAt(0) === `=` ? 1 : 2,
            text: t11[1],
            tokens: this.lexer.inline(t11[1])
          };
        }
        paragraph(e12) {
          let t11 = this.rules.block.paragraph.exec(e12);
          if (t11) {
            let e13 = t11[1].charAt(t11[1].length - 1) === `
` ? t11[1].slice(0, -1) : t11[1];
            return {
              type: `paragraph`,
              raw: t11[0],
              text: e13,
              tokens: this.lexer.inline(e13)
            };
          }
        }
        text(e12) {
          let t11 = this.rules.block.text.exec(e12);
          if (t11) return {
            type: `text`,
            raw: t11[0],
            text: t11[0],
            tokens: this.lexer.inline(t11[0])
          };
        }
        escape(e12) {
          let t11 = this.rules.inline.escape.exec(e12);
          if (t11) return {
            type: `escape`,
            raw: t11[0],
            text: l10(t11[1])
          };
        }
        tag(e12) {
          let t11 = this.rules.inline.tag.exec(e12);
          if (t11) return !this.lexer.state.inLink && /^<a /i.test(t11[0]) ? this.lexer.state.inLink = true : this.lexer.state.inLink && /^<\/a>/i.test(t11[0]) && (this.lexer.state.inLink = false), !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(t11[0]) ? this.lexer.state.inRawBlock = true : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(t11[0]) && (this.lexer.state.inRawBlock = false), {
            type: `html`,
            raw: t11[0],
            inLink: this.lexer.state.inLink,
            inRawBlock: this.lexer.state.inRawBlock,
            block: false,
            text: t11[0]
          };
        }
        link(e12) {
          let t11 = this.rules.inline.link.exec(e12);
          if (t11) {
            let e13 = t11[2].trim();
            if (!this.options.pedantic && /^</.test(e13)) {
              if (!/>$/.test(e13)) return;
              let t12 = h10(e13.slice(0, -1), `\\`);
              if ((e13.length - t12.length) % 2 == 0) return;
            } else {
              let e14 = g10(t11[2], `()`);
              if (e14 > -1) {
                let n12 = t11[0].indexOf(`!`) === 0 ? 5 : 4, r12 = n12 + t11[1].length + e14;
                t11[2] = t11[2].substring(0, e14), t11[0] = t11[0].substring(0, r12).trim(), t11[3] = ``;
              }
            }
            let n11 = t11[2], r11 = ``;
            if (this.options.pedantic) {
              let e14 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n11);
              e14 && (n11 = e14[1], r11 = e14[3]);
            } else r11 = t11[3] ? t11[3].slice(1, -1) : ``;
            return n11 = n11.trim(), /^</.test(n11) && (n11 = this.options.pedantic && !/>$/.test(e13) ? n11.slice(1) : n11.slice(1, -1)), _10(t11, {
              href: n11 && n11.replace(this.rules.inline.anyPunctuation, `$1`),
              title: r11 && r11.replace(this.rules.inline.anyPunctuation, `$1`)
            }, t11[0], this.lexer);
          }
        }
        reflink(e12, t11) {
          let n11;
          if ((n11 = this.rules.inline.reflink.exec(e12)) || (n11 = this.rules.inline.nolink.exec(e12))) {
            let e13 = (n11[2] || n11[1]).replace(/\s+/g, ` `), r11 = t11[e13.toLowerCase()];
            if (!r11) {
              let e14 = n11[0].charAt(0);
              return {
                type: `text`,
                raw: e14,
                text: e14
              };
            }
            return _10(n11, r11, n11[0], this.lexer);
          }
        }
        emStrong(e12, t11, n11 = ``) {
          let r11 = this.rules.inline.emStrongLDelim.exec(e12);
          if (!r11 || r11[3] && n11.match(/[\p{L}\p{N}]/u)) return;
          let i11 = r11[1] || r11[2] || ``;
          if (!i11 || !n11 || this.rules.inline.punctuation.exec(n11)) {
            let n12 = [
              ...r11[0]
            ].length - 1, i12, a11, o11 = n12, s11 = 0, c11 = r11[0][0] === `*` ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
            for (c11.lastIndex = 0, t11 = t11.slice(-1 * e12.length + n12); (r11 = c11.exec(t11)) != null; ) {
              if (i12 = r11[1] || r11[2] || r11[3] || r11[4] || r11[5] || r11[6], !i12) continue;
              if (a11 = [
                ...i12
              ].length, r11[3] || r11[4]) {
                o11 += a11;
                continue;
              } else if ((r11[5] || r11[6]) && n12 % 3 && !((n12 + a11) % 3)) {
                s11 += a11;
                continue;
              }
              if (o11 -= a11, o11 > 0) continue;
              a11 = Math.min(a11, a11 + o11 + s11);
              let t12 = [
                ...r11[0]
              ][0].length, c12 = e12.slice(0, n12 + r11.index + t12 + a11);
              if (Math.min(n12, a11) % 2) {
                let e13 = c12.slice(1, -1);
                return {
                  type: `em`,
                  raw: c12,
                  text: e13,
                  tokens: this.lexer.inlineTokens(e13)
                };
              }
              let l11 = c12.slice(2, -2);
              return {
                type: `strong`,
                raw: c12,
                text: l11,
                tokens: this.lexer.inlineTokens(l11)
              };
            }
          }
        }
        codespan(e12) {
          let t11 = this.rules.inline.code.exec(e12);
          if (t11) {
            let e13 = t11[2].replace(/\n/g, ` `), n11 = /[^ ]/.test(e13), r11 = /^ /.test(e13) && / $/.test(e13);
            return n11 && r11 && (e13 = e13.substring(1, e13.length - 1)), e13 = l10(e13, true), {
              type: `codespan`,
              raw: t11[0],
              text: e13
            };
          }
        }
        br(e12) {
          let t11 = this.rules.inline.br.exec(e12);
          if (t11) return {
            type: `br`,
            raw: t11[0]
          };
        }
        del(e12) {
          let t11 = this.rules.inline.del.exec(e12);
          if (t11) return {
            type: `del`,
            raw: t11[0],
            text: t11[2],
            tokens: this.lexer.inlineTokens(t11[2])
          };
        }
        autolink(e12) {
          let t11 = this.rules.inline.autolink.exec(e12);
          if (t11) {
            let e13, n11;
            return t11[2] === `@` ? (e13 = l10(t11[1]), n11 = `mailto:` + e13) : (e13 = l10(t11[1]), n11 = e13), {
              type: `link`,
              raw: t11[0],
              text: e13,
              href: n11,
              tokens: [
                {
                  type: `text`,
                  raw: e13,
                  text: e13
                }
              ]
            };
          }
        }
        url(e12) {
          var _a3;
          let t11;
          if (t11 = this.rules.inline.url.exec(e12)) {
            let e13, n11;
            if (t11[2] === `@`) e13 = l10(t11[0]), n11 = `mailto:` + e13;
            else {
              let r11;
              do
                r11 = t11[0], t11[0] = ((_a3 = this.rules.inline._backpedal.exec(t11[0])) == null ? void 0 : _a3[0]) ?? ``;
              while (r11 !== t11[0]);
              e13 = l10(t11[0]), n11 = t11[1] === `www.` ? `http://` + t11[0] : t11[0];
            }
            return {
              type: `link`,
              raw: t11[0],
              text: e13,
              href: n11,
              tokens: [
                {
                  type: `text`,
                  raw: e13,
                  text: e13
                }
              ]
            };
          }
        }
        inlineText(e12) {
          let t11 = this.rules.inline.text.exec(e12);
          if (t11) {
            let e13;
            return e13 = this.lexer.state.inRawBlock ? t11[0] : l10(t11[0]), {
              type: `text`,
              raw: t11[0],
              text: e13
            };
          }
        }
      }
      let b10 = /^(?: *(?:\n|$))+/, x10 = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/, S10 = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/, C10 = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/, w10 = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/, ee2 = /(?:[*+-]|\d{1,9}[.)])/, te2 = d10(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g, ee2).replace(/blockCode/g, / {4}/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).getRegex(), ne2 = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/, re2 = /^[^\n]+/, ie2 = /(?!\s*\])(?:\\.|[^\[\]\\])+/, ae2 = d10(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace(`label`, ie2).replace(`title`, /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(), oe2 = d10(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, ee2).getRegex(), se2 = `address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul`, ce2 = /<!--(?:-?>|[\s\S]*?(?:-->|$))/, le2 = d10(`^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))`, `i`).replace(`comment`, ce2).replace(`tag`, se2).replace(`attribute`, / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(), ue2 = d10(ne2).replace(`hr`, C10).replace(`heading`, ` {0,3}#{1,6}(?:\\s|$)`).replace(`|lheading`, ``).replace(`|table`, ``).replace(`blockquote`, ` {0,3}>`).replace(`fences`, " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace(`list`, ` {0,3}(?:[*+-]|1[.)]) `).replace(`html`, `</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)`).replace(`tag`, se2).getRegex(), de2 = d10(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace(`paragraph`, ue2).getRegex(), fe2 = {
        blockquote: de2,
        code: x10,
        def: ae2,
        fences: S10,
        heading: w10,
        hr: C10,
        html: le2,
        lheading: te2,
        list: oe2,
        newline: b10,
        paragraph: ue2,
        table: p10,
        text: re2
      }, pe2 = d10(`^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)`).replace(`hr`, C10).replace(`heading`, ` {0,3}#{1,6}(?:\\s|$)`).replace(`blockquote`, ` {0,3}>`).replace(`code`, ` {4}[^\\n]`).replace(`fences`, " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace(`list`, ` {0,3}(?:[*+-]|1[.)]) `).replace(`html`, `</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)`).replace(`tag`, se2).getRegex(), me2 = {
        ...fe2,
        table: pe2,
        paragraph: d10(ne2).replace(`hr`, C10).replace(`heading`, ` {0,3}#{1,6}(?:\\s|$)`).replace(`|lheading`, ``).replace(`table`, pe2).replace(`blockquote`, ` {0,3}>`).replace(`fences`, " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace(`list`, ` {0,3}(?:[*+-]|1[.)]) `).replace(`html`, `</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)`).replace(`tag`, se2).getRegex()
      }, he2 = {
        ...fe2,
        html: d10(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace(`comment`, ce2).replace(/tag/g, `(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b`).getRegex(),
        def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
        heading: /^(#{1,6})(.*)(?:\n+|$)/,
        fences: p10,
        lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
        paragraph: d10(ne2).replace(`hr`, C10).replace(`heading`, ` *#{1,6} *[^
]`).replace(`lheading`, te2).replace(`|table`, ``).replace(`blockquote`, ` {0,3}>`).replace(`|fences`, ``).replace(`|list`, ``).replace(`|html`, ``).replace(`|tag`, ``).getRegex()
      }, ge2 = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/, _e3 = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/, ve2 = /^( {2,}|\\)\n(?!\s*$)/, ye2 = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/, be2 = `\\p{P}\\p{S}`, xe2 = d10(/^((?![*_])[\spunctuation])/, `u`).replace(/punctuation/g, be2).getRegex(), Se2 = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g, Ce2 = d10(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, `u`).replace(/punct/g, be2).getRegex(), we2 = d10(`^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])`, `gu`).replace(/punct/g, be2).getRegex(), Te2 = d10(`^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])`, `gu`).replace(/punct/g, be2).getRegex(), Ee2 = d10(/\\([punct])/, `gu`).replace(/punct/g, be2).getRegex(), De2 = d10(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace(`scheme`, /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(`email`, /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(), Oe2 = d10(ce2).replace(`(?:-->|$)`, `-->`).getRegex(), ke2 = d10(`^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>`).replace(`comment`, Oe2).replace(`attribute`, /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(), Ae2 = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/, je2 = d10(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace(`label`, Ae2).replace(`href`, /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace(`title`, /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(), Me2 = d10(/^!?\[(label)\]\[(ref)\]/).replace(`label`, Ae2).replace(`ref`, ie2).getRegex(), Ne2 = d10(/^!?\[(ref)\](?:\[\])?/).replace(`ref`, ie2).getRegex(), Pe2 = d10(`reflink|nolink(?!\\()`, `g`).replace(`reflink`, Me2).replace(`nolink`, Ne2).getRegex(), Fe2 = {
        _backpedal: p10,
        anyPunctuation: Ee2,
        autolink: De2,
        blockSkip: Se2,
        br: ve2,
        code: _e3,
        del: p10,
        emStrongLDelim: Ce2,
        emStrongRDelimAst: we2,
        emStrongRDelimUnd: Te2,
        escape: ge2,
        link: je2,
        nolink: Ne2,
        punctuation: xe2,
        reflink: Me2,
        reflinkSearch: Pe2,
        tag: ke2,
        text: ye2,
        url: p10
      }, Ie2 = {
        ...Fe2,
        link: d10(/^!?\[(label)\]\((.*?)\)/).replace(`label`, Ae2).getRegex(),
        reflink: d10(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace(`label`, Ae2).getRegex()
      }, Le2 = {
        ...Fe2,
        escape: d10(ge2).replace(`])`, `~|])`).getRegex(),
        url: d10(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, `i`).replace(`email`, /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
        _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
        del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
        text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
      }, Re2 = {
        ...Le2,
        br: d10(ve2).replace(`{2,}`, `*`).getRegex(),
        text: d10(Le2.text).replace(`\\b_`, `\\b_| {2,}\\n`).replace(/\{2,\}/g, `*`).getRegex()
      }, ze2 = {
        normal: fe2,
        gfm: me2,
        pedantic: he2
      }, Be2 = {
        normal: Fe2,
        gfm: Le2,
        breaks: Re2,
        pedantic: Ie2
      };
      class Ve2 {
        constructor(t11) {
          __publicField(this, "tokens");
          __publicField(this, "options");
          __publicField(this, "state");
          __publicField(this, "tokenizer");
          __publicField(this, "inlineQueue");
          this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = t11 || e11.defaults, this.options.tokenizer = this.options.tokenizer || new y10(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {
            inLink: false,
            inRawBlock: false,
            top: true
          };
          let n11 = {
            block: ze2.normal,
            inline: Be2.normal
          };
          this.options.pedantic ? (n11.block = ze2.pedantic, n11.inline = Be2.pedantic) : this.options.gfm && (n11.block = ze2.gfm, this.options.breaks ? n11.inline = Be2.breaks : n11.inline = Be2.gfm), this.tokenizer.rules = n11;
        }
        static get rules() {
          return {
            block: ze2,
            inline: Be2
          };
        }
        static lex(e12, t11) {
          let n11 = new Ve2(t11);
          return n11.lex(e12);
        }
        static lexInline(e12, t11) {
          let n11 = new Ve2(t11);
          return n11.inlineTokens(e12);
        }
        lex(e12) {
          e12 = e12.replace(/\r\n|\r/g, `
`), this.blockTokens(e12, this.tokens);
          for (let e13 = 0; e13 < this.inlineQueue.length; e13++) {
            let t11 = this.inlineQueue[e13];
            this.inlineTokens(t11.src, t11.tokens);
          }
          return this.inlineQueue = [], this.tokens;
        }
        blockTokens(e12, t11 = [], n11 = false) {
          e12 = this.options.pedantic ? e12.replace(/\t/g, `    `).replace(/^ +$/gm, ``) : e12.replace(/^( *)(\t+)/gm, (e13, t12, n12) => t12 + `    `.repeat(n12.length));
          let r11, i11, a11;
          for (; e12; ) if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((n12) => (r11 = n12.call({
            lexer: this
          }, e12, t11)) ? (e12 = e12.substring(r11.raw.length), t11.push(r11), true) : false))) {
            if (r11 = this.tokenizer.space(e12)) {
              e12 = e12.substring(r11.raw.length), r11.raw.length === 1 && t11.length > 0 ? t11[t11.length - 1].raw += `
` : t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.code(e12)) {
              e12 = e12.substring(r11.raw.length), i11 = t11[t11.length - 1], i11 && (i11.type === `paragraph` || i11.type === `text`) ? (i11.raw += `
` + r11.raw, i11.text += `
` + r11.text, this.inlineQueue[this.inlineQueue.length - 1].src = i11.text) : t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.fences(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.heading(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.hr(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.blockquote(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.list(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.html(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.def(e12)) {
              e12 = e12.substring(r11.raw.length), i11 = t11[t11.length - 1], i11 && (i11.type === `paragraph` || i11.type === `text`) ? (i11.raw += `
` + r11.raw, i11.text += `
` + r11.raw, this.inlineQueue[this.inlineQueue.length - 1].src = i11.text) : this.tokens.links[r11.tag] || (this.tokens.links[r11.tag] = {
                href: r11.href,
                title: r11.title
              });
              continue;
            }
            if (r11 = this.tokenizer.table(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (r11 = this.tokenizer.lheading(e12)) {
              e12 = e12.substring(r11.raw.length), t11.push(r11);
              continue;
            }
            if (a11 = e12, this.options.extensions && this.options.extensions.startBlock) {
              let t12 = 1 / 0, n12 = e12.slice(1), r12;
              this.options.extensions.startBlock.forEach((e13) => {
                r12 = e13.call({
                  lexer: this
                }, n12), typeof r12 == `number` && r12 >= 0 && (t12 = Math.min(t12, r12));
              }), t12 < 1 / 0 && t12 >= 0 && (a11 = e12.substring(0, t12 + 1));
            }
            if (this.state.top && (r11 = this.tokenizer.paragraph(a11))) {
              i11 = t11[t11.length - 1], n11 && (i11 == null ? void 0 : i11.type) === `paragraph` ? (i11.raw += `
` + r11.raw, i11.text += `
` + r11.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = i11.text) : t11.push(r11), n11 = a11.length !== e12.length, e12 = e12.substring(r11.raw.length);
              continue;
            }
            if (r11 = this.tokenizer.text(e12)) {
              e12 = e12.substring(r11.raw.length), i11 = t11[t11.length - 1], i11 && i11.type === `text` ? (i11.raw += `
` + r11.raw, i11.text += `
` + r11.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = i11.text) : t11.push(r11);
              continue;
            }
            if (e12) {
              let t12 = `Infinite loop on byte: ` + e12.charCodeAt(0);
              if (this.options.silent) {
                console.error(t12);
                break;
              } else throw Error(t12);
            }
          }
          return this.state.top = true, t11;
        }
        inline(e12, t11 = []) {
          return this.inlineQueue.push({
            src: e12,
            tokens: t11
          }), t11;
        }
        inlineTokens(e12, t11 = []) {
          let n11, r11, i11, a11 = e12, o11, s11, c11;
          if (this.tokens.links) {
            let e13 = Object.keys(this.tokens.links);
            if (e13.length > 0) for (; (o11 = this.tokenizer.rules.inline.reflinkSearch.exec(a11)) != null; ) e13.includes(o11[0].slice(o11[0].lastIndexOf(`[`) + 1, -1)) && (a11 = a11.slice(0, o11.index) + `[` + `a`.repeat(o11[0].length - 2) + `]` + a11.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
          }
          for (; (o11 = this.tokenizer.rules.inline.blockSkip.exec(a11)) != null; ) a11 = a11.slice(0, o11.index) + `[` + `a`.repeat(o11[0].length - 2) + `]` + a11.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
          for (; (o11 = this.tokenizer.rules.inline.anyPunctuation.exec(a11)) != null; ) a11 = a11.slice(0, o11.index) + `++` + a11.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
          for (; e12; ) if (s11 || (c11 = ``), s11 = false, !(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((r12) => (n11 = r12.call({
            lexer: this
          }, e12, t11)) ? (e12 = e12.substring(n11.raw.length), t11.push(n11), true) : false))) {
            if (n11 = this.tokenizer.escape(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.tag(e12)) {
              e12 = e12.substring(n11.raw.length), r11 = t11[t11.length - 1], r11 && n11.type === `text` && r11.type === `text` ? (r11.raw += n11.raw, r11.text += n11.text) : t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.link(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.reflink(e12, this.tokens.links)) {
              e12 = e12.substring(n11.raw.length), r11 = t11[t11.length - 1], r11 && n11.type === `text` && r11.type === `text` ? (r11.raw += n11.raw, r11.text += n11.text) : t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.emStrong(e12, a11, c11)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.codespan(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.br(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.del(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (n11 = this.tokenizer.autolink(e12)) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (!this.state.inLink && (n11 = this.tokenizer.url(e12))) {
              e12 = e12.substring(n11.raw.length), t11.push(n11);
              continue;
            }
            if (i11 = e12, this.options.extensions && this.options.extensions.startInline) {
              let t12 = 1 / 0, n12 = e12.slice(1), r12;
              this.options.extensions.startInline.forEach((e13) => {
                r12 = e13.call({
                  lexer: this
                }, n12), typeof r12 == `number` && r12 >= 0 && (t12 = Math.min(t12, r12));
              }), t12 < 1 / 0 && t12 >= 0 && (i11 = e12.substring(0, t12 + 1));
            }
            if (n11 = this.tokenizer.inlineText(i11)) {
              e12 = e12.substring(n11.raw.length), n11.raw.slice(-1) !== `_` && (c11 = n11.raw.slice(-1)), s11 = true, r11 = t11[t11.length - 1], r11 && r11.type === `text` ? (r11.raw += n11.raw, r11.text += n11.text) : t11.push(n11);
              continue;
            }
            if (e12) {
              let t12 = `Infinite loop on byte: ` + e12.charCodeAt(0);
              if (this.options.silent) {
                console.error(t12);
                break;
              } else throw Error(t12);
            }
          }
          return t11;
        }
      }
      class He2 {
        constructor(t11) {
          __publicField(this, "options");
          __publicField(this, "parser");
          this.options = t11 || e11.defaults;
        }
        space(e12) {
          return ``;
        }
        code({ text: e12, lang: t11, escaped: n11 }) {
          var _a3;
          let r11 = (_a3 = (t11 || ``).match(/^\S*/)) == null ? void 0 : _a3[0], i11 = e12.replace(/\n$/, ``) + `
`;
          return r11 ? `<pre><code class="language-` + l10(r11) + `">` + (n11 ? i11 : l10(i11, true)) + `</code></pre>
` : `<pre><code>` + (n11 ? i11 : l10(i11, true)) + `</code></pre>
`;
        }
        blockquote({ tokens: e12 }) {
          let t11 = this.parser.parse(e12);
          return `<blockquote>
${t11}</blockquote>
`;
        }
        html({ text: e12 }) {
          return e12;
        }
        heading({ tokens: e12, depth: t11 }) {
          return `<h${t11}>${this.parser.parseInline(e12)}</h${t11}>
`;
        }
        hr(e12) {
          return `<hr>
`;
        }
        list(e12) {
          let t11 = e12.ordered, n11 = e12.start, r11 = ``;
          for (let t12 = 0; t12 < e12.items.length; t12++) {
            let n12 = e12.items[t12];
            r11 += this.listitem(n12);
          }
          let i11 = t11 ? `ol` : `ul`, a11 = t11 && n11 !== 1 ? ` start="` + n11 + `"` : ``;
          return `<` + i11 + a11 + `>
` + r11 + `</` + i11 + `>
`;
        }
        listitem(e12) {
          let t11 = ``;
          if (e12.task) {
            let n11 = this.checkbox({
              checked: !!e12.checked
            });
            e12.loose ? e12.tokens.length > 0 && e12.tokens[0].type === `paragraph` ? (e12.tokens[0].text = n11 + ` ` + e12.tokens[0].text, e12.tokens[0].tokens && e12.tokens[0].tokens.length > 0 && e12.tokens[0].tokens[0].type === `text` && (e12.tokens[0].tokens[0].text = n11 + ` ` + e12.tokens[0].tokens[0].text)) : e12.tokens.unshift({
              type: `text`,
              raw: n11 + ` `,
              text: n11 + ` `
            }) : t11 += n11 + ` `;
          }
          return t11 += this.parser.parse(e12.tokens, !!e12.loose), `<li>${t11}</li>
`;
        }
        checkbox({ checked: e12 }) {
          return `<input ` + (e12 ? `checked="" ` : ``) + `disabled="" type="checkbox">`;
        }
        paragraph({ tokens: e12 }) {
          return `<p>${this.parser.parseInline(e12)}</p>
`;
        }
        table(e12) {
          let t11 = ``, n11 = ``;
          for (let t12 = 0; t12 < e12.header.length; t12++) n11 += this.tablecell(e12.header[t12]);
          t11 += this.tablerow({
            text: n11
          });
          let r11 = ``;
          for (let t12 = 0; t12 < e12.rows.length; t12++) {
            let i11 = e12.rows[t12];
            n11 = ``;
            for (let e13 = 0; e13 < i11.length; e13++) n11 += this.tablecell(i11[e13]);
            r11 += this.tablerow({
              text: n11
            });
          }
          return r11 && (r11 = `<tbody>${r11}</tbody>`), `<table>
<thead>
` + t11 + `</thead>
` + r11 + `</table>
`;
        }
        tablerow({ text: e12 }) {
          return `<tr>
${e12}</tr>
`;
        }
        tablecell(e12) {
          let t11 = this.parser.parseInline(e12.tokens), n11 = e12.header ? `th` : `td`, r11 = e12.align ? `<${n11} align="${e12.align}">` : `<${n11}>`;
          return r11 + t11 + `</${n11}>
`;
        }
        strong({ tokens: e12 }) {
          return `<strong>${this.parser.parseInline(e12)}</strong>`;
        }
        em({ tokens: e12 }) {
          return `<em>${this.parser.parseInline(e12)}</em>`;
        }
        codespan({ text: e12 }) {
          return `<code>${e12}</code>`;
        }
        br(e12) {
          return `<br>`;
        }
        del({ tokens: e12 }) {
          return `<del>${this.parser.parseInline(e12)}</del>`;
        }
        link({ href: e12, title: t11, tokens: n11 }) {
          let r11 = this.parser.parseInline(n11), i11 = f10(e12);
          if (i11 === null) return r11;
          e12 = i11;
          let a11 = `<a href="` + e12 + `"`;
          return t11 && (a11 += ` title="` + t11 + `"`), a11 += `>` + r11 + `</a>`, a11;
        }
        image({ href: e12, title: t11, text: n11 }) {
          let r11 = f10(e12);
          if (r11 === null) return n11;
          e12 = r11;
          let i11 = `<img src="${e12}" alt="${n11}"`;
          return t11 && (i11 += ` title="${t11}"`), i11 += `>`, i11;
        }
        text(e12) {
          return `tokens` in e12 && e12.tokens ? this.parser.parseInline(e12.tokens) : e12.text;
        }
      }
      class Ue2 {
        strong({ text: e12 }) {
          return e12;
        }
        em({ text: e12 }) {
          return e12;
        }
        codespan({ text: e12 }) {
          return e12;
        }
        del({ text: e12 }) {
          return e12;
        }
        html({ text: e12 }) {
          return e12;
        }
        text({ text: e12 }) {
          return e12;
        }
        link({ text: e12 }) {
          return `` + e12;
        }
        image({ text: e12 }) {
          return `` + e12;
        }
        br() {
          return ``;
        }
      }
      class We2 {
        constructor(t11) {
          __publicField(this, "options");
          __publicField(this, "renderer");
          __publicField(this, "textRenderer");
          this.options = t11 || e11.defaults, this.options.renderer = this.options.renderer || new He2(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new Ue2();
        }
        static parse(e12, t11) {
          let n11 = new We2(t11);
          return n11.parse(e12);
        }
        static parseInline(e12, t11) {
          let n11 = new We2(t11);
          return n11.parseInline(e12);
        }
        parse(e12, t11 = true) {
          let n11 = ``;
          for (let r11 = 0; r11 < e12.length; r11++) {
            let i11 = e12[r11];
            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[i11.type]) {
              let e13 = i11, t12 = this.options.extensions.renderers[e13.type].call({
                parser: this
              }, e13);
              if (t12 !== false || ![
                `space`,
                `hr`,
                `heading`,
                `code`,
                `table`,
                `blockquote`,
                `list`,
                `html`,
                `paragraph`,
                `text`
              ].includes(e13.type)) {
                n11 += t12 || ``;
                continue;
              }
            }
            let a11 = i11;
            switch (a11.type) {
              case `space`:
                n11 += this.renderer.space(a11);
                continue;
              case `hr`:
                n11 += this.renderer.hr(a11);
                continue;
              case `heading`:
                n11 += this.renderer.heading(a11);
                continue;
              case `code`:
                n11 += this.renderer.code(a11);
                continue;
              case `table`:
                n11 += this.renderer.table(a11);
                continue;
              case `blockquote`:
                n11 += this.renderer.blockquote(a11);
                continue;
              case `list`:
                n11 += this.renderer.list(a11);
                continue;
              case `html`:
                n11 += this.renderer.html(a11);
                continue;
              case `paragraph`:
                n11 += this.renderer.paragraph(a11);
                continue;
              case `text`: {
                let i12 = a11, o11 = this.renderer.text(i12);
                for (; r11 + 1 < e12.length && e12[r11 + 1].type === `text`; ) i12 = e12[++r11], o11 += `
` + this.renderer.text(i12);
                t11 ? n11 += this.renderer.paragraph({
                  type: `paragraph`,
                  raw: o11,
                  text: o11,
                  tokens: [
                    {
                      type: `text`,
                      raw: o11,
                      text: o11
                    }
                  ]
                }) : n11 += o11;
                continue;
              }
              default: {
                let e13 = `Token with "` + a11.type + `" type was not found.`;
                if (this.options.silent) return console.error(e13), ``;
                throw Error(e13);
              }
            }
          }
          return n11;
        }
        parseInline(e12, t11) {
          t11 || (t11 = this.renderer);
          let n11 = ``;
          for (let r11 = 0; r11 < e12.length; r11++) {
            let i11 = e12[r11];
            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[i11.type]) {
              let e13 = this.options.extensions.renderers[i11.type].call({
                parser: this
              }, i11);
              if (e13 !== false || ![
                `escape`,
                `html`,
                `link`,
                `image`,
                `strong`,
                `em`,
                `codespan`,
                `br`,
                `del`,
                `text`
              ].includes(i11.type)) {
                n11 += e13 || ``;
                continue;
              }
            }
            let a11 = i11;
            switch (a11.type) {
              case `escape`:
                n11 += t11.text(a11);
                break;
              case `html`:
                n11 += t11.html(a11);
                break;
              case `link`:
                n11 += t11.link(a11);
                break;
              case `image`:
                n11 += t11.image(a11);
                break;
              case `strong`:
                n11 += t11.strong(a11);
                break;
              case `em`:
                n11 += t11.em(a11);
                break;
              case `codespan`:
                n11 += t11.codespan(a11);
                break;
              case `br`:
                n11 += t11.br(a11);
                break;
              case `del`:
                n11 += t11.del(a11);
                break;
              case `text`:
                n11 += t11.text(a11);
                break;
              default: {
                let e13 = `Token with "` + a11.type + `" type was not found.`;
                if (this.options.silent) return console.error(e13), ``;
                throw Error(e13);
              }
            }
          }
          return n11;
        }
      }
      class T10 {
        constructor(t11) {
          __publicField(this, "options");
          this.options = t11 || e11.defaults;
        }
        preprocess(e12) {
          return e12;
        }
        postprocess(e12) {
          return e12;
        }
        processAllTokens(e12) {
          return e12;
        }
      }
      __publicField(T10, "passThroughHooks", /* @__PURE__ */ new Set([
        `preprocess`,
        `postprocess`,
        `processAllTokens`
      ]));
      class Ge2 {
        constructor(...e12) {
          __publicField(this, "defaults", t10());
          __publicField(this, "options", this.setOptions);
          __publicField(this, "parse", this.parseMarkdown(Ve2.lex, We2.parse));
          __publicField(this, "parseInline", this.parseMarkdown(Ve2.lexInline, We2.parseInline));
          __publicField(this, "Parser", We2);
          __publicField(this, "Renderer", He2);
          __publicField(this, "TextRenderer", Ue2);
          __publicField(this, "Lexer", Ve2);
          __publicField(this, "Tokenizer", y10);
          __publicField(this, "Hooks", T10);
          this.use(...e12);
        }
        walkTokens(e12, t11) {
          var _a3, _b3;
          let n11 = [];
          for (let r11 of e12) switch (n11 = n11.concat(t11.call(this, r11)), r11.type) {
            case `table`: {
              let e13 = r11;
              for (let r12 of e13.header) n11 = n11.concat(this.walkTokens(r12.tokens, t11));
              for (let r12 of e13.rows) for (let e14 of r12) n11 = n11.concat(this.walkTokens(e14.tokens, t11));
              break;
            }
            case `list`: {
              let e13 = r11;
              n11 = n11.concat(this.walkTokens(e13.items, t11));
              break;
            }
            default: {
              let e13 = r11;
              ((_b3 = (_a3 = this.defaults.extensions) == null ? void 0 : _a3.childTokens) == null ? void 0 : _b3[e13.type]) ? this.defaults.extensions.childTokens[e13.type].forEach((r12) => {
                let i11 = e13[r12].flat(1 / 0);
                n11 = n11.concat(this.walkTokens(i11, t11));
              }) : e13.tokens && (n11 = n11.concat(this.walkTokens(e13.tokens, t11)));
            }
          }
          return n11;
        }
        use(...e12) {
          let t11 = this.defaults.extensions || {
            renderers: {},
            childTokens: {}
          };
          return e12.forEach((e13) => {
            let n11 = {
              ...e13
            };
            if (n11.async = this.defaults.async || n11.async || false, e13.extensions && (e13.extensions.forEach((e14) => {
              if (!e14.name) throw Error(`extension name required`);
              if (`renderer` in e14) {
                let n12 = t11.renderers[e14.name];
                n12 ? t11.renderers[e14.name] = function(...t12) {
                  let r11 = e14.renderer.apply(this, t12);
                  return r11 === false && (r11 = n12.apply(this, t12)), r11;
                } : t11.renderers[e14.name] = e14.renderer;
              }
              if (`tokenizer` in e14) {
                if (!e14.level || e14.level !== `block` && e14.level !== `inline`) throw Error(`extension level must be 'block' or 'inline'`);
                let n12 = t11[e14.level];
                n12 ? n12.unshift(e14.tokenizer) : t11[e14.level] = [
                  e14.tokenizer
                ], e14.start && (e14.level === `block` ? t11.startBlock ? t11.startBlock.push(e14.start) : t11.startBlock = [
                  e14.start
                ] : e14.level === `inline` && (t11.startInline ? t11.startInline.push(e14.start) : t11.startInline = [
                  e14.start
                ]));
              }
              `childTokens` in e14 && e14.childTokens && (t11.childTokens[e14.name] = e14.childTokens);
            }), n11.extensions = t11), e13.renderer) {
              let t12 = this.defaults.renderer || new He2(this.defaults);
              for (let n12 in e13.renderer) {
                if (!(n12 in t12)) throw Error(`renderer '${n12}' does not exist`);
                if ([
                  `options`,
                  `parser`
                ].includes(n12)) continue;
                let r11 = n12, i11 = e13.renderer[r11], a11 = t12[r11];
                t12[r11] = (...e14) => {
                  let n13 = i11.apply(t12, e14);
                  return n13 === false && (n13 = a11.apply(t12, e14)), n13 || ``;
                };
              }
              n11.renderer = t12;
            }
            if (e13.tokenizer) {
              let t12 = this.defaults.tokenizer || new y10(this.defaults);
              for (let n12 in e13.tokenizer) {
                if (!(n12 in t12)) throw Error(`tokenizer '${n12}' does not exist`);
                if ([
                  `options`,
                  `rules`,
                  `lexer`
                ].includes(n12)) continue;
                let r11 = n12, i11 = e13.tokenizer[r11], a11 = t12[r11];
                t12[r11] = (...e14) => {
                  let n13 = i11.apply(t12, e14);
                  return n13 === false && (n13 = a11.apply(t12, e14)), n13;
                };
              }
              n11.tokenizer = t12;
            }
            if (e13.hooks) {
              let t12 = this.defaults.hooks || new T10();
              for (let n12 in e13.hooks) {
                if (!(n12 in t12)) throw Error(`hook '${n12}' does not exist`);
                if (n12 === `options`) continue;
                let r11 = n12, i11 = e13.hooks[r11], a11 = t12[r11];
                T10.passThroughHooks.has(n12) ? t12[r11] = (e14) => {
                  if (this.defaults.async) return Promise.resolve(i11.call(t12, e14)).then((e15) => a11.call(t12, e15));
                  let n13 = i11.call(t12, e14);
                  return a11.call(t12, n13);
                } : t12[r11] = (...e14) => {
                  let n13 = i11.apply(t12, e14);
                  return n13 === false && (n13 = a11.apply(t12, e14)), n13;
                };
              }
              n11.hooks = t12;
            }
            if (e13.walkTokens) {
              let t12 = this.defaults.walkTokens, r11 = e13.walkTokens;
              n11.walkTokens = function(e14) {
                let n12 = [];
                return n12.push(r11.call(this, e14)), t12 && (n12 = n12.concat(t12.call(this, e14))), n12;
              };
            }
            this.defaults = {
              ...this.defaults,
              ...n11
            };
          }), this;
        }
        setOptions(e12) {
          return this.defaults = {
            ...this.defaults,
            ...e12
          }, this;
        }
        lexer(e12, t11) {
          return Ve2.lex(e12, t11 ?? this.defaults);
        }
        parser(e12, t11) {
          return We2.parse(e12, t11 ?? this.defaults);
        }
        parseMarkdown(e12, t11) {
          let n11 = (n12, r11) => {
            let i11 = {
              ...r11
            }, a11 = {
              ...this.defaults,
              ...i11
            }, o11 = this.onError(!!a11.silent, !!a11.async);
            if (this.defaults.async === true && i11.async === false) return o11(Error(`marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.`));
            if (n12 == null) return o11(Error(`marked(): input parameter is undefined or null`));
            if (typeof n12 != `string`) return o11(Error(`marked(): input parameter is of type ` + Object.prototype.toString.call(n12) + `, string expected`));
            if (a11.hooks && (a11.hooks.options = a11), a11.async) return Promise.resolve(a11.hooks ? a11.hooks.preprocess(n12) : n12).then((t12) => e12(t12, a11)).then((e13) => a11.hooks ? a11.hooks.processAllTokens(e13) : e13).then((e13) => a11.walkTokens ? Promise.all(this.walkTokens(e13, a11.walkTokens)).then(() => e13) : e13).then((e13) => t11(e13, a11)).then((e13) => a11.hooks ? a11.hooks.postprocess(e13) : e13).catch(o11);
            try {
              a11.hooks && (n12 = a11.hooks.preprocess(n12));
              let r12 = e12(n12, a11);
              a11.hooks && (r12 = a11.hooks.processAllTokens(r12)), a11.walkTokens && this.walkTokens(r12, a11.walkTokens);
              let i12 = t11(r12, a11);
              return a11.hooks && (i12 = a11.hooks.postprocess(i12)), i12;
            } catch (e13) {
              return o11(e13);
            }
          };
          return n11;
        }
        onError(e12, t11) {
          return (n11) => {
            if (n11.message += `
Please report this to https://github.com/markedjs/marked.`, e12) {
              let e13 = `<p>An error occurred:</p><pre>` + l10(n11.message + ``, true) + `</pre>`;
              return t11 ? Promise.resolve(e13) : e13;
            }
            if (t11) return Promise.reject(n11);
            throw n11;
          };
        }
      }
      let Ke2 = new Ge2();
      function qe2(e12, t11) {
        return Ke2.parse(e12, t11);
      }
      qe2.options = qe2.setOptions = function(e12) {
        return Ke2.setOptions(e12), qe2.defaults = Ke2.defaults, n10(qe2.defaults), qe2;
      }, qe2.getDefaults = t10, qe2.defaults = e11.defaults, qe2.use = function(...e12) {
        return Ke2.use(...e12), qe2.defaults = Ke2.defaults, n10(qe2.defaults), qe2;
      }, qe2.walkTokens = function(e12, t11) {
        return Ke2.walkTokens(e12, t11);
      }, qe2.parseInline = Ke2.parseInline, qe2.Parser = We2, qe2.parser = We2.parse, qe2.Renderer = He2, qe2.TextRenderer = Ue2, qe2.Lexer = Ve2, qe2.lexer = Ve2.lex, qe2.Tokenizer = y10, qe2.Hooks = T10, qe2.parse = qe2;
      let Je2 = qe2.options, Ye2 = qe2.setOptions, Xe2 = qe2.use, Ze2 = qe2.walkTokens, Qe2 = qe2.parseInline, $e2 = qe2, et2 = We2.parse, tt2 = Ve2.lex;
      e11.Hooks = T10, e11.Lexer = Ve2, e11.Marked = Ge2, e11.Parser = We2, e11.Renderer = He2, e11.TextRenderer = Ue2, e11.Tokenizer = y10, e11.getDefaults = t10, e11.lexer = tt2, e11.marked = qe2, e11.options = Je2, e11.parse = $e2, e11.parseInline = Qe2, e11.parser = et2, e11.setOptions = Ye2, e11.use = Xe2, e11.walkTokens = Ze2;
    });
  })();
  var Ak = kk.Hooks || exports.Hooks, jk = kk.Lexer || exports.Lexer, Mk = kk.Marked || exports.Marked, Nk = kk.Parser || exports.Parser, Pk = kk.Renderer || exports.Renderer, Ite = kk.TextRenderer || exports.TextRenderer, Lte = kk.Tokenizer || exports.Tokenizer, Fk = kk.defaults || exports.defaults, Rte = kk.getDefaults || exports.getDefaults, Ik = kk.lexer || exports.lexer, Lk = kk.marked || exports.marked, zte = kk.options || exports.options, Rk = kk.parse || exports.parse, Bte = kk.parseInline || exports.parseInline, zk = kk.parser || exports.parser, Vte = kk.setOptions || exports.setOptions, Hte = kk.use || exports.use, Ute = kk.walkTokens || exports.walkTokens;
  function Bk(e10) {
    return JSON.stringify(e10, Hk);
  }
  function Vk(e10) {
    let t10 = JSON.parse(e10);
    return t10 = Uk(t10), t10;
  }
  function Hk(e10, t10) {
    return t10 instanceof RegExp ? {
      $mid: 2,
      source: t10.source,
      flags: t10.flags
    } : t10;
  }
  function Uk(e10, t10 = 0) {
    if (!e10 || t10 > 200) return e10;
    if (typeof e10 == `object`) {
      switch (e10.$mid) {
        case 1:
          return xa.revive(e10);
        case 2:
          return new RegExp(e10.source, e10.flags);
        case 17:
          return new Date(e10.source);
      }
      if (e10 instanceof Ah || e10 instanceof Uint8Array) return e10;
      if (Array.isArray(e10)) for (let n10 = 0; n10 < e10.length; ++n10) e10[n10] = Uk(e10[n10], t10 + 1);
      else for (let n10 in e10) Object.hasOwnProperty.call(e10, n10) && (e10[n10] = Uk(e10[n10], t10 + 1));
    }
    return e10;
  }
  const Wk = Object.freeze({
    image: ({ href: e10, title: t10, text: n10 }) => {
      let r10 = [], i10 = [];
      return e10 && ({ href: e10, dimensions: r10 } = Ek(e10), i10.push(`src="${wk(e10)}"`)), n10 && i10.push(`alt="${wk(n10)}"`), t10 && i10.push(`title="${wk(t10)}"`), r10.length && (i10 = i10.concat(r10)), `<img ` + i10.join(` `) + `>`;
    },
    paragraph({ tokens: e10 }) {
      return `<p>${this.parser.parseInline(e10)}</p>`;
    },
    link({ href: e10, title: t10, tokens: n10 }) {
      let r10 = this.parser.parseInline(n10);
      return typeof e10 == `string` ? (e10 === r10 && (r10 = Tk(r10)), t10 = typeof t10 == `string` ? wk(Tk(t10)) : ``, e10 = Tk(e10), e10 = e10.replace(/&/g, `&amp;`).replace(/</g, `&lt;`).replace(/>/g, `&gt;`).replace(/"/g, `&quot;`).replace(/'/g, `&#39;`), `<a href="${e10}" title="${t10 || e10}" draggable="false">${r10}</a>`) : ``;
    }
  });
  Gk = function(e10, t10 = {}, n10 = {}) {
    let r10 = new A(), i10 = false, a10 = CD(t10), o10 = function(t11) {
      let n11;
      try {
        n11 = Vk(decodeURIComponent(t11));
      } catch {
      }
      return n11 ? (n11 = Pe(n11, (t12) => {
        if (e10.uris && e10.uris[t12]) return xa.revive(e10.uris[t12]);
      }), encodeURIComponent(JSON.stringify(n11))) : t11;
    }, s10 = function(t11, n11) {
      let r11 = e10.uris && e10.uris[t11], i11 = xa.revive(r11);
      return n11 ? t11.startsWith(Su.data + `:`) ? t11 : (i11 || (i11 = xa.parse(t11)), Au.uriToBrowserUri(i11).toString(true)) : !i11 || xa.parse(t11).toString() === i11.toString() ? t11 : (i11.query && (i11 = i11.with({
        query: o10(i11.query)
      })), i11.toString());
    }, c10 = new Pk();
    c10.image = Wk.image, c10.link = Wk.link, c10.paragraph = Wk.paragraph;
    let l10 = [], u10 = [];
    if (t10.codeBlockRendererSync ? c10.code = ({ text: e11, lang: n11 }) => {
      let r11 = Ok.nextId(), i11 = t10.codeBlockRendererSync(Kk(n11), e11);
      return u10.push([
        r11,
        i11
      ]), `<div class="code" data-code="${r11}">${hs(e11)}</div>`;
    } : t10.codeBlockRenderer && (c10.code = ({ text: e11, lang: n11 }) => {
      let r11 = Ok.nextId(), i11 = t10.codeBlockRenderer(Kk(n11), e11);
      return l10.push(i11.then((e12) => [
        r11,
        e12
      ])), `<div class="code" data-code="${r11}">${hs(e11)}</div>`;
    }), t10.actionHandler) {
      let n11 = function(n12) {
        let r12 = n12.target;
        if (!(r12.tagName !== `A` && (r12 = r12.parentElement, !r12 || r12.tagName !== `A`))) try {
          let i12 = r12.dataset.href;
          i12 && (e10.baseUri && (i12 = qk(xa.from(e10.baseUri), i12)), t10.actionHandler.callback(i12, n12));
        } catch (e11) {
          gr(e11);
        } finally {
          n12.preventDefault();
        }
      }, r11 = t10.actionHandler.disposables.add(new bD(a10, `click`)), i11 = t10.actionHandler.disposables.add(new bD(a10, `auxclick`));
      t10.actionHandler.disposables.add(M.any(r11.event, i11.event)((e11) => {
        let t11 = new Kc(R(a10), e11);
        !t11.leftButton && !t11.middleButton || n11(t11);
      })), t10.actionHandler.disposables.add(z(a10, `keydown`, (e11) => {
        let t11 = new Hc(e11);
        !t11.equals(10) && !t11.equals(3) || n11(t11);
      }));
    }
    e10.supportHtml || (c10.html = ({ text: n11 }) => {
      var _a3;
      if ((_a3 = t10.sanitizerOptions) == null ? void 0 : _a3.replaceWithPlaintext) return hs(n11);
      let r11 = e10.isTrusted ? n11.match(/^(<span[^>]+>)|(<\/\s*span>)$/) : void 0;
      return r11 ? n11 : ``;
    }), n10.renderer = c10;
    let d10 = e10.value ?? ``;
    d10.length > 1e5 && (d10 = `${d10.substr(0, 1e5)}\u2026`), e10.supportThemeIcons && (d10 = XO(d10));
    let f10;
    if (t10.fillInIncompleteTokens) {
      let e11 = {
        ...Fk,
        ...n10
      }, t11 = Ik(d10, e11), r11 = uA(t11);
      f10 = zk(r11, e11);
    } else f10 = Rk(d10, {
      ...n10,
      async: false
    });
    if (e10.supportThemeIcons) {
      let e11 = AD(f10);
      f10 = e11.map((e12) => typeof e12 == `string` ? e12 : e12.outerHTML).join(``);
    }
    let p10 = new DOMParser(), m10 = p10.parseFromString(Yk({
      isTrusted: e10.isTrusted,
      ...t10.sanitizerOptions
    }, f10), `text/html`);
    if (m10.body.querySelectorAll(`img, audio, video, source`).forEach((n11) => {
      let r11 = n11.getAttribute(`src`);
      if (r11) {
        let i11 = r11;
        try {
          e10.baseUri && (i11 = qk(xa.from(e10.baseUri), i11));
        } catch {
        }
        if (n11.setAttribute(`src`, s10(i11, true)), t10.remoteImageIsAllowed) {
          let e11 = xa.parse(i11);
          e11.scheme !== Su.file && e11.scheme !== Su.data && !t10.remoteImageIsAllowed(e11) && n11.replaceWith(H(``, void 0, n11.outerHTML));
        }
      }
    }), m10.body.querySelectorAll(`a`).forEach((t11) => {
      let n11 = t11.getAttribute(`href`);
      if (t11.setAttribute(`href`, ``), !n11 || /^data:|javascript:/i.test(n11) || /^command:/i.test(n11) && !e10.isTrusted || /^command:(\/\/\/)?_workbench\.downloadResource/i.test(n11)) t11.replaceWith(...t11.childNodes);
      else {
        let r11 = s10(n11, false);
        e10.baseUri && (r11 = qk(xa.from(e10.baseUri), n11)), t11.dataset.href = r11;
      }
    }), a10.innerHTML = Yk({
      isTrusted: e10.isTrusted,
      ...t10.sanitizerOptions
    }, m10.body.innerHTML), l10.length > 0) Promise.all(l10).then((e11) => {
      var _a3;
      if (i10) return;
      let n11 = new Map(e11), r11 = a10.querySelectorAll(`div[data-code]`);
      for (let e12 of r11) {
        let t11 = n11.get(e12.dataset.code ?? ``);
        t11 && af(e12, t11);
      }
      (_a3 = t10.asyncRenderCallback) == null ? void 0 : _a3.call(t10);
    });
    else if (u10.length > 0) {
      let e11 = new Map(u10), t11 = a10.querySelectorAll(`div[data-code]`);
      for (let n11 of t11) {
        let t12 = e11.get(n11.dataset.code ?? ``);
        t12 && af(n11, t12);
      }
    }
    if (t10.asyncRenderCallback) for (let e11 of a10.getElementsByTagName(`img`)) {
      let n11 = r10.add(z(e11, `load`, () => {
        n11.dispose(), t10.asyncRenderCallback();
      }));
    }
    return {
      element: a10,
      dispose: () => {
        i10 = true, r10.dispose();
      }
    };
  };
  function Kk(e10) {
    if (!e10) return ``;
    let t10 = e10.split(/[\s+|:|,|\{|\?]/, 1);
    return t10.length ? t10[0] : e10;
  }
  function qk(e10, t10) {
    let n10 = /^\w[\w\d+.-]*:/.test(t10);
    return n10 ? t10 : e10.path.endsWith(`/`) ? mk(e10, t10).toString() : mk(uk(e10), t10).toString();
  }
  const Jk = [
    `area`,
    `base`,
    `br`,
    `col`,
    `command`,
    `embed`,
    `hr`,
    `img`,
    `input`,
    `keygen`,
    `link`,
    `meta`,
    `param`,
    `source`,
    `track`,
    `wbr`
  ];
  function Yk(e10, t10) {
    let { config: n10, allowedSchemes: r10 } = Zk(e10), i10 = new A();
    i10.add(SA(`uponSanitizeAttribute`, (e11, t11) => {
      var _a3;
      if (t11.attrName === `style` || t11.attrName === `class`) {
        if (e11.tagName === `SPAN`) {
          if (t11.attrName === `style`) {
            t11.keepAttr = /^(color\:(#[0-9a-fA-F]+|var\(--vscode(-[a-zA-Z]+)+\));)?(background-color\:(#[0-9a-fA-F]+|var\(--vscode(-[a-zA-Z]+)+\));)?(border-radius:[0-9]+px;)?$/.test(t11.attrValue);
            return;
          } else if (t11.attrName === `class`) {
            t11.keepAttr = /^codicon codicon-[a-z\-]+( codicon-modifier-[a-z\-]+)?$/.test(t11.attrValue);
            return;
          }
        }
        t11.keepAttr = false;
        return;
      } else if (e11.tagName === `INPUT` && ((_a3 = e11.attributes.getNamedItem(`type`)) == null ? void 0 : _a3.value) === `checkbox`) {
        if (t11.attrName === `type` && t11.attrValue === `checkbox` || t11.attrName === `disabled` || t11.attrName === `checked`) {
          t11.keepAttr = true;
          return;
        }
        t11.keepAttr = false;
      }
    })), i10.add(SA(`uponSanitizeElement`, (t11, n11) => {
      var _a3;
      if (n11.tagName === `input` && (((_a3 = t11.attributes.getNamedItem(`type`)) == null ? void 0 : _a3.value) === `checkbox` ? t11.setAttribute(`disabled`, ``) : e10.replaceWithPlaintext || t11.remove()), e10.replaceWithPlaintext && !n11.allowedTags[n11.tagName] && n11.tagName !== `body` && t11.parentElement) {
        let e11, r11;
        if (n11.tagName === `#comment`) e11 = `<!--${t11.textContent}-->`;
        else {
          let i12 = Jk.includes(n11.tagName), a11 = t11.attributes.length ? ` ` + Array.from(t11.attributes).map((e12) => `${e12.name}="${e12.value}"`).join(` `) : ``;
          e11 = `<${n11.tagName}${a11}>`, i12 || (r11 = `</${n11.tagName}>`);
        }
        let i11 = document.createDocumentFragment(), a10 = t11.parentElement.ownerDocument.createTextNode(e11);
        i11.appendChild(a10);
        let o10 = r11 ? t11.parentElement.ownerDocument.createTextNode(r11) : void 0;
        for (; t11.firstChild; ) i11.appendChild(t11.firstChild);
        o10 && i11.appendChild(o10), t11.nodeType === Node.COMMENT_NODE ? t11.parentElement.insertBefore(i11, t11) : t11.parentElement.replaceChild(i11, t11);
      }
    })), i10.add(yf(r10));
    try {
      return yu(t10, {
        ...n10,
        RETURN_TRUSTED_TYPE: true
      });
    } finally {
      i10.dispose();
    }
  }
  const Xk = [
    `align`,
    `autoplay`,
    `alt`,
    `checked`,
    `class`,
    `colspan`,
    `controls`,
    `data-code`,
    `data-href`,
    `disabled`,
    `draggable`,
    `height`,
    `href`,
    `loop`,
    `muted`,
    `playsinline`,
    `poster`,
    `rowspan`,
    `src`,
    `style`,
    `target`,
    `title`,
    `type`,
    `width`,
    `start`
  ];
  function Zk(e10) {
    let t10 = [
      Su.http,
      Su.https,
      Su.mailto,
      Su.data,
      Su.file,
      Su.vscodeFileResource,
      Su.vscodeRemote,
      Su.vscodeRemoteResource
    ];
    return e10.isTrusted && t10.push(Su.command), {
      config: {
        ALLOWED_TAGS: e10.allowedTags ?? [
          ...bf
        ],
        ALLOWED_ATTR: Xk,
        ALLOW_UNKNOWN_PROTOCOLS: true
      },
      allowedSchemes: t10
    };
  }
  function Qk(e10) {
    return typeof e10 == `string` ? e10 : $k(e10);
  }
  function $k(e10, t10) {
    let n10 = e10.value ?? ``;
    n10.length > 1e5 && (n10 = `${n10.substr(0, 1e5)}\u2026`);
    let r10 = Rk(n10, {
      async: false,
      renderer: t10 ? rA.value : nA.value
    }).replace(/&(#\d+|[a-zA-Z]+);/g, (e11) => eA.get(e11) ?? e11);
    return Yk({
      isTrusted: false
    }, r10).toString();
  }
  const eA = /* @__PURE__ */ new Map([
    [
      `&quot;`,
      `"`
    ],
    [
      `&nbsp;`,
      ` `
    ],
    [
      `&amp;`,
      `&`
    ],
    [
      `&#39;`,
      `'`
    ],
    [
      `&lt;`,
      `<`
    ],
    [
      `&gt;`,
      `>`
    ]
  ]);
  function tA() {
    let e10 = new Pk();
    return e10.code = ({ text: e11 }) => e11, e10.blockquote = ({ text: e11 }) => e11 + `
`, e10.html = (e11) => ``, e10.heading = function({ tokens: e11 }) {
      return this.parser.parseInline(e11) + `
`;
    }, e10.hr = () => ``, e10.list = function({ items: e11 }) {
      return e11.map((e12) => this.listitem(e12)).join(`
`) + `
`;
    }, e10.listitem = ({ text: e11 }) => e11 + `
`, e10.paragraph = function({ tokens: e11 }) {
      return this.parser.parseInline(e11) + `
`;
    }, e10.table = function({ header: e11, rows: t10 }) {
      return e11.map((e12) => this.tablecell(e12)).join(` `) + `
` + t10.map((e12) => e12.map((e13) => this.tablecell(e13)).join(` `)).join(`
`) + `
`;
    }, e10.tablerow = ({ text: e11 }) => e11, e10.tablecell = function({ tokens: e11 }) {
      return this.parser.parseInline(e11);
    }, e10.strong = ({ text: e11 }) => e11, e10.em = ({ text: e11 }) => e11, e10.codespan = ({ text: e11 }) => e11, e10.br = (e11) => `
`, e10.del = ({ text: e11 }) => e11, e10.image = (e11) => ``, e10.text = ({ text: e11 }) => e11, e10.link = ({ text: e11 }) => e11, e10;
  }
  const nA = new us((e10) => tA()), rA = new us(() => {
    let e10 = tA();
    return e10.code = ({ text: e11 }) => `
\`\`\`
${e11}
\`\`\`
`, e10;
  });
  function iA(e10) {
    let t10 = ``;
    return e10.forEach((e11) => {
      t10 += e11.raw;
    }), t10;
  }
  function aA(e10) {
    var _a3, _b3;
    if (e10.tokens) for (let t10 = e10.tokens.length - 1; t10 >= 0; t10--) {
      let n10 = e10.tokens[t10];
      if (n10.type === `text`) {
        let r10 = n10.raw.split(`
`), i10 = r10[r10.length - 1];
        if (i10.includes("`")) return fA(e10);
        if (i10.includes(`**`)) return vA(e10);
        if (i10.match(/\*\w/)) return pA(e10);
        if (i10.match(/(^|\s)__\w/)) return yA(e10);
        if (i10.match(/(^|\s)_\w/)) return mA(e10);
        if (oA(i10) || sA(i10) && e10.tokens.slice(0, t10).some((e11) => e11.type === `text` && e11.raw.match(/\[[^\]]*$/))) {
          let n11 = e10.tokens.slice(t10 + 1);
          return ((_a3 = n11[0]) == null ? void 0 : _a3.type) === `link` && ((_b3 = n11[1]) == null ? void 0 : _b3.type) === `text` && n11[1].raw.match(/^ *"[^"]*$/) || i10.match(/^[^"]* +"[^"]*$/) ? gA(e10) : hA(e10);
        } else if (i10.match(/(^|\s)\[\w*/)) return _A(e10);
      }
    }
  }
  function oA(e10) {
    return !!e10.match(/(^|\s)\[.*\]\(\w*/);
  }
  function sA(e10) {
    return !!e10.match(/^[^\[]*\]\([^\)]*$/);
  }
  function cA(e10) {
    var _a3;
    let t10 = e10.items[e10.items.length - 1], n10 = t10.tokens ? t10.tokens[t10.tokens.length - 1] : void 0, r10;
    if ((n10 == null ? void 0 : n10.type) === `text` && !(`inRawBlock` in t10) && (r10 = aA(n10)), !r10 || r10.type !== `paragraph`) return;
    let i10 = iA(e10.items.slice(0, -1)), a10 = (_a3 = t10.raw.match(/^(\s*(-|\d+\.|\*) +)/)) == null ? void 0 : _a3[0];
    if (!a10) return;
    let o10 = a10 + iA(t10.tokens.slice(0, -1)) + r10.raw, s10 = Ik(i10 + o10)[0];
    if (s10.type === `list`) return s10;
  }
  const lA = 3;
  function uA(e10) {
    for (let t10 = 0; t10 < lA; t10++) {
      let t11 = dA(e10);
      if (t11) e10 = t11;
      else break;
    }
    return e10;
  }
  function dA(e10) {
    let t10, n10;
    for (t10 = 0; t10 < e10.length; t10++) {
      let r10 = e10[t10];
      if (r10.type === `paragraph` && r10.raw.match(/(\n|^)\|/)) {
        n10 = xA(e10.slice(t10));
        break;
      }
      if (t10 === e10.length - 1 && r10.type === `list`) {
        let e11 = cA(r10);
        if (e11) {
          n10 = [
            e11
          ];
          break;
        }
      }
      if (t10 === e10.length - 1 && r10.type === `paragraph`) {
        let e11 = aA(r10);
        if (e11) {
          n10 = [
            e11
          ];
          break;
        }
      }
    }
    if (n10) {
      let r10 = [
        ...e10.slice(0, t10),
        ...n10
      ];
      return r10.links = e10.links, r10;
    }
    return null;
  }
  function fA(e10) {
    return bA(e10, "`");
  }
  function pA(e10) {
    return bA(e10, `*`);
  }
  function mA(e10) {
    return bA(e10, `_`);
  }
  function hA(e10) {
    return bA(e10, `)`);
  }
  function gA(e10) {
    return bA(e10, `")`);
  }
  function _A(e10) {
    return bA(e10, `](https://microsoft.com)`);
  }
  function vA(e10) {
    return bA(e10, `**`);
  }
  function yA(e10) {
    return bA(e10, `__`);
  }
  function bA(e10, t10) {
    let n10 = iA(Array.isArray(e10) ? e10 : [
      e10
    ]);
    return Ik(n10 + t10)[0];
  }
  function xA(e10) {
    let t10 = iA(e10), n10 = t10.split(`
`), r10, i10 = false;
    for (let e11 = 0; e11 < n10.length; e11++) {
      let t11 = n10[e11].trim();
      if (r10 === void 0 && t11.match(/^\s*\|/)) {
        let e12 = t11.match(/(\|[^\|]+)(?=\||$)/g);
        e12 && (r10 = e12.length);
      } else if (typeof r10 == `number`) if (t11.match(/^\s*\|/)) {
        if (e11 !== n10.length - 1) return;
        i10 = true;
      } else return;
    }
    if (typeof r10 == `number` && r10 > 0) {
      let e11 = i10 ? n10.slice(0, -1).join(`
`) : t10, a10 = !!e11.match(/\|\s*$/), o10 = e11 + (a10 ? `` : `|`) + `
|${` --- |`.repeat(r10)}`;
      return Ik(o10);
    }
  }
  function SA(e10, t10) {
    return bu(e10, t10), k(() => xu(e10));
  }
  let wA;
  CA = (_aa = class {
    static createEmpty(t10, n10) {
      let r10 = _aa.defaultTokenMetadata, i10 = new Uint32Array(2);
      return i10[0] = t10.length, i10[1] = r10, new _aa(i10, t10, n10);
    }
    static createFromTextAndMetadata(t10, n10) {
      let r10 = 0, i10 = ``, a10 = [];
      for (let { text: e10, metadata: n11 } of t10) a10.push(r10 + e10.length, n11), r10 += e10.length, i10 += e10;
      return new _aa(new Uint32Array(a10), i10, n10);
    }
    constructor(e10, t10, n10) {
      this._lineTokensBrand = void 0, this._tokens = e10, this._tokensCount = this._tokens.length >>> 1, this._text = t10, this.languageIdCodec = n10;
    }
    equals(t10) {
      return t10 instanceof _aa ? this.slicedEquals(t10, 0, this._tokensCount) : false;
    }
    slicedEquals(e10, t10, n10) {
      if (this._text !== e10._text || this._tokensCount !== e10._tokensCount) return false;
      let r10 = t10 << 1, i10 = r10 + (n10 << 1);
      for (let t11 = r10; t11 < i10; t11++) if (this._tokens[t11] !== e10._tokens[t11]) return false;
      return true;
    }
    getLineContent() {
      return this._text;
    }
    getCount() {
      return this._tokensCount;
    }
    getStartOffset(e10) {
      return e10 > 0 ? this._tokens[e10 - 1 << 1] : 0;
    }
    getMetadata(e10) {
      let t10 = this._tokens[(e10 << 1) + 1];
      return t10;
    }
    getLanguageId(e10) {
      let t10 = this._tokens[(e10 << 1) + 1], n10 = Vx.getLanguageId(t10);
      return this.languageIdCodec.decodeLanguageId(n10);
    }
    getStandardTokenType(e10) {
      let t10 = this._tokens[(e10 << 1) + 1];
      return Vx.getTokenType(t10);
    }
    getForeground(e10) {
      let t10 = this._tokens[(e10 << 1) + 1];
      return Vx.getForeground(t10);
    }
    getClassName(e10) {
      let t10 = this._tokens[(e10 << 1) + 1];
      return Vx.getClassNameFromMetadata(t10);
    }
    getInlineStyle(e10, t10) {
      let n10 = this._tokens[(e10 << 1) + 1];
      return Vx.getInlineStyleFromMetadata(n10, t10);
    }
    getPresentation(e10) {
      let t10 = this._tokens[(e10 << 1) + 1];
      return Vx.getPresentationFromMetadata(t10);
    }
    getEndOffset(e10) {
      return this._tokens[e10 << 1];
    }
    findTokenIndexAtOffset(t10) {
      return _aa.findIndexInTokensArray(this._tokens, t10);
    }
    inflate() {
      return this;
    }
    sliceAndInflate(e10, t10, n10) {
      return new wA(this, e10, t10, n10);
    }
    static convertToEndOffset(e10, t10) {
      let n10 = e10.length >>> 1, r10 = n10 - 1;
      for (let t11 = 0; t11 < r10; t11++) e10[t11 << 1] = e10[t11 + 1 << 1];
      e10[r10 << 1] = t10;
    }
    static findIndexInTokensArray(e10, t10) {
      if (e10.length <= 2) return 0;
      let n10 = 0, r10 = (e10.length >>> 1) - 1;
      for (; n10 < r10; ) {
        let i10 = n10 + Math.floor((r10 - n10) / 2), a10 = e10[i10 << 1];
        if (a10 === t10) return i10 + 1;
        a10 < t10 ? n10 = i10 + 1 : a10 > t10 && (r10 = i10);
      }
      return n10;
    }
    withInserted(t10) {
      if (t10.length === 0) return this;
      let n10 = 0, r10 = 0, i10 = ``, a10 = [], o10 = 0;
      for (; ; ) {
        let e10 = n10 < this._tokensCount ? this._tokens[n10 << 1] : -1, s10 = r10 < t10.length ? t10[r10] : null;
        if (e10 !== -1 && (s10 === null || e10 <= s10.offset)) {
          i10 += this._text.substring(o10, e10);
          let t11 = this._tokens[(n10 << 1) + 1];
          a10.push(i10.length, t11), n10++, o10 = e10;
        } else if (s10) {
          if (s10.offset > o10) {
            i10 += this._text.substring(o10, s10.offset);
            let e11 = this._tokens[(n10 << 1) + 1];
            a10.push(i10.length, e11), o10 = s10.offset;
          }
          i10 += s10.text, a10.push(i10.length, s10.tokenMetadata), r10++;
        } else break;
      }
      return new _aa(new Uint32Array(a10), i10, this.languageIdCodec);
    }
    getTokenText(e10) {
      let t10 = this.getStartOffset(e10), n10 = this.getEndOffset(e10), r10 = this._text.substring(t10, n10);
      return r10;
    }
    forEach(e10) {
      let t10 = this.getCount();
      for (let n10 = 0; n10 < t10; n10++) e10(n10);
    }
  }, _aa.defaultTokenMetadata = 33587200, _aa);
  wA = class e10 {
    constructor(e11, t10, n10, r10) {
      this._source = e11, this._startOffset = t10, this._endOffset = n10, this._deltaOffset = r10, this._firstTokenIndex = e11.findTokenIndexAtOffset(t10), this.languageIdCodec = e11.languageIdCodec, this._tokensCount = 0;
      for (let t11 = this._firstTokenIndex, r11 = e11.getCount(); t11 < r11; t11++) {
        let r12 = e11.getStartOffset(t11);
        if (r12 >= n10) break;
        this._tokensCount++;
      }
    }
    getMetadata(e11) {
      return this._source.getMetadata(this._firstTokenIndex + e11);
    }
    getLanguageId(e11) {
      return this._source.getLanguageId(this._firstTokenIndex + e11);
    }
    getLineContent() {
      return this._source.getLineContent().substring(this._startOffset, this._endOffset);
    }
    equals(t10) {
      return t10 instanceof e10 ? this._startOffset === t10._startOffset && this._endOffset === t10._endOffset && this._deltaOffset === t10._deltaOffset && this._source.slicedEquals(t10._source, this._firstTokenIndex, this._tokensCount) : false;
    }
    getCount() {
      return this._tokensCount;
    }
    getStandardTokenType(e11) {
      return this._source.getStandardTokenType(this._firstTokenIndex + e11);
    }
    getForeground(e11) {
      return this._source.getForeground(this._firstTokenIndex + e11);
    }
    getEndOffset(e11) {
      let t10 = this._source.getEndOffset(this._firstTokenIndex + e11);
      return Math.min(this._endOffset, t10) - this._startOffset + this._deltaOffset;
    }
    getClassName(e11) {
      return this._source.getClassName(this._firstTokenIndex + e11);
    }
    getInlineStyle(e11, t10) {
      return this._source.getInlineStyle(this._firstTokenIndex + e11, t10);
    }
    getPresentation(e11) {
      return this._source.getPresentation(this._firstTokenIndex + e11);
    }
    findTokenIndexAtOffset(e11) {
      return this._source.findTokenIndexAtOffset(e11 + this._startOffset - this._deltaOffset) - this._firstTokenIndex;
    }
    getTokenText(e11) {
      let t10 = this._firstTokenIndex + e11, n10 = this._source.getStartOffset(t10), r10 = this._source.getEndOffset(t10), i10 = this._source.getTokenText(t10);
      return n10 < this._startOffset && (i10 = i10.substring(this._startOffset - n10)), r10 > this._endOffset && (i10 = i10.substring(0, i10.length - (r10 - this._endOffset))), i10;
    }
    forEach(e11) {
      for (let t10 = 0; t10 < this.getCount(); t10++) e11(t10);
    }
  };
  TA = function(e10, t10) {
    let n10 = t10.lineNumber;
    if (!e10.tokenization.isCheapToTokenize(n10)) return;
    e10.tokenization.forceTokenization(n10);
    let r10 = e10.tokenization.getLineTokens(n10), i10 = r10.findTokenIndexAtOffset(t10.column - 1), a10 = r10.getStandardTokenType(i10);
    return a10;
  };
  EA = new class {
    clone() {
      return this;
    }
    equals(e10) {
      return this === e10;
    }
  }();
  DA = function(e10, t10) {
    return new Ba([
      new za(0, ``, e10)
    ], t10);
  };
  OA = function(e10, t10) {
    let n10 = new Uint32Array(2);
    return n10[0] = 0, n10[1] = (e10 << 0 | 33587200) >>> 0, new Va(n10, t10 === null ? EA : t10);
  };
  const kA = {
    getInitialState: () => EA,
    tokenizeEncoded: (e10, t10, n10) => OA(0, n10)
  };
  async function AA(e10, t10, n10) {
    if (!n10) return MA(t10, e10.languageIdCodec, kA);
    let r10 = await ao.getOrCreate(n10);
    return MA(t10, e10.languageIdCodec, r10 || kA);
  }
  function jA(e10, t10, n10, r10, i10, a10, o10) {
    let s10 = `<div>`, c10 = r10, l10 = 0, u10 = true;
    for (let d10 = 0, f10 = t10.getCount(); d10 < f10; d10++) {
      let f11 = t10.getEndOffset(d10);
      if (f11 <= r10) continue;
      let p10 = ``;
      for (; c10 < f11 && c10 < i10; c10++) {
        let t11 = e10.charCodeAt(c10);
        switch (t11) {
          case 9: {
            let e11 = a10 - (c10 + l10) % a10;
            for (l10 += e11 - 1; e11 > 0; ) o10 && u10 ? (p10 += `&#160;`, u10 = false) : (p10 += ` `, u10 = true), e11--;
            break;
          }
          case 60:
            p10 += `&lt;`, u10 = false;
            break;
          case 62:
            p10 += `&gt;`, u10 = false;
            break;
          case 38:
            p10 += `&amp;`, u10 = false;
            break;
          case 0:
            p10 += `&#00;`, u10 = false;
            break;
          case 65279:
          case 8232:
          case 8233:
          case 133:
            p10 += `\uFFFD`, u10 = false;
            break;
          case 13:
            p10 += `&#8203`, u10 = false;
            break;
          case 32:
            o10 && u10 ? (p10 += `&#160;`, u10 = false) : (p10 += ` `, u10 = true);
            break;
          default:
            p10 += String.fromCharCode(t11), u10 = false;
        }
      }
      if (s10 += `<span style="${t10.getInlineStyle(d10, n10)}">${p10}</span>`, f11 > i10 || c10 >= i10) break;
    }
    return s10 += `</div>`, s10;
  }
  function MA(e10, t10, n10) {
    let r10 = `<div class="monaco-tokenized-source">`, i10 = ws(e10), a10 = n10.getInitialState();
    for (let e11 = 0, o10 = i10.length; e11 < o10; e11++) {
      let o11 = i10[e11];
      e11 > 0 && (r10 += `<br/>`);
      let s10 = n10.tokenizeEncoded(o11, true, a10);
      CA.convertToEndOffset(s10.tokens, o11.length);
      let c10 = new CA(s10.tokens, o11, t10), l10 = c10.inflate(), u10 = 0;
      for (let e12 = 0, t11 = l10.getCount(); e12 < t11; e12++) {
        let t12 = l10.getClassName(e12), n11 = l10.getEndOffset(e12);
        r10 += `<span class="${t12}">${hs(o11.substring(u10, n11))}</span>`, u10 = n11;
      }
      a10 = s10.endState;
    }
    return r10 += `</div>`, r10;
  }
  var NA = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, PA = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, FA;
  IA = (_ba = class {
    constructor(e10, t10, n10) {
      this._options = e10, this._languageService = t10, this._openerService = n10, this._onDidRenderAsync = new N(), this.onDidRenderAsync = this._onDidRenderAsync.event;
    }
    dispose() {
      this._onDidRenderAsync.dispose();
    }
    render(e10, t10, n10) {
      if (!e10) {
        let e11 = document.createElement(`span`);
        return {
          element: e11,
          dispose: () => {
          }
        };
      }
      let r10 = new A(), i10 = r10.add(Gk(e10, {
        ...this._getRenderOptions(e10, r10),
        ...t10
      }, n10));
      return i10.element.classList.add(`rendered-markdown`), {
        element: i10.element,
        dispose: () => r10.dispose()
      };
    }
    _getRenderOptions(e10, t10) {
      return {
        codeBlockRenderer: async (e11, t11) => {
          var _a3, _b3;
          let n10;
          e11 ? n10 = this._languageService.getLanguageIdByLanguageName(e11) : this._options.editor && (n10 = (_a3 = this._options.editor.getModel()) == null ? void 0 : _a3.getLanguageId()), n10 || (n10 = Jg);
          let r10 = await AA(this._languageService, t11, n10), i10 = document.createElement(`span`);
          if (i10.innerHTML = ((_b3 = FA._ttpTokenizer) == null ? void 0 : _b3.createHTML(r10)) ?? r10, this._options.editor) {
            let e12 = this._options.editor.getOption(50);
            Pf(i10, e12);
          } else this._options.codeBlockFontFamily && (i10.style.fontFamily = this._options.codeBlockFontFamily);
          return this._options.codeBlockFontSize !== void 0 && (i10.style.fontSize = this._options.codeBlockFontSize), i10;
        },
        asyncRenderCallback: () => this._onDidRenderAsync.fire(),
        actionHandler: {
          callback: (t11) => LA(this._openerService, t11, e10.isTrusted),
          disposables: t10
        }
      };
    }
  }, FA = _ba, _ba._ttpTokenizer = lh(`tokenizeToString`, {
    createHTML(e10) {
      return e10;
    }
  }), _ba);
  IA = FA = NA([
    PA(1, _g),
    PA(2, vD)
  ], IA);
  LA = async function(e10, t10, n10) {
    try {
      return await e10.open(t10, {
        fromUserGesture: true,
        allowContributedOpeners: true,
        allowCommands: RA(n10)
      });
    } catch (e11) {
      return gr(e11), false;
    }
  };
  function RA(e10) {
    return e10 === true ? true : e10 && Array.isArray(e10.enabledCommands) ? e10.enabledCommands : false;
  }
  let VA;
  zA = Xf(`accessibilityService`);
  BA = new U(`accessibilityModeEnabled`, false);
  VA = 2e4;
  let HA, UA, WA, GA, KA;
  function qA(e10) {
    HA = document.createElement(`div`), HA.className = `monaco-aria-container`;
    let t10 = () => {
      let e11 = document.createElement(`div`);
      return e11.className = `monaco-alert`, e11.setAttribute(`role`, `alert`), e11.setAttribute(`aria-atomic`, `true`), HA.appendChild(e11), e11;
    };
    UA = t10(), WA = t10();
    let n10 = () => {
      let e11 = document.createElement(`div`);
      return e11.className = `monaco-status`, e11.setAttribute(`aria-live`, `polite`), e11.setAttribute(`aria-atomic`, `true`), HA.appendChild(e11), e11;
    };
    GA = n10(), KA = n10(), e10.appendChild(HA);
  }
  JA = function(e10) {
    HA && (UA.textContent === e10 ? (Zu(UA), XA(WA, e10)) : (Zu(WA), XA(UA, e10)));
  };
  YA = function(e10) {
    HA && (GA.textContent === e10 ? (Zu(GA), XA(KA, e10)) : (Zu(KA), XA(GA, e10)));
  };
  function XA(e10, t10) {
    Zu(e10), t10.length > VA && (t10 = t10.substr(0, VA)), e10.textContent = t10, e10.style.visibility = `hidden`, e10.style.visibility = `visible`;
  }
  var ZA = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, QA = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const $A = H;
  let ej = class extends RE {
    get _targetWindow() {
      return R(this._target.targetElements[0]);
    }
    get _targetDocumentElement() {
      return R(this._target.targetElements[0]).document.documentElement;
    }
    get isDisposed() {
      return this._isDisposed;
    }
    get isMouseIn() {
      return this._lockMouseTracker.isMouseIn;
    }
    get domNode() {
      return this._hover.containerDomNode;
    }
    get onDispose() {
      return this._onDispose.event;
    }
    get onRequestLayout() {
      return this._onRequestLayout.event;
    }
    get anchor() {
      return this._hoverPosition === 2 ? 0 : 1;
    }
    get x() {
      return this._x;
    }
    get y() {
      return this._y;
    }
    get isLocked() {
      return this._isLocked;
    }
    set isLocked(e10) {
      this._isLocked !== e10 && (this._isLocked = e10, this._hoverContainer.classList.toggle(`locked`, this._isLocked));
    }
    constructor(e10, t10, n10, r10, i10, a10) {
      var _a3, _b3, _c3, _d3, _e3, _f3, _g3;
      super(), this._keybindingService = t10, this._configurationService = n10, this._openerService = r10, this._instantiationService = i10, this._accessibilityService = a10, this._messageListeners = new A(), this._isDisposed = false, this._forcePosition = false, this._x = 0, this._y = 0, this._isLocked = false, this._enableFocusTraps = false, this._addedFocusTrap = false, this._onDispose = this._register(new N()), this._onRequestLayout = this._register(new N()), this._linkHandler = e10.linkHandler || ((t11) => LA(this._openerService, t11, bk(e10.content) ? e10.content.isTrusted : void 0)), this._target = `targetElements` in e10.target ? e10.target : new nj(e10.target), this._hoverPointer = ((_a3 = e10.appearance) == null ? void 0 : _a3.showPointer) ? $A(`div.workbench-hover-pointer`) : void 0, this._hover = this._register(new pD()), this._hover.containerDomNode.classList.add(`workbench-hover`, `fadeIn`), ((_b3 = e10.appearance) == null ? void 0 : _b3.compact) && this._hover.containerDomNode.classList.add(`workbench-hover`, `compact`), ((_c3 = e10.appearance) == null ? void 0 : _c3.skipFadeInAnimation) && this._hover.containerDomNode.classList.add(`skip-fade-in`), e10.additionalClasses && this._hover.containerDomNode.classList.add(...e10.additionalClasses), ((_d3 = e10.position) == null ? void 0 : _d3.forcePosition) && (this._forcePosition = true), e10.trapFocus && (this._enableFocusTraps = true), this._hoverPosition = ((_e3 = e10.position) == null ? void 0 : _e3.hoverPosition) ?? 3, this.onmousedown(this._hover.containerDomNode, (e11) => e11.stopPropagation()), this.onkeydown(this._hover.containerDomNode, (e11) => {
        e11.equals(9) && this.dispose();
      }), this._register(z(this._targetWindow, `blur`, () => this.dispose()));
      let o10 = $A(`div.hover-row.markdown-hover`), s10 = $A(`div.hover-contents`);
      if (typeof e10.content == `string`) s10.textContent = e10.content, s10.style.whiteSpace = `pre-wrap`;
      else if (Gd(e10.content)) s10.appendChild(e10.content), s10.classList.add(`html-hover-contents`);
      else {
        let t11 = e10.content, n11 = this._instantiationService.createInstance(IA, {
          codeBlockFontFamily: this._configurationService.getValue(`editor`).fontFamily || dr.fontFamily
        }), { element: r11 } = n11.render(t11, {
          actionHandler: {
            callback: (e11) => this._linkHandler(e11),
            disposables: this._messageListeners
          },
          asyncRenderCallback: () => {
            s10.classList.add(`code-hover-contents`), this.layout(), this._onRequestLayout.fire();
          }
        });
        s10.appendChild(r11);
      }
      if (o10.appendChild(s10), this._hover.contentsDomNode.appendChild(o10), e10.actions && e10.actions.length > 0) {
        let t11 = $A(`div.hover-row.status-bar`), n11 = $A(`div.actions`);
        e10.actions.forEach((e11) => {
          let t12 = this._keybindingService.lookupKeybinding(e11.commandId), r11 = t12 ? t12.getLabel() : null;
          mD.render(n11, {
            label: e11.label,
            commandId: e11.commandId,
            run: (t13) => {
              e11.run(t13), this.dispose();
            },
            iconClass: e11.iconClass
          }, r11);
        }), t11.appendChild(n11), this._hover.containerDomNode.appendChild(t11);
      }
      this._hoverContainer = $A(`div.workbench-hover-container`), this._hoverPointer && this._hoverContainer.appendChild(this._hoverPointer), this._hoverContainer.appendChild(this._hover.containerDomNode);
      let c10;
      if (c10 = e10.actions && e10.actions.length > 0 ? false : ((_f3 = e10.persistence) == null ? void 0 : _f3.hideOnHover) === void 0 ? typeof e10.content == `string` || bk(e10.content) && !e10.content.value.includes(`](`) && !e10.content.value.includes(`</a>`) : e10.persistence.hideOnHover, (_g3 = e10.appearance) == null ? void 0 : _g3.showHoverHint) {
        let e11 = $A(`div.hover-row.status-bar`), t11 = $A(`div.info`);
        t11.textContent = T(`hoverhint`, `Hold {0} key to mouse over`, E ? `Option` : `Alt`), e11.appendChild(t11), this._hover.containerDomNode.appendChild(e11);
      }
      let l10 = [
        ...this._target.targetElements
      ];
      c10 || l10.push(this._hoverContainer);
      let u10 = this._register(new tj(l10));
      if (this._register(u10.onMouseOut(() => {
        this._isLocked || this.dispose();
      })), c10) {
        let e11 = [
          ...this._target.targetElements,
          this._hoverContainer
        ];
        this._lockMouseTracker = this._register(new tj(e11)), this._register(this._lockMouseTracker.onMouseOut(() => {
          this._isLocked || this.dispose();
        }));
      } else this._lockMouseTracker = u10;
    }
    addFocusTrap() {
      if (!this._enableFocusTraps || this._addedFocusTrap) return;
      this._addedFocusTrap = true;
      let e10 = this._hover.containerDomNode, t10 = this.findLastFocusableChild(this._hover.containerDomNode);
      if (t10) {
        let n10 = rf(this._hoverContainer, $A(`div`)), r10 = V(this._hoverContainer, $A(`div`));
        n10.tabIndex = 0, r10.tabIndex = 0, this._register(z(r10, `focus`, (t11) => {
          e10.focus(), t11.preventDefault();
        })), this._register(z(n10, `focus`, (e11) => {
          t10.focus(), e11.preventDefault();
        }));
      }
    }
    findLastFocusableChild(e10) {
      if (e10.hasChildNodes()) for (let t10 = 0; t10 < e10.childNodes.length; t10++) {
        let n10 = e10.childNodes.item(e10.childNodes.length - t10 - 1);
        if (n10.nodeType === n10.ELEMENT_NODE) {
          let e11 = n10;
          if (typeof e11.tabIndex == `number` && e11.tabIndex >= 0) return e11;
        }
        let r10 = this.findLastFocusableChild(n10);
        if (r10) return r10;
      }
    }
    render(e10) {
      var _a3;
      e10.appendChild(this._hoverContainer);
      let t10 = this._hoverContainer.contains(this._hoverContainer.ownerDocument.activeElement), n10 = t10 && hD(this._configurationService.getValue(`accessibility.verbosity.hover`) === true && this._accessibilityService.isScreenReaderOptimized(), (_a3 = this._keybindingService.lookupKeybinding(`editor.action.accessibleView`)) == null ? void 0 : _a3.getAriaLabel());
      n10 && YA(n10), this.layout(), this.addFocusTrap();
    }
    layout() {
      this._hover.containerDomNode.classList.remove(`right-aligned`), this._hover.contentsDomNode.style.maxHeight = ``;
      let e10 = (e11) => {
        let t11 = _d(e11), n11 = e11.getBoundingClientRect();
        return {
          top: n11.top * t11,
          bottom: n11.bottom * t11,
          right: n11.right * t11,
          left: n11.left * t11
        };
      }, t10 = this._target.targetElements.map((t11) => e10(t11)), { top: n10, right: r10, bottom: i10, left: a10 } = t10[0], o10 = r10 - a10, s10 = i10 - n10, c10 = {
        top: n10,
        right: r10,
        bottom: i10,
        left: a10,
        width: o10,
        height: s10,
        center: {
          x: a10 + o10 / 2,
          y: n10 + s10 / 2
        }
      };
      if (this.adjustHorizontalHoverPosition(c10), this.adjustVerticalHoverPosition(c10), this.adjustHoverMaxHeight(c10), this._hoverContainer.style.padding = ``, this._hoverContainer.style.margin = ``, this._hoverPointer) {
        switch (this._hoverPosition) {
          case 1:
            c10.left += 3, c10.right += 3, this._hoverContainer.style.paddingLeft = `3px`, this._hoverContainer.style.marginLeft = `-3px`;
            break;
          case 0:
            c10.left -= 3, c10.right -= 3, this._hoverContainer.style.paddingRight = `3px`, this._hoverContainer.style.marginRight = `-3px`;
            break;
          case 2:
            c10.top += 3, c10.bottom += 3, this._hoverContainer.style.paddingTop = `3px`, this._hoverContainer.style.marginTop = `-3px`;
            break;
          case 3:
            c10.top -= 3, c10.bottom -= 3, this._hoverContainer.style.paddingBottom = `3px`, this._hoverContainer.style.marginBottom = `-3px`;
            break;
        }
        c10.center.x = c10.left + o10 / 2, c10.center.y = c10.top + s10 / 2;
      }
      this.computeXCordinate(c10), this.computeYCordinate(c10), this._hoverPointer && (this._hoverPointer.classList.remove(`top`), this._hoverPointer.classList.remove(`left`), this._hoverPointer.classList.remove(`right`), this._hoverPointer.classList.remove(`bottom`), this.setHoverPointerPosition(c10)), this._hover.onContentsChanged();
    }
    computeXCordinate(e10) {
      let t10 = this._hover.containerDomNode.clientWidth + 2;
      this._target.x === void 0 ? this._hoverPosition === 1 ? this._x = e10.right : this._hoverPosition === 0 ? this._x = e10.left - t10 : (this._hoverPointer ? this._x = e10.center.x - this._hover.containerDomNode.clientWidth / 2 : this._x = e10.left, this._x + t10 >= this._targetDocumentElement.clientWidth && (this._hover.containerDomNode.classList.add(`right-aligned`), this._x = Math.max(this._targetDocumentElement.clientWidth - t10 - 2, this._targetDocumentElement.clientLeft))) : this._x = this._target.x, this._x < this._targetDocumentElement.clientLeft && (this._x = e10.left + 2);
    }
    computeYCordinate(e10) {
      this._target.y === void 0 ? this._hoverPosition === 3 ? this._y = e10.top : this._hoverPosition === 2 ? this._y = e10.bottom - 2 : this._hoverPointer ? this._y = e10.center.y + this._hover.containerDomNode.clientHeight / 2 : this._y = e10.bottom : this._y = this._target.y, this._y > this._targetWindow.innerHeight && (this._y = e10.bottom);
    }
    adjustHorizontalHoverPosition(e10) {
      if (this._target.x !== void 0) return;
      let t10 = this._hoverPointer ? 3 : 0;
      if (this._forcePosition) {
        let n10 = t10 + 2;
        this._hoverPosition === 1 ? this._hover.containerDomNode.style.maxWidth = `${this._targetDocumentElement.clientWidth - e10.right - n10}px` : this._hoverPosition === 0 && (this._hover.containerDomNode.style.maxWidth = `${e10.left - n10}px`);
        return;
      }
      if (this._hoverPosition === 1) {
        let n10 = this._targetDocumentElement.clientWidth - e10.right;
        if (n10 < this._hover.containerDomNode.clientWidth + t10) {
          let n11 = e10.left;
          n11 >= this._hover.containerDomNode.clientWidth + t10 ? this._hoverPosition = 0 : this._hoverPosition = 2;
        }
      } else if (this._hoverPosition === 0) {
        let n10 = e10.left;
        if (n10 < this._hover.containerDomNode.clientWidth + t10) {
          let n11 = this._targetDocumentElement.clientWidth - e10.right;
          n11 >= this._hover.containerDomNode.clientWidth + t10 ? this._hoverPosition = 1 : this._hoverPosition = 2;
        }
        e10.left - this._hover.containerDomNode.clientWidth - t10 <= this._targetDocumentElement.clientLeft && (this._hoverPosition = 1);
      }
    }
    adjustVerticalHoverPosition(e10) {
      if (this._target.y !== void 0 || this._forcePosition) return;
      let t10 = this._hoverPointer ? 3 : 0;
      this._hoverPosition === 3 ? e10.top - this._hover.containerDomNode.clientHeight - t10 < 0 && (this._hoverPosition = 2) : this._hoverPosition === 2 && e10.bottom + this._hover.containerDomNode.clientHeight + t10 > this._targetWindow.innerHeight && (this._hoverPosition = 3);
    }
    adjustHoverMaxHeight(e10) {
      let t10 = this._targetWindow.innerHeight / 2;
      if (this._forcePosition) {
        let n10 = (this._hoverPointer ? 3 : 0) + 2;
        this._hoverPosition === 3 ? t10 = Math.min(t10, e10.top - n10) : this._hoverPosition === 2 && (t10 = Math.min(t10, this._targetWindow.innerHeight - e10.bottom - n10));
      }
      if (this._hover.containerDomNode.style.maxHeight = `${t10}px`, this._hover.contentsDomNode.clientHeight < this._hover.contentsDomNode.scrollHeight) {
        let e11 = `${this._hover.scrollbar.options.verticalScrollbarSize}px`;
        this._hover.contentsDomNode.style.paddingRight !== e11 && (this._hover.contentsDomNode.style.paddingRight = e11);
      }
    }
    setHoverPointerPosition(e10) {
      if (this._hoverPointer) switch (this._hoverPosition) {
        case 0:
        case 1: {
          this._hoverPointer.classList.add(this._hoverPosition === 0 ? `right` : `left`);
          let t10 = this._hover.containerDomNode.clientHeight;
          t10 > e10.height ? this._hoverPointer.style.top = `${e10.center.y - (this._y - t10) - 3}px` : this._hoverPointer.style.top = `${Math.round(t10 / 2) - 3}px`;
          break;
        }
        case 3:
        case 2: {
          this._hoverPointer.classList.add(this._hoverPosition === 3 ? `bottom` : `top`);
          let t10 = this._hover.containerDomNode.clientWidth, n10 = Math.round(t10 / 2) - 3, r10 = this._x + n10;
          (r10 < e10.left || r10 > e10.right) && (n10 = e10.center.x - this._x - 3), this._hoverPointer.style.left = `${n10}px`;
          break;
        }
      }
    }
    focus() {
      this._hover.containerDomNode.focus();
    }
    dispose() {
      this._isDisposed || (this._onDispose.fire(), this._hoverContainer.remove(), this._messageListeners.dispose(), this._target.dispose(), super.dispose()), this._isDisposed = true;
    }
  };
  ej = ZA([
    QA(1, ME),
    QA(2, ug),
    QA(3, vD),
    QA(4, Jf),
    QA(5, zA)
  ], ej);
  var tj = class extends RE {
    get onMouseOut() {
      return this._onMouseOut.event;
    }
    get isMouseIn() {
      return this._isMouseIn;
    }
    constructor(e10) {
      super(), this._elements = e10, this._isMouseIn = true, this._onMouseOut = this._register(new N()), this._elements.forEach((e11) => this.onmouseover(e11, () => this._onTargetMouseOver(e11))), this._elements.forEach((e11) => this.onmouseleave(e11, () => this._onTargetMouseLeave(e11)));
    }
    _onTargetMouseOver(e10) {
      this._isMouseIn = true, this._clearEvaluateMouseStateTimeout(e10);
    }
    _onTargetMouseLeave(e10) {
      this._isMouseIn = false, this._evaluateMouseState(e10);
    }
    _evaluateMouseState(e10) {
      this._clearEvaluateMouseStateTimeout(e10), this._mouseTimeout = R(e10).setTimeout(() => this._fireIfMouseOutside(), 0);
    }
    _clearEvaluateMouseStateTimeout(e10) {
      this._mouseTimeout && (R(e10).clearTimeout(this._mouseTimeout), this._mouseTimeout = void 0);
    }
    _fireIfMouseOutside() {
      this._isMouseIn || this._onMouseOut.fire();
    }
  }, nj = class {
    constructor(e10) {
      this._element = e10, this.targetElements = [
        this._element
      ];
    }
    dispose() {
    }
  }, rj;
  (function(e10) {
    function t10(e11, t11) {
      if (e11.start >= t11.end || t11.start >= e11.end) return {
        start: 0,
        end: 0
      };
      let n11 = Math.max(e11.start, t11.start), r11 = Math.min(e11.end, t11.end);
      return r11 - n11 <= 0 ? {
        start: 0,
        end: 0
      } : {
        start: n11,
        end: r11
      };
    }
    e10.intersect = t10;
    function n10(e11) {
      return e11.end - e11.start <= 0;
    }
    e10.isEmpty = n10;
    function r10(e11, r11) {
      return !n10(t10(e11, r11));
    }
    e10.intersects = r10;
    function i10(e11, t11) {
      let r11 = [], i11 = {
        start: e11.start,
        end: Math.min(t11.start, e11.end)
      }, a10 = {
        start: Math.max(t11.end, e11.start),
        end: e11.end
      };
      return n10(i11) || r11.push(i11), n10(a10) || r11.push(a10), r11;
    }
    e10.relativeComplement = i10;
  })(rj || (rj = {}));
  function ij(e10) {
    let t10 = e10;
    return !!t10 && typeof t10.x == `number` && typeof t10.y == `number`;
  }
  var aj;
  (function(e10) {
    e10[e10.AVOID = 0] = `AVOID`, e10[e10.ALIGN = 1] = `ALIGN`;
  })(aj || (aj = {}));
  function oj(e10, t10, n10) {
    let r10 = n10.mode === aj.ALIGN ? n10.offset : n10.offset + n10.size, i10 = n10.mode === aj.ALIGN ? n10.offset + n10.size : n10.offset;
    return n10.position === 0 ? t10 <= e10 - r10 ? r10 : t10 <= i10 ? i10 - t10 : Math.max(e10 - t10, 0) : t10 <= i10 ? i10 - t10 : t10 <= e10 - r10 ? r10 : 0;
  }
  var sj = (_ca = class extends j {
    constructor(e10, t10) {
      super(), this.container = null, this.useFixedPosition = false, this.useShadowDOM = false, this.delegate = null, this.toDisposeOnClean = j.None, this.toDisposeOnSetContainer = j.None, this.shadowRoot = null, this.shadowRootHostElement = null, this.view = H(`.context-view`), ff(this.view), this.setContainer(e10, t10), this._register(k(() => this.setContainer(null, 1)));
    }
    setContainer(t10, n10) {
      var _a3;
      this.useFixedPosition = n10 !== 1;
      let r10 = this.useShadowDOM;
      if (this.useShadowDOM = n10 === 3, !(t10 === this.container && r10 === this.useShadowDOM) && (this.container && (this.toDisposeOnSetContainer.dispose(), this.view.remove(), this.shadowRoot && (this.shadowRoot = null, (_a3 = this.shadowRootHostElement) == null ? void 0 : _a3.remove(), this.shadowRootHostElement = null), this.container = null), t10)) {
        if (this.container = t10, this.useShadowDOM) {
          this.shadowRootHostElement = H(`.shadow-root-host`), this.container.appendChild(this.shadowRootHostElement), this.shadowRoot = this.shadowRootHostElement.attachShadow({
            mode: `open`
          });
          let e10 = document.createElement(`style`);
          e10.textContent = cj, this.shadowRoot.appendChild(e10), this.shadowRoot.appendChild(this.view), this.shadowRoot.appendChild(H(`slot`));
        } else this.container.appendChild(this.view);
        let n11 = new A();
        _ca.BUBBLE_UP_EVENTS.forEach((e10) => {
          n11.add(td(this.container, e10, (e11) => {
            this.onDOMEvent(e11, false);
          }));
        }), _ca.BUBBLE_DOWN_EVENTS.forEach((e10) => {
          n11.add(td(this.container, e10, (e11) => {
            this.onDOMEvent(e11, true);
          }, true));
        }), this.toDisposeOnSetContainer = n11;
      }
    }
    show(e10) {
      var _a3, _b3;
      this.isVisible() && this.hide(), Zu(this.view), this.view.className = `context-view monaco-component`, this.view.style.top = `0px`, this.view.style.left = `0px`, this.view.style.zIndex = `${2575 + (e10.layer ?? 0)}`, this.view.style.position = this.useFixedPosition ? `fixed` : `absolute`, df(this.view), this.toDisposeOnClean = e10.render(this.view) || j.None, this.delegate = e10, this.doLayout(), (_b3 = (_a3 = this.delegate).focus) == null ? void 0 : _b3.call(_a3);
    }
    getViewElement() {
      return this.view;
    }
    layout() {
      var _a3, _b3;
      if (this.isVisible()) {
        if (this.delegate.canRelayout === false && !(bt && Ac.pointerEvents)) {
          this.hide();
          return;
        }
        (_b3 = (_a3 = this.delegate) == null ? void 0 : _a3.layout) == null ? void 0 : _b3.call(_a3), this.doLayout();
      }
    }
    doLayout() {
      if (!this.isVisible()) return;
      let e10 = this.delegate.getAnchor(), t10;
      if (Gd(e10)) {
        let n11 = gd(e10), r11 = _d(e10);
        t10 = {
          top: n11.top * r11,
          left: n11.left * r11,
          width: n11.width * r11,
          height: n11.height * r11
        };
      } else t10 = ij(e10) ? {
        top: e10.y,
        left: e10.x,
        width: e10.width || 1,
        height: e10.height || 2
      } : {
        top: e10.posy,
        left: e10.posx,
        width: 2,
        height: 2
      };
      let n10 = vd(this.view), r10 = xd(this.view), i10 = this.delegate.anchorPosition || 0, a10 = this.delegate.anchorAlignment || 0, o10 = this.delegate.anchorAxisAlignment || 0, s10, c10, l10 = Md();
      if (o10 === 0) {
        let e11 = {
          offset: t10.top - l10.pageYOffset,
          size: t10.height,
          position: i10 === 0 ? 0 : 1
        }, o11 = {
          offset: t10.left,
          size: t10.width,
          position: a10 === 0 ? 0 : 1,
          mode: aj.ALIGN
        };
        s10 = oj(l10.innerHeight, r10, e11) + l10.pageYOffset, rj.intersects({
          start: s10,
          end: s10 + r10
        }, {
          start: e11.offset,
          end: e11.offset + e11.size
        }) && (o11.mode = aj.AVOID), c10 = oj(l10.innerWidth, n10, o11);
      } else {
        let e11 = {
          offset: t10.left,
          size: t10.width,
          position: a10 === 0 ? 0 : 1
        }, o11 = {
          offset: t10.top,
          size: t10.height,
          position: i10 === 0 ? 0 : 1,
          mode: aj.ALIGN
        };
        c10 = oj(l10.innerWidth, n10, e11), rj.intersects({
          start: c10,
          end: c10 + n10
        }, {
          start: e11.offset,
          end: e11.offset + e11.size
        }) && (o11.mode = aj.AVOID), s10 = oj(l10.innerHeight, r10, o11) + l10.pageYOffset;
      }
      this.view.classList.remove(`top`, `bottom`, `left`, `right`), this.view.classList.add(i10 === 0 ? `bottom` : `top`), this.view.classList.add(a10 === 0 ? `left` : `right`), this.view.classList.toggle(`fixed`, this.useFixedPosition);
      let u10 = gd(this.container);
      this.view.style.top = `${s10 - (this.useFixedPosition ? gd(this.view).top : u10.top)}px`, this.view.style.left = `${c10 - (this.useFixedPosition ? gd(this.view).left : u10.left)}px`, this.view.style.width = `initial`;
    }
    hide(e10) {
      let t10 = this.delegate;
      this.delegate = null, (t10 == null ? void 0 : t10.onHide) && t10.onHide(e10), this.toDisposeOnClean.dispose(), ff(this.view);
    }
    isVisible() {
      return !!this.delegate;
    }
    onDOMEvent(e10, t10) {
      this.delegate && (this.delegate.onDOMEvent ? this.delegate.onDOMEvent(e10, R(e10).document.activeElement) : t10 && !Sd(e10.target, this.container) && this.hide());
    }
    dispose() {
      this.hide(), super.dispose();
    }
  }, _ca.BUBBLE_UP_EVENTS = [
    `click`,
    `keydown`,
    `focus`,
    `blur`
  ], _ca.BUBBLE_DOWN_EVENTS = [
    `click`
  ], _ca);
  const cj = `
	:host {
		all: initial; /* 1st rule so subsequent properties are reset. */
	}

	.codicon[class*='codicon-'] {
		font: normal normal normal 16px/1 codicon;
		display: inline-block;
		text-decoration: none;
		text-rendering: auto;
		text-align: center;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		user-select: none;
		-webkit-user-select: none;
		-ms-user-select: none;
	}

	:host {
		font-family: -apple-system, BlinkMacSystemFont, "Segoe WPC", "Segoe UI", "HelveticaNeue-Light", system-ui, "Ubuntu", "Droid Sans", sans-serif;
	}

	:host-context(.mac) { font-family: -apple-system, BlinkMacSystemFont, sans-serif; }
	:host-context(.mac:lang(zh-Hans)) { font-family: -apple-system, BlinkMacSystemFont, "PingFang SC", "Hiragino Sans GB", sans-serif; }
	:host-context(.mac:lang(zh-Hant)) { font-family: -apple-system, BlinkMacSystemFont, "PingFang TC", sans-serif; }
	:host-context(.mac:lang(ja)) { font-family: -apple-system, BlinkMacSystemFont, "Hiragino Kaku Gothic Pro", sans-serif; }
	:host-context(.mac:lang(ko)) { font-family: -apple-system, BlinkMacSystemFont, "Nanum Gothic", "Apple SD Gothic Neo", "AppleGothic", sans-serif; }

	:host-context(.windows) { font-family: "Segoe WPC", "Segoe UI", sans-serif; }
	:host-context(.windows:lang(zh-Hans)) { font-family: "Segoe WPC", "Segoe UI", "Microsoft YaHei", sans-serif; }
	:host-context(.windows:lang(zh-Hant)) { font-family: "Segoe WPC", "Segoe UI", "Microsoft Jhenghei", sans-serif; }
	:host-context(.windows:lang(ja)) { font-family: "Segoe WPC", "Segoe UI", "Yu Gothic UI", "Meiryo UI", sans-serif; }
	:host-context(.windows:lang(ko)) { font-family: "Segoe WPC", "Segoe UI", "Malgun Gothic", "Dotom", sans-serif; }

	:host-context(.linux) { font-family: system-ui, "Ubuntu", "Droid Sans", sans-serif; }
	:host-context(.linux:lang(zh-Hans)) { font-family: system-ui, "Ubuntu", "Droid Sans", "Source Han Sans SC", "Source Han Sans CN", "Source Han Sans", sans-serif; }
	:host-context(.linux:lang(zh-Hant)) { font-family: system-ui, "Ubuntu", "Droid Sans", "Source Han Sans TC", "Source Han Sans TW", "Source Han Sans", sans-serif; }
	:host-context(.linux:lang(ja)) { font-family: system-ui, "Ubuntu", "Droid Sans", "Source Han Sans J", "Source Han Sans JP", "Source Han Sans", sans-serif; }
	:host-context(.linux:lang(ko)) { font-family: system-ui, "Ubuntu", "Droid Sans", "Source Han Sans K", "Source Han Sans JR", "Source Han Sans", "UnDotum", "FBaekmuk Gulim", sans-serif; }
`;
  var lj = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, uj = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let dj = class extends j {
    constructor(e10) {
      super(), this.layoutService = e10, this.contextView = this._register(new sj(this.layoutService.mainContainer, 1)), this.layout(), this._register(e10.onDidLayoutContainer(() => this.layout()));
    }
    showContextView(e10, t10, n10) {
      let r10;
      r10 = t10 ? t10 === this.layoutService.getContainer(R(t10)) ? 1 : n10 ? 3 : 2 : 1, this.contextView.setContainer(t10 ?? this.layoutService.activeContainer, r10), this.contextView.show(e10);
      let i10 = {
        close: () => {
          this.openContextView === i10 && this.hideContextView();
        }
      };
      return this.openContextView = i10, i10;
    }
    layout() {
      this.contextView.layout();
    }
    hideContextView(e10) {
      this.contextView.hide(e10), this.openContextView = void 0;
    }
  };
  dj = lj([
    uj(0, tx)
  ], dj);
  var fj = class extends dj {
    getContextViewElement() {
      return this.contextView.getViewElement();
    }
  }, pj = class {
    constructor(e10, t10, n10) {
      this.hoverDelegate = e10, this.target = t10, this.fadeInAnimation = n10;
    }
    async update(e10, t10, n10) {
      if (this._cancellationTokenSource && (this._cancellationTokenSource.dispose(true), this._cancellationTokenSource = void 0), this.isDisposed) return;
      let r10;
      if (e10 === void 0 || _e(e10) || Gd(e10)) r10 = e10;
      else if (!Oe(e10.markdown)) r10 = e10.markdown ?? e10.markdownNotSupportedFallback;
      else {
        this._hoverWidget || this.show(T(`iconLabel.loading`, `Loading...`), t10, n10), this._cancellationTokenSource = new gi();
        let i10 = this._cancellationTokenSource.token;
        if (r10 = await e10.markdown(i10), r10 === void 0 && (r10 = e10.markdownNotSupportedFallback), this.isDisposed || i10.isCancellationRequested) return;
      }
      this.show(r10, t10, n10);
    }
    show(e10, t10, n10) {
      var _a3;
      let r10 = this._hoverWidget;
      if (this.hasContent(e10)) {
        let i10 = {
          content: e10,
          target: this.target,
          actions: n10 == null ? void 0 : n10.actions,
          linkHandler: n10 == null ? void 0 : n10.linkHandler,
          trapFocus: n10 == null ? void 0 : n10.trapFocus,
          appearance: {
            showPointer: this.hoverDelegate.placement === `element`,
            skipFadeInAnimation: !this.fadeInAnimation || !!r10,
            showHoverHint: (_a3 = n10 == null ? void 0 : n10.appearance) == null ? void 0 : _a3.showHoverHint
          },
          position: {
            hoverPosition: 2
          }
        };
        this._hoverWidget = this.hoverDelegate.showHover(i10, t10);
      }
      r10 == null ? void 0 : r10.dispose();
    }
    hasContent(e10) {
      return e10 ? bk(e10) ? !!e10.value : true : false;
    }
    get isDisposed() {
      var _a3;
      return (_a3 = this._hoverWidget) == null ? void 0 : _a3.isDisposed;
    }
    dispose() {
      var _a3, _b3;
      (_a3 = this._hoverWidget) == null ? void 0 : _a3.dispose(), (_b3 = this._cancellationTokenSource) == null ? void 0 : _b3.dispose(true), this._cancellationTokenSource = void 0;
    }
  }, mj = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, hj = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let gj = class extends j {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._instantiationService = e10, this._keybindingService = n10, this._layoutService = r10, this._accessibilityService = i10, this._managedHovers = /* @__PURE__ */ new Map(), t10.onDidShowContextMenu(() => this.hideHover()), this._contextViewHandler = this._register(new dj(this._layoutService));
    }
    showHover(e10, t10, n10) {
      var _a3, _b3, _c3, _d3;
      if (_j(this._currentHoverOptions) === _j(e10) || this._currentHover && ((_b3 = (_a3 = this._currentHoverOptions) == null ? void 0 : _a3.persistence) == null ? void 0 : _b3.sticky)) return;
      this._currentHoverOptions = e10, this._lastHoverOptions = e10;
      let r10 = e10.trapFocus || this._accessibilityService.isScreenReaderOptimized(), i10 = Od();
      n10 || (r10 && i10 ? i10.classList.contains(`monaco-hover`) || (this._lastFocusedElementBeforeOpen = i10) : this._lastFocusedElementBeforeOpen = void 0);
      let a10 = new A(), o10 = this._instantiationService.createInstance(ej, e10);
      if (((_c3 = e10.persistence) == null ? void 0 : _c3.sticky) && (o10.isLocked = true), o10.onDispose(() => {
        var _a4, _b4;
        let t11 = ((_a4 = this._currentHover) == null ? void 0 : _a4.domNode) && Ad(this._currentHover.domNode);
        t11 && ((_b4 = this._lastFocusedElementBeforeOpen) == null ? void 0 : _b4.focus()), this._currentHoverOptions === e10 && (this._currentHoverOptions = void 0), a10.dispose();
      }, void 0, a10), !e10.container) {
        let t11 = Gd(e10.target) ? e10.target : e10.target.targetElements[0];
        e10.container = this._layoutService.getContainer(R(t11));
      }
      if (this._contextViewHandler.showContextView(new vj(o10, t10), e10.container), o10.onRequestLayout(() => this._contextViewHandler.layout(), void 0, a10), (_d3 = e10.persistence) == null ? void 0 : _d3.sticky) a10.add(z(R(e10.container).document, B.MOUSE_DOWN, (e11) => {
        Sd(e11.target, o10.domNode) || this.doHideHover();
      }));
      else {
        if (`targetElements` in e10.target) for (let t12 of e10.target.targetElements) a10.add(z(t12, B.CLICK, () => this.hideHover()));
        else a10.add(z(e10.target, B.CLICK, () => this.hideHover()));
        let t11 = Od();
        if (t11) {
          let n11 = R(t11).document;
          a10.add(z(t11, B.KEY_DOWN, (t12) => {
            var _a4;
            return this._keyDown(t12, o10, !!((_a4 = e10.persistence) == null ? void 0 : _a4.hideOnKeyDown));
          })), a10.add(z(n11, B.KEY_DOWN, (t12) => {
            var _a4;
            return this._keyDown(t12, o10, !!((_a4 = e10.persistence) == null ? void 0 : _a4.hideOnKeyDown));
          })), a10.add(z(t11, B.KEY_UP, (e11) => this._keyUp(e11, o10))), a10.add(z(n11, B.KEY_UP, (e11) => this._keyUp(e11, o10)));
        }
      }
      if (`IntersectionObserver` in os) {
        let t11 = new IntersectionObserver((e11) => this._intersectionChange(e11, o10), {
          threshold: 0
        }), n11 = `targetElements` in e10.target ? e10.target.targetElements[0] : e10.target;
        t11.observe(n11), a10.add(k(() => t11.disconnect()));
      }
      return this._currentHover = o10, o10;
    }
    hideHover() {
      var _a3;
      ((_a3 = this._currentHover) == null ? void 0 : _a3.isLocked) || !this._currentHoverOptions || this.doHideHover();
    }
    doHideHover() {
      this._currentHover = void 0, this._currentHoverOptions = void 0, this._contextViewHandler.hideContextView();
    }
    _intersectionChange(e10, t10) {
      let n10 = e10[e10.length - 1];
      n10.isIntersecting || t10.dispose();
    }
    showAndFocusLastHover() {
      this._lastHoverOptions && this.showHover(this._lastHoverOptions, true, true);
    }
    _keyDown(e10, t10, n10) {
      var _a3, _b3;
      if (e10.key === `Alt`) {
        t10.isLocked = true;
        return;
      }
      let r10 = new Hc(e10), i10 = this._keybindingService.resolveKeyboardEvent(r10);
      i10.getSingleModifierDispatchChords().some((e11) => !!e11) || this._keybindingService.softDispatch(r10, r10.target).kind !== 0 || n10 && (!((_a3 = this._currentHoverOptions) == null ? void 0 : _a3.trapFocus) || e10.key !== `Tab`) && (this.hideHover(), (_b3 = this._lastFocusedElementBeforeOpen) == null ? void 0 : _b3.focus());
    }
    _keyUp(e10, t10) {
      var _a3;
      e10.key === `Alt` && (t10.isLocked = false, t10.isMouseIn || (this.hideHover(), (_a3 = this._lastFocusedElementBeforeOpen) == null ? void 0 : _a3.focus()));
    }
    setupManagedHover(e10, t10, n10, r10) {
      t10.setAttribute(`custom-hover`, `true`), t10.title !== `` && (console.warn(`HTML element already has a title attribute, which will conflict with the custom hover. Please remove the title attribute.`), console.trace(`Stack trace:`, t10.title), t10.title = ``);
      let i10, a10, o10 = (t11, n11) => {
        var _a3;
        let r11 = a10 !== void 0;
        t11 && (a10 == null ? void 0 : a10.dispose(), a10 = void 0), n11 && (i10 == null ? void 0 : i10.dispose(), i10 = void 0), r11 && ((_a3 = e10.onDidHideHover) == null ? void 0 : _a3.call(e10), a10 = void 0);
      }, s10 = (i11, o11, s11, c11) => new ol(async () => {
        (!a10 || a10.isDisposed) && (a10 = new pj(e10, s11 || t10, i11 > 0), await a10.update(typeof n10 == `function` ? n10() : n10, o11, {
          ...r10,
          trapFocus: c11
        }));
      }, i11), c10 = false, l10 = z(t10, B.MOUSE_DOWN, () => {
        c10 = true, o10(true, true);
      }, true), u10 = z(t10, B.MOUSE_UP, () => {
        c10 = false;
      }, true), d10 = z(t10, B.MOUSE_LEAVE, (e11) => {
        c10 = false, o10(false, e11.fromElement === t10);
      }, true), f10 = (n11) => {
        if (i10) return;
        let r11 = new A(), a11 = {
          targetElements: [
            t10
          ],
          dispose: () => {
          }
        };
        if (e10.placement === void 0 || e10.placement === `mouse`) {
          let e11 = (e12) => {
            a11.x = e12.x + 10, Gd(e12.target) && yj(e12.target, t10) !== t10 && o10(true, true);
          };
          r11.add(z(t10, B.MOUSE_MOVE, e11, true));
        }
        i10 = r11, !(Gd(n11.target) && yj(n11.target, t10) !== t10) && r11.add(s10(e10.delay, false, a11));
      }, p10 = z(t10, B.MOUSE_OVER, f10, true), m10 = () => {
        if (c10 || i10) return;
        let n11 = {
          targetElements: [
            t10
          ],
          dispose: () => {
          }
        }, r11 = new A(), a11 = () => o10(true, true);
        r11.add(z(t10, B.BLUR, a11, true)), r11.add(s10(e10.delay, false, n11)), i10 = r11;
      }, h10, g10 = t10.tagName.toLowerCase();
      g10 !== `input` && g10 !== `textarea` && (h10 = z(t10, B.FOCUS, m10, true));
      let _10 = {
        show: (e11) => {
          o10(false, true), s10(0, e11, void 0, e11);
        },
        hide: () => {
          o10(true, true);
        },
        update: async (e11, t11) => {
          n10 = e11, await (a10 == null ? void 0 : a10.update(n10, void 0, t11));
        },
        dispose: () => {
          this._managedHovers.delete(t10), p10.dispose(), d10.dispose(), l10.dispose(), u10.dispose(), h10 == null ? void 0 : h10.dispose(), o10(true, true);
        }
      };
      return this._managedHovers.set(t10, _10), _10;
    }
    showManagedHover(e10) {
      let t10 = this._managedHovers.get(e10);
      t10 && t10.show(true);
    }
    dispose() {
      this._managedHovers.forEach((e10) => e10.dispose()), super.dispose();
    }
  };
  gj = mj([
    hj(0, Jf),
    hj(1, jE),
    hj(2, ME),
    hj(3, tx),
    hj(4, zA)
  ], gj);
  function _j(e10) {
    if (e10 !== void 0) return (e10 == null ? void 0 : e10.id) ?? e10;
  }
  var vj = class {
    get anchorPosition() {
      return this._hover.anchor;
    }
    constructor(e10, t10 = false) {
      this._hover = e10, this._focus = t10, this.layer = 1;
    }
    render(e10) {
      return this._hover.render(e10), this._focus && this._hover.focus(), this._hover;
    }
    getAnchor() {
      return {
        x: this._hover.x,
        y: this._hover.y
      };
    }
    layout() {
      this._hover.layout();
    }
  };
  function yj(e10, t10) {
    for (t10 ?? (t10 = R(e10).document.body); !e10.hasAttribute(`custom-hover`) && e10 !== t10; ) e10 = e10.parentElement;
    return e10;
  }
  bg(OE, gj, 1), qb((e10, t10) => {
    let n10 = e10.getColor(QC);
    n10 && (t10.addRule(`.monaco-workbench .workbench-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid ${n10.transparent(0.5)}; }`), t10.addRule(`.monaco-workbench .workbench-hover hr { border-top: 1px solid ${n10.transparent(0.5)}; }`));
  });
  bj = Xf(`IWorkspaceEditService`);
  let xj, Cj;
  xj = class {
    constructor(e10) {
      this.metadata = e10;
    }
    static convert(e10) {
      return e10.edits.map((e11) => {
        if (Sj.is(e11)) return Sj.lift(e11);
        if (Cj.is(e11)) return Cj.lift(e11);
        throw Error(`Unsupported edit`);
      });
    }
  };
  Sj = class e10 extends xj {
    static is(t10) {
      return t10 instanceof e10 ? true : ve(t10) && xa.isUri(t10.resource) && ve(t10.textEdit);
    }
    static lift(t10) {
      return t10 instanceof e10 ? t10 : new e10(t10.resource, t10.textEdit, t10.versionId, t10.metadata);
    }
    constructor(e11, t10, n10 = void 0, r10) {
      super(r10), this.resource = e11, this.textEdit = t10, this.versionId = n10;
    }
  };
  Cj = class e10 extends xj {
    static is(t10) {
      return t10 instanceof e10 ? true : ve(t10) && (!!t10.newResource || !!t10.oldResource);
    }
    static lift(t10) {
      return t10 instanceof e10 ? t10 : new e10(t10.oldResource, t10.newResource, t10.options, t10.metadata);
    }
    constructor(e11, t10, n10 = {}, r10) {
      super(r10), this.oldResource = e11, this.newResource = t10, this.options = n10;
    }
  };
  let wj, Ej;
  wj = {
    enableSplitViewResizing: true,
    splitViewDefaultRatio: 0.5,
    renderSideBySide: true,
    renderMarginRevertIcon: true,
    renderGutterMenu: true,
    maxComputationTime: 5e3,
    maxFileSize: 50,
    ignoreTrimWhitespace: true,
    renderIndicators: true,
    originalEditable: false,
    diffCodeLens: false,
    renderOverviewRuler: true,
    diffWordWrap: `inherit`,
    diffAlgorithm: `advanced`,
    accessibilityVerbose: false,
    experimental: {
      showMoves: false,
      showEmptyDecorations: true,
      useTrueInlineView: false
    },
    hideUnchangedRegions: {
      enabled: false,
      contextLineCount: 3,
      minimumLineCount: 3,
      revealLineCount: 20
    },
    isInEmbeddedEditor: false,
    onlyShowAccessibleDiffViewer: false,
    renderSideBySideInlineBreakpoint: 900,
    useInlineViewWhenSpaceIsLimited: true,
    compactMode: false
  };
  Tj = Object.freeze({
    id: `editor`,
    order: 5,
    type: `object`,
    title: T(`editorConfigurationTitle`, `Editor`),
    scope: 5
  });
  Ej = {
    ...Tj,
    properties: {
      "editor.tabSize": {
        type: `number`,
        default: Ft.tabSize,
        minimum: 1,
        markdownDescription: T(`tabSize`, `The number of spaces a tab is equal to. This setting is overridden based on the file contents when {0} is on.`, "`#editor.detectIndentation#`")
      },
      "editor.indentSize": {
        anyOf: [
          {
            type: `string`,
            enum: [
              `tabSize`
            ]
          },
          {
            type: `number`,
            minimum: 1
          }
        ],
        default: `tabSize`,
        markdownDescription: T(`indentSize`, 'The number of spaces used for indentation or `"tabSize"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.')
      },
      "editor.insertSpaces": {
        type: `boolean`,
        default: Ft.insertSpaces,
        markdownDescription: T(`insertSpaces`, "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when {0} is on.", "`#editor.detectIndentation#`")
      },
      "editor.detectIndentation": {
        type: `boolean`,
        default: Ft.detectIndentation,
        markdownDescription: T(`detectIndentation`, `Controls whether {0} and {1} will be automatically detected when a file is opened based on the file contents.`, "`#editor.tabSize#`", "`#editor.insertSpaces#`")
      },
      "editor.trimAutoWhitespace": {
        type: `boolean`,
        default: Ft.trimAutoWhitespace,
        description: T(`trimAutoWhitespace`, `Remove trailing auto inserted whitespace.`)
      },
      "editor.largeFileOptimizations": {
        type: `boolean`,
        default: Ft.largeFileOptimizations,
        description: T(`largeFileOptimizations`, `Special handling for large files to disable certain memory intensive features.`)
      },
      "editor.wordBasedSuggestions": {
        enum: [
          `off`,
          `currentDocument`,
          `matchingDocuments`,
          `allDocuments`
        ],
        default: `matchingDocuments`,
        enumDescriptions: [
          T(`wordBasedSuggestions.off`, `Turn off Word Based Suggestions.`),
          T(`wordBasedSuggestions.currentDocument`, `Only suggest words from the active document.`),
          T(`wordBasedSuggestions.matchingDocuments`, `Suggest words from all open documents of the same language.`),
          T(`wordBasedSuggestions.allDocuments`, `Suggest words from all open documents.`)
        ],
        description: T(`wordBasedSuggestions`, `Controls whether completions should be computed based on words in the document and from which documents they are computed.`)
      },
      "editor.semanticHighlighting.enabled": {
        enum: [
          true,
          false,
          `configuredByTheme`
        ],
        enumDescriptions: [
          T(`semanticHighlighting.true`, `Semantic highlighting enabled for all color themes.`),
          T(`semanticHighlighting.false`, `Semantic highlighting disabled for all color themes.`),
          T(`semanticHighlighting.configuredByTheme`, "Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.")
        ],
        default: `configuredByTheme`,
        description: T(`semanticHighlighting.enabled`, `Controls whether the semanticHighlighting is shown for the languages that support it.`)
      },
      "editor.stablePeek": {
        type: `boolean`,
        default: false,
        markdownDescription: T(`stablePeek`, "Keep peek editors open even when double-clicking their content or when hitting `Escape`.")
      },
      "editor.maxTokenizationLineLength": {
        type: `integer`,
        default: 2e4,
        description: T(`maxTokenizationLineLength`, `Lines above this length will not be tokenized for performance reasons`)
      },
      "editor.experimental.asyncTokenization": {
        type: `boolean`,
        default: true,
        description: T(`editor.experimental.asyncTokenization`, `Controls whether the tokenization should happen asynchronously on a web worker.`),
        tags: [
          `experimental`
        ]
      },
      "editor.experimental.asyncTokenizationLogging": {
        type: `boolean`,
        default: false,
        description: T(`editor.experimental.asyncTokenizationLogging`, `Controls whether async tokenization should be logged. For debugging only.`)
      },
      "editor.experimental.asyncTokenizationVerification": {
        type: `boolean`,
        default: false,
        description: T(`editor.experimental.asyncTokenizationVerification`, `Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.`),
        tags: [
          `experimental`
        ]
      },
      "editor.experimental.treeSitterTelemetry": {
        type: `boolean`,
        default: false,
        markdownDescription: T(`editor.experimental.treeSitterTelemetry`, "Controls whether tree sitter parsing should be turned on and telemetry collected. Setting `editor.experimental.preferTreeSitter` for specific languages will take precedence."),
        tags: [
          `experimental`
        ]
      },
      "editor.language.brackets": {
        type: [
          `array`,
          `null`
        ],
        default: null,
        description: T(`schema.brackets`, `Defines the bracket symbols that increase or decrease the indentation.`),
        items: {
          type: `array`,
          items: [
            {
              type: `string`,
              description: T(`schema.openBracket`, `The opening bracket character or string sequence.`)
            },
            {
              type: `string`,
              description: T(`schema.closeBracket`, `The closing bracket character or string sequence.`)
            }
          ]
        }
      },
      "editor.language.colorizedBracketPairs": {
        type: [
          `array`,
          `null`
        ],
        default: null,
        description: T(`schema.colorizedBracketPairs`, `Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.`),
        items: {
          type: `array`,
          items: [
            {
              type: `string`,
              description: T(`schema.openBracket`, `The opening bracket character or string sequence.`)
            },
            {
              type: `string`,
              description: T(`schema.closeBracket`, `The closing bracket character or string sequence.`)
            }
          ]
        }
      },
      "diffEditor.maxComputationTime": {
        type: `number`,
        default: wj.maxComputationTime,
        description: T(`maxComputationTime`, `Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.`)
      },
      "diffEditor.maxFileSize": {
        type: `number`,
        default: wj.maxFileSize,
        description: T(`maxFileSize`, `Maximum file size in MB for which to compute diffs. Use 0 for no limit.`)
      },
      "diffEditor.renderSideBySide": {
        type: `boolean`,
        default: wj.renderSideBySide,
        description: T(`sideBySide`, `Controls whether the diff editor shows the diff side by side or inline.`)
      },
      "diffEditor.renderSideBySideInlineBreakpoint": {
        type: `number`,
        default: wj.renderSideBySideInlineBreakpoint,
        description: T(`renderSideBySideInlineBreakpoint`, `If the diff editor width is smaller than this value, the inline view is used.`)
      },
      "diffEditor.useInlineViewWhenSpaceIsLimited": {
        type: `boolean`,
        default: wj.useInlineViewWhenSpaceIsLimited,
        description: T(`useInlineViewWhenSpaceIsLimited`, `If enabled and the editor width is too small, the inline view is used.`)
      },
      "diffEditor.renderMarginRevertIcon": {
        type: `boolean`,
        default: wj.renderMarginRevertIcon,
        description: T(`renderMarginRevertIcon`, `When enabled, the diff editor shows arrows in its glyph margin to revert changes.`)
      },
      "diffEditor.renderGutterMenu": {
        type: `boolean`,
        default: wj.renderGutterMenu,
        description: T(`renderGutterMenu`, `When enabled, the diff editor shows a special gutter for revert and stage actions.`)
      },
      "diffEditor.ignoreTrimWhitespace": {
        type: `boolean`,
        default: wj.ignoreTrimWhitespace,
        description: T(`ignoreTrimWhitespace`, `When enabled, the diff editor ignores changes in leading or trailing whitespace.`)
      },
      "diffEditor.renderIndicators": {
        type: `boolean`,
        default: wj.renderIndicators,
        description: T(`renderIndicators`, `Controls whether the diff editor shows +/- indicators for added/removed changes.`)
      },
      "diffEditor.codeLens": {
        type: `boolean`,
        default: wj.diffCodeLens,
        description: T(`codeLens`, `Controls whether the editor shows CodeLens.`)
      },
      "diffEditor.wordWrap": {
        type: `string`,
        enum: [
          `off`,
          `on`,
          `inherit`
        ],
        default: wj.diffWordWrap,
        markdownEnumDescriptions: [
          T(`wordWrap.off`, `Lines will never wrap.`),
          T(`wordWrap.on`, `Lines will wrap at the viewport width.`),
          T(`wordWrap.inherit`, `Lines will wrap according to the {0} setting.`, "`#editor.wordWrap#`")
        ]
      },
      "diffEditor.diffAlgorithm": {
        type: `string`,
        enum: [
          `legacy`,
          `advanced`
        ],
        default: wj.diffAlgorithm,
        markdownEnumDescriptions: [
          T(`diffAlgorithm.legacy`, `Uses the legacy diffing algorithm.`),
          T(`diffAlgorithm.advanced`, `Uses the advanced diffing algorithm.`)
        ],
        tags: [
          `experimental`
        ]
      },
      "diffEditor.hideUnchangedRegions.enabled": {
        type: `boolean`,
        default: wj.hideUnchangedRegions.enabled,
        markdownDescription: T(`hideUnchangedRegions.enabled`, `Controls whether the diff editor shows unchanged regions.`)
      },
      "diffEditor.hideUnchangedRegions.revealLineCount": {
        type: `integer`,
        default: wj.hideUnchangedRegions.revealLineCount,
        markdownDescription: T(`hideUnchangedRegions.revealLineCount`, `Controls how many lines are used for unchanged regions.`),
        minimum: 1
      },
      "diffEditor.hideUnchangedRegions.minimumLineCount": {
        type: `integer`,
        default: wj.hideUnchangedRegions.minimumLineCount,
        markdownDescription: T(`hideUnchangedRegions.minimumLineCount`, `Controls how many lines are used as a minimum for unchanged regions.`),
        minimum: 1
      },
      "diffEditor.hideUnchangedRegions.contextLineCount": {
        type: `integer`,
        default: wj.hideUnchangedRegions.contextLineCount,
        markdownDescription: T(`hideUnchangedRegions.contextLineCount`, `Controls how many lines are used as context when comparing unchanged regions.`),
        minimum: 1
      },
      "diffEditor.experimental.showMoves": {
        type: `boolean`,
        default: wj.experimental.showMoves,
        markdownDescription: T(`showMoves`, `Controls whether the diff editor should show detected code moves.`)
      },
      "diffEditor.experimental.showEmptyDecorations": {
        type: `boolean`,
        default: wj.experimental.showEmptyDecorations,
        description: T(`showEmptyDecorations`, `Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.`)
      },
      "diffEditor.experimental.useTrueInlineView": {
        type: `boolean`,
        default: wj.experimental.useTrueInlineView,
        description: T(`useTrueInlineView`, `If enabled and the editor uses the inline view, word changes are rendered inline.`)
      }
    }
  };
  function Dj(e10) {
    return e10.type !== void 0 || e10.anyOf !== void 0;
  }
  for (let e10 of fr) {
    let t10 = e10.schema;
    if (t10 !== void 0) if (Dj(t10)) Ej.properties[`editor.${e10.name}`] = t10;
    else for (let e11 in t10) Object.hasOwnProperty.call(t10, e11) && (Ej.properties[e11] = t10[e11]);
  }
  let Oj = null;
  function kj() {
    return Oj === null && (Oj = /* @__PURE__ */ Object.create(null), Object.keys(Ej.properties).forEach((e10) => {
      Oj[e10] = true;
    })), Oj;
  }
  function Aj(e10) {
    let t10 = kj();
    return t10[`editor.${e10}`] || false;
  }
  function jj(e10) {
    let t10 = kj();
    return t10[`diffEditor.${e10}`] || false;
  }
  const Mj = am.as(Dg.Configuration);
  Mj.registerConfiguration(Ej);
  Nj = class {
    static insert(e10, t10) {
      return {
        range: new F(e10.lineNumber, e10.column, e10.lineNumber, e10.column),
        text: t10,
        forceMoveMarkers: true
      };
    }
    static delete(e10) {
      return {
        range: e10,
        text: null
      };
    }
    static replace(e10, t10) {
      return {
        range: e10,
        text: t10
      };
    }
    static replaceMove(e10, t10) {
      return {
        range: e10,
        text: t10,
        forceMoveMarkers: true
      };
    }
  };
  function Pj(e10) {
    return Object.isFrozen(e10) ? e10 : Me(e10);
  }
  var Fj = class e10 {
    static createEmptyModel(t10) {
      return new e10({}, [], [], void 0, t10);
    }
    constructor(e11, t10, n10, r10, i10) {
      this._contents = e11, this._keys = t10, this._overrides = n10, this.raw = r10, this.logService = i10, this.overrideConfigurations = /* @__PURE__ */ new Map();
    }
    get rawConfiguration() {
      var _a3;
      if (!this._rawConfiguration) if ((_a3 = this.raw) == null ? void 0 : _a3.length) {
        let t10 = this.raw.map((t11) => {
          if (t11 instanceof e10) return t11;
          let n10 = new Ij(``, this.logService);
          return n10.parseRaw(t11), n10.configurationModel;
        });
        this._rawConfiguration = t10.reduce((e11, t11) => t11 === e11 ? t11 : e11.merge(t11), t10[0]);
      } else this._rawConfiguration = this;
      return this._rawConfiguration;
    }
    get contents() {
      return this._contents;
    }
    get overrides() {
      return this._overrides;
    }
    get keys() {
      return this._keys;
    }
    isEmpty() {
      return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;
    }
    getValue(e11) {
      return e11 ? hg(this.contents, e11) : this.contents;
    }
    inspect(t10, n10) {
      let r10 = this;
      return {
        get value() {
          return Pj(r10.rawConfiguration.getValue(t10));
        },
        get override() {
          return n10 ? Pj(r10.rawConfiguration.getOverrideValue(t10, n10)) : void 0;
        },
        get merged() {
          return Pj(n10 ? r10.rawConfiguration.override(n10).getValue(t10) : r10.rawConfiguration.getValue(t10));
        },
        get overrides() {
          let n11 = [];
          for (let { contents: i10, identifiers: a10, keys: o10 } of r10.rawConfiguration.overrides) {
            let s10 = new e10(i10, o10, [], void 0, r10.logService).getValue(t10);
            s10 !== void 0 && n11.push({
              identifiers: a10,
              value: s10
            });
          }
          return n11.length ? Pj(n11) : void 0;
        }
      };
    }
    getOverrideValue(e11, t10) {
      let n10 = this.getContentsForOverrideIdentifer(t10);
      return n10 ? e11 ? hg(n10, e11) : n10 : void 0;
    }
    override(e11) {
      let t10 = this.overrideConfigurations.get(e11);
      return t10 || (t10 = this.createOverrideConfigurationModel(e11), this.overrideConfigurations.set(e11, t10)), t10;
    }
    merge(...t10) {
      var _a3, _b3;
      let n10 = je(this.contents), r10 = je(this.overrides), i10 = [
        ...this.keys
      ], a10 = ((_a3 = this.raw) == null ? void 0 : _a3.length) ? [
        ...this.raw
      ] : [
        this
      ];
      for (let e11 of t10) {
        if (a10.push(...((_b3 = e11.raw) == null ? void 0 : _b3.length) ? e11.raw : [
          e11
        ]), e11.isEmpty()) continue;
        this.mergeContents(n10, e11.contents);
        for (let t11 of e11.overrides) {
          let [e12] = r10.filter((e13) => l(e13.identifiers, t11.identifiers));
          e12 ? (this.mergeContents(e12.contents, t11.contents), e12.keys.push(...t11.keys), e12.keys = S(e12.keys)) : r10.push(je(t11));
        }
        for (let t11 of e11.keys) i10.indexOf(t11) === -1 && i10.push(t11);
      }
      return new e10(n10, i10, r10, a10.every((t11) => t11 instanceof e10) ? void 0 : a10, this.logService);
    }
    createOverrideConfigurationModel(t10) {
      let n10 = this.getContentsForOverrideIdentifer(t10);
      if (!n10 || typeof n10 != `object` || !Object.keys(n10).length) return this;
      let r10 = {};
      for (let e11 of S([
        ...Object.keys(this.contents),
        ...Object.keys(n10)
      ])) {
        let t11 = this.contents[e11], i10 = n10[e11];
        i10 && (typeof t11 == `object` && typeof i10 == `object` ? (t11 = je(t11), this.mergeContents(t11, i10)) : t11 = i10), r10[e11] = t11;
      }
      return new e10(r10, this.keys, this.overrides, void 0, this.logService);
    }
    mergeContents(e11, t10) {
      for (let n10 of Object.keys(t10)) {
        if (n10 in e11 && ve(e11[n10]) && ve(t10[n10])) {
          this.mergeContents(e11[n10], t10[n10]);
          continue;
        }
        e11[n10] = je(t10[n10]);
      }
    }
    getContentsForOverrideIdentifer(e11) {
      let t10 = null, n10 = null, r10 = (e12) => {
        e12 && (n10 ? this.mergeContents(n10, e12) : n10 = je(e12));
      };
      for (let n11 of this.overrides) n11.identifiers.length === 1 && n11.identifiers[0] === e11 ? t10 = n11.contents : n11.identifiers.includes(e11) && r10(n11.contents);
      return r10(t10), n10;
    }
    toJSON() {
      return {
        contents: this.contents,
        overrides: this.overrides,
        keys: this.keys
      };
    }
    setValue(e11, t10) {
      this.updateValue(e11, t10, false);
    }
    removeValue(e11) {
      let t10 = this.keys.indexOf(e11);
      t10 !== -1 && (this.keys.splice(t10, 1), pg(this.contents, e11), Bg.test(e11) && this.overrides.splice(this.overrides.findIndex((t11) => l(t11.identifiers, Vg(e11))), 1));
    }
    updateValue(e11, t10, n10) {
      if (fg(this.contents, e11, t10, (e12) => this.logService.error(e12)), n10 || (n10 = this.keys.indexOf(e11) === -1), n10 && this.keys.push(e11), Bg.test(e11)) {
        let t11 = Vg(e11), n11 = {
          identifiers: t11,
          keys: Object.keys(this.contents[e11]),
          contents: dg(this.contents[e11], (e12) => this.logService.error(e12))
        }, r10 = this.overrides.findIndex((e12) => l(e12.identifiers, t11));
        r10 === -1 ? this.overrides.push(n11) : this.overrides[r10] = n11;
      }
    }
  }, Ij = class {
    constructor(e10, t10) {
      this._name = e10, this.logService = t10, this._raw = null, this._configurationModel = null, this._restrictedConfigurations = [];
    }
    get configurationModel() {
      return this._configurationModel || Fj.createEmptyModel(this.logService);
    }
    parseRaw(e10, t10) {
      this._raw = e10;
      let { contents: n10, keys: r10, overrides: i10, restricted: a10, hasExcludedProperties: o10 } = this.doParseRaw(e10, t10);
      this._configurationModel = new Fj(n10, r10, i10, o10 ? [
        e10
      ] : void 0, this.logService), this._restrictedConfigurations = a10 || [];
    }
    doParseRaw(e10, t10) {
      let n10 = am.as(Dg.Configuration).getConfigurationProperties(), r10 = this.filter(e10, n10, true, t10);
      e10 = r10.raw;
      let i10 = dg(e10, (e11) => this.logService.error(`Conflict in settings file ${this._name}: ${e11}`)), a10 = Object.keys(e10), o10 = this.toOverrides(e10, (e11) => this.logService.error(`Conflict in settings file ${this._name}: ${e11}`));
      return {
        contents: i10,
        keys: a10,
        overrides: o10,
        restricted: r10.restricted,
        hasExcludedProperties: r10.hasExcludedProperties
      };
    }
    filter(e10, t10, n10, r10) {
      var _a3, _b3, _c3;
      let i10 = false;
      if (!(r10 == null ? void 0 : r10.scopes) && !(r10 == null ? void 0 : r10.skipRestricted) && !((_a3 = r10 == null ? void 0 : r10.exclude) == null ? void 0 : _a3.length)) return {
        raw: e10,
        restricted: [],
        hasExcludedProperties: i10
      };
      let a10 = {}, o10 = [];
      for (let s10 in e10) if (Bg.test(s10) && n10) {
        let n11 = this.filter(e10[s10], t10, false, r10);
        a10[s10] = n11.raw, i10 || (i10 = n11.hasExcludedProperties), o10.push(...n11.restricted);
      } else {
        let n11 = t10[s10], c10 = n11 ? n11.scope === void 0 ? 3 : n11.scope : void 0;
        (n11 == null ? void 0 : n11.restricted) && o10.push(s10), !((_b3 = r10.exclude) == null ? void 0 : _b3.includes(s10)) && (((_c3 = r10.include) == null ? void 0 : _c3.includes(s10)) || (c10 === void 0 || r10.scopes === void 0 || r10.scopes.includes(c10)) && !(r10.skipRestricted && (n11 == null ? void 0 : n11.restricted))) ? a10[s10] = e10[s10] : i10 = true;
      }
      return {
        raw: a10,
        restricted: o10,
        hasExcludedProperties: i10
      };
    }
    toOverrides(e10, t10) {
      let n10 = [];
      for (let r10 of Object.keys(e10)) if (Bg.test(r10)) {
        let i10 = {};
        for (let t11 in e10[r10]) i10[t11] = e10[r10][t11];
        n10.push({
          identifiers: Vg(r10),
          keys: Object.keys(i10),
          contents: dg(i10, t10)
        });
      }
      return n10;
    }
  }, Lj = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10) {
      this.key = e10, this.overrides = t10, this._value = n10, this.overrideIdentifiers = r10, this.defaultConfiguration = i10, this.policyConfiguration = a10, this.applicationConfiguration = o10, this.userConfiguration = s10, this.localUserConfiguration = c10, this.remoteUserConfiguration = l10, this.workspaceConfiguration = u10, this.folderConfigurationModel = d10, this.memoryConfigurationModel = f10;
    }
    toInspectValue(e10) {
      return (e10 == null ? void 0 : e10.value) !== void 0 || (e10 == null ? void 0 : e10.override) !== void 0 || (e10 == null ? void 0 : e10.overrides) !== void 0 ? e10 : void 0;
    }
    get userInspectValue() {
      return this._userInspectValue || (this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier)), this._userInspectValue;
    }
    get user() {
      return this.toInspectValue(this.userInspectValue);
    }
  }, Rj = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      this._defaultConfiguration = e11, this._policyConfiguration = t10, this._applicationConfiguration = n10, this._localUserConfiguration = r10, this._remoteUserConfiguration = i10, this._workspaceConfiguration = a10, this._folderConfigurations = o10, this._memoryConfiguration = s10, this._memoryConfigurationByResource = c10, this.logService = l10, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations = new H_(), this._userConfiguration = null;
    }
    getValue(e11, t10, n10) {
      let r10 = this.getConsolidatedConfigurationModel(e11, t10, n10);
      return r10.getValue(e11);
    }
    updateValue(e11, t10, n10 = {}) {
      let r10;
      n10.resource ? (r10 = this._memoryConfigurationByResource.get(n10.resource), r10 || (r10 = Fj.createEmptyModel(this.logService), this._memoryConfigurationByResource.set(n10.resource, r10))) : r10 = this._memoryConfiguration, t10 === void 0 ? r10.removeValue(e11) : r10.setValue(e11, t10), n10.resource || (this._workspaceConsolidatedConfiguration = null);
    }
    inspect(e11, t10, n10) {
      let r10 = this.getConsolidatedConfigurationModel(e11, t10, n10), i10 = this.getFolderConfigurationModelForResource(t10.resource, n10), a10 = t10.resource && this._memoryConfigurationByResource.get(t10.resource) || this._memoryConfiguration, o10 = /* @__PURE__ */ new Set();
      for (let t11 of r10.overrides) for (let n11 of t11.identifiers) r10.getOverrideValue(e11, n11) !== void 0 && o10.add(n11);
      return new Lj(e11, t10, r10.getValue(e11), o10.size ? [
        ...o10
      ] : void 0, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? void 0 : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? void 0 : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, n10 ? this._workspaceConfiguration : void 0, i10 || void 0, a10);
    }
    get applicationConfiguration() {
      return this._applicationConfiguration;
    }
    get userConfiguration() {
      return this._userConfiguration || (this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration)), this._userConfiguration;
    }
    get localUserConfiguration() {
      return this._localUserConfiguration;
    }
    get remoteUserConfiguration() {
      return this._remoteUserConfiguration;
    }
    getConsolidatedConfigurationModel(e11, t10, n10) {
      let r10 = this.getConsolidatedConfigurationModelForResource(t10, n10);
      return t10.overrideIdentifier && (r10 = r10.override(t10.overrideIdentifier)), !this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(e11) !== void 0 && (r10 = r10.merge(this._policyConfiguration)), r10;
    }
    getConsolidatedConfigurationModelForResource({ resource: e11 }, t10) {
      let n10 = this.getWorkspaceConsolidatedConfiguration();
      if (t10 && e11) {
        let r10 = t10.getFolder(e11);
        r10 && (n10 = this.getFolderConsolidatedConfiguration(r10.uri) || n10);
        let i10 = this._memoryConfigurationByResource.get(e11);
        i10 && (n10 = n10.merge(i10));
      }
      return n10;
    }
    getWorkspaceConsolidatedConfiguration() {
      return this._workspaceConsolidatedConfiguration || (this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration)), this._workspaceConsolidatedConfiguration;
    }
    getFolderConsolidatedConfiguration(e11) {
      let t10 = this._foldersConsolidatedConfigurations.get(e11);
      if (!t10) {
        let n10 = this.getWorkspaceConsolidatedConfiguration(), r10 = this._folderConfigurations.get(e11);
        r10 ? (t10 = n10.merge(r10), this._foldersConsolidatedConfigurations.set(e11, t10)) : t10 = n10;
      }
      return t10;
    }
    getFolderConfigurationModelForResource(e11, t10) {
      if (t10 && e11) {
        let n10 = t10.getFolder(e11);
        if (n10) return this._folderConfigurations.get(n10.uri);
      }
    }
    toData() {
      return {
        defaults: {
          contents: this._defaultConfiguration.contents,
          overrides: this._defaultConfiguration.overrides,
          keys: this._defaultConfiguration.keys
        },
        policy: {
          contents: this._policyConfiguration.contents,
          overrides: this._policyConfiguration.overrides,
          keys: this._policyConfiguration.keys
        },
        application: {
          contents: this.applicationConfiguration.contents,
          overrides: this.applicationConfiguration.overrides,
          keys: this.applicationConfiguration.keys
        },
        user: {
          contents: this.userConfiguration.contents,
          overrides: this.userConfiguration.overrides,
          keys: this.userConfiguration.keys
        },
        workspace: {
          contents: this._workspaceConfiguration.contents,
          overrides: this._workspaceConfiguration.overrides,
          keys: this._workspaceConfiguration.keys
        },
        folders: [
          ...this._folderConfigurations.keys()
        ].reduce((e11, t10) => {
          let { contents: n10, overrides: r10, keys: i10 } = this._folderConfigurations.get(t10);
          return e11.push([
            t10,
            {
              contents: n10,
              overrides: r10,
              keys: i10
            }
          ]), e11;
        }, [])
      };
    }
    static parse(t10, n10) {
      let r10 = this.parseConfigurationModel(t10.defaults, n10), i10 = this.parseConfigurationModel(t10.policy, n10), a10 = this.parseConfigurationModel(t10.application, n10), o10 = this.parseConfigurationModel(t10.user, n10), s10 = this.parseConfigurationModel(t10.workspace, n10), c10 = t10.folders.reduce((e11, t11) => (e11.set(xa.revive(t11[0]), this.parseConfigurationModel(t11[1], n10)), e11), new H_());
      return new e10(r10, i10, a10, o10, Fj.createEmptyModel(n10), s10, c10, Fj.createEmptyModel(n10), new H_(), n10);
    }
    static parseConfigurationModel(e11, t10) {
      return new Fj(e11.contents, e11.keys, e11.overrides, void 0, t10);
    }
  }, zj = class {
    constructor(e10, t10, n10, r10, i10) {
      this.change = e10, this.previous = t10, this.currentConfiguraiton = n10, this.currentWorkspace = r10, this.logService = i10, this._marker = `
`, this._markerCode1 = this._marker.charCodeAt(0), this._markerCode2 = 46, this.affectedKeys = /* @__PURE__ */ new Set(), this._previousConfiguration = void 0;
      for (let t11 of e10.keys) this.affectedKeys.add(t11);
      for (let [, t11] of e10.overrides) for (let e11 of t11) this.affectedKeys.add(e11);
      this._affectsConfigStr = this._marker;
      for (let e11 of this.affectedKeys) this._affectsConfigStr += e11 + this._marker;
    }
    get previousConfiguration() {
      return !this._previousConfiguration && this.previous && (this._previousConfiguration = Rj.parse(this.previous.data, this.logService)), this._previousConfiguration;
    }
    affectsConfiguration(e10, t10) {
      var _a3;
      let n10 = this._marker + e10, r10 = this._affectsConfigStr.indexOf(n10);
      if (r10 < 0) return false;
      let i10 = r10 + n10.length;
      if (i10 >= this._affectsConfigStr.length) return false;
      let a10 = this._affectsConfigStr.charCodeAt(i10);
      if (a10 !== this._markerCode1 && a10 !== this._markerCode2) return false;
      if (t10) {
        let n11 = this.previousConfiguration ? this.previousConfiguration.getValue(e10, t10, (_a3 = this.previous) == null ? void 0 : _a3.workspace) : void 0, r11 = this.currentConfiguraiton.getValue(e10, t10, this.currentWorkspace);
        return !Le(n11, r11);
      }
      return true;
    }
  }, Bj = class {
    constructor() {
      this._onDidChange = new N(), this.onDidChange = this._onDidChange.event, this._enabled = true;
    }
    get enabled() {
      return this._enabled;
    }
    enable() {
      this._enabled = true, this._onDidChange.fire();
    }
    disable() {
      this._enabled = false, this._onDidChange.fire();
    }
  };
  const Vj = new Bj(), Hj = {
    kind: 0
  }, Uj = {
    kind: 1
  };
  function Wj(e10, t10, n10) {
    return {
      kind: 2,
      commandId: e10,
      commandArgs: t10,
      isBubble: n10
    };
  }
  var Gj = class e10 {
    constructor(t10, n10, r10) {
      var _a3;
      this._log = r10, this._defaultKeybindings = t10, this._defaultBoundCommands = /* @__PURE__ */ new Map();
      for (let e11 of t10) {
        let t11 = e11.command;
        t11 && t11.charAt(0) !== `-` && this._defaultBoundCommands.set(t11, true);
      }
      this._map = /* @__PURE__ */ new Map(), this._lookupMap = /* @__PURE__ */ new Map(), this._keybindings = e10.handleRemovals([].concat(t10, n10));
      for (let e11 = 0, t11 = this._keybindings.length; e11 < t11; e11++) {
        let t12 = this._keybindings[e11];
        if (t12.chords.length === 0) continue;
        let n11 = (_a3 = t12.when) == null ? void 0 : _a3.substituteConstants();
        n11 && n11.type === 0 || this._addKeyPress(t12.chords[0], t12);
      }
    }
    static _isTargetedForRemoval(e11, t10, n10) {
      if (t10) {
        for (let n11 = 0; n11 < t10.length; n11++) if (t10[n11] !== e11.chords[n11]) return false;
      }
      return !(n10 && n10.type !== 1 && (!e11.when || !Dp(n10, e11.when)));
    }
    static handleRemovals(e11) {
      let t10 = /* @__PURE__ */ new Map();
      for (let n11 = 0, r10 = e11.length; n11 < r10; n11++) {
        let r11 = e11[n11];
        if (r11.command && r11.command.charAt(0) === `-`) {
          let e12 = r11.command.substring(1);
          t10.has(e12) ? t10.get(e12).push(r11) : t10.set(e12, [
            r11
          ]);
        }
      }
      if (t10.size === 0) return e11;
      let n10 = [];
      for (let r10 = 0, i10 = e11.length; r10 < i10; r10++) {
        let i11 = e11[r10];
        if (!i11.command || i11.command.length === 0) {
          n10.push(i11);
          continue;
        }
        if (i11.command.charAt(0) === `-`) continue;
        let a10 = t10.get(i11.command);
        if (!a10 || !i11.isDefault) {
          n10.push(i11);
          continue;
        }
        let o10 = false;
        for (let e12 of a10) {
          let t11 = e12.when;
          if (this._isTargetedForRemoval(i11, e12.chords, t11)) {
            o10 = true;
            break;
          }
        }
        if (!o10) {
          n10.push(i11);
          continue;
        }
      }
      return n10;
    }
    _addKeyPress(t10, n10) {
      let r10 = this._map.get(t10);
      if (r10 === void 0) {
        this._map.set(t10, [
          n10
        ]), this._addToLookupMap(n10);
        return;
      }
      for (let t11 = r10.length - 1; t11 >= 0; t11--) {
        let i10 = r10[t11];
        if (i10.command === n10.command) continue;
        let a10 = true;
        for (let e11 = 1; e11 < i10.chords.length && e11 < n10.chords.length; e11++) if (i10.chords[e11] !== n10.chords[e11]) {
          a10 = false;
          break;
        }
        a10 && e10.whenIsEntirelyIncluded(i10.when, n10.when) && this._removeFromLookupMap(i10);
      }
      r10.push(n10), this._addToLookupMap(n10);
    }
    _addToLookupMap(e11) {
      if (!e11.command) return;
      let t10 = this._lookupMap.get(e11.command);
      t10 === void 0 ? (t10 = [
        e11
      ], this._lookupMap.set(e11.command, t10)) : t10.push(e11);
    }
    _removeFromLookupMap(e11) {
      if (!e11.command) return;
      let t10 = this._lookupMap.get(e11.command);
      if (t10 !== void 0) {
        for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) if (t10[n10] === e11) {
          t10.splice(n10, 1);
          return;
        }
      }
    }
    static whenIsEntirelyIncluded(e11, t10) {
      return !t10 || t10.type === 1 ? true : !e11 || e11.type === 1 ? false : Xp(e11, t10);
    }
    getKeybindings() {
      return this._keybindings;
    }
    lookupPrimaryKeybinding(e11, t10) {
      let n10 = this._lookupMap.get(e11);
      if (n10 === void 0 || n10.length === 0) return null;
      if (n10.length === 1) return n10[0];
      for (let e12 = n10.length - 1; e12 >= 0; e12--) {
        let r10 = n10[e12];
        if (t10.contextMatchesRules(r10.when)) return r10;
      }
      return n10[n10.length - 1];
    }
    resolve(e11, t10, n10) {
      let r10 = [
        ...t10,
        n10
      ];
      this._log(`| Resolving ${r10}`);
      let i10 = this._map.get(r10[0]);
      if (i10 === void 0) return this._log(`\\ No keybinding entries.`), Hj;
      let a10 = null;
      if (r10.length < 2) a10 = i10;
      else {
        a10 = [];
        for (let e12 = 0, t11 = i10.length; e12 < t11; e12++) {
          let t12 = i10[e12];
          if (r10.length > t12.chords.length) continue;
          let n11 = true;
          for (let e13 = 1; e13 < r10.length; e13++) if (t12.chords[e13] !== r10[e13]) {
            n11 = false;
            break;
          }
          n11 && a10.push(t12);
        }
      }
      let o10 = this._findCommand(e11, a10);
      return o10 ? r10.length < o10.chords.length ? (this._log(`\\ From ${a10.length} keybinding entries, awaiting ${o10.chords.length - r10.length} more chord(s), when: ${Kj(o10.when)}, source: ${qj(o10)}.`), Uj) : (this._log(`\\ From ${a10.length} keybinding entries, matched ${o10.command}, when: ${Kj(o10.when)}, source: ${qj(o10)}.`), Wj(o10.command, o10.commandArgs, o10.bubble)) : (this._log(`\\ From ${a10.length} keybinding entries, no when clauses matched the context.`), Hj);
    }
    _findCommand(t10, n10) {
      for (let r10 = n10.length - 1; r10 >= 0; r10--) {
        let i10 = n10[r10];
        if (e10._contextMatchesRules(t10, i10.when)) return i10;
      }
      return null;
    }
    static _contextMatchesRules(e11, t10) {
      return t10 ? t10.evaluate(e11) : true;
    }
  };
  function Kj(e10) {
    return e10 ? `${e10.serialize()}` : `no when condition`;
  }
  function qj(e10) {
    return e10.extensionId ? e10.isBuiltinExtension ? `built-in extension ${e10.extensionId}` : `user extension ${e10.extensionId}` : e10.isDefault ? `built-in` : `user`;
  }
  const Jj = /^(cursor|delete|undo|redo|tab|editor\.action\.clipboard)/;
  var Yj = class extends j {
    get onDidUpdateKeybindings() {
      return this._onDidUpdateKeybindings ? this._onDidUpdateKeybindings.event : M.None;
    }
    get inChordMode() {
      return this._currentChords.length > 0;
    }
    constructor(e10, t10, n10, r10, i10) {
      super(), this._contextKeyService = e10, this._commandService = t10, this._telemetryService = n10, this._notificationService = r10, this._logService = i10, this._onDidUpdateKeybindings = this._register(new N()), this._currentChords = [], this._currentChordChecker = new sl(), this._currentChordStatusMessage = null, this._ignoreSingleModifiers = Xj.EMPTY, this._currentSingleModifier = null, this._currentSingleModifierClearTimeout = new ol(), this._currentlyDispatchingCommandId = null, this._logging = false;
    }
    dispose() {
      super.dispose();
    }
    _log(e10) {
      this._logging && this._logService.info(`[KeybindingService]: ${e10}`);
    }
    getKeybindings() {
      return this._getResolver().getKeybindings();
    }
    lookupKeybinding(e10, t10) {
      let n10 = this._getResolver().lookupPrimaryKeybinding(e10, t10 || this._contextKeyService);
      if (n10) return n10.resolvedKeybinding;
    }
    dispatchEvent(e10, t10) {
      return this._dispatch(e10, t10);
    }
    softDispatch(e10, t10) {
      this._log(`/ Soft dispatching keyboard event`);
      let n10 = this.resolveKeyboardEvent(e10);
      if (n10.hasMultipleChords()) return console.warn(`keyboard event should not be mapped to multiple chords`), Hj;
      let [r10] = n10.getDispatchChords();
      if (r10 === null) return this._log(`\\ Keyboard event cannot be dispatched`), Hj;
      let i10 = this._contextKeyService.getContext(t10), a10 = this._currentChords.map(({ keypress: e11 }) => e11);
      return this._getResolver().resolve(i10, a10, r10);
    }
    _scheduleLeaveChordMode() {
      let e10 = Date.now();
      this._currentChordChecker.cancelAndSet(() => {
        if (!this._documentHasFocus()) {
          this._leaveChordMode();
          return;
        }
        Date.now() - e10 > 5e3 && this._leaveChordMode();
      }, 500);
    }
    _expectAnotherChord(e10, t10) {
      switch (this._currentChords.push({
        keypress: e10,
        label: t10
      }), this._currentChords.length) {
        case 0:
          throw wr(`impossible`);
        case 1:
          this._currentChordStatusMessage = this._notificationService.status(T(`first.chord`, `({0}) was pressed. Waiting for second key of chord...`, t10));
          break;
        default: {
          let e11 = this._currentChords.map(({ label: e12 }) => e12).join(`, `);
          this._currentChordStatusMessage = this._notificationService.status(T(`next.chord`, `({0}) was pressed. Waiting for next key of chord...`, e11));
        }
      }
      this._scheduleLeaveChordMode(), Vj.enabled && Vj.disable();
    }
    _leaveChordMode() {
      this._currentChordStatusMessage && (this._currentChordStatusMessage.dispose(), this._currentChordStatusMessage = null), this._currentChordChecker.cancel(), this._currentChords = [], Vj.enable();
    }
    _dispatch(e10, t10) {
      return this._doDispatch(this.resolveKeyboardEvent(e10), t10, false);
    }
    _singleModifierDispatch(e10, t10) {
      let n10 = this.resolveKeyboardEvent(e10), [r10] = n10.getSingleModifierDispatchChords();
      if (r10) return this._ignoreSingleModifiers.has(r10) ? (this._log(`+ Ignoring single modifier ${r10} due to it being pressed together with other keys.`), this._ignoreSingleModifiers = Xj.EMPTY, this._currentSingleModifierClearTimeout.cancel(), this._currentSingleModifier = null, false) : (this._ignoreSingleModifiers = Xj.EMPTY, this._currentSingleModifier === null ? (this._log(`+ Storing single modifier for possible chord ${r10}.`), this._currentSingleModifier = r10, this._currentSingleModifierClearTimeout.cancelAndSet(() => {
        this._log(`+ Clearing single modifier due to 300ms elapsed.`), this._currentSingleModifier = null;
      }, 300), false) : r10 === this._currentSingleModifier ? (this._log(`/ Dispatching single modifier chord ${r10} ${r10}`), this._currentSingleModifierClearTimeout.cancel(), this._currentSingleModifier = null, this._doDispatch(n10, t10, true)) : (this._log(`+ Clearing single modifier due to modifier mismatch: ${this._currentSingleModifier} ${r10}`), this._currentSingleModifierClearTimeout.cancel(), this._currentSingleModifier = null, false));
      let [i10] = n10.getChords();
      return this._ignoreSingleModifiers = new Xj(i10), this._currentSingleModifier !== null && this._log(`+ Clearing single modifier due to other key up.`), this._currentSingleModifierClearTimeout.cancel(), this._currentSingleModifier = null, false;
    }
    _doDispatch(e10, t10, n10 = false) {
      let r10 = false;
      if (e10.hasMultipleChords()) return console.warn(`Unexpected keyboard event mapped to multiple chords`), false;
      let i10 = null, a10 = null;
      if (n10) {
        let [t11] = e10.getSingleModifierDispatchChords();
        i10 = t11, a10 = t11 ? [
          t11
        ] : [];
      } else [i10] = e10.getDispatchChords(), a10 = this._currentChords.map(({ keypress: e11 }) => e11);
      if (i10 === null) return this._log(`\\ Keyboard event cannot be dispatched in keydown phase.`), r10;
      let o10 = this._contextKeyService.getContext(t10), s10 = e10.getLabel(), c10 = this._getResolver().resolve(o10, a10, i10);
      switch (c10.kind) {
        case 0:
          if (this._logService.trace(`KeybindingService#dispatch`, s10, `[ No matching keybinding ]`), this.inChordMode) {
            let e11 = this._currentChords.map(({ label: e12 }) => e12).join(`, `);
            this._log(`+ Leaving multi-chord mode: Nothing bound to "${e11}, ${s10}".`), this._notificationService.status(T(`missing.chord`, `The key combination ({0}, {1}) is not a command.`, e11, s10), {
              hideAfter: 10 * 1e3
            }), this._leaveChordMode(), r10 = true;
          }
          return r10;
        case 1:
          return this._logService.trace(`KeybindingService#dispatch`, s10, `[ Several keybindings match - more chords needed ]`), r10 = true, this._expectAnotherChord(i10, s10), this._log(this._currentChords.length === 1 ? `+ Entering multi-chord mode...` : `+ Continuing multi-chord mode...`), r10;
        case 2:
          if (this._logService.trace(`KeybindingService#dispatch`, s10, `[ Will dispatch command ${c10.commandId} ]`), c10.commandId === null || c10.commandId === ``) {
            if (this.inChordMode) {
              let e11 = this._currentChords.map(({ label: e12 }) => e12).join(`, `);
              this._log(`+ Leaving chord mode: Nothing bound to "${e11}, ${s10}".`), this._notificationService.status(T(`missing.chord`, `The key combination ({0}, {1}) is not a command.`, e11, s10), {
                hideAfter: 10 * 1e3
              }), this._leaveChordMode(), r10 = true;
            }
          } else {
            this.inChordMode && this._leaveChordMode(), c10.isBubble || (r10 = true), this._log(`+ Invoking command ${c10.commandId}.`), this._currentlyDispatchingCommandId = c10.commandId;
            try {
              c10.commandArgs === void 0 ? this._commandService.executeCommand(c10.commandId).then(void 0, (e11) => this._notificationService.warn(e11)) : this._commandService.executeCommand(c10.commandId, c10.commandArgs).then(void 0, (e11) => this._notificationService.warn(e11));
            } finally {
              this._currentlyDispatchingCommandId = null;
            }
            Jj.test(c10.commandId) || this._telemetryService.publicLog2(`workbenchActionExecuted`, {
              id: c10.commandId,
              from: `keybinding`,
              detail: e10.getUserSettingsLabel() ?? void 0
            });
          }
          return r10;
      }
    }
    mightProducePrintableCharacter(e10) {
      return e10.ctrlKey || e10.metaKey ? false : e10.keyCode >= 31 && e10.keyCode <= 56 || e10.keyCode >= 21 && e10.keyCode <= 30;
    }
  }, Xj = (_da = class {
    constructor(e10) {
      this._ctrlKey = e10 ? e10.ctrlKey : false, this._shiftKey = e10 ? e10.shiftKey : false, this._altKey = e10 ? e10.altKey : false, this._metaKey = e10 ? e10.metaKey : false;
    }
    has(e10) {
      switch (e10) {
        case `ctrl`:
          return this._ctrlKey;
        case `shift`:
          return this._shiftKey;
        case `alt`:
          return this._altKey;
        case `meta`:
          return this._metaKey;
      }
    }
  }, _da.EMPTY = new _da(null), _da), Zj = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this._resolvedKeybindingItemBrand = void 0, this.resolvedKeybinding = e10, this.chords = e10 ? Qj(e10.getDispatchChords()) : [], e10 && this.chords.length === 0 && (this.chords = Qj(e10.getSingleModifierDispatchChords())), this.bubble = t10 ? t10.charCodeAt(0) === 94 : false, this.command = this.bubble ? t10.substr(1) : t10, this.commandArgs = n10, this.when = r10, this.isDefault = i10, this.extensionId = a10, this.isBuiltinExtension = o10;
    }
  };
  function Qj(e10) {
    let t10 = [];
    for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
      let r11 = e10[n10];
      if (!r11) return [];
      t10.push(r11);
    }
    return t10;
  }
  var $j = class {
    constructor(e10, t10, n10 = t10) {
      this.modifierLabels = [
        null
      ], this.modifierLabels[2] = e10, this.modifierLabels[1] = t10, this.modifierLabels[3] = n10;
    }
    toLabel(e10, t10, n10) {
      if (t10.length === 0) return null;
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = n10(a11);
        if (o10 === null) return null;
        r10[i10] = iM(a11, o10, this.modifierLabels[e10]);
      }
      return r10.join(` `);
    }
  };
  const eM = new $j({
    ctrlKey: `\u2303`,
    shiftKey: `\u21E7`,
    altKey: `\u2325`,
    metaKey: `\u2318`,
    separator: ``
  }, {
    ctrlKey: T({
      key: `ctrlKey`,
      comment: [
        `This is the short form for the Control key on the keyboard`
      ]
    }, `Ctrl`),
    shiftKey: T({
      key: `shiftKey`,
      comment: [
        `This is the short form for the Shift key on the keyboard`
      ]
    }, `Shift`),
    altKey: T({
      key: `altKey`,
      comment: [
        `This is the short form for the Alt key on the keyboard`
      ]
    }, `Alt`),
    metaKey: T({
      key: `windowsKey`,
      comment: [
        `This is the short form for the Windows key on the keyboard`
      ]
    }, `Windows`),
    separator: `+`
  }, {
    ctrlKey: T({
      key: `ctrlKey`,
      comment: [
        `This is the short form for the Control key on the keyboard`
      ]
    }, `Ctrl`),
    shiftKey: T({
      key: `shiftKey`,
      comment: [
        `This is the short form for the Shift key on the keyboard`
      ]
    }, `Shift`),
    altKey: T({
      key: `altKey`,
      comment: [
        `This is the short form for the Alt key on the keyboard`
      ]
    }, `Alt`),
    metaKey: T({
      key: `superKey`,
      comment: [
        `This is the short form for the Super key on the keyboard`
      ]
    }, `Super`),
    separator: `+`
  }), tM = new $j({
    ctrlKey: T({
      key: `ctrlKey.long`,
      comment: [
        `This is the long form for the Control key on the keyboard`
      ]
    }, `Control`),
    shiftKey: T({
      key: `shiftKey.long`,
      comment: [
        `This is the long form for the Shift key on the keyboard`
      ]
    }, `Shift`),
    altKey: T({
      key: `optKey.long`,
      comment: [
        `This is the long form for the Alt/Option key on the keyboard`
      ]
    }, `Option`),
    metaKey: T({
      key: `cmdKey.long`,
      comment: [
        `This is the long form for the Command key on the keyboard`
      ]
    }, `Command`),
    separator: `+`
  }, {
    ctrlKey: T({
      key: `ctrlKey.long`,
      comment: [
        `This is the long form for the Control key on the keyboard`
      ]
    }, `Control`),
    shiftKey: T({
      key: `shiftKey.long`,
      comment: [
        `This is the long form for the Shift key on the keyboard`
      ]
    }, `Shift`),
    altKey: T({
      key: `altKey.long`,
      comment: [
        `This is the long form for the Alt key on the keyboard`
      ]
    }, `Alt`),
    metaKey: T({
      key: `windowsKey.long`,
      comment: [
        `This is the long form for the Windows key on the keyboard`
      ]
    }, `Windows`),
    separator: `+`
  }, {
    ctrlKey: T({
      key: `ctrlKey.long`,
      comment: [
        `This is the long form for the Control key on the keyboard`
      ]
    }, `Control`),
    shiftKey: T({
      key: `shiftKey.long`,
      comment: [
        `This is the long form for the Shift key on the keyboard`
      ]
    }, `Shift`),
    altKey: T({
      key: `altKey.long`,
      comment: [
        `This is the long form for the Alt key on the keyboard`
      ]
    }, `Alt`),
    metaKey: T({
      key: `superKey.long`,
      comment: [
        `This is the long form for the Super key on the keyboard`
      ]
    }, `Super`),
    separator: `+`
  }), nM = new $j({
    ctrlKey: `Ctrl`,
    shiftKey: `Shift`,
    altKey: `Alt`,
    metaKey: `Cmd`,
    separator: `+`
  }, {
    ctrlKey: `Ctrl`,
    shiftKey: `Shift`,
    altKey: `Alt`,
    metaKey: `Super`,
    separator: `+`
  }), rM = new $j({
    ctrlKey: `ctrl`,
    shiftKey: `shift`,
    altKey: `alt`,
    metaKey: `cmd`,
    separator: `+`
  }, {
    ctrlKey: `ctrl`,
    shiftKey: `shift`,
    altKey: `alt`,
    metaKey: `win`,
    separator: `+`
  }, {
    ctrlKey: `ctrl`,
    shiftKey: `shift`,
    altKey: `alt`,
    metaKey: `meta`,
    separator: `+`
  });
  function iM(e10, t10, n10) {
    if (t10 === null) return ``;
    let r10 = [];
    return e10.ctrlKey && r10.push(n10.ctrlKey), e10.shiftKey && r10.push(n10.shiftKey), e10.altKey && r10.push(n10.altKey), e10.metaKey && r10.push(n10.metaKey), t10 !== `` && r10.push(t10), r10.join(n10.separator);
  }
  var aM = class extends Ic {
    constructor(e10, t10) {
      if (super(), t10.length === 0) throw Cr(`chords`);
      this._os = e10, this._chords = t10;
    }
    getLabel() {
      return eM.toLabel(this._os, this._chords, (e10) => this._getLabel(e10));
    }
    getAriaLabel() {
      return tM.toLabel(this._os, this._chords, (e10) => this._getAriaLabel(e10));
    }
    getElectronAccelerator() {
      return this._chords.length > 1 || this._chords[0].isDuplicateModifierCase() ? null : nM.toLabel(this._os, this._chords, (e10) => this._getElectronAccelerator(e10));
    }
    getUserSettingsLabel() {
      return rM.toLabel(this._os, this._chords, (e10) => this._getUserSettingsLabel(e10));
    }
    hasMultipleChords() {
      return this._chords.length > 1;
    }
    getChords() {
      return this._chords.map((e10) => this._getChord(e10));
    }
    _getChord(e10) {
      return new Fc(e10.ctrlKey, e10.shiftKey, e10.altKey, e10.metaKey, this._getLabel(e10), this._getAriaLabel(e10));
    }
    getDispatchChords() {
      return this._chords.map((e10) => this._getChordDispatch(e10));
    }
    getSingleModifierDispatchChords() {
      return this._chords.map((e10) => this._getSingleModifierChordDispatch(e10));
    }
  }, oM = class e10 extends aM {
    constructor(e11, t10) {
      super(t10, e11);
    }
    _keyCodeToUILabel(e11) {
      if (this._os === 2) switch (e11) {
        case 15:
          return `\u2190`;
        case 16:
          return `\u2191`;
        case 17:
          return `\u2192`;
        case 18:
          return `\u2193`;
      }
      return ki.toString(e11);
    }
    _getLabel(e11) {
      return e11.isDuplicateModifierCase() ? `` : this._keyCodeToUILabel(e11.keyCode);
    }
    _getAriaLabel(e11) {
      return e11.isDuplicateModifierCase() ? `` : ki.toString(e11.keyCode);
    }
    _getElectronAccelerator(e11) {
      return ki.toElectronAccelerator(e11.keyCode);
    }
    _getUserSettingsLabel(e11) {
      if (e11.isDuplicateModifierCase()) return ``;
      let t10 = ki.toUserSettingsUS(e11.keyCode);
      return t10 && t10.toLowerCase();
    }
    _getChordDispatch(t10) {
      return e10.getDispatchStr(t10);
    }
    static getDispatchStr(e11) {
      if (e11.isModifierKey()) return null;
      let t10 = ``;
      return e11.ctrlKey && (t10 += `ctrl+`), e11.shiftKey && (t10 += `shift+`), e11.altKey && (t10 += `alt+`), e11.metaKey && (t10 += `meta+`), t10 += ki.toString(e11.keyCode), t10;
    }
    _getSingleModifierChordDispatch(e11) {
      return e11.keyCode === 5 && !e11.shiftKey && !e11.altKey && !e11.metaKey ? `ctrl` : e11.keyCode === 4 && !e11.ctrlKey && !e11.altKey && !e11.metaKey ? `shift` : e11.keyCode === 6 && !e11.ctrlKey && !e11.shiftKey && !e11.metaKey ? `alt` : e11.keyCode === 57 && !e11.ctrlKey && !e11.shiftKey && !e11.altKey ? `meta` : null;
    }
    static _scanCodeToKeyCode(e11) {
      let t10 = Di[e11];
      if (t10 !== -1) return t10;
      switch (e11) {
        case 10:
          return 31;
        case 11:
          return 32;
        case 12:
          return 33;
        case 13:
          return 34;
        case 14:
          return 35;
        case 15:
          return 36;
        case 16:
          return 37;
        case 17:
          return 38;
        case 18:
          return 39;
        case 19:
          return 40;
        case 20:
          return 41;
        case 21:
          return 42;
        case 22:
          return 43;
        case 23:
          return 44;
        case 24:
          return 45;
        case 25:
          return 46;
        case 26:
          return 47;
        case 27:
          return 48;
        case 28:
          return 49;
        case 29:
          return 50;
        case 30:
          return 51;
        case 31:
          return 52;
        case 32:
          return 53;
        case 33:
          return 54;
        case 34:
          return 55;
        case 35:
          return 56;
        case 36:
          return 22;
        case 37:
          return 23;
        case 38:
          return 24;
        case 39:
          return 25;
        case 40:
          return 26;
        case 41:
          return 27;
        case 42:
          return 28;
        case 43:
          return 29;
        case 44:
          return 30;
        case 45:
          return 21;
        case 51:
          return 88;
        case 52:
          return 86;
        case 53:
          return 92;
        case 54:
          return 94;
        case 55:
          return 93;
        case 56:
          return 0;
        case 57:
          return 85;
        case 58:
          return 95;
        case 59:
          return 91;
        case 60:
          return 87;
        case 61:
          return 89;
        case 62:
          return 90;
        case 106:
          return 97;
      }
      return 0;
    }
    static _toKeyCodeChord(e11) {
      if (!e11) return null;
      if (e11 instanceof Nc) return e11;
      let t10 = this._scanCodeToKeyCode(e11.scanCode);
      return t10 === 0 ? null : new Nc(e11.ctrlKey, e11.shiftKey, e11.altKey, e11.metaKey, t10);
    }
    static resolveKeybinding(t10, n10) {
      let r10 = Qj(t10.chords.map((e11) => this._toKeyCodeChord(e11)));
      return r10.length > 0 ? [
        new e10(r10, n10)
      ] : [];
    }
  };
  let Wte;
  sM = Xf(`labelService`);
  cM = Xf(`progressService`);
  Wte = Object.freeze({
    total() {
    },
    worked() {
    },
    done() {
    }
  });
  lM = (_ea = class {
    constructor(e10) {
      this.callback = e10;
    }
    report(e10) {
      this._value = e10, this.callback(this._value);
    }
  }, _ea.None = Object.freeze({
    report() {
    }
  }), _ea);
  uM = Xf(`editorProgressService`);
  let dM, fM, pM, mM, hM;
  dM = class {
    constructor() {
      this._value = ``, this._pos = 0;
    }
    reset(e10) {
      return this._value = e10, this._pos = 0, this;
    }
    next() {
      return this._pos += 1, this;
    }
    hasNext() {
      return this._pos < this._value.length - 1;
    }
    cmp(e10) {
      let t10 = e10.charCodeAt(0), n10 = this._value.charCodeAt(this._pos);
      return t10 - n10;
    }
    value() {
      return this._value[this._pos];
    }
  };
  fM = class {
    constructor(e10 = true) {
      this._caseSensitive = e10;
    }
    reset(e10) {
      return this._value = e10, this._from = 0, this._to = 0, this.next();
    }
    hasNext() {
      return this._to < this._value.length;
    }
    next() {
      this._from = this._to;
      let e10 = true;
      for (; this._to < this._value.length; this._to++) {
        let t10 = this._value.charCodeAt(this._to);
        if (t10 === 46) if (e10) this._from++;
        else break;
        else e10 = false;
      }
      return this;
    }
    cmp(e10) {
      return this._caseSensitive ? As(e10, this._value, 0, e10.length, this._from, this._to) : Ms(e10, this._value, 0, e10.length, this._from, this._to);
    }
    value() {
      return this._value.substring(this._from, this._to);
    }
  };
  pM = class {
    constructor(e10 = true, t10 = true) {
      this._splitOnBackslash = e10, this._caseSensitive = t10;
    }
    reset(e10) {
      this._from = 0, this._to = 0, this._value = e10, this._valueLen = e10.length;
      for (let t10 = e10.length - 1; t10 >= 0; t10--, this._valueLen--) {
        let e11 = this._value.charCodeAt(t10);
        if (!(e11 === 47 || this._splitOnBackslash && e11 === 92)) break;
      }
      return this.next();
    }
    hasNext() {
      return this._to < this._valueLen;
    }
    next() {
      this._from = this._to;
      let e10 = true;
      for (; this._to < this._valueLen; this._to++) {
        let t10 = this._value.charCodeAt(this._to);
        if (t10 === 47 || this._splitOnBackslash && t10 === 92) if (e10) this._from++;
        else break;
        else e10 = false;
      }
      return this;
    }
    cmp(e10) {
      return this._caseSensitive ? As(e10, this._value, 0, e10.length, this._from, this._to) : Ms(e10, this._value, 0, e10.length, this._from, this._to);
    }
    value() {
      return this._value.substring(this._from, this._to);
    }
  };
  mM = class {
    constructor(e10, t10) {
      this._ignorePathCasing = e10, this._ignoreQueryAndFragment = t10, this._states = [], this._stateIdx = 0;
    }
    reset(e10) {
      return this._value = e10, this._states = [], this._value.scheme && this._states.push(1), this._value.authority && this._states.push(2), this._value.path && (this._pathIterator = new pM(false, !this._ignorePathCasing(e10)), this._pathIterator.reset(e10.path), this._pathIterator.value() && this._states.push(3)), this._ignoreQueryAndFragment(e10) || (this._value.query && this._states.push(4), this._value.fragment && this._states.push(5)), this._stateIdx = 0, this;
    }
    next() {
      return this._states[this._stateIdx] === 3 && this._pathIterator.hasNext() ? this._pathIterator.next() : this._stateIdx += 1, this;
    }
    hasNext() {
      return this._states[this._stateIdx] === 3 && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;
    }
    cmp(e10) {
      if (this._states[this._stateIdx] === 1) return js(e10, this._value.scheme);
      if (this._states[this._stateIdx] === 2) return js(e10, this._value.authority);
      if (this._states[this._stateIdx] === 3) return this._pathIterator.cmp(e10);
      if (this._states[this._stateIdx] === 4) return ks(e10, this._value.query);
      if (this._states[this._stateIdx] === 5) return ks(e10, this._value.fragment);
      throw Error();
    }
    value() {
      if (this._states[this._stateIdx] === 1) return this._value.scheme;
      if (this._states[this._stateIdx] === 2) return this._value.authority;
      if (this._states[this._stateIdx] === 3) return this._pathIterator.value();
      if (this._states[this._stateIdx] === 4) return this._value.query;
      if (this._states[this._stateIdx] === 5) return this._value.fragment;
      throw Error();
    }
  };
  hM = class {
    constructor() {
      this.height = 1;
    }
    rotateLeft() {
      let e10 = this.right;
      return this.right = e10.left, e10.left = this, this.updateHeight(), e10.updateHeight(), e10;
    }
    rotateRight() {
      let e10 = this.left;
      return this.left = e10.right, e10.right = this, this.updateHeight(), e10.updateHeight(), e10;
    }
    updateHeight() {
      this.height = 1 + Math.max(this.heightLeft, this.heightRight);
    }
    balanceFactor() {
      return this.heightRight - this.heightLeft;
    }
    get heightLeft() {
      var _a3;
      return ((_a3 = this.left) == null ? void 0 : _a3.height) ?? 0;
    }
    get heightRight() {
      var _a3;
      return ((_a3 = this.right) == null ? void 0 : _a3.height) ?? 0;
    }
  };
  gM = class e10 {
    static forUris(t10 = () => false, n10 = () => false) {
      return new e10(new mM(t10, n10));
    }
    static forStrings() {
      return new e10(new dM());
    }
    static forConfigKeys() {
      return new e10(new fM());
    }
    constructor(e11) {
      this._iter = e11;
    }
    clear() {
      this._root = void 0;
    }
    set(e11, t10) {
      let n10 = this._iter.reset(e11), r10;
      this._root || (this._root = new hM(), this._root.segment = n10.value());
      let i10 = [];
      for (r10 = this._root; ; ) {
        let e12 = n10.cmp(r10.segment);
        if (e12 > 0) r10.left || (r10.left = new hM(), r10.left.segment = n10.value()), i10.push([
          -1,
          r10
        ]), r10 = r10.left;
        else if (e12 < 0) r10.right || (r10.right = new hM(), r10.right.segment = n10.value()), i10.push([
          1,
          r10
        ]), r10 = r10.right;
        else if (n10.hasNext()) n10.next(), r10.mid || (r10.mid = new hM(), r10.mid.segment = n10.value()), i10.push([
          0,
          r10
        ]), r10 = r10.mid;
        else break;
      }
      let a10 = r10.value;
      r10.value = t10, r10.key = e11;
      for (let e12 = i10.length - 1; e12 >= 0; e12--) {
        let t11 = i10[e12][1];
        t11.updateHeight();
        let n11 = t11.balanceFactor();
        if (n11 < -1 || n11 > 1) {
          let n12 = i10[e12][0], r11 = i10[e12 + 1][0];
          if (n12 === 1 && r11 === 1) i10[e12][1] = t11.rotateLeft();
          else if (n12 === -1 && r11 === -1) i10[e12][1] = t11.rotateRight();
          else if (n12 === 1 && r11 === -1) t11.right = i10[e12 + 1][1] = i10[e12 + 1][1].rotateRight(), i10[e12][1] = t11.rotateLeft();
          else if (n12 === -1 && r11 === 1) t11.left = i10[e12 + 1][1] = i10[e12 + 1][1].rotateLeft(), i10[e12][1] = t11.rotateRight();
          else throw Error();
          if (e12 > 0) switch (i10[e12 - 1][0]) {
            case -1:
              i10[e12 - 1][1].left = i10[e12][1];
              break;
            case 1:
              i10[e12 - 1][1].right = i10[e12][1];
              break;
            case 0:
              i10[e12 - 1][1].mid = i10[e12][1];
              break;
          }
          else this._root = i10[0][1];
        }
      }
      return a10;
    }
    get(e11) {
      var _a3;
      return (_a3 = this._getNode(e11)) == null ? void 0 : _a3.value;
    }
    _getNode(e11) {
      let t10 = this._iter.reset(e11), n10 = this._root;
      for (; n10; ) {
        let e12 = t10.cmp(n10.segment);
        if (e12 > 0) n10 = n10.left;
        else if (e12 < 0) n10 = n10.right;
        else if (t10.hasNext()) t10.next(), n10 = n10.mid;
        else break;
      }
      return n10;
    }
    has(e11) {
      let t10 = this._getNode(e11);
      return !((t10 == null ? void 0 : t10.value) === void 0 && (t10 == null ? void 0 : t10.mid) === void 0);
    }
    delete(e11) {
      return this._delete(e11, false);
    }
    deleteSuperstr(e11) {
      return this._delete(e11, true);
    }
    _delete(e11, t10) {
      let n10 = this._iter.reset(e11), r10 = [], i10 = this._root;
      for (; i10; ) {
        let e12 = n10.cmp(i10.segment);
        if (e12 > 0) r10.push([
          -1,
          i10
        ]), i10 = i10.left;
        else if (e12 < 0) r10.push([
          1,
          i10
        ]), i10 = i10.right;
        else if (n10.hasNext()) n10.next(), r10.push([
          0,
          i10
        ]), i10 = i10.mid;
        else break;
      }
      if (i10) {
        if (t10 ? (i10.left = void 0, i10.mid = void 0, i10.right = void 0, i10.height = 1) : (i10.key = void 0, i10.value = void 0), !i10.mid && !i10.value) if (i10.left && i10.right) {
          let e12 = this._min(i10.right);
          if (e12.key) {
            let { key: t11, value: n11, segment: r11 } = e12;
            this._delete(e12.key, false), i10.key = t11, i10.value = n11, i10.segment = r11;
          }
        } else {
          let e12 = i10.left ?? i10.right;
          if (r10.length > 0) {
            let [t11, n11] = r10[r10.length - 1];
            switch (t11) {
              case -1:
                n11.left = e12;
                break;
              case 0:
                n11.mid = e12;
                break;
              case 1:
                n11.right = e12;
                break;
            }
          } else this._root = e12;
        }
        for (let e12 = r10.length - 1; e12 >= 0; e12--) {
          let t11 = r10[e12][1];
          t11.updateHeight();
          let n11 = t11.balanceFactor();
          if (n11 > 1 ? (t11.right.balanceFactor() >= 0 || (t11.right = t11.right.rotateRight()), r10[e12][1] = t11.rotateLeft()) : n11 < -1 && (t11.left.balanceFactor() <= 0 || (t11.left = t11.left.rotateLeft()), r10[e12][1] = t11.rotateRight()), e12 > 0) switch (r10[e12 - 1][0]) {
            case -1:
              r10[e12 - 1][1].left = r10[e12][1];
              break;
            case 1:
              r10[e12 - 1][1].right = r10[e12][1];
              break;
            case 0:
              r10[e12 - 1][1].mid = r10[e12][1];
              break;
          }
          else this._root = r10[0][1];
        }
      }
    }
    _min(e11) {
      for (; e11.left; ) e11 = e11.left;
      return e11;
    }
    findSubstr(e11) {
      let t10 = this._iter.reset(e11), n10 = this._root, r10;
      for (; n10; ) {
        let e12 = t10.cmp(n10.segment);
        if (e12 > 0) n10 = n10.left;
        else if (e12 < 0) n10 = n10.right;
        else if (t10.hasNext()) t10.next(), r10 = n10.value || r10, n10 = n10.mid;
        else break;
      }
      return n10 && n10.value || r10;
    }
    findSuperstr(e11) {
      return this._findSuperstrOrElement(e11, false);
    }
    _findSuperstrOrElement(e11, t10) {
      let n10 = this._iter.reset(e11), r10 = this._root;
      for (; r10; ) {
        let e12 = n10.cmp(r10.segment);
        if (e12 > 0) r10 = r10.left;
        else if (e12 < 0) r10 = r10.right;
        else if (n10.hasNext()) n10.next(), r10 = r10.mid;
        else if (r10.mid) return this._entries(r10.mid);
        else return t10 ? r10.value : void 0;
      }
    }
    forEach(e11) {
      for (let [t10, n10] of this) e11(n10, t10);
    }
    *[Symbol.iterator]() {
      yield* this._entries(this._root);
    }
    _entries(e11) {
      let t10 = [];
      return this._dfsEntries(e11, t10), t10[Symbol.iterator]();
    }
    _dfsEntries(e11, t10) {
      e11 && (e11.left && this._dfsEntries(e11.left, t10), e11.value && t10.push([
        e11.key,
        e11.value
      ]), e11.mid && this._dfsEntries(e11.mid, t10), e11.right && this._dfsEntries(e11.right, t10));
    }
  };
  _M = Xf(`contextService`);
  vM = function(e10) {
    let t10 = e10;
    return typeof (t10 == null ? void 0 : t10.id) == `string` && xa.isUri(t10.uri);
  };
  yM = function(e10) {
    let t10 = e10;
    return typeof (t10 == null ? void 0 : t10.id) == `string` && !vM(e10) && !CM(e10);
  };
  const bM = {
    id: `ext-dev`
  }, xM = {
    id: `empty-window`
  };
  SM = function(e10, t10) {
    if (typeof e10 == `string` || e10 === void 0) return typeof e10 == `string` ? {
      id: la(e10)
    } : t10 ? bM : xM;
    let n10 = e10;
    return n10.configuration ? {
      id: n10.id,
      configPath: n10.configuration
    } : n10.folders.length === 1 ? {
      id: n10.id,
      uri: n10.folders[0].uri
    } : {
      id: n10.id
    };
  };
  function CM(e10) {
    let t10 = e10;
    return typeof (t10 == null ? void 0 : t10.id) == `string` && xa.isUri(t10.configPath);
  }
  var wM = class {
    constructor(e10, t10) {
      this.raw = t10, this.uri = e10.uri, this.index = e10.index, this.name = e10.name;
    }
    toJSON() {
      return {
        uri: this.uri,
        name: this.name,
        index: this.index
      };
    }
  };
  let Gte, EM;
  TM = `code-workspace`;
  Gte = [
    {
      name: T(`codeWorkspace`, `Code Workspace`),
      extensions: [
        TM
      ]
    }
  ];
  EM = `4064f6ec-cb38-4ad0-af64-ee6467e63c82`;
  DM = function(e10) {
    return e10.id === EM;
  };
  (function(e10) {
    e10.inspectTokensAction = T(`inspectTokens`, `Developer: Inspect Tokens`);
  })(OM || (OM = {}));
  (function(e10) {
    e10.gotoLineActionLabel = T(`gotoLineActionLabel`, `Go to Line/Column...`);
  })(kM || (kM = {}));
  (function(e10) {
    e10.helpQuickAccessActionLabel = T(`helpQuickAccess`, `Show all Quick Access Providers`);
  })(AM || (AM = {}));
  (function(e10) {
    e10.quickCommandActionLabel = T(`quickCommandActionLabel`, `Command Palette`), e10.quickCommandHelp = T(`quickCommandActionHelp`, `Show And Run Commands`);
  })(jM || (jM = {}));
  (function(e10) {
    e10.quickOutlineActionLabel = T(`quickOutlineActionLabel`, `Go to Symbol...`), e10.quickOutlineByCategoryActionLabel = T(`quickOutlineByCategoryActionLabel`, `Go to Symbol by Category...`);
  })(MM || (MM = {}));
  var NM;
  (function(e10) {
    e10.editorViewAccessibleLabel = T(`editorViewAccessibleLabel`, `Editor content`);
  })(NM || (NM = {}));
  (function(e10) {
    e10.toggleHighContrast = T(`toggleHighContrast`, `Toggle High Contrast Theme`);
  })(PM || (PM = {}));
  var FM;
  (function(e10) {
    e10.bulkEditServiceSummary = T(`bulkEditServiceSummary`, `Made {0} edits in {1} files`);
  })(FM || (FM = {}));
  IM = Xf(`workspaceTrustManagementService`);
  let LM = [], RM = [], zM = [];
  function BM(e10, t10 = false) {
    VM(e10, false, t10);
  }
  function VM(e10, t10, n10) {
    let r10 = HM(e10, t10);
    LM.push(r10), r10.userConfigured ? zM.push(r10) : RM.push(r10), n10 && !r10.userConfigured && LM.forEach((e11) => {
      e11.mime === r10.mime || e11.userConfigured || (r10.extension && e11.extension === r10.extension && console.warn(`Overwriting extension <<${r10.extension}>> to now point to mime <<${r10.mime}>>`), r10.filename && e11.filename === r10.filename && console.warn(`Overwriting filename <<${r10.filename}>> to now point to mime <<${r10.mime}>>`), r10.filepattern && e11.filepattern === r10.filepattern && console.warn(`Overwriting filepattern <<${r10.filepattern}>> to now point to mime <<${r10.mime}>>`), r10.firstline && e11.firstline === r10.firstline && console.warn(`Overwriting firstline <<${r10.firstline}>> to now point to mime <<${r10.mime}>>`));
    });
  }
  function HM(e10, t10) {
    return {
      id: e10.id,
      mime: e10.mime,
      filename: e10.filename,
      extension: e10.extension,
      filepattern: e10.filepattern,
      firstline: e10.firstline,
      userConfigured: t10,
      filenameLowercase: e10.filename ? e10.filename.toLowerCase() : void 0,
      extensionLowercase: e10.extension ? e10.extension.toLowerCase() : void 0,
      filepatternLowercase: e10.filepattern ? IS(e10.filepattern.toLowerCase()) : void 0,
      filepatternOnPath: e10.filepattern ? e10.filepattern.indexOf(ra.sep) >= 0 : false
    };
  }
  function UM() {
    LM = LM.filter((e10) => e10.userConfigured), RM = [];
  }
  function WM(e10, t10) {
    return GM(e10, t10).map((e11) => e11.id);
  }
  function GM(e10, t10) {
    let n10;
    if (e10) switch (e10.scheme) {
      case Su.file:
        n10 = e10.fsPath;
        break;
      case Su.data: {
        let t11 = _k.parseMetaData(e10);
        n10 = t11.get(_k.META_DATA_LABEL);
        break;
      }
      case Su.vscodeNotebookCell:
        n10 = void 0;
        break;
      default:
        n10 = e10.path;
    }
    if (!n10) return [
      {
        id: `unknown`,
        mime: Sg.unknown
      }
    ];
    n10 = n10.toLowerCase();
    let r10 = la(n10), i10 = KM(n10, r10, zM);
    if (i10) return [
      i10,
      {
        id: Jg,
        mime: Sg.text
      }
    ];
    let a10 = KM(n10, r10, RM);
    if (a10) return [
      a10,
      {
        id: Jg,
        mime: Sg.text
      }
    ];
    if (t10) {
      let e11 = qM(t10);
      if (e11) return [
        e11,
        {
          id: Jg,
          mime: Sg.text
        }
      ];
    }
    return [
      {
        id: `unknown`,
        mime: Sg.unknown
      }
    ];
  }
  function KM(e10, t10, n10) {
    var _a3;
    let r10, i10, a10;
    for (let o10 = n10.length - 1; o10 >= 0; o10--) {
      let s10 = n10[o10];
      if (t10 === s10.filenameLowercase) {
        r10 = s10;
        break;
      }
      if (s10.filepattern && (!i10 || s10.filepattern.length > i10.filepattern.length)) {
        let n11 = s10.filepatternOnPath ? e10 : t10;
        ((_a3 = s10.filepatternLowercase) == null ? void 0 : _a3.call(s10, n11)) && (i10 = s10);
      }
      s10.extension && (!a10 || s10.extension.length > a10.extension.length) && t10.endsWith(s10.extensionLowercase) && (a10 = s10);
    }
    if (r10) return r10;
    if (i10) return i10;
    if (a10) return a10;
  }
  function qM(e10) {
    if (oc(e10) && (e10 = e10.substr(1)), e10.length > 0) for (let t10 = LM.length - 1; t10 >= 0; t10--) {
      let n10 = LM[t10];
      if (!n10.firstline) continue;
      let r10 = e10.match(n10.firstline);
      if (r10 && r10.length > 0) return n10;
    }
  }
  const JM = Object.prototype.hasOwnProperty, YM = `vs.editor.nullLanguage`;
  var XM = class {
    constructor() {
      this._languageIdToLanguage = [], this._languageToLanguageId = /* @__PURE__ */ new Map(), this._register(YM, 0), this._register(Jg, 1), this._nextLanguageId = 2;
    }
    _register(e10, t10) {
      this._languageIdToLanguage[t10] = e10, this._languageToLanguageId.set(e10, t10);
    }
    register(e10) {
      if (this._languageToLanguageId.has(e10)) return;
      let t10 = this._nextLanguageId++;
      this._register(e10, t10);
    }
    encodeLanguageId(e10) {
      return this._languageToLanguageId.get(e10) || 0;
    }
    decodeLanguageId(e10) {
      return this._languageIdToLanguage[e10] || YM;
    }
  }, ZM = (_fa = class extends j {
    constructor(t10 = true, n10 = false) {
      super(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, _fa.instanceCount++, this._warnOnOverwrite = n10, this.languageIdCodec = new XM(), this._dynamicLanguages = [], this._languages = {}, this._mimeTypesMap = {}, this._nameMap = {}, this._lowercaseNameMap = {}, t10 && (this._initializeFromRegistry(), this._register(qg.onDidChangeLanguages((e10) => {
        this._initializeFromRegistry();
      })));
    }
    dispose() {
      _fa.instanceCount--, super.dispose();
    }
    _initializeFromRegistry() {
      this._languages = {}, this._mimeTypesMap = {}, this._nameMap = {}, this._lowercaseNameMap = {}, UM();
      let e10 = [].concat(qg.getLanguages(), this._dynamicLanguages);
      this._registerLanguages(e10);
    }
    _registerLanguages(e10) {
      for (let t10 of e10) this._registerLanguage(t10);
      this._mimeTypesMap = {}, this._nameMap = {}, this._lowercaseNameMap = {}, Object.keys(this._languages).forEach((e11) => {
        let t10 = this._languages[e11];
        t10.name && (this._nameMap[t10.name] = t10.identifier), t10.aliases.forEach((e12) => {
          this._lowercaseNameMap[e12.toLowerCase()] = t10.identifier;
        }), t10.mimetypes.forEach((e12) => {
          this._mimeTypesMap[e12] = t10.identifier;
        });
      }), am.as(Dg.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds()), this._onDidChange.fire();
    }
    _registerLanguage(e10) {
      let t10 = e10.id, n10;
      JM.call(this._languages, t10) ? n10 = this._languages[t10] : (this.languageIdCodec.register(t10), n10 = {
        identifier: t10,
        name: null,
        mimetypes: [],
        aliases: [],
        extensions: [],
        filenames: [],
        configurationFiles: [],
        icons: []
      }, this._languages[t10] = n10), this._mergeLanguage(n10, e10);
    }
    _mergeLanguage(e10, t10) {
      let n10 = t10.id, r10 = null;
      if (Array.isArray(t10.mimetypes) && t10.mimetypes.length > 0 && (e10.mimetypes.push(...t10.mimetypes), r10 = t10.mimetypes[0]), r10 || (r10 = `text/x-${n10}`, e10.mimetypes.push(r10)), Array.isArray(t10.extensions)) {
        t10.configuration ? e10.extensions = t10.extensions.concat(e10.extensions) : e10.extensions = e10.extensions.concat(t10.extensions);
        for (let e11 of t10.extensions) BM({
          id: n10,
          mime: r10,
          extension: e11
        }, this._warnOnOverwrite);
      }
      if (Array.isArray(t10.filenames)) for (let i11 of t10.filenames) BM({
        id: n10,
        mime: r10,
        filename: i11
      }, this._warnOnOverwrite), e10.filenames.push(i11);
      if (Array.isArray(t10.filenamePatterns)) for (let e11 of t10.filenamePatterns) BM({
        id: n10,
        mime: r10,
        filepattern: e11
      }, this._warnOnOverwrite);
      if (typeof t10.firstLine == `string` && t10.firstLine.length > 0) {
        let e11 = t10.firstLine;
        e11.charAt(0) !== `^` && (e11 = `^` + e11);
        try {
          let t11 = new RegExp(e11);
          Cs(t11) || BM({
            id: n10,
            mime: r10,
            firstline: t11
          }, this._warnOnOverwrite);
        } catch (n11) {
          console.warn(`[${t10.id}]: Invalid regular expression \`${e11}\`: `, n11);
        }
      }
      e10.aliases.push(n10);
      let i10 = null;
      if (t10.aliases !== void 0 && Array.isArray(t10.aliases) && (i10 = t10.aliases.length === 0 ? [
        null
      ] : t10.aliases), i10 !== null) for (let t11 of i10) {
        if (!t11 || t11.length === 0) continue;
        e10.aliases.push(t11);
      }
      let a10 = i10 !== null && i10.length > 0;
      if (!(a10 && i10[0] === null)) {
        let t11 = (a10 ? i10[0] : null) || n10;
        (a10 || !e10.name) && (e10.name = t11);
      }
      t10.configuration && e10.configurationFiles.push(t10.configuration), t10.icon && e10.icons.push(t10.icon);
    }
    isRegisteredLanguageId(e10) {
      return e10 ? JM.call(this._languages, e10) : false;
    }
    getRegisteredLanguageIds() {
      return Object.keys(this._languages);
    }
    getLanguageIdByLanguageName(e10) {
      let t10 = e10.toLowerCase();
      return JM.call(this._lowercaseNameMap, t10) ? this._lowercaseNameMap[t10] : null;
    }
    getLanguageIdByMimeType(e10) {
      return e10 && JM.call(this._mimeTypesMap, e10) ? this._mimeTypesMap[e10] : null;
    }
    guessLanguageIdByFilepathOrFirstLine(e10, t10) {
      return !e10 && !t10 ? [] : WM(e10, t10);
    }
  }, _fa.instanceCount = 0, _fa);
  const QM = (e10, t10) => e10 === t10;
  $M = function(e10 = QM) {
    return (t10, n10) => l(t10, n10, e10);
  };
  eN = function() {
    return (e10, t10) => e10.equals(t10);
  };
  tN = function(e10, t10, n10) {
    if (n10 !== void 0) {
      let r10 = e10;
      return r10 == null || t10 == null ? t10 === r10 : n10(r10, t10);
    } else {
      let t11 = e10;
      return (e11, n11) => e11 == null || n11 == null ? n11 === e11 : t11(e11, n11);
    }
  };
  nN = function(e10, t10) {
    if (e10 === t10) return true;
    if (Array.isArray(e10) && Array.isArray(t10)) {
      if (e10.length !== t10.length) return false;
      for (let n10 = 0; n10 < e10.length; n10++) if (!nN(e10[n10], t10[n10])) return false;
      return true;
    }
    if (e10 && typeof e10 == `object` && t10 && typeof t10 == `object` && Object.getPrototypeOf(e10) === Object.prototype && Object.getPrototypeOf(t10) === Object.prototype) {
      let n10 = e10, r10 = t10, i10 = Object.keys(n10), a10 = Object.keys(r10), o10 = new Set(a10);
      if (i10.length !== a10.length) return false;
      for (let e11 of i10) if (!o10.has(e11) || !nN(n10[e11], r10[e11])) return false;
      return true;
    }
    return false;
  };
  var rN = class {
    constructor(e10, t10, n10) {
      this.owner = e10, this.debugNameSource = t10, this.referenceFn = n10;
    }
    getDebugName(e10) {
      return oN(e10, this);
    }
  };
  const iN = /* @__PURE__ */ new Map(), aN = /* @__PURE__ */ new WeakMap();
  function oN(e10, t10) {
    let n10 = aN.get(e10);
    if (n10) return n10;
    let r10 = sN(e10, t10);
    if (r10) {
      let t11 = iN.get(r10) ?? 0;
      t11++, iN.set(r10, t11);
      let n11 = t11 === 1 ? r10 : `${r10}#${t11}`;
      return aN.set(e10, n11), n11;
    }
  }
  function sN(e10, t10) {
    let n10 = aN.get(e10);
    if (n10) return n10;
    let r10 = t10.owner ? dN(t10.owner) + `.` : ``, i10, a10 = t10.debugNameSource;
    if (a10 !== void 0) if (typeof a10 == `function`) {
      if (i10 = a10(), i10 !== void 0) return r10 + i10;
    } else return r10 + a10;
    let o10 = t10.referenceFn;
    if (o10 !== void 0 && (i10 = pN(o10), i10 !== void 0)) return r10 + i10;
    if (t10.owner !== void 0) {
      let n11 = cN(t10.owner, e10);
      if (n11 !== void 0) return r10 + n11;
    }
  }
  function cN(e10, t10) {
    for (let n10 in e10) if (e10[n10] === t10) return n10;
  }
  const lN = /* @__PURE__ */ new Map(), uN = /* @__PURE__ */ new WeakMap();
  function dN(e10) {
    let t10 = uN.get(e10);
    if (t10) return t10;
    let n10 = fN(e10), r10 = lN.get(n10) ?? 0;
    r10++, lN.set(n10, r10);
    let i10 = r10 === 1 ? n10 : `${n10}#${r10}`;
    return uN.set(e10, i10), i10;
  }
  function fN(e10) {
    let t10 = e10.constructor;
    return t10 ? t10.name : `Object`;
  }
  function pN(e10) {
    let t10 = e10.toString(), n10 = /\/\*\*\s*@description\s*([^*]*)\*\//, r10 = n10.exec(t10), i10 = r10 ? r10[1] : void 0;
    return i10 == null ? void 0 : i10.trim();
  }
  let mN;
  function hN(e10) {
    mN = e10;
  }
  function gN() {
    return mN;
  }
  var _N = class {
    constructor() {
      this.indentation = 0, this.changedObservablesSets = /* @__PURE__ */ new WeakMap();
    }
    textToConsoleArgs(e10) {
      return vN([
        yN(TN(`|  `, this.indentation)),
        e10
      ]);
    }
    formatInfo(e10) {
      return e10.hadValue ? e10.didChange ? [
        yN(` `),
        xN(SN(e10.oldValue, 70), {
          color: `red`,
          strikeThrough: true
        }),
        yN(` `),
        xN(SN(e10.newValue, 60), {
          color: `green`
        })
      ] : [
        yN(` (unchanged)`)
      ] : [
        yN(` `),
        xN(SN(e10.newValue, 60), {
          color: `green`
        }),
        yN(` (initial)`)
      ];
    }
    handleObservableChanged(e10, t10) {
      console.log(...this.textToConsoleArgs([
        bN(`observable value changed`),
        xN(e10.debugName, {
          color: `BlueViolet`
        }),
        ...this.formatInfo(t10)
      ]));
    }
    formatChanges(e10) {
      if (e10.size !== 0) return xN(` (changed deps: ` + [
        ...e10
      ].map((e11) => e11.debugName).join(`, `) + `)`, {
        color: `gray`
      });
    }
    handleDerivedCreated(e10) {
      let t10 = e10.handleChange;
      this.changedObservablesSets.set(e10, /* @__PURE__ */ new Set()), e10.handleChange = (n10, r10) => (this.changedObservablesSets.get(e10).add(n10), t10.apply(e10, [
        n10,
        r10
      ]));
    }
    handleDerivedRecomputed(e10, t10) {
      let n10 = this.changedObservablesSets.get(e10);
      console.log(...this.textToConsoleArgs([
        bN(`derived recomputed`),
        xN(e10.debugName, {
          color: `BlueViolet`
        }),
        ...this.formatInfo(t10),
        this.formatChanges(n10),
        {
          data: [
            {
              fn: e10._debugNameData.referenceFn ?? e10._computeFn
            }
          ]
        }
      ])), n10.clear();
    }
    handleFromEventObservableTriggered(e10, t10) {
      console.log(...this.textToConsoleArgs([
        bN(`observable from event triggered`),
        xN(e10.debugName, {
          color: `BlueViolet`
        }),
        ...this.formatInfo(t10),
        {
          data: [
            {
              fn: e10._getValue
            }
          ]
        }
      ]));
    }
    handleAutorunCreated(e10) {
      let t10 = e10.handleChange;
      this.changedObservablesSets.set(e10, /* @__PURE__ */ new Set()), e10.handleChange = (n10, r10) => (this.changedObservablesSets.get(e10).add(n10), t10.apply(e10, [
        n10,
        r10
      ]));
    }
    handleAutorunTriggered(e10) {
      let t10 = this.changedObservablesSets.get(e10);
      console.log(...this.textToConsoleArgs([
        bN(`autorun`),
        xN(e10.debugName, {
          color: `BlueViolet`
        }),
        this.formatChanges(t10),
        {
          data: [
            {
              fn: e10._debugNameData.referenceFn ?? e10._runFn
            }
          ]
        }
      ])), t10.clear(), this.indentation++;
    }
    handleAutorunFinished(e10) {
      this.indentation--;
    }
    handleBeginTransaction(e10) {
      let t10 = e10.getDebugName();
      t10 === void 0 && (t10 = ``), console.log(...this.textToConsoleArgs([
        bN(`transaction`),
        xN(t10, {
          color: `BlueViolet`
        }),
        {
          data: [
            {
              fn: e10._fn
            }
          ]
        }
      ])), this.indentation++;
    }
    handleEndTransaction() {
      this.indentation--;
    }
  };
  function vN(e10) {
    let t10 = [], n10 = [], r10 = ``;
    function i10(e11) {
      if (`length` in e11) for (let t11 of e11) t11 && i10(t11);
      else `text` in e11 ? (r10 += `%c${e11.text}`, t10.push(e11.style), e11.data && n10.push(...e11.data)) : `data` in e11 && n10.push(...e11.data);
    }
    i10(e10);
    let a10 = [
      r10,
      ...t10
    ];
    return a10.push(...n10), a10;
  }
  function yN(e10) {
    return xN(e10, {
      color: `black`
    });
  }
  function bN(e10) {
    return xN(EN(`${e10}: `, 10), {
      color: `black`,
      bold: true
    });
  }
  function xN(e10, t10 = {
    color: `black`
  }) {
    function n10(e11) {
      return Object.entries(e11).reduce((e12, [t11, n11]) => `${e12}${t11}:${n11};`, ``);
    }
    let r10 = {
      color: t10.color
    };
    return t10.strikeThrough && (r10[`text-decoration`] = `line-through`), t10.bold && (r10[`font-weight`] = `bold`), {
      text: e10,
      style: n10(r10)
    };
  }
  function SN(e10, t10) {
    switch (typeof e10) {
      case `number`:
        return `` + e10;
      case `string`:
        return e10.length + 2 <= t10 ? `"${e10}"` : `"${e10.substr(0, t10 - 7)}"+...`;
      case `boolean`:
        return e10 ? `true` : `false`;
      case `undefined`:
        return `undefined`;
      case `object`:
        return e10 === null ? `null` : Array.isArray(e10) ? CN(e10, t10) : wN(e10, t10);
      case `symbol`:
        return e10.toString();
      case `function`:
        return `[[Function${e10.name ? ` ` + e10.name : ``}]]`;
      default:
        return `` + e10;
    }
  }
  function CN(e10, t10) {
    let n10 = `[ `, r10 = true;
    for (let i10 of e10) {
      if (r10 || (n10 += `, `), n10.length - 5 > t10) {
        n10 += `...`;
        break;
      }
      r10 = false, n10 += `${SN(i10, t10 - n10.length)}`;
    }
    return n10 += ` ]`, n10;
  }
  function wN(e10, t10) {
    let n10 = `{ `, r10 = true;
    for (let [i10, a10] of Object.entries(e10)) {
      if (r10 || (n10 += `, `), n10.length - 5 > t10) {
        n10 += `...`;
        break;
      }
      r10 = false, n10 += `${i10}: ${SN(a10, t10 - n10.length)}`;
    }
    return n10 += ` }`, n10;
  }
  function TN(e10, t10) {
    let n10 = ``;
    for (let r10 = 1; r10 <= t10; r10++) n10 += e10;
    return n10;
  }
  function EN(e10, t10) {
    for (; e10.length < t10; ) e10 += ` `;
    return e10;
  }
  let DN;
  function ON(e10) {
    DN = e10;
  }
  let kN;
  function AN(e10) {
    kN = e10;
  }
  let jN;
  function MN(e10) {
    jN = e10;
  }
  var NN = class {
    get TChange() {
      return null;
    }
    reportChanges() {
      this.get();
    }
    read(e10) {
      return e10 ? e10.readObservable(this) : this.get();
    }
    map(e10, t10) {
      let n10 = t10 === void 0 ? void 0 : e10, r10 = t10 === void 0 ? e10 : t10;
      return jN({
        owner: n10,
        debugName: () => {
          let e11 = pN(r10);
          if (e11 !== void 0) return e11;
          let t11 = /^\s*\(?\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\s*\)?\s*=>\s*\1(?:\??)\.([a-zA-Z_$][a-zA-Z_$0-9]*)\s*$/, i10 = t11.exec(r10.toString());
          if (i10) return `${this.debugName}.${i10[2]}`;
          if (!n10) return `${this.debugName} (mapped)`;
        },
        debugReferenceFn: r10
      }, (e11) => r10(this.read(e11), e11));
    }
    flatten() {
      return jN({
        owner: void 0,
        debugName: () => `${this.debugName} (flattened)`
      }, (e10) => this.read(e10).read(e10));
    }
    recomputeInitiallyAndOnChange(e10, t10) {
      return e10.add(DN(this, t10)), this;
    }
    keepObserved(e10) {
      return e10.add(kN(this)), this;
    }
  }, PN = class extends NN {
    constructor() {
      super(...arguments), this.observers = /* @__PURE__ */ new Set();
    }
    addObserver(e10) {
      let t10 = this.observers.size;
      this.observers.add(e10), t10 === 0 && this.onFirstObserverAdded();
    }
    removeObserver(e10) {
      let t10 = this.observers.delete(e10);
      t10 && this.observers.size === 0 && this.onLastObserverRemoved();
    }
    onFirstObserverAdded() {
    }
    onLastObserverRemoved() {
    }
  };
  FN = function(e10, t10) {
    let n10 = new BN(e10, t10);
    try {
      e10(n10);
    } finally {
      n10.finish();
    }
  };
  let IN;
  function LN(e10) {
    if (IN) e10(IN);
    else {
      let t10 = new BN(e10, void 0);
      IN = t10;
      try {
        e10(t10);
      } finally {
        t10.finish(), IN = void 0;
      }
    }
  }
  RN = async function(e10, t10) {
    let n10 = new BN(e10, t10);
    try {
      await e10(n10);
    } finally {
      n10.finish();
    }
  };
  zN = function(e10, t10, n10) {
    e10 ? t10(e10) : FN(t10, n10);
  };
  var BN = class {
    constructor(e10, t10) {
      var _a3;
      this._fn = e10, this._getDebugName = t10, this.updatingObservers = [], (_a3 = gN()) == null ? void 0 : _a3.handleBeginTransaction(this);
    }
    getDebugName() {
      return this._getDebugName ? this._getDebugName() : pN(this._fn);
    }
    updateObserver(e10, t10) {
      this.updatingObservers.push({
        observer: e10,
        observable: t10
      }), e10.beginUpdate(t10);
    }
    finish() {
      var _a3;
      let e10 = this.updatingObservers;
      for (let t10 = 0; t10 < e10.length; t10++) {
        let { observer: n10, observable: r10 } = e10[t10];
        n10.endUpdate(r10);
      }
      this.updatingObservers = null, (_a3 = gN()) == null ? void 0 : _a3.handleEndTransaction();
    }
  };
  VN = function(e10, t10) {
    let n10;
    return n10 = typeof e10 == `string` ? new rN(void 0, e10, void 0) : new rN(e10, void 0, void 0), new HN(n10, t10, QM);
  };
  var HN = class extends PN {
    get debugName() {
      return this._debugNameData.getDebugName(this) ?? `ObservableValue`;
    }
    constructor(e10, t10, n10) {
      super(), this._debugNameData = e10, this._equalityComparator = n10, this._value = t10;
    }
    get() {
      return this._value;
    }
    set(e10, t10, n10) {
      var _a3;
      if (n10 === void 0 && this._equalityComparator(this._value, e10)) return;
      let r10;
      t10 || (t10 = r10 = new BN(() => {
      }, () => `Setting ${this.debugName}`));
      try {
        let r11 = this._value;
        this._setValue(e10), (_a3 = gN()) == null ? void 0 : _a3.handleObservableChanged(this, {
          oldValue: r11,
          newValue: e10,
          change: n10,
          didChange: true,
          hadValue: true
        });
        for (let e11 of this.observers) t10.updateObserver(e11, this), e11.handleChange(this, n10);
      } finally {
        r10 && r10.finish();
      }
    }
    toString() {
      return `${this.debugName}: ${this._value}`;
    }
    _setValue(e10) {
      this._value = e10;
    }
  };
  UN = function(e10, t10) {
    let n10;
    return n10 = typeof e10 == `string` ? new rN(void 0, e10, void 0) : new rN(e10, void 0, void 0), new WN(n10, t10, QM);
  };
  var WN = class extends HN {
    _setValue(e10) {
      this._value !== e10 && (this._value && this._value.dispose(), this._value = e10);
    }
    dispose() {
      var _a3;
      (_a3 = this._value) == null ? void 0 : _a3.dispose();
    }
  };
  Y = function(e10, t10) {
    return t10 === void 0 ? new XN(new rN(void 0, void 0, e10), e10, void 0, void 0, void 0, QM) : new XN(new rN(e10, void 0, t10), t10, void 0, void 0, void 0, QM);
  };
  GN = function(e10, t10, n10) {
    return new ZN(new rN(e10, void 0, t10), t10, void 0, void 0, void 0, QM, n10);
  };
  KN = function(e10, t10) {
    return new XN(new rN(e10.owner, e10.debugName, e10.debugReferenceFn), t10, void 0, void 0, e10.onLastObserverRemoved, e10.equalsFn ?? QM);
  };
  MN(KN);
  qN = function(e10, t10) {
    return new XN(new rN(e10.owner, e10.debugName, void 0), t10, e10.createEmptyChangeSummary, e10.handleChange, void 0, e10.equalityComparer ?? QM);
  };
  JN = function(e10, t10) {
    let n10, r10;
    t10 === void 0 ? (n10 = e10, r10 = void 0) : (r10 = e10, n10 = t10);
    let i10 = new A();
    return new XN(new rN(r10, void 0, n10), (e11) => (i10.clear(), n10(e11, i10)), void 0, void 0, () => i10.dispose(), QM);
  };
  YN = function(e10, t10) {
    let n10, r10;
    t10 === void 0 ? (n10 = e10, r10 = void 0) : (r10 = e10, n10 = t10);
    let i10;
    return new XN(new rN(r10, void 0, n10), (e11) => {
      i10 ? i10.clear() : i10 = new A();
      let t11 = n10(e11);
      return t11 && i10.add(t11), t11;
    }, void 0, void 0, () => {
      i10 && (i10.dispose(), i10 = void 0);
    }, QM);
  };
  var XN = class extends PN {
    get debugName() {
      return this._debugNameData.getDebugName(this) ?? `(anonymous)`;
    }
    constructor(e10, t10, n10, r10, i10 = void 0, a10) {
      var _a3, _b3;
      super(), this._debugNameData = e10, this._computeFn = t10, this.createChangeSummary = n10, this._handleChange = r10, this._handleLastObserverRemoved = i10, this._equalityComparator = a10, this.state = 0, this.value = void 0, this.updateCount = 0, this.dependencies = /* @__PURE__ */ new Set(), this.dependenciesToBeRemoved = /* @__PURE__ */ new Set(), this.changeSummary = void 0, this.changeSummary = (_a3 = this.createChangeSummary) == null ? void 0 : _a3.call(this), (_b3 = gN()) == null ? void 0 : _b3.handleDerivedCreated(this);
    }
    onLastObserverRemoved() {
      var _a3;
      this.state = 0, this.value = void 0;
      for (let e10 of this.dependencies) e10.removeObserver(this);
      this.dependencies.clear(), (_a3 = this._handleLastObserverRemoved) == null ? void 0 : _a3.call(this);
    }
    get() {
      var _a3;
      if (this.observers.size === 0) {
        let e10 = this._computeFn(this, (_a3 = this.createChangeSummary) == null ? void 0 : _a3.call(this));
        return this.onLastObserverRemoved(), e10;
      } else {
        do {
          if (this.state === 1) {
            for (let e10 of this.dependencies) if (e10.reportChanges(), this.state === 2) break;
          }
          this.state === 1 && (this.state = 3), this._recomputeIfNeeded();
        } while (this.state !== 3);
        return this.value;
      }
    }
    _recomputeIfNeeded() {
      var _a3, _b3;
      if (this.state === 3) return;
      let e10 = this.dependenciesToBeRemoved;
      this.dependenciesToBeRemoved = this.dependencies, this.dependencies = e10;
      let t10 = this.state !== 0, n10 = this.value;
      this.state = 3;
      let r10 = this.changeSummary;
      this.changeSummary = (_a3 = this.createChangeSummary) == null ? void 0 : _a3.call(this);
      try {
        this.value = this._computeFn(this, r10);
      } finally {
        for (let e11 of this.dependenciesToBeRemoved) e11.removeObserver(this);
        this.dependenciesToBeRemoved.clear();
      }
      let i10 = t10 && !this._equalityComparator(n10, this.value);
      if ((_b3 = gN()) == null ? void 0 : _b3.handleDerivedRecomputed(this, {
        oldValue: n10,
        newValue: this.value,
        change: void 0,
        didChange: i10,
        hadValue: t10
      }), i10) for (let e11 of this.observers) e11.handleChange(this, void 0);
    }
    toString() {
      return `LazyDerived<${this.debugName}>`;
    }
    beginUpdate(e10) {
      this.updateCount++;
      let t10 = this.updateCount === 1;
      if (this.state === 3 && (this.state = 1, !t10)) for (let e11 of this.observers) e11.handlePossibleChange(this);
      if (t10) for (let e11 of this.observers) e11.beginUpdate(this);
    }
    endUpdate(e10) {
      if (this.updateCount--, this.updateCount === 0) {
        let e11 = [
          ...this.observers
        ];
        for (let t10 of e11) t10.endUpdate(this);
      }
      nm(() => this.updateCount >= 0);
    }
    handlePossibleChange(e10) {
      if (this.state === 3 && this.dependencies.has(e10) && !this.dependenciesToBeRemoved.has(e10)) {
        this.state = 1;
        for (let e11 of this.observers) e11.handlePossibleChange(this);
      }
    }
    handleChange(e10, t10) {
      if (this.dependencies.has(e10) && !this.dependenciesToBeRemoved.has(e10)) {
        let n10 = this._handleChange ? this._handleChange({
          changedObservable: e10,
          change: t10,
          didChange: (t11) => t11 === e10
        }, this.changeSummary) : true, r10 = this.state === 3;
        if (n10 && (this.state === 1 || r10) && (this.state = 2, r10)) for (let e11 of this.observers) e11.handlePossibleChange(this);
      }
    }
    readObservable(e10) {
      e10.addObserver(this);
      let t10 = e10.get();
      return this.dependencies.add(e10), this.dependenciesToBeRemoved.delete(e10), t10;
    }
    addObserver(e10) {
      let t10 = !this.observers.has(e10) && this.updateCount > 0;
      super.addObserver(e10), t10 && e10.beginUpdate(this);
    }
    removeObserver(e10) {
      let t10 = this.observers.has(e10) && this.updateCount > 0;
      super.removeObserver(e10), t10 && e10.endUpdate(this);
    }
  }, ZN = class extends XN {
    constructor(e10, t10, n10, r10, i10 = void 0, a10, o10) {
      super(e10, t10, n10, r10, i10, a10), this.set = o10;
    }
  };
  QN = function(e10) {
    return new rP(new rN(void 0, void 0, e10), e10, void 0, void 0);
  };
  $N = function(e10, t10) {
    return new rP(new rN(e10.owner, e10.debugName, e10.debugReferenceFn ?? t10), t10, void 0, void 0);
  };
  function eP(e10, t10) {
    return new rP(new rN(e10.owner, e10.debugName, e10.debugReferenceFn ?? t10), t10, e10.createEmptyChangeSummary, e10.handleChange);
  }
  function tP(e10, t10) {
    let n10 = new A(), r10 = eP({
      owner: e10.owner,
      debugName: e10.debugName,
      debugReferenceFn: e10.debugReferenceFn ?? t10,
      createEmptyChangeSummary: e10.createEmptyChangeSummary,
      handleChange: e10.handleChange
    }, (e11, r11) => {
      n10.clear(), t10(e11, r11, n10);
    });
    return k(() => {
      r10.dispose(), n10.dispose();
    });
  }
  nP = function(e10) {
    let t10 = new A(), n10 = $N({
      owner: void 0,
      debugName: void 0,
      debugReferenceFn: e10
    }, (n11) => {
      t10.clear(), e10(n11, t10);
    });
    return k(() => {
      n10.dispose(), t10.dispose();
    });
  };
  var rP = class {
    get debugName() {
      return this._debugNameData.getDebugName(this) ?? `(anonymous)`;
    }
    constructor(e10, t10, n10, r10) {
      var _a3, _b3;
      this._debugNameData = e10, this._runFn = t10, this.createChangeSummary = n10, this._handleChange = r10, this.state = 2, this.updateCount = 0, this.disposed = false, this.dependencies = /* @__PURE__ */ new Set(), this.dependenciesToBeRemoved = /* @__PURE__ */ new Set(), this.changeSummary = (_a3 = this.createChangeSummary) == null ? void 0 : _a3.call(this), (_b3 = gN()) == null ? void 0 : _b3.handleAutorunCreated(this), this._runIfNeeded(), Mr(this);
    }
    dispose() {
      this.disposed = true;
      for (let e10 of this.dependencies) e10.removeObserver(this);
      this.dependencies.clear(), Nr(this);
    }
    _runIfNeeded() {
      var _a3, _b3, _c3;
      if (this.state === 3) return;
      let e10 = this.dependenciesToBeRemoved;
      this.dependenciesToBeRemoved = this.dependencies, this.dependencies = e10, this.state = 3;
      let t10 = this.disposed;
      try {
        if (!t10) {
          (_a3 = gN()) == null ? void 0 : _a3.handleAutorunTriggered(this);
          let e11 = this.changeSummary;
          this.changeSummary = (_b3 = this.createChangeSummary) == null ? void 0 : _b3.call(this), this._runFn(this, e11);
        }
      } finally {
        t10 || ((_c3 = gN()) == null ? void 0 : _c3.handleAutorunFinished(this));
        for (let e11 of this.dependenciesToBeRemoved) e11.removeObserver(this);
        this.dependenciesToBeRemoved.clear();
      }
    }
    toString() {
      return `Autorun<${this.debugName}>`;
    }
    beginUpdate() {
      this.state === 3 && (this.state = 1), this.updateCount++;
    }
    endUpdate() {
      if (this.updateCount === 1) do {
        if (this.state === 1) {
          this.state = 3;
          for (let e10 of this.dependencies) if (e10.reportChanges(), this.state === 2) break;
        }
        this._runIfNeeded();
      } while (this.state !== 3);
      this.updateCount--, nm(() => this.updateCount >= 0);
    }
    handlePossibleChange(e10) {
      this.state === 3 && this.dependencies.has(e10) && !this.dependenciesToBeRemoved.has(e10) && (this.state = 1);
    }
    handleChange(e10, t10) {
      if (this.dependencies.has(e10) && !this.dependenciesToBeRemoved.has(e10)) {
        let n10 = this._handleChange ? this._handleChange({
          changedObservable: e10,
          change: t10,
          didChange: (t11) => t11 === e10
        }, this.changeSummary) : true;
        n10 && (this.state = 2);
      }
    }
    readObservable(e10) {
      if (this.disposed) return e10.get();
      e10.addObserver(this);
      let t10 = e10.get();
      return this.dependencies.add(e10), this.dependenciesToBeRemoved.delete(e10), t10;
    }
  };
  (function(e10) {
    e10.Observer = rP;
  })(QN || (QN = {}));
  iP = function(e10) {
    return new aP(e10);
  };
  var aP = class extends NN {
    constructor(e10) {
      super(), this.value = e10;
    }
    get debugName() {
      return this.toString();
    }
    get() {
      return this.value;
    }
    addObserver(e10) {
    }
    removeObserver(e10) {
    }
    toString() {
      return `Const: ${this.value}`;
    }
  };
  oP = function(...e10) {
    let t10, n10, r10;
    return e10.length === 3 ? [t10, n10, r10] = e10 : [n10, r10] = e10, new cP(new rN(t10, void 0, r10), n10, r10, () => cP.globalTransaction, QM);
  };
  function sP(e10, t10, n10) {
    return new cP(new rN(e10.owner, e10.debugName, e10.debugReferenceFn ?? n10), t10, n10, () => cP.globalTransaction, e10.equalsFn ?? QM);
  }
  var cP = class extends PN {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._debugNameData = e10, this.event = t10, this._getValue = n10, this._getTransaction = r10, this._equalityComparator = i10, this.hasValue = false, this.handleEvent = (e11) => {
        var _a3;
        let t11 = this._getValue(e11), n11 = this.value, r11 = !this.hasValue || !this._equalityComparator(n11, t11), i11 = false;
        r11 && (this.value = t11, this.hasValue && (i11 = true, zN(this._getTransaction(), (e12) => {
          var _a4;
          (_a4 = gN()) == null ? void 0 : _a4.handleFromEventObservableTriggered(this, {
            oldValue: n11,
            newValue: t11,
            change: void 0,
            didChange: r11,
            hadValue: this.hasValue
          });
          for (let t12 of this.observers) e12.updateObserver(t12, this), t12.handleChange(this, void 0);
        }, () => {
          let e12 = this.getDebugName();
          return `Event fired` + (e12 ? `: ${e12}` : ``);
        })), this.hasValue = true), i11 || ((_a3 = gN()) == null ? void 0 : _a3.handleFromEventObservableTriggered(this, {
          oldValue: n11,
          newValue: t11,
          change: void 0,
          didChange: r11,
          hadValue: this.hasValue
        }));
      };
    }
    getDebugName() {
      return this._debugNameData.getDebugName(this);
    }
    get debugName() {
      let e10 = this.getDebugName();
      return `From Event` + (e10 ? `: ${e10}` : ``);
    }
    onFirstObserverAdded() {
      this.subscription = this.event(this.handleEvent);
    }
    onLastObserverRemoved() {
      this.subscription.dispose(), this.subscription = void 0, this.hasValue = false, this.value = void 0;
    }
    get() {
      if (this.subscription) return this.hasValue || this.handleEvent(void 0), this.value;
      {
        let e10 = this._getValue(void 0);
        return e10;
      }
    }
  };
  (function(e10) {
    e10.Observer = cP;
    function t10(e11, t11) {
      let n10 = false;
      cP.globalTransaction === void 0 && (cP.globalTransaction = e11, n10 = true);
      try {
        t11();
      } finally {
        n10 && (cP.globalTransaction = void 0);
      }
    }
    e10.batchEventsGlobally = t10;
  })(oP || (oP = {}));
  lP = function(e10, t10) {
    return new uP(e10, t10);
  };
  var uP = class extends PN {
    constructor(e10, t10) {
      super(), this.debugName = e10, this.event = t10, this.handleEvent = () => {
        FN((e11) => {
          for (let t11 of this.observers) e11.updateObserver(t11, this), t11.handleChange(this, void 0);
        }, () => this.debugName);
      };
    }
    onFirstObserverAdded() {
      this.subscription = this.event(this.handleEvent);
    }
    onLastObserverRemoved() {
      this.subscription.dispose(), this.subscription = void 0;
    }
    get() {
    }
  };
  dP = function(e10) {
    return typeof e10 == `string` ? new fP(e10) : new fP(void 0, e10);
  };
  var fP = class extends PN {
    get debugName() {
      return new rN(this._owner, this._debugName, void 0).getDebugName(this) ?? `Observable Signal`;
    }
    toString() {
      return this.debugName;
    }
    constructor(e10, t10) {
      super(), this._debugName = e10, this._owner = t10;
    }
    trigger(e10, t10) {
      if (!e10) {
        FN((e11) => {
          this.trigger(e11, t10);
        }, () => `Trigger signal ${this.debugName}`);
        return;
      }
      for (let n10 of this.observers) e10.updateObserver(n10, this), n10.handleChange(this, t10);
    }
    get() {
    }
  };
  function pP(e10) {
    let t10 = new hP(false, void 0);
    return e10.addObserver(t10), k(() => {
      e10.removeObserver(t10);
    });
  }
  AN(pP);
  mP = function(e10, t10) {
    let n10 = new hP(true, t10);
    return e10.addObserver(n10), t10 ? t10(e10.get()) : e10.reportChanges(), k(() => {
      e10.removeObserver(n10);
    });
  };
  ON(mP);
  var hP = class {
    constructor(e10, t10) {
      this._forceRecompute = e10, this._handleValue = t10, this._counter = 0;
    }
    beginUpdate(e10) {
      this._counter++;
    }
    endUpdate(e10) {
      this._counter--, this._counter === 0 && this._forceRecompute && (this._handleValue ? this._handleValue(e10.get()) : e10.reportChanges());
    }
    handlePossibleChange(e10) {
    }
    handleChange(e10, t10) {
    }
  };
  gP = function(e10, t10) {
    let n10, r10 = KN({
      owner: e10,
      debugReferenceFn: t10
    }, (e11) => (n10 = t10(e11, n10), n10));
    return r10;
  };
  _P = function(e10, t10, n10, r10) {
    let i10 = new vP(n10, r10), a10 = KN({
      debugReferenceFn: n10,
      owner: e10,
      onLastObserverRemoved: () => {
        i10.dispose(), i10 = new vP(n10);
      }
    }, (e11) => (i10.setItems(t10.read(e11)), i10.getItems()));
    return a10;
  };
  var vP = class {
    constructor(e10, t10) {
      this._map = e10, this._keySelector = t10, this._cache = /* @__PURE__ */ new Map(), this._items = [];
    }
    dispose() {
      this._cache.forEach((e10) => e10.store.dispose()), this._cache.clear();
    }
    setItems(e10) {
      let t10 = [], n10 = new Set(this._cache.keys());
      for (let r10 of e10) {
        let e11 = this._keySelector ? this._keySelector(r10) : r10, i10 = this._cache.get(e11);
        if (i10) n10.delete(e11);
        else {
          let t11 = new A(), n11 = this._map(r10, t11);
          i10 = {
            out: n11,
            store: t11
          }, this._cache.set(e11, i10);
        }
        t10.push(i10.out);
      }
      for (let e11 of n10) {
        let t11 = this._cache.get(e11);
        t11.store.dispose(), this._cache.delete(e11);
      }
      this._items = t10;
    }
    getItems() {
      return this._items;
    }
  };
  function yP(e10, t10) {
    return gP(e10, (e11, n10) => n10 ?? t10(e11));
  }
  let xP;
  bP = class e10 {
    static fromFn(t10) {
      return new e10(t10());
    }
    constructor(e11) {
      this._value = VN(this, void 0), this.promiseResult = this._value, this.promise = e11.then((e12) => (FN((t10) => {
        this._value.set(new xP(e12, void 0), t10);
      }), e12), (e12) => {
        throw FN((t10) => {
          this._value.set(new xP(void 0, e12), t10);
        }), e12;
      });
    }
  };
  xP = class {
    constructor(e10, t10) {
      this.data = e10, this.error = t10;
    }
  };
  SP = function(e10, t10, n10, r10) {
    return t10 || (t10 = (e11) => e11 != null), new Promise((i10, a10) => {
      let o10 = true, s10 = false, c10 = e10.map((e11) => ({
        isFinished: t10(e11),
        error: n10 ? n10(e11) : false,
        state: e11
      })), l10 = QN((e11) => {
        let { isFinished: t11, error: n11, state: r11 } = c10.read(e11);
        (t11 || n11) && (o10 ? s10 = true : l10.dispose(), n11 ? a10(n11 === true ? r11 : n11) : i10(r11));
      });
      if (r10) {
        let e11 = r10.onCancellationRequested(() => {
          l10.dispose(), e11.dispose(), a10(new xr());
        });
        if (r10.isCancellationRequested) {
          l10.dispose(), e11.dispose(), a10(new xr());
          return;
        }
      }
      o10 = false, s10 && l10.dispose();
    });
  };
  var CP = class extends PN {
    get debugName() {
      return this._debugNameData.getDebugName(this) ?? `LazyObservableValue`;
    }
    constructor(e10, t10, n10) {
      super(), this._debugNameData = e10, this._equalityComparator = n10, this._isUpToDate = true, this._deltas = [], this._updateCounter = 0, this._value = t10;
    }
    get() {
      return this._update(), this._value;
    }
    _update() {
      if (!this._isUpToDate) if (this._isUpToDate = true, this._deltas.length > 0) {
        for (let e10 of this.observers) for (let t10 of this._deltas) e10.handleChange(this, t10);
        this._deltas.length = 0;
      } else for (let e10 of this.observers) e10.handleChange(this, void 0);
    }
    _beginUpdate() {
      if (this._updateCounter++, this._updateCounter === 1) for (let e10 of this.observers) e10.beginUpdate(this);
    }
    _endUpdate() {
      if (this._updateCounter--, this._updateCounter === 0) {
        this._update();
        let e10 = [
          ...this.observers
        ];
        for (let t10 of e10) t10.endUpdate(this);
      }
    }
    addObserver(e10) {
      let t10 = !this.observers.has(e10) && this._updateCounter > 0;
      super.addObserver(e10), t10 && e10.beginUpdate(this);
    }
    removeObserver(e10) {
      let t10 = this.observers.has(e10) && this._updateCounter > 0;
      super.removeObserver(e10), t10 && e10.endUpdate(this);
    }
    set(e10, t10, n10) {
      if (n10 === void 0 && this._equalityComparator(this._value, e10)) return;
      let r10;
      t10 || (t10 = r10 = new BN(() => {
      }, () => `Setting ${this.debugName}`));
      try {
        if (this._isUpToDate = false, this._setValue(e10), n10 !== void 0 && this._deltas.push(n10), t10.updateObserver({
          beginUpdate: () => this._beginUpdate(),
          endUpdate: () => this._endUpdate(),
          handleChange: (e11, t11) => {
          },
          handlePossibleChange: (e11) => {
          }
        }, this), this._updateCounter > 1) for (let e11 of this.observers) e11.handlePossibleChange(this);
      } finally {
        r10 && r10.finish();
      }
    }
    toString() {
      return `${this.debugName}: ${this._value}`;
    }
    _setValue(e10) {
      this._value = e10;
    }
  };
  function wP(e10, t10) {
    return e10.lazy ? new CP(new rN(e10.owner, e10.debugName, void 0), t10, e10.equalsFn ?? QM) : new HN(new rN(e10.owner, e10.debugName, void 0), t10, e10.equalsFn ?? QM);
  }
  const TP = false;
  TP && hN(new _N());
  var EP = (_ga = class extends j {
    constructor(t10 = false) {
      super(), this._onDidRequestBasicLanguageFeatures = this._register(new N()), this.onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event, this._onDidRequestRichLanguageFeatures = this._register(new N()), this.onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event, this._onDidChange = this._register(new N({
        leakWarningThreshold: 200
      })), this.onDidChange = this._onDidChange.event, this._requestedBasicLanguages = /* @__PURE__ */ new Set(), this._requestedRichLanguages = /* @__PURE__ */ new Set(), _ga.instanceCount++, this._registry = this._register(new ZM(true, t10)), this.languageIdCodec = this._registry.languageIdCodec, this._register(this._registry.onDidChange(() => this._onDidChange.fire()));
    }
    dispose() {
      _ga.instanceCount--, super.dispose();
    }
    isRegisteredLanguageId(e10) {
      return this._registry.isRegisteredLanguageId(e10);
    }
    getLanguageIdByLanguageName(e10) {
      return this._registry.getLanguageIdByLanguageName(e10);
    }
    getLanguageIdByMimeType(e10) {
      return this._registry.getLanguageIdByMimeType(e10);
    }
    guessLanguageIdByFilepathOrFirstLine(e10, t10) {
      let n10 = this._registry.guessLanguageIdByFilepathOrFirstLine(e10, t10);
      return C(n10, null);
    }
    createById(e10) {
      return new DP(this.onDidChange, () => this._createAndGetLanguageIdentifier(e10));
    }
    createByFilepathOrFirstLine(e10, t10) {
      return new DP(this.onDidChange, () => {
        let n10 = this.guessLanguageIdByFilepathOrFirstLine(e10, t10);
        return this._createAndGetLanguageIdentifier(n10);
      });
    }
    _createAndGetLanguageIdentifier(e10) {
      return (!e10 || !this.isRegisteredLanguageId(e10)) && (e10 = Jg), e10;
    }
    requestBasicLanguageFeatures(e10) {
      this._requestedBasicLanguages.has(e10) || (this._requestedBasicLanguages.add(e10), this._onDidRequestBasicLanguageFeatures.fire(e10));
    }
    requestRichLanguageFeatures(e10) {
      this._requestedRichLanguages.has(e10) || (this._requestedRichLanguages.add(e10), this.requestBasicLanguageFeatures(e10), ao.getOrCreate(e10), this._onDidRequestRichLanguageFeatures.fire(e10));
    }
  }, _ga.instanceCount = 0, _ga), DP = class {
    constructor(e10, t10) {
      this._value = oP(this, e10, () => t10()), this.onDidChange = M.fromObservable(this._value);
    }
    get languageId() {
      return this._value.get();
    }
  };
  let kP;
  OP = {
    RESOURCES: `ResourceURLs`,
    DOWNLOAD_URL: `DownloadURL`,
    FILES: `Files`,
    TEXT: Sg.text,
    INTERNAL_URI_LIST: `application/vnd.code.uri-list`
  };
  kP = () => ({
    get delay() {
      return -1;
    },
    dispose: () => {
    },
    showHover: () => {
    }
  });
  let AP = kP;
  const jP = new us(() => AP(`mouse`, false)), MP = new us(() => AP(`element`, false));
  function NP(e10) {
    AP = e10;
  }
  PP = function(e10) {
    return e10 === `element` ? MP.value : jP.value;
  };
  FP = function() {
    return AP(`element`, true);
  };
  let IP = {
    showHover: () => void 0,
    hideHover: () => void 0,
    showAndFocusLastHover: () => void 0,
    setupManagedHover: () => null,
    showManagedHover: () => void 0
  };
  function LP(e10) {
    IP = e10;
  }
  RP = function() {
    return IP;
  };
  var zP = class {
    constructor(e10) {
      this.spliceables = e10;
    }
    splice(e10, t10, n10) {
      this.spliceables.forEach((r10) => r10.splice(e10, t10, n10));
    }
  }, BP = class extends Error {
    constructor(e10, t10) {
      super(`ListError [${e10}] ${t10}`);
    }
  };
  function VP(e10, t10) {
    let n10 = [];
    for (let r10 of t10) {
      if (e10.start >= r10.range.end) continue;
      if (e10.end < r10.range.start) break;
      let t11 = rj.intersect(e10, r10.range);
      if (rj.isEmpty(t11)) continue;
      n10.push({
        range: t11,
        size: r10.size
      });
    }
    return n10;
  }
  function HP({ start: e10, end: t10 }, n10) {
    return {
      start: e10 + n10,
      end: t10 + n10
    };
  }
  function UP(e10) {
    let t10 = [], n10 = null;
    for (let r10 of e10) {
      let e11 = r10.range.start, i10 = r10.range.end, a10 = r10.size;
      if (n10 && a10 === n10.size) {
        n10.range.end = i10;
        continue;
      }
      n10 = {
        range: {
          start: e11,
          end: i10
        },
        size: a10
      }, t10.push(n10);
    }
    return t10;
  }
  function WP(...e10) {
    return UP(e10.reduce((e11, t10) => e11.concat(t10), []));
  }
  var GP = class {
    get paddingTop() {
      return this._paddingTop;
    }
    set paddingTop(e10) {
      this._size = this._size + e10 - this._paddingTop, this._paddingTop = e10;
    }
    constructor(e10) {
      this.groups = [], this._size = 0, this._paddingTop = 0, this._paddingTop = e10 ?? 0, this._size = this._paddingTop;
    }
    splice(e10, t10, n10 = []) {
      let r10 = n10.length - t10, i10 = VP({
        start: 0,
        end: e10
      }, this.groups), a10 = VP({
        start: e10 + t10,
        end: 1 / 0
      }, this.groups).map((e11) => ({
        range: HP(e11.range, r10),
        size: e11.size
      })), o10 = n10.map((t11, n11) => ({
        range: {
          start: e10 + n11,
          end: e10 + n11 + 1
        },
        size: t11.size
      }));
      this.groups = WP(i10, o10, a10), this._size = this._paddingTop + this.groups.reduce((e11, t11) => e11 + t11.size * (t11.range.end - t11.range.start), 0);
    }
    get count() {
      let e10 = this.groups.length;
      return e10 ? this.groups[e10 - 1].range.end : 0;
    }
    get size() {
      return this._size;
    }
    indexAt(e10) {
      if (e10 < 0) return -1;
      if (e10 < this._paddingTop) return 0;
      let t10 = 0, n10 = this._paddingTop;
      for (let r10 of this.groups) {
        let i10 = r10.range.end - r10.range.start, a10 = n10 + i10 * r10.size;
        if (e10 < a10) return t10 + Math.floor((e10 - n10) / r10.size);
        t10 += i10, n10 = a10;
      }
      return t10;
    }
    indexAfter(e10) {
      return Math.min(this.indexAt(e10) + 1, this.count);
    }
    positionAt(e10) {
      if (e10 < 0) return -1;
      let t10 = 0, n10 = 0;
      for (let r10 of this.groups) {
        let i10 = r10.range.end - r10.range.start, a10 = n10 + i10;
        if (e10 < a10) return this._paddingTop + t10 + (e10 - n10) * r10.size;
        t10 += i10 * r10.size, n10 = a10;
      }
      return -1;
    }
  }, KP = class {
    constructor(e10) {
      this.renderers = e10, this.cache = /* @__PURE__ */ new Map(), this.transactionNodesPendingRemoval = /* @__PURE__ */ new Set(), this.inTransaction = false;
    }
    alloc(e10) {
      let t10 = this.getTemplateCache(e10).pop(), n10 = false;
      if (t10) n10 = this.transactionNodesPendingRemoval.has(t10.domNode), n10 && this.transactionNodesPendingRemoval.delete(t10.domNode);
      else {
        let n11 = H(`.monaco-list-row`), r10 = this.getRenderer(e10), i10 = r10.renderTemplate(n11);
        t10 = {
          domNode: n11,
          templateId: e10,
          templateData: i10
        };
      }
      return {
        row: t10,
        isReusingConnectedDomNode: n10
      };
    }
    release(e10) {
      e10 && this.releaseRow(e10);
    }
    transact(e10) {
      if (this.inTransaction) throw Error(`Already in transaction`);
      this.inTransaction = true;
      try {
        e10();
      } finally {
        for (let e11 of this.transactionNodesPendingRemoval) this.doRemoveNode(e11);
        this.transactionNodesPendingRemoval.clear(), this.inTransaction = false;
      }
    }
    releaseRow(e10) {
      let { domNode: t10, templateId: n10 } = e10;
      t10 && (this.inTransaction ? this.transactionNodesPendingRemoval.add(t10) : this.doRemoveNode(t10));
      let r10 = this.getTemplateCache(n10);
      r10.push(e10);
    }
    doRemoveNode(e10) {
      e10.classList.remove(`scrolling`), e10.remove();
    }
    getTemplateCache(e10) {
      let t10 = this.cache.get(e10);
      return t10 || (t10 = [], this.cache.set(e10, t10)), t10;
    }
    dispose() {
      this.cache.forEach((e10, t10) => {
        for (let n10 of e10) {
          let e11 = this.getRenderer(t10);
          e11.disposeTemplate(n10.templateData), n10.templateData = null;
        }
      }), this.cache.clear(), this.transactionNodesPendingRemoval.clear();
    }
    getRenderer(e10) {
      let t10 = this.renderers.get(e10);
      if (!t10) throw Error(`No renderer found for ${e10}`);
      return t10;
    }
  }, qP = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  };
  const JP = {
    CurrentDragAndDropData: void 0
  }, YP = {
    useShadows: true,
    verticalScrollMode: 1,
    setRowLineHeight: true,
    setRowHeight: true,
    supportDynamicHeights: false,
    dnd: {
      getDragElements(e10) {
        return [
          e10
        ];
      },
      getDragURI() {
        return null;
      },
      onDragStart() {
      },
      onDragOver() {
        return false;
      },
      drop() {
      },
      dispose() {
      }
    },
    horizontalScrolling: false,
    transformOptimization: true,
    alwaysConsumeMouseWheel: true
  };
  var XP = class {
    constructor(e10) {
      this.elements = e10;
    }
    update() {
    }
    getData() {
      return this.elements;
    }
  }, ZP = class {
    constructor(e10) {
      this.elements = e10;
    }
    update() {
    }
    getData() {
      return this.elements;
    }
  }, QP = class {
    constructor() {
      this.types = [], this.files = [];
    }
    update(e10) {
      if (e10.types && this.types.splice(0, this.types.length, ...e10.types), e10.files) {
        this.files.splice(0, this.files.length);
        for (let t10 = 0; t10 < e10.files.length; t10++) {
          let n10 = e10.files.item(t10);
          n10 && (n10.size || n10.type) && this.files.push(n10);
        }
      }
    }
    getData() {
      return {
        types: this.types,
        files: this.files
      };
    }
  };
  function $P(e10, t10) {
    return Array.isArray(e10) && Array.isArray(t10) ? l(e10, t10) : e10 === t10;
  }
  var eF = class {
    constructor(e10) {
      (e10 == null ? void 0 : e10.getSetSize) ? this.getSetSize = e10.getSetSize.bind(e10) : this.getSetSize = (e11, t10, n10) => n10, (e10 == null ? void 0 : e10.getPosInSet) ? this.getPosInSet = e10.getPosInSet.bind(e10) : this.getPosInSet = (e11, t10) => t10 + 1, (e10 == null ? void 0 : e10.getRole) ? this.getRole = e10.getRole.bind(e10) : this.getRole = (e11) => `listitem`, (e10 == null ? void 0 : e10.isChecked) ? this.isChecked = e10.isChecked.bind(e10) : this.isChecked = (e11) => void 0;
    }
  }, tF = (_ha = class {
    get contentHeight() {
      return this.rangeMap.size;
    }
    get onDidScroll() {
      return this.scrollableElement.onScroll;
    }
    get scrollableElementDomNode() {
      return this.scrollableElement.getDomNode();
    }
    get horizontalScrolling() {
      return this._horizontalScrolling;
    }
    set horizontalScrolling(e10) {
      if (e10 !== this._horizontalScrolling) {
        if (e10 && this.supportDynamicHeights) throw Error(`Horizontal scrolling and dynamic heights not supported simultaneously`);
        if (this._horizontalScrolling = e10, this.domNode.classList.toggle(`horizontal-scrolling`, this._horizontalScrolling), this._horizontalScrolling) {
          for (let e11 of this.items) this.measureItemWidth(e11);
          this.updateScrollWidth(), this.scrollableElement.setScrollDimensions({
            width: yd(this.domNode)
          }), this.rowsContainer.style.width = `${Math.max(this.scrollWidth || 0, this.renderWidth)}px`;
        } else this.scrollableElementWidthDelayer.cancel(), this.scrollableElement.setScrollDimensions({
          width: this.renderWidth,
          scrollWidth: this.renderWidth
        }), this.rowsContainer.style.width = ``;
      }
    }
    constructor(t10, n10, r10, i10 = YP) {
      var _a3, _b3;
      if (this.virtualDelegate = n10, this.domId = `list_id_${++_ha.InstanceCount}`, this.renderers = /* @__PURE__ */ new Map(), this.renderWidth = 0, this._scrollHeight = 0, this.scrollableElementUpdateDisposable = null, this.scrollableElementWidthDelayer = new tl(50), this.splicing = false, this.dragOverAnimationStopDisposable = j.None, this.dragOverMouseY = 0, this.canDrop = false, this.currentDragFeedbackDisposable = j.None, this.onDragLeaveTimeout = j.None, this.disposables = new A(), this._onDidChangeContentHeight = new N(), this._onDidChangeContentWidth = new N(), this.onDidChangeContentHeight = M.latch(this._onDidChangeContentHeight.event, void 0, this.disposables), this._horizontalScrolling = false, i10.horizontalScrolling && i10.supportDynamicHeights) throw Error(`Horizontal scrolling and dynamic heights not supported simultaneously`);
      this.items = [], this.itemId = 0, this.rangeMap = this.createRangeMap(i10.paddingTop ?? 0);
      for (let e10 of r10) this.renderers.set(e10.templateId, e10);
      this.cache = this.disposables.add(new KP(this.renderers)), this.lastRenderTop = 0, this.lastRenderHeight = 0, this.domNode = document.createElement(`div`), this.domNode.className = `monaco-list`, this.domNode.classList.add(this.domId), this.domNode.tabIndex = 0, this.domNode.classList.toggle(`mouse-support`, typeof i10.mouseSupport == `boolean` ? i10.mouseSupport : true), this._horizontalScrolling = i10.horizontalScrolling ?? YP.horizontalScrolling, this.domNode.classList.toggle(`horizontal-scrolling`, this._horizontalScrolling), this.paddingBottom = i10.paddingBottom === void 0 ? 0 : i10.paddingBottom, this.accessibilityProvider = new eF(i10.accessibilityProvider), this.rowsContainer = document.createElement(`div`), this.rowsContainer.className = `monaco-list-rows`;
      let a10 = i10.transformOptimization ?? YP.transformOptimization;
      a10 && (this.rowsContainer.style.transform = `translate3d(0px, 0px, 0px)`, this.rowsContainer.style.overflow = `hidden`, this.rowsContainer.style.contain = `strict`), this.disposables.add(LE.addTarget(this.rowsContainer)), this.scrollable = this.disposables.add(new YE({
        forceIntegerValues: true,
        smoothScrollDuration: i10.smoothScrolling ?? false ? 125 : 0,
        scheduleAtNextAnimationFrame: (e10) => sd(R(this.domNode), e10)
      })), this.scrollableElement = this.disposables.add(new lD(this.rowsContainer, {
        alwaysConsumeMouseWheel: i10.alwaysConsumeMouseWheel ?? YP.alwaysConsumeMouseWheel,
        horizontal: 1,
        vertical: i10.verticalScrollMode ?? YP.verticalScrollMode,
        useShadows: i10.useShadows ?? YP.useShadows,
        mouseWheelScrollSensitivity: i10.mouseWheelScrollSensitivity,
        fastScrollSensitivity: i10.fastScrollSensitivity,
        scrollByPage: i10.scrollByPage
      }, this.scrollable)), this.domNode.appendChild(this.scrollableElement.getDomNode()), t10.appendChild(this.domNode), this.scrollableElement.onScroll(this.onScroll, this, this.disposables), this.disposables.add(z(this.rowsContainer, IE.Change, (e10) => this.onTouchChange(e10))), this.disposables.add(z(this.scrollableElement.getDomNode(), `scroll`, (e10) => e10.target.scrollTop = 0)), this.disposables.add(z(this.domNode, `dragover`, (e10) => this.onDragOver(this.toDragEvent(e10)))), this.disposables.add(z(this.domNode, `drop`, (e10) => this.onDrop(this.toDragEvent(e10)))), this.disposables.add(z(this.domNode, `dragleave`, (e10) => this.onDragLeave(this.toDragEvent(e10)))), this.disposables.add(z(this.domNode, `dragend`, (e10) => this.onDragEnd(e10))), this.setRowLineHeight = i10.setRowLineHeight ?? YP.setRowLineHeight, this.setRowHeight = i10.setRowHeight ?? YP.setRowHeight, this.supportDynamicHeights = i10.supportDynamicHeights ?? YP.supportDynamicHeights, this.dnd = i10.dnd ?? this.disposables.add(YP.dnd), this.layout((_a3 = i10.initialSize) == null ? void 0 : _a3.height, (_b3 = i10.initialSize) == null ? void 0 : _b3.width);
    }
    updateOptions(e10) {
      e10.paddingBottom !== void 0 && (this.paddingBottom = e10.paddingBottom, this.scrollableElement.setScrollDimensions({
        scrollHeight: this.scrollHeight
      })), e10.smoothScrolling !== void 0 && this.scrollable.setSmoothScrollDuration(e10.smoothScrolling ? 125 : 0), e10.horizontalScrolling !== void 0 && (this.horizontalScrolling = e10.horizontalScrolling);
      let t10;
      if (e10.scrollByPage !== void 0 && (t10 = {
        ...t10 ?? {},
        scrollByPage: e10.scrollByPage
      }), e10.mouseWheelScrollSensitivity !== void 0 && (t10 = {
        ...t10 ?? {},
        mouseWheelScrollSensitivity: e10.mouseWheelScrollSensitivity
      }), e10.fastScrollSensitivity !== void 0 && (t10 = {
        ...t10 ?? {},
        fastScrollSensitivity: e10.fastScrollSensitivity
      }), t10 && this.scrollableElement.updateOptions(t10), e10.paddingTop !== void 0 && e10.paddingTop !== this.rangeMap.paddingTop) {
        let t11 = this.getRenderRange(this.lastRenderTop, this.lastRenderHeight), n10 = e10.paddingTop - this.rangeMap.paddingTop;
        this.rangeMap.paddingTop = e10.paddingTop, this.render(t11, Math.max(0, this.lastRenderTop + n10), this.lastRenderHeight, void 0, void 0, true), this.setScrollTop(this.lastRenderTop), this.eventuallyUpdateScrollDimensions(), this.supportDynamicHeights && this._rerender(this.lastRenderTop, this.lastRenderHeight);
      }
    }
    createRangeMap(e10) {
      return new GP(e10);
    }
    splice(e10, t10, n10 = []) {
      if (this.splicing) throw Error(`Can't run recursive splices.`);
      this.splicing = true;
      try {
        return this._splice(e10, t10, n10);
      } finally {
        this.splicing = false, this._onDidChangeContentHeight.fire(this.contentHeight);
      }
    }
    _splice(e10, t10, n10 = []) {
      let r10 = this.getRenderRange(this.lastRenderTop, this.lastRenderHeight), i10 = {
        start: e10,
        end: e10 + t10
      }, a10 = rj.intersect(r10, i10), o10 = /* @__PURE__ */ new Map();
      for (let e11 = a10.end - 1; e11 >= a10.start; e11--) {
        let t11 = this.items[e11];
        if (t11.dragStartDisposable.dispose(), t11.checkedDisposable.dispose(), t11.row) {
          let n11 = o10.get(t11.templateId);
          n11 || (n11 = [], o10.set(t11.templateId, n11));
          let r11 = this.renderers.get(t11.templateId);
          r11 && r11.disposeElement && r11.disposeElement(t11.element, e11, t11.row.templateData, t11.size), n11.unshift(t11.row);
        }
        t11.row = null, t11.stale = true;
      }
      let s10 = {
        start: e10 + t10,
        end: this.items.length
      }, c10 = rj.intersect(s10, r10), l10 = rj.relativeComplement(s10, r10), u10 = n10.map((e11) => ({
        id: String(this.itemId++),
        element: e11,
        templateId: this.virtualDelegate.getTemplateId(e11),
        size: this.virtualDelegate.getHeight(e11),
        width: void 0,
        hasDynamicHeight: !!this.virtualDelegate.hasDynamicHeight && this.virtualDelegate.hasDynamicHeight(e11),
        lastDynamicHeightWidth: void 0,
        row: null,
        uri: void 0,
        dropTarget: false,
        dragStartDisposable: j.None,
        checkedDisposable: j.None,
        stale: false
      })), d10;
      e10 === 0 && t10 >= this.items.length ? (this.rangeMap = this.createRangeMap(this.rangeMap.paddingTop), this.rangeMap.splice(0, 0, u10), d10 = this.items, this.items = u10) : (this.rangeMap.splice(e10, t10, u10), d10 = this.items.splice(e10, t10, ...u10));
      let f10 = n10.length - t10, p10 = this.getRenderRange(this.lastRenderTop, this.lastRenderHeight), m10 = HP(c10, f10), h10 = rj.intersect(p10, m10);
      for (let e11 = h10.start; e11 < h10.end; e11++) this.updateItemInDOM(this.items[e11], e11);
      let g10 = rj.relativeComplement(m10, p10);
      for (let e11 of g10) for (let t11 = e11.start; t11 < e11.end; t11++) this.removeItemFromDOM(t11);
      let _10 = l10.map((e11) => HP(e11, f10)), v10 = {
        start: e10,
        end: e10 + n10.length
      }, y10 = [
        v10,
        ..._10
      ].map((e11) => rj.intersect(p10, e11)).reverse();
      for (let e11 of y10) for (let t11 = e11.end - 1; t11 >= e11.start; t11--) {
        let e12 = this.items[t11], n11 = o10.get(e12.templateId), r11 = n11 == null ? void 0 : n11.pop();
        this.insertItemInDOM(t11, r11);
      }
      for (let e11 of o10.values()) for (let t11 of e11) this.cache.release(t11);
      return this.eventuallyUpdateScrollDimensions(), this.supportDynamicHeights && this._rerender(this.scrollTop, this.renderHeight), d10.map((e11) => e11.element);
    }
    eventuallyUpdateScrollDimensions() {
      this._scrollHeight = this.contentHeight, this.rowsContainer.style.height = `${this._scrollHeight}px`, this.scrollableElementUpdateDisposable || (this.scrollableElementUpdateDisposable = sd(R(this.domNode), () => {
        this.scrollableElement.setScrollDimensions({
          scrollHeight: this.scrollHeight
        }), this.updateScrollWidth(), this.scrollableElementUpdateDisposable = null;
      }));
    }
    eventuallyUpdateScrollWidth() {
      if (!this.horizontalScrolling) {
        this.scrollableElementWidthDelayer.cancel();
        return;
      }
      this.scrollableElementWidthDelayer.trigger(() => this.updateScrollWidth());
    }
    updateScrollWidth() {
      if (!this.horizontalScrolling) return;
      let e10 = 0;
      for (let t10 of this.items) t10.width !== void 0 && (e10 = Math.max(e10, t10.width));
      this.scrollWidth = e10, this.scrollableElement.setScrollDimensions({
        scrollWidth: e10 === 0 ? 0 : e10 + 10
      }), this._onDidChangeContentWidth.fire(this.scrollWidth);
    }
    rerender() {
      if (this.supportDynamicHeights) {
        for (let e10 of this.items) e10.lastDynamicHeightWidth = void 0;
        this._rerender(this.lastRenderTop, this.lastRenderHeight);
      }
    }
    get length() {
      return this.items.length;
    }
    get renderHeight() {
      let e10 = this.scrollableElement.getScrollDimensions();
      return e10.height;
    }
    get firstVisibleIndex() {
      let e10 = this.getRenderRange(this.lastRenderTop, this.lastRenderHeight);
      return e10.start;
    }
    element(e10) {
      return this.items[e10].element;
    }
    indexOf(e10) {
      return this.items.findIndex((t10) => t10.element === e10);
    }
    domElement(e10) {
      let t10 = this.items[e10].row;
      return t10 && t10.domNode;
    }
    elementHeight(e10) {
      return this.items[e10].size;
    }
    elementTop(e10) {
      return this.rangeMap.positionAt(e10);
    }
    indexAt(e10) {
      return this.rangeMap.indexAt(e10);
    }
    indexAfter(e10) {
      return this.rangeMap.indexAfter(e10);
    }
    layout(e10, t10) {
      let n10 = {
        height: typeof e10 == `number` ? e10 : bd(this.domNode)
      };
      this.scrollableElementUpdateDisposable && (this.scrollableElementUpdateDisposable.dispose(), this.scrollableElementUpdateDisposable = null, n10.scrollHeight = this.scrollHeight), this.scrollableElement.setScrollDimensions(n10), t10 !== void 0 && (this.renderWidth = t10, this.supportDynamicHeights && this._rerender(this.scrollTop, this.renderHeight)), this.horizontalScrolling && this.scrollableElement.setScrollDimensions({
        width: typeof t10 == `number` ? t10 : yd(this.domNode)
      });
    }
    render(e10, t10, n10, r10, i10, a10 = false) {
      let o10 = this.getRenderRange(t10, n10), s10 = rj.relativeComplement(o10, e10).reverse(), c10 = rj.relativeComplement(e10, o10);
      if (a10) {
        let t11 = rj.intersect(e10, o10);
        for (let e11 = t11.start; e11 < t11.end; e11++) this.updateItemInDOM(this.items[e11], e11);
      }
      this.cache.transact(() => {
        for (let e11 of c10) for (let t11 = e11.start; t11 < e11.end; t11++) this.removeItemFromDOM(t11);
        for (let e11 of s10) for (let t11 = e11.end - 1; t11 >= e11.start; t11--) this.insertItemInDOM(t11);
      }), r10 !== void 0 && (this.rowsContainer.style.left = `-${r10}px`), this.rowsContainer.style.top = `-${t10}px`, this.horizontalScrolling && i10 !== void 0 && (this.rowsContainer.style.width = `${Math.max(i10, this.renderWidth)}px`), this.lastRenderTop = t10, this.lastRenderHeight = n10;
    }
    insertItemInDOM(e10, t10) {
      var _a3, _b3;
      let n10 = this.items[e10];
      if (!n10.row) if (t10) n10.row = t10, n10.stale = true;
      else {
        let e11 = this.cache.alloc(n10.templateId);
        n10.row = e11.row, n10.stale || (n10.stale = e11.isReusingConnectedDomNode);
      }
      let r10 = this.accessibilityProvider.getRole(n10.element) || `listitem`;
      n10.row.domNode.setAttribute(`role`, r10);
      let i10 = this.accessibilityProvider.isChecked(n10.element);
      if (typeof i10 == `boolean`) n10.row.domNode.setAttribute(`aria-checked`, String(!!i10));
      else if (i10) {
        let e11 = (e12) => n10.row.domNode.setAttribute(`aria-checked`, String(!!e12));
        e11(i10.value), n10.checkedDisposable = i10.onDidChange(() => e11(i10.value));
      }
      if (n10.stale || !n10.row.domNode.parentElement) {
        let t11 = ((_b3 = (_a3 = this.items.at(e10 + 1)) == null ? void 0 : _a3.row) == null ? void 0 : _b3.domNode) ?? null;
        (n10.row.domNode.parentElement !== this.rowsContainer || n10.row.domNode.nextElementSibling !== t11) && this.rowsContainer.insertBefore(n10.row.domNode, t11), n10.stale = false;
      }
      this.updateItemInDOM(n10, e10);
      let a10 = this.renderers.get(n10.templateId);
      if (!a10) throw Error(`No renderer found for template id ${n10.templateId}`);
      a10 == null ? void 0 : a10.renderElement(n10.element, e10, n10.row.templateData, n10.size);
      let o10 = this.dnd.getDragURI(n10.element);
      n10.dragStartDisposable.dispose(), n10.row.domNode.draggable = !!o10, o10 && (n10.dragStartDisposable = z(n10.row.domNode, `dragstart`, (e11) => this.onDragStart(n10.element, o10, e11))), this.horizontalScrolling && (this.measureItemWidth(n10), this.eventuallyUpdateScrollWidth());
    }
    measureItemWidth(e10) {
      if (!e10.row || !e10.row.domNode) return;
      e10.row.domNode.style.width = `fit-content`, e10.width = yd(e10.row.domNode);
      let t10 = R(e10.row.domNode).getComputedStyle(e10.row.domNode);
      t10.paddingLeft && (e10.width += parseFloat(t10.paddingLeft)), t10.paddingRight && (e10.width += parseFloat(t10.paddingRight)), e10.row.domNode.style.width = ``;
    }
    updateItemInDOM(e10, t10) {
      e10.row.domNode.style.top = `${this.elementTop(t10)}px`, this.setRowHeight && (e10.row.domNode.style.height = `${e10.size}px`), this.setRowLineHeight && (e10.row.domNode.style.lineHeight = `${e10.size}px`), e10.row.domNode.setAttribute(`data-index`, `${t10}`), e10.row.domNode.setAttribute(`data-last-element`, t10 === this.length - 1 ? `true` : `false`), e10.row.domNode.setAttribute(`data-parity`, t10 % 2 == 0 ? `even` : `odd`), e10.row.domNode.setAttribute(`aria-setsize`, String(this.accessibilityProvider.getSetSize(e10.element, t10, this.length))), e10.row.domNode.setAttribute(`aria-posinset`, String(this.accessibilityProvider.getPosInSet(e10.element, t10))), e10.row.domNode.setAttribute(`id`, this.getElementDomId(t10)), e10.row.domNode.classList.toggle(`drop-target`, e10.dropTarget);
    }
    removeItemFromDOM(e10) {
      let t10 = this.items[e10];
      if (t10.dragStartDisposable.dispose(), t10.checkedDisposable.dispose(), t10.row) {
        let n10 = this.renderers.get(t10.templateId);
        n10 && n10.disposeElement && n10.disposeElement(t10.element, e10, t10.row.templateData, t10.size), this.cache.release(t10.row), t10.row = null;
      }
      this.horizontalScrolling && this.eventuallyUpdateScrollWidth();
    }
    getScrollTop() {
      let e10 = this.scrollableElement.getScrollPosition();
      return e10.scrollTop;
    }
    setScrollTop(e10, t10) {
      this.scrollableElementUpdateDisposable && (this.scrollableElementUpdateDisposable.dispose(), this.scrollableElementUpdateDisposable = null, this.scrollableElement.setScrollDimensions({
        scrollHeight: this.scrollHeight
      })), this.scrollableElement.setScrollPosition({
        scrollTop: e10,
        reuseAnimation: t10
      });
    }
    get scrollTop() {
      return this.getScrollTop();
    }
    set scrollTop(e10) {
      this.setScrollTop(e10);
    }
    get scrollHeight() {
      return this._scrollHeight + (this.horizontalScrolling ? 10 : 0) + this.paddingBottom;
    }
    get onMouseClick() {
      return M.map(this.disposables.add(new bD(this.domNode, `click`)).event, (e10) => this.toMouseEvent(e10), this.disposables);
    }
    get onMouseDblClick() {
      return M.map(this.disposables.add(new bD(this.domNode, `dblclick`)).event, (e10) => this.toMouseEvent(e10), this.disposables);
    }
    get onMouseMiddleClick() {
      return M.filter(M.map(this.disposables.add(new bD(this.domNode, `auxclick`)).event, (e10) => this.toMouseEvent(e10), this.disposables), (e10) => e10.browserEvent.button === 1, this.disposables);
    }
    get onMouseDown() {
      return M.map(this.disposables.add(new bD(this.domNode, `mousedown`)).event, (e10) => this.toMouseEvent(e10), this.disposables);
    }
    get onMouseOver() {
      return M.map(this.disposables.add(new bD(this.domNode, `mouseover`)).event, (e10) => this.toMouseEvent(e10), this.disposables);
    }
    get onMouseOut() {
      return M.map(this.disposables.add(new bD(this.domNode, `mouseout`)).event, (e10) => this.toMouseEvent(e10), this.disposables);
    }
    get onContextMenu() {
      return M.any(M.map(this.disposables.add(new bD(this.domNode, `contextmenu`)).event, (e10) => this.toMouseEvent(e10), this.disposables), M.map(this.disposables.add(new bD(this.domNode, IE.Contextmenu)).event, (e10) => this.toGestureEvent(e10), this.disposables));
    }
    get onTouchStart() {
      return M.map(this.disposables.add(new bD(this.domNode, `touchstart`)).event, (e10) => this.toTouchEvent(e10), this.disposables);
    }
    get onTap() {
      return M.map(this.disposables.add(new bD(this.rowsContainer, IE.Tap)).event, (e10) => this.toGestureEvent(e10), this.disposables);
    }
    toMouseEvent(e10) {
      let t10 = this.getItemIndexFromEventTarget(e10.target || null), n10 = t10 === void 0 ? void 0 : this.items[t10], r10 = n10 && n10.element;
      return {
        browserEvent: e10,
        index: t10,
        element: r10
      };
    }
    toTouchEvent(e10) {
      let t10 = this.getItemIndexFromEventTarget(e10.target || null), n10 = t10 === void 0 ? void 0 : this.items[t10], r10 = n10 && n10.element;
      return {
        browserEvent: e10,
        index: t10,
        element: r10
      };
    }
    toGestureEvent(e10) {
      let t10 = this.getItemIndexFromEventTarget(e10.initialTarget || null), n10 = t10 === void 0 ? void 0 : this.items[t10], r10 = n10 && n10.element;
      return {
        browserEvent: e10,
        index: t10,
        element: r10
      };
    }
    toDragEvent(e10) {
      let t10 = this.getItemIndexFromEventTarget(e10.target || null), n10 = t10 === void 0 ? void 0 : this.items[t10], r10 = n10 && n10.element, i10 = this.getTargetSector(e10, t10);
      return {
        browserEvent: e10,
        index: t10,
        element: r10,
        sector: i10
      };
    }
    onScroll(e10) {
      try {
        let t10 = this.getRenderRange(this.lastRenderTop, this.lastRenderHeight);
        this.render(t10, e10.scrollTop, e10.height, e10.scrollLeft, e10.scrollWidth), this.supportDynamicHeights && this._rerender(e10.scrollTop, e10.height, e10.inSmoothScrolling);
      } catch (t10) {
        throw console.error(`Got bad scroll event:`, e10), t10;
      }
    }
    onTouchChange(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.scrollTop -= e10.translationY;
    }
    onDragStart(e10, t10, n10) {
      var _a3, _b3;
      if (!n10.dataTransfer) return;
      let r10 = this.dnd.getDragElements(e10);
      if (n10.dataTransfer.effectAllowed = `copyMove`, n10.dataTransfer.setData(OP.TEXT, t10), n10.dataTransfer.setDragImage) {
        let e11;
        this.dnd.getDragLabel && (e11 = this.dnd.getDragLabel(r10, n10)), e11 === void 0 && (e11 = String(r10.length));
        let t11 = H(`.monaco-drag-image`);
        t11.textContent = e11;
        let i10 = (e12) => {
          for (; e12 && !e12.classList.contains(`monaco-workbench`); ) e12 = e12.parentElement;
          return e12 || this.domNode.ownerDocument;
        }, a10 = i10(this.domNode);
        a10.appendChild(t11), n10.dataTransfer.setDragImage(t11, -10, -10), setTimeout(() => t11.remove(), 0);
      }
      this.domNode.classList.add(`dragging`), this.currentDragData = new XP(r10), JP.CurrentDragAndDropData = new ZP(r10), (_b3 = (_a3 = this.dnd).onDragStart) == null ? void 0 : _b3.call(_a3, this.currentDragData, n10);
    }
    onDragOver(e10) {
      var _a3, _b3;
      if (e10.browserEvent.preventDefault(), this.onDragLeaveTimeout.dispose(), JP.CurrentDragAndDropData && JP.CurrentDragAndDropData.getData() === `vscode-ui` || (this.setupDragAndDropScrollTopAnimation(e10.browserEvent), !e10.browserEvent.dataTransfer)) return false;
      if (!this.currentDragData) if (JP.CurrentDragAndDropData) this.currentDragData = JP.CurrentDragAndDropData;
      else {
        if (!e10.browserEvent.dataTransfer.types) return false;
        this.currentDragData = new QP();
      }
      let t10 = this.dnd.onDragOver(this.currentDragData, e10.element, e10.index, e10.sector, e10.browserEvent);
      if (this.canDrop = typeof t10 == `boolean` ? t10 : t10.accept, !this.canDrop) return this.currentDragFeedback = void 0, this.currentDragFeedbackDisposable.dispose(), false;
      e10.browserEvent.dataTransfer.dropEffect = typeof t10 != `boolean` && ((_a3 = t10.effect) == null ? void 0 : _a3.type) === 0 ? `copy` : `move`;
      let n10;
      n10 = typeof t10 != `boolean` && t10.feedback ? t10.feedback : e10.index === void 0 ? [
        -1
      ] : [
        e10.index
      ], n10 = S(n10).filter((e11) => e11 >= -1 && e11 < this.length).sort((e11, t11) => e11 - t11), n10 = n10[0] === -1 ? [
        -1
      ] : n10;
      let r10 = typeof t10 != `boolean` && t10.effect && t10.effect.position ? t10.effect.position : `drop-target`;
      if ($P(this.currentDragFeedback, n10) && this.currentDragFeedbackPosition === r10) return true;
      if (this.currentDragFeedback = n10, this.currentDragFeedbackPosition = r10, this.currentDragFeedbackDisposable.dispose(), n10[0] === -1) this.domNode.classList.add(r10), this.rowsContainer.classList.add(r10), this.currentDragFeedbackDisposable = k(() => {
        this.domNode.classList.remove(r10), this.rowsContainer.classList.remove(r10);
      });
      else {
        if (n10.length > 1 && r10 !== `drop-target`) throw Error(`Can't use multiple feedbacks with position different than 'over'`);
        r10 === `drop-target-after` && n10[0] < this.length - 1 && (n10[0] += 1, r10 = `drop-target-before`);
        for (let e11 of n10) {
          let t11 = this.items[e11];
          t11.dropTarget = true, (_b3 = t11.row) == null ? void 0 : _b3.domNode.classList.add(r10);
        }
        this.currentDragFeedbackDisposable = k(() => {
          var _a4;
          for (let e11 of n10) {
            let t11 = this.items[e11];
            t11.dropTarget = false, (_a4 = t11.row) == null ? void 0 : _a4.domNode.classList.remove(r10);
          }
        });
      }
      return true;
    }
    onDragLeave(e10) {
      var _a3, _b3;
      this.onDragLeaveTimeout.dispose(), this.onDragLeaveTimeout = il(() => this.clearDragOverFeedback(), 100, this.disposables), this.currentDragData && ((_b3 = (_a3 = this.dnd).onDragLeave) == null ? void 0 : _b3.call(_a3, this.currentDragData, e10.element, e10.index, e10.browserEvent));
    }
    onDrop(e10) {
      if (!this.canDrop) return;
      let t10 = this.currentDragData;
      this.teardownDragAndDropScrollTopAnimation(), this.clearDragOverFeedback(), this.domNode.classList.remove(`dragging`), this.currentDragData = void 0, JP.CurrentDragAndDropData = void 0, !(!t10 || !e10.browserEvent.dataTransfer) && (e10.browserEvent.preventDefault(), t10.update(e10.browserEvent.dataTransfer), this.dnd.drop(t10, e10.element, e10.index, e10.sector, e10.browserEvent));
    }
    onDragEnd(e10) {
      var _a3, _b3;
      this.canDrop = false, this.teardownDragAndDropScrollTopAnimation(), this.clearDragOverFeedback(), this.domNode.classList.remove(`dragging`), this.currentDragData = void 0, JP.CurrentDragAndDropData = void 0, (_b3 = (_a3 = this.dnd).onDragEnd) == null ? void 0 : _b3.call(_a3, e10);
    }
    clearDragOverFeedback() {
      this.currentDragFeedback = void 0, this.currentDragFeedbackPosition = void 0, this.currentDragFeedbackDisposable.dispose(), this.currentDragFeedbackDisposable = j.None;
    }
    setupDragAndDropScrollTopAnimation(e10) {
      if (!this.dragOverAnimationDisposable) {
        let e11 = md(this.domNode).top;
        this.dragOverAnimationDisposable = hf(R(this.domNode), this.animateDragAndDropScrollTop.bind(this, e11));
      }
      this.dragOverAnimationStopDisposable.dispose(), this.dragOverAnimationStopDisposable = il(() => {
        this.dragOverAnimationDisposable && (this.dragOverAnimationDisposable.dispose(), this.dragOverAnimationDisposable = void 0);
      }, 1e3, this.disposables), this.dragOverMouseY = e10.pageY;
    }
    animateDragAndDropScrollTop(e10) {
      if (this.dragOverMouseY === void 0) return;
      let t10 = this.dragOverMouseY - e10, n10 = this.renderHeight - 35;
      t10 < 35 ? this.scrollTop += Math.max(-14, Math.floor(0.3 * (t10 - 35))) : t10 > n10 && (this.scrollTop += Math.min(14, Math.floor(0.3 * (t10 - n10))));
    }
    teardownDragAndDropScrollTopAnimation() {
      this.dragOverAnimationStopDisposable.dispose(), this.dragOverAnimationDisposable && (this.dragOverAnimationDisposable.dispose(), this.dragOverAnimationDisposable = void 0);
    }
    getTargetSector(e10, t10) {
      if (t10 === void 0) return;
      let n10 = e10.offsetY / this.items[t10].size, r10 = Math.floor(n10 / 0.25);
      return Ax(r10, 0, 3);
    }
    getItemIndexFromEventTarget(e10) {
      let t10 = this.scrollableElement.getDomNode(), n10 = e10;
      for (; (Gd(n10) || qd(n10)) && n10 !== this.rowsContainer && t10.contains(n10); ) {
        let e11 = n10.getAttribute(`data-index`);
        if (e11) {
          let t11 = Number(e11);
          if (!isNaN(t11)) return t11;
        }
        n10 = n10.parentElement;
      }
    }
    getRenderRange(e10, t10) {
      return {
        start: this.rangeMap.indexAt(e10),
        end: this.rangeMap.indexAfter(e10 + t10 - 1)
      };
    }
    _rerender(e10, t10, n10) {
      let r10 = this.getRenderRange(e10, t10), i10, a10;
      e10 === this.elementTop(r10.start) ? (i10 = r10.start, a10 = 0) : r10.end - r10.start > 1 && (i10 = r10.start + 1, a10 = this.elementTop(i10) - e10);
      let o10 = 0;
      for (; ; ) {
        let s10 = this.getRenderRange(e10, t10), c10 = false;
        for (let e11 = s10.start; e11 < s10.end; e11++) {
          let t11 = this.probeDynamicHeight(e11);
          t11 !== 0 && this.rangeMap.splice(e11, 1, [
            this.items[e11]
          ]), o10 += t11, c10 || (c10 = t11 !== 0);
        }
        if (!c10) {
          o10 !== 0 && this.eventuallyUpdateScrollDimensions();
          let t11 = rj.relativeComplement(r10, s10);
          for (let e11 of t11) for (let t12 = e11.start; t12 < e11.end; t12++) this.items[t12].row && this.removeItemFromDOM(t12);
          let c11 = rj.relativeComplement(s10, r10).reverse();
          for (let e11 of c11) for (let t12 = e11.end - 1; t12 >= e11.start; t12--) this.insertItemInDOM(t12);
          for (let e11 = s10.start; e11 < s10.end; e11++) this.items[e11].row && this.updateItemInDOM(this.items[e11], e11);
          if (typeof i10 == `number`) {
            let t12 = this.scrollable.getFutureScrollPosition().scrollTop - e10, r11 = this.elementTop(i10) - a10 + t12;
            this.setScrollTop(r11, n10);
          }
          this._onDidChangeContentHeight.fire(this.contentHeight);
          return;
        }
      }
    }
    probeDynamicHeight(e10) {
      var _a3, _b3, _c3;
      let t10 = this.items[e10];
      if (this.virtualDelegate.getDynamicHeight) {
        let e11 = this.virtualDelegate.getDynamicHeight(t10.element);
        if (e11 !== null) {
          let n11 = t10.size;
          return t10.size = e11, t10.lastDynamicHeightWidth = this.renderWidth, e11 - n11;
        }
      }
      if (!t10.hasDynamicHeight || t10.lastDynamicHeightWidth === this.renderWidth || this.virtualDelegate.hasDynamicHeight && !this.virtualDelegate.hasDynamicHeight(t10.element)) return 0;
      let n10 = t10.size;
      if (t10.row) return t10.row.domNode.style.height = ``, t10.size = t10.row.domNode.offsetHeight, t10.size === 0 && !Sd(t10.row.domNode, R(t10.row.domNode).document.body) && console.warn(`Measuring item node that is not in DOM! Add ListView to the DOM before measuring row height!`, Error().stack), t10.lastDynamicHeightWidth = this.renderWidth, t10.size - n10;
      let { row: r10 } = this.cache.alloc(t10.templateId);
      r10.domNode.style.height = ``, this.rowsContainer.appendChild(r10.domNode);
      let i10 = this.renderers.get(t10.templateId);
      if (!i10) throw new Dr(`Missing renderer for templateId: ` + t10.templateId);
      return i10.renderElement(t10.element, e10, r10.templateData, void 0), t10.size = r10.domNode.offsetHeight, (_a3 = i10.disposeElement) == null ? void 0 : _a3.call(i10, t10.element, e10, r10.templateData, void 0), (_c3 = (_b3 = this.virtualDelegate).setDynamicHeight) == null ? void 0 : _c3.call(_b3, t10.element, t10.size), t10.lastDynamicHeightWidth = this.renderWidth, r10.domNode.remove(), this.cache.release(r10), t10.size - n10;
    }
    getElementDomId(e10) {
      return `${this.domId}_${e10}`;
    }
    dispose() {
      var _a3, _b3, _c3;
      for (let e10 of this.items) if (e10.dragStartDisposable.dispose(), e10.checkedDisposable.dispose(), e10.row) {
        let t10 = this.renderers.get(e10.row.templateId);
        t10 && ((_a3 = t10.disposeElement) == null ? void 0 : _a3.call(t10, e10.element, -1, e10.row.templateData, void 0), t10.disposeTemplate(e10.row.templateData));
      }
      this.items = [], (_b3 = this.domNode) == null ? void 0 : _b3.remove(), (_c3 = this.dragOverAnimationDisposable) == null ? void 0 : _c3.dispose(), this.disposables.dispose();
    }
  }, _ha.InstanceCount = 0, _ha);
  qP([
    PE
  ], tF.prototype, `onMouseClick`, null), qP([
    PE
  ], tF.prototype, `onMouseDblClick`, null), qP([
    PE
  ], tF.prototype, `onMouseMiddleClick`, null), qP([
    PE
  ], tF.prototype, `onMouseDown`, null), qP([
    PE
  ], tF.prototype, `onMouseOver`, null), qP([
    PE
  ], tF.prototype, `onMouseOut`, null), qP([
    PE
  ], tF.prototype, `onContextMenu`, null), qP([
    PE
  ], tF.prototype, `onTouchStart`, null), qP([
    PE
  ], tF.prototype, `onTap`, null);
  var nF = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, rF = class {
    constructor(e10) {
      this.trait = e10, this.renderedElements = [];
    }
    get templateId() {
      return `template:${this.trait.name}`;
    }
    renderTemplate(e10) {
      return e10;
    }
    renderElement(e10, t10, n10) {
      let r10 = this.renderedElements.findIndex((e11) => e11.templateData === n10);
      if (r10 >= 0) {
        let e11 = this.renderedElements[r10];
        this.trait.unrender(n10), e11.index = t10;
      } else {
        let e11 = {
          index: t10,
          templateData: n10
        };
        this.renderedElements.push(e11);
      }
      this.trait.renderIndex(t10, n10);
    }
    splice(e10, t10, n10) {
      let r10 = [];
      for (let i10 of this.renderedElements) i10.index < e10 ? r10.push(i10) : i10.index >= e10 + t10 && r10.push({
        index: i10.index + n10 - t10,
        templateData: i10.templateData
      });
      this.renderedElements = r10;
    }
    renderIndexes(e10) {
      for (let { index: t10, templateData: n10 } of this.renderedElements) e10.indexOf(t10) > -1 && this.trait.renderIndex(t10, n10);
    }
    disposeTemplate(e10) {
      let t10 = this.renderedElements.findIndex((t11) => t11.templateData === e10);
      t10 < 0 || this.renderedElements.splice(t10, 1);
    }
  }, iF = class {
    get name() {
      return this._trait;
    }
    get renderer() {
      return new rF(this);
    }
    constructor(e10) {
      this._trait = e10, this.indexes = [], this.sortedIndexes = [], this._onChange = new N(), this.onChange = this._onChange.event;
    }
    splice(e10, t10, n10) {
      let r10 = n10.length - t10, i10 = e10 + t10, a10 = [], o10 = 0;
      for (; o10 < this.sortedIndexes.length && this.sortedIndexes[o10] < e10; ) a10.push(this.sortedIndexes[o10++]);
      for (let t11 = 0; t11 < n10.length; t11++) n10[t11] && a10.push(t11 + e10);
      for (; o10 < this.sortedIndexes.length && this.sortedIndexes[o10] >= i10; ) a10.push(this.sortedIndexes[o10++] + r10);
      this.renderer.splice(e10, t10, n10.length), this._set(a10, a10);
    }
    renderIndex(e10, t10) {
      t10.classList.toggle(this._trait, this.contains(e10));
    }
    unrender(e10) {
      e10.classList.remove(this._trait);
    }
    set(e10, t10) {
      return this._set(e10, [
        ...e10
      ].sort(MF), t10);
    }
    _set(e10, t10, n10) {
      let r10 = this.indexes, i10 = this.sortedIndexes;
      this.indexes = e10, this.sortedIndexes = t10;
      let a10 = AF(i10, e10);
      return this.renderer.renderIndexes(a10), this._onChange.fire({
        indexes: e10,
        browserEvent: n10
      }), r10;
    }
    get() {
      return this.indexes;
    }
    contains(e10) {
      return d(this.sortedIndexes, e10, MF) >= 0;
    }
    dispose() {
      Rr(this._onChange);
    }
  };
  nF([
    PE
  ], iF.prototype, `renderer`, null);
  var aF = class extends iF {
    constructor(e10) {
      super(`selected`), this.setAriaSelected = e10;
    }
    renderIndex(e10, t10) {
      super.renderIndex(e10, t10), this.setAriaSelected && (this.contains(e10) ? t10.setAttribute(`aria-selected`, `true`) : t10.setAttribute(`aria-selected`, `false`));
    }
  }, oF = class {
    constructor(e10, t10, n10) {
      this.trait = e10, this.view = t10, this.identityProvider = n10;
    }
    splice(e10, t10, n10) {
      if (!this.identityProvider) return this.trait.splice(e10, t10, Array(n10.length).fill(false));
      let r10 = this.trait.get().map((e11) => this.identityProvider.getId(this.view.element(e11)).toString());
      if (r10.length === 0) return this.trait.splice(e10, t10, Array(n10.length).fill(false));
      let i10 = new Set(r10), a10 = n10.map((e11) => i10.has(this.identityProvider.getId(e11).toString()));
      this.trait.splice(e10, t10, a10);
    }
  };
  function sF(e10) {
    return e10.tagName === `INPUT` || e10.tagName === `TEXTAREA`;
  }
  function cF(e10, t10) {
    return e10.classList.contains(t10) ? true : e10.classList.contains(`monaco-list`) || !e10.parentElement ? false : cF(e10.parentElement, t10);
  }
  function lF(e10) {
    return cF(e10, `monaco-editor`);
  }
  function uF(e10) {
    return cF(e10, `monaco-custom-toggle`);
  }
  function dF(e10) {
    return cF(e10, `action-item`);
  }
  function fF(e10) {
    return cF(e10, `monaco-tree-sticky-row`);
  }
  function pF(e10) {
    return e10.classList.contains(`monaco-tree-sticky-container`);
  }
  function mF(e10) {
    return e10.tagName === `A` && e10.classList.contains(`monaco-button`) || e10.tagName === `DIV` && e10.classList.contains(`monaco-button-dropdown`) ? true : e10.classList.contains(`monaco-list`) || !e10.parentElement ? false : mF(e10.parentElement);
  }
  var hF = class {
    get onKeyDown() {
      return M.chain(this.disposables.add(new bD(this.view.domNode, `keydown`)).event, (e10) => e10.filter((e11) => !sF(e11.target)).map((e11) => new Hc(e11)));
    }
    constructor(e10, t10, n10) {
      this.list = e10, this.view = t10, this.disposables = new A(), this.multipleSelectionDisposables = new A(), this.multipleSelectionSupport = n10.multipleSelectionSupport, this.disposables.add(this.onKeyDown((e11) => {
        switch (e11.keyCode) {
          case 3:
            return this.onEnter(e11);
          case 16:
            return this.onUpArrow(e11);
          case 18:
            return this.onDownArrow(e11);
          case 11:
            return this.onPageUpArrow(e11);
          case 12:
            return this.onPageDownArrow(e11);
          case 9:
            return this.onEscape(e11);
          case 31:
            this.multipleSelectionSupport && (E ? e11.metaKey : e11.ctrlKey) && this.onCtrlA(e11);
        }
      }));
    }
    updateOptions(e10) {
      e10.multipleSelectionSupport !== void 0 && (this.multipleSelectionSupport = e10.multipleSelectionSupport);
    }
    onEnter(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.setSelection(this.list.getFocus(), e10.browserEvent);
    }
    onUpArrow(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.focusPrevious(1, false, e10.browserEvent);
      let t10 = this.list.getFocus()[0];
      this.list.setAnchor(t10), this.list.reveal(t10), this.view.domNode.focus();
    }
    onDownArrow(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.focusNext(1, false, e10.browserEvent);
      let t10 = this.list.getFocus()[0];
      this.list.setAnchor(t10), this.list.reveal(t10), this.view.domNode.focus();
    }
    onPageUpArrow(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.focusPreviousPage(e10.browserEvent);
      let t10 = this.list.getFocus()[0];
      this.list.setAnchor(t10), this.list.reveal(t10), this.view.domNode.focus();
    }
    onPageDownArrow(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.focusNextPage(e10.browserEvent);
      let t10 = this.list.getFocus()[0];
      this.list.setAnchor(t10), this.list.reveal(t10), this.view.domNode.focus();
    }
    onCtrlA(e10) {
      e10.preventDefault(), e10.stopPropagation(), this.list.setSelection(w(this.list.length), e10.browserEvent), this.list.setAnchor(void 0), this.view.domNode.focus();
    }
    onEscape(e10) {
      this.list.getSelection().length && (e10.preventDefault(), e10.stopPropagation(), this.list.setSelection([], e10.browserEvent), this.list.setAnchor(void 0), this.view.domNode.focus());
    }
    dispose() {
      this.disposables.dispose(), this.multipleSelectionDisposables.dispose();
    }
  };
  nF([
    PE
  ], hF.prototype, `onKeyDown`, null);
  var gF;
  (function(e10) {
    e10[e10.Automatic = 0] = `Automatic`, e10[e10.Trigger = 1] = `Trigger`;
  })(gF || (gF = {}));
  var _F;
  (function(e10) {
    e10[e10.Idle = 0] = `Idle`, e10[e10.Typing = 1] = `Typing`;
  })(_F || (_F = {}));
  const vF = new class {
    mightProducePrintableCharacter(e10) {
      return e10.ctrlKey || e10.metaKey || e10.altKey ? false : e10.keyCode >= 31 && e10.keyCode <= 56 || e10.keyCode >= 21 && e10.keyCode <= 30 || e10.keyCode >= 98 && e10.keyCode <= 107 || e10.keyCode >= 85 && e10.keyCode <= 95;
    }
  }();
  var yF = class {
    constructor(e10, t10, n10, r10, i10) {
      this.list = e10, this.view = t10, this.keyboardNavigationLabelProvider = n10, this.keyboardNavigationEventFilter = r10, this.delegate = i10, this.enabled = false, this.state = _F.Idle, this.mode = gF.Automatic, this.triggered = false, this.previouslyFocused = -1, this.enabledDisposables = new A(), this.disposables = new A(), this.updateOptions(e10.options);
    }
    updateOptions(e10) {
      e10.typeNavigationEnabled ?? true ? this.enable() : this.disable(), this.mode = e10.typeNavigationMode ?? gF.Automatic;
    }
    enable() {
      if (this.enabled) return;
      let e10 = false, t10 = M.chain(this.enabledDisposables.add(new bD(this.view.domNode, `keydown`)).event, (t11) => t11.filter((e11) => !sF(e11.target)).filter(() => this.mode === gF.Automatic || this.triggered).map((e11) => new Hc(e11)).filter((t12) => e10 || this.keyboardNavigationEventFilter(t12)).filter((e11) => this.delegate.mightProducePrintableCharacter(e11)).forEach((e11) => Zd.stop(e11, true)).map((e11) => e11.browserEvent.key)), n10 = M.debounce(t10, () => null, 800, void 0, void 0, void 0, this.enabledDisposables), r10 = M.reduce(M.any(t10, n10), (e11, t11) => t11 === null ? null : (e11 || ``) + t11, void 0, this.enabledDisposables);
      r10(this.onInput, this, this.enabledDisposables), n10(this.onClear, this, this.enabledDisposables), t10(() => e10 = true, void 0, this.enabledDisposables), n10(() => e10 = false, void 0, this.enabledDisposables), this.enabled = true, this.triggered = false;
    }
    disable() {
      this.enabled && (this.enabledDisposables.clear(), this.enabled = false, this.triggered = false);
    }
    onClear() {
      var _a3;
      let e10 = this.list.getFocus();
      if (e10.length > 0 && e10[0] === this.previouslyFocused) {
        let t10 = (_a3 = this.list.options.accessibilityProvider) == null ? void 0 : _a3.getAriaLabel(this.list.element(e10[0]));
        typeof t10 == `string` ? JA(t10) : t10 && JA(t10.get());
      }
      this.previouslyFocused = -1;
    }
    onInput(e10) {
      if (!e10) {
        this.state = _F.Idle, this.triggered = false;
        return;
      }
      let t10 = this.list.getFocus(), n10 = t10.length > 0 ? t10[0] : 0, r10 = this.state === _F.Idle ? 1 : 0;
      this.state = _F.Typing;
      for (let t11 = 0; t11 < this.list.length; t11++) {
        let i10 = (n10 + t11 + r10) % this.list.length, a10 = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(this.view.element(i10)), o10 = a10 && a10.toString();
        if (this.list.options.typeNavigationEnabled) {
          if (o10 !== void 0) {
            if (UD(e10, o10)) {
              this.previouslyFocused = n10, this.list.setFocus([
                i10
              ]), this.list.reveal(i10);
              return;
            }
            let t12 = yO(e10, o10);
            if (t12) {
              let e11 = t12[0].end - t12[0].start;
              if (e11 > 1 && t12.length === 1) {
                this.previouslyFocused = n10, this.list.setFocus([
                  i10
                ]), this.list.reveal(i10);
                return;
              }
            }
          }
        } else if (o10 === void 0 || UD(e10, o10)) {
          this.previouslyFocused = n10, this.list.setFocus([
            i10
          ]), this.list.reveal(i10);
          return;
        }
      }
    }
    dispose() {
      this.disable(), this.enabledDisposables.dispose(), this.disposables.dispose();
    }
  }, bF = class {
    constructor(e10, t10) {
      this.list = e10, this.view = t10, this.disposables = new A();
      let n10 = M.chain(this.disposables.add(new bD(t10.domNode, `keydown`)).event, (e11) => e11.filter((e12) => !sF(e12.target)).map((e12) => new Hc(e12))), r10 = M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 2 && !e12.ctrlKey && !e12.metaKey && !e12.shiftKey && !e12.altKey));
      r10(this.onTab, this, this.disposables);
    }
    onTab(e10) {
      if (e10.target !== this.view.domNode) return;
      let t10 = this.list.getFocus();
      if (t10.length === 0) return;
      let n10 = this.view.domElement(t10[0]);
      if (!n10) return;
      let r10 = n10.querySelector(`[tabIndex]`);
      if (!r10 || !Gd(r10) || r10.tabIndex === -1) return;
      let i10 = R(r10).getComputedStyle(r10);
      i10.visibility === `hidden` || i10.display === `none` || (e10.preventDefault(), e10.stopPropagation(), r10.focus());
    }
    dispose() {
      this.disposables.dispose();
    }
  };
  function xF(e10) {
    return E ? e10.browserEvent.metaKey : e10.browserEvent.ctrlKey;
  }
  function SF(e10) {
    return e10.browserEvent.shiftKey;
  }
  function CF(e10) {
    return Jd(e10) && e10.button === 2;
  }
  const wF = {
    isSelectionSingleChangeEvent: xF,
    isSelectionRangeChangeEvent: SF
  };
  var TF = class {
    constructor(e10) {
      this.list = e10, this.disposables = new A(), this._onPointer = new N(), this.onPointer = this._onPointer.event, e10.options.multipleSelectionSupport !== false && (this.multipleSelectionController = this.list.options.multipleSelectionController || wF), this.mouseSupport = e10.options.mouseSupport === void 0 || !!e10.options.mouseSupport, this.mouseSupport && (e10.onMouseDown(this.onMouseDown, this, this.disposables), e10.onContextMenu(this.onContextMenu, this, this.disposables), e10.onMouseDblClick(this.onDoubleClick, this, this.disposables), e10.onTouchStart(this.onMouseDown, this, this.disposables), this.disposables.add(LE.addTarget(e10.getHTMLElement()))), M.any(e10.onMouseClick, e10.onMouseMiddleClick, e10.onTap)(this.onViewPointer, this, this.disposables);
    }
    updateOptions(e10) {
      e10.multipleSelectionSupport !== void 0 && (this.multipleSelectionController = void 0, e10.multipleSelectionSupport && (this.multipleSelectionController = this.list.options.multipleSelectionController || wF));
    }
    isSelectionSingleChangeEvent(e10) {
      return this.multipleSelectionController ? this.multipleSelectionController.isSelectionSingleChangeEvent(e10) : false;
    }
    isSelectionRangeChangeEvent(e10) {
      return this.multipleSelectionController ? this.multipleSelectionController.isSelectionRangeChangeEvent(e10) : false;
    }
    isSelectionChangeEvent(e10) {
      return this.isSelectionSingleChangeEvent(e10) || this.isSelectionRangeChangeEvent(e10);
    }
    onMouseDown(e10) {
      lF(e10.browserEvent.target) || Od() !== e10.browserEvent.target && this.list.domFocus();
    }
    onContextMenu(e10) {
      if (sF(e10.browserEvent.target) || lF(e10.browserEvent.target)) return;
      let t10 = e10.index === void 0 ? [] : [
        e10.index
      ];
      this.list.setFocus(t10, e10.browserEvent);
    }
    onViewPointer(e10) {
      if (!this.mouseSupport || sF(e10.browserEvent.target) || lF(e10.browserEvent.target) || e10.browserEvent.isHandledByList) return;
      e10.browserEvent.isHandledByList = true;
      let t10 = e10.index;
      if (t10 === void 0) {
        this.list.setFocus([], e10.browserEvent), this.list.setSelection([], e10.browserEvent), this.list.setAnchor(void 0);
        return;
      }
      if (this.isSelectionChangeEvent(e10)) return this.changeSelection(e10);
      this.list.setFocus([
        t10
      ], e10.browserEvent), this.list.setAnchor(t10), CF(e10.browserEvent) || this.list.setSelection([
        t10
      ], e10.browserEvent), this._onPointer.fire(e10);
    }
    onDoubleClick(e10) {
      if (sF(e10.browserEvent.target) || lF(e10.browserEvent.target) || this.isSelectionChangeEvent(e10) || e10.browserEvent.isHandledByList) return;
      e10.browserEvent.isHandledByList = true;
      let t10 = this.list.getFocus();
      this.list.setSelection(t10, e10.browserEvent);
    }
    changeSelection(e10) {
      let t10 = e10.index, n10 = this.list.getAnchor();
      if (this.isSelectionRangeChangeEvent(e10)) {
        if (n10 === void 0) {
          let e11 = this.list.getFocus()[0];
          n10 = e11 ?? t10, this.list.setAnchor(n10);
        }
        let r10 = Math.min(n10, t10), i10 = Math.max(n10, t10), a10 = w(r10, i10 + 1), o10 = this.list.getSelection(), s10 = kF(AF(o10, [
          n10
        ]), n10);
        if (s10.length === 0) return;
        let c10 = AF(a10, jF(o10, s10));
        this.list.setSelection(c10, e10.browserEvent), this.list.setFocus([
          t10
        ], e10.browserEvent);
      } else if (this.isSelectionSingleChangeEvent(e10)) {
        let n11 = this.list.getSelection(), r10 = n11.filter((e11) => e11 !== t10);
        this.list.setFocus([
          t10
        ]), this.list.setAnchor(t10), n11.length === r10.length ? this.list.setSelection([
          ...r10,
          t10
        ], e10.browserEvent) : this.list.setSelection(r10, e10.browserEvent);
      }
    }
    dispose() {
      this.disposables.dispose();
    }
  }, EF = class {
    constructor(e10, t10) {
      this.styleElement = e10, this.selectorSuffix = t10;
    }
    style(e10) {
      let t10 = this.selectorSuffix && `.${this.selectorSuffix}`, n10 = [];
      e10.listBackground && n10.push(`.monaco-list${t10} .monaco-list-rows { background: ${e10.listBackground}; }`), e10.listFocusBackground && (n10.push(`.monaco-list${t10}:focus .monaco-list-row.focused { background-color: ${e10.listFocusBackground}; }`), n10.push(`.monaco-list${t10}:focus .monaco-list-row.focused:hover { background-color: ${e10.listFocusBackground}; }`)), e10.listFocusForeground && n10.push(`.monaco-list${t10}:focus .monaco-list-row.focused { color: ${e10.listFocusForeground}; }`), e10.listActiveSelectionBackground && (n10.push(`.monaco-list${t10}:focus .monaco-list-row.selected { background-color: ${e10.listActiveSelectionBackground}; }`), n10.push(`.monaco-list${t10}:focus .monaco-list-row.selected:hover { background-color: ${e10.listActiveSelectionBackground}; }`)), e10.listActiveSelectionForeground && n10.push(`.monaco-list${t10}:focus .monaco-list-row.selected { color: ${e10.listActiveSelectionForeground}; }`), e10.listActiveSelectionIconForeground && n10.push(`.monaco-list${t10}:focus .monaco-list-row.selected .codicon { color: ${e10.listActiveSelectionIconForeground}; }`), e10.listFocusAndSelectionBackground && n10.push(`
				.monaco-drag-image,
				.monaco-list${t10}:focus .monaco-list-row.selected.focused { background-color: ${e10.listFocusAndSelectionBackground}; }
			`), e10.listFocusAndSelectionForeground && n10.push(`
				.monaco-drag-image,
				.monaco-list${t10}:focus .monaco-list-row.selected.focused { color: ${e10.listFocusAndSelectionForeground}; }
			`), e10.listInactiveFocusForeground && (n10.push(`.monaco-list${t10} .monaco-list-row.focused { color:  ${e10.listInactiveFocusForeground}; }`), n10.push(`.monaco-list${t10} .monaco-list-row.focused:hover { color:  ${e10.listInactiveFocusForeground}; }`)), e10.listInactiveSelectionIconForeground && n10.push(`.monaco-list${t10} .monaco-list-row.focused .codicon { color:  ${e10.listInactiveSelectionIconForeground}; }`), e10.listInactiveFocusBackground && (n10.push(`.monaco-list${t10} .monaco-list-row.focused { background-color:  ${e10.listInactiveFocusBackground}; }`), n10.push(`.monaco-list${t10} .monaco-list-row.focused:hover { background-color:  ${e10.listInactiveFocusBackground}; }`)), e10.listInactiveSelectionBackground && (n10.push(`.monaco-list${t10} .monaco-list-row.selected { background-color:  ${e10.listInactiveSelectionBackground}; }`), n10.push(`.monaco-list${t10} .monaco-list-row.selected:hover { background-color:  ${e10.listInactiveSelectionBackground}; }`)), e10.listInactiveSelectionForeground && n10.push(`.monaco-list${t10} .monaco-list-row.selected { color: ${e10.listInactiveSelectionForeground}; }`), e10.listHoverBackground && n10.push(`.monaco-list${t10}:not(.drop-target):not(.dragging) .monaco-list-row:hover:not(.selected):not(.focused) { background-color: ${e10.listHoverBackground}; }`), e10.listHoverForeground && n10.push(`.monaco-list${t10}:not(.drop-target):not(.dragging) .monaco-list-row:hover:not(.selected):not(.focused) { color:  ${e10.listHoverForeground}; }`);
      let r10 = vf(e10.listFocusAndSelectionOutline, vf(e10.listSelectionOutline, e10.listFocusOutline ?? ``));
      r10 && n10.push(`.monaco-list${t10}:focus .monaco-list-row.focused.selected { outline: 1px solid ${r10}; outline-offset: -1px;}`), e10.listFocusOutline && n10.push(`
				.monaco-drag-image,
				.monaco-list${t10}:focus .monaco-list-row.focused { outline: 1px solid ${e10.listFocusOutline}; outline-offset: -1px; }
				.monaco-workbench.context-menu-visible .monaco-list${t10}.last-focused .monaco-list-row.focused { outline: 1px solid ${e10.listFocusOutline}; outline-offset: -1px; }
			`);
      let i10 = vf(e10.listSelectionOutline, e10.listInactiveFocusOutline ?? ``);
      i10 && n10.push(`.monaco-list${t10} .monaco-list-row.focused.selected { outline: 1px dotted ${i10}; outline-offset: -1px; }`), e10.listSelectionOutline && n10.push(`.monaco-list${t10} .monaco-list-row.selected { outline: 1px dotted ${e10.listSelectionOutline}; outline-offset: -1px; }`), e10.listInactiveFocusOutline && n10.push(`.monaco-list${t10} .monaco-list-row.focused { outline: 1px dotted ${e10.listInactiveFocusOutline}; outline-offset: -1px; }`), e10.listHoverOutline && n10.push(`.monaco-list${t10} .monaco-list-row:hover { outline: 1px dashed ${e10.listHoverOutline}; outline-offset: -1px; }`), e10.listDropOverBackground && n10.push(`
				.monaco-list${t10}.drop-target,
				.monaco-list${t10} .monaco-list-rows.drop-target,
				.monaco-list${t10} .monaco-list-row.drop-target { background-color: ${e10.listDropOverBackground} !important; color: inherit !important; }
			`), e10.listDropBetweenBackground && (n10.push(`
			.monaco-list${t10} .monaco-list-rows.drop-target-before .monaco-list-row:first-child::before,
			.monaco-list${t10} .monaco-list-row.drop-target-before::before {
				content: ""; position: absolute; top: 0px; left: 0px; width: 100%; height: 1px;
				background-color: ${e10.listDropBetweenBackground};
			}`), n10.push(`
			.monaco-list${t10} .monaco-list-rows.drop-target-after .monaco-list-row:last-child::after,
			.monaco-list${t10} .monaco-list-row.drop-target-after::after {
				content: ""; position: absolute; bottom: 0px; left: 0px; width: 100%; height: 1px;
				background-color: ${e10.listDropBetweenBackground};
			}`)), e10.tableColumnsBorder && n10.push(`
				.monaco-table > .monaco-split-view2,
				.monaco-table > .monaco-split-view2 .monaco-sash.vertical::before,
				.monaco-workbench:not(.reduce-motion) .monaco-table:hover > .monaco-split-view2,
				.monaco-workbench:not(.reduce-motion) .monaco-table:hover > .monaco-split-view2 .monaco-sash.vertical::before {
					border-color: ${e10.tableColumnsBorder};
				}

				.monaco-workbench:not(.reduce-motion) .monaco-table > .monaco-split-view2,
				.monaco-workbench:not(.reduce-motion) .monaco-table > .monaco-split-view2 .monaco-sash.vertical::before {
					border-color: transparent;
				}
			`), e10.tableOddRowsBackgroundColor && n10.push(`
				.monaco-table .monaco-list-row[data-parity=odd]:not(.focused):not(.selected):not(:hover) .monaco-table-tr,
				.monaco-table .monaco-list:not(:focus) .monaco-list-row[data-parity=odd].focused:not(.selected):not(:hover) .monaco-table-tr,
				.monaco-table .monaco-list:not(.focused) .monaco-list-row[data-parity=odd].focused:not(.selected):not(:hover) .monaco-table-tr {
					background-color: ${e10.tableOddRowsBackgroundColor};
				}
			`), this.styleElement.textContent = n10.join(`
`);
    }
  };
  const DF = {
    listFocusBackground: `#7FB0D0`,
    listActiveSelectionBackground: `#0E639C`,
    listActiveSelectionForeground: `#FFFFFF`,
    listActiveSelectionIconForeground: `#FFFFFF`,
    listFocusAndSelectionOutline: `#90C2F9`,
    listFocusAndSelectionBackground: `#094771`,
    listFocusAndSelectionForeground: `#FFFFFF`,
    listInactiveSelectionBackground: `#3F3F46`,
    listInactiveSelectionIconForeground: `#FFFFFF`,
    listHoverBackground: `#2A2D2E`,
    listDropOverBackground: `#383B3D`,
    listDropBetweenBackground: `#EEEEEE`,
    treeIndentGuidesStroke: `#a9a9a9`,
    treeInactiveIndentGuidesStroke: K.fromHex(`#a9a9a9`).transparent(0.4).toString(),
    tableColumnsBorder: K.fromHex(`#cccccc`).transparent(0.2).toString(),
    tableOddRowsBackgroundColor: K.fromHex(`#cccccc`).transparent(0.04).toString(),
    listBackground: void 0,
    listFocusForeground: void 0,
    listInactiveSelectionForeground: void 0,
    listInactiveFocusForeground: void 0,
    listInactiveFocusBackground: void 0,
    listHoverForeground: void 0,
    listFocusOutline: void 0,
    listInactiveFocusOutline: void 0,
    listSelectionOutline: void 0,
    listHoverOutline: void 0,
    treeStickyScrollBackground: void 0,
    treeStickyScrollBorder: void 0,
    treeStickyScrollShadow: void 0
  }, OF = {
    keyboardSupport: true,
    mouseSupport: true,
    multipleSelectionSupport: true,
    dnd: {
      getDragURI() {
        return null;
      },
      onDragStart() {
      },
      onDragOver() {
        return false;
      },
      drop() {
      },
      dispose() {
      }
    }
  };
  function kF(e10, t10) {
    let n10 = e10.indexOf(t10);
    if (n10 === -1) return [];
    let r10 = [], i10 = n10 - 1;
    for (; i10 >= 0 && e10[i10] === t10 - (n10 - i10); ) r10.push(e10[i10--]);
    for (r10.reverse(), i10 = n10; i10 < e10.length && e10[i10] === t10 + (i10 - n10); ) r10.push(e10[i10++]);
    return r10;
  }
  function AF(e10, t10) {
    let n10 = [], r10 = 0, i10 = 0;
    for (; r10 < e10.length || i10 < t10.length; ) if (r10 >= e10.length) n10.push(t10[i10++]);
    else if (i10 >= t10.length) n10.push(e10[r10++]);
    else if (e10[r10] === t10[i10]) {
      n10.push(e10[r10]), r10++, i10++;
      continue;
    } else e10[r10] < t10[i10] ? n10.push(e10[r10++]) : n10.push(t10[i10++]);
    return n10;
  }
  function jF(e10, t10) {
    let n10 = [], r10 = 0, i10 = 0;
    for (; r10 < e10.length || i10 < t10.length; ) if (r10 >= e10.length) n10.push(t10[i10++]);
    else if (i10 >= t10.length) n10.push(e10[r10++]);
    else if (e10[r10] === t10[i10]) {
      r10++, i10++;
      continue;
    } else e10[r10] < t10[i10] ? n10.push(e10[r10++]) : i10++;
    return n10;
  }
  const MF = (e10, t10) => e10 - t10;
  let NF, PF, FF;
  NF = class {
    constructor(e10, t10) {
      this._templateId = e10, this.renderers = t10;
    }
    get templateId() {
      return this._templateId;
    }
    renderTemplate(e10) {
      return this.renderers.map((t10) => t10.renderTemplate(e10));
    }
    renderElement(e10, t10, n10, r10) {
      let i10 = 0;
      for (let a10 of this.renderers) a10.renderElement(e10, t10, n10[i10++], r10);
    }
    disposeElement(e10, t10, n10, r10) {
      var _a3;
      let i10 = 0;
      for (let a10 of this.renderers) (_a3 = a10.disposeElement) == null ? void 0 : _a3.call(a10, e10, t10, n10[i10], r10), i10 += 1;
    }
    disposeTemplate(e10) {
      let t10 = 0;
      for (let n10 of this.renderers) n10.disposeTemplate(e10[t10++]);
    }
  };
  PF = class {
    constructor(e10) {
      this.accessibilityProvider = e10, this.templateId = `a18n`;
    }
    renderTemplate(e10) {
      return {
        container: e10,
        disposables: new A()
      };
    }
    renderElement(e10, t10, n10) {
      let r10 = this.accessibilityProvider.getAriaLabel(e10), i10 = r10 && typeof r10 != `string` ? r10 : iP(r10);
      n10.disposables.add(QN((e11) => {
        this.setAriaLabel(e11.readObservable(i10), n10.container);
      }));
      let a10 = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(e10);
      typeof a10 == `number` ? n10.container.setAttribute(`aria-level`, `${a10}`) : n10.container.removeAttribute(`aria-level`);
    }
    setAriaLabel(e10, t10) {
      e10 ? t10.setAttribute(`aria-label`, e10) : t10.removeAttribute(`aria-label`);
    }
    disposeElement(e10, t10, n10, r10) {
      n10.disposables.clear();
    }
    disposeTemplate(e10) {
      e10.disposables.dispose();
    }
  };
  FF = class {
    constructor(e10, t10) {
      this.list = e10, this.dnd = t10;
    }
    getDragElements(e10) {
      let t10 = this.list.getSelectedElements(), n10 = t10.indexOf(e10) > -1 ? t10 : [
        e10
      ];
      return n10;
    }
    getDragURI(e10) {
      return this.dnd.getDragURI(e10);
    }
    getDragLabel(e10, t10) {
      if (this.dnd.getDragLabel) return this.dnd.getDragLabel(e10, t10);
    }
    onDragStart(e10, t10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragStart) == null ? void 0 : _b3.call(_a3, e10, t10);
    }
    onDragOver(e10, t10, n10, r10, i10) {
      return this.dnd.onDragOver(e10, t10, n10, r10, i10);
    }
    onDragLeave(e10, t10, n10, r10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragLeave) == null ? void 0 : _b3.call(_a3, e10, t10, n10, r10);
    }
    onDragEnd(e10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragEnd) == null ? void 0 : _b3.call(_a3, e10);
    }
    drop(e10, t10, n10, r10, i10) {
      this.dnd.drop(e10, t10, n10, r10, i10);
    }
    dispose() {
      this.dnd.dispose();
    }
  };
  IF = class {
    get onDidChangeFocus() {
      return M.map(this.eventBufferer.wrapEvent(this.focus.onChange), (e10) => this.toListEvent(e10), this.disposables);
    }
    get onDidChangeSelection() {
      return M.map(this.eventBufferer.wrapEvent(this.selection.onChange), (e10) => this.toListEvent(e10), this.disposables);
    }
    get domId() {
      return this.view.domId;
    }
    get onDidScroll() {
      return this.view.onDidScroll;
    }
    get onMouseClick() {
      return this.view.onMouseClick;
    }
    get onMouseDblClick() {
      return this.view.onMouseDblClick;
    }
    get onMouseMiddleClick() {
      return this.view.onMouseMiddleClick;
    }
    get onPointer() {
      return this.mouseController.onPointer;
    }
    get onMouseDown() {
      return this.view.onMouseDown;
    }
    get onMouseOver() {
      return this.view.onMouseOver;
    }
    get onMouseOut() {
      return this.view.onMouseOut;
    }
    get onTouchStart() {
      return this.view.onTouchStart;
    }
    get onTap() {
      return this.view.onTap;
    }
    get onContextMenu() {
      let e10 = false, t10 = M.chain(this.disposables.add(new bD(this.view.domNode, `keydown`)).event, (t11) => t11.map((e11) => new Hc(e11)).filter((t12) => e10 = t12.keyCode === 58 || t12.shiftKey && t12.keyCode === 68).map((e11) => Zd.stop(e11, true)).filter(() => false)), n10 = M.chain(this.disposables.add(new bD(this.view.domNode, `keyup`)).event, (t11) => t11.forEach(() => e10 = false).map((e11) => new Hc(e11)).filter((e11) => e11.keyCode === 58 || e11.shiftKey && e11.keyCode === 68).map((e11) => Zd.stop(e11, true)).map(({ browserEvent: e11 }) => {
        let t12 = this.getFocus(), n11 = t12.length ? t12[0] : void 0, r11 = n11 === void 0 ? void 0 : this.view.element(n11), i10 = n11 === void 0 ? this.view.domNode : this.view.domElement(n11);
        return {
          index: n11,
          element: r11,
          anchor: i10,
          browserEvent: e11
        };
      })), r10 = M.chain(this.view.onContextMenu, (t11) => t11.filter((t12) => !e10).map(({ element: e11, index: t12, browserEvent: n11 }) => ({
        element: e11,
        index: t12,
        anchor: new Kc(R(this.view.domNode), n11),
        browserEvent: n11
      })));
      return M.any(t10, n10, r10);
    }
    get onKeyDown() {
      return this.disposables.add(new bD(this.view.domNode, `keydown`)).event;
    }
    get onDidFocus() {
      return M.signal(this.disposables.add(new bD(this.view.domNode, `focus`, true)).event);
    }
    get onDidBlur() {
      return M.signal(this.disposables.add(new bD(this.view.domNode, `blur`, true)).event);
    }
    constructor(e10, t10, n10, r10, i10 = OF) {
      var _a3, _b3, _c3;
      this.user = e10, this._options = i10, this.focus = new iF(`focused`), this.anchor = new iF(`anchor`), this.eventBufferer = new di(), this._ariaLabel = ``, this.disposables = new A(), this._onDidDispose = new N(), this.onDidDispose = this._onDidDispose.event;
      let a10 = this._options.accessibilityProvider && this._options.accessibilityProvider.getWidgetRole ? (_a3 = this._options.accessibilityProvider) == null ? void 0 : _a3.getWidgetRole() : `list`;
      this.selection = new aF(a10 !== `listbox`);
      let o10 = [
        this.focus.renderer,
        this.selection.renderer
      ];
      this.accessibilityProvider = i10.accessibilityProvider, this.accessibilityProvider && (o10.push(new PF(this.accessibilityProvider)), (_c3 = (_b3 = this.accessibilityProvider).onDidChangeActiveDescendant) == null ? void 0 : _c3.call(_b3, this.onDidChangeActiveDescendant, this, this.disposables)), r10 = r10.map((e11) => new NF(e11.templateId, [
        ...o10,
        e11
      ]));
      let s10 = {
        ...i10,
        dnd: i10.dnd && new FF(this, i10.dnd)
      };
      if (this.view = this.createListView(t10, n10, r10, s10), this.view.domNode.setAttribute(`role`, a10), i10.styleController) this.styleController = i10.styleController(this.view.domId);
      else {
        let e11 = Id(this.view.domNode);
        this.styleController = new EF(e11, this.view.domId);
      }
      if (this.spliceable = new zP([
        new oF(this.focus, this.view, i10.identityProvider),
        new oF(this.selection, this.view, i10.identityProvider),
        new oF(this.anchor, this.view, i10.identityProvider),
        this.view
      ]), this.disposables.add(this.focus), this.disposables.add(this.selection), this.disposables.add(this.anchor), this.disposables.add(this.view), this.disposables.add(this._onDidDispose), this.disposables.add(new bF(this, this.view)), (typeof i10.keyboardSupport != `boolean` || i10.keyboardSupport) && (this.keyboardController = new hF(this, this.view, i10), this.disposables.add(this.keyboardController)), i10.keyboardNavigationLabelProvider) {
        let e11 = i10.keyboardNavigationDelegate || vF;
        this.typeNavigationController = new yF(this, this.view, i10.keyboardNavigationLabelProvider, i10.keyboardNavigationEventFilter ?? (() => true), e11), this.disposables.add(this.typeNavigationController);
      }
      this.mouseController = this.createMouseController(i10), this.disposables.add(this.mouseController), this.onDidChangeFocus(this._onFocusChange, this, this.disposables), this.onDidChangeSelection(this._onSelectionChange, this, this.disposables), this.accessibilityProvider && (this.ariaLabel = this.accessibilityProvider.getWidgetAriaLabel()), this._options.multipleSelectionSupport !== false && this.view.domNode.setAttribute(`aria-multiselectable`, `true`);
    }
    createListView(e10, t10, n10, r10) {
      return new tF(e10, t10, n10, r10);
    }
    createMouseController(e10) {
      return new TF(this);
    }
    updateOptions(e10 = {}) {
      var _a3, _b3;
      this._options = {
        ...this._options,
        ...e10
      }, (_a3 = this.typeNavigationController) == null ? void 0 : _a3.updateOptions(this._options), this._options.multipleSelectionController !== void 0 && (this._options.multipleSelectionSupport ? this.view.domNode.setAttribute(`aria-multiselectable`, `true`) : this.view.domNode.removeAttribute(`aria-multiselectable`)), this.mouseController.updateOptions(e10), (_b3 = this.keyboardController) == null ? void 0 : _b3.updateOptions(e10), this.view.updateOptions(e10);
    }
    get options() {
      return this._options;
    }
    splice(e10, t10, n10 = []) {
      if (e10 < 0 || e10 > this.view.length) throw new BP(this.user, `Invalid start index: ${e10}`);
      if (t10 < 0) throw new BP(this.user, `Invalid delete count: ${t10}`);
      t10 === 0 && n10.length === 0 || this.eventBufferer.bufferEvents(() => this.spliceable.splice(e10, t10, n10));
    }
    rerender() {
      this.view.rerender();
    }
    element(e10) {
      return this.view.element(e10);
    }
    indexOf(e10) {
      return this.view.indexOf(e10);
    }
    indexAt(e10) {
      return this.view.indexAt(e10);
    }
    get length() {
      return this.view.length;
    }
    get contentHeight() {
      return this.view.contentHeight;
    }
    get onDidChangeContentHeight() {
      return this.view.onDidChangeContentHeight;
    }
    get scrollTop() {
      return this.view.getScrollTop();
    }
    set scrollTop(e10) {
      this.view.setScrollTop(e10);
    }
    get scrollHeight() {
      return this.view.scrollHeight;
    }
    get renderHeight() {
      return this.view.renderHeight;
    }
    get firstVisibleIndex() {
      return this.view.firstVisibleIndex;
    }
    get ariaLabel() {
      return this._ariaLabel;
    }
    set ariaLabel(e10) {
      this._ariaLabel = e10, this.view.domNode.setAttribute(`aria-label`, e10);
    }
    domFocus() {
      this.view.domNode.focus({
        preventScroll: true
      });
    }
    layout(e10, t10) {
      this.view.layout(e10, t10);
    }
    setSelection(e10, t10) {
      for (let t11 of e10) if (t11 < 0 || t11 >= this.length) throw new BP(this.user, `Invalid index ${t11}`);
      this.selection.set(e10, t10);
    }
    getSelection() {
      return this.selection.get();
    }
    getSelectedElements() {
      return this.getSelection().map((e10) => this.view.element(e10));
    }
    setAnchor(e10) {
      if (e10 === void 0) {
        this.anchor.set([]);
        return;
      }
      if (e10 < 0 || e10 >= this.length) throw new BP(this.user, `Invalid index ${e10}`);
      this.anchor.set([
        e10
      ]);
    }
    getAnchor() {
      return C(this.anchor.get(), void 0);
    }
    getAnchorElement() {
      let e10 = this.getAnchor();
      return e10 === void 0 ? void 0 : this.element(e10);
    }
    setFocus(e10, t10) {
      for (let t11 of e10) if (t11 < 0 || t11 >= this.length) throw new BP(this.user, `Invalid index ${t11}`);
      this.focus.set(e10, t10);
    }
    focusNext(e10 = 1, t10 = false, n10, r10) {
      if (this.length === 0) return;
      let i10 = this.focus.get(), a10 = this.findNextIndex(i10.length > 0 ? i10[0] + e10 : 0, t10, r10);
      a10 > -1 && this.setFocus([
        a10
      ], n10);
    }
    focusPrevious(e10 = 1, t10 = false, n10, r10) {
      if (this.length === 0) return;
      let i10 = this.focus.get(), a10 = this.findPreviousIndex(i10.length > 0 ? i10[0] - e10 : 0, t10, r10);
      a10 > -1 && this.setFocus([
        a10
      ], n10);
    }
    async focusNextPage(e10, t10) {
      let n10 = this.view.indexAt(this.view.getScrollTop() + this.view.renderHeight);
      n10 = n10 === 0 ? 0 : n10 - 1;
      let r10 = this.getFocus()[0];
      if (r10 !== n10 && (r10 === void 0 || n10 > r10)) {
        let i10 = this.findPreviousIndex(n10, false, t10);
        i10 > -1 && r10 !== i10 ? this.setFocus([
          i10
        ], e10) : this.setFocus([
          n10
        ], e10);
      } else {
        let i10 = this.view.getScrollTop(), a10 = i10 + this.view.renderHeight;
        n10 > r10 && (a10 -= this.view.elementHeight(n10)), this.view.setScrollTop(a10), this.view.getScrollTop() !== i10 && (this.setFocus([]), await rl(0), await this.focusNextPage(e10, t10));
      }
    }
    async focusPreviousPage(e10, t10, n10 = () => 0) {
      let r10, i10 = n10(), a10 = this.view.getScrollTop() + i10;
      r10 = a10 === 0 ? this.view.indexAt(a10) : this.view.indexAfter(a10 - 1);
      let o10 = this.getFocus()[0];
      if (o10 !== r10 && (o10 === void 0 || o10 >= r10)) {
        let n11 = this.findNextIndex(r10, false, t10);
        n11 > -1 && o10 !== n11 ? this.setFocus([
          n11
        ], e10) : this.setFocus([
          r10
        ], e10);
      } else {
        let r11 = a10;
        this.view.setScrollTop(a10 - this.view.renderHeight - i10), this.view.getScrollTop() + n10() !== r11 && (this.setFocus([]), await rl(0), await this.focusPreviousPage(e10, t10, n10));
      }
    }
    focusLast(e10, t10) {
      if (this.length === 0) return;
      let n10 = this.findPreviousIndex(this.length - 1, false, t10);
      n10 > -1 && this.setFocus([
        n10
      ], e10);
    }
    focusFirst(e10, t10) {
      this.focusNth(0, e10, t10);
    }
    focusNth(e10, t10, n10) {
      if (this.length === 0) return;
      let r10 = this.findNextIndex(e10, false, n10);
      r10 > -1 && this.setFocus([
        r10
      ], t10);
    }
    findNextIndex(e10, t10 = false, n10) {
      for (let r10 = 0; r10 < this.length; r10++) {
        if (e10 >= this.length && !t10) return -1;
        if (e10 %= this.length, !n10 || n10(this.element(e10))) return e10;
        e10++;
      }
      return -1;
    }
    findPreviousIndex(e10, t10 = false, n10) {
      for (let r10 = 0; r10 < this.length; r10++) {
        if (e10 < 0 && !t10) return -1;
        if (e10 = (this.length + e10 % this.length) % this.length, !n10 || n10(this.element(e10))) return e10;
        e10--;
      }
      return -1;
    }
    getFocus() {
      return this.focus.get();
    }
    getFocusedElements() {
      return this.getFocus().map((e10) => this.view.element(e10));
    }
    reveal(e10, t10, n10 = 0) {
      if (e10 < 0 || e10 >= this.length) throw new BP(this.user, `Invalid index ${e10}`);
      let r10 = this.view.getScrollTop(), i10 = this.view.elementTop(e10), a10 = this.view.elementHeight(e10);
      if (be(t10)) {
        let e11 = a10 - this.view.renderHeight + n10;
        this.view.setScrollTop(e11 * Ax(t10, 0, 1) + i10 - n10);
      } else {
        let e11 = i10 + a10, t11 = r10 + this.view.renderHeight;
        i10 < r10 + n10 && e11 >= t11 || (i10 < r10 + n10 || e11 >= t11 && a10 >= this.view.renderHeight ? this.view.setScrollTop(i10 - n10) : e11 >= t11 && this.view.setScrollTop(e11 - this.view.renderHeight));
      }
    }
    getRelativeTop(e10, t10 = 0) {
      if (e10 < 0 || e10 >= this.length) throw new BP(this.user, `Invalid index ${e10}`);
      let n10 = this.view.getScrollTop(), r10 = this.view.elementTop(e10), i10 = this.view.elementHeight(e10);
      if (r10 < n10 + t10 || r10 + i10 > n10 + this.view.renderHeight) return null;
      let a10 = i10 - this.view.renderHeight + t10;
      return Math.abs((n10 + t10 - r10) / a10);
    }
    getHTMLElement() {
      return this.view.domNode;
    }
    getScrollableElement() {
      return this.view.scrollableElementDomNode;
    }
    getElementID(e10) {
      return this.view.getElementDomId(e10);
    }
    getElementTop(e10) {
      return this.view.elementTop(e10);
    }
    style(e10) {
      this.styleController.style(e10);
    }
    toListEvent({ indexes: e10, browserEvent: t10 }) {
      return {
        indexes: e10,
        elements: e10.map((e11) => this.view.element(e11)),
        browserEvent: t10
      };
    }
    _onFocusChange() {
      let e10 = this.focus.get();
      this.view.domNode.classList.toggle(`element-focused`, e10.length > 0), this.onDidChangeActiveDescendant();
    }
    onDidChangeActiveDescendant() {
      var _a3;
      let e10 = this.focus.get();
      if (e10.length > 0) {
        let t10;
        ((_a3 = this.accessibilityProvider) == null ? void 0 : _a3.getActiveDescendantId) && (t10 = this.accessibilityProvider.getActiveDescendantId(this.view.element(e10[0]))), this.view.domNode.setAttribute(`aria-activedescendant`, t10 || this.view.getElementDomId(e10[0]));
      } else this.view.domNode.removeAttribute(`aria-activedescendant`);
    }
    _onSelectionChange() {
      let e10 = this.selection.get();
      this.view.domNode.classList.toggle(`selection-none`, e10.length === 0), this.view.domNode.classList.toggle(`selection-single`, e10.length === 1), this.view.domNode.classList.toggle(`selection-multiple`, e10.length > 1);
    }
    dispose() {
      this._onDidDispose.fire(), this.disposables.dispose(), this._onDidDispose.dispose();
    }
  };
  nF([
    PE
  ], IF.prototype, `onDidChangeFocus`, null), nF([
    PE
  ], IF.prototype, `onDidChangeSelection`, null), nF([
    PE
  ], IF.prototype, `onContextMenu`, null), nF([
    PE
  ], IF.prototype, `onKeyDown`, null), nF([
    PE
  ], IF.prototype, `onDidFocus`, null), nF([
    PE
  ], IF.prototype, `onDidBlur`, null);
  const LF = H, RF = `selectOption.entry.template`;
  let zF, BF, VF, HF, UF, GF, KF, qF, JF;
  zF = class {
    get templateId() {
      return RF;
    }
    renderTemplate(e10) {
      let t10 = /* @__PURE__ */ Object.create(null);
      return t10.root = e10, t10.text = V(e10, LF(`.option-text`)), t10.detail = V(e10, LF(`.option-detail`)), t10.decoratorRight = V(e10, LF(`.option-decorator-right`)), t10;
    }
    renderElement(e10, t10, n10) {
      let r10 = n10, i10 = e10.text, a10 = e10.detail, o10 = e10.decoratorRight, s10 = e10.isDisabled;
      r10.text.textContent = i10, r10.detail.textContent = a10 || ``, r10.decoratorRight.innerText = o10 || ``, s10 ? r10.root.classList.add(`option-disabled`) : r10.root.classList.remove(`option-disabled`);
    }
    disposeTemplate(e10) {
    }
  };
  BF = (_ia = class extends j {
    constructor(t10, n10, r10, i10, a10) {
      super(), this.options = [], this._currentSelection = 0, this._hasDetails = false, this._skipLayout = false, this._sticky = false, this._isVisible = false, this.styles = i10, this.selectBoxOptions = a10 || /* @__PURE__ */ Object.create(null), typeof this.selectBoxOptions.minBottomMargin == `number` ? this.selectBoxOptions.minBottomMargin < 0 && (this.selectBoxOptions.minBottomMargin = 0) : this.selectBoxOptions.minBottomMargin = _ia.DEFAULT_DROPDOWN_MINIMUM_BOTTOM_MARGIN, this.selectElement = document.createElement(`select`), this.selectElement.className = `monaco-select-box monaco-select-box-dropdown-padding`, typeof this.selectBoxOptions.ariaLabel == `string` && this.selectElement.setAttribute(`aria-label`, this.selectBoxOptions.ariaLabel), typeof this.selectBoxOptions.ariaDescription == `string` && this.selectElement.setAttribute(`aria-description`, this.selectBoxOptions.ariaDescription), this._onDidSelect = new N(), this._register(this._onDidSelect), this.registerListeners(), this.constructSelectDropDown(r10), this.selected = n10 || 0, t10 && this.setOptions(t10, n10), this.initStyleSheet();
    }
    setTitle(e10) {
      !this._hover && e10 ? this._hover = this._register(RP().setupManagedHover(PP(`mouse`), this.selectElement, e10)) : this._hover && this._hover.update(e10);
    }
    getHeight() {
      return 22;
    }
    getTemplateId() {
      return RF;
    }
    constructSelectDropDown(e10) {
      this.contextViewProvider = e10, this.selectDropDownContainer = H(`.monaco-select-box-dropdown-container`), this.selectDropDownContainer.classList.add(`monaco-select-box-dropdown-padding`), this.selectionDetailsPane = V(this.selectDropDownContainer, LF(`.select-box-details-pane`));
      let t10 = V(this.selectDropDownContainer, LF(`.select-box-dropdown-container-width-control`)), n10 = V(t10, LF(`.width-control-div`));
      this.widthControlElement = document.createElement(`span`), this.widthControlElement.className = `option-text-width-control`, V(n10, this.widthControlElement), this._dropDownPosition = 0, this.styleElement = Id(this.selectDropDownContainer), this.selectDropDownContainer.setAttribute(`draggable`, `true`), this._register(z(this.selectDropDownContainer, B.DRAG_START, (e11) => {
        Zd.stop(e11, true);
      }));
    }
    registerListeners() {
      this._register(td(this.selectElement, `change`, (e11) => {
        this.selected = e11.target.selectedIndex, this._onDidSelect.fire({
          index: e11.target.selectedIndex,
          selected: e11.target.value
        }), this.options[this.selected] && this.options[this.selected].text && this.setTitle(this.options[this.selected].text);
      })), this._register(z(this.selectElement, B.CLICK, (e11) => {
        Zd.stop(e11), this._isVisible ? this.hideSelectDropDown(true) : this.showSelectDropDown();
      })), this._register(z(this.selectElement, B.MOUSE_DOWN, (e11) => {
        Zd.stop(e11);
      }));
      let e10;
      this._register(z(this.selectElement, `touchstart`, (t10) => {
        e10 = this._isVisible;
      })), this._register(z(this.selectElement, `touchend`, (t10) => {
        Zd.stop(t10), e10 ? this.hideSelectDropDown(true) : this.showSelectDropDown();
      })), this._register(z(this.selectElement, B.KEY_DOWN, (e11) => {
        let t10 = new Hc(e11), n10 = false;
        E ? (t10.keyCode === 18 || t10.keyCode === 16 || t10.keyCode === 10 || t10.keyCode === 3) && (n10 = true) : (t10.keyCode === 18 && t10.altKey || t10.keyCode === 16 && t10.altKey || t10.keyCode === 10 || t10.keyCode === 3) && (n10 = true), n10 && (this.showSelectDropDown(), Zd.stop(e11, true));
      }));
    }
    get onDidSelect() {
      return this._onDidSelect.event;
    }
    setOptions(e10, t10) {
      l(this.options, e10) || (this.options = e10, this.selectElement.options.length = 0, this._hasDetails = false, this._cachedMaxDetailsHeight = void 0, this.options.forEach((e11, t11) => {
        this.selectElement.add(this.createOption(e11.text, t11, e11.isDisabled)), typeof e11.description == `string` && (this._hasDetails = true);
      })), t10 !== void 0 && (this.select(t10), this._currentSelection = this.selected);
    }
    setOptionsList() {
      var _a3;
      (_a3 = this.selectList) == null ? void 0 : _a3.splice(0, this.selectList.length, this.options);
    }
    select(e10) {
      e10 >= 0 && e10 < this.options.length ? this.selected = e10 : e10 > this.options.length - 1 ? this.select(this.options.length - 1) : this.selected < 0 && (this.selected = 0), this.selectElement.selectedIndex = this.selected, this.options[this.selected] && this.options[this.selected].text && this.setTitle(this.options[this.selected].text);
    }
    focus() {
      this.selectElement && (this.selectElement.tabIndex = 0, this.selectElement.focus());
    }
    blur() {
      this.selectElement && (this.selectElement.tabIndex = -1, this.selectElement.blur());
    }
    setFocusable(e10) {
      this.selectElement.tabIndex = e10 ? 0 : -1;
    }
    render(e10) {
      this.container = e10, e10.classList.add(`select-container`), e10.appendChild(this.selectElement), this.styleSelectElement();
    }
    initStyleSheet() {
      let e10 = [];
      this.styles.listFocusBackground && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row.focused { background-color: ${this.styles.listFocusBackground} !important; }`), this.styles.listFocusForeground && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row.focused { color: ${this.styles.listFocusForeground} !important; }`), this.styles.decoratorRightForeground && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row:not(.focused) .option-decorator-right { color: ${this.styles.decoratorRightForeground}; }`), this.styles.selectBackground && this.styles.selectBorder && this.styles.selectBorder !== this.styles.selectBackground ? (e10.push(`.monaco-select-box-dropdown-container { border: 1px solid ${this.styles.selectBorder} } `), e10.push(`.monaco-select-box-dropdown-container > .select-box-details-pane.border-top { border-top: 1px solid ${this.styles.selectBorder} } `), e10.push(`.monaco-select-box-dropdown-container > .select-box-details-pane.border-bottom { border-bottom: 1px solid ${this.styles.selectBorder} } `)) : this.styles.selectListBorder && (e10.push(`.monaco-select-box-dropdown-container > .select-box-details-pane.border-top { border-top: 1px solid ${this.styles.selectListBorder} } `), e10.push(`.monaco-select-box-dropdown-container > .select-box-details-pane.border-bottom { border-bottom: 1px solid ${this.styles.selectListBorder} } `)), this.styles.listHoverForeground && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row:not(.option-disabled):not(.focused):hover { color: ${this.styles.listHoverForeground} !important; }`), this.styles.listHoverBackground && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row:not(.option-disabled):not(.focused):hover { background-color: ${this.styles.listHoverBackground} !important; }`), this.styles.listFocusOutline && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row.focused { outline: 1.6px dotted ${this.styles.listFocusOutline} !important; outline-offset: -1.6px !important; }`), this.styles.listHoverOutline && e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row:not(.option-disabled):not(.focused):hover { outline: 1.6px dashed ${this.styles.listHoverOutline} !important; outline-offset: -1.6px !important; }`), e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row.option-disabled.focused { background-color: transparent !important; color: inherit !important; outline: none !important; }`), e10.push(`.monaco-select-box-dropdown-container > .select-box-dropdown-list-container .monaco-list .monaco-list-row.option-disabled:hover { background-color: transparent !important; color: inherit !important; outline: none !important; }`), this.styleElement.textContent = e10.join(`
`);
    }
    styleSelectElement() {
      let e10 = this.styles.selectBackground ?? ``, t10 = this.styles.selectForeground ?? ``, n10 = this.styles.selectBorder ?? ``;
      this.selectElement.style.backgroundColor = e10, this.selectElement.style.color = t10, this.selectElement.style.borderColor = n10;
    }
    styleList() {
      let e10 = this.styles.selectBackground ?? ``, t10 = vf(this.styles.selectListBackground, e10);
      this.selectDropDownListContainer.style.backgroundColor = t10, this.selectionDetailsPane.style.backgroundColor = t10;
      let n10 = this.styles.focusBorder ?? ``;
      this.selectDropDownContainer.style.outlineColor = n10, this.selectDropDownContainer.style.outlineOffset = `-1px`, this.selectList.style(this.styles);
    }
    createOption(e10, t10, n10) {
      let r10 = document.createElement(`option`);
      return r10.value = e10, r10.text = e10, r10.disabled = !!n10, r10;
    }
    showSelectDropDown() {
      this.selectionDetailsPane.innerText = ``, !(!this.contextViewProvider || this._isVisible) && (this.createSelectList(this.selectDropDownContainer), this.setOptionsList(), this.contextViewProvider.showContextView({
        getAnchor: () => this.selectElement,
        render: (e10) => this.renderSelectDropDown(e10, true),
        layout: () => {
          this.layoutSelectDropDown();
        },
        onHide: () => {
          this.selectDropDownContainer.classList.remove(`visible`), this.selectElement.classList.remove(`synthetic-focus`);
        },
        anchorPosition: this._dropDownPosition
      }, this.selectBoxOptions.optionsAsChildren ? this.container : void 0), this._isVisible = true, this.hideSelectDropDown(false), this.contextViewProvider.showContextView({
        getAnchor: () => this.selectElement,
        render: (e10) => this.renderSelectDropDown(e10),
        layout: () => this.layoutSelectDropDown(),
        onHide: () => {
          this.selectDropDownContainer.classList.remove(`visible`), this.selectElement.classList.remove(`synthetic-focus`);
        },
        anchorPosition: this._dropDownPosition
      }, this.selectBoxOptions.optionsAsChildren ? this.container : void 0), this._currentSelection = this.selected, this._isVisible = true, this.selectElement.setAttribute(`aria-expanded`, `true`));
    }
    hideSelectDropDown(e10) {
      !this.contextViewProvider || !this._isVisible || (this._isVisible = false, this.selectElement.setAttribute(`aria-expanded`, `false`), e10 && this.selectElement.focus(), this.contextViewProvider.hideContextView());
    }
    renderSelectDropDown(e10, t10) {
      return e10.appendChild(this.selectDropDownContainer), this.layoutSelectDropDown(t10), {
        dispose: () => {
          this.selectDropDownContainer.remove();
        }
      };
    }
    measureMaxDetailsHeight() {
      let e10 = 0;
      return this.options.forEach((t10, n10) => {
        this.updateDetail(n10), this.selectionDetailsPane.offsetHeight > e10 && (e10 = this.selectionDetailsPane.offsetHeight);
      }), e10;
    }
    layoutSelectDropDown(t10) {
      if (this._skipLayout) return false;
      if (this.selectList) {
        this.selectDropDownContainer.classList.add(`visible`);
        let n10 = R(this.selectElement), r10 = gd(this.selectElement), i10 = R(this.selectElement).getComputedStyle(this.selectElement), a10 = parseFloat(i10.getPropertyValue(`--dropdown-padding-top`)) + parseFloat(i10.getPropertyValue(`--dropdown-padding-bottom`)), o10 = n10.innerHeight - r10.top - r10.height - (this.selectBoxOptions.minBottomMargin || 0), s10 = r10.top - _ia.DEFAULT_DROPDOWN_MINIMUM_TOP_MARGIN, c10 = this.selectElement.offsetWidth, l10 = this.setWidthControlElement(this.widthControlElement), u10 = Math.max(l10, Math.round(c10)).toString() + `px`;
        this.selectDropDownContainer.style.width = u10, this.selectList.getHTMLElement().style.height = ``, this.selectList.layout();
        let d10 = this.selectList.contentHeight;
        this._hasDetails && this._cachedMaxDetailsHeight === void 0 && (this._cachedMaxDetailsHeight = this.measureMaxDetailsHeight());
        let f10 = this._hasDetails ? this._cachedMaxDetailsHeight : 0, p10 = d10 + a10 + f10, m10 = Math.floor((o10 - a10 - f10) / this.getHeight()), h10 = Math.floor((s10 - a10 - f10) / this.getHeight());
        if (t10) return r10.top + r10.height > n10.innerHeight - 22 || r10.top < _ia.DEFAULT_DROPDOWN_MINIMUM_TOP_MARGIN || m10 < 1 && h10 < 1 ? false : (m10 < _ia.DEFAULT_MINIMUM_VISIBLE_OPTIONS && h10 > m10 && this.options.length > m10 ? (this._dropDownPosition = 1, this.selectDropDownListContainer.remove(), this.selectionDetailsPane.remove(), this.selectDropDownContainer.appendChild(this.selectionDetailsPane), this.selectDropDownContainer.appendChild(this.selectDropDownListContainer), this.selectionDetailsPane.classList.remove(`border-top`), this.selectionDetailsPane.classList.add(`border-bottom`)) : (this._dropDownPosition = 0, this.selectDropDownListContainer.remove(), this.selectionDetailsPane.remove(), this.selectDropDownContainer.appendChild(this.selectDropDownListContainer), this.selectDropDownContainer.appendChild(this.selectionDetailsPane), this.selectionDetailsPane.classList.remove(`border-bottom`), this.selectionDetailsPane.classList.add(`border-top`)), true);
        if (r10.top + r10.height > n10.innerHeight - 22 || r10.top < _ia.DEFAULT_DROPDOWN_MINIMUM_TOP_MARGIN || this._dropDownPosition === 0 && m10 < 1 || this._dropDownPosition === 1 && h10 < 1) return this.hideSelectDropDown(true), false;
        if (this._dropDownPosition === 0) {
          if (this._isVisible && m10 + h10 < 1) return this.hideSelectDropDown(true), false;
          p10 > o10 && (d10 = m10 * this.getHeight());
        } else p10 > s10 && (d10 = h10 * this.getHeight());
        return this.selectList.layout(d10), this.selectList.domFocus(), this.selectList.length > 0 && (this.selectList.setFocus([
          this.selected || 0
        ]), this.selectList.reveal(this.selectList.getFocus()[0] || 0)), this._hasDetails ? (this.selectList.getHTMLElement().style.height = d10 + a10 + `px`, this.selectDropDownContainer.style.height = ``) : this.selectDropDownContainer.style.height = d10 + a10 + `px`, this.updateDetail(this.selected), this.selectDropDownContainer.style.width = u10, this.selectDropDownListContainer.setAttribute(`tabindex`, `0`), this.selectElement.classList.add(`synthetic-focus`), this.selectDropDownContainer.classList.add(`synthetic-focus`), true;
      } else return false;
    }
    setWidthControlElement(e10) {
      let t10 = 0;
      if (e10) {
        let n10 = 0, r10 = 0;
        this.options.forEach((e11, t11) => {
          let i10 = e11.detail ? e11.detail.length : 0, a10 = e11.decoratorRight ? e11.decoratorRight.length : 0, o10 = e11.text.length + i10 + a10;
          o10 > r10 && (n10 = t11, r10 = o10);
        }), e10.textContent = this.options[n10].text + (this.options[n10].decoratorRight ? this.options[n10].decoratorRight + ` ` : ``), t10 = vd(e10);
      }
      return t10;
    }
    createSelectList(e10) {
      if (this.selectList) return;
      this.selectDropDownListContainer = V(e10, LF(`.select-box-dropdown-list-container`)), this.listRenderer = new zF(), this.selectList = this._register(new IF(`SelectBoxCustom`, this.selectDropDownListContainer, this, [
        this.listRenderer
      ], {
        useShadows: false,
        verticalScrollMode: 3,
        keyboardSupport: false,
        mouseSupport: false,
        accessibilityProvider: {
          getAriaLabel: (e11) => {
            let t11 = e11.text;
            return e11.detail && (t11 += `. ${e11.detail}`), e11.decoratorRight && (t11 += `. ${e11.decoratorRight}`), e11.description && (t11 += `. ${e11.description}`), t11;
          },
          getWidgetAriaLabel: () => T({
            key: `selectBox`,
            comment: [
              `Behave like native select dropdown element.`
            ]
          }, `Select Box`),
          getRole: () => E ? `` : `option`,
          getWidgetRole: () => `listbox`
        }
      })), this.selectBoxOptions.ariaLabel && (this.selectList.ariaLabel = this.selectBoxOptions.ariaLabel);
      let t10 = this._register(new bD(this.selectDropDownListContainer, `keydown`)), n10 = M.chain(t10.event, (e11) => e11.filter(() => this.selectList.length > 0).map((e12) => new Hc(e12)));
      this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 3))(this.onEnter, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 2))(this.onEnter, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 9))(this.onEscape, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 16))(this.onUpArrow, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 18))(this.onDownArrow, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 12))(this.onPageDown, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 11))(this.onPageUp, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 14))(this.onHome, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode === 13))(this.onEnd, this)), this._register(M.chain(n10, (e11) => e11.filter((e12) => e12.keyCode >= 21 && e12.keyCode <= 56 || e12.keyCode >= 85 && e12.keyCode <= 113))(this.onCharacter, this)), this._register(z(this.selectList.getHTMLElement(), B.POINTER_UP, (e11) => this.onPointerUp(e11))), this._register(this.selectList.onMouseOver((e11) => e11.index !== void 0 && this.selectList.setFocus([
        e11.index
      ]))), this._register(this.selectList.onDidChangeFocus((e11) => this.onListFocus(e11))), this._register(z(this.selectDropDownContainer, B.FOCUS_OUT, (e11) => {
        !this._isVisible || Sd(e11.relatedTarget, this.selectDropDownContainer) || this.onListBlur();
      })), this.selectList.getHTMLElement().setAttribute(`aria-label`, this.selectBoxOptions.ariaLabel || ``), this.selectList.getHTMLElement().setAttribute(`aria-expanded`, `true`), this.styleList();
    }
    onPointerUp(e10) {
      if (!this.selectList.length) return;
      Zd.stop(e10);
      let t10 = e10.target;
      if (!t10 || t10.classList.contains(`slider`)) return;
      let n10 = t10.closest(`.monaco-list-row`);
      if (!n10) return;
      let r10 = Number(n10.getAttribute(`data-index`)), i10 = n10.classList.contains(`option-disabled`);
      r10 >= 0 && r10 < this.options.length && !i10 && (this.selected = r10, this.select(this.selected), this.selectList.setFocus([
        this.selected
      ]), this.selectList.reveal(this.selectList.getFocus()[0]), this.selected !== this._currentSelection && (this._currentSelection = this.selected, this._onDidSelect.fire({
        index: this.selectElement.selectedIndex,
        selected: this.options[this.selected].text
      }), this.options[this.selected] && this.options[this.selected].text && this.setTitle(this.options[this.selected].text)), this.hideSelectDropDown(true));
    }
    onListBlur() {
      this._sticky || (this.selected !== this._currentSelection && this.select(this._currentSelection), this.hideSelectDropDown(false));
    }
    renderDescriptionMarkdown(e10, t10) {
      let n10 = (e11) => {
        for (let t11 = 0; t11 < e11.childNodes.length; t11++) {
          let r11 = e11.childNodes.item(t11), i10 = r11.tagName && r11.tagName.toLowerCase();
          i10 === `img` ? r11.remove() : n10(r11);
        }
      }, r10 = Gk({
        value: e10,
        supportThemeIcons: true
      }, {
        actionHandler: t10
      });
      return r10.element.classList.add(`select-box-description-markdown`), n10(r10.element), r10.element;
    }
    onListFocus(e10) {
      !this._isVisible || !this._hasDetails || this.updateDetail(e10.indexes[0]);
    }
    updateDetail(e10) {
      this.selectionDetailsPane.innerText = ``;
      let t10 = this.options[e10], n10 = (t10 == null ? void 0 : t10.description) ?? ``, r10 = (t10 == null ? void 0 : t10.descriptionIsMarkdown) ?? false;
      if (n10) {
        if (r10) {
          let e11 = t10.descriptionMarkdownActionHandler;
          this.selectionDetailsPane.appendChild(this.renderDescriptionMarkdown(n10, e11));
        } else this.selectionDetailsPane.innerText = n10;
        this.selectionDetailsPane.style.display = `block`;
      } else this.selectionDetailsPane.style.display = `none`;
      this._skipLayout = true, this.contextViewProvider.layout(), this._skipLayout = false;
    }
    onEscape(e10) {
      Zd.stop(e10), this.select(this._currentSelection), this.hideSelectDropDown(true);
    }
    onEnter(e10) {
      Zd.stop(e10), this.selected !== this._currentSelection && (this._currentSelection = this.selected, this._onDidSelect.fire({
        index: this.selectElement.selectedIndex,
        selected: this.options[this.selected].text
      }), this.options[this.selected] && this.options[this.selected].text && this.setTitle(this.options[this.selected].text)), this.hideSelectDropDown(true);
    }
    onDownArrow(e10) {
      if (this.selected < this.options.length - 1) {
        Zd.stop(e10, true);
        let t10 = this.options[this.selected + 1].isDisabled;
        if (t10 && this.options.length > this.selected + 2) this.selected += 2;
        else if (t10) return;
        else this.selected++;
        this.select(this.selected), this.selectList.setFocus([
          this.selected
        ]), this.selectList.reveal(this.selectList.getFocus()[0]);
      }
    }
    onUpArrow(e10) {
      if (this.selected > 0) {
        Zd.stop(e10, true);
        let t10 = this.options[this.selected - 1].isDisabled;
        t10 && this.selected > 1 ? this.selected -= 2 : this.selected--, this.select(this.selected), this.selectList.setFocus([
          this.selected
        ]), this.selectList.reveal(this.selectList.getFocus()[0]);
      }
    }
    onPageUp(e10) {
      Zd.stop(e10), this.selectList.focusPreviousPage(), setTimeout(() => {
        this.selected = this.selectList.getFocus()[0], this.options[this.selected].isDisabled && this.selected < this.options.length - 1 && (this.selected++, this.selectList.setFocus([
          this.selected
        ])), this.selectList.reveal(this.selected), this.select(this.selected);
      }, 1);
    }
    onPageDown(e10) {
      Zd.stop(e10), this.selectList.focusNextPage(), setTimeout(() => {
        this.selected = this.selectList.getFocus()[0], this.options[this.selected].isDisabled && this.selected > 0 && (this.selected--, this.selectList.setFocus([
          this.selected
        ])), this.selectList.reveal(this.selected), this.select(this.selected);
      }, 1);
    }
    onHome(e10) {
      Zd.stop(e10), !(this.options.length < 2) && (this.selected = 0, this.options[this.selected].isDisabled && this.selected > 1 && this.selected++, this.selectList.setFocus([
        this.selected
      ]), this.selectList.reveal(this.selected), this.select(this.selected));
    }
    onEnd(e10) {
      Zd.stop(e10), !(this.options.length < 2) && (this.selected = this.options.length - 1, this.options[this.selected].isDisabled && this.selected > 1 && this.selected--, this.selectList.setFocus([
        this.selected
      ]), this.selectList.reveal(this.selected), this.select(this.selected));
    }
    onCharacter(e10) {
      let t10 = ki.toString(e10.keyCode), n10 = -1;
      for (let r10 = 0; r10 < this.options.length - 1; r10++) if (n10 = (r10 + this.selected + 1) % this.options.length, this.options[n10].text.charAt(0).toUpperCase() === t10 && !this.options[n10].isDisabled) {
        this.select(n10), this.selectList.setFocus([
          n10
        ]), this.selectList.reveal(this.selectList.getFocus()[0]), Zd.stop(e10);
        break;
      }
    }
    dispose() {
      this.hideSelectDropDown(false), super.dispose();
    }
  }, _ia.DEFAULT_DROPDOWN_MINIMUM_BOTTOM_MARGIN = 32, _ia.DEFAULT_DROPDOWN_MINIMUM_TOP_MARGIN = 2, _ia.DEFAULT_MINIMUM_VISIBLE_OPTIONS = 3, _ia);
  VF = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this.selected = 0, this.selectBoxOptions = r10 || /* @__PURE__ */ Object.create(null), this.options = [], this.selectElement = document.createElement(`select`), this.selectElement.className = `monaco-select-box`, typeof this.selectBoxOptions.ariaLabel == `string` && this.selectElement.setAttribute(`aria-label`, this.selectBoxOptions.ariaLabel), typeof this.selectBoxOptions.ariaDescription == `string` && this.selectElement.setAttribute(`aria-description`, this.selectBoxOptions.ariaDescription), this._onDidSelect = this._register(new N()), this.styles = n10, this.registerListeners(), this.setOptions(e10, t10);
    }
    registerListeners() {
      this._register(LE.addTarget(this.selectElement)), [
        IE.Tap
      ].forEach((e10) => {
        this._register(z(this.selectElement, e10, (e11) => {
          this.selectElement.focus();
        }));
      }), this._register(td(this.selectElement, `click`, (e10) => {
        Zd.stop(e10, true);
      })), this._register(td(this.selectElement, `change`, (e10) => {
        this.selectElement.title = e10.target.value, this._onDidSelect.fire({
          index: e10.target.selectedIndex,
          selected: e10.target.value
        });
      })), this._register(td(this.selectElement, `keydown`, (e10) => {
        let t10 = false;
        E ? (e10.keyCode === 18 || e10.keyCode === 16 || e10.keyCode === 10) && (t10 = true) : (e10.keyCode === 18 && e10.altKey || e10.keyCode === 10 || e10.keyCode === 3) && (t10 = true), t10 && e10.stopPropagation();
      }));
    }
    get onDidSelect() {
      return this._onDidSelect.event;
    }
    setOptions(e10, t10) {
      (!this.options || !l(this.options, e10)) && (this.options = e10, this.selectElement.options.length = 0, this.options.forEach((e11, t11) => {
        this.selectElement.add(this.createOption(e11.text, t11, e11.isDisabled));
      })), t10 !== void 0 && this.select(t10);
    }
    select(e10) {
      this.options.length === 0 ? this.selected = 0 : e10 >= 0 && e10 < this.options.length ? this.selected = e10 : e10 > this.options.length - 1 ? this.select(this.options.length - 1) : this.selected < 0 && (this.selected = 0), this.selectElement.selectedIndex = this.selected, this.selected < this.options.length && typeof this.options[this.selected].text == `string` ? this.selectElement.title = this.options[this.selected].text : this.selectElement.title = ``;
    }
    focus() {
      this.selectElement && (this.selectElement.tabIndex = 0, this.selectElement.focus());
    }
    blur() {
      this.selectElement && (this.selectElement.tabIndex = -1, this.selectElement.blur());
    }
    setFocusable(e10) {
      this.selectElement.tabIndex = e10 ? 0 : -1;
    }
    render(e10) {
      e10.classList.add(`select-container`), e10.appendChild(this.selectElement), this.setOptions(this.options, this.selected), this.applyStyles();
    }
    applyStyles() {
      this.selectElement && (this.selectElement.style.backgroundColor = this.styles.selectBackground ?? ``, this.selectElement.style.color = this.styles.selectForeground ?? ``, this.selectElement.style.borderColor = this.styles.selectBorder ?? ``);
    }
    createOption(e10, t10, n10) {
      let r10 = document.createElement(`option`);
      return r10.value = e10, r10.text = e10, r10.disabled = !!n10, r10;
    }
  };
  HF = class extends RE {
    constructor(e10, t10, n10, r10, i10) {
      super(), E && !(i10 == null ? void 0 : i10.useCustomDrawn) ? this.selectBoxDelegate = new VF(e10, t10, r10, i10) : this.selectBoxDelegate = new BF(e10, t10, n10, r10, i10), this._register(this.selectBoxDelegate);
    }
    get onDidSelect() {
      return this.selectBoxDelegate.onDidSelect;
    }
    setOptions(e10, t10) {
      this.selectBoxDelegate.setOptions(e10, t10);
    }
    select(e10) {
      this.selectBoxDelegate.select(e10);
    }
    focus() {
      this.selectBoxDelegate.focus();
    }
    blur() {
      this.selectBoxDelegate.blur();
    }
    setFocusable(e10) {
      this.selectBoxDelegate.setFocusable(e10);
    }
    render(e10) {
      this.selectBoxDelegate.render(e10);
    }
  };
  UF = class extends j {
    get action() {
      return this._action;
    }
    constructor(e10, t10, n10 = {}) {
      super(), this.options = n10, this._context = e10 || this, this._action = t10, t10 instanceof ep && this._register(t10.onDidChange((e11) => {
        this.element && this.handleActionChangeEvent(e11);
      }));
    }
    handleActionChangeEvent(e10) {
      e10.enabled !== void 0 && this.updateEnabled(), e10.checked !== void 0 && this.updateChecked(), e10.class !== void 0 && this.updateClass(), e10.label !== void 0 && (this.updateLabel(), this.updateTooltip()), e10.tooltip !== void 0 && this.updateTooltip();
    }
    get actionRunner() {
      return this._actionRunner || (this._actionRunner = this._register(new tp())), this._actionRunner;
    }
    set actionRunner(e10) {
      this._actionRunner = e10;
    }
    isEnabled() {
      return this._action.enabled;
    }
    setActionContext(e10) {
      this._context = e10;
    }
    render(e10) {
      let t10 = this.element = e10;
      this._register(LE.addTarget(e10));
      let n10 = this.options && this.options.draggable;
      n10 && (e10.draggable = true, Sc && this._register(z(e10, B.DRAG_START, (e11) => {
        var _a3;
        return (_a3 = e11.dataTransfer) == null ? void 0 : _a3.setData(OP.TEXT, this._action.label);
      }))), this._register(z(t10, IE.Tap, (e11) => this.onClick(e11, true))), this._register(z(t10, B.MOUSE_DOWN, (e11) => {
        n10 || Zd.stop(e11, true), this._action.enabled && e11.button === 0 && t10.classList.add(`active`);
      })), E && this._register(z(t10, B.CONTEXT_MENU, (e11) => {
        e11.button === 0 && e11.ctrlKey === true && this.onClick(e11);
      })), this._register(z(t10, B.CLICK, (e11) => {
        Zd.stop(e11, true), this.options && this.options.isMenu || this.onClick(e11);
      })), this._register(z(t10, B.DBLCLICK, (e11) => {
        Zd.stop(e11, true);
      })), [
        B.MOUSE_UP,
        B.MOUSE_OUT
      ].forEach((e11) => {
        this._register(z(t10, e11, (e12) => {
          Zd.stop(e12), t10.classList.remove(`active`);
        }));
      });
    }
    onClick(e10, t10 = false) {
      var _a3;
      Zd.stop(e10, true);
      let n10 = Te(this._context) ? ((_a3 = this.options) == null ? void 0 : _a3.useEventAsContext) ? e10 : {
        preserveFocus: t10
      } : this._context;
      this.actionRunner.run(this._action, n10);
    }
    focus() {
      this.element && (this.element.tabIndex = 0, this.element.focus(), this.element.classList.add(`focused`));
    }
    blur() {
      this.element && (this.element.blur(), this.element.tabIndex = -1, this.element.classList.remove(`focused`));
    }
    setFocusable(e10) {
      this.element && (this.element.tabIndex = e10 ? 0 : -1);
    }
    get trapsArrowNavigation() {
      return false;
    }
    updateEnabled() {
    }
    updateLabel() {
    }
    getClass() {
      return this.action.class;
    }
    getTooltip() {
      return this.action.tooltip;
    }
    updateTooltip() {
      var _a3;
      if (!this.element) return;
      let e10 = this.getTooltip() ?? ``;
      if (this.updateAriaLabel(), (_a3 = this.options.hoverDelegate) == null ? void 0 : _a3.showNativeHover) this.element.title = e10;
      else if (!this.customHover && e10 !== ``) {
        let t10 = this.options.hoverDelegate ?? PP(`element`);
        this.customHover = this._store.add(RP().setupManagedHover(t10, this.element, e10));
      } else this.customHover && this.customHover.update(e10);
    }
    updateAriaLabel() {
      if (this.element) {
        let e10 = this.getTooltip() ?? ``;
        this.element.setAttribute(`aria-label`, e10);
      }
    }
    updateClass() {
    }
    updateChecked() {
    }
    dispose() {
      this.element && (this.element.remove(), this.element = void 0), this._context = void 0, super.dispose();
    }
  };
  WF = class extends UF {
    constructor(e10, t10, n10) {
      super(e10, t10, n10), this.options = n10, this.options.icon = n10.icon === void 0 ? false : n10.icon, this.options.label = n10.label === void 0 ? true : n10.label, this.cssClass = ``;
    }
    render(e10) {
      super.render(e10), Ee(this.element);
      let t10 = document.createElement(`a`);
      if (t10.classList.add(`action-label`), t10.setAttribute(`role`, this.getDefaultAriaRole()), this.label = t10, this.element.appendChild(t10), this.options.label && this.options.keybinding) {
        let e11 = document.createElement(`span`);
        e11.classList.add(`keybinding`), e11.textContent = this.options.keybinding, this.element.appendChild(e11);
      }
      this.updateClass(), this.updateLabel(), this.updateTooltip(), this.updateEnabled(), this.updateChecked();
    }
    getDefaultAriaRole() {
      return this._action.id === np.ID ? `presentation` : this.options.isMenu ? `menuitem` : this.options.isTabList ? `tab` : `button`;
    }
    focus() {
      this.label && (this.label.tabIndex = 0, this.label.focus());
    }
    blur() {
      this.label && (this.label.tabIndex = -1);
    }
    setFocusable(e10) {
      this.label && (this.label.tabIndex = e10 ? 0 : -1);
    }
    updateLabel() {
      this.options.label && this.label && (this.label.textContent = this.action.label);
    }
    getTooltip() {
      let e10 = null;
      return this.action.tooltip ? e10 = this.action.tooltip : !this.options.label && this.action.label && this.options.icon && (e10 = this.action.label, this.options.keybinding && (e10 = T({
        key: `titleLabel`,
        comment: [
          `action title`,
          `action keybinding`
        ]
      }, `{0} ({1})`, e10, this.options.keybinding))), e10 ?? void 0;
    }
    updateClass() {
      var _a3;
      this.cssClass && this.label && this.label.classList.remove(...this.cssClass.split(` `)), this.options.icon ? (this.cssClass = this.getClass(), this.label && (this.label.classList.add(`codicon`), this.cssClass && this.label.classList.add(...this.cssClass.split(` `))), this.updateEnabled()) : (_a3 = this.label) == null ? void 0 : _a3.classList.remove(`codicon`);
    }
    updateEnabled() {
      var _a3, _b3;
      this.action.enabled ? (this.label && (this.label.removeAttribute(`aria-disabled`), this.label.classList.remove(`disabled`)), (_a3 = this.element) == null ? void 0 : _a3.classList.remove(`disabled`)) : (this.label && (this.label.setAttribute(`aria-disabled`, `true`), this.label.classList.add(`disabled`)), (_b3 = this.element) == null ? void 0 : _b3.classList.add(`disabled`));
    }
    updateAriaLabel() {
      if (this.label) {
        let e10 = this.getTooltip() ?? ``;
        this.label.setAttribute(`aria-label`, e10);
      }
    }
    updateChecked() {
      this.label && (this.action.checked === void 0 ? (this.label.classList.remove(`checked`), this.label.removeAttribute(this.options.isTabList ? `aria-selected` : `aria-checked`), this.label.setAttribute(`role`, this.getDefaultAriaRole())) : (this.label.classList.toggle(`checked`, this.action.checked), this.options.isTabList ? this.label.setAttribute(`aria-selected`, this.action.checked ? `true` : `false`) : (this.label.setAttribute(`aria-checked`, this.action.checked ? `true` : `false`), this.label.setAttribute(`role`, `checkbox`))));
    }
  };
  GF = class extends UF {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(e10, t10), this.selectBox = new HF(n10, r10, i10, a10, o10), this.selectBox.setFocusable(false), this._register(this.selectBox), this.registerListeners();
    }
    select(e10) {
      this.selectBox.select(e10);
    }
    registerListeners() {
      this._register(this.selectBox.onDidSelect((e10) => this.runAction(e10.selected, e10.index)));
    }
    runAction(e10, t10) {
      this.actionRunner.run(this._action, this.getActionContext(e10, t10));
    }
    getActionContext(e10, t10) {
      return e10;
    }
    setFocusable(e10) {
      this.selectBox.setFocusable(e10);
    }
    focus() {
      var _a3;
      (_a3 = this.selectBox) == null ? void 0 : _a3.focus();
    }
    blur() {
      var _a3;
      (_a3 = this.selectBox) == null ? void 0 : _a3.blur();
    }
    render(e10) {
      this.selectBox.render(e10);
    }
  };
  KF = class extends tp {
    constructor(e10, t10) {
      super(), this._onDidChangeVisibility = this._register(new N()), this.onDidChangeVisibility = this._onDidChangeVisibility.event, this._element = V(e10, H(`.monaco-dropdown`)), this._label = V(this._element, H(`.dropdown-label`));
      let n10 = t10.labelRenderer;
      n10 || (n10 = (e11) => (e11.textContent = t10.label || ``, null));
      for (let e11 of [
        B.CLICK,
        B.MOUSE_DOWN,
        IE.Tap
      ]) this._register(z(this.element, e11, (e12) => Zd.stop(e12, true)));
      for (let e11 of [
        B.MOUSE_DOWN,
        IE.Tap
      ]) this._register(z(this._label, e11, (e12) => {
        Jd(e12) && (e12.detail > 1 || e12.button !== 0) || (this.visible ? this.hide() : this.show());
      }));
      this._register(z(this._label, B.KEY_UP, (e11) => {
        let t11 = new Hc(e11);
        (t11.equals(3) || t11.equals(10)) && (Zd.stop(e11, true), this.visible ? this.hide() : this.show());
      }));
      let r10 = n10(this._label);
      r10 && this._register(r10), this._register(LE.addTarget(this._label));
    }
    get element() {
      return this._element;
    }
    show() {
      this.visible || (this.visible = true, this._onDidChangeVisibility.fire(true));
    }
    hide() {
      this.visible && (this.visible = false, this._onDidChangeVisibility.fire(false));
    }
    dispose() {
      super.dispose(), this.hide(), this.boxContainer && (this.boxContainer.remove(), this.boxContainer = void 0), this.contents && (this.contents.remove(), this.contents = void 0), this._label && (this._label.remove(), this._label = void 0);
    }
  };
  qF = class extends KF {
    constructor(e10, t10) {
      super(e10, t10), this._options = t10, this._actions = [], this.actions = t10.actions || [];
    }
    set menuOptions(e10) {
      this._menuOptions = e10;
    }
    get menuOptions() {
      return this._menuOptions;
    }
    get actions() {
      return this._options.actionProvider ? this._options.actionProvider.getActions() : this._actions;
    }
    set actions(e10) {
      this._actions = e10;
    }
    show() {
      super.show(), this.element.classList.add(`active`), this._options.contextMenuProvider.showContextMenu({
        getAnchor: () => this.element,
        getActions: () => this.actions,
        getActionsContext: () => this.menuOptions ? this.menuOptions.context : null,
        getActionViewItem: (e10, t10) => this.menuOptions && this.menuOptions.actionViewItemProvider ? this.menuOptions.actionViewItemProvider(e10, t10) : void 0,
        getKeyBinding: (e10) => this.menuOptions && this.menuOptions.getKeyBinding ? this.menuOptions.getKeyBinding(e10) : void 0,
        getMenuClassName: () => this._options.menuClassName || ``,
        onHide: () => this.onHide(),
        actionRunner: this.menuOptions ? this.menuOptions.actionRunner : void 0,
        anchorAlignment: this.menuOptions ? this.menuOptions.anchorAlignment : 0,
        domForShadowRoot: this._options.menuAsChild ? this.element : void 0,
        skipTelemetry: this._options.skipTelemetry
      });
    }
    hide() {
      super.hide();
    }
    onHide() {
      this.hide(), this.element.classList.remove(`active`);
    }
  };
  JF = class extends UF {
    constructor(e10, t10, n10, r10 = /* @__PURE__ */ Object.create(null)) {
      super(null, e10, r10), this.actionItem = null, this._onDidChangeVisibility = this._register(new N()), this.onDidChangeVisibility = this._onDidChangeVisibility.event, this.menuActionsOrProvider = t10, this.contextMenuProvider = n10, this.options = r10, this.options.actionRunner && (this.actionRunner = this.options.actionRunner);
    }
    render(e10) {
      this.actionItem = e10;
      let t10 = (e11) => {
        this.element = V(e11, H(`a.action-label`));
        let t11 = [];
        return typeof this.options.classNames == `string` ? t11 = this.options.classNames.split(/\s+/g).filter((e12) => !!e12) : this.options.classNames && (t11 = this.options.classNames), t11.find((e12) => e12 === `icon`) || t11.push(`codicon`), this.element.classList.add(...t11), this.element.setAttribute(`role`, `button`), this.element.setAttribute(`aria-haspopup`, `true`), this.element.setAttribute(`aria-expanded`, `false`), this._action.label && this._register(RP().setupManagedHover(this.options.hoverDelegate ?? PP(`mouse`), this.element, this._action.label)), this.element.ariaLabel = this._action.label || ``, null;
      }, n10 = Array.isArray(this.menuActionsOrProvider), r10 = {
        contextMenuProvider: this.contextMenuProvider,
        labelRenderer: t10,
        menuAsChild: this.options.menuAsChild,
        actions: n10 ? this.menuActionsOrProvider : void 0,
        actionProvider: n10 ? void 0 : this.menuActionsOrProvider,
        skipTelemetry: this.options.skipTelemetry
      };
      if (this.dropdownMenu = this._register(new qF(e10, r10)), this._register(this.dropdownMenu.onDidChangeVisibility((e11) => {
        var _a3;
        (_a3 = this.element) == null ? void 0 : _a3.setAttribute(`aria-expanded`, `${e11}`), this._onDidChangeVisibility.fire(e11);
      })), this.dropdownMenu.menuOptions = {
        actionViewItemProvider: this.options.actionViewItemProvider,
        actionRunner: this.actionRunner,
        getKeyBinding: this.options.keybindingProvider,
        context: this._context
      }, this.options.anchorAlignmentProvider) {
        let e11 = this;
        this.dropdownMenu.menuOptions = {
          ...this.dropdownMenu.menuOptions,
          get anchorAlignment() {
            return e11.options.anchorAlignmentProvider();
          }
        };
      }
      this.updateTooltip(), this.updateEnabled();
    }
    getTooltip() {
      let e10 = null;
      return this.action.tooltip ? e10 = this.action.tooltip : this.action.label && (e10 = this.action.label), e10 ?? void 0;
    }
    setActionContext(e10) {
      super.setActionContext(e10), this.dropdownMenu && (this.dropdownMenu.menuOptions ? this.dropdownMenu.menuOptions.context = e10 : this.dropdownMenu.menuOptions = {
        context: e10
      });
    }
    show() {
      var _a3;
      (_a3 = this.dropdownMenu) == null ? void 0 : _a3.show();
    }
    updateEnabled() {
      var _a3, _b3;
      let e10 = !this.action.enabled;
      (_a3 = this.actionItem) == null ? void 0 : _a3.classList.toggle(`disabled`, e10), (_b3 = this.element) == null ? void 0 : _b3.classList.toggle(`disabled`, e10);
    }
  };
  YF = function(e10) {
    return e10 && typeof e10 == `object` && typeof e10.original == `string` && typeof e10.value == `string`;
  };
  function XF(e10) {
    return e10 ? e10.condition !== void 0 : false;
  }
  var ZF;
  (function(e10) {
    e10[e10.STORAGE_DOES_NOT_EXIST = 0] = `STORAGE_DOES_NOT_EXIST`, e10[e10.STORAGE_IN_MEMORY = 1] = `STORAGE_IN_MEMORY`;
  })(ZF || (ZF = {}));
  var QF;
  (function(e10) {
    e10[e10.None = 0] = `None`, e10[e10.Initialized = 1] = `Initialized`, e10[e10.Closed = 2] = `Closed`;
  })(QF || (QF = {}));
  var $F = (_ja = class extends j {
    constructor(t10, n10 = /* @__PURE__ */ Object.create(null)) {
      super(), this.database = t10, this.options = n10, this._onDidChangeStorage = this._register(new si()), this.onDidChangeStorage = this._onDidChangeStorage.event, this.state = QF.None, this.cache = /* @__PURE__ */ new Map(), this.flushDelayer = this._register(new nl(_ja.DEFAULT_FLUSH_DELAY)), this.pendingDeletes = /* @__PURE__ */ new Set(), this.pendingInserts = /* @__PURE__ */ new Map(), this.whenFlushedCallbacks = [], this.registerListeners();
    }
    registerListeners() {
      this._register(this.database.onDidChangeItemsExternal((e10) => this.onDidChangeItemsExternal(e10)));
    }
    onDidChangeItemsExternal(e10) {
      var _a3, _b3;
      this._onDidChangeStorage.pause();
      try {
        (_a3 = e10.changed) == null ? void 0 : _a3.forEach((e11, t10) => this.acceptExternal(t10, e11)), (_b3 = e10.deleted) == null ? void 0 : _b3.forEach((e11) => this.acceptExternal(e11, void 0));
      } finally {
        this._onDidChangeStorage.resume();
      }
    }
    acceptExternal(e10, t10) {
      if (this.state === QF.Closed) return;
      let n10 = false;
      if (Te(t10)) n10 = this.cache.delete(e10);
      else {
        let r10 = this.cache.get(e10);
        r10 !== t10 && (this.cache.set(e10, t10), n10 = true);
      }
      n10 && this._onDidChangeStorage.fire({
        key: e10,
        external: true
      });
    }
    get(e10, t10) {
      let n10 = this.cache.get(e10);
      return Te(n10) ? t10 : n10;
    }
    getBoolean(e10, t10) {
      let n10 = this.get(e10);
      return Te(n10) ? t10 : n10 === `true`;
    }
    getNumber(e10, t10) {
      let n10 = this.get(e10);
      return Te(n10) ? t10 : parseInt(n10, 10);
    }
    async set(e10, t10, n10 = false) {
      if (this.state === QF.Closed) return;
      if (Te(t10)) return this.delete(e10, n10);
      let r10 = ve(t10) || Array.isArray(t10) ? Bk(t10) : String(t10), i10 = this.cache.get(e10);
      if (i10 !== r10) return this.cache.set(e10, r10), this.pendingInserts.set(e10, r10), this.pendingDeletes.delete(e10), this._onDidChangeStorage.fire({
        key: e10,
        external: n10
      }), this.doFlush();
    }
    async delete(e10, t10 = false) {
      if (this.state === QF.Closed) return;
      let n10 = this.cache.delete(e10);
      if (n10) return this.pendingDeletes.has(e10) || this.pendingDeletes.add(e10), this.pendingInserts.delete(e10), this._onDidChangeStorage.fire({
        key: e10,
        external: t10
      }), this.doFlush();
    }
    get hasPending() {
      return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;
    }
    async flushPending() {
      if (!this.hasPending) return;
      let e10 = {
        insert: this.pendingInserts,
        delete: this.pendingDeletes
      };
      return this.pendingDeletes = /* @__PURE__ */ new Set(), this.pendingInserts = /* @__PURE__ */ new Map(), this.database.updateItems(e10).finally(() => {
        var _a3;
        if (!this.hasPending) for (; this.whenFlushedCallbacks.length; ) (_a3 = this.whenFlushedCallbacks.pop()) == null ? void 0 : _a3();
      });
    }
    async doFlush(e10) {
      return this.options.hint === ZF.STORAGE_IN_MEMORY ? this.flushPending() : this.flushDelayer.trigger(() => this.flushPending(), e10);
    }
  }, _ja.DEFAULT_FLUSH_DELAY = 100, _ja), eI = class {
    constructor() {
      this.onDidChangeItemsExternal = M.None, this.items = /* @__PURE__ */ new Map();
    }
    async updateItems(e10) {
      var _a3, _b3;
      (_a3 = e10.insert) == null ? void 0 : _a3.forEach((e11, t10) => this.items.set(t10, e11)), (_b3 = e10.delete) == null ? void 0 : _b3.forEach((e11) => this.items.delete(e11));
    }
  };
  let tI;
  tI = `__$__targetStorageMarker`;
  nI = Xf(`storageService`);
  (function(e10) {
    e10[e10.NONE = 0] = `NONE`, e10[e10.SHUTDOWN = 1] = `SHUTDOWN`;
  })(rI || (rI = {}));
  function iI(e10) {
    let t10 = e10.get(tI);
    if (t10) try {
      return JSON.parse(t10);
    } catch {
    }
    return /* @__PURE__ */ Object.create(null);
  }
  var aI = (_ka = class extends j {
    constructor(t10 = {
      flushInterval: _ka.DEFAULT_FLUSH_INTERVAL
    }) {
      super(), this.options = t10, this._onDidChangeValue = this._register(new si()), this._onDidChangeTarget = this._register(new si()), this._onWillSaveState = this._register(new N()), this.onWillSaveState = this._onWillSaveState.event, this._workspaceKeyTargets = void 0, this._profileKeyTargets = void 0, this._applicationKeyTargets = void 0;
    }
    onDidChangeValue(e10, t10, n10) {
      return M.filter(this._onDidChangeValue.event, (n11) => n11.scope === e10 && (t10 === void 0 || n11.key === t10), n10);
    }
    emitDidChangeValue(e10, t10) {
      let { key: n10, external: r10 } = t10;
      if (n10 === tI) {
        switch (e10) {
          case -1:
            this._applicationKeyTargets = void 0;
            break;
          case 0:
            this._profileKeyTargets = void 0;
            break;
          case 1:
            this._workspaceKeyTargets = void 0;
            break;
        }
        this._onDidChangeTarget.fire({
          scope: e10
        });
      } else this._onDidChangeValue.fire({
        scope: e10,
        key: n10,
        target: this.getKeyTargets(e10)[n10],
        external: r10
      });
    }
    get(e10, t10, n10) {
      var _a3;
      return (_a3 = this.getStorage(t10)) == null ? void 0 : _a3.get(e10, n10);
    }
    getBoolean(e10, t10, n10) {
      var _a3;
      return (_a3 = this.getStorage(t10)) == null ? void 0 : _a3.getBoolean(e10, n10);
    }
    getNumber(e10, t10, n10) {
      var _a3;
      return (_a3 = this.getStorage(t10)) == null ? void 0 : _a3.getNumber(e10, n10);
    }
    store(e10, t10, n10, r10, i10 = false) {
      if (Te(t10)) {
        this.remove(e10, n10, i10);
        return;
      }
      this.withPausedEmitters(() => {
        var _a3;
        this.updateKeyTarget(e10, n10, r10), (_a3 = this.getStorage(n10)) == null ? void 0 : _a3.set(e10, t10, i10);
      });
    }
    remove(e10, t10, n10 = false) {
      this.withPausedEmitters(() => {
        var _a3;
        this.updateKeyTarget(e10, t10, void 0), (_a3 = this.getStorage(t10)) == null ? void 0 : _a3.delete(e10, n10);
      });
    }
    withPausedEmitters(e10) {
      this._onDidChangeValue.pause(), this._onDidChangeTarget.pause();
      try {
        e10();
      } finally {
        this._onDidChangeValue.resume(), this._onDidChangeTarget.resume();
      }
    }
    updateKeyTarget(e10, t10, n10, r10 = false) {
      var _a3, _b3;
      let i10 = this.getKeyTargets(t10);
      typeof n10 == `number` ? i10[e10] !== n10 && (i10[e10] = n10, (_a3 = this.getStorage(t10)) == null ? void 0 : _a3.set(tI, JSON.stringify(i10), r10)) : typeof i10[e10] == `number` && (delete i10[e10], (_b3 = this.getStorage(t10)) == null ? void 0 : _b3.set(tI, JSON.stringify(i10), r10));
    }
    get workspaceKeyTargets() {
      return this._workspaceKeyTargets || (this._workspaceKeyTargets = this.loadKeyTargets(1)), this._workspaceKeyTargets;
    }
    get profileKeyTargets() {
      return this._profileKeyTargets || (this._profileKeyTargets = this.loadKeyTargets(0)), this._profileKeyTargets;
    }
    get applicationKeyTargets() {
      return this._applicationKeyTargets || (this._applicationKeyTargets = this.loadKeyTargets(-1)), this._applicationKeyTargets;
    }
    getKeyTargets(e10) {
      switch (e10) {
        case -1:
          return this.applicationKeyTargets;
        case 0:
          return this.profileKeyTargets;
        default:
          return this.workspaceKeyTargets;
      }
    }
    loadKeyTargets(e10) {
      let t10 = this.getStorage(e10);
      return t10 ? iI(t10) : /* @__PURE__ */ Object.create(null);
    }
  }, _ka.DEFAULT_FLUSH_INTERVAL = 60 * 1e3, _ka), oI = class extends aI {
    constructor() {
      super(), this.applicationStorage = this._register(new $F(new eI(), {
        hint: ZF.STORAGE_IN_MEMORY
      })), this.profileStorage = this._register(new $F(new eI(), {
        hint: ZF.STORAGE_IN_MEMORY
      })), this.workspaceStorage = this._register(new $F(new eI(), {
        hint: ZF.STORAGE_IN_MEMORY
      })), this._register(this.workspaceStorage.onDidChangeStorage((e10) => this.emitDidChangeValue(1, e10))), this._register(this.profileStorage.onDidChangeStorage((e10) => this.emitDidChangeValue(0, e10))), this._register(this.applicationStorage.onDidChangeStorage((e10) => this.emitDidChangeValue(-1, e10)));
    }
    getStorage(e10) {
      switch (e10) {
        case -1:
          return this.applicationStorage;
        case 0:
          return this.profileStorage;
        default:
          return this.workspaceStorage;
      }
    }
  };
  function sI(e10, t10) {
    let n10 = {
      ...t10
    };
    for (let t11 in e10) {
      let r10 = e10[t11];
      n10[t11] = r10 === void 0 ? void 0 : q(r10);
    }
    return n10;
  }
  let cI, lI, uI, fI, Kte, qte, mI, Jte;
  cI = {
    keybindingLabelBackground: q(PT),
    keybindingLabelForeground: q(FT),
    keybindingLabelBorder: q(IT),
    keybindingLabelBottomBorder: q(LT),
    keybindingLabelShadow: q(bw)
  };
  lI = {
    buttonForeground: q(gT),
    buttonSeparator: q(_T),
    buttonBackground: q(vT),
    buttonHoverBackground: q(yT),
    buttonSecondaryForeground: q(xT),
    buttonSecondaryBackground: q(ST),
    buttonSecondaryHoverBackground: q(CT),
    buttonBorder: q(bT)
  };
  uI = {
    progressBarBackground: q(EC)
  };
  dI = {
    inputActiveOptionBorder: q($w),
    inputActiveOptionForeground: q(nT),
    inputActiveOptionBackground: q(tT)
  };
  fI = {
    activeForeground: q(wT),
    activeBackground: q(TT),
    activeBorder: q(ET),
    inactiveForeground: q(DT),
    inactiveBackground: q(OT),
    inactiveBorder: q(kT),
    inactiveHoverBackground: q(AT)
  };
  Kte = {
    checkboxBackground: q(jT),
    checkboxBorder: q(NT),
    checkboxForeground: q(MT)
  };
  qte = {
    dialogBackground: q(kC),
    dialogForeground: q(AC),
    dialogShadow: q(bw),
    dialogBorder: q(_C),
    errorIconForeground: q(zw),
    warningIconForeground: q(Bw),
    infoIconForeground: q(Vw),
    textLinkForeground: q(yC)
  };
  pI = {
    inputBackground: q(Xw),
    inputForeground: q(Zw),
    inputBorder: q(Qw),
    inputValidationInfoBorder: q(aT),
    inputValidationInfoBackground: q(rT),
    inputValidationInfoForeground: q(iT),
    inputValidationWarningBorder: q(cT),
    inputValidationWarningBackground: q(oT),
    inputValidationWarningForeground: q(sT),
    inputValidationErrorBorder: q(dT),
    inputValidationErrorBackground: q(lT),
    inputValidationErrorForeground: q(uT)
  };
  mI = {
    listFilterWidgetBackground: q(nE),
    listFilterWidgetOutline: q(rE),
    listFilterWidgetNoMatchesOutline: q(iE),
    listFilterWidgetShadow: q(aE),
    inputBoxStyles: pI,
    toggleStyles: dI
  };
  hI = {
    badgeBackground: q(bC),
    badgeForeground: q(xC),
    badgeBorder: q(_C)
  };
  Jte = {
    breadcrumbsBackground: q(ww),
    breadcrumbsForeground: q(Cw),
    breadcrumbsHoverForeground: q(Tw),
    breadcrumbsFocusForeground: q(Tw),
    breadcrumbsFocusAndSelectionForeground: q(Ew)
  };
  gI = {
    listBackground: void 0,
    listInactiveFocusForeground: void 0,
    listFocusBackground: q(RT),
    listFocusForeground: q(zT),
    listFocusOutline: q(BT),
    listActiveSelectionBackground: q(HT),
    listActiveSelectionForeground: q(UT),
    listActiveSelectionIconForeground: q(WT),
    listFocusAndSelectionOutline: q(VT),
    listFocusAndSelectionBackground: q(HT),
    listFocusAndSelectionForeground: q(UT),
    listInactiveSelectionBackground: q(GT),
    listInactiveSelectionIconForeground: q(qT),
    listInactiveSelectionForeground: q(KT),
    listInactiveFocusBackground: q(JT),
    listInactiveFocusOutline: q(YT),
    listHoverBackground: q(XT),
    listHoverForeground: q(ZT),
    listDropOverBackground: q(QT),
    listDropBetweenBackground: q($T),
    listSelectionOutline: q(vC),
    listHoverOutline: q(vC),
    treeIndentGuidesStroke: q(oE),
    treeInactiveIndentGuidesStroke: q(sE),
    treeStickyScrollBackground: void 0,
    treeStickyScrollBorder: void 0,
    treeStickyScrollShadow: q(SC),
    tableColumnsBorder: q(cE),
    tableOddRowsBackgroundColor: q(lE)
  };
  _I = function(e10) {
    return sI(e10, gI);
  };
  const vI = {
    selectBackground: q(fT),
    selectListBackground: q(pT),
    selectForeground: q(mT),
    decoratorRightForeground: q(bE),
    selectBorder: q(hT),
    focusBorder: q(gC),
    listFocusBackground: q(TE),
    listInactiveSelectionIconForeground: q(wE),
    listFocusForeground: q(CE),
    listFocusOutline: JS(vC, K.transparent.toString()),
    listHoverBackground: q(XT),
    listHoverForeground: q(ZT),
    listHoverOutline: q(vC),
    selectListBorder: q(jC),
    listBackground: void 0,
    listActiveSelectionBackground: void 0,
    listActiveSelectionForeground: void 0,
    listActiveSelectionIconForeground: void 0,
    listFocusAndSelectionBackground: void 0,
    listDropOverBackground: void 0,
    listDropBetweenBackground: void 0,
    listInactiveSelectionBackground: void 0,
    listInactiveSelectionForeground: void 0,
    listInactiveFocusBackground: void 0,
    listInactiveFocusOutline: void 0,
    listSelectionOutline: void 0,
    listFocusAndSelectionForeground: void 0,
    listFocusAndSelectionOutline: void 0,
    listInactiveFocusForeground: void 0,
    tableColumnsBorder: void 0,
    tableOddRowsBackgroundColor: void 0,
    treeIndentGuidesStroke: void 0,
    treeInactiveIndentGuidesStroke: void 0,
    treeStickyScrollBackground: void 0,
    treeStickyScrollBorder: void 0,
    treeStickyScrollShadow: void 0
  }, yI = {
    shadowColor: q(bw),
    borderColor: q(uE),
    foregroundColor: q(dE),
    backgroundColor: q(fE),
    selectionForegroundColor: q(pE),
    selectionBackgroundColor: q(mE),
    selectionBorderColor: q(hE),
    separatorColor: q(gE),
    scrollbarShadow: q(SC),
    scrollbarSliderBackground: q(CC),
    scrollbarSliderHoverBackground: q(wC),
    scrollbarSliderActiveBackground: q(TC)
  };
  var bI = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, xI = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  function SI(e10, t10, n10, r10) {
    let i10, a10, o10;
    if (Array.isArray(e10)) o10 = e10, i10 = t10, a10 = n10;
    else {
      let s11 = t10;
      o10 = e10.getActions(s11), i10 = n10, a10 = r10;
    }
    let s10 = xf.getInstance(), c10 = s10.keyStatus.altKey || (mt || ht) && s10.keyStatus.shiftKey;
    wI(o10, i10, c10, a10 ? (e11) => e11 === a10 : (e11) => e11 === `navigation`);
  }
  CI = function(e10, t10, n10, r10, i10, a10) {
    let o10, s10, c10, l10, u10;
    if (Array.isArray(e10)) u10 = e10, o10 = t10, s10 = n10, c10 = r10, l10 = i10;
    else {
      let d11 = t10;
      u10 = e10.getActions(d11), o10 = n10, s10 = r10, c10 = i10, l10 = a10;
    }
    let d10 = typeof s10 == `string` ? (e11) => e11 === s10 : s10;
    wI(u10, o10, false, d10, c10, l10);
  };
  function wI(e10, t10, n10, r10 = (e11) => e11 === `navigation`, i10 = () => false, a10 = false) {
    let o10, s10;
    Array.isArray(t10) ? (o10 = t10, s10 = t10) : (o10 = t10.primary, s10 = t10.secondary);
    let c10 = /* @__PURE__ */ new Set();
    for (let [t11, i11] of e10) {
      let e11;
      r10(t11) ? (e11 = o10, e11.length > 0 && a10 && e11.push(new np())) : (e11 = s10, e11.length > 0 && e11.push(new np()));
      for (let r11 of i11) {
        n10 && (r11 = r11 instanceof bm && r11.alt ? r11.alt : r11);
        let i12 = e11.push(r11);
        r11 instanceof rp && c10.add({
          group: t11,
          action: r11,
          index: i12 - 1
        });
      }
    }
    for (let { group: e11, action: t11, index: n11 } of c10) {
      let a11 = r10(e11) ? o10 : s10, c11 = t11.actions;
      i10(t11, e11, a11.length) && a11.splice(n11, 1, ...c11);
    }
  }
  TI = class extends WF {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      super(void 0, e10, {
        icon: !!(e10.class || e10.item.icon),
        label: !e10.class && !e10.item.icon,
        draggable: t10 == null ? void 0 : t10.draggable,
        keybinding: t10 == null ? void 0 : t10.keybinding,
        hoverDelegate: t10 == null ? void 0 : t10.hoverDelegate
      }), this._options = t10, this._keybindingService = n10, this._notificationService = r10, this._contextKeyService = i10, this._themeService = a10, this._contextMenuService = o10, this._accessibilityService = s10, this._wantsAltCommand = false, this._itemClassDispose = this._register(new Br()), this._altKey = xf.getInstance();
    }
    get _menuItemAction() {
      return this._action;
    }
    get _commandAction() {
      return this._wantsAltCommand && this._menuItemAction.alt || this._menuItemAction;
    }
    async onClick(e10) {
      e10.preventDefault(), e10.stopPropagation();
      try {
        await this.actionRunner.run(this._commandAction, this._context);
      } catch (e11) {
        this._notificationService.error(e11);
      }
    }
    render(e10) {
      if (super.render(e10), e10.classList.add(`menu-entry`), this.options.icon && this._updateItemClass(this._menuItemAction.item), this._menuItemAction.alt) {
        let t10 = false, n10 = () => {
          var _a3;
          let e11 = !!((_a3 = this._menuItemAction.alt) == null ? void 0 : _a3.enabled) && (!this._accessibilityService.isMotionReduced() || t10) && (this._altKey.keyStatus.altKey || this._altKey.keyStatus.shiftKey && t10);
          e11 !== this._wantsAltCommand && (this._wantsAltCommand = e11, this.updateLabel(), this.updateTooltip(), this.updateClass());
        };
        this._register(this._altKey.event(n10)), this._register(z(e10, `mouseleave`, (e11) => {
          t10 = false, n10();
        })), this._register(z(e10, `mouseenter`, (e11) => {
          t10 = true, n10();
        })), n10();
      }
    }
    updateLabel() {
      this.options.label && this.label && (this.label.textContent = this._commandAction.label);
    }
    getTooltip() {
      var _a3;
      let e10 = this._keybindingService.lookupKeybinding(this._commandAction.id, this._contextKeyService), t10 = e10 && e10.getLabel(), n10 = this._commandAction.tooltip || this._commandAction.label, r10 = t10 ? T(`titleAndKb`, `{0} ({1})`, n10, t10) : n10;
      if (!this._wantsAltCommand && ((_a3 = this._menuItemAction.alt) == null ? void 0 : _a3.enabled)) {
        let e11 = this._menuItemAction.alt.tooltip || this._menuItemAction.alt.label, t11 = this._keybindingService.lookupKeybinding(this._menuItemAction.alt.id, this._contextKeyService), n11 = t11 && t11.getLabel(), i10 = n11 ? T(`titleAndKb`, `{0} ({1})`, e11, n11) : e11;
        r10 = T(`titleAndKbAndAlt`, `{0}
[{1}] {2}`, r10, eM.modifierLabels[Et].altKey, i10);
      }
      return r10;
    }
    updateClass() {
      this.options.icon && (this._commandAction === this._menuItemAction ? this._updateItemClass(this._menuItemAction.item) : this._menuItemAction.alt && this._updateItemClass(this._menuItemAction.alt.item));
    }
    _updateItemClass(e10) {
      this._itemClassDispose.value = void 0;
      let { element: t10, label: n10 } = this;
      if (!t10 || !n10) return;
      let r10 = this._commandAction.checked && XF(e10.toggled) && e10.toggled.icon ? e10.toggled.icon : e10.icon;
      if (r10) if (sp.isThemeIcon(r10)) {
        let e11 = sp.asClassNameArray(r10);
        n10.classList.add(...e11), this._itemClassDispose.value = k(() => {
          n10.classList.remove(...e11);
        });
      } else n10.style.backgroundImage = Bb(this._themeService.getColorTheme().type) ? gf(r10.dark) : gf(r10.light), n10.classList.add(`icon`), this._itemClassDispose.value = zr(k(() => {
        n10.style.backgroundImage = ``, n10.classList.remove(`icon`);
      }), this._themeService.onDidColorThemeChange(() => {
        this.updateClass();
      }));
    }
  };
  TI = bI([
    xI(2, ME),
    xI(3, ux),
    xI(4, qp),
    xI(5, Vb),
    xI(6, jE),
    xI(7, zA)
  ], TI);
  EI = class e10 extends TI {
    render(e11) {
      var _a3;
      this.options.label = true, this.options.icon = false, super.render(e11), e11.classList.add(`text-only`), e11.classList.toggle(`use-comma`, ((_a3 = this._options) == null ? void 0 : _a3.useComma) ?? false);
    }
    updateLabel() {
      var _a3;
      let t10 = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);
      if (!t10) return super.updateLabel();
      if (this.label) {
        let n10 = e10._symbolPrintEnter(t10);
        ((_a3 = this._options) == null ? void 0 : _a3.conversational) ? this.label.textContent = T({
          key: `content2`,
          comment: [
            `A label with keybindg like "ESC to dismiss"`
          ]
        }, `{1} to {0}`, this._action.label, n10) : this.label.textContent = T({
          key: `content`,
          comment: [
            `A label`,
            `A keybinding`
          ]
        }, `{0} ({1})`, this._action.label, n10);
      }
    }
    static _symbolPrintEnter(e11) {
      var _a3;
      return (_a3 = e11.getLabel()) == null ? void 0 : _a3.replace(/\benter\b/gi, `\u23CE`).replace(/\bEscape\b/gi, `Esc`);
    }
  };
  let DI = class extends JF {
    constructor(e10, t10, n10, r10, i10) {
      let a10 = {
        ...t10,
        menuAsChild: (t10 == null ? void 0 : t10.menuAsChild) ?? false,
        classNames: (t10 == null ? void 0 : t10.classNames) ?? (sp.isThemeIcon(e10.item.icon) ? sp.asClassName(e10.item.icon) : void 0),
        keybindingProvider: (t10 == null ? void 0 : t10.keybindingProvider) ?? ((e11) => n10.lookupKeybinding(e11.id))
      };
      super(e10, {
        getActions: () => e10.actions
      }, r10, a10), this._keybindingService = n10, this._contextMenuService = r10, this._themeService = i10;
    }
    render(e10) {
      super.render(e10), Ee(this.element), e10.classList.add(`menu-entry`);
      let t10 = this._action, { icon: n10 } = t10.item;
      if (n10 && !sp.isThemeIcon(n10)) {
        this.element.classList.add(`icon`);
        let e11 = () => {
          this.element && (this.element.style.backgroundImage = Bb(this._themeService.getColorTheme().type) ? gf(n10.dark) : gf(n10.light));
        };
        e11(), this._register(this._themeService.onDidColorThemeChange(() => {
          e11();
        }));
      }
    }
  };
  DI = bI([
    xI(2, ME),
    xI(3, jE),
    xI(4, Vb)
  ], DI);
  let OI = class extends UF {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      super(null, e10), this._keybindingService = n10, this._notificationService = r10, this._contextMenuService = i10, this._menuService = a10, this._instaService = o10, this._storageService = s10, this._container = null, this._options = t10, this._storageKey = `${e10.item.submenu.id}_lastActionId`;
      let c10, l10 = (t10 == null ? void 0 : t10.persistLastActionId) ? s10.get(this._storageKey, 1) : void 0;
      l10 && (c10 = e10.actions.find((e11) => l10 === e11.id)), c10 || (c10 = e10.actions[0]), this._defaultAction = this._instaService.createInstance(TI, c10, {
        keybinding: this._getDefaultActionKeybindingLabel(c10)
      });
      let u10 = {
        keybindingProvider: (e11) => this._keybindingService.lookupKeybinding(e11.id),
        ...t10,
        menuAsChild: (t10 == null ? void 0 : t10.menuAsChild) ?? true,
        classNames: (t10 == null ? void 0 : t10.classNames) ?? [
          `codicon`,
          `codicon-chevron-down`
        ],
        actionRunner: (t10 == null ? void 0 : t10.actionRunner) ?? new tp()
      };
      this._dropdown = new JF(e10, e10.actions, this._contextMenuService, u10), this._register(this._dropdown.actionRunner.onDidRun((e11) => {
        e11.action instanceof bm && this.update(e11.action);
      }));
    }
    update(e10) {
      var _a3;
      ((_a3 = this._options) == null ? void 0 : _a3.persistLastActionId) && this._storageService.store(this._storageKey, e10.id, 1, 1), this._defaultAction.dispose(), this._defaultAction = this._instaService.createInstance(TI, e10, {
        keybinding: this._getDefaultActionKeybindingLabel(e10)
      }), this._defaultAction.actionRunner = new class extends tp {
        async runAction(e11, t10) {
          await e11.run(void 0);
        }
      }(), this._container && this._defaultAction.render(rf(this._container, H(`.action-container`)));
    }
    _getDefaultActionKeybindingLabel(e10) {
      var _a3;
      let t10;
      if ((_a3 = this._options) == null ? void 0 : _a3.renderKeybindingWithDefaultActionLabel) {
        let n10 = this._keybindingService.lookupKeybinding(e10.id);
        n10 && (t10 = `(${n10.getLabel()})`);
      }
      return t10;
    }
    setActionContext(e10) {
      super.setActionContext(e10), this._defaultAction.setActionContext(e10), this._dropdown.setActionContext(e10);
    }
    render(e10) {
      this._container = e10, super.render(this._container), this._container.classList.add(`monaco-dropdown-with-default`);
      let t10 = H(`.action-container`);
      this._defaultAction.render(V(this._container, t10)), this._register(z(t10, B.KEY_DOWN, (e11) => {
        let t11 = new Hc(e11);
        t11.equals(17) && (this._defaultAction.element.tabIndex = -1, this._dropdown.focus(), t11.stopPropagation());
      }));
      let n10 = H(`.dropdown-action-container`);
      this._dropdown.render(V(this._container, n10)), this._register(z(n10, B.KEY_DOWN, (e11) => {
        var _a3;
        let t11 = new Hc(e11);
        t11.equals(15) && (this._defaultAction.element.tabIndex = 0, this._dropdown.setFocusable(false), (_a3 = this._defaultAction.element) == null ? void 0 : _a3.focus(), t11.stopPropagation());
      }));
    }
    focus(e10) {
      e10 ? this._dropdown.focus() : (this._defaultAction.element.tabIndex = 0, this._defaultAction.element.focus());
    }
    blur() {
      this._defaultAction.element.tabIndex = -1, this._dropdown.blur(), this._container.blur();
    }
    setFocusable(e10) {
      e10 ? this._defaultAction.element.tabIndex = 0 : (this._defaultAction.element.tabIndex = -1, this._dropdown.setFocusable(false));
    }
    dispose() {
      this._defaultAction.dispose(), this._dropdown.dispose(), super.dispose();
    }
  };
  OI = bI([
    xI(2, ME),
    xI(3, ux),
    xI(4, jE),
    xI(5, gm),
    xI(6, Jf),
    xI(7, nI)
  ], OI);
  let kI = class extends GF {
    constructor(e10, t10) {
      super(null, e10, e10.actions.map((e11) => ({
        text: e11.id === np.ID ? `\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500` : e11.label,
        isDisabled: !e11.enabled
      })), 0, t10, vI, {
        ariaLabel: e10.tooltip,
        optionsAsChildren: true
      }), this.select(Math.max(0, e10.actions.findIndex((e11) => e11.checked)));
    }
    render(e10) {
      super.render(e10), e10.style.borderColor = q(hT);
    }
    runAction(e10, t10) {
      let n10 = this.action.actions[t10];
      n10 && this.actionRunner.run(n10);
    }
  };
  kI = bI([
    xI(1, AE)
  ], kI);
  AI = function(e10, t10, n10) {
    if (t10 instanceof bm) return e10.createInstance(TI, t10, n10);
    if (t10 instanceof ym) return t10.item.isSelection ? e10.createInstance(kI, t10) : t10.item.rememberDefaultAction ? e10.createInstance(OI, t10, {
      ...n10,
      persistLastActionId: true
    }) : e10.createInstance(DI, t10, n10);
  };
  jI = class extends j {
    constructor(e10, t10 = {}) {
      var _a3, _b3;
      super(), this._actionRunnerDisposables = this._register(new A()), this.viewItemDisposables = this._register(new Ur()), this.triggerKeyDown = false, this.focusable = true, this._onDidBlur = this._register(new N()), this.onDidBlur = this._onDidBlur.event, this._onDidCancel = this._register(new N({
        onWillAddFirstListener: () => this.cancelHasListener = true
      })), this.onDidCancel = this._onDidCancel.event, this.cancelHasListener = false, this._onDidRun = this._register(new N()), this.onDidRun = this._onDidRun.event, this._onWillRun = this._register(new N()), this.onWillRun = this._onWillRun.event, this.options = t10, this._context = t10.context ?? null, this._orientation = this.options.orientation ?? 0, this._triggerKeys = {
        keyDown: ((_a3 = this.options.triggerKeys) == null ? void 0 : _a3.keyDown) ?? false,
        keys: ((_b3 = this.options.triggerKeys) == null ? void 0 : _b3.keys) ?? [
          3,
          10
        ]
      }, this._hoverDelegate = t10.hoverDelegate ?? this._register(FP()), this.options.actionRunner ? this._actionRunner = this.options.actionRunner : (this._actionRunner = new tp(), this._actionRunnerDisposables.add(this._actionRunner)), this._actionRunnerDisposables.add(this._actionRunner.onDidRun((e11) => this._onDidRun.fire(e11))), this._actionRunnerDisposables.add(this._actionRunner.onWillRun((e11) => this._onWillRun.fire(e11))), this.viewItems = [], this.focusedItem = void 0, this.domNode = document.createElement(`div`), this.domNode.className = `monaco-action-bar`;
      let n10, r10;
      switch (this._orientation) {
        case 0:
          n10 = [
            15
          ], r10 = [
            17
          ];
          break;
        case 1:
          n10 = [
            16
          ], r10 = [
            18
          ], this.domNode.className += ` vertical`;
          break;
      }
      this._register(z(this.domNode, B.KEY_DOWN, (e11) => {
        let t11 = new Hc(e11), i10 = true, a10 = typeof this.focusedItem == `number` ? this.viewItems[this.focusedItem] : void 0;
        n10 && (t11.equals(n10[0]) || t11.equals(n10[1])) ? i10 = this.focusPrevious() : r10 && (t11.equals(r10[0]) || t11.equals(r10[1])) ? i10 = this.focusNext() : t11.equals(9) && this.cancelHasListener ? this._onDidCancel.fire() : t11.equals(14) ? i10 = this.focusFirst() : t11.equals(13) ? i10 = this.focusLast() : t11.equals(2) && a10 instanceof UF && a10.trapsArrowNavigation ? i10 = this.focusNext(void 0, true) : this.isTriggerKeyEvent(t11) ? this._triggerKeys.keyDown ? this.doTrigger(t11) : this.triggerKeyDown = true : i10 = false, i10 && (t11.preventDefault(), t11.stopPropagation());
      })), this._register(z(this.domNode, B.KEY_UP, (e11) => {
        let t11 = new Hc(e11);
        this.isTriggerKeyEvent(t11) ? (!this._triggerKeys.keyDown && this.triggerKeyDown && (this.triggerKeyDown = false, this.doTrigger(t11)), t11.preventDefault(), t11.stopPropagation()) : (t11.equals(2) || t11.equals(1026) || t11.equals(16) || t11.equals(18) || t11.equals(15) || t11.equals(17)) && this.updateFocusedItem();
      })), this.focusTracker = this._register(tf(this.domNode)), this._register(this.focusTracker.onDidBlur(() => {
        (Od() === this.domNode || !Sd(Od(), this.domNode)) && (this._onDidBlur.fire(), this.previouslyFocusedItem = this.focusedItem, this.focusedItem = void 0, this.triggerKeyDown = false);
      })), this._register(this.focusTracker.onDidFocus(() => this.updateFocusedItem())), this.actionsList = document.createElement(`ul`), this.actionsList.className = `actions-container`, this.options.highlightToggledItems && this.actionsList.classList.add(`highlight-toggled`), this.actionsList.setAttribute(`role`, this.options.ariaRole || `toolbar`), this.options.ariaLabel && this.actionsList.setAttribute(`aria-label`, this.options.ariaLabel), this.domNode.appendChild(this.actionsList), e10.appendChild(this.domNode);
    }
    refreshRole() {
      this.length() >= 1 ? this.actionsList.setAttribute(`role`, this.options.ariaRole || `toolbar`) : this.actionsList.setAttribute(`role`, `presentation`);
    }
    setFocusable(e10) {
      if (this.focusable = e10, this.focusable) {
        let e11 = this.viewItems.find((e12) => e12 instanceof UF && e12.isEnabled());
        e11 instanceof UF && e11.setFocusable(true);
      } else this.viewItems.forEach((e11) => {
        e11 instanceof UF && e11.setFocusable(false);
      });
    }
    isTriggerKeyEvent(e10) {
      let t10 = false;
      return this._triggerKeys.keys.forEach((n10) => {
        t10 || (t10 = e10.equals(n10));
      }), t10;
    }
    updateFocusedItem() {
      var _a3, _b3;
      for (let e10 = 0; e10 < this.actionsList.children.length; e10++) {
        let t10 = this.actionsList.children[e10];
        if (Sd(Od(), t10)) {
          this.focusedItem = e10, (_b3 = (_a3 = this.viewItems[this.focusedItem]) == null ? void 0 : _a3.showHover) == null ? void 0 : _b3.call(_a3);
          break;
        }
      }
    }
    get context() {
      return this._context;
    }
    set context(e10) {
      this._context = e10, this.viewItems.forEach((t10) => t10.setActionContext(e10));
    }
    get actionRunner() {
      return this._actionRunner;
    }
    set actionRunner(e10) {
      this._actionRunner = e10, this._actionRunnerDisposables.clear(), this._actionRunnerDisposables.add(this._actionRunner.onDidRun((e11) => this._onDidRun.fire(e11))), this._actionRunnerDisposables.add(this._actionRunner.onWillRun((e11) => this._onWillRun.fire(e11))), this.viewItems.forEach((t10) => t10.actionRunner = e10);
    }
    getContainer() {
      return this.domNode;
    }
    getAction(e10) {
      var _a3;
      if (typeof e10 == `number`) return (_a3 = this.viewItems[e10]) == null ? void 0 : _a3.action;
      if (Gd(e10)) {
        for (; e10.parentElement !== this.actionsList; ) {
          if (!e10.parentElement) return;
          e10 = e10.parentElement;
        }
        for (let t10 = 0; t10 < this.actionsList.childNodes.length; t10++) if (this.actionsList.childNodes[t10] === e10) return this.viewItems[t10].action;
      }
    }
    push(e10, t10 = {}) {
      let n10 = Array.isArray(e10) ? e10 : [
        e10
      ], r10 = be(t10.index) ? t10.index : null;
      n10.forEach((e11) => {
        let n11 = document.createElement(`li`);
        n11.className = `action-item`, n11.setAttribute(`role`, `presentation`);
        let i10, a10 = {
          hoverDelegate: this._hoverDelegate,
          ...t10,
          isTabList: this.options.ariaRole === `tablist`
        };
        this.options.actionViewItemProvider && (i10 = this.options.actionViewItemProvider(e11, a10)), i10 || (i10 = new WF(this.context, e11, a10)), this.options.allowContextMenu || this.viewItemDisposables.set(i10, z(n11, B.CONTEXT_MENU, (e12) => {
          Zd.stop(e12, true);
        })), i10.actionRunner = this._actionRunner, i10.setActionContext(this.context), i10.render(n11), this.focusable && i10 instanceof UF && this.viewItems.length === 0 && i10.setFocusable(true), r10 === null || r10 < 0 || r10 >= this.actionsList.children.length ? (this.actionsList.appendChild(n11), this.viewItems.push(i10)) : (this.actionsList.insertBefore(n11, this.actionsList.children[r10]), this.viewItems.splice(r10, 0, i10), r10++);
      }), typeof this.focusedItem == `number` && this.focus(this.focusedItem), this.refreshRole();
    }
    clear() {
      this.isEmpty() || (this.viewItems = Rr(this.viewItems), this.viewItemDisposables.clearAndDisposeAll(), Zu(this.actionsList), this.refreshRole());
    }
    length() {
      return this.viewItems.length;
    }
    isEmpty() {
      return this.viewItems.length === 0;
    }
    focus(e10) {
      let t10 = false, n10;
      if (e10 === void 0 ? t10 = true : typeof e10 == `number` ? n10 = e10 : typeof e10 == `boolean` && (t10 = e10), t10 && this.focusedItem === void 0) {
        let e11 = this.viewItems.findIndex((e12) => e12.isEnabled());
        this.focusedItem = e11 === -1 ? void 0 : e11, this.updateFocus(void 0, void 0, true);
      } else n10 !== void 0 && (this.focusedItem = n10), this.updateFocus(void 0, void 0, true);
    }
    focusFirst() {
      return this.focusedItem = this.length() - 1, this.focusNext(true);
    }
    focusLast() {
      return this.focusedItem = 0, this.focusPrevious(true);
    }
    focusNext(e10, t10) {
      if (this.focusedItem === void 0) this.focusedItem = this.viewItems.length - 1;
      else if (this.viewItems.length <= 1) return false;
      let n10 = this.focusedItem, r10;
      do {
        if (!e10 && this.options.preventLoopNavigation && this.focusedItem + 1 >= this.viewItems.length) return this.focusedItem = n10, false;
        this.focusedItem = (this.focusedItem + 1) % this.viewItems.length, r10 = this.viewItems[this.focusedItem];
      } while (this.focusedItem !== n10 && (this.options.focusOnlyEnabledItems && !r10.isEnabled() || r10.action.id === np.ID));
      return this.updateFocus(void 0, void 0, t10), true;
    }
    focusPrevious(e10) {
      if (this.focusedItem === void 0) this.focusedItem = 0;
      else if (this.viewItems.length <= 1) return false;
      let t10 = this.focusedItem, n10;
      do {
        if (--this.focusedItem, this.focusedItem < 0) {
          if (!e10 && this.options.preventLoopNavigation) return this.focusedItem = t10, false;
          this.focusedItem = this.viewItems.length - 1;
        }
        n10 = this.viewItems[this.focusedItem];
      } while (this.focusedItem !== t10 && (this.options.focusOnlyEnabledItems && !n10.isEnabled() || n10.action.id === np.ID));
      return this.updateFocus(true), true;
    }
    updateFocus(e10, t10, n10 = false) {
      var _a3, _b3;
      this.focusedItem === void 0 && this.actionsList.focus({
        preventScroll: t10
      }), this.previouslyFocusedItem !== void 0 && this.previouslyFocusedItem !== this.focusedItem && ((_a3 = this.viewItems[this.previouslyFocusedItem]) == null ? void 0 : _a3.blur());
      let r10 = this.focusedItem === void 0 ? void 0 : this.viewItems[this.focusedItem];
      if (r10) {
        let i10 = true;
        Oe(r10.focus) || (i10 = false), this.options.focusOnlyEnabledItems && Oe(r10.isEnabled) && !r10.isEnabled() && (i10 = false), r10.action.id === np.ID && (i10 = false), i10 ? (n10 || this.previouslyFocusedItem !== this.focusedItem) && (r10.focus(e10), this.previouslyFocusedItem = this.focusedItem) : (this.actionsList.focus({
          preventScroll: t10
        }), this.previouslyFocusedItem = void 0), i10 && ((_b3 = r10.showHover) == null ? void 0 : _b3.call(r10));
      }
    }
    doTrigger(e10) {
      if (this.focusedItem === void 0) return;
      let t10 = this.viewItems[this.focusedItem];
      if (t10 instanceof UF) {
        let n10 = t10._context === null || t10._context === void 0 ? e10 : t10._context;
        this.run(t10._action, n10);
      }
    }
    async run(e10, t10) {
      await this._actionRunner.run(e10, t10);
    }
    dispose() {
      this._context = void 0, this.viewItems = Rr(this.viewItems), this.getContainer().remove(), super.dispose();
    }
  };
  const MI = /\(&([^\s&])\)|(^|[^&])&([^\s&])/, NI = /(&amp;)?(&amp;)([^\s&])/g;
  var PI;
  (function(e10) {
    e10[e10.Right = 0] = `Right`, e10[e10.Left = 1] = `Left`;
  })(PI || (PI = {}));
  var FI;
  (function(e10) {
    e10[e10.Above = 0] = `Above`, e10[e10.Below = 1] = `Below`;
  })(FI || (FI = {}));
  var II = class e10 extends jI {
    constructor(e11, t10, n10, r10) {
      e11.classList.add(`monaco-menu-container`), e11.setAttribute(`role`, `presentation`);
      let i10 = document.createElement(`div`);
      i10.classList.add(`monaco-menu`), i10.setAttribute(`role`, `presentation`), super(i10, {
        orientation: 1,
        actionViewItemProvider: (e12) => this.doGetActionViewItem(e12, n10, a10),
        context: n10.context,
        actionRunner: n10.actionRunner,
        ariaLabel: n10.ariaLabel,
        ariaRole: `menu`,
        focusOnlyEnabledItems: true,
        triggerKeys: {
          keys: [
            3,
            ...E || ht ? [
              10
            ] : []
          ],
          keyDown: true
        }
      }), this.menuStyles = r10, this.menuElement = i10, this.actionsList.tabIndex = 0, this.initializeOrUpdateStyleSheet(e11, r10), this._register(LE.addTarget(i10)), this._register(z(i10, B.KEY_DOWN, (e12) => {
        let t11 = new Hc(e12);
        t11.equals(2) && e12.preventDefault();
      })), n10.enableMnemonics && this._register(z(i10, B.KEY_DOWN, (e12) => {
        let t11 = e12.key.toLocaleLowerCase();
        if (this.mnemonics.has(t11)) {
          Zd.stop(e12, true);
          let n11 = this.mnemonics.get(t11);
          if (n11.length === 1 && (n11[0] instanceof RI && n11[0].container && this.focusItemByElement(n11[0].container), n11[0].onClick(e12)), n11.length > 1) {
            let e13 = n11.shift();
            e13 && e13.container && (this.focusItemByElement(e13.container), n11.push(e13)), this.mnemonics.set(t11, n11);
          }
        }
      })), ht && this._register(z(i10, B.KEY_DOWN, (e12) => {
        let t11 = new Hc(e12);
        t11.equals(14) || t11.equals(11) ? (this.focusedItem = this.viewItems.length - 1, this.focusNext(), Zd.stop(e12, true)) : (t11.equals(13) || t11.equals(12)) && (this.focusedItem = 0, this.focusPrevious(), Zd.stop(e12, true));
      })), this._register(z(this.domNode, B.MOUSE_OUT, (e12) => {
        let t11 = e12.relatedTarget;
        Sd(t11, this.domNode) || (this.focusedItem = void 0, this.updateFocus(), e12.stopPropagation());
      })), this._register(z(this.actionsList, B.MOUSE_OVER, (e12) => {
        let t11 = e12.target;
        if (!(!t11 || !Sd(t11, this.actionsList) || t11 === this.actionsList)) {
          for (; t11.parentElement !== this.actionsList && t11.parentElement !== null; ) t11 = t11.parentElement;
          if (t11.classList.contains(`action-item`)) {
            let e13 = this.focusedItem;
            this.setFocusedItem(t11), e13 !== this.focusedItem && this.updateFocus();
          }
        }
      })), this._register(LE.addTarget(this.actionsList)), this._register(z(this.actionsList, IE.Tap, (e12) => {
        let t11 = e12.initialTarget;
        if (!(!t11 || !Sd(t11, this.actionsList) || t11 === this.actionsList)) {
          for (; t11.parentElement !== this.actionsList && t11.parentElement !== null; ) t11 = t11.parentElement;
          if (t11.classList.contains(`action-item`)) {
            let e13 = this.focusedItem;
            this.setFocusedItem(t11), e13 !== this.focusedItem && this.updateFocus();
          }
        }
      }));
      let a10 = {
        parent: this
      };
      this.mnemonics = /* @__PURE__ */ new Map(), this.scrollableElement = this._register(new uD(i10, {
        alwaysConsumeMouseWheel: true,
        horizontal: 2,
        vertical: 3,
        verticalScrollbarSize: 7,
        handleMouseWheel: true,
        useShadows: true
      }));
      let o10 = this.scrollableElement.getDomNode();
      o10.style.position = ``, this.styleScrollElement(o10, r10), this._register(z(i10, IE.Change, (e12) => {
        Zd.stop(e12, true);
        let t11 = this.scrollableElement.getScrollPosition().scrollTop;
        this.scrollableElement.setScrollPosition({
          scrollTop: t11 - e12.translationY
        });
      })), this._register(z(o10, B.MOUSE_UP, (e12) => {
        e12.preventDefault();
      }));
      let s10 = R(e11);
      i10.style.maxHeight = `${Math.max(10, s10.innerHeight - e11.getBoundingClientRect().top - 35)}px`, t10 = t10.filter((e12, r11) => {
        var _a3;
        if ((_a3 = n10.submenuIds) == null ? void 0 : _a3.has(e12.id)) return console.warn(`Found submenu cycle: ${e12.id}`), false;
        if (e12 instanceof np) {
          if (r11 === t10.length - 1 || r11 === 0) return false;
          let e13 = t10[r11 - 1];
          if (e13 instanceof np) return false;
        }
        return true;
      }), this.push(t10, {
        icon: true,
        label: true,
        isMenu: true
      }), e11.appendChild(this.scrollableElement.getDomNode()), this.scrollableElement.scanDomNode(), this.viewItems.filter((e12) => !(e12 instanceof zI)).forEach((e12, t11, n11) => {
        e12.updatePositionInSet(t11 + 1, n11.length);
      });
    }
    initializeOrUpdateStyleSheet(t10, n10) {
      this.styleSheet || (Ed(t10) ? this.styleSheet = Id(t10) : (e10.globalStyleSheet || (e10.globalStyleSheet = Id()), this.styleSheet = e10.globalStyleSheet)), this.styleSheet.textContent = HI(n10, Ed(t10));
    }
    styleScrollElement(e11, t10) {
      let n10 = t10.foregroundColor ?? ``, r10 = t10.backgroundColor ?? ``, i10 = t10.borderColor ? `1px solid ${t10.borderColor}` : ``, a10 = `5px`, o10 = t10.shadowColor ? `0 2px 8px ${t10.shadowColor}` : ``;
      e11.style.outline = i10, e11.style.borderRadius = a10, e11.style.color = n10, e11.style.backgroundColor = r10, e11.style.boxShadow = o10;
    }
    getContainer() {
      return this.scrollableElement.getDomNode();
    }
    get onScroll() {
      return this.scrollableElement.onScroll;
    }
    focusItemByElement(e11) {
      let t10 = this.focusedItem;
      this.setFocusedItem(e11), t10 !== this.focusedItem && this.updateFocus();
    }
    setFocusedItem(e11) {
      for (let t10 = 0; t10 < this.actionsList.children.length; t10++) {
        let n10 = this.actionsList.children[t10];
        if (e11 === n10) {
          this.focusedItem = t10;
          break;
        }
      }
    }
    updateFocus(e11) {
      super.updateFocus(e11, true, true), this.focusedItem !== void 0 && this.scrollableElement.setScrollPosition({
        scrollTop: Math.round(this.menuElement.scrollTop)
      });
    }
    doGetActionViewItem(e11, t10, n10) {
      if (e11 instanceof np) return new zI(t10.context, e11, {
        icon: true
      }, this.menuStyles);
      if (e11 instanceof rp) {
        let r10 = new RI(e11, e11.actions, n10, {
          ...t10,
          submenuIds: /* @__PURE__ */ new Set([
            ...t10.submenuIds || [],
            e11.id
          ])
        }, this.menuStyles);
        if (t10.enableMnemonics) {
          let e12 = r10.getMnemonic();
          if (e12 && r10.isEnabled()) {
            let t11 = [];
            this.mnemonics.has(e12) && (t11 = this.mnemonics.get(e12)), t11.push(r10), this.mnemonics.set(e12, t11);
          }
        }
        return r10;
      } else {
        let n11 = {
          enableMnemonics: t10.enableMnemonics,
          useEventAsContext: t10.useEventAsContext
        };
        if (t10.getKeyBinding) {
          let r11 = t10.getKeyBinding(e11);
          if (r11) {
            let e12 = r11.getLabel();
            e12 && (n11.keybinding = e12);
          }
        }
        let r10 = new LI(t10.context, e11, n11, this.menuStyles);
        if (t10.enableMnemonics) {
          let e12 = r10.getMnemonic();
          if (e12 && r10.isEnabled()) {
            let t11 = [];
            this.mnemonics.has(e12) && (t11 = this.mnemonics.get(e12)), t11.push(r10), this.mnemonics.set(e12, t11);
          }
        }
        return r10;
      }
    }
  }, LI = class extends UF {
    constructor(e10, t10, n10, r10) {
      if (n10.isMenu = true, super(t10, t10, n10), this.menuStyle = r10, this.options = n10, this.options.icon = n10.icon === void 0 ? false : n10.icon, this.options.label = n10.label === void 0 ? true : n10.label, this.cssClass = ``, this.options.label && n10.enableMnemonics) {
        let e11 = this.action.label;
        if (e11) {
          let t11 = MI.exec(e11);
          t11 && (this.mnemonic = (t11[1] ? t11[1] : t11[3]).toLocaleLowerCase());
        }
      }
      this.runOnceToEnableMouseUp = new cl(() => {
        this.element && (this._register(z(this.element, B.MOUSE_UP, (e11) => {
          if (Zd.stop(e11, true), Sc) {
            let t11 = new Kc(R(this.element), e11);
            if (t11.rightButton) return;
            this.onClick(e11);
          } else setTimeout(() => {
            this.onClick(e11);
          }, 0);
        })), this._register(z(this.element, B.CONTEXT_MENU, (e11) => {
          Zd.stop(e11, true);
        })));
      }, 100), this._register(this.runOnceToEnableMouseUp);
    }
    render(e10) {
      super.render(e10), this.element && (this.container = e10, this.item = V(this.element, H(`a.action-menu-item`)), this._action.id === np.ID ? this.item.setAttribute(`role`, `presentation`) : (this.item.setAttribute(`role`, `menuitem`), this.mnemonic && this.item.setAttribute(`aria-keyshortcuts`, `${this.mnemonic}`)), this.check = V(this.item, H(`span.menu-item-check` + sp.asCSSSelector(L.menuSelection))), this.check.setAttribute(`role`, `none`), this.label = V(this.item, H(`span.action-label`)), this.options.label && this.options.keybinding && (V(this.item, H(`span.keybinding`)).textContent = this.options.keybinding), this.runOnceToEnableMouseUp.schedule(), this.updateClass(), this.updateLabel(), this.updateTooltip(), this.updateEnabled(), this.updateChecked(), this.applyStyle());
    }
    blur() {
      super.blur(), this.applyStyle();
    }
    focus() {
      var _a3;
      super.focus(), (_a3 = this.item) == null ? void 0 : _a3.focus(), this.applyStyle();
    }
    updatePositionInSet(e10, t10) {
      this.item && (this.item.setAttribute(`aria-posinset`, `${e10}`), this.item.setAttribute(`aria-setsize`, `${t10}`));
    }
    updateLabel() {
      var _a3;
      if (this.label && this.options.label) {
        Zu(this.label);
        let e10 = QO(this.action.label);
        if (e10) {
          let t10 = BI(e10);
          this.options.enableMnemonics || (e10 = t10), this.label.setAttribute(`aria-label`, t10.replace(/&&/g, `&`));
          let n10 = MI.exec(e10);
          if (n10) {
            e10 = hs(e10), NI.lastIndex = 0;
            let t11 = NI.exec(e10);
            for (; t11 && t11[1]; ) t11 = NI.exec(e10);
            let r10 = (e11) => e11.replace(/&amp;&amp;/g, `&amp;`);
            t11 ? this.label.append(vs(r10(e10.substr(0, t11.index)), ` `), H(`u`, {
              "aria-hidden": `true`
            }, t11[3]), ys(r10(e10.substr(t11.index + t11[0].length)), ` `)) : this.label.innerText = r10(e10).trim(), (_a3 = this.item) == null ? void 0 : _a3.setAttribute(`aria-keyshortcuts`, (n10[1] ? n10[1] : n10[3]).toLocaleLowerCase());
          } else this.label.innerText = e10.replace(/&&/g, `&`).trim();
        }
      }
    }
    updateTooltip() {
    }
    updateClass() {
      this.cssClass && this.item && this.item.classList.remove(...this.cssClass.split(` `)), this.options.icon && this.label ? (this.cssClass = this.action.class || ``, this.label.classList.add(`icon`), this.cssClass && this.label.classList.add(...this.cssClass.split(` `)), this.updateEnabled()) : this.label && this.label.classList.remove(`icon`);
    }
    updateEnabled() {
      this.action.enabled ? (this.element && (this.element.classList.remove(`disabled`), this.element.removeAttribute(`aria-disabled`)), this.item && (this.item.classList.remove(`disabled`), this.item.removeAttribute(`aria-disabled`), this.item.tabIndex = 0)) : (this.element && (this.element.classList.add(`disabled`), this.element.setAttribute(`aria-disabled`, `true`)), this.item && (this.item.classList.add(`disabled`), this.item.setAttribute(`aria-disabled`, `true`)));
    }
    updateChecked() {
      if (!this.item) return;
      let e10 = this.action.checked;
      this.item.classList.toggle(`checked`, !!e10), e10 === void 0 ? (this.item.setAttribute(`role`, `menuitem`), this.item.setAttribute(`aria-checked`, ``)) : (this.item.setAttribute(`role`, `menuitemcheckbox`), this.item.setAttribute(`aria-checked`, e10 ? `true` : `false`));
    }
    getMnemonic() {
      return this.mnemonic;
    }
    applyStyle() {
      let e10 = this.element && this.element.classList.contains(`focused`), t10 = e10 && this.menuStyle.selectionForegroundColor ? this.menuStyle.selectionForegroundColor : this.menuStyle.foregroundColor, n10 = e10 && this.menuStyle.selectionBackgroundColor ? this.menuStyle.selectionBackgroundColor : void 0, r10 = e10 && this.menuStyle.selectionBorderColor ? `1px solid ${this.menuStyle.selectionBorderColor}` : ``, i10 = e10 && this.menuStyle.selectionBorderColor ? `-1px` : ``;
      this.item && (this.item.style.color = t10 ?? ``, this.item.style.backgroundColor = n10 ?? ``, this.item.style.outline = r10, this.item.style.outlineOffset = i10), this.check && (this.check.style.color = t10 ?? ``);
    }
  }, RI = class extends LI {
    constructor(e10, t10, n10, r10, i10) {
      super(e10, e10, r10, i10), this.submenuActions = t10, this.parentData = n10, this.submenuOptions = r10, this.mysubmenu = null, this.submenuDisposables = this._register(new A()), this.mouseOver = false, this.expandDirection = r10 && r10.expandDirection !== void 0 ? r10.expandDirection : {
        horizontal: PI.Right,
        vertical: FI.Below
      }, this.showScheduler = new cl(() => {
        this.mouseOver && (this.cleanupExistingSubmenu(false), this.createSubmenu(false));
      }, 250), this.hideScheduler = new cl(() => {
        this.element && !Sd(Od(), this.element) && this.parentData.submenu === this.mysubmenu && (this.parentData.parent.focus(false), this.cleanupExistingSubmenu(true));
      }, 750);
    }
    render(e10) {
      super.render(e10), this.element && (this.item && (this.item.classList.add(`monaco-submenu-item`), this.item.tabIndex = 0, this.item.setAttribute(`aria-haspopup`, `true`), this.updateAriaExpanded(`false`), this.submenuIndicator = V(this.item, H(`span.submenu-indicator` + sp.asCSSSelector(L.menuSubmenu))), this.submenuIndicator.setAttribute(`aria-hidden`, `true`)), this._register(z(this.element, B.KEY_UP, (e11) => {
        let t10 = new Hc(e11);
        (t10.equals(17) || t10.equals(3)) && (Zd.stop(e11, true), this.createSubmenu(true));
      })), this._register(z(this.element, B.KEY_DOWN, (e11) => {
        let t10 = new Hc(e11);
        Od() === this.item && (t10.equals(17) || t10.equals(3)) && Zd.stop(e11, true);
      })), this._register(z(this.element, B.MOUSE_OVER, (e11) => {
        this.mouseOver || (this.mouseOver = true, this.showScheduler.schedule());
      })), this._register(z(this.element, B.MOUSE_LEAVE, (e11) => {
        this.mouseOver = false;
      })), this._register(z(this.element, B.FOCUS_OUT, (e11) => {
        this.element && !Sd(Od(), this.element) && this.hideScheduler.schedule();
      })), this._register(this.parentData.parent.onScroll(() => {
        this.parentData.submenu === this.mysubmenu && (this.parentData.parent.focus(false), this.cleanupExistingSubmenu(true));
      })));
    }
    updateEnabled() {
    }
    onClick(e10) {
      Zd.stop(e10, true), this.cleanupExistingSubmenu(false), this.createSubmenu(true);
    }
    cleanupExistingSubmenu(e10) {
      if (this.parentData.submenu && (e10 || this.parentData.submenu !== this.mysubmenu)) {
        try {
          this.parentData.submenu.dispose();
        } catch {
        }
        this.parentData.submenu = void 0, this.updateAriaExpanded(`false`), this.submenuContainer && (this.submenuDisposables.clear(), this.submenuContainer = void 0);
      }
    }
    calculateSubmenuMenuLayout(e10, t10, n10, r10) {
      let i10 = {
        top: 0,
        left: 0
      };
      return i10.left = oj(e10.width, t10.width, {
        position: r10.horizontal === PI.Right ? 0 : 1,
        offset: n10.left,
        size: n10.width
      }), i10.left >= n10.left && i10.left < n10.left + n10.width && (n10.left + 10 + t10.width <= e10.width && (i10.left = n10.left + 10), n10.top += 10, n10.height = 0), i10.top = oj(e10.height, t10.height, {
        position: 0,
        offset: n10.top,
        size: 0
      }), i10.top + t10.height === n10.top && i10.top + n10.height + t10.height <= e10.height && (i10.top += n10.height), i10;
    }
    createSubmenu(e10 = true) {
      if (this.element) if (this.parentData.submenu) this.parentData.submenu.focus(false);
      else {
        this.updateAriaExpanded(`true`), this.submenuContainer = V(this.element, H(`div.monaco-submenu`)), this.submenuContainer.classList.add(`menubar-menu-items-holder`, `context-view`);
        let t10 = R(this.parentData.parent.domNode).getComputedStyle(this.parentData.parent.domNode), n10 = parseFloat(t10.paddingTop || `0`) || 0;
        this.submenuContainer.style.zIndex = `1`, this.submenuContainer.style.position = `fixed`, this.submenuContainer.style.top = `0`, this.submenuContainer.style.left = `0`, this.parentData.submenu = new II(this.submenuContainer, this.submenuActions.length ? this.submenuActions : [
          new ip()
        ], this.submenuOptions, this.menuStyle);
        let r10 = this.element.getBoundingClientRect(), i10 = {
          top: r10.top - n10,
          left: r10.left,
          height: r10.height + 2 * n10,
          width: r10.width
        }, a10 = this.submenuContainer.getBoundingClientRect(), o10 = R(this.element), { top: s10, left: c10 } = this.calculateSubmenuMenuLayout(new pd(o10.innerWidth, o10.innerHeight), pd.lift(a10), i10, this.expandDirection);
        this.submenuContainer.style.left = `${c10 - a10.left}px`, this.submenuContainer.style.top = `${s10 - a10.top}px`, this.submenuDisposables.add(z(this.submenuContainer, B.KEY_UP, (e11) => {
          let t11 = new Hc(e11);
          t11.equals(15) && (Zd.stop(e11, true), this.parentData.parent.focus(), this.cleanupExistingSubmenu(true));
        })), this.submenuDisposables.add(z(this.submenuContainer, B.KEY_DOWN, (e11) => {
          let t11 = new Hc(e11);
          t11.equals(15) && Zd.stop(e11, true);
        })), this.submenuDisposables.add(this.parentData.submenu.onDidCancel(() => {
          this.parentData.parent.focus(), this.cleanupExistingSubmenu(true);
        })), this.parentData.submenu.focus(e10), this.mysubmenu = this.parentData.submenu;
      }
    }
    updateAriaExpanded(e10) {
      var _a3;
      this.item && ((_a3 = this.item) == null ? void 0 : _a3.setAttribute(`aria-expanded`, e10));
    }
    applyStyle() {
      super.applyStyle();
      let e10 = this.element && this.element.classList.contains(`focused`), t10 = e10 && this.menuStyle.selectionForegroundColor ? this.menuStyle.selectionForegroundColor : this.menuStyle.foregroundColor;
      this.submenuIndicator && (this.submenuIndicator.style.color = t10 ?? ``);
    }
    dispose() {
      super.dispose(), this.hideScheduler.dispose(), this.mysubmenu && (this.mysubmenu.dispose(), this.mysubmenu = null), this.submenuContainer && (this.submenuContainer = void 0);
    }
  }, zI = class extends WF {
    constructor(e10, t10, n10, r10) {
      super(e10, t10, n10), this.menuStyles = r10;
    }
    render(e10) {
      super.render(e10), this.label && (this.label.style.borderBottomColor = this.menuStyles.separatorColor ? `${this.menuStyles.separatorColor}` : ``);
    }
  };
  function BI(e10) {
    let t10 = MI, n10 = t10.exec(e10);
    if (!n10) return e10;
    let r10 = !n10[1];
    return e10.replace(t10, r10 ? `$2$3` : ``).trim();
  }
  function VI(e10) {
    let t10 = Pa()[e10.id];
    return `.codicon-${e10.id}:before { content: '\\${t10.toString(16)}'; }`;
  }
  function HI(e10, t10) {
    let n10 = `
.monaco-menu {
	font-size: 13px;
	border-radius: 5px;
	min-width: 160px;
}

${VI(L.menuSelection)}
${VI(L.menuSubmenu)}

.monaco-menu .monaco-action-bar {
	text-align: right;
	overflow: hidden;
	white-space: nowrap;
}

.monaco-menu .monaco-action-bar .actions-container {
	display: flex;
	margin: 0 auto;
	padding: 0;
	width: 100%;
	justify-content: flex-end;
}

.monaco-menu .monaco-action-bar.vertical .actions-container {
	display: inline-block;
}

.monaco-menu .monaco-action-bar.reverse .actions-container {
	flex-direction: row-reverse;
}

.monaco-menu .monaco-action-bar .action-item {
	cursor: pointer;
	display: inline-block;
	transition: transform 50ms ease;
	position: relative;  /* DO NOT REMOVE - this is the key to preventing the ghosting icon bug in Chrome 42 */
}

.monaco-menu .monaco-action-bar .action-item.disabled {
	cursor: default;
}

.monaco-menu .monaco-action-bar .action-item .icon,
.monaco-menu .monaco-action-bar .action-item .codicon {
	display: inline-block;
}

.monaco-menu .monaco-action-bar .action-item .codicon {
	display: flex;
	align-items: center;
}

.monaco-menu .monaco-action-bar .action-label {
	font-size: 11px;
	margin-right: 4px;
}

.monaco-menu .monaco-action-bar .action-item.disabled .action-label,
.monaco-menu .monaco-action-bar .action-item.disabled .action-label:hover {
	color: var(--vscode-disabledForeground);
}

/* Vertical actions */

.monaco-menu .monaco-action-bar.vertical {
	text-align: left;
}

.monaco-menu .monaco-action-bar.vertical .action-item {
	display: block;
}

.monaco-menu .monaco-action-bar.vertical .action-label.separator {
	display: block;
	border-bottom: 1px solid var(--vscode-menu-separatorBackground);
	padding-top: 1px;
	padding: 30px;
}

.monaco-menu .secondary-actions .monaco-action-bar .action-label {
	margin-left: 6px;
}

/* Action Items */
.monaco-menu .monaco-action-bar .action-item.select-container {
	overflow: hidden; /* somehow the dropdown overflows its container, we prevent it here to not push */
	flex: 1;
	max-width: 170px;
	min-width: 60px;
	display: flex;
	align-items: center;
	justify-content: center;
	margin-right: 10px;
}

.monaco-menu .monaco-action-bar.vertical {
	margin-left: 0;
	overflow: visible;
}

.monaco-menu .monaco-action-bar.vertical .actions-container {
	display: block;
}

.monaco-menu .monaco-action-bar.vertical .action-item {
	padding: 0;
	transform: none;
	display: flex;
}

.monaco-menu .monaco-action-bar.vertical .action-item.active {
	transform: none;
}

.monaco-menu .monaco-action-bar.vertical .action-menu-item {
	flex: 1 1 auto;
	display: flex;
	height: 2em;
	align-items: center;
	position: relative;
	margin: 0 4px;
	border-radius: 4px;
}

.monaco-menu .monaco-action-bar.vertical .action-menu-item:hover .keybinding,
.monaco-menu .monaco-action-bar.vertical .action-menu-item:focus .keybinding {
	opacity: unset;
}

.monaco-menu .monaco-action-bar.vertical .action-label {
	flex: 1 1 auto;
	text-decoration: none;
	padding: 0 1em;
	background: none;
	font-size: 12px;
	line-height: 1;
}

.monaco-menu .monaco-action-bar.vertical .keybinding,
.monaco-menu .monaco-action-bar.vertical .submenu-indicator {
	display: inline-block;
	flex: 2 1 auto;
	padding: 0 1em;
	text-align: right;
	font-size: 12px;
	line-height: 1;
}

.monaco-menu .monaco-action-bar.vertical .submenu-indicator {
	height: 100%;
}

.monaco-menu .monaco-action-bar.vertical .submenu-indicator.codicon {
	font-size: 16px !important;
	display: flex;
	align-items: center;
}

.monaco-menu .monaco-action-bar.vertical .submenu-indicator.codicon::before {
	margin-left: auto;
	margin-right: -20px;
}

.monaco-menu .monaco-action-bar.vertical .action-item.disabled .keybinding,
.monaco-menu .monaco-action-bar.vertical .action-item.disabled .submenu-indicator {
	opacity: 0.4;
}

.monaco-menu .monaco-action-bar.vertical .action-label:not(.separator) {
	display: inline-block;
	box-sizing: border-box;
	margin: 0;
}

.monaco-menu .monaco-action-bar.vertical .action-item {
	position: static;
	overflow: visible;
}

.monaco-menu .monaco-action-bar.vertical .action-item .monaco-submenu {
	position: absolute;
}

.monaco-menu .monaco-action-bar.vertical .action-label.separator {
	width: 100%;
	height: 0px !important;
	opacity: 1;
}

.monaco-menu .monaco-action-bar.vertical .action-label.separator.text {
	padding: 0.7em 1em 0.1em 1em;
	font-weight: bold;
	opacity: 1;
}

.monaco-menu .monaco-action-bar.vertical .action-label:hover {
	color: inherit;
}

.monaco-menu .monaco-action-bar.vertical .menu-item-check {
	position: absolute;
	visibility: hidden;
	width: 1em;
	height: 100%;
}

.monaco-menu .monaco-action-bar.vertical .action-menu-item.checked .menu-item-check {
	visibility: visible;
	display: flex;
	align-items: center;
	justify-content: center;
}

/* Context Menu */

.context-view.monaco-menu-container {
	outline: 0;
	border: none;
	animation: fadeIn 0.083s linear;
	-webkit-app-region: no-drag;
}

.context-view.monaco-menu-container :focus,
.context-view.monaco-menu-container .monaco-action-bar.vertical:focus,
.context-view.monaco-menu-container .monaco-action-bar.vertical :focus {
	outline: 0;
}

.hc-black .context-view.monaco-menu-container,
.hc-light .context-view.monaco-menu-container,
:host-context(.hc-black) .context-view.monaco-menu-container,
:host-context(.hc-light) .context-view.monaco-menu-container {
	box-shadow: none;
}

.hc-black .monaco-menu .monaco-action-bar.vertical .action-item.focused,
.hc-light .monaco-menu .monaco-action-bar.vertical .action-item.focused,
:host-context(.hc-black) .monaco-menu .monaco-action-bar.vertical .action-item.focused,
:host-context(.hc-light) .monaco-menu .monaco-action-bar.vertical .action-item.focused {
	background: none;
}

/* Vertical Action Bar Styles */

.monaco-menu .monaco-action-bar.vertical {
	padding: 4px 0;
}

.monaco-menu .monaco-action-bar.vertical .action-menu-item {
	height: 2em;
}

.monaco-menu .monaco-action-bar.vertical .action-label:not(.separator),
.monaco-menu .monaco-action-bar.vertical .keybinding {
	font-size: inherit;
	padding: 0 2em;
	max-height: 100%;
}

.monaco-menu .monaco-action-bar.vertical .menu-item-check {
	font-size: inherit;
	width: 2em;
}

.monaco-menu .monaco-action-bar.vertical .action-label.separator {
	font-size: inherit;
	margin: 5px 0 !important;
	padding: 0;
	border-radius: 0;
}

.linux .monaco-menu .monaco-action-bar.vertical .action-label.separator,
:host-context(.linux) .monaco-menu .monaco-action-bar.vertical .action-label.separator {
	margin-left: 0;
	margin-right: 0;
}

.monaco-menu .monaco-action-bar.vertical .submenu-indicator {
	font-size: 60%;
	padding: 0 1.8em;
}

.linux .monaco-menu .monaco-action-bar.vertical .submenu-indicator,
:host-context(.linux) .monaco-menu .monaco-action-bar.vertical .submenu-indicator {
	height: 100%;
	mask-size: 10px 10px;
	-webkit-mask-size: 10px 10px;
}

.monaco-menu .action-item {
	cursor: default;
}`;
    if (t10) {
      n10 += `
			/* Arrows */
			.monaco-scrollable-element > .scrollbar > .scra {
				cursor: pointer;
				font-size: 11px !important;
			}

			.monaco-scrollable-element > .visible {
				opacity: 1;

				/* Background rule added for IE9 - to allow clicks on dom node */
				background:rgba(0,0,0,0);

				transition: opacity 100ms linear;
			}
			.monaco-scrollable-element > .invisible {
				opacity: 0;
				pointer-events: none;
			}
			.monaco-scrollable-element > .invisible.fade {
				transition: opacity 800ms linear;
			}

			/* Scrollable Content Inset Shadow */
			.monaco-scrollable-element > .shadow {
				position: absolute;
				display: none;
			}
			.monaco-scrollable-element > .shadow.top {
				display: block;
				top: 0;
				left: 3px;
				height: 3px;
				width: 100%;
			}
			.monaco-scrollable-element > .shadow.left {
				display: block;
				top: 3px;
				left: 0;
				height: 100%;
				width: 3px;
			}
			.monaco-scrollable-element > .shadow.top-left-corner {
				display: block;
				top: 0;
				left: 0;
				height: 3px;
				width: 3px;
			}
		`;
      let t11 = e10.scrollbarShadow;
      t11 && (n10 += `
				.monaco-scrollable-element > .shadow.top {
					box-shadow: ${t11} 0 6px 6px -6px inset;
				}

				.monaco-scrollable-element > .shadow.left {
					box-shadow: ${t11} 6px 0 6px -6px inset;
				}

				.monaco-scrollable-element > .shadow.top.left {
					box-shadow: ${t11} 6px 6px 6px -6px inset;
				}
			`);
      let r10 = e10.scrollbarSliderBackground;
      r10 && (n10 += `
				.monaco-scrollable-element > .scrollbar > .slider {
					background: ${r10};
				}
			`);
      let i10 = e10.scrollbarSliderHoverBackground;
      i10 && (n10 += `
				.monaco-scrollable-element > .scrollbar > .slider:hover {
					background: ${i10};
				}
			`);
      let a10 = e10.scrollbarSliderActiveBackground;
      a10 && (n10 += `
				.monaco-scrollable-element > .scrollbar > .slider.active {
					background: ${a10};
				}
			`);
    }
    return n10;
  }
  var UI = class {
    constructor(e10, t10, n10, r10) {
      this.contextViewService = e10, this.telemetryService = t10, this.notificationService = n10, this.keybindingService = r10, this.focusToReturn = null, this.lastContainer = null, this.block = null, this.blockDisposable = null, this.options = {
        blockMouse: true
      };
    }
    configure(e10) {
      this.options = e10;
    }
    showContextMenu(e10) {
      let t10 = e10.getActions();
      if (!t10.length) return;
      this.focusToReturn = Od();
      let n10, r10 = Gd(e10.domForShadowRoot) ? e10.domForShadowRoot : void 0;
      this.contextViewService.showContextView({
        getAnchor: () => e10.getAnchor(),
        canRelayout: false,
        anchorAlignment: e10.anchorAlignment,
        anchorAxisAlignment: e10.anchorAxisAlignment,
        render: (r11) => {
          var _a3;
          this.lastContainer = r11;
          let i10 = e10.getMenuClassName ? e10.getMenuClassName() : ``;
          i10 && (r11.className += ` ` + i10), this.options.blockMouse && (this.block = r11.appendChild(H(`.context-view-block`)), this.block.style.position = `fixed`, this.block.style.cursor = `initial`, this.block.style.left = `0`, this.block.style.top = `0`, this.block.style.width = `100%`, this.block.style.height = `100%`, this.block.style.zIndex = `-1`, (_a3 = this.blockDisposable) == null ? void 0 : _a3.dispose(), this.blockDisposable = z(this.block, B.MOUSE_DOWN, (e11) => e11.stopPropagation()));
          let a10 = new A(), o10 = e10.actionRunner || new tp();
          o10.onWillRun((t11) => this.onActionRun(t11, !e10.skipTelemetry), this, a10), o10.onDidRun(this.onDidActionRun, this, a10), n10 = new II(r11, t10, {
            actionViewItemProvider: e10.getActionViewItem,
            context: e10.getActionsContext ? e10.getActionsContext() : null,
            actionRunner: o10,
            getKeyBinding: e10.getKeyBinding ? e10.getKeyBinding : (e11) => this.keybindingService.lookupKeybinding(e11.id)
          }, yI), n10.onDidCancel(() => this.contextViewService.hideContextView(true), null, a10), n10.onDidBlur(() => this.contextViewService.hideContextView(true), null, a10);
          let s10 = R(r11);
          return a10.add(z(s10, B.BLUR, () => this.contextViewService.hideContextView(true))), a10.add(z(s10, B.MOUSE_DOWN, (e11) => {
            if (e11.defaultPrevented) return;
            let t11 = new Kc(s10, e11), n11 = t11.target;
            if (!t11.rightButton) {
              for (; n11; ) {
                if (n11 === r11) return;
                n11 = n11.parentElement;
              }
              this.contextViewService.hideContextView(true);
            }
          })), zr(a10, n10);
        },
        focus: () => {
          n10 == null ? void 0 : n10.focus(!!e10.autoSelectFirstItem);
        },
        onHide: (t11) => {
          var _a3, _b3, _c3;
          (_a3 = e10.onHide) == null ? void 0 : _a3.call(e10, !!t11), this.block && (this.block.remove(), this.block = null), (_b3 = this.blockDisposable) == null ? void 0 : _b3.dispose(), this.blockDisposable = null, this.lastContainer && (Od() === this.lastContainer || Sd(Od(), this.lastContainer)) && ((_c3 = this.focusToReturn) == null ? void 0 : _c3.focus()), this.lastContainer = null;
        }
      }, r10, !!r10);
    }
    onActionRun(e10, t10) {
      t10 && this.telemetryService.publicLog2(`workbenchActionExecuted`, {
        id: e10.action.id,
        from: `contextMenu`
      }), this.contextViewService.hideContextView(false);
    }
    onDidActionRun(e10) {
      e10.error && !br(e10.error) && this.notificationService.error(e10.error);
    }
  }, WI = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, GI = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let KI = class extends j {
    get contextMenuHandler() {
      return this._contextMenuHandler || (this._contextMenuHandler = new UI(this.contextViewService, this.telemetryService, this.notificationService, this.keybindingService)), this._contextMenuHandler;
    }
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this.telemetryService = e10, this.notificationService = t10, this.contextViewService = n10, this.keybindingService = r10, this.menuService = i10, this.contextKeyService = a10, this._contextMenuHandler = void 0, this._onDidShowContextMenu = this._store.add(new N()), this.onDidShowContextMenu = this._onDidShowContextMenu.event, this._onDidHideContextMenu = this._store.add(new N());
    }
    configure(e10) {
      this.contextMenuHandler.configure(e10);
    }
    showContextMenu(e10) {
      e10 = qI.transform(e10, this.menuService, this.contextKeyService), this.contextMenuHandler.showContextMenu({
        ...e10,
        onHide: (t10) => {
          var _a3;
          (_a3 = e10.onHide) == null ? void 0 : _a3.call(e10, t10), this._onDidHideContextMenu.fire();
        }
      }), xf.getInstance().resetKeyStatus(), this._onDidShowContextMenu.fire();
    }
  };
  KI = WI([
    GI(0, Cm),
    GI(1, ux),
    GI(2, AE),
    GI(3, ME),
    GI(4, gm),
    GI(5, qp)
  ], KI);
  var qI;
  (function(e10) {
    function t10(e11) {
      return e11 && e11.menuId instanceof hm;
    }
    function n10(e11, n11, r10) {
      if (!t10(e11)) return e11;
      let { menuId: i10, menuActionOptions: a10, contextKeyService: o10 } = e11;
      return {
        ...e11,
        getActions: () => {
          let t11 = [];
          if (i10) {
            let e12 = n11.getMenuActions(i10, o10 ?? r10, a10);
            SI(e12, t11);
          }
          return e11.getActions ? np.join(e11.getActions(), t11) : t11;
        }
      };
    }
    e10.transform = n10;
  })(qI || (qI = {}));
  var JI;
  (function(e10) {
    e10[e10.API = 0] = `API`, e10[e10.USER = 1] = `USER`;
  })(JI || (JI = {}));
  var YI = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, XI = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let ZI = class {
    constructor(e10) {
      this._commandService = e10;
    }
    async open(e10, t10) {
      if (!Cu(e10, Su.command)) return false;
      if (!(t10 == null ? void 0 : t10.allowCommands) || (typeof e10 == `string` && (e10 = xa.parse(e10)), Array.isArray(t10.allowCommands) && !t10.allowCommands.includes(e10.path))) return true;
      let n10 = [];
      try {
        n10 = Vk(decodeURIComponent(e10.query));
      } catch {
        try {
          n10 = Vk(e10.query);
        } catch {
        }
      }
      return Array.isArray(n10) || (n10 = [
        n10
      ]), await this._commandService.executeCommand(e10.path, ...n10), true;
    }
  };
  ZI = YI([
    XI(0, cp)
  ], ZI);
  let QI = class {
    constructor(e10) {
      this._editorService = e10;
    }
    async open(e10, t10) {
      typeof e10 == `string` && (e10 = xa.parse(e10));
      let { selection: n10, uri: r10 } = yD(e10);
      return e10 = r10, e10.scheme === Su.file && (e10 = fk(e10)), await this._editorService.openCodeEditor({
        resource: e10,
        options: {
          selection: n10,
          source: (t10 == null ? void 0 : t10.fromUserGesture) ? JI.USER : JI.API,
          ...t10 == null ? void 0 : t10.editorOptions
        }
      }, this._editorService.getFocusedCodeEditor(), t10 == null ? void 0 : t10.openToSide), true;
    }
  };
  QI = YI([
    XI(0, Zf)
  ], QI);
  let $I = class {
    constructor(e10, t10) {
      this._openers = new Rt(), this._validators = new Rt(), this._resolvers = new Rt(), this._resolvedUriTargets = new H_((e11) => e11.with({
        path: null,
        fragment: null,
        query: null
      }).toString()), this._externalOpeners = new Rt(), this._defaultExternalOpener = {
        openExternal: async (e11) => (wu(e11, Su.http, Su.https) ? mf(e11) : os.location.href = e11, true)
      }, this._openers.push({
        open: async (e11, t11) => (t11 == null ? void 0 : t11.openExternal) || wu(e11, Su.mailto, Su.http, Su.https, Su.vsls) ? (await this._doOpenExternal(e11, t11), true) : false
      }), this._openers.push(new ZI(t10)), this._openers.push(new QI(e10));
    }
    registerOpener(e10) {
      let t10 = this._openers.unshift(e10);
      return {
        dispose: t10
      };
    }
    async open(e10, t10) {
      let n10 = typeof e10 == `string` ? xa.parse(e10) : e10, r10 = this._resolvedUriTargets.get(n10) ?? e10;
      for (let e11 of this._validators) if (!await e11.shouldOpen(r10, t10)) return false;
      for (let n11 of this._openers) {
        let r11 = await n11.open(e10, t10);
        if (r11) return true;
      }
      return false;
    }
    async resolveExternalUri(e10, t10) {
      for (let n10 of this._resolvers) try {
        let r10 = await n10.resolveExternalUri(e10, t10);
        if (r10) return this._resolvedUriTargets.has(r10.resolved) || this._resolvedUriTargets.set(r10.resolved, e10), r10;
      } catch {
      }
      throw Error(`Could not resolve external URI: ` + e10.toString());
    }
    async _doOpenExternal(e10, t10) {
      let n10 = typeof e10 == `string` ? xa.parse(e10) : e10, r10;
      try {
        r10 = (await this.resolveExternalUri(n10, t10)).resolved;
      } catch {
        r10 = n10;
      }
      let i10;
      if (i10 = typeof e10 == `string` && n10.toString() === r10.toString() ? e10 : encodeURI(r10.toString(true)), t10 == null ? void 0 : t10.allowContributedOpeners) {
        let e11 = typeof (t10 == null ? void 0 : t10.allowContributedOpeners) == `string` ? t10 == null ? void 0 : t10.allowContributedOpeners : void 0;
        for (let t11 of this._externalOpeners) {
          let r11 = await t11.openExternal(i10, {
            sourceUri: n10,
            preferredOpenerId: e11
          }, mi.None);
          if (r11) return true;
        }
      }
      return this._defaultExternalOpener.openExternal(i10, {
        sourceUri: n10
      }, mi.None);
    }
    dispose() {
      this._validators.clear();
    }
  };
  $I = YI([
    XI(0, Zf),
    XI(1, cp)
  ], $I);
  eL = Xf(`editorWorkerService`);
  (function(e10) {
    e10[e10.Hint = 1] = `Hint`, e10[e10.Info = 2] = `Info`, e10[e10.Warning = 4] = `Warning`, e10[e10.Error = 8] = `Error`;
  })(tL || (tL = {})), function(e10) {
    function t10(e11, t11) {
      return t11 - e11;
    }
    e10.compare = t10;
    let n10 = /* @__PURE__ */ Object.create(null);
    n10[e10.Error] = T(`sev.error`, `Error`), n10[e10.Warning] = T(`sev.warning`, `Warning`), n10[e10.Info] = T(`sev.info`, `Info`);
    function r10(e11) {
      return n10[e11] || ``;
    }
    e10.toString = r10;
    function i10(t11) {
      switch (t11) {
        case sx.Error:
          return e10.Error;
        case sx.Warning:
          return e10.Warning;
        case sx.Info:
          return e10.Info;
        case sx.Ignore:
          return e10.Hint;
      }
    }
    e10.fromSeverity = i10;
    function a10(t11) {
      switch (t11) {
        case e10.Error:
          return sx.Error;
        case e10.Warning:
          return sx.Warning;
        case e10.Info:
          return sx.Info;
        case e10.Hint:
          return sx.Ignore;
      }
    }
    e10.toSeverity = a10;
  }(tL || (tL = {}));
  (function(e10) {
    let t10 = ``;
    function n10(e11) {
      return r10(e11, true);
    }
    e10.makeKey = n10;
    function r10(e11, n11) {
      let r11 = [
        t10
      ];
      return e11.source ? r11.push(e11.source.replace(`\xA6`, `\\\xA6`)) : r11.push(t10), e11.code ? typeof e11.code == `string` ? r11.push(e11.code.replace(`\xA6`, `\\\xA6`)) : r11.push(e11.code.value.replace(`\xA6`, `\\\xA6`)) : r11.push(t10), e11.severity !== void 0 && e11.severity !== null ? r11.push(tL.toString(e11.severity)) : r11.push(t10), e11.message && n11 ? r11.push(e11.message.replace(`\xA6`, `\\\xA6`)) : r11.push(t10), e11.startLineNumber !== void 0 && e11.startLineNumber !== null ? r11.push(e11.startLineNumber.toString()) : r11.push(t10), e11.startColumn !== void 0 && e11.startColumn !== null ? r11.push(e11.startColumn.toString()) : r11.push(t10), e11.endLineNumber !== void 0 && e11.endLineNumber !== null ? r11.push(e11.endLineNumber.toString()) : r11.push(t10), e11.endColumn !== void 0 && e11.endColumn !== null ? r11.push(e11.endColumn.toString()) : r11.push(t10), r11.push(t10), r11.join(`\xA6`);
    }
    e10.makeKeyOptionalMessage = r10;
  })(nL || (nL = {}));
  let iL, aL, Yte, Xte, Zte, Qte, oL, sL, cL, lL, uL, dL, fL, pL, mL, hL, gL, _L, vL, yL, bL, xL, SL, CL, wL, TL, EL, DL, OL, kL, AL, jL, ML, NL, PL, FL, IL, $te, ene, LL, tne, nne, zL, VL, HL, UL, WL, GL, KL, qL, JL, YL, XL, ZL, QL, $L, eR, tR, nR, rR, iR, aR, oR, sR, cR, rne, ine;
  rL = Xf(`markerService`);
  iL = J(`editor.lineHighlightBackground`, null, T(`lineHighlight`, `Background color for the highlight of line at the cursor position.`));
  aL = J(`editor.lineHighlightBorder`, {
    dark: `#282828`,
    light: `#eeeeee`,
    hcDark: `#f38518`,
    hcLight: _C
  }, T(`lineHighlightBorderBox`, `Background color for the border around the line at the cursor position.`));
  Yte = J(`editor.rangeHighlightBackground`, {
    dark: `#ffffff0b`,
    light: `#fdff0033`,
    hcDark: null,
    hcLight: null
  }, T(`rangeHighlight`, `Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.`), true);
  Xte = J(`editor.rangeHighlightBorder`, {
    dark: null,
    light: null,
    hcDark: vC,
    hcLight: vC
  }, T(`rangeHighlightBorder`, `Background color of the border around highlighted ranges.`));
  Zte = J(`editor.symbolHighlightBackground`, {
    dark: qC,
    light: qC,
    hcDark: null,
    hcLight: null
  }, T(`symbolHighlight`, `Background color of highlighted symbol, like for go to definition or go next/previous symbol. The color must not be opaque so as not to hide underlying decorations.`), true);
  Qte = J(`editor.symbolHighlightBorder`, {
    dark: null,
    light: null,
    hcDark: vC,
    hcLight: vC
  }, T(`symbolHighlightBorder`, `Background color of the border around highlighted symbols.`));
  oL = J(`editorCursor.foreground`, {
    dark: `#AEAFAD`,
    light: K.black,
    hcDark: K.white,
    hcLight: `#0F4A85`
  }, T(`caret`, `Color of the editor cursor.`));
  sL = J(`editorCursor.background`, null, T(`editorCursorBackground`, `The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.`));
  cL = J(`editorMultiCursor.primary.foreground`, oL, T(`editorMultiCursorPrimaryForeground`, `Color of the primary editor cursor when multiple cursors are present.`));
  lL = J(`editorMultiCursor.primary.background`, sL, T(`editorMultiCursorPrimaryBackground`, `The background color of the primary editor cursor when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.`));
  uL = J(`editorMultiCursor.secondary.foreground`, oL, T(`editorMultiCursorSecondaryForeground`, `Color of secondary editor cursors when multiple cursors are present.`));
  dL = J(`editorMultiCursor.secondary.background`, sL, T(`editorMultiCursorSecondaryBackground`, `The background color of secondary editor cursors when multiple cursors are present. Allows customizing the color of a character overlapped by a block cursor.`));
  fL = J(`editorWhitespace.foreground`, {
    dark: `#e3e4e229`,
    light: `#33333333`,
    hcDark: `#e3e4e229`,
    hcLight: `#CCCCCC`
  }, T(`editorWhitespaces`, `Color of whitespace characters in the editor.`));
  pL = J(`editorLineNumber.foreground`, {
    dark: `#858585`,
    light: `#237893`,
    hcDark: K.white,
    hcLight: `#292929`
  }, T(`editorLineNumbers`, `Color of editor line numbers.`));
  mL = J(`editorIndentGuide.background`, fL, T(`editorIndentGuides`, `Color of the editor indentation guides.`), false, T(`deprecatedEditorIndentGuides`, `'editorIndentGuide.background' is deprecated. Use 'editorIndentGuide.background1' instead.`));
  hL = J(`editorIndentGuide.activeBackground`, fL, T(`editorActiveIndentGuide`, `Color of the active editor indentation guides.`), false, T(`deprecatedEditorActiveIndentGuide`, `'editorIndentGuide.activeBackground' is deprecated. Use 'editorIndentGuide.activeBackground1' instead.`));
  gL = J(`editorIndentGuide.background1`, mL, T(`editorIndentGuides1`, `Color of the editor indentation guides (1).`));
  _L = J(`editorIndentGuide.background2`, `#00000000`, T(`editorIndentGuides2`, `Color of the editor indentation guides (2).`));
  vL = J(`editorIndentGuide.background3`, `#00000000`, T(`editorIndentGuides3`, `Color of the editor indentation guides (3).`));
  yL = J(`editorIndentGuide.background4`, `#00000000`, T(`editorIndentGuides4`, `Color of the editor indentation guides (4).`));
  bL = J(`editorIndentGuide.background5`, `#00000000`, T(`editorIndentGuides5`, `Color of the editor indentation guides (5).`));
  xL = J(`editorIndentGuide.background6`, `#00000000`, T(`editorIndentGuides6`, `Color of the editor indentation guides (6).`));
  SL = J(`editorIndentGuide.activeBackground1`, hL, T(`editorActiveIndentGuide1`, `Color of the active editor indentation guides (1).`));
  CL = J(`editorIndentGuide.activeBackground2`, `#00000000`, T(`editorActiveIndentGuide2`, `Color of the active editor indentation guides (2).`));
  wL = J(`editorIndentGuide.activeBackground3`, `#00000000`, T(`editorActiveIndentGuide3`, `Color of the active editor indentation guides (3).`));
  TL = J(`editorIndentGuide.activeBackground4`, `#00000000`, T(`editorActiveIndentGuide4`, `Color of the active editor indentation guides (4).`));
  EL = J(`editorIndentGuide.activeBackground5`, `#00000000`, T(`editorActiveIndentGuide5`, `Color of the active editor indentation guides (5).`));
  DL = J(`editorIndentGuide.activeBackground6`, `#00000000`, T(`editorActiveIndentGuide6`, `Color of the active editor indentation guides (6).`));
  OL = J(`editorActiveLineNumber.foreground`, {
    dark: `#c6c6c6`,
    light: `#0B216F`,
    hcDark: vC,
    hcLight: vC
  }, T(`editorActiveLineNumber`, `Color of editor active line number`), false, T(`deprecatedEditorActiveLineNumber`, `Id is deprecated. Use 'editorLineNumber.activeForeground' instead.`));
  kL = J(`editorLineNumber.activeForeground`, OL, T(`editorActiveLineNumber`, `Color of editor active line number`));
  AL = J(`editorLineNumber.dimmedForeground`, null, T(`editorDimmedLineNumber`, `Color of the final editor line when editor.renderFinalNewline is set to dimmed.`));
  jL = J(`editorRuler.foreground`, {
    dark: `#5A5A5A`,
    light: K.lightgrey,
    hcDark: K.white,
    hcLight: `#292929`
  }, T(`editorRuler`, `Color of the editor rulers.`));
  ML = J(`editorCodeLens.foreground`, {
    dark: `#999999`,
    light: `#919191`,
    hcDark: `#999999`,
    hcLight: `#292929`
  }, T(`editorCodeLensForeground`, `Foreground color of editor CodeLens`));
  NL = J(`editorBracketMatch.background`, {
    dark: `#0064001a`,
    light: `#0064001a`,
    hcDark: `#0064001a`,
    hcLight: `#0000`
  }, T(`editorBracketMatchBackground`, `Background color behind matching brackets`));
  PL = J(`editorBracketMatch.border`, {
    dark: `#888`,
    light: `#B9B9B9`,
    hcDark: _C,
    hcLight: _C
  }, T(`editorBracketMatchBorder`, `Color for matching brackets boxes`));
  FL = J(`editorOverviewRuler.border`, {
    dark: `#7f7f7f4d`,
    light: `#7f7f7f4d`,
    hcDark: `#7f7f7f4d`,
    hcLight: `#666666`
  }, T(`editorOverviewRulerBorder`, `Color of the overview ruler border.`));
  IL = J(`editorOverviewRuler.background`, null, T(`editorOverviewRulerBackground`, `Background color of the editor overview ruler.`));
  $te = J(`editorGutter.background`, DC, T(`editorGutter`, `Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.`));
  ene = J(`editorUnnecessaryCode.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#fff`).transparent(0.8),
    hcLight: _C
  }, T(`unnecessaryCodeBorder`, `Border color of unnecessary (unused) source code in the editor.`));
  LL = J(`editorUnnecessaryCode.opacity`, {
    dark: K.fromHex(`#000a`),
    light: K.fromHex(`#0007`),
    hcDark: null,
    hcLight: null
  }, T(`unnecessaryCodeOpacity`, `Opacity of unnecessary (unused) source code in the editor. For example, "#000000c0" will render the code with 75% opacity. For high contrast themes, use the  'editorUnnecessaryCode.border' theme color to underline unnecessary code instead of fading it out.`));
  tne = J(`editorGhostText.border`, {
    dark: null,
    light: null,
    hcDark: K.fromHex(`#fff`).transparent(0.8),
    hcLight: K.fromHex(`#292929`).transparent(0.8)
  }, T(`editorGhostTextBorder`, `Border color of ghost text in the editor.`));
  RL = J(`editorGhostText.foreground`, {
    dark: K.fromHex(`#ffffff56`),
    light: K.fromHex(`#0007`),
    hcDark: null,
    hcLight: null
  }, T(`editorGhostTextForeground`, `Foreground color of the ghost text in the editor.`));
  nne = J(`editorGhostText.background`, null, T(`editorGhostTextBackground`, `Background color of the ghost text in the editor.`));
  zL = new K(new Xy(0, 122, 204, 0.6));
  BL = J(`editorOverviewRuler.rangeHighlightForeground`, zL, T(`overviewRulerRangeHighlight`, `Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.`), true);
  VL = J(`editorOverviewRuler.errorForeground`, {
    dark: new K(new Xy(255, 18, 18, 0.7)),
    light: new K(new Xy(255, 18, 18, 0.7)),
    hcDark: new K(new Xy(255, 50, 50, 1)),
    hcLight: `#B5200D`
  }, T(`overviewRuleError`, `Overview ruler marker color for errors.`));
  HL = J(`editorOverviewRuler.warningForeground`, {
    dark: FC,
    light: FC,
    hcDark: IC,
    hcLight: IC
  }, T(`overviewRuleWarning`, `Overview ruler marker color for warnings.`));
  UL = J(`editorOverviewRuler.infoForeground`, {
    dark: LC,
    light: LC,
    hcDark: RC,
    hcLight: RC
  }, T(`overviewRuleInfo`, `Overview ruler marker color for infos.`));
  WL = J(`editorBracketHighlight.foreground1`, {
    dark: `#FFD700`,
    light: `#0431FAFF`,
    hcDark: `#FFD700`,
    hcLight: `#0431FAFF`
  }, T(`editorBracketHighlightForeground1`, `Foreground color of brackets (1). Requires enabling bracket pair colorization.`));
  GL = J(`editorBracketHighlight.foreground2`, {
    dark: `#DA70D6`,
    light: `#319331FF`,
    hcDark: `#DA70D6`,
    hcLight: `#319331FF`
  }, T(`editorBracketHighlightForeground2`, `Foreground color of brackets (2). Requires enabling bracket pair colorization.`));
  KL = J(`editorBracketHighlight.foreground3`, {
    dark: `#179FFF`,
    light: `#7B3814FF`,
    hcDark: `#87CEFA`,
    hcLight: `#7B3814FF`
  }, T(`editorBracketHighlightForeground3`, `Foreground color of brackets (3). Requires enabling bracket pair colorization.`));
  qL = J(`editorBracketHighlight.foreground4`, `#00000000`, T(`editorBracketHighlightForeground4`, `Foreground color of brackets (4). Requires enabling bracket pair colorization.`));
  JL = J(`editorBracketHighlight.foreground5`, `#00000000`, T(`editorBracketHighlightForeground5`, `Foreground color of brackets (5). Requires enabling bracket pair colorization.`));
  YL = J(`editorBracketHighlight.foreground6`, `#00000000`, T(`editorBracketHighlightForeground6`, `Foreground color of brackets (6). Requires enabling bracket pair colorization.`));
  XL = J(`editorBracketHighlight.unexpectedBracket.foreground`, {
    dark: new K(new Xy(255, 18, 18, 0.8)),
    light: new K(new Xy(255, 18, 18, 0.8)),
    hcDark: `new Color(new RGBA(255, 50, 50, 1))`,
    hcLight: `#B5200D`
  }, T(`editorBracketHighlightUnexpectedBracketForeground`, `Foreground color of unexpected brackets.`));
  ZL = J(`editorBracketPairGuide.background1`, `#00000000`, T(`editorBracketPairGuide.background1`, `Background color of inactive bracket pair guides (1). Requires enabling bracket pair guides.`));
  QL = J(`editorBracketPairGuide.background2`, `#00000000`, T(`editorBracketPairGuide.background2`, `Background color of inactive bracket pair guides (2). Requires enabling bracket pair guides.`));
  $L = J(`editorBracketPairGuide.background3`, `#00000000`, T(`editorBracketPairGuide.background3`, `Background color of inactive bracket pair guides (3). Requires enabling bracket pair guides.`));
  eR = J(`editorBracketPairGuide.background4`, `#00000000`, T(`editorBracketPairGuide.background4`, `Background color of inactive bracket pair guides (4). Requires enabling bracket pair guides.`));
  tR = J(`editorBracketPairGuide.background5`, `#00000000`, T(`editorBracketPairGuide.background5`, `Background color of inactive bracket pair guides (5). Requires enabling bracket pair guides.`));
  nR = J(`editorBracketPairGuide.background6`, `#00000000`, T(`editorBracketPairGuide.background6`, `Background color of inactive bracket pair guides (6). Requires enabling bracket pair guides.`));
  rR = J(`editorBracketPairGuide.activeBackground1`, `#00000000`, T(`editorBracketPairGuide.activeBackground1`, `Background color of active bracket pair guides (1). Requires enabling bracket pair guides.`));
  iR = J(`editorBracketPairGuide.activeBackground2`, `#00000000`, T(`editorBracketPairGuide.activeBackground2`, `Background color of active bracket pair guides (2). Requires enabling bracket pair guides.`));
  aR = J(`editorBracketPairGuide.activeBackground3`, `#00000000`, T(`editorBracketPairGuide.activeBackground3`, `Background color of active bracket pair guides (3). Requires enabling bracket pair guides.`));
  oR = J(`editorBracketPairGuide.activeBackground4`, `#00000000`, T(`editorBracketPairGuide.activeBackground4`, `Background color of active bracket pair guides (4). Requires enabling bracket pair guides.`));
  sR = J(`editorBracketPairGuide.activeBackground5`, `#00000000`, T(`editorBracketPairGuide.activeBackground5`, `Background color of active bracket pair guides (5). Requires enabling bracket pair guides.`));
  cR = J(`editorBracketPairGuide.activeBackground6`, `#00000000`, T(`editorBracketPairGuide.activeBackground6`, `Background color of active bracket pair guides (6). Requires enabling bracket pair guides.`));
  rne = J(`editorUnicodeHighlight.border`, FC, T(`editorUnicodeHighlight.border`, `Border color used to highlight unicode characters.`));
  ine = J(`editorUnicodeHighlight.background`, PC, T(`editorUnicodeHighlight.background`, `Background color used to highlight unicode characters.`));
  qb((e10, t10) => {
    let n10 = e10.getColor(DC), r10 = e10.getColor(iL), i10 = r10 && !r10.isTransparent() ? r10 : n10;
    i10 && t10.addRule(`.monaco-editor .inputarea.ime-input { background-color: ${i10}; }`);
  });
  function lR(e10, t10) {
    let n10 = [], r10 = [];
    for (let r11 of e10) t10.has(r11) || n10.push(r11);
    for (let n11 of t10) e10.has(n11) || r10.push(n11);
    return {
      removed: n10,
      added: r10
    };
  }
  function uR(e10, t10) {
    let n10 = /* @__PURE__ */ new Set();
    for (let r10 of t10) e10.has(r10) && n10.add(r10);
    return n10;
  }
  var dR = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, fR = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let pR = class extends j {
    constructor(e10, t10) {
      super(), this._markerService = t10, this._onDidChangeMarker = this._register(new N()), this._markerDecorations = new H_(), e10.getModels().forEach((e11) => this._onModelAdded(e11)), this._register(e10.onModelAdded(this._onModelAdded, this)), this._register(e10.onModelRemoved(this._onModelRemoved, this)), this._register(this._markerService.onMarkerChanged(this._handleMarkerChange, this));
    }
    dispose() {
      super.dispose(), this._markerDecorations.forEach((e10) => e10.dispose()), this._markerDecorations.clear();
    }
    getMarker(e10, t10) {
      let n10 = this._markerDecorations.get(e10);
      return n10 && n10.getMarker(t10) || null;
    }
    _handleMarkerChange(e10) {
      e10.forEach((e11) => {
        let t10 = this._markerDecorations.get(e11);
        t10 && this._updateDecorations(t10);
      });
    }
    _onModelAdded(e10) {
      let t10 = new mR(e10);
      this._markerDecorations.set(e10.uri, t10), this._updateDecorations(t10);
    }
    _onModelRemoved(e10) {
      var _a3;
      let t10 = this._markerDecorations.get(e10.uri);
      t10 && (t10.dispose(), this._markerDecorations.delete(e10.uri)), (e10.uri.scheme === Su.inMemory || e10.uri.scheme === Su.internal || e10.uri.scheme === Su.vscode) && ((_a3 = this._markerService) == null ? void 0 : _a3.read({
        resource: e10.uri
      }).map((e11) => e11.owner).forEach((t11) => this._markerService.remove(t11, [
        e10.uri
      ])));
    }
    _updateDecorations(e10) {
      let t10 = this._markerService.read({
        resource: e10.model.uri,
        take: 500
      });
      e10.update(t10) && this._onDidChangeMarker.fire(e10.model);
    }
  };
  pR = dR([
    fR(0, Qf),
    fR(1, rL)
  ], pR);
  var mR = class extends j {
    constructor(e10) {
      super(), this.model = e10, this._map = new K_(), this._register(k(() => {
        this.model.deltaDecorations([
          ...this._map.values()
        ], []), this._map.clear();
      }));
    }
    update(e10) {
      let { added: t10, removed: n10 } = lR(new Set(this._map.keys()), new Set(e10));
      if (t10.length === 0 && n10.length === 0) return false;
      let r10 = n10.map((e11) => this._map.get(e11)), i10 = t10.map((e11) => ({
        range: this._createDecorationRange(this.model, e11),
        options: this._createDecorationOption(e11)
      })), a10 = this.model.deltaDecorations(r10, i10);
      for (let e11 of n10) this._map.delete(e11);
      for (let e11 = 0; e11 < a10.length; e11++) this._map.set(t10[e11], a10[e11]);
      return true;
    }
    getMarker(e10) {
      return this._map.getKey(e10.id);
    }
    _createDecorationRange(e10, t10) {
      let n10 = F.lift(t10);
      if (t10.severity === tL.Hint && !this._hasMarkerTag(t10, 1) && !this._hasMarkerTag(t10, 2) && (n10 = n10.setEndPosition(n10.startLineNumber, n10.startColumn + 2)), n10 = e10.validateRange(n10), n10.isEmpty()) {
        let t11 = e10.getLineLastNonWhitespaceColumn(n10.startLineNumber) || e10.getLineMaxColumn(n10.startLineNumber);
        if (t11 === 1 || n10.endColumn >= t11) return n10;
        let r10 = e10.getWordAtPosition(n10.getStartPosition());
        r10 && (n10 = new F(n10.startLineNumber, r10.startColumn, n10.endLineNumber, r10.endColumn));
      } else if (t10.endColumn === Number.MAX_VALUE && t10.startColumn === 1 && n10.startLineNumber === n10.endLineNumber) {
        let r10 = e10.getLineFirstNonWhitespaceColumn(t10.startLineNumber);
        r10 < n10.endColumn && (n10 = new F(n10.startLineNumber, r10, n10.endLineNumber, n10.endColumn), t10.startColumn = r10);
      }
      return n10;
    }
    _createDecorationOption(e10) {
      let t10, n10, r10, i10, a10;
      switch (e10.severity) {
        case tL.Hint:
          t10 = this._hasMarkerTag(e10, 2) ? void 0 : this._hasMarkerTag(e10, 1) ? `squiggly-unnecessary` : `squiggly-hint`, r10 = 0;
          break;
        case tL.Info:
          t10 = `squiggly-info`, n10 = Hb(UL), r10 = 10, a10 = {
            color: Hb(Gw),
            position: 1
          };
          break;
        case tL.Warning:
          t10 = `squiggly-warning`, n10 = Hb(HL), r10 = 20, a10 = {
            color: Hb(Kw),
            position: 1
          };
          break;
        case tL.Error:
        default:
          t10 = `squiggly-error`, n10 = Hb(VL), r10 = 30, a10 = {
            color: Hb(qw),
            position: 1
          };
          break;
      }
      return e10.tags && (e10.tags.indexOf(1) !== -1 && (i10 = `squiggly-inline-unnecessary`), e10.tags.indexOf(2) !== -1 && (i10 = `squiggly-inline-deprecated`)), {
        description: `marker-decoration`,
        stickiness: 1,
        className: t10,
        showIfCollapsed: true,
        overviewRuler: {
          color: n10,
          position: Z_.Right
        },
        minimap: a10,
        zIndex: r10,
        inlineClassName: i10
      };
    }
    _hasMarkerTag(e10, t10) {
      return e10.tags ? e10.tags.indexOf(t10) >= 0 : false;
    }
  };
  hR = Xf(`markerDecorationsService`);
  gR = class e10 {
    static _nextVisibleColumn(t10, n10, r10) {
      return t10 === 9 ? e10.nextRenderTabStop(n10, r10) : rc(t10) || ic(t10) ? n10 + 2 : n10 + 1;
    }
    static visibleColumnFromColumn(e11, t10, n10) {
      let r10 = Math.min(t10 - 1, e11.length), i10 = e11.substring(0, r10), a10 = new Ks(i10), o10 = 0;
      for (; !a10.eol(); ) {
        let e12 = Us(i10, r10, a10.offset);
        a10.nextGraphemeLength(), o10 = this._nextVisibleColumn(e12, o10, n10);
      }
      return o10;
    }
    static columnFromVisibleColumn(e11, t10, n10) {
      if (t10 <= 0) return 1;
      let r10 = e11.length, i10 = new Ks(e11), a10 = 0, o10 = 1;
      for (; !i10.eol(); ) {
        let s10 = Us(e11, r10, i10.offset);
        i10.nextGraphemeLength();
        let c10 = this._nextVisibleColumn(s10, a10, n10), l10 = i10.offset + 1;
        if (c10 >= t10) {
          let e12 = t10 - a10, n11 = c10 - t10;
          return n11 < e12 ? l10 : o10;
        }
        a10 = c10, o10 = l10;
      }
      return r10 + 1;
    }
    static nextRenderTabStop(e11, t10) {
      return e11 + t10 - e11 % t10;
    }
    static nextIndentTabStop(e11, t10) {
      return e11 + t10 - e11 % t10;
    }
    static prevRenderTabStop(e11, t10) {
      return Math.max(0, e11 - 1 - (e11 - 1) % t10);
    }
    static prevIndentTabStop(e11, t10) {
      return Math.max(0, e11 - 1 - (e11 - 1) % t10);
    }
  };
  function _R(e10, t10, n10) {
    let r10 = 0;
    for (let n11 = 0; n11 < e10.length; n11++) e10.charAt(n11) === `	` ? r10 = gR.nextIndentTabStop(r10, t10) : r10++;
    let i10 = ``;
    if (!n10) {
      let e11 = Math.floor(r10 / t10);
      r10 %= t10;
      for (let t11 = 0; t11 < e11; t11++) i10 += `	`;
    }
    for (let e11 = 0; e11 < r10; e11++) i10 += ` `;
    return i10;
  }
  vR = function(e10, t10, n10) {
    let r10 = Es(e10);
    return r10 === -1 && (r10 = e10.length), _R(e10.substring(0, r10), t10, n10) + e10.substring(r10);
  };
  var yR = class {
    constructor(e10, t10, n10, r10) {
      this.range = e10, this.nestingLevel = t10, this.nestingLevelOfEqualBracketType = n10, this.isInvalid = r10;
    }
  }, bR = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.range = e10, this.openingBracketRange = t10, this.closingBracketRange = n10, this.nestingLevel = r10, this.nestingLevelOfEqualBracketType = i10, this.bracketPairNode = a10;
    }
    get openingBracketInfo() {
      return this.bracketPairNode.openingBracket.bracketInfo;
    }
  }, xR = class extends bR {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(e10, t10, n10, r10, i10, a10), this.minVisibleColumnIndentation = o10;
    }
  };
  function SR(e10, t10, n10, r10) {
    return e10 === n10 ? ER(0, r10 - t10) : ER(n10 - e10, r10);
  }
  CR = 0;
  function wR(e10) {
    return e10 === 0;
  }
  const TR = 2 ** 26;
  function ER(e10, t10) {
    return e10 * TR + t10;
  }
  function DR(e10) {
    let t10 = e10, n10 = Math.floor(t10 / TR), r10 = t10 - n10 * TR;
    return new Rv(n10, r10);
  }
  function OR(e10) {
    return Math.floor(e10 / TR);
  }
  kR = function(e10) {
    return e10;
  };
  AR = function(e10, t10) {
    let n10 = e10 + t10;
    return t10 >= TR && (n10 -= e10 % TR), n10;
  };
  function jR(e10, t10) {
    return e10.reduce((e11, n10) => AR(e11, t10(n10)), CR);
  }
  function MR(e10, t10) {
    return e10 === t10;
  }
  function NR(e10, t10) {
    let n10 = e10, r10 = t10, i10 = r10 - n10;
    if (i10 <= 0) return CR;
    let a10 = Math.floor(n10 / TR), o10 = Math.floor(r10 / TR), s10 = r10 - o10 * TR;
    if (a10 === o10) {
      let e11 = n10 - a10 * TR;
      return ER(0, s10 - e11);
    } else return ER(o10 - a10, s10);
  }
  function PR(e10, t10) {
    return e10 < t10;
  }
  function FR(e10, t10) {
    return e10 <= t10;
  }
  function IR(e10, t10) {
    return e10 >= t10;
  }
  function LR(e10) {
    return ER(e10.lineNumber - 1, e10.column - 1);
  }
  function RR(e10, t10) {
    let n10 = e10, r10 = Math.floor(n10 / TR), i10 = n10 - r10 * TR, a10 = t10, o10 = Math.floor(a10 / TR), s10 = a10 - o10 * TR;
    return new F(r10 + 1, i10 + 1, o10 + 1, s10 + 1);
  }
  function zR(e10) {
    let t10 = ws(e10);
    return ER(t10.length - 1, t10[t10.length - 1].length);
  }
  var BR = class e10 {
    static fromModelContentChanges(t10) {
      let n10 = t10.map((t11) => {
        let n11 = F.lift(t11.range);
        return new e10(LR(n11.getStartPosition()), LR(n11.getEndPosition()), zR(t11.text));
      }).reverse();
      return n10;
    }
    constructor(e11, t10, n10) {
      this.startOffset = e11, this.endOffset = t10, this.newLength = n10;
    }
    toString() {
      return `[${DR(this.startOffset)}...${DR(this.endOffset)}) -> ${DR(this.newLength)}`;
    }
  }, VR = class {
    constructor(e10) {
      this.nextEditIdx = 0, this.deltaOldToNewLineCount = 0, this.deltaOldToNewColumnCount = 0, this.deltaLineIdxInOld = -1, this.edits = e10.map((e11) => HR.from(e11));
    }
    getOffsetBeforeChange(e10) {
      return this.adjustNextEdit(e10), this.translateCurToOld(e10);
    }
    getDistanceToNextChange(e10) {
      this.adjustNextEdit(e10);
      let t10 = this.edits[this.nextEditIdx], n10 = t10 ? this.translateOldToCur(t10.offsetObj) : null;
      return n10 === null ? null : NR(e10, n10);
    }
    translateOldToCur(e10) {
      return e10.lineCount === this.deltaLineIdxInOld ? ER(e10.lineCount + this.deltaOldToNewLineCount, e10.columnCount + this.deltaOldToNewColumnCount) : ER(e10.lineCount + this.deltaOldToNewLineCount, e10.columnCount);
    }
    translateCurToOld(e10) {
      let t10 = DR(e10);
      return t10.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld ? ER(t10.lineCount - this.deltaOldToNewLineCount, t10.columnCount - this.deltaOldToNewColumnCount) : ER(t10.lineCount - this.deltaOldToNewLineCount, t10.columnCount);
    }
    adjustNextEdit(e10) {
      for (; this.nextEditIdx < this.edits.length; ) {
        let t10 = this.edits[this.nextEditIdx], n10 = this.translateOldToCur(t10.endOffsetAfterObj);
        if (FR(n10, e10)) {
          this.nextEditIdx++;
          let e11 = DR(n10), r10 = DR(this.translateOldToCur(t10.endOffsetBeforeObj)), i10 = e11.lineCount - r10.lineCount;
          this.deltaOldToNewLineCount += i10;
          let a10 = this.deltaLineIdxInOld === t10.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0, o10 = e11.columnCount - r10.columnCount;
          this.deltaOldToNewColumnCount = a10 + o10, this.deltaLineIdxInOld = t10.endOffsetBeforeObj.lineCount;
        } else break;
      }
    }
  }, HR = class e10 {
    static from(t10) {
      return new e10(t10.startOffset, t10.endOffset, t10.newLength);
    }
    constructor(e11, t10, n10) {
      this.endOffsetBeforeObj = DR(t10), this.endOffsetAfterObj = DR(AR(e11, n10)), this.offsetObj = DR(e11);
    }
  };
  const UR = [];
  var WR = (_la = class {
    static create(t10, n10) {
      if (t10 <= 128 && n10.length === 0) {
        let r10 = _la.cache[t10];
        return r10 || (r10 = new _la(t10, n10), _la.cache[t10] = r10), r10;
      }
      return new _la(t10, n10);
    }
    static getEmpty() {
      return this.empty;
    }
    constructor(e10, t10) {
      this.items = e10, this.additionalItems = t10;
    }
    add(t10, n10) {
      let r10 = n10.getKey(t10), i10 = r10 >> 5;
      if (i10 === 0) {
        let t11 = 1 << r10 | this.items;
        return t11 === this.items ? this : _la.create(t11, this.additionalItems);
      }
      i10--;
      let a10 = this.additionalItems.slice(0);
      for (; a10.length < i10; ) a10.push(0);
      return a10[i10] |= 1 << (r10 & 31), _la.create(this.items, a10);
    }
    merge(t10) {
      let n10 = this.items | t10.items;
      if (this.additionalItems === UR && t10.additionalItems === UR) return n10 === this.items ? this : n10 === t10.items ? t10 : _la.create(n10, UR);
      let r10 = [];
      for (let e10 = 0; e10 < Math.max(this.additionalItems.length, t10.additionalItems.length); e10++) {
        let n11 = this.additionalItems[e10] || 0, i10 = t10.additionalItems[e10] || 0;
        r10.push(n11 | i10);
      }
      return _la.create(n10, r10);
    }
    intersects(e10) {
      if ((this.items & e10.items) !== 0) return true;
      for (let t10 = 0; t10 < Math.min(this.additionalItems.length, e10.additionalItems.length); t10++) if ((this.additionalItems[t10] & e10.additionalItems[t10]) !== 0) return true;
      return false;
    }
  }, _la.cache = Array(129), _la.empty = _la.create(0, UR), _la);
  const GR = {
    getKey(e10) {
      return e10;
    }
  };
  let qR, JR, YR, XR, ZR, QR, $R;
  KR = class {
    constructor() {
      this.items = /* @__PURE__ */ new Map();
    }
    getKey(e10) {
      let t10 = this.items.get(e10);
      return t10 === void 0 && (t10 = this.items.size, this.items.set(e10, t10)), t10;
    }
  };
  qR = class {
    get length() {
      return this._length;
    }
    constructor(e10) {
      this._length = e10;
    }
  };
  JR = class e10 extends qR {
    static create(t10, n10, r10) {
      let i10 = t10.length;
      return n10 && (i10 = AR(i10, n10.length)), r10 && (i10 = AR(i10, r10.length)), new e10(i10, t10, n10, r10, n10 ? n10.missingOpeningBracketIds : WR.getEmpty());
    }
    get kind() {
      return 2;
    }
    get listHeight() {
      return 0;
    }
    get childrenLength() {
      return 3;
    }
    getChild(e11) {
      switch (e11) {
        case 0:
          return this.openingBracket;
        case 1:
          return this.child;
        case 2:
          return this.closingBracket;
      }
      throw Error(`Invalid child index`);
    }
    get children() {
      let e11 = [];
      return e11.push(this.openingBracket), this.child && e11.push(this.child), this.closingBracket && e11.push(this.closingBracket), e11;
    }
    constructor(e11, t10, n10, r10, i10) {
      super(e11), this.openingBracket = t10, this.child = n10, this.closingBracket = r10, this.missingOpeningBracketIds = i10;
    }
    canBeReused(e11) {
      return !(this.closingBracket === null || e11.intersects(this.missingOpeningBracketIds));
    }
    deepClone() {
      return new e10(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);
    }
    computeMinIndentation(e11, t10) {
      return this.child ? this.child.computeMinIndentation(AR(e11, this.openingBracket.length), t10) : 2 ** 53 - 1;
    }
  };
  YR = class extends qR {
    static create23(e10, t10, n10, r10 = false) {
      let i10 = e10.length, a10 = e10.missingOpeningBracketIds;
      if (e10.listHeight !== t10.listHeight) throw Error(`Invalid list heights`);
      if (i10 = AR(i10, t10.length), a10 = a10.merge(t10.missingOpeningBracketIds), n10) {
        if (e10.listHeight !== n10.listHeight) throw Error(`Invalid list heights`);
        i10 = AR(i10, n10.length), a10 = a10.merge(n10.missingOpeningBracketIds);
      }
      return r10 ? new ZR(i10, e10.listHeight + 1, e10, t10, n10, a10) : new XR(i10, e10.listHeight + 1, e10, t10, n10, a10);
    }
    static getEmpty() {
      return new $R(CR, 0, [], WR.getEmpty());
    }
    get kind() {
      return 4;
    }
    get missingOpeningBracketIds() {
      return this._missingOpeningBracketIds;
    }
    constructor(e10, t10, n10) {
      super(e10), this.listHeight = t10, this._missingOpeningBracketIds = n10, this.cachedMinIndentation = -1;
    }
    throwIfImmutable() {
    }
    makeLastElementMutable() {
      this.throwIfImmutable();
      let e10 = this.childrenLength;
      if (e10 === 0) return;
      let t10 = this.getChild(e10 - 1), n10 = t10.kind === 4 ? t10.toMutable() : t10;
      return t10 !== n10 && this.setChild(e10 - 1, n10), n10;
    }
    makeFirstElementMutable() {
      this.throwIfImmutable();
      let e10 = this.childrenLength;
      if (e10 === 0) return;
      let t10 = this.getChild(0), n10 = t10.kind === 4 ? t10.toMutable() : t10;
      return t10 !== n10 && this.setChild(0, n10), n10;
    }
    canBeReused(e10) {
      if (e10.intersects(this.missingOpeningBracketIds) || this.childrenLength === 0) return false;
      let t10 = this;
      for (; t10.kind === 4; ) {
        let e11 = t10.childrenLength;
        if (e11 === 0) throw new Dr();
        t10 = t10.getChild(e11 - 1);
      }
      return t10.canBeReused(e10);
    }
    handleChildrenChanged() {
      this.throwIfImmutable();
      let e10 = this.childrenLength, t10 = this.getChild(0).length, n10 = this.getChild(0).missingOpeningBracketIds;
      for (let r10 = 1; r10 < e10; r10++) {
        let e11 = this.getChild(r10);
        t10 = AR(t10, e11.length), n10 = n10.merge(e11.missingOpeningBracketIds);
      }
      this._length = t10, this._missingOpeningBracketIds = n10, this.cachedMinIndentation = -1;
    }
    computeMinIndentation(e10, t10) {
      if (this.cachedMinIndentation !== -1) return this.cachedMinIndentation;
      let n10 = 2 ** 53 - 1, r10 = e10;
      for (let e11 = 0; e11 < this.childrenLength; e11++) {
        let i10 = this.getChild(e11);
        i10 && (n10 = Math.min(n10, i10.computeMinIndentation(r10, t10)), r10 = AR(r10, i10.length));
      }
      return this.cachedMinIndentation = n10, n10;
    }
  };
  XR = class e10 extends YR {
    get childrenLength() {
      return this._item3 === null ? 2 : 3;
    }
    getChild(e11) {
      switch (e11) {
        case 0:
          return this._item1;
        case 1:
          return this._item2;
        case 2:
          return this._item3;
      }
      throw Error(`Invalid child index`);
    }
    setChild(e11, t10) {
      switch (e11) {
        case 0:
          this._item1 = t10;
          return;
        case 1:
          this._item2 = t10;
          return;
        case 2:
          this._item3 = t10;
          return;
      }
      throw Error(`Invalid child index`);
    }
    get children() {
      return this._item3 ? [
        this._item1,
        this._item2,
        this._item3
      ] : [
        this._item1,
        this._item2
      ];
    }
    get item1() {
      return this._item1;
    }
    get item2() {
      return this._item2;
    }
    get item3() {
      return this._item3;
    }
    constructor(e11, t10, n10, r10, i10, a10) {
      super(e11, t10, a10), this._item1 = n10, this._item2 = r10, this._item3 = i10;
    }
    deepClone() {
      return new e10(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);
    }
    appendChildOfSameHeight(e11) {
      if (this._item3) throw Error(`Cannot append to a full (2,3) tree node`);
      this.throwIfImmutable(), this._item3 = e11, this.handleChildrenChanged();
    }
    unappendChild() {
      if (!this._item3) throw Error(`Cannot remove from a non-full (2,3) tree node`);
      this.throwIfImmutable();
      let e11 = this._item3;
      return this._item3 = null, this.handleChildrenChanged(), e11;
    }
    prependChildOfSameHeight(e11) {
      if (this._item3) throw Error(`Cannot prepend to a full (2,3) tree node`);
      this.throwIfImmutable(), this._item3 = this._item2, this._item2 = this._item1, this._item1 = e11, this.handleChildrenChanged();
    }
    unprependChild() {
      if (!this._item3) throw Error(`Cannot remove from a non-full (2,3) tree node`);
      this.throwIfImmutable();
      let e11 = this._item1;
      return this._item1 = this._item2, this._item2 = this._item3, this._item3 = null, this.handleChildrenChanged(), e11;
    }
    toMutable() {
      return this;
    }
  };
  ZR = class extends XR {
    toMutable() {
      return new XR(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);
    }
    throwIfImmutable() {
      throw Error(`this instance is immutable`);
    }
  };
  QR = class e10 extends YR {
    get childrenLength() {
      return this._children.length;
    }
    getChild(e11) {
      return this._children[e11];
    }
    setChild(e11, t10) {
      this._children[e11] = t10;
    }
    get children() {
      return this._children;
    }
    constructor(e11, t10, n10, r10) {
      super(e11, t10, r10), this._children = n10;
    }
    deepClone() {
      let t10 = Array(this._children.length);
      for (let e11 = 0; e11 < this._children.length; e11++) t10[e11] = this._children[e11].deepClone();
      return new e10(this.length, this.listHeight, t10, this.missingOpeningBracketIds);
    }
    appendChildOfSameHeight(e11) {
      this.throwIfImmutable(), this._children.push(e11), this.handleChildrenChanged();
    }
    unappendChild() {
      this.throwIfImmutable();
      let e11 = this._children.pop();
      return this.handleChildrenChanged(), e11;
    }
    prependChildOfSameHeight(e11) {
      this.throwIfImmutable(), this._children.unshift(e11), this.handleChildrenChanged();
    }
    unprependChild() {
      this.throwIfImmutable();
      let e11 = this._children.shift();
      return this.handleChildrenChanged(), e11;
    }
    toMutable() {
      return this;
    }
  };
  $R = class extends QR {
    toMutable() {
      return new QR(this.length, this.listHeight, [
        ...this.children
      ], this.missingOpeningBracketIds);
    }
    throwIfImmutable() {
      throw Error(`this instance is immutable`);
    }
  };
  const ez = [];
  let tz, nz, rz, iz, az, sz, cz, lz;
  tz = class extends qR {
    get listHeight() {
      return 0;
    }
    get childrenLength() {
      return 0;
    }
    getChild(e10) {
      return null;
    }
    get children() {
      return ez;
    }
    deepClone() {
      return this;
    }
  };
  nz = class extends tz {
    get kind() {
      return 0;
    }
    get missingOpeningBracketIds() {
      return WR.getEmpty();
    }
    canBeReused(e10) {
      return true;
    }
    computeMinIndentation(e10, t10) {
      let n10 = DR(e10), r10 = (n10.columnCount === 0 ? n10.lineCount : n10.lineCount + 1) + 1, i10 = OR(AR(e10, this.length)) + 1, a10 = 2 ** 53 - 1;
      for (let e11 = r10; e11 <= i10; e11++) {
        let n11 = t10.getLineFirstNonWhitespaceColumn(e11), r11 = t10.getLineContent(e11);
        if (n11 === 0) continue;
        let i11 = gR.visibleColumnFromColumn(r11, n11, t10.getOptions().tabSize);
        a10 = Math.min(a10, i11);
      }
      return a10;
    }
  };
  rz = class e10 extends tz {
    static create(t10, n10, r10) {
      let i10 = new e10(t10, n10, r10);
      return i10;
    }
    get kind() {
      return 1;
    }
    get missingOpeningBracketIds() {
      return WR.getEmpty();
    }
    constructor(e11, t10, n10) {
      super(e11), this.bracketInfo = t10, this.bracketIds = n10;
    }
    get text() {
      return this.bracketInfo.bracketText;
    }
    get languageId() {
      return this.bracketInfo.languageId;
    }
    canBeReused(e11) {
      return false;
    }
    computeMinIndentation(e11, t10) {
      return 2 ** 53 - 1;
    }
  };
  iz = class extends tz {
    get kind() {
      return 3;
    }
    constructor(e10, t10) {
      super(t10), this.missingOpeningBracketIds = e10;
    }
    canBeReused(e10) {
      return !e10.intersects(this.missingOpeningBracketIds);
    }
    computeMinIndentation(e10, t10) {
      return 2 ** 53 - 1;
    }
  };
  az = class {
    constructor(e10, t10, n10, r10, i10) {
      this.length = e10, this.kind = t10, this.bracketId = n10, this.bracketIds = r10, this.astNode = i10;
    }
  };
  oz = class {
    constructor(e10, t10) {
      this.textModel = e10, this.bracketTokens = t10, this.reader = new sz(this.textModel, this.bracketTokens), this._offset = CR, this.didPeek = false, this.peeked = null, this.textBufferLineCount = e10.getLineCount(), this.textBufferLastLineLength = e10.getLineLength(this.textBufferLineCount);
    }
    get offset() {
      return this._offset;
    }
    get length() {
      return ER(this.textBufferLineCount - 1, this.textBufferLastLineLength);
    }
    skip(e10) {
      this.didPeek = false, this._offset = AR(this._offset, e10);
      let t10 = DR(this._offset);
      this.reader.setPosition(t10.lineCount, t10.columnCount);
    }
    read() {
      let e10;
      return this.peeked ? (this.didPeek = false, e10 = this.peeked) : e10 = this.reader.read(), e10 && (this._offset = AR(this._offset, e10.length)), e10;
    }
    peek() {
      return this.didPeek || (this.peeked = this.reader.read(), this.didPeek = true), this.peeked;
    }
  };
  sz = class {
    constructor(e10, t10) {
      this.textModel = e10, this.bracketTokens = t10, this.lineIdx = 0, this.line = null, this.lineCharOffset = 0, this.lineTokens = null, this.lineTokenOffset = 0, this.peekedToken = null, this.textBufferLineCount = e10.getLineCount(), this.textBufferLastLineLength = e10.getLineLength(this.textBufferLineCount);
    }
    setPosition(e10, t10) {
      e10 === this.lineIdx ? (this.lineCharOffset = t10, this.line !== null && (this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset))) : (this.lineIdx = e10, this.lineCharOffset = t10, this.line = null), this.peekedToken = null;
    }
    read() {
      if (this.peekedToken) {
        let e11 = this.peekedToken;
        return this.peekedToken = null, this.lineCharOffset += kR(e11.length), e11;
      }
      if (this.lineIdx > this.textBufferLineCount - 1 || this.lineIdx === this.textBufferLineCount - 1 && this.lineCharOffset >= this.textBufferLastLineLength) return null;
      this.line === null && (this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1), this.line = this.lineTokens.getLineContent(), this.lineTokenOffset = this.lineCharOffset === 0 ? 0 : this.lineTokens.findTokenIndexAtOffset(this.lineCharOffset));
      let e10 = this.lineIdx, t10 = this.lineCharOffset, n10 = 0;
      for (; ; ) {
        let r11 = this.lineTokens, i10 = r11.getCount(), a10 = null;
        if (this.lineTokenOffset < i10) {
          let o10 = r11.getMetadata(this.lineTokenOffset);
          for (; this.lineTokenOffset + 1 < i10 && o10 === r11.getMetadata(this.lineTokenOffset + 1); ) this.lineTokenOffset++;
          let s10 = Vx.getTokenType(o10) === 0, c10 = Vx.containsBalancedBrackets(o10), l10 = r11.getEndOffset(this.lineTokenOffset);
          if (c10 && s10 && this.lineCharOffset < l10) {
            let e11 = r11.getLanguageId(this.lineTokenOffset), t11 = this.line.substring(this.lineCharOffset, l10), n11 = this.bracketTokens.getSingleLanguageBracketTokens(e11), i11 = n11.regExpGlobal;
            if (i11) {
              i11.lastIndex = 0;
              let e12 = i11.exec(t11);
              e12 && (a10 = n11.getToken(e12[0]), a10 && (this.lineCharOffset += e12.index));
            }
          }
          if (n10 += l10 - this.lineCharOffset, a10) if (e10 !== this.lineIdx || t10 !== this.lineCharOffset) {
            this.peekedToken = a10;
            break;
          } else return this.lineCharOffset += kR(a10.length), a10;
          else this.lineTokenOffset++, this.lineCharOffset = l10;
        } else if (this.lineIdx === this.textBufferLineCount - 1 || (this.lineIdx++, this.lineTokens = this.textModel.tokenization.getLineTokens(this.lineIdx + 1), this.lineTokenOffset = 0, this.line = this.lineTokens.getLineContent(), this.lineCharOffset = 0, n10 += 33, n10 > 1e3)) break;
        if (n10 > 1500) break;
      }
      let r10 = SR(e10, t10, this.lineIdx, this.lineCharOffset);
      return new az(r10, 0, -1, WR.getEmpty(), new nz(r10));
    }
  };
  cz = class {
    constructor(e10, t10) {
      this.text = e10, this._offset = CR, this.idx = 0;
      let n10 = t10.getRegExpStr(), r10 = n10 ? RegExp(n10 + `|
`, `gi`) : null, i10 = [], a10, o10 = 0, s10 = 0, c10 = 0, l10 = 0, u10 = [];
      for (let e11 = 0; e11 < 60; e11++) u10.push(new az(ER(0, e11), 0, -1, WR.getEmpty(), new nz(ER(0, e11))));
      let d10 = [];
      for (let e11 = 0; e11 < 60; e11++) d10.push(new az(ER(1, e11), 0, -1, WR.getEmpty(), new nz(ER(1, e11))));
      if (r10) for (r10.lastIndex = 0; (a10 = r10.exec(e10)) !== null; ) {
        let e11 = a10.index, n11 = a10[0];
        if (n11 === `
`) o10++, s10 = e11 + 1;
        else {
          if (c10 !== e11) {
            let t11;
            if (l10 === o10) {
              let n12 = e11 - c10;
              if (n12 < u10.length) t11 = u10[n12];
              else {
                let e12 = ER(0, n12);
                t11 = new az(e12, 0, -1, WR.getEmpty(), new nz(e12));
              }
            } else {
              let n12 = o10 - l10, r11 = e11 - s10;
              if (n12 === 1 && r11 < d10.length) t11 = d10[r11];
              else {
                let e12 = ER(n12, r11);
                t11 = new az(e12, 0, -1, WR.getEmpty(), new nz(e12));
              }
            }
            i10.push(t11);
          }
          i10.push(t10.getToken(n11)), c10 = e11 + n11.length, l10 = o10;
        }
      }
      let f10 = e10.length;
      if (c10 !== f10) {
        let e11 = l10 === o10 ? ER(0, f10 - c10) : ER(o10 - l10, f10 - s10);
        i10.push(new az(e11, 0, -1, WR.getEmpty(), new nz(e11)));
      }
      this.length = ER(o10, f10 - s10), this.tokens = i10;
    }
    get offset() {
      return this._offset;
    }
    read() {
      return this.tokens[this.idx++] || null;
    }
    peek() {
      return this.tokens[this.idx] || null;
    }
    skip(e10) {
      throw new Tr();
    }
  };
  lz = class e10 {
    static createFromLanguage(t10, n10) {
      function r10(e11) {
        return n10.getKey(`${e11.languageId}:::${e11.bracketText}`);
      }
      let i10 = /* @__PURE__ */ new Map();
      for (let e11 of t10.bracketsNew.openingBrackets) {
        let t11 = ER(0, e11.bracketText.length), n11 = r10(e11), a10 = WR.getEmpty().add(n11, GR);
        i10.set(e11.bracketText, new az(t11, 1, n11, a10, rz.create(t11, e11, a10)));
      }
      for (let e11 of t10.bracketsNew.closingBrackets) {
        let t11 = ER(0, e11.bracketText.length), n11 = WR.getEmpty(), a10 = e11.getOpeningBrackets();
        for (let e12 of a10) n11 = n11.add(r10(e12), GR);
        i10.set(e11.bracketText, new az(t11, 2, r10(a10[0]), n11, rz.create(t11, e11, n11)));
      }
      return new e10(i10);
    }
    constructor(e11) {
      this.map = e11, this.hasRegExp = false, this._regExpGlobal = null;
    }
    getRegExpStr() {
      if (this.isEmpty) return null;
      {
        let e11 = [
          ...this.map.keys()
        ];
        return e11.sort(), e11.reverse(), e11.map((e12) => uz(e12)).join(`|`);
      }
    }
    get regExpGlobal() {
      if (!this.hasRegExp) {
        let e11 = this.getRegExpStr();
        this._regExpGlobal = e11 ? new RegExp(e11, `gi`) : null, this.hasRegExp = true;
      }
      return this._regExpGlobal;
    }
    getToken(e11) {
      return this.map.get(e11.toLowerCase());
    }
    findClosingTokenText(e11) {
      for (let [t10, n10] of this.map) if (n10.kind === 2 && n10.bracketIds.intersects(e11)) return t10;
    }
    get isEmpty() {
      return this.map.size === 0;
    }
  };
  function uz(e10) {
    let t10 = gs(e10);
    return /^[\w ]+/.test(e10) && (t10 = `\\b${t10}`), /[\w ]+$/.test(e10) && (t10 = `${t10}\\b`), t10;
  }
  dz = class {
    constructor(e10, t10) {
      this.denseKeyProvider = e10, this.getLanguageConfiguration = t10, this.languageIdToBracketTokens = /* @__PURE__ */ new Map();
    }
    didLanguageChange(e10) {
      return this.languageIdToBracketTokens.has(e10);
    }
    getSingleLanguageBracketTokens(e10) {
      let t10 = this.languageIdToBracketTokens.get(e10);
      return t10 || (t10 = lz.createFromLanguage(this.getLanguageConfiguration(e10), this.denseKeyProvider), this.languageIdToBracketTokens.set(e10, t10)), t10;
    }
  };
  function fz(e10) {
    if (e10.length === 0) return null;
    if (e10.length === 1) return e10[0];
    let t10 = 0;
    function n10() {
      if (t10 >= e10.length) return null;
      let n11 = t10, r11 = e10[n11].listHeight;
      for (t10++; t10 < e10.length && e10[t10].listHeight === r11; ) t10++;
      return t10 - n11 >= 2 ? pz(n11 === 0 && t10 === e10.length ? e10 : e10.slice(n11, t10), false) : e10[n11];
    }
    let r10 = n10(), i10 = n10();
    if (!i10) return r10;
    for (let e11 = n10(); e11; e11 = n10()) mz(r10, i10) <= mz(i10, e11) ? (r10 = hz(r10, i10), i10 = e11) : i10 = hz(i10, e11);
    let a10 = hz(r10, i10);
    return a10;
  }
  function pz(e10, t10 = false) {
    if (e10.length === 0) return null;
    if (e10.length === 1) return e10[0];
    let n10 = e10.length;
    for (; n10 > 3; ) {
      let r10 = n10 >> 1;
      for (let i10 = 0; i10 < r10; i10++) {
        let r11 = i10 << 1;
        e10[i10] = YR.create23(e10[r11], e10[r11 + 1], r11 + 3 === n10 ? e10[r11 + 2] : null, t10);
      }
      n10 = r10;
    }
    return YR.create23(e10[0], e10[1], n10 >= 3 ? e10[2] : null, t10);
  }
  function mz(e10, t10) {
    return Math.abs(e10.listHeight - t10.listHeight);
  }
  function hz(e10, t10) {
    return e10.listHeight === t10.listHeight ? YR.create23(e10, t10, null, false) : e10.listHeight > t10.listHeight ? gz(e10, t10) : _z(t10, e10);
  }
  function gz(e10, t10) {
    e10 = e10.toMutable();
    let n10 = e10, r10 = [], i10;
    for (; ; ) {
      if (t10.listHeight === n10.listHeight) {
        i10 = t10;
        break;
      }
      if (n10.kind !== 4) throw Error(`unexpected`);
      r10.push(n10), n10 = n10.makeLastElementMutable();
    }
    for (let e11 = r10.length - 1; e11 >= 0; e11--) {
      let t11 = r10[e11];
      i10 ? t11.childrenLength >= 3 ? i10 = YR.create23(t11.unappendChild(), i10, null, false) : (t11.appendChildOfSameHeight(i10), i10 = void 0) : t11.handleChildrenChanged();
    }
    return i10 ? YR.create23(e10, i10, null, false) : e10;
  }
  function _z(e10, t10) {
    e10 = e10.toMutable();
    let n10 = e10, r10 = [];
    for (; t10.listHeight !== n10.listHeight; ) {
      if (n10.kind !== 4) throw Error(`unexpected`);
      r10.push(n10), n10 = n10.makeFirstElementMutable();
    }
    let i10 = t10;
    for (let e11 = r10.length - 1; e11 >= 0; e11--) {
      let t11 = r10[e11];
      i10 ? t11.childrenLength >= 3 ? i10 = YR.create23(i10, t11.unprependChild(), null, false) : (t11.prependChildOfSameHeight(i10), i10 = void 0) : t11.handleChildrenChanged();
    }
    return i10 ? YR.create23(i10, e10, null, false) : e10;
  }
  var vz = class {
    constructor(e10) {
      this.lastOffset = CR, this.nextNodes = [
        e10
      ], this.offsets = [
        CR
      ], this.idxs = [];
    }
    readLongestNodeAt(e10, t10) {
      if (PR(e10, this.lastOffset)) throw Error(`Invalid offset`);
      for (this.lastOffset = e10; ; ) {
        let n10 = bz(this.nextNodes);
        if (!n10) return;
        let r10 = bz(this.offsets);
        if (PR(e10, r10)) return;
        if (PR(r10, e10)) if (AR(r10, n10.length) <= e10) this.nextNodeAfterCurrent();
        else {
          let e11 = yz(n10);
          e11 === -1 ? this.nextNodeAfterCurrent() : (this.nextNodes.push(n10.getChild(e11)), this.offsets.push(r10), this.idxs.push(e11));
        }
        else if (t10(n10)) return this.nextNodeAfterCurrent(), n10;
        else {
          let e11 = yz(n10);
          if (e11 === -1) {
            this.nextNodeAfterCurrent();
            return;
          } else this.nextNodes.push(n10.getChild(e11)), this.offsets.push(r10), this.idxs.push(e11);
        }
      }
    }
    nextNodeAfterCurrent() {
      for (; ; ) {
        let e10 = bz(this.offsets), t10 = bz(this.nextNodes);
        if (this.nextNodes.pop(), this.offsets.pop(), this.idxs.length === 0) break;
        let n10 = bz(this.nextNodes), r10 = yz(n10, this.idxs[this.idxs.length - 1]);
        if (r10 !== -1) {
          this.nextNodes.push(n10.getChild(r10)), this.offsets.push(AR(e10, t10.length)), this.idxs[this.idxs.length - 1] = r10;
          break;
        } else this.idxs.pop();
      }
    }
  };
  function yz(e10, t10 = -1) {
    for (; ; ) {
      if (t10++, t10 >= e10.childrenLength) return -1;
      if (e10.getChild(t10)) return t10;
    }
  }
  function bz(e10) {
    return e10.length > 0 ? e10[e10.length - 1] : void 0;
  }
  xz = function(e10, t10, n10, r10) {
    let i10 = new Sz(e10, t10, n10, r10);
    return i10.parseDocument();
  };
  var Sz = class {
    constructor(e10, t10, n10, r10) {
      if (this.tokenizer = e10, this.createImmutableLists = r10, this._itemsConstructed = 0, this._itemsFromCache = 0, n10 && r10) throw Error(`Not supported`);
      this.oldNodeReader = n10 ? new vz(n10) : void 0, this.positionMapper = new VR(t10);
    }
    parseDocument() {
      this._itemsConstructed = 0, this._itemsFromCache = 0;
      let e10 = this.parseList(WR.getEmpty(), 0);
      return e10 || (e10 = YR.getEmpty()), e10;
    }
    parseList(e10, t10) {
      let n10 = [];
      for (; ; ) {
        let r11 = this.tryReadChildFromCache(e10);
        if (!r11) {
          let n11 = this.tokenizer.peek();
          if (!n11 || n11.kind === 2 && n11.bracketIds.intersects(e10)) break;
          r11 = this.parseChild(e10, t10 + 1);
        }
        r11.kind === 4 && r11.childrenLength === 0 || n10.push(r11);
      }
      let r10 = this.oldNodeReader ? fz(n10) : pz(n10, this.createImmutableLists);
      return r10;
    }
    tryReadChildFromCache(e10) {
      if (this.oldNodeReader) {
        let t10 = this.positionMapper.getDistanceToNextChange(this.tokenizer.offset);
        if (t10 === null || !wR(t10)) {
          let n10 = this.oldNodeReader.readLongestNodeAt(this.positionMapper.getOffsetBeforeChange(this.tokenizer.offset), (n11) => {
            if (t10 !== null && !PR(n11.length, t10)) return false;
            let r10 = n11.canBeReused(e10);
            return r10;
          });
          if (n10) return this._itemsFromCache++, this.tokenizer.skip(n10.length), n10;
        }
      }
    }
    parseChild(e10, t10) {
      this._itemsConstructed++;
      let n10 = this.tokenizer.read();
      switch (n10.kind) {
        case 2:
          return new iz(n10.bracketIds, n10.length);
        case 0:
          return n10.astNode;
        case 1: {
          if (t10 > 300) return new nz(n10.length);
          let r10 = e10.merge(n10.bracketIds), i10 = this.parseList(r10, t10 + 1), a10 = this.tokenizer.peek();
          return a10 && a10.kind === 2 && (a10.bracketId === n10.bracketId || a10.bracketIds.intersects(n10.bracketIds)) ? (this.tokenizer.read(), JR.create(n10.astNode, i10, a10.astNode)) : JR.create(n10.astNode, i10, null);
        }
        default:
          throw Error(`unexpected`);
      }
    }
  };
  function Cz(e10, t10) {
    if (e10.length === 0) return t10;
    if (t10.length === 0) return e10;
    let n10 = new me(Tz(e10)), r10 = Tz(t10);
    r10.push({
      modified: false,
      lengthBefore: void 0,
      lengthAfter: void 0
    });
    let i10 = n10.dequeue();
    function a10(e11) {
      if (e11 === void 0) {
        let e12 = n10.takeWhile((e13) => true) || [];
        return i10 && e12.unshift(i10), e12;
      }
      let t11 = [];
      for (; i10 && !wR(e11); ) {
        let [r11, a11] = i10.splitAt(e11);
        t11.push(r11), e11 = NR(r11.lengthAfter, e11), i10 = a11 ?? n10.dequeue();
      }
      return wR(e11) || t11.push(new wz(false, e11, e11)), t11;
    }
    let o10 = [];
    function s10(e11, t11, n11) {
      if (o10.length > 0 && MR(o10[o10.length - 1].endOffset, e11)) {
        let e12 = o10[o10.length - 1];
        o10[o10.length - 1] = new BR(e12.startOffset, t11, AR(e12.newLength, n11));
      } else o10.push({
        startOffset: e11,
        endOffset: t11,
        newLength: n11
      });
    }
    let c10 = CR;
    for (let e11 of r10) {
      let t11 = a10(e11.lengthBefore);
      if (e11.modified) {
        let n11 = jR(t11, (e12) => e12.lengthBefore), r11 = AR(c10, n11);
        s10(c10, r11, e11.lengthAfter), c10 = r11;
      } else for (let e12 of t11) {
        let t12 = c10;
        c10 = AR(c10, e12.lengthBefore), e12.modified && s10(t12, c10, e12.lengthAfter);
      }
    }
    return o10;
  }
  var wz = class e10 {
    constructor(e11, t10, n10) {
      this.modified = e11, this.lengthBefore = t10, this.lengthAfter = n10;
    }
    splitAt(t10) {
      let n10 = NR(t10, this.lengthAfter);
      return MR(n10, CR) ? [
        this,
        void 0
      ] : this.modified ? [
        new e10(this.modified, this.lengthBefore, t10),
        new e10(this.modified, CR, n10)
      ] : [
        new e10(this.modified, t10, t10),
        new e10(this.modified, n10, n10)
      ];
    }
    toString() {
      return `${this.modified ? `M` : `U`}:${DR(this.lengthBefore)} -> ${DR(this.lengthAfter)}`;
    }
  };
  function Tz(e10) {
    let t10 = [], n10 = CR;
    for (let r10 of e10) {
      let e11 = NR(n10, r10.startOffset);
      wR(e11) || t10.push(new wz(false, e11, e11));
      let i10 = NR(r10.startOffset, r10.endOffset);
      t10.push(new wz(true, i10, r10.newLength)), n10 = r10.endOffset;
    }
    return t10;
  }
  var Ez = class extends j {
    didLanguageChange(e10) {
      return this.brackets.didLanguageChange(e10);
    }
    constructor(e10, t10) {
      if (super(), this.textModel = e10, this.getLanguageConfiguration = t10, this.didChangeEmitter = new N(), this.denseKeyProvider = new KR(), this.brackets = new dz(this.denseKeyProvider, this.getLanguageConfiguration), this.onDidChange = this.didChangeEmitter.event, this.queuedTextEditsForInitialAstWithoutTokens = [], this.queuedTextEdits = [], e10.tokenization.hasTokens) e10.tokenization.backgroundTokenizationState === 2 ? (this.initialAstWithoutTokens = void 0, this.astWithTokens = this.parseDocumentFromTextBuffer([], void 0, false)) : (this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer([], void 0, true), this.astWithTokens = this.initialAstWithoutTokens);
      else {
        let e11 = this.brackets.getSingleLanguageBracketTokens(this.textModel.getLanguageId()), t11 = new cz(this.textModel.getValue(), e11);
        this.initialAstWithoutTokens = xz(t11, [], void 0, true), this.astWithTokens = this.initialAstWithoutTokens;
      }
    }
    handleDidChangeBackgroundTokenizationState() {
      if (this.textModel.tokenization.backgroundTokenizationState === 2) {
        let e10 = this.initialAstWithoutTokens === void 0;
        this.initialAstWithoutTokens = void 0, e10 || this.didChangeEmitter.fire();
      }
    }
    handleDidChangeTokens({ ranges: e10 }) {
      let t10 = e10.map((e11) => new BR(ER(e11.fromLineNumber - 1, 0), ER(e11.toLineNumber, 0), ER(e11.toLineNumber - e11.fromLineNumber + 1, 0)));
      this.handleEdits(t10, true), this.initialAstWithoutTokens || this.didChangeEmitter.fire();
    }
    handleContentChanged(e10) {
      let t10 = BR.fromModelContentChanges(e10.changes);
      this.handleEdits(t10, false);
    }
    handleEdits(e10, t10) {
      let n10 = Cz(this.queuedTextEdits, e10);
      this.queuedTextEdits = n10, this.initialAstWithoutTokens && !t10 && (this.queuedTextEditsForInitialAstWithoutTokens = Cz(this.queuedTextEditsForInitialAstWithoutTokens, e10));
    }
    flushQueue() {
      this.queuedTextEdits.length > 0 && (this.astWithTokens = this.parseDocumentFromTextBuffer(this.queuedTextEdits, this.astWithTokens, false), this.queuedTextEdits = []), this.queuedTextEditsForInitialAstWithoutTokens.length > 0 && (this.initialAstWithoutTokens && (this.initialAstWithoutTokens = this.parseDocumentFromTextBuffer(this.queuedTextEditsForInitialAstWithoutTokens, this.initialAstWithoutTokens, false)), this.queuedTextEditsForInitialAstWithoutTokens = []);
    }
    parseDocumentFromTextBuffer(e10, t10, n10) {
      let r10 = false, i10 = r10 ? t10 == null ? void 0 : t10.deepClone() : t10, a10 = new oz(this.textModel, this.brackets), o10 = xz(a10, e10, i10, n10);
      return o10;
    }
    getBracketsInRange(e10, t10) {
      this.flushQueue();
      let n10 = ER(e10.startLineNumber - 1, e10.startColumn - 1), r10 = ER(e10.endLineNumber - 1, e10.endColumn - 1);
      return new he((e11) => {
        let i10 = this.initialAstWithoutTokens || this.astWithTokens;
        kz(i10, CR, i10.length, n10, r10, e11, 0, 0, /* @__PURE__ */ new Map(), t10);
      });
    }
    getBracketPairsInRange(e10, t10) {
      this.flushQueue();
      let n10 = LR(e10.getStartPosition()), r10 = LR(e10.getEndPosition());
      return new he((e11) => {
        let i10 = this.initialAstWithoutTokens || this.astWithTokens, a10 = new Az(e11, t10, this.textModel);
        jz(i10, CR, i10.length, n10, r10, a10, 0, /* @__PURE__ */ new Map());
      });
    }
    getFirstBracketAfter(e10) {
      this.flushQueue();
      let t10 = this.initialAstWithoutTokens || this.astWithTokens;
      return Oz(t10, CR, t10.length, LR(e10));
    }
    getFirstBracketBefore(e10) {
      this.flushQueue();
      let t10 = this.initialAstWithoutTokens || this.astWithTokens;
      return Dz(t10, CR, t10.length, LR(e10));
    }
  };
  function Dz(e10, t10, n10, r10) {
    if (e10.kind === 4 || e10.kind === 2) {
      let i10 = [];
      for (let r11 of e10.children) n10 = AR(t10, r11.length), i10.push({
        nodeOffsetStart: t10,
        nodeOffsetEnd: n10
      }), t10 = n10;
      for (let t11 = i10.length - 1; t11 >= 0; t11--) {
        let { nodeOffsetStart: n11, nodeOffsetEnd: a10 } = i10[t11];
        if (PR(n11, r10)) {
          let i11 = Dz(e10.children[t11], n11, a10, r10);
          if (i11) return i11;
        }
      }
      return null;
    } else if (e10.kind === 3) return null;
    else if (e10.kind === 1) {
      let r11 = RR(t10, n10);
      return {
        bracketInfo: e10.bracketInfo,
        range: r11
      };
    }
    return null;
  }
  function Oz(e10, t10, n10, r10) {
    if (e10.kind === 4 || e10.kind === 2) {
      for (let i10 of e10.children) {
        if (n10 = AR(t10, i10.length), PR(r10, n10)) {
          let e11 = Oz(i10, t10, n10, r10);
          if (e11) return e11;
        }
        t10 = n10;
      }
      return null;
    } else if (e10.kind === 3) return null;
    else if (e10.kind === 1) {
      let r11 = RR(t10, n10);
      return {
        bracketInfo: e10.bracketInfo,
        range: r11
      };
    }
    return null;
  }
  function kz(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10 = false) {
    if (o10 > 200) return true;
    whileLoop: for (; ; ) switch (e10.kind) {
      case 4: {
        let s11 = e10.childrenLength;
        for (let u11 = 0; u11 < s11; u11++) {
          let s12 = e10.getChild(u11);
          if (s12) {
            if (n10 = AR(t10, s12.length), FR(t10, i10) && IR(n10, r10)) {
              let u12 = IR(n10, i10);
              if (u12) {
                e10 = s12;
                continue whileLoop;
              }
              let d10 = kz(s12, t10, n10, r10, i10, a10, o10, 0, c10, l10);
              if (!d10) return false;
            }
            t10 = n10;
          }
        }
        return true;
      }
      case 2: {
        let u11 = !l10 || !e10.closingBracket || e10.closingBracket.bracketInfo.closesColorized(e10.openingBracket.bracketInfo), d10 = 0;
        if (c10) {
          let t11 = c10.get(e10.openingBracket.text);
          t11 === void 0 && (t11 = 0), d10 = t11, u11 && (t11++, c10.set(e10.openingBracket.text, t11));
        }
        let f10 = e10.childrenLength;
        for (let p10 = 0; p10 < f10; p10++) {
          let f11 = e10.getChild(p10);
          if (f11) {
            if (n10 = AR(t10, f11.length), FR(t10, i10) && IR(n10, r10)) {
              let p11 = IR(n10, i10);
              if (p11 && f11.kind !== 1) {
                e10 = f11, u11 ? (o10++, s10 = d10 + 1) : s10 = d10;
                continue whileLoop;
              }
              if (u11 || f11.kind !== 1 || !e10.closingBracket) {
                let s11 = kz(f11, t10, n10, r10, i10, a10, u11 ? o10 + 1 : o10, u11 ? d10 + 1 : d10, c10, l10, !e10.closingBracket);
                if (!s11) return false;
              }
            }
            t10 = n10;
          }
        }
        return c10 == null ? void 0 : c10.set(e10.openingBracket.text, d10), true;
      }
      case 3: {
        let e11 = RR(t10, n10);
        return a10(new yR(e11, o10 - 1, 0, true));
      }
      case 1: {
        let e11 = RR(t10, n10);
        return a10(new yR(e11, o10 - 1, s10 - 1, u10));
      }
      case 0:
        return true;
    }
  }
  var Az = class {
    constructor(e10, t10, n10) {
      this.push = e10, this.includeMinIndentation = t10, this.textModel = n10;
    }
  };
  function jz(e10, t10, n10, r10, i10, a10, o10, s10) {
    var _a3;
    if (o10 > 200) return true;
    let c10 = true;
    if (e10.kind === 2) {
      let l10 = 0;
      if (s10) {
        let t11 = s10.get(e10.openingBracket.text);
        t11 === void 0 && (t11 = 0), l10 = t11, t11++, s10.set(e10.openingBracket.text, t11);
      }
      let u10 = AR(t10, e10.openingBracket.length), d10 = -1;
      if (a10.includeMinIndentation && (d10 = e10.computeMinIndentation(t10, a10.textModel)), c10 = a10.push(new xR(RR(t10, n10), RR(t10, u10), e10.closingBracket ? RR(AR(u10, ((_a3 = e10.child) == null ? void 0 : _a3.length) || CR), n10) : void 0, o10, l10, e10, d10)), t10 = u10, c10 && e10.child) {
        let l11 = e10.child;
        if (n10 = AR(t10, l11.length), FR(t10, i10) && IR(n10, r10) && (c10 = jz(l11, t10, n10, r10, i10, a10, o10 + 1, s10), !c10)) return false;
      }
      s10 == null ? void 0 : s10.set(e10.openingBracket.text, l10);
    } else {
      let n11 = t10;
      for (let t11 of e10.children) {
        let e11 = n11;
        if (n11 = AR(n11, t11.length), FR(e11, i10) && FR(r10, n11) && (c10 = jz(t11, e11, n11, r10, i10, a10, o10, s10), !c10)) return false;
      }
    }
    return c10;
  }
  var Mz = class extends j {
    get canBuildAST() {
      let e10 = 5e4 * 100;
      return this.textModel.getValueLength() <= e10;
    }
    constructor(e10, t10) {
      super(), this.textModel = e10, this.languageConfigurationService = t10, this.bracketPairsTree = this._register(new Br()), this.onDidChangeEmitter = new N(), this.onDidChange = this.onDidChangeEmitter.event, this.bracketsRequested = false;
    }
    handleLanguageConfigurationServiceChange(e10) {
      var _a3;
      (!e10.languageId || ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.didLanguageChange(e10.languageId))) && (this.bracketPairsTree.clear(), this.updateBracketPairsTree());
    }
    handleDidChangeOptions(e10) {
      this.bracketPairsTree.clear(), this.updateBracketPairsTree();
    }
    handleDidChangeLanguage(e10) {
      this.bracketPairsTree.clear(), this.updateBracketPairsTree();
    }
    handleDidChangeContent(e10) {
      var _a3;
      (_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.handleContentChanged(e10);
    }
    handleDidChangeBackgroundTokenizationState() {
      var _a3;
      (_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.handleDidChangeBackgroundTokenizationState();
    }
    handleDidChangeTokens(e10) {
      var _a3;
      (_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.handleDidChangeTokens(e10);
    }
    updateBracketPairsTree() {
      if (this.bracketsRequested && this.canBuildAST) {
        if (!this.bracketPairsTree.value) {
          let e10 = new A();
          this.bracketPairsTree.value = Nz(e10.add(new Ez(this.textModel, (e11) => this.languageConfigurationService.getLanguageConfiguration(e11))), e10), e10.add(this.bracketPairsTree.value.object.onDidChange((e11) => this.onDidChangeEmitter.fire(e11))), this.onDidChangeEmitter.fire();
        }
      } else this.bracketPairsTree.value && (this.bracketPairsTree.clear(), this.onDidChangeEmitter.fire());
    }
    getBracketPairsInRange(e10) {
      var _a3;
      return this.bracketsRequested = true, this.updateBracketPairsTree(), ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.getBracketPairsInRange(e10, false)) || he.empty;
    }
    getBracketPairsInRangeWithMinIndentation(e10) {
      var _a3;
      return this.bracketsRequested = true, this.updateBracketPairsTree(), ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.getBracketPairsInRange(e10, true)) || he.empty;
    }
    getBracketsInRange(e10, t10 = false) {
      var _a3;
      return this.bracketsRequested = true, this.updateBracketPairsTree(), ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.getBracketsInRange(e10, t10)) || he.empty;
    }
    findMatchingBracketUp(e10, t10, n10) {
      let r10 = this.textModel.validatePosition(t10), i10 = this.textModel.getLanguageIdAtPosition(r10.lineNumber, r10.column);
      if (this.canBuildAST) {
        let n11 = this.languageConfigurationService.getLanguageConfiguration(i10).bracketsNew.getClosingBracketInfo(e10);
        if (!n11) return null;
        let r11 = this.getBracketPairsInRange(F.fromPositions(t10, t10)).findLast((e11) => n11.closes(e11.openingBracketInfo));
        return r11 ? r11.openingBracketRange : null;
      } else {
        let t11 = e10.toLowerCase(), a10 = this.languageConfigurationService.getLanguageConfiguration(i10).brackets;
        if (!a10) return null;
        let o10 = a10.textIsBracket[t11];
        return o10 ? Iz(this._findMatchingBracketUp(o10, r10, Pz(n10))) : null;
      }
    }
    matchBracket(e10, t10) {
      if (this.canBuildAST) {
        let t11 = this.getBracketPairsInRange(F.fromPositions(e10, e10)).filter((t12) => t12.closingBracketRange !== void 0 && (t12.openingBracketRange.containsPosition(e10) || t12.closingBracketRange.containsPosition(e10))).findLastMaxBy(le((t12) => t12.openingBracketRange.containsPosition(e10) ? t12.openingBracketRange : t12.closingBracketRange, F.compareRangesUsingStarts));
        return t11 ? [
          t11.openingBracketRange,
          t11.closingBracketRange
        ] : null;
      } else {
        let n10 = Pz(t10);
        return this._matchBracket(this.textModel.validatePosition(e10), n10);
      }
    }
    _establishBracketSearchOffsets(e10, t10, n10, r10) {
      let i10 = t10.getCount(), a10 = t10.getLanguageId(r10), o10 = Math.max(0, e10.column - 1 - n10.maxBracketLength);
      for (let e11 = r10 - 1; e11 >= 0; e11--) {
        let n11 = t10.getEndOffset(e11);
        if (n11 <= o10) break;
        if (Dh(t10.getStandardTokenType(e11)) || t10.getLanguageId(e11) !== a10) {
          o10 = n11;
          break;
        }
      }
      let s10 = Math.min(t10.getLineContent().length, e10.column - 1 + n10.maxBracketLength);
      for (let e11 = r10 + 1; e11 < i10; e11++) {
        let n11 = t10.getStartOffset(e11);
        if (n11 >= s10) break;
        if (Dh(t10.getStandardTokenType(e11)) || t10.getLanguageId(e11) !== a10) {
          s10 = n11;
          break;
        }
      }
      return {
        searchStartOffset: o10,
        searchEndOffset: s10
      };
    }
    _matchBracket(e10, t10) {
      let n10 = e10.lineNumber, r10 = this.textModel.tokenization.getLineTokens(n10), i10 = this.textModel.getLineContent(n10), a10 = r10.findTokenIndexAtOffset(e10.column - 1);
      if (a10 < 0) return null;
      let o10 = this.languageConfigurationService.getLanguageConfiguration(r10.getLanguageId(a10)).brackets;
      if (o10 && !Dh(r10.getStandardTokenType(a10))) {
        let { searchStartOffset: s10, searchEndOffset: c10 } = this._establishBracketSearchOffsets(e10, r10, o10, a10), l10 = null;
        for (; ; ) {
          let r11 = ag.findNextBracketInRange(o10.forwardRegex, n10, i10, s10, c10);
          if (!r11) break;
          if (r11.startColumn <= e10.column && e10.column <= r11.endColumn) {
            let e11 = i10.substring(r11.startColumn - 1, r11.endColumn - 1).toLowerCase(), n11 = this._matchFoundBracket(r11, o10.textIsBracket[e11], o10.textIsOpenBracket[e11], t10);
            if (n11) {
              if (n11 instanceof Fz) return null;
              l10 = n11;
            }
          }
          s10 = r11.endColumn - 1;
        }
        if (l10) return l10;
      }
      if (a10 > 0 && r10.getStartOffset(a10) === e10.column - 1) {
        let o11 = a10 - 1, s10 = this.languageConfigurationService.getLanguageConfiguration(r10.getLanguageId(o11)).brackets;
        if (s10 && !Dh(r10.getStandardTokenType(o11))) {
          let { searchStartOffset: a11, searchEndOffset: c10 } = this._establishBracketSearchOffsets(e10, r10, s10, o11), l10 = ag.findPrevBracketInRange(s10.reversedRegex, n10, i10, a11, c10);
          if (l10 && l10.startColumn <= e10.column && e10.column <= l10.endColumn) {
            let e11 = i10.substring(l10.startColumn - 1, l10.endColumn - 1).toLowerCase(), n11 = this._matchFoundBracket(l10, s10.textIsBracket[e11], s10.textIsOpenBracket[e11], t10);
            if (n11) return n11 instanceof Fz ? null : n11;
          }
        }
      }
      return null;
    }
    _matchFoundBracket(e10, t10, n10, r10) {
      if (!t10) return null;
      let i10 = n10 ? this._findMatchingBracketDown(t10, e10.getEndPosition(), r10) : this._findMatchingBracketUp(t10, e10.getStartPosition(), r10);
      return i10 ? i10 instanceof Fz ? i10 : [
        e10,
        i10
      ] : null;
    }
    _findMatchingBracketUp(e10, t10, n10) {
      let r10 = e10.languageId, i10 = e10.reversedRegex, a10 = -1, o10 = 0, s10 = (t11, r11, s11, c10) => {
        for (; ; ) {
          if (n10 && ++o10 % 100 == 0 && !n10()) return Fz.INSTANCE;
          let l10 = ag.findPrevBracketInRange(i10, t11, r11, s11, c10);
          if (!l10) break;
          let u10 = r11.substring(l10.startColumn - 1, l10.endColumn - 1).toLowerCase();
          if (e10.isOpen(u10) ? a10++ : e10.isClose(u10) && a10--, a10 === 0) return l10;
          c10 = l10.startColumn - 1;
        }
        return null;
      };
      for (let e11 = t10.lineNumber; e11 >= 1; e11--) {
        let n11 = this.textModel.tokenization.getLineTokens(e11), i11 = n11.getCount(), a11 = this.textModel.getLineContent(e11), o11 = i11 - 1, c10 = a11.length, l10 = a11.length;
        e11 === t10.lineNumber && (o11 = n11.findTokenIndexAtOffset(t10.column - 1), c10 = t10.column - 1, l10 = t10.column - 1);
        let u10 = true;
        for (; o11 >= 0; o11--) {
          let t11 = n11.getLanguageId(o11) === r10 && !Dh(n11.getStandardTokenType(o11));
          if (t11) u10 ? c10 = n11.getStartOffset(o11) : (c10 = n11.getStartOffset(o11), l10 = n11.getEndOffset(o11));
          else if (u10 && c10 !== l10) {
            let t12 = s10(e11, a11, c10, l10);
            if (t12) return t12;
          }
          u10 = t11;
        }
        if (u10 && c10 !== l10) {
          let t11 = s10(e11, a11, c10, l10);
          if (t11) return t11;
        }
      }
      return null;
    }
    _findMatchingBracketDown(e10, t10, n10) {
      let r10 = e10.languageId, i10 = e10.forwardRegex, a10 = 1, o10 = 0, s10 = (t11, r11, s11, c11) => {
        for (; ; ) {
          if (n10 && ++o10 % 100 == 0 && !n10()) return Fz.INSTANCE;
          let l10 = ag.findNextBracketInRange(i10, t11, r11, s11, c11);
          if (!l10) break;
          let u10 = r11.substring(l10.startColumn - 1, l10.endColumn - 1).toLowerCase();
          if (e10.isOpen(u10) ? a10++ : e10.isClose(u10) && a10--, a10 === 0) return l10;
          s11 = l10.endColumn - 1;
        }
        return null;
      }, c10 = this.textModel.getLineCount();
      for (let e11 = t10.lineNumber; e11 <= c10; e11++) {
        let n11 = this.textModel.tokenization.getLineTokens(e11), i11 = n11.getCount(), a11 = this.textModel.getLineContent(e11), o11 = 0, c11 = 0, l10 = 0;
        e11 === t10.lineNumber && (o11 = n11.findTokenIndexAtOffset(t10.column - 1), c11 = t10.column - 1, l10 = t10.column - 1);
        let u10 = true;
        for (; o11 < i11; o11++) {
          let t11 = n11.getLanguageId(o11) === r10 && !Dh(n11.getStandardTokenType(o11));
          if (t11) u10 || (c11 = n11.getStartOffset(o11)), l10 = n11.getEndOffset(o11);
          else if (u10 && c11 !== l10) {
            let t12 = s10(e11, a11, c11, l10);
            if (t12) return t12;
          }
          u10 = t11;
        }
        if (u10 && c11 !== l10) {
          let t11 = s10(e11, a11, c11, l10);
          if (t11) return t11;
        }
      }
      return null;
    }
    findPrevBracket(e10) {
      var _a3;
      let t10 = this.textModel.validatePosition(e10);
      if (this.canBuildAST) return this.bracketsRequested = true, this.updateBracketPairsTree(), ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.getFirstBracketBefore(t10)) || null;
      let n10 = null, r10 = null, i10 = null;
      for (let e11 = t10.lineNumber; e11 >= 1; e11--) {
        let a10 = this.textModel.tokenization.getLineTokens(e11), o10 = a10.getCount(), s10 = this.textModel.getLineContent(e11), c10 = o10 - 1, l10 = s10.length, u10 = s10.length;
        if (e11 === t10.lineNumber) {
          c10 = a10.findTokenIndexAtOffset(t10.column - 1), l10 = t10.column - 1, u10 = t10.column - 1;
          let e12 = a10.getLanguageId(c10);
          n10 !== e12 && (n10 = e12, r10 = this.languageConfigurationService.getLanguageConfiguration(n10).brackets, i10 = this.languageConfigurationService.getLanguageConfiguration(n10).bracketsNew);
        }
        let d10 = true;
        for (; c10 >= 0; c10--) {
          let t11 = a10.getLanguageId(c10);
          if (n10 !== t11) {
            if (r10 && i10 && d10 && l10 !== u10) {
              let t12 = ag.findPrevBracketInRange(r10.reversedRegex, e11, s10, l10, u10);
              if (t12) return this._toFoundBracket(i10, t12);
              d10 = false;
            }
            n10 = t11, r10 = this.languageConfigurationService.getLanguageConfiguration(n10).brackets, i10 = this.languageConfigurationService.getLanguageConfiguration(n10).bracketsNew;
          }
          let o11 = !!r10 && !Dh(a10.getStandardTokenType(c10));
          if (o11) d10 ? l10 = a10.getStartOffset(c10) : (l10 = a10.getStartOffset(c10), u10 = a10.getEndOffset(c10));
          else if (i10 && r10 && d10 && l10 !== u10) {
            let t12 = ag.findPrevBracketInRange(r10.reversedRegex, e11, s10, l10, u10);
            if (t12) return this._toFoundBracket(i10, t12);
          }
          d10 = o11;
        }
        if (i10 && r10 && d10 && l10 !== u10) {
          let t11 = ag.findPrevBracketInRange(r10.reversedRegex, e11, s10, l10, u10);
          if (t11) return this._toFoundBracket(i10, t11);
        }
      }
      return null;
    }
    findNextBracket(e10) {
      var _a3;
      let t10 = this.textModel.validatePosition(e10);
      if (this.canBuildAST) return this.bracketsRequested = true, this.updateBracketPairsTree(), ((_a3 = this.bracketPairsTree.value) == null ? void 0 : _a3.object.getFirstBracketAfter(t10)) || null;
      let n10 = this.textModel.getLineCount(), r10 = null, i10 = null, a10 = null;
      for (let e11 = t10.lineNumber; e11 <= n10; e11++) {
        let n11 = this.textModel.tokenization.getLineTokens(e11), o10 = n11.getCount(), s10 = this.textModel.getLineContent(e11), c10 = 0, l10 = 0, u10 = 0;
        if (e11 === t10.lineNumber) {
          c10 = n11.findTokenIndexAtOffset(t10.column - 1), l10 = t10.column - 1, u10 = t10.column - 1;
          let e12 = n11.getLanguageId(c10);
          r10 !== e12 && (r10 = e12, i10 = this.languageConfigurationService.getLanguageConfiguration(r10).brackets, a10 = this.languageConfigurationService.getLanguageConfiguration(r10).bracketsNew);
        }
        let d10 = true;
        for (; c10 < o10; c10++) {
          let t11 = n11.getLanguageId(c10);
          if (r10 !== t11) {
            if (a10 && i10 && d10 && l10 !== u10) {
              let t12 = ag.findNextBracketInRange(i10.forwardRegex, e11, s10, l10, u10);
              if (t12) return this._toFoundBracket(a10, t12);
              d10 = false;
            }
            r10 = t11, i10 = this.languageConfigurationService.getLanguageConfiguration(r10).brackets, a10 = this.languageConfigurationService.getLanguageConfiguration(r10).bracketsNew;
          }
          let o11 = !!i10 && !Dh(n11.getStandardTokenType(c10));
          if (o11) d10 || (l10 = n11.getStartOffset(c10)), u10 = n11.getEndOffset(c10);
          else if (a10 && i10 && d10 && l10 !== u10) {
            let t12 = ag.findNextBracketInRange(i10.forwardRegex, e11, s10, l10, u10);
            if (t12) return this._toFoundBracket(a10, t12);
          }
          d10 = o11;
        }
        if (a10 && i10 && d10 && l10 !== u10) {
          let t11 = ag.findNextBracketInRange(i10.forwardRegex, e11, s10, l10, u10);
          if (t11) return this._toFoundBracket(a10, t11);
        }
      }
      return null;
    }
    findEnclosingBrackets(e10, t10) {
      let n10 = this.textModel.validatePosition(e10);
      if (this.canBuildAST) {
        let e11 = F.fromPositions(n10), t11 = this.getBracketPairsInRange(F.fromPositions(n10, n10)).findLast((t12) => t12.closingBracketRange !== void 0 && t12.range.strictContainsRange(e11));
        return t11 ? [
          t11.openingBracketRange,
          t11.closingBracketRange
        ] : null;
      }
      let r10 = Pz(t10), i10 = this.textModel.getLineCount(), a10 = /* @__PURE__ */ new Map(), o10 = [], s10 = (e11, t11) => {
        if (!a10.has(e11)) {
          let n11 = [];
          for (let e12 = 0, r11 = t11 ? t11.brackets.length : 0; e12 < r11; e12++) n11[e12] = 0;
          a10.set(e11, n11);
        }
        o10 = a10.get(e11);
      }, c10 = 0, l10 = (e11, t11, n11, i11, a11) => {
        for (; ; ) {
          if (r10 && ++c10 % 100 == 0 && !r10()) return Fz.INSTANCE;
          let s11 = ag.findNextBracketInRange(e11.forwardRegex, t11, n11, i11, a11);
          if (!s11) break;
          let l11 = n11.substring(s11.startColumn - 1, s11.endColumn - 1).toLowerCase(), u11 = e11.textIsBracket[l11];
          if (u11 && (u11.isOpen(l11) ? o10[u11.index]++ : u11.isClose(l11) && o10[u11.index]--, o10[u11.index] === -1)) return this._matchFoundBracket(s11, u11, false, r10);
          i11 = s11.endColumn - 1;
        }
        return null;
      }, u10 = null, d10 = null;
      for (let e11 = n10.lineNumber; e11 <= i10; e11++) {
        let t11 = this.textModel.tokenization.getLineTokens(e11), r11 = t11.getCount(), i11 = this.textModel.getLineContent(e11), a11 = 0, o11 = 0, c11 = 0;
        if (e11 === n10.lineNumber) {
          a11 = t11.findTokenIndexAtOffset(n10.column - 1), o11 = n10.column - 1, c11 = n10.column - 1;
          let e12 = t11.getLanguageId(a11);
          u10 !== e12 && (u10 = e12, d10 = this.languageConfigurationService.getLanguageConfiguration(u10).brackets, s10(u10, d10));
        }
        let f10 = true;
        for (; a11 < r11; a11++) {
          let n11 = t11.getLanguageId(a11);
          if (u10 !== n11) {
            if (d10 && f10 && o11 !== c11) {
              let t12 = l10(d10, e11, i11, o11, c11);
              if (t12) return Iz(t12);
              f10 = false;
            }
            u10 = n11, d10 = this.languageConfigurationService.getLanguageConfiguration(u10).brackets, s10(u10, d10);
          }
          let r12 = !!d10 && !Dh(t11.getStandardTokenType(a11));
          if (r12) f10 || (o11 = t11.getStartOffset(a11)), c11 = t11.getEndOffset(a11);
          else if (d10 && f10 && o11 !== c11) {
            let t12 = l10(d10, e11, i11, o11, c11);
            if (t12) return Iz(t12);
          }
          f10 = r12;
        }
        if (d10 && f10 && o11 !== c11) {
          let t12 = l10(d10, e11, i11, o11, c11);
          if (t12) return Iz(t12);
        }
      }
      return null;
    }
    _toFoundBracket(e10, t10) {
      if (!t10) return null;
      let n10 = this.textModel.getValueInRange(t10);
      n10 = n10.toLowerCase();
      let r10 = e10.getBracketInfo(n10);
      return r10 ? {
        range: t10,
        bracketInfo: r10
      } : null;
    }
  };
  function Nz(e10, t10) {
    return {
      object: e10,
      dispose: () => t10 == null ? void 0 : t10.dispose()
    };
  }
  function Pz(e10) {
    if (e10 === void 0) return () => true;
    {
      let t10 = Date.now();
      return () => Date.now() - t10 <= e10;
    }
  }
  var Fz = (_ma = class {
    constructor() {
      this._searchCanceledBrand = void 0;
    }
  }, _ma.INSTANCE = new _ma(), _ma);
  function Iz(e10) {
    return e10 instanceof Fz ? null : e10;
  }
  var Lz = class extends j {
    constructor(e10) {
      super(), this.textModel = e10, this.colorProvider = new Rz(), this.onDidChangeEmitter = new N(), this.onDidChange = this.onDidChangeEmitter.event, this.colorizationOptions = e10.getOptions().bracketPairColorizationOptions, this._register(e10.bracketPairs.onDidChange((e11) => {
        this.onDidChangeEmitter.fire();
      }));
    }
    handleDidChangeOptions(e10) {
      this.colorizationOptions = this.textModel.getOptions().bracketPairColorizationOptions;
    }
    getDecorationsInRange(e10, t10, n10, r10) {
      if (r10 || t10 === void 0 || !this.colorizationOptions.enabled) return [];
      let i10 = this.textModel.bracketPairs.getBracketsInRange(e10, true).map((e11) => ({
        id: `bracket${e11.range.toString()}-${e11.nestingLevel}`,
        options: {
          description: `BracketPairColorization`,
          inlineClassName: this.colorProvider.getInlineClassName(e11, this.colorizationOptions.independentColorPoolPerBracketType)
        },
        ownerId: 0,
        range: e11.range
      })).toArray();
      return i10;
    }
    getAllDecorations(e10, t10) {
      return e10 === void 0 || !this.colorizationOptions.enabled ? [] : this.getDecorationsInRange(new F(1, 1, this.textModel.getLineCount(), 1), e10, t10);
    }
  }, Rz = class {
    constructor() {
      this.unexpectedClosingBracketClassName = `unexpected-closing-bracket`;
    }
    getInlineClassName(e10, t10) {
      return e10.isInvalid ? this.unexpectedClosingBracketClassName : this.getInlineClassNameOfLevel(t10 ? e10.nestingLevelOfEqualBracketType : e10.nestingLevel);
    }
    getInlineClassNameOfLevel(e10) {
      return `bracket-highlighting-${e10 % 30}`;
    }
  };
  qb((e10, t10) => {
    let n10 = [
      WL,
      GL,
      KL,
      qL,
      JL,
      YL
    ], r10 = new Rz();
    t10.addRule(`.monaco-editor .${r10.unexpectedClosingBracketClassName} { color: ${e10.getColor(XL)}; }`);
    let i10 = n10.map((t11) => e10.getColor(t11)).filter((e11) => !!e11).filter((e11) => !e11.isTransparent());
    for (let e11 = 0; e11 < 30; e11++) {
      let n11 = i10[e11 % i10.length];
      t10.addRule(`.monaco-editor .${r10.getInlineClassNameOfLevel(e11)} { color: ${n11}; }`);
    }
  });
  function zz(e10) {
    return e10.replace(/\n/g, `\\n`).replace(/\r/g, `\\r`);
  }
  var Bz = class e10 {
    get oldLength() {
      return this.oldText.length;
    }
    get oldEnd() {
      return this.oldPosition + this.oldText.length;
    }
    get newLength() {
      return this.newText.length;
    }
    get newEnd() {
      return this.newPosition + this.newText.length;
    }
    constructor(e11, t10, n10, r10) {
      this.oldPosition = e11, this.oldText = t10, this.newPosition = n10, this.newText = r10;
    }
    toString() {
      return this.oldText.length === 0 ? `(insert@${this.oldPosition} "${zz(this.newText)}")` : this.newText.length === 0 ? `(delete@${this.oldPosition} "${zz(this.oldText)}")` : `(replace@${this.oldPosition} "${zz(this.oldText)}" with "${zz(this.newText)}")`;
    }
    static _writeStringSize(e11) {
      return 4 + 2 * e11.length;
    }
    static _writeString(e11, t10, n10) {
      let r10 = t10.length;
      Ph(e11, r10, n10), n10 += 4;
      for (let i10 = 0; i10 < r10; i10++) Mh(e11, t10.charCodeAt(i10), n10), n10 += 2;
      return n10;
    }
    static _readString(e11, t10) {
      let n10 = Nh(e11, t10);
      return t10 += 4, Uh(e11, t10, n10);
    }
    writeSize() {
      return 8 + e10._writeStringSize(this.oldText) + e10._writeStringSize(this.newText);
    }
    write(t10, n10) {
      return Ph(t10, this.oldPosition, n10), n10 += 4, Ph(t10, this.newPosition, n10), n10 += 4, n10 = e10._writeString(t10, this.oldText, n10), n10 = e10._writeString(t10, this.newText, n10), n10;
    }
    static read(t10, n10, r10) {
      let i10 = Nh(t10, n10);
      n10 += 4;
      let a10 = Nh(t10, n10);
      n10 += 4;
      let o10 = e10._readString(t10, n10);
      n10 += e10._writeStringSize(o10);
      let s10 = e10._readString(t10, n10);
      return n10 += e10._writeStringSize(s10), r10.push(new e10(i10, o10, a10, s10)), n10;
    }
  };
  function Vz(e10, t10) {
    if (e10 === null || e10.length === 0) return t10;
    let n10 = new Hz(e10, t10);
    return n10.compress();
  }
  var Hz = class e10 {
    constructor(e11, t10) {
      this._prevEdits = e11, this._currEdits = t10, this._result = [], this._resultLen = 0, this._prevLen = this._prevEdits.length, this._prevDeltaOffset = 0, this._currLen = this._currEdits.length, this._currDeltaOffset = 0;
    }
    compress() {
      let t10 = 0, n10 = 0, r10 = this._getPrev(t10), i10 = this._getCurr(n10);
      for (; t10 < this._prevLen || n10 < this._currLen; ) {
        if (r10 === null) {
          this._acceptCurr(i10), i10 = this._getCurr(++n10);
          continue;
        }
        if (i10 === null) {
          this._acceptPrev(r10), r10 = this._getPrev(++t10);
          continue;
        }
        if (i10.oldEnd <= r10.newPosition) {
          this._acceptCurr(i10), i10 = this._getCurr(++n10);
          continue;
        }
        if (r10.newEnd <= i10.oldPosition) {
          this._acceptPrev(r10), r10 = this._getPrev(++t10);
          continue;
        }
        if (i10.oldPosition < r10.newPosition) {
          let [t11, n11] = e10._splitCurr(i10, r10.newPosition - i10.oldPosition);
          this._acceptCurr(t11), i10 = n11;
          continue;
        }
        if (r10.newPosition < i10.oldPosition) {
          let [t11, n11] = e10._splitPrev(r10, i10.oldPosition - r10.newPosition);
          this._acceptPrev(t11), r10 = n11;
          continue;
        }
        let a11, o11;
        if (i10.oldEnd === r10.newEnd) a11 = r10, o11 = i10, r10 = this._getPrev(++t10), i10 = this._getCurr(++n10);
        else if (i10.oldEnd < r10.newEnd) {
          let [t11, s10] = e10._splitPrev(r10, i10.oldLength);
          a11 = t11, o11 = i10, r10 = s10, i10 = this._getCurr(++n10);
        } else {
          let [n11, s10] = e10._splitCurr(i10, r10.newLength);
          a11 = r10, o11 = n11, r10 = this._getPrev(++t10), i10 = s10;
        }
        this._result[this._resultLen++] = new Bz(a11.oldPosition, a11.oldText, o11.newPosition, o11.newText), this._prevDeltaOffset += a11.newLength - a11.oldLength, this._currDeltaOffset += o11.newLength - o11.oldLength;
      }
      let a10 = e10._merge(this._result), o10 = e10._removeNoOps(a10);
      return o10;
    }
    _acceptCurr(t10) {
      this._result[this._resultLen++] = e10._rebaseCurr(this._prevDeltaOffset, t10), this._currDeltaOffset += t10.newLength - t10.oldLength;
    }
    _getCurr(e11) {
      return e11 < this._currLen ? this._currEdits[e11] : null;
    }
    _acceptPrev(t10) {
      this._result[this._resultLen++] = e10._rebasePrev(this._currDeltaOffset, t10), this._prevDeltaOffset += t10.newLength - t10.oldLength;
    }
    _getPrev(e11) {
      return e11 < this._prevLen ? this._prevEdits[e11] : null;
    }
    static _rebaseCurr(e11, t10) {
      return new Bz(t10.oldPosition - e11, t10.oldText, t10.newPosition, t10.newText);
    }
    static _rebasePrev(e11, t10) {
      return new Bz(t10.oldPosition, t10.oldText, t10.newPosition + e11, t10.newText);
    }
    static _splitPrev(e11, t10) {
      let n10 = e11.newText.substr(0, t10), r10 = e11.newText.substr(t10);
      return [
        new Bz(e11.oldPosition, e11.oldText, e11.newPosition, n10),
        new Bz(e11.oldEnd, ``, e11.newPosition + t10, r10)
      ];
    }
    static _splitCurr(e11, t10) {
      let n10 = e11.oldText.substr(0, t10), r10 = e11.oldText.substr(t10);
      return [
        new Bz(e11.oldPosition, n10, e11.newPosition, e11.newText),
        new Bz(e11.oldPosition + t10, r10, e11.newEnd, ``)
      ];
    }
    static _merge(e11) {
      if (e11.length === 0) return e11;
      let t10 = [], n10 = 0, r10 = e11[0];
      for (let i10 = 1; i10 < e11.length; i10++) {
        let a10 = e11[i10];
        r10.oldEnd === a10.oldPosition ? r10 = new Bz(r10.oldPosition, r10.oldText + a10.oldText, r10.newPosition, r10.newText + a10.newText) : (t10[n10++] = r10, r10 = a10);
      }
      return t10[n10++] = r10, t10;
    }
    static _removeNoOps(e11) {
      if (e11.length === 0) return e11;
      let t10 = [], n10 = 0;
      for (let r10 = 0; r10 < e11.length; r10++) {
        let i10 = e11[r10];
        i10.oldText !== i10.newText && (t10[n10++] = i10);
      }
      return t10;
    }
  };
  function Uz(e10) {
    return e10.toString();
  }
  var Wz = class e10 {
    static create(t10, n10) {
      let r10 = t10.getAlternativeVersionId(), i10 = qz(t10);
      return new e10(r10, r10, i10, i10, n10, n10, []);
    }
    constructor(e11, t10, n10, r10, i10, a10, o10) {
      this.beforeVersionId = e11, this.afterVersionId = t10, this.beforeEOL = n10, this.afterEOL = r10, this.beforeCursorState = i10, this.afterCursorState = a10, this.changes = o10;
    }
    append(e11, t10, n10, r10, i10) {
      t10.length > 0 && (this.changes = Vz(this.changes, t10)), this.afterEOL = n10, this.afterVersionId = r10, this.afterCursorState = i10;
    }
    static _writeSelectionsSize(e11) {
      return 4 + 4 * 4 * (e11 ? e11.length : 0);
    }
    static _writeSelections(e11, t10, n10) {
      if (Ph(e11, t10 ? t10.length : 0, n10), n10 += 4, t10) for (let r10 of t10) Ph(e11, r10.selectionStartLineNumber, n10), n10 += 4, Ph(e11, r10.selectionStartColumn, n10), n10 += 4, Ph(e11, r10.positionLineNumber, n10), n10 += 4, Ph(e11, r10.positionColumn, n10), n10 += 4;
      return n10;
    }
    static _readSelections(e11, t10, n10) {
      let r10 = Nh(e11, t10);
      t10 += 4;
      for (let i10 = 0; i10 < r10; i10++) {
        let r11 = Nh(e11, t10);
        t10 += 4;
        let i11 = Nh(e11, t10);
        t10 += 4;
        let a10 = Nh(e11, t10);
        t10 += 4;
        let o10 = Nh(e11, t10);
        t10 += 4, n10.push(new Ma(r11, i11, a10, o10));
      }
      return t10;
    }
    serialize() {
      let t10 = 10 + e10._writeSelectionsSize(this.beforeCursorState) + e10._writeSelectionsSize(this.afterCursorState) + 4;
      for (let e11 of this.changes) t10 += e11.writeSize();
      let n10 = new Uint8Array(t10), r10 = 0;
      Ph(n10, this.beforeVersionId, r10), r10 += 4, Ph(n10, this.afterVersionId, r10), r10 += 4, Ih(n10, this.beforeEOL, r10), r10 += 1, Ih(n10, this.afterEOL, r10), r10 += 1, r10 = e10._writeSelections(n10, this.beforeCursorState, r10), r10 = e10._writeSelections(n10, this.afterCursorState, r10), Ph(n10, this.changes.length, r10), r10 += 4;
      for (let e11 of this.changes) r10 = e11.write(n10, r10);
      return n10.buffer;
    }
    static deserialize(t10) {
      let n10 = new Uint8Array(t10), r10 = 0, i10 = Nh(n10, r10);
      r10 += 4;
      let a10 = Nh(n10, r10);
      r10 += 4;
      let o10 = Fh(n10, r10);
      r10 += 1;
      let s10 = Fh(n10, r10);
      r10 += 1;
      let c10 = [];
      r10 = e10._readSelections(n10, r10, c10);
      let l10 = [];
      r10 = e10._readSelections(n10, r10, l10);
      let u10 = Nh(n10, r10);
      r10 += 4;
      let d10 = [];
      for (let e11 = 0; e11 < u10; e11++) r10 = Bz.read(n10, r10, d10);
      return new e10(i10, a10, o10, s10, c10, l10, d10);
    }
  }, Gz = class {
    get type() {
      return 0;
    }
    get resource() {
      return xa.isUri(this.model) ? this.model : this.model.uri;
    }
    constructor(e10, t10, n10, r10) {
      this.label = e10, this.code = t10, this.model = n10, this._data = Wz.create(n10, r10);
    }
    toString() {
      let e10 = this._data instanceof Wz ? this._data : Wz.deserialize(this._data);
      return e10.changes.map((e11) => e11.toString()).join(`, `);
    }
    matchesResource(e10) {
      let t10 = xa.isUri(this.model) ? this.model : this.model.uri;
      return t10.toString() === e10.toString();
    }
    setModel(e10) {
      this.model = e10;
    }
    canAppend(e10) {
      return this.model === e10 && this._data instanceof Wz;
    }
    append(e10, t10, n10, r10, i10) {
      this._data instanceof Wz && this._data.append(e10, t10, n10, r10, i10);
    }
    close() {
      this._data instanceof Wz && (this._data = this._data.serialize());
    }
    open() {
      this._data instanceof Wz || (this._data = Wz.deserialize(this._data));
    }
    undo() {
      if (xa.isUri(this.model)) throw Error(`Invalid SingleModelEditStackElement`);
      this._data instanceof Wz && (this._data = this._data.serialize());
      let e10 = Wz.deserialize(this._data);
      this.model._applyUndo(e10.changes, e10.beforeEOL, e10.beforeVersionId, e10.beforeCursorState);
    }
    redo() {
      if (xa.isUri(this.model)) throw Error(`Invalid SingleModelEditStackElement`);
      this._data instanceof Wz && (this._data = this._data.serialize());
      let e10 = Wz.deserialize(this._data);
      this.model._applyRedo(e10.changes, e10.afterEOL, e10.afterVersionId, e10.afterCursorState);
    }
    heapSize() {
      return this._data instanceof Wz && (this._data = this._data.serialize()), this._data.byteLength + 168;
    }
  }, Kz = class {
    get resources() {
      return this._editStackElementsArr.map((e10) => e10.resource);
    }
    constructor(e10, t10, n10) {
      this.label = e10, this.code = t10, this.type = 1, this._isOpen = true, this._editStackElementsArr = n10.slice(0), this._editStackElementsMap = /* @__PURE__ */ new Map();
      for (let e11 of this._editStackElementsArr) {
        let t11 = Uz(e11.resource);
        this._editStackElementsMap.set(t11, e11);
      }
      this._delegate = null;
    }
    prepareUndoRedo() {
      if (this._delegate) return this._delegate.prepareUndoRedo(this);
    }
    matchesResource(e10) {
      let t10 = Uz(e10);
      return this._editStackElementsMap.has(t10);
    }
    setModel(e10) {
      let t10 = Uz(xa.isUri(e10) ? e10 : e10.uri);
      this._editStackElementsMap.has(t10) && this._editStackElementsMap.get(t10).setModel(e10);
    }
    canAppend(e10) {
      if (!this._isOpen) return false;
      let t10 = Uz(e10.uri);
      if (this._editStackElementsMap.has(t10)) {
        let n10 = this._editStackElementsMap.get(t10);
        return n10.canAppend(e10);
      }
      return false;
    }
    append(e10, t10, n10, r10, i10) {
      let a10 = Uz(e10.uri), o10 = this._editStackElementsMap.get(a10);
      o10.append(e10, t10, n10, r10, i10);
    }
    close() {
      this._isOpen = false;
    }
    open() {
    }
    undo() {
      this._isOpen = false;
      for (let e10 of this._editStackElementsArr) e10.undo();
    }
    redo() {
      for (let e10 of this._editStackElementsArr) e10.redo();
    }
    heapSize(e10) {
      let t10 = Uz(e10);
      if (this._editStackElementsMap.has(t10)) {
        let e11 = this._editStackElementsMap.get(t10);
        return e11.heapSize();
      }
      return 0;
    }
    split() {
      return this._editStackElementsArr;
    }
    toString() {
      let e10 = [];
      for (let t10 of this._editStackElementsArr) e10.push(`${ck(t10.resource)}: ${t10}`);
      return `{${e10.join(`, `)}}`;
    }
  };
  function qz(e10) {
    let t10 = e10.getEOL();
    return t10 === `
` ? 0 : 1;
  }
  function Jz(e10) {
    return e10 ? e10 instanceof Gz || e10 instanceof Kz : false;
  }
  var Yz = class e10 {
    constructor(e11, t10) {
      this._model = e11, this._undoRedoService = t10;
    }
    pushStackElement() {
      let e11 = this._undoRedoService.getLastElement(this._model.uri);
      Jz(e11) && e11.close();
    }
    popStackElement() {
      let e11 = this._undoRedoService.getLastElement(this._model.uri);
      Jz(e11) && e11.open();
    }
    clear() {
      this._undoRedoService.removeElements(this._model.uri);
    }
    _getOrCreateEditStackElement(e11, t10) {
      let n10 = this._undoRedoService.getLastElement(this._model.uri);
      if (Jz(n10) && n10.canAppend(this._model)) return n10;
      let r10 = new Gz(T(`edit`, `Typing`), `undoredo.textBufferEdit`, this._model, e11);
      return this._undoRedoService.pushElement(r10, t10), r10;
    }
    pushEOL(e11) {
      let t10 = this._getOrCreateEditStackElement(null, void 0);
      this._model.setEOL(e11), t10.append(this._model, [], qz(this._model), this._model.getAlternativeVersionId(), null);
    }
    pushEditOperation(t10, n10, r10, i10) {
      let a10 = this._getOrCreateEditStackElement(t10, i10), o10 = this._model.applyEdits(n10, true), s10 = e10._computeCursorState(r10, o10), c10 = o10.map((e11, t11) => ({
        index: t11,
        textChange: e11.textChange
      }));
      return c10.sort((e11, t11) => e11.textChange.oldPosition === t11.textChange.oldPosition ? e11.index - t11.index : e11.textChange.oldPosition - t11.textChange.oldPosition), a10.append(this._model, c10.map((e11) => e11.textChange), qz(this._model), this._model.getAlternativeVersionId(), s10), s10;
    }
    static _computeCursorState(e11, t10) {
      try {
        return e11 ? e11(t10) : null;
      } catch (e12) {
        return gr(e12), null;
      }
    }
  }, Xz = class extends j {
    constructor() {
      super(...arguments), this._isDisposed = false;
    }
    dispose() {
      super.dispose(), this._isDisposed = true;
    }
    assertNotDisposed() {
      if (this._isDisposed) throw Error(`TextModelPart is disposed!`);
    }
  };
  Zz = function(e10, t10) {
    let n10 = 0, r10 = 0, i10 = e10.length;
    for (; r10 < i10; ) {
      let i11 = e10.charCodeAt(r10);
      if (i11 === 32) n10++;
      else if (i11 === 9) n10 = n10 - n10 % t10 + t10;
      else break;
      r10++;
    }
    return r10 === i10 ? -1 : n10;
  };
  var Qz;
  (function(e10) {
    e10[e10.Disabled = 0] = `Disabled`, e10[e10.EnabledForActive = 1] = `EnabledForActive`, e10[e10.Enabled = 2] = `Enabled`;
  })(Qz || (Qz = {}));
  var $z = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      if (this.visibleColumn = e10, this.column = t10, this.className = n10, this.horizontalLine = r10, this.forWrappedLinesAfterColumn = i10, this.forWrappedLinesBeforeOrAtColumn = a10, e10 !== -1 == (t10 !== -1)) throw Error();
    }
  }, eB = class {
    constructor(e10, t10) {
      this.top = e10, this.endColumn = t10;
    }
  }, tB = class extends Xz {
    constructor(e10, t10) {
      super(), this.textModel = e10, this.languageConfigurationService = t10;
    }
    getLanguageConfiguration(e10) {
      return this.languageConfigurationService.getLanguageConfiguration(e10);
    }
    _computeIndentLevel(e10) {
      return Zz(this.textModel.getLineContent(e10 + 1), this.textModel.getOptions().tabSize);
    }
    getActiveIndentGuide(e10, t10, n10) {
      this.assertNotDisposed();
      let r10 = this.textModel.getLineCount();
      if (e10 < 1 || e10 > r10) throw new Dr(`Illegal value for lineNumber`);
      let i10 = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules, a10 = !!(i10 && i10.offSide), o10 = -2, s10 = -1, c10 = -2, l10 = -1, u10 = (e11) => {
        if (o10 !== -1 && (o10 === -2 || o10 > e11 - 1)) {
          o10 = -1, s10 = -1;
          for (let t11 = e11 - 2; t11 >= 0; t11--) {
            let e12 = this._computeIndentLevel(t11);
            if (e12 >= 0) {
              o10 = t11, s10 = e12;
              break;
            }
          }
        }
        if (c10 === -2) {
          c10 = -1, l10 = -1;
          for (let t11 = e11; t11 < r10; t11++) {
            let e12 = this._computeIndentLevel(t11);
            if (e12 >= 0) {
              c10 = t11, l10 = e12;
              break;
            }
          }
        }
      }, d10 = -2, f10 = -1, p10 = -2, m10 = -1, h10 = (e11) => {
        if (d10 === -2) {
          d10 = -1, f10 = -1;
          for (let t11 = e11 - 2; t11 >= 0; t11--) {
            let e12 = this._computeIndentLevel(t11);
            if (e12 >= 0) {
              d10 = t11, f10 = e12;
              break;
            }
          }
        }
        if (p10 !== -1 && (p10 === -2 || p10 < e11 - 1)) {
          p10 = -1, m10 = -1;
          for (let t11 = e11; t11 < r10; t11++) {
            let e12 = this._computeIndentLevel(t11);
            if (e12 >= 0) {
              p10 = t11, m10 = e12;
              break;
            }
          }
        }
      }, g10 = 0, _10 = true, v10 = 0, y10 = true, b10 = 0, x10 = 0;
      for (let i11 = 0; _10 || y10; i11++) {
        let o11 = e10 - i11, p11 = e10 + i11;
        i11 > 1 && (o11 < 1 || o11 < t10) && (_10 = false), i11 > 1 && (p11 > r10 || p11 > n10) && (y10 = false), i11 > 5e4 && (_10 = false, y10 = false);
        let S10 = -1;
        if (_10 && o11 >= 1) {
          let e11 = this._computeIndentLevel(o11 - 1);
          e11 >= 0 ? (c10 = o11 - 1, l10 = e11, S10 = Math.ceil(e11 / this.textModel.getOptions().indentSize)) : (u10(o11), S10 = this._getIndentLevelForWhitespaceLine(a10, s10, l10));
        }
        let C10 = -1;
        if (y10 && p11 <= r10) {
          let e11 = this._computeIndentLevel(p11 - 1);
          e11 >= 0 ? (d10 = p11 - 1, f10 = e11, C10 = Math.ceil(e11 / this.textModel.getOptions().indentSize)) : (h10(p11), C10 = this._getIndentLevelForWhitespaceLine(a10, f10, m10));
        }
        if (i11 === 0) {
          x10 = S10;
          continue;
        }
        if (i11 === 1) {
          if (p11 <= r10 && C10 >= 0 && x10 + 1 === C10) {
            _10 = false, g10 = p11, v10 = p11, b10 = C10;
            continue;
          }
          if (o11 >= 1 && S10 >= 0 && S10 - 1 === x10) {
            y10 = false, g10 = o11, v10 = o11, b10 = S10;
            continue;
          }
          if (g10 = e10, v10 = e10, b10 = x10, b10 === 0) return {
            startLineNumber: g10,
            endLineNumber: v10,
            indent: b10
          };
        }
        _10 && (S10 >= b10 ? g10 = o11 : _10 = false), y10 && (C10 >= b10 ? v10 = p11 : y10 = false);
      }
      return {
        startLineNumber: g10,
        endLineNumber: v10,
        indent: b10
      };
    }
    getLinesBracketGuides(e10, t10, n10, r10) {
      var _a3;
      let i10 = [];
      for (let n11 = e10; n11 <= t10; n11++) i10.push([]);
      let a10 = true, o10 = this.textModel.bracketPairs.getBracketPairsInRangeWithMinIndentation(new F(e10, 1, t10, this.textModel.getLineMaxColumn(t10))).toArray(), s10;
      if (n10 && o10.length > 0) {
        let r11 = (e10 <= n10.lineNumber && n10.lineNumber <= t10 ? o10 : this.textModel.bracketPairs.getBracketPairsInRange(F.fromPositions(n10)).toArray()).filter((e11) => F.strictContainsPosition(e11.range, n10));
        s10 = (_a3 = Tv(r11, (e11) => a10 || e11.range.startLineNumber !== e11.range.endLineNumber)) == null ? void 0 : _a3.range;
      }
      let c10 = this.textModel.getOptions().bracketPairColorizationOptions.independentColorPoolPerBracketType, l10 = new nB();
      for (let n11 of o10) {
        if (!n11.closingBracketRange) continue;
        let o11 = s10 && n11.range.equalsRange(s10);
        if (!o11 && !r10.includeInactive) continue;
        let u10 = l10.getInlineClassName(n11.nestingLevel, n11.nestingLevelOfEqualBracketType, c10) + (r10.highlightActive && o11 ? ` ` + l10.activeClassName : ``), d10 = n11.openingBracketRange.getStartPosition(), f10 = n11.closingBracketRange.getStartPosition(), p10 = r10.horizontalGuides === Qz.Enabled || r10.horizontalGuides === Qz.EnabledForActive && o11;
        if (n11.range.startLineNumber === n11.range.endLineNumber) {
          a10 && p10 && i10[n11.range.startLineNumber - e10].push(new $z(-1, n11.openingBracketRange.getEndPosition().column, u10, new eB(false, f10.column), -1, -1));
          continue;
        }
        let m10 = this.getVisibleColumnFromPosition(f10), h10 = this.getVisibleColumnFromPosition(n11.openingBracketRange.getStartPosition()), g10 = Math.min(h10, m10, n11.minVisibleColumnIndentation + 1), _10 = false, v10 = Es(this.textModel.getLineContent(n11.closingBracketRange.startLineNumber)), y10 = v10 < n11.closingBracketRange.startColumn - 1;
        y10 && (_10 = true);
        let b10 = Math.max(d10.lineNumber, e10), x10 = Math.min(f10.lineNumber, t10), S10 = _10 ? 1 : 0;
        for (let t11 = b10; t11 < x10 + S10; t11++) i10[t11 - e10].push(new $z(g10, -1, u10, null, t11 === d10.lineNumber ? d10.column : -1, t11 === f10.lineNumber ? f10.column : -1));
        p10 && (d10.lineNumber >= e10 && h10 > g10 && i10[d10.lineNumber - e10].push(new $z(g10, -1, u10, new eB(false, d10.column), -1, -1)), f10.lineNumber <= t10 && m10 > g10 && i10[f10.lineNumber - e10].push(new $z(g10, -1, u10, new eB(!_10, f10.column), -1, -1)));
      }
      for (let e11 of i10) e11.sort((e12, t11) => e12.visibleColumn - t11.visibleColumn);
      return i10;
    }
    getVisibleColumnFromPosition(e10) {
      return gR.visibleColumnFromColumn(this.textModel.getLineContent(e10.lineNumber), e10.column, this.textModel.getOptions().tabSize) + 1;
    }
    getLinesIndentGuides(e10, t10) {
      this.assertNotDisposed();
      let n10 = this.textModel.getLineCount();
      if (e10 < 1 || e10 > n10) throw Error(`Illegal value for startLineNumber`);
      if (t10 < 1 || t10 > n10) throw Error(`Illegal value for endLineNumber`);
      let r10 = this.textModel.getOptions(), i10 = this.getLanguageConfiguration(this.textModel.getLanguageId()).foldingRules, a10 = !!(i10 && i10.offSide), o10 = Array(t10 - e10 + 1), s10 = -2, c10 = -1, l10 = -2, u10 = -1;
      for (let i11 = e10; i11 <= t10; i11++) {
        let t11 = i11 - e10, d10 = this._computeIndentLevel(i11 - 1);
        if (d10 >= 0) {
          s10 = i11 - 1, c10 = d10, o10[t11] = Math.ceil(d10 / r10.indentSize);
          continue;
        }
        if (s10 === -2) {
          s10 = -1, c10 = -1;
          for (let e11 = i11 - 2; e11 >= 0; e11--) {
            let t12 = this._computeIndentLevel(e11);
            if (t12 >= 0) {
              s10 = e11, c10 = t12;
              break;
            }
          }
        }
        if (l10 !== -1 && (l10 === -2 || l10 < i11 - 1)) {
          l10 = -1, u10 = -1;
          for (let e11 = i11; e11 < n10; e11++) {
            let t12 = this._computeIndentLevel(e11);
            if (t12 >= 0) {
              l10 = e11, u10 = t12;
              break;
            }
          }
        }
        o10[t11] = this._getIndentLevelForWhitespaceLine(a10, c10, u10);
      }
      return o10;
    }
    _getIndentLevelForWhitespaceLine(e10, t10, n10) {
      let r10 = this.textModel.getOptions();
      return t10 === -1 || n10 === -1 ? 0 : t10 < n10 ? 1 + Math.floor(t10 / r10.indentSize) : t10 === n10 || e10 ? Math.ceil(n10 / r10.indentSize) : 1 + Math.floor(n10 / r10.indentSize);
    }
  }, nB = class {
    constructor() {
      this.activeClassName = `indent-active`;
    }
    getInlineClassName(e10, t10, n10) {
      return this.getInlineClassNameOfLevel(n10 ? t10 : e10);
    }
    getInlineClassNameOfLevel(e10) {
      return `bracket-indent-guide lvl-${e10 % 30}`;
    }
  }, rB = class {
    constructor() {
      this.spacesDiff = 0, this.looksLikeAlignment = false;
    }
  };
  function iB(e10, t10, n10, r10, i10) {
    i10.spacesDiff = 0, i10.looksLikeAlignment = false;
    let a10;
    for (a10 = 0; a10 < t10 && a10 < r10; a10++) {
      let t11 = e10.charCodeAt(a10), r11 = n10.charCodeAt(a10);
      if (t11 !== r11) break;
    }
    let o10 = 0, s10 = 0;
    for (let n11 = a10; n11 < t10; n11++) {
      let t11 = e10.charCodeAt(n11);
      t11 === 32 ? o10++ : s10++;
    }
    let c10 = 0, l10 = 0;
    for (let e11 = a10; e11 < r10; e11++) {
      let t11 = n10.charCodeAt(e11);
      t11 === 32 ? c10++ : l10++;
    }
    if (o10 > 0 && s10 > 0 || c10 > 0 && l10 > 0) return;
    let u10 = Math.abs(s10 - l10), d10 = Math.abs(o10 - c10);
    if (u10 === 0) {
      i10.spacesDiff = d10, d10 > 0 && 0 <= c10 - 1 && c10 - 1 < e10.length && c10 < n10.length && n10.charCodeAt(c10) !== 32 && e10.charCodeAt(c10 - 1) === 32 && e10.charCodeAt(e10.length - 1) === 44 && (i10.looksLikeAlignment = true);
      return;
    }
    if (d10 % u10 === 0) {
      i10.spacesDiff = d10 / u10;
      return;
    }
  }
  function aB(e10, t10, n10) {
    let r10 = Math.min(e10.getLineCount(), 1e4), i10 = 0, a10 = 0, o10 = ``, s10 = 0, c10 = [
      2,
      4,
      6,
      8,
      3,
      5,
      7
    ], l10 = 8, u10 = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ], d10 = new rB();
    for (let c11 = 1; c11 <= r10; c11++) {
      let r11 = e10.getLineLength(c11), f11 = e10.getLineContent(c11), p11 = r11 <= 65536, m10 = false, h10 = 0, g10 = 0, _10 = 0;
      for (let t11 = 0, n11 = r11; t11 < n11; t11++) {
        let n12 = p11 ? f11.charCodeAt(t11) : e10.getLineCharCode(c11, t11);
        if (n12 === 9) _10++;
        else if (n12 === 32) g10++;
        else {
          m10 = true, h10 = t11;
          break;
        }
      }
      if (!m10 || (_10 > 0 ? i10++ : g10 > 1 && a10++, iB(o10, s10, f11, h10, d10), d10.looksLikeAlignment && !(n10 && t10 === d10.spacesDiff))) continue;
      let v10 = d10.spacesDiff;
      v10 <= l10 && u10[v10]++, o10 = f11, s10 = h10;
    }
    let f10 = n10;
    i10 !== a10 && (f10 = i10 < a10);
    let p10 = t10;
    if (f10) {
      let e11 = f10 ? 0 : 0.1 * r10;
      c10.forEach((t11) => {
        let n11 = u10[t11];
        n11 > e11 && (e11 = n11, p10 = t11);
      }), p10 === 4 && u10[4] > 0 && u10[2] > 0 && u10[2] >= u10[4] / 2 && (p10 = 2);
    }
    return {
      insertSpaces: f10,
      tabSize: p10
    };
  }
  function oB(e10) {
    return (e10.metadata & 1) >>> 0;
  }
  function sB(e10, t10) {
    e10.metadata = e10.metadata & 254 | t10 << 0;
  }
  function cB(e10) {
    return (e10.metadata & 2) >>> 1 == 1;
  }
  function lB(e10, t10) {
    e10.metadata = e10.metadata & 253 | (t10 ? 1 : 0) << 1;
  }
  function uB(e10) {
    return (e10.metadata & 4) >>> 2 == 1;
  }
  function dB(e10, t10) {
    e10.metadata = e10.metadata & 251 | (t10 ? 1 : 0) << 2;
  }
  function fB(e10) {
    return (e10.metadata & 64) >>> 6 == 1;
  }
  function pB(e10, t10) {
    e10.metadata = e10.metadata & 191 | (t10 ? 1 : 0) << 6;
  }
  function mB(e10) {
    return (e10.metadata & 24) >>> 3;
  }
  function hB(e10, t10) {
    e10.metadata = e10.metadata & 231 | t10 << 3;
  }
  function gB(e10) {
    return (e10.metadata & 32) >>> 5 == 1;
  }
  function _B(e10, t10) {
    e10.metadata = e10.metadata & 223 | (t10 ? 1 : 0) << 5;
  }
  var vB = class {
    constructor(e10, t10, n10) {
      this.metadata = 0, this.parent = this, this.left = this, this.right = this, sB(this, 1), this.start = t10, this.end = n10, this.delta = 0, this.maxEnd = n10, this.id = e10, this.ownerId = 0, this.options = null, dB(this, false), pB(this, false), hB(this, 1), _B(this, false), this.cachedVersionId = 0, this.cachedAbsoluteStart = t10, this.cachedAbsoluteEnd = n10, this.range = null, lB(this, false);
    }
    reset(e10, t10, n10, r10) {
      this.start = t10, this.end = n10, this.maxEnd = n10, this.cachedVersionId = e10, this.cachedAbsoluteStart = t10, this.cachedAbsoluteEnd = n10, this.range = r10;
    }
    setOptions(e10) {
      this.options = e10;
      let t10 = this.options.className;
      dB(this, t10 === `squiggly-error` || t10 === `squiggly-warning` || t10 === `squiggly-info`), pB(this, this.options.glyphMarginClassName !== null), hB(this, this.options.stickiness), _B(this, this.options.collapseOnReplaceEdit);
    }
    setCachedOffsets(e10, t10, n10) {
      this.cachedVersionId !== n10 && (this.range = null), this.cachedVersionId = n10, this.cachedAbsoluteStart = e10, this.cachedAbsoluteEnd = t10;
    }
    detach() {
      this.parent = null, this.left = null, this.right = null;
    }
  };
  const X = new vB(null, 0, 0);
  X.parent = X, X.left = X, X.right = X, sB(X, 0);
  var yB = class {
    constructor() {
      this.root = X, this.requestNormalizeDelta = false;
    }
    intervalSearch(e10, t10, n10, r10, i10, a10) {
      return this.root === X ? [] : OB(this, e10, t10, n10, r10, i10, a10);
    }
    search(e10, t10, n10, r10) {
      return this.root === X ? [] : DB(this, e10, t10, n10, r10);
    }
    collectNodesFromOwner(e10) {
      return TB(this, e10);
    }
    collectNodesPostOrder() {
      return EB(this);
    }
    insert(e10) {
      kB(this, e10), this._normalizeDeltaIfNecessary();
    }
    delete(e10) {
      jB(this, e10), this._normalizeDeltaIfNecessary();
    }
    resolveNode(e10, t10) {
      let n10 = e10, r10 = 0;
      for (; e10 !== this.root; ) e10 === e10.parent.right && (r10 += e10.parent.delta), e10 = e10.parent;
      let i10 = n10.start + r10, a10 = n10.end + r10;
      n10.setCachedOffsets(i10, a10, t10);
    }
    acceptReplace(e10, t10, n10, r10) {
      let i10 = CB(this, e10, e10 + t10);
      for (let e11 = 0, t11 = i10.length; e11 < t11; e11++) {
        let t12 = i10[e11];
        jB(this, t12);
      }
      this._normalizeDeltaIfNecessary(), wB(this, e10, e10 + t10, n10), this._normalizeDeltaIfNecessary();
      for (let a10 = 0, o10 = i10.length; a10 < o10; a10++) {
        let o11 = i10[a10];
        o11.start = o11.cachedAbsoluteStart, o11.end = o11.cachedAbsoluteEnd, SB(o11, e10, e10 + t10, n10, r10), o11.maxEnd = o11.end, kB(this, o11);
      }
      this._normalizeDeltaIfNecessary();
    }
    _normalizeDeltaIfNecessary() {
      this.requestNormalizeDelta && (this.requestNormalizeDelta = false, bB(this));
    }
  };
  function bB(e10) {
    let t10 = e10.root, n10 = 0;
    for (; t10 !== X; ) {
      if (t10.left !== X && !cB(t10.left)) {
        t10 = t10.left;
        continue;
      }
      if (t10.right !== X && !cB(t10.right)) {
        n10 += t10.delta, t10 = t10.right;
        continue;
      }
      t10.start = n10 + t10.start, t10.end = n10 + t10.end, t10.delta = 0, LB(t10), lB(t10, true), lB(t10.left, false), lB(t10.right, false), t10 === t10.parent.right && (n10 -= t10.parent.delta), t10 = t10.parent;
    }
    lB(e10.root, false);
  }
  function xB(e10, t10, n10, r10) {
    return e10 < n10 ? true : e10 > n10 || r10 === 1 ? false : r10 === 2 ? true : t10;
  }
  function SB(e10, t10, n10, r10, i10) {
    let a10 = mB(e10), o10 = a10 === 0 || a10 === 2, s10 = a10 === 1 || a10 === 2, c10 = n10 - t10, l10 = r10, u10 = Math.min(c10, l10), d10 = e10.start, f10 = false, p10 = e10.end, m10 = false;
    t10 <= d10 && p10 <= n10 && gB(e10) && (e10.start = t10, f10 = true, e10.end = t10, m10 = true);
    {
      let e11 = i10 ? 1 : c10 > 0 ? 2 : 0;
      !f10 && xB(d10, o10, t10, e11) && (f10 = true), !m10 && xB(p10, s10, t10, e11) && (m10 = true);
    }
    if (u10 > 0 && !i10) {
      let e11 = c10 > l10 ? 2 : 0;
      !f10 && xB(d10, o10, t10 + u10, e11) && (f10 = true), !m10 && xB(p10, s10, t10 + u10, e11) && (m10 = true);
    }
    {
      let r11 = i10 ? 1 : 0;
      !f10 && xB(d10, o10, n10, r11) && (e10.start = t10 + l10, f10 = true), !m10 && xB(p10, s10, n10, r11) && (e10.end = t10 + l10, m10 = true);
    }
    let h10 = l10 - c10;
    f10 || (e10.start = Math.max(0, d10 + h10)), m10 || (e10.end = Math.max(0, p10 + h10)), e10.start > e10.end && (e10.end = e10.start);
  }
  function CB(e10, t10, n10) {
    let r10 = e10.root, i10 = 0, a10 = 0, o10 = 0, s10 = 0, c10 = [], l10 = 0;
    for (; r10 !== X; ) {
      if (cB(r10)) {
        lB(r10.left, false), lB(r10.right, false), r10 === r10.parent.right && (i10 -= r10.parent.delta), r10 = r10.parent;
        continue;
      }
      if (!cB(r10.left)) {
        if (a10 = i10 + r10.maxEnd, a10 < t10) {
          lB(r10, true);
          continue;
        }
        if (r10.left !== X) {
          r10 = r10.left;
          continue;
        }
      }
      if (o10 = i10 + r10.start, o10 > n10) {
        lB(r10, true);
        continue;
      }
      if (s10 = i10 + r10.end, s10 >= t10 && (r10.setCachedOffsets(o10, s10, 0), c10[l10++] = r10), lB(r10, true), r10.right !== X && !cB(r10.right)) {
        i10 += r10.delta, r10 = r10.right;
        continue;
      }
    }
    return lB(e10.root, false), c10;
  }
  function wB(e10, t10, n10, r10) {
    let i10 = e10.root, a10 = 0, o10 = 0, s10 = 0, c10 = r10 - (n10 - t10);
    for (; i10 !== X; ) {
      if (cB(i10)) {
        lB(i10.left, false), lB(i10.right, false), i10 === i10.parent.right && (a10 -= i10.parent.delta), LB(i10), i10 = i10.parent;
        continue;
      }
      if (!cB(i10.left)) {
        if (o10 = a10 + i10.maxEnd, o10 < t10) {
          lB(i10, true);
          continue;
        }
        if (i10.left !== X) {
          i10 = i10.left;
          continue;
        }
      }
      if (s10 = a10 + i10.start, s10 > n10) {
        i10.start += c10, i10.end += c10, i10.delta += c10, (i10.delta < -1073741824 || i10.delta > 1073741824) && (e10.requestNormalizeDelta = true), lB(i10, true);
        continue;
      }
      if (lB(i10, true), i10.right !== X && !cB(i10.right)) {
        a10 += i10.delta, i10 = i10.right;
        continue;
      }
    }
    lB(e10.root, false);
  }
  function TB(e10, t10) {
    let n10 = e10.root, r10 = [], i10 = 0;
    for (; n10 !== X; ) {
      if (cB(n10)) {
        lB(n10.left, false), lB(n10.right, false), n10 = n10.parent;
        continue;
      }
      if (n10.left !== X && !cB(n10.left)) {
        n10 = n10.left;
        continue;
      }
      if (n10.ownerId === t10 && (r10[i10++] = n10), lB(n10, true), n10.right !== X && !cB(n10.right)) {
        n10 = n10.right;
        continue;
      }
    }
    return lB(e10.root, false), r10;
  }
  function EB(e10) {
    let t10 = e10.root, n10 = [], r10 = 0;
    for (; t10 !== X; ) {
      if (cB(t10)) {
        lB(t10.left, false), lB(t10.right, false), t10 = t10.parent;
        continue;
      }
      if (t10.left !== X && !cB(t10.left)) {
        t10 = t10.left;
        continue;
      }
      if (t10.right !== X && !cB(t10.right)) {
        t10 = t10.right;
        continue;
      }
      n10[r10++] = t10, lB(t10, true);
    }
    return lB(e10.root, false), n10;
  }
  function DB(e10, t10, n10, r10, i10) {
    let a10 = e10.root, o10 = 0, s10 = 0, c10 = 0, l10 = [], u10 = 0;
    for (; a10 !== X; ) {
      if (cB(a10)) {
        lB(a10.left, false), lB(a10.right, false), a10 === a10.parent.right && (o10 -= a10.parent.delta), a10 = a10.parent;
        continue;
      }
      if (a10.left !== X && !cB(a10.left)) {
        a10 = a10.left;
        continue;
      }
      s10 = o10 + a10.start, c10 = o10 + a10.end, a10.setCachedOffsets(s10, c10, r10);
      let e11 = true;
      if (t10 && a10.ownerId && a10.ownerId !== t10 && (e11 = false), n10 && uB(a10) && (e11 = false), i10 && !fB(a10) && (e11 = false), e11 && (l10[u10++] = a10), lB(a10, true), a10.right !== X && !cB(a10.right)) {
        o10 += a10.delta, a10 = a10.right;
        continue;
      }
    }
    return lB(e10.root, false), l10;
  }
  function OB(e10, t10, n10, r10, i10, a10, o10) {
    let s10 = e10.root, c10 = 0, l10 = 0, u10 = 0, d10 = 0, f10 = [], p10 = 0;
    for (; s10 !== X; ) {
      if (cB(s10)) {
        lB(s10.left, false), lB(s10.right, false), s10 === s10.parent.right && (c10 -= s10.parent.delta), s10 = s10.parent;
        continue;
      }
      if (!cB(s10.left)) {
        if (l10 = c10 + s10.maxEnd, l10 < t10) {
          lB(s10, true);
          continue;
        }
        if (s10.left !== X) {
          s10 = s10.left;
          continue;
        }
      }
      if (u10 = c10 + s10.start, u10 > n10) {
        lB(s10, true);
        continue;
      }
      if (d10 = c10 + s10.end, d10 >= t10) {
        s10.setCachedOffsets(u10, d10, a10);
        let e11 = true;
        r10 && s10.ownerId && s10.ownerId !== r10 && (e11 = false), i10 && uB(s10) && (e11 = false), o10 && !fB(s10) && (e11 = false), e11 && (f10[p10++] = s10);
      }
      if (lB(s10, true), s10.right !== X && !cB(s10.right)) {
        c10 += s10.delta, s10 = s10.right;
        continue;
      }
    }
    return lB(e10.root, false), f10;
  }
  function kB(e10, t10) {
    if (e10.root === X) return t10.parent = X, t10.left = X, t10.right = X, sB(t10, 0), e10.root = t10, e10.root;
    AB(e10, t10), RB(t10.parent);
    let n10 = t10;
    for (; n10 !== e10.root && oB(n10.parent) === 1; ) if (n10.parent === n10.parent.parent.left) {
      let t11 = n10.parent.parent.right;
      oB(t11) === 1 ? (sB(n10.parent, 0), sB(t11, 0), sB(n10.parent.parent, 1), n10 = n10.parent.parent) : (n10 === n10.parent.right && (n10 = n10.parent, PB(e10, n10)), sB(n10.parent, 0), sB(n10.parent.parent, 1), FB(e10, n10.parent.parent));
    } else {
      let t11 = n10.parent.parent.left;
      oB(t11) === 1 ? (sB(n10.parent, 0), sB(t11, 0), sB(n10.parent.parent, 1), n10 = n10.parent.parent) : (n10 === n10.parent.left && (n10 = n10.parent, FB(e10, n10)), sB(n10.parent, 0), sB(n10.parent.parent, 1), PB(e10, n10.parent.parent));
    }
    return sB(e10.root, 0), t10;
  }
  function AB(e10, t10) {
    let n10 = 0, r10 = e10.root, i10 = t10.start, a10 = t10.end;
    for (; ; ) {
      let e11 = zB(i10, a10, r10.start + n10, r10.end + n10);
      if (e11 < 0) if (r10.left === X) {
        t10.start -= n10, t10.end -= n10, t10.maxEnd -= n10, r10.left = t10;
        break;
      } else r10 = r10.left;
      else if (r10.right === X) {
        t10.start -= n10 + r10.delta, t10.end -= n10 + r10.delta, t10.maxEnd -= n10 + r10.delta, r10.right = t10;
        break;
      } else n10 += r10.delta, r10 = r10.right;
    }
    t10.parent = r10, t10.left = X, t10.right = X, sB(t10, 1);
  }
  function jB(e10, t10) {
    let n10, r10;
    if (t10.left === X ? (n10 = t10.right, r10 = t10, n10.delta += t10.delta, (n10.delta < -1073741824 || n10.delta > 1073741824) && (e10.requestNormalizeDelta = true), n10.start += t10.delta, n10.end += t10.delta) : t10.right === X ? (n10 = t10.left, r10 = t10) : (r10 = MB(t10.right), n10 = r10.right, n10.start += r10.delta, n10.end += r10.delta, n10.delta += r10.delta, (n10.delta < -1073741824 || n10.delta > 1073741824) && (e10.requestNormalizeDelta = true), r10.start += t10.delta, r10.end += t10.delta, r10.delta = t10.delta, (r10.delta < -1073741824 || r10.delta > 1073741824) && (e10.requestNormalizeDelta = true)), r10 === e10.root) {
      e10.root = n10, sB(n10, 0), t10.detach(), NB(), LB(n10), e10.root.parent = X;
      return;
    }
    let i10 = oB(r10) === 1;
    if (r10 === r10.parent.left ? r10.parent.left = n10 : r10.parent.right = n10, r10 === t10 ? n10.parent = r10.parent : (r10.parent === t10 ? n10.parent = r10 : n10.parent = r10.parent, r10.left = t10.left, r10.right = t10.right, r10.parent = t10.parent, sB(r10, oB(t10)), t10 === e10.root ? e10.root = r10 : t10 === t10.parent.left ? t10.parent.left = r10 : t10.parent.right = r10, r10.left !== X && (r10.left.parent = r10), r10.right !== X && (r10.right.parent = r10)), t10.detach(), i10) {
      RB(n10.parent), r10 !== t10 && (RB(r10), RB(r10.parent)), NB();
      return;
    }
    RB(n10), RB(n10.parent), r10 !== t10 && (RB(r10), RB(r10.parent));
    let a10;
    for (; n10 !== e10.root && oB(n10) === 0; ) n10 === n10.parent.left ? (a10 = n10.parent.right, oB(a10) === 1 && (sB(a10, 0), sB(n10.parent, 1), PB(e10, n10.parent), a10 = n10.parent.right), oB(a10.left) === 0 && oB(a10.right) === 0 ? (sB(a10, 1), n10 = n10.parent) : (oB(a10.right) === 0 && (sB(a10.left, 0), sB(a10, 1), FB(e10, a10), a10 = n10.parent.right), sB(a10, oB(n10.parent)), sB(n10.parent, 0), sB(a10.right, 0), PB(e10, n10.parent), n10 = e10.root)) : (a10 = n10.parent.left, oB(a10) === 1 && (sB(a10, 0), sB(n10.parent, 1), FB(e10, n10.parent), a10 = n10.parent.left), oB(a10.left) === 0 && oB(a10.right) === 0 ? (sB(a10, 1), n10 = n10.parent) : (oB(a10.left) === 0 && (sB(a10.right, 0), sB(a10, 1), PB(e10, a10), a10 = n10.parent.left), sB(a10, oB(n10.parent)), sB(n10.parent, 0), sB(a10.left, 0), FB(e10, n10.parent), n10 = e10.root));
    sB(n10, 0), NB();
  }
  function MB(e10) {
    for (; e10.left !== X; ) e10 = e10.left;
    return e10;
  }
  function NB() {
    X.parent = X, X.delta = 0, X.start = 0, X.end = 0;
  }
  function PB(e10, t10) {
    let n10 = t10.right;
    n10.delta += t10.delta, (n10.delta < -1073741824 || n10.delta > 1073741824) && (e10.requestNormalizeDelta = true), n10.start += t10.delta, n10.end += t10.delta, t10.right = n10.left, n10.left !== X && (n10.left.parent = t10), n10.parent = t10.parent, t10.parent === X ? e10.root = n10 : t10 === t10.parent.left ? t10.parent.left = n10 : t10.parent.right = n10, n10.left = t10, t10.parent = n10, LB(t10), LB(n10);
  }
  function FB(e10, t10) {
    let n10 = t10.left;
    t10.delta -= n10.delta, (t10.delta < -1073741824 || t10.delta > 1073741824) && (e10.requestNormalizeDelta = true), t10.start -= n10.delta, t10.end -= n10.delta, t10.left = n10.right, n10.right !== X && (n10.right.parent = t10), n10.parent = t10.parent, t10.parent === X ? e10.root = n10 : t10 === t10.parent.right ? t10.parent.right = n10 : t10.parent.left = n10, n10.right = t10, t10.parent = n10, LB(t10), LB(n10);
  }
  function IB(e10) {
    let t10 = e10.end;
    if (e10.left !== X) {
      let n10 = e10.left.maxEnd;
      n10 > t10 && (t10 = n10);
    }
    if (e10.right !== X) {
      let n10 = e10.right.maxEnd + e10.delta;
      n10 > t10 && (t10 = n10);
    }
    return t10;
  }
  function LB(e10) {
    e10.maxEnd = IB(e10);
  }
  function RB(e10) {
    for (; e10 !== X; ) {
      let t10 = IB(e10);
      if (e10.maxEnd === t10) return;
      e10.maxEnd = t10, e10 = e10.parent;
    }
  }
  function zB(e10, t10, n10, r10) {
    return e10 === n10 ? t10 - r10 : e10 - n10;
  }
  var BB = class {
    constructor(e10, t10) {
      this.piece = e10, this.color = t10, this.size_left = 0, this.lf_left = 0, this.parent = this, this.left = this, this.right = this;
    }
    next() {
      if (this.right !== Z) return VB(this.right);
      let e10 = this;
      for (; e10.parent !== Z && e10.parent.left !== e10; ) e10 = e10.parent;
      return e10.parent === Z ? Z : e10.parent;
    }
    prev() {
      if (this.left !== Z) return HB(this.left);
      let e10 = this;
      for (; e10.parent !== Z && e10.parent.right !== e10; ) e10 = e10.parent;
      return e10.parent === Z ? Z : e10.parent;
    }
    detach() {
      this.parent = null, this.left = null, this.right = null;
    }
  };
  const Z = new BB(null, 0);
  Z.parent = Z, Z.left = Z, Z.right = Z, Z.color = 0;
  function VB(e10) {
    for (; e10.left !== Z; ) e10 = e10.left;
    return e10;
  }
  function HB(e10) {
    for (; e10.right !== Z; ) e10 = e10.right;
    return e10;
  }
  function UB(e10) {
    return e10 === Z ? 0 : e10.size_left + e10.piece.length + UB(e10.right);
  }
  function WB(e10) {
    return e10 === Z ? 0 : e10.lf_left + e10.piece.lineFeedCnt + WB(e10.right);
  }
  function GB() {
    Z.parent = Z;
  }
  function KB(e10, t10) {
    let n10 = t10.right;
    n10.size_left += t10.size_left + (t10.piece ? t10.piece.length : 0), n10.lf_left += t10.lf_left + (t10.piece ? t10.piece.lineFeedCnt : 0), t10.right = n10.left, n10.left !== Z && (n10.left.parent = t10), n10.parent = t10.parent, t10.parent === Z ? e10.root = n10 : t10.parent.left === t10 ? t10.parent.left = n10 : t10.parent.right = n10, n10.left = t10, t10.parent = n10;
  }
  function qB(e10, t10) {
    let n10 = t10.left;
    t10.left = n10.right, n10.right !== Z && (n10.right.parent = t10), n10.parent = t10.parent, t10.size_left -= n10.size_left + (n10.piece ? n10.piece.length : 0), t10.lf_left -= n10.lf_left + (n10.piece ? n10.piece.lineFeedCnt : 0), t10.parent === Z ? e10.root = n10 : t10 === t10.parent.right ? t10.parent.right = n10 : t10.parent.left = n10, n10.right = t10, t10.parent = n10;
  }
  function JB(e10, t10) {
    let n10, r10;
    if (t10.left === Z ? (r10 = t10, n10 = r10.right) : t10.right === Z ? (r10 = t10, n10 = r10.left) : (r10 = VB(t10.right), n10 = r10.right), r10 === e10.root) {
      e10.root = n10, n10.color = 0, t10.detach(), GB(), e10.root.parent = Z;
      return;
    }
    let i10 = r10.color === 1;
    if (r10 === r10.parent.left ? r10.parent.left = n10 : r10.parent.right = n10, r10 === t10 ? (n10.parent = r10.parent, ZB(e10, n10)) : (r10.parent === t10 ? n10.parent = r10 : n10.parent = r10.parent, ZB(e10, n10), r10.left = t10.left, r10.right = t10.right, r10.parent = t10.parent, r10.color = t10.color, t10 === e10.root ? e10.root = r10 : t10 === t10.parent.left ? t10.parent.left = r10 : t10.parent.right = r10, r10.left !== Z && (r10.left.parent = r10), r10.right !== Z && (r10.right.parent = r10), r10.size_left = t10.size_left, r10.lf_left = t10.lf_left, ZB(e10, r10)), t10.detach(), n10.parent.left === n10) {
      let t11 = UB(n10), r11 = WB(n10);
      if (t11 !== n10.parent.size_left || r11 !== n10.parent.lf_left) {
        let i11 = t11 - n10.parent.size_left, a11 = r11 - n10.parent.lf_left;
        n10.parent.size_left = t11, n10.parent.lf_left = r11, XB(e10, n10.parent, i11, a11);
      }
    }
    if (ZB(e10, n10.parent), i10) {
      GB();
      return;
    }
    let a10;
    for (; n10 !== e10.root && n10.color === 0; ) n10 === n10.parent.left ? (a10 = n10.parent.right, a10.color === 1 && (a10.color = 0, n10.parent.color = 1, KB(e10, n10.parent), a10 = n10.parent.right), a10.left.color === 0 && a10.right.color === 0 ? (a10.color = 1, n10 = n10.parent) : (a10.right.color === 0 && (a10.left.color = 0, a10.color = 1, qB(e10, a10), a10 = n10.parent.right), a10.color = n10.parent.color, n10.parent.color = 0, a10.right.color = 0, KB(e10, n10.parent), n10 = e10.root)) : (a10 = n10.parent.left, a10.color === 1 && (a10.color = 0, n10.parent.color = 1, qB(e10, n10.parent), a10 = n10.parent.left), a10.left.color === 0 && a10.right.color === 0 ? (a10.color = 1, n10 = n10.parent) : (a10.left.color === 0 && (a10.right.color = 0, a10.color = 1, KB(e10, a10), a10 = n10.parent.left), a10.color = n10.parent.color, n10.parent.color = 0, a10.left.color = 0, qB(e10, n10.parent), n10 = e10.root));
    n10.color = 0, GB();
  }
  function YB(e10, t10) {
    for (ZB(e10, t10); t10 !== e10.root && t10.parent.color === 1; ) if (t10.parent === t10.parent.parent.left) {
      let n10 = t10.parent.parent.right;
      n10.color === 1 ? (t10.parent.color = 0, n10.color = 0, t10.parent.parent.color = 1, t10 = t10.parent.parent) : (t10 === t10.parent.right && (t10 = t10.parent, KB(e10, t10)), t10.parent.color = 0, t10.parent.parent.color = 1, qB(e10, t10.parent.parent));
    } else {
      let n10 = t10.parent.parent.left;
      n10.color === 1 ? (t10.parent.color = 0, n10.color = 0, t10.parent.parent.color = 1, t10 = t10.parent.parent) : (t10 === t10.parent.left && (t10 = t10.parent, qB(e10, t10)), t10.parent.color = 0, t10.parent.parent.color = 1, KB(e10, t10.parent.parent));
    }
    e10.root.color = 0;
  }
  function XB(e10, t10, n10, r10) {
    for (; t10 !== e10.root && t10 !== Z; ) t10.parent.left === t10 && (t10.parent.size_left += n10, t10.parent.lf_left += r10), t10 = t10.parent;
  }
  function ZB(e10, t10) {
    let n10 = 0, r10 = 0;
    if (t10 !== e10.root) {
      for (; t10 !== e10.root && t10 === t10.parent.right; ) t10 = t10.parent;
      if (t10 !== e10.root) for (t10 = t10.parent, n10 = UB(t10.left) - t10.size_left, r10 = WB(t10.left) - t10.lf_left, t10.size_left += n10, t10.lf_left += r10; t10 !== e10.root && (n10 !== 0 || r10 !== 0); ) t10.parent.left === t10 && (t10.parent.size_left += n10, t10.parent.lf_left += r10), t10 = t10.parent;
    }
  }
  const QB = 65535;
  function $B(e10) {
    let t10;
    return t10 = e10[e10.length - 1] < 65536 ? new Uint16Array(e10.length) : new Uint32Array(e10.length), t10.set(e10, 0), t10;
  }
  var eV = class {
    constructor(e10, t10, n10, r10, i10) {
      this.lineStarts = e10, this.cr = t10, this.lf = n10, this.crlf = r10, this.isBasicASCII = i10;
    }
  };
  function tV(e10, t10 = true) {
    let n10 = [
      0
    ], r10 = 1;
    for (let t11 = 0, i10 = e10.length; t11 < i10; t11++) {
      let a10 = e10.charCodeAt(t11);
      a10 === 13 ? t11 + 1 < i10 && e10.charCodeAt(t11 + 1) === 10 ? (n10[r10++] = t11 + 2, t11++) : n10[r10++] = t11 + 1 : a10 === 10 && (n10[r10++] = t11 + 1);
    }
    return t10 ? $B(n10) : n10;
  }
  function nV(e10, t10) {
    e10.length = 0, e10[0] = 0;
    let n10 = 1, r10 = 0, i10 = 0, a10 = 0, o10 = true;
    for (let s11 = 0, c10 = t10.length; s11 < c10; s11++) {
      let l10 = t10.charCodeAt(s11);
      l10 === 13 ? s11 + 1 < c10 && t10.charCodeAt(s11 + 1) === 10 ? (a10++, e10[n10++] = s11 + 2, s11++) : (r10++, e10[n10++] = s11 + 1) : l10 === 10 ? (i10++, e10[n10++] = s11 + 1) : o10 && l10 !== 9 && (l10 < 32 || l10 > 126) && (o10 = false);
    }
    let s10 = new eV($B(e10), r10, i10, a10, o10);
    return e10.length = 0, s10;
  }
  var rV = class {
    constructor(e10, t10, n10, r10, i10) {
      this.bufferIndex = e10, this.start = t10, this.end = n10, this.lineFeedCnt = r10, this.length = i10;
    }
  }, iV = class {
    constructor(e10, t10) {
      this.buffer = e10, this.lineStarts = t10;
    }
  }, aV = class {
    constructor(e10, t10) {
      this._pieces = [], this._tree = e10, this._BOM = t10, this._index = 0, e10.root !== Z && e10.iterate(e10.root, (e11) => (e11 !== Z && this._pieces.push(e11.piece), true));
    }
    read() {
      return this._pieces.length === 0 ? this._index === 0 ? (this._index++, this._BOM) : null : this._index > this._pieces.length - 1 ? null : this._index === 0 ? this._BOM + this._tree.getPieceContent(this._pieces[this._index++]) : this._tree.getPieceContent(this._pieces[this._index++]);
    }
  }, oV = class {
    constructor(e10) {
      this._limit = e10, this._cache = [];
    }
    get(e10) {
      for (let t10 = this._cache.length - 1; t10 >= 0; t10--) {
        let n10 = this._cache[t10];
        if (n10.nodeStartOffset <= e10 && n10.nodeStartOffset + n10.node.piece.length >= e10) return n10;
      }
      return null;
    }
    get2(e10) {
      for (let t10 = this._cache.length - 1; t10 >= 0; t10--) {
        let n10 = this._cache[t10];
        if (n10.nodeStartLineNumber && n10.nodeStartLineNumber < e10 && n10.nodeStartLineNumber + n10.node.piece.lineFeedCnt >= e10) return n10;
      }
      return null;
    }
    set(e10) {
      this._cache.length >= this._limit && this._cache.shift(), this._cache.push(e10);
    }
    validate(e10) {
      let t10 = false, n10 = this._cache;
      for (let r10 = 0; r10 < n10.length; r10++) {
        let i10 = n10[r10];
        if (i10.node.parent === null || i10.nodeStartOffset >= e10) {
          n10[r10] = null, t10 = true;
          continue;
        }
      }
      if (t10) {
        let e11 = [];
        for (let t11 of n10) t11 !== null && e11.push(t11);
        this._cache = e11;
      }
    }
  }, sV = class {
    constructor(e10, t10, n10) {
      this.create(e10, t10, n10);
    }
    create(e10, t10, n10) {
      this._buffers = [
        new iV(``, [
          0
        ])
      ], this._lastChangeBufferPos = {
        line: 0,
        column: 0
      }, this.root = Z, this._lineCnt = 1, this._length = 0, this._EOL = t10, this._EOLLength = t10.length, this._EOLNormalized = n10;
      let r10 = null;
      for (let t11 = 0, n11 = e10.length; t11 < n11; t11++) if (e10[t11].buffer.length > 0) {
        e10[t11].lineStarts || (e10[t11].lineStarts = tV(e10[t11].buffer));
        let n12 = new rV(t11 + 1, {
          line: 0,
          column: 0
        }, {
          line: e10[t11].lineStarts.length - 1,
          column: e10[t11].buffer.length - e10[t11].lineStarts[e10[t11].lineStarts.length - 1]
        }, e10[t11].lineStarts.length - 1, e10[t11].buffer.length);
        this._buffers.push(e10[t11]), r10 = this.rbInsertRight(r10, n12);
      }
      this._searchCache = new oV(1), this._lastVisitedLine = {
        lineNumber: 0,
        value: ``
      }, this.computeBufferMetadata();
    }
    normalizeEOL(e10) {
      let t10 = QB, n10 = t10 - Math.floor(t10 / 3), r10 = n10 * 2, i10 = ``, a10 = 0, o10 = [];
      if (this.iterate(this.root, (t11) => {
        let s10 = this.getNodeContent(t11), c10 = s10.length;
        if (a10 <= n10 || a10 + c10 < r10) return i10 += s10, a10 += c10, true;
        let l10 = i10.replace(/\r\n|\r|\n/g, e10);
        return o10.push(new iV(l10, tV(l10))), i10 = s10, a10 = c10, true;
      }), a10 > 0) {
        let t11 = i10.replace(/\r\n|\r|\n/g, e10);
        o10.push(new iV(t11, tV(t11)));
      }
      this.create(o10, e10, true);
    }
    getEOL() {
      return this._EOL;
    }
    setEOL(e10) {
      this._EOL = e10, this._EOLLength = this._EOL.length, this.normalizeEOL(e10);
    }
    createSnapshot(e10) {
      return new aV(this, e10);
    }
    getOffsetAt(e10, t10) {
      let n10 = 0, r10 = this.root;
      for (; r10 !== Z; ) if (r10.left !== Z && r10.lf_left + 1 >= e10) r10 = r10.left;
      else if (r10.lf_left + r10.piece.lineFeedCnt + 1 >= e10) {
        n10 += r10.size_left;
        let i10 = this.getAccumulatedValue(r10, e10 - r10.lf_left - 2);
        return n10 += i10 + t10 - 1;
      } else e10 -= r10.lf_left + r10.piece.lineFeedCnt, n10 += r10.size_left + r10.piece.length, r10 = r10.right;
      return n10;
    }
    getPositionAt(e10) {
      e10 = Math.floor(e10), e10 = Math.max(0, e10);
      let t10 = this.root, n10 = 0, r10 = e10;
      for (; t10 !== Z; ) if (t10.size_left !== 0 && t10.size_left >= e10) t10 = t10.left;
      else if (t10.size_left + t10.piece.length >= e10) {
        let i10 = this.getIndexOf(t10, e10 - t10.size_left);
        if (n10 += t10.lf_left + i10.index, i10.index === 0) {
          let e11 = this.getOffsetAt(n10 + 1, 1), t11 = r10 - e11;
          return new P(n10 + 1, t11 + 1);
        }
        return new P(n10 + 1, i10.remainder + 1);
      } else if (e10 -= t10.size_left + t10.piece.length, n10 += t10.lf_left + t10.piece.lineFeedCnt, t10.right === Z) {
        let t11 = this.getOffsetAt(n10 + 1, 1), i10 = r10 - e10 - t11;
        return new P(n10 + 1, i10 + 1);
      } else t10 = t10.right;
      return new P(1, 1);
    }
    getValueInRange(e10, t10) {
      if (e10.startLineNumber === e10.endLineNumber && e10.startColumn === e10.endColumn) return ``;
      let n10 = this.nodeAt2(e10.startLineNumber, e10.startColumn), r10 = this.nodeAt2(e10.endLineNumber, e10.endColumn), i10 = this.getValueInRange2(n10, r10);
      return t10 ? t10 !== this._EOL || !this._EOLNormalized ? i10.replace(/\r\n|\r|\n/g, t10) : t10 === this.getEOL() && this._EOLNormalized ? i10 : i10.replace(/\r\n|\r|\n/g, t10) : i10;
    }
    getValueInRange2(e10, t10) {
      if (e10.node === t10.node) {
        let n11 = e10.node, r11 = this._buffers[n11.piece.bufferIndex].buffer, i11 = this.offsetInBuffer(n11.piece.bufferIndex, n11.piece.start);
        return r11.substring(i11 + e10.remainder, i11 + t10.remainder);
      }
      let n10 = e10.node, r10 = this._buffers[n10.piece.bufferIndex].buffer, i10 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start), a10 = r10.substring(i10 + e10.remainder, i10 + n10.piece.length);
      for (n10 = n10.next(); n10 !== Z; ) {
        let e11 = this._buffers[n10.piece.bufferIndex].buffer, r11 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
        if (n10 === t10.node) {
          a10 += e11.substring(r11, r11 + t10.remainder);
          break;
        } else a10 += e11.substr(r11, n10.piece.length);
        n10 = n10.next();
      }
      return a10;
    }
    getLinesContent() {
      let e10 = [], t10 = 0, n10 = ``, r10 = false;
      return this.iterate(this.root, (i10) => {
        if (i10 === Z) return true;
        let a10 = i10.piece, o10 = a10.length;
        if (o10 === 0) return true;
        let s10 = this._buffers[a10.bufferIndex].buffer, c10 = this._buffers[a10.bufferIndex].lineStarts, l10 = a10.start.line, u10 = a10.end.line, d10 = c10[l10] + a10.start.column;
        if (r10 && (s10.charCodeAt(d10) === 10 && (d10++, o10--), e10[t10++] = n10, n10 = ``, r10 = false, o10 === 0)) return true;
        if (l10 === u10) return !this._EOLNormalized && s10.charCodeAt(d10 + o10 - 1) === 13 ? (r10 = true, n10 += s10.substr(d10, o10 - 1)) : n10 += s10.substr(d10, o10), true;
        n10 += this._EOLNormalized ? s10.substring(d10, Math.max(d10, c10[l10 + 1] - this._EOLLength)) : s10.substring(d10, c10[l10 + 1]).replace(/(\r\n|\r|\n)$/, ``), e10[t10++] = n10;
        for (let r11 = l10 + 1; r11 < u10; r11++) n10 = this._EOLNormalized ? s10.substring(c10[r11], c10[r11 + 1] - this._EOLLength) : s10.substring(c10[r11], c10[r11 + 1]).replace(/(\r\n|\r|\n)$/, ``), e10[t10++] = n10;
        return !this._EOLNormalized && s10.charCodeAt(c10[u10] + a10.end.column - 1) === 13 ? (r10 = true, a10.end.column === 0 ? t10-- : n10 = s10.substr(c10[u10], a10.end.column - 1)) : n10 = s10.substr(c10[u10], a10.end.column), true;
      }), r10 && (e10[t10++] = n10, n10 = ``), e10[t10++] = n10, e10;
    }
    getLength() {
      return this._length;
    }
    getLineCount() {
      return this._lineCnt;
    }
    getLineContent(e10) {
      return this._lastVisitedLine.lineNumber === e10 ? this._lastVisitedLine.value : (this._lastVisitedLine.lineNumber = e10, e10 === this._lineCnt ? this._lastVisitedLine.value = this.getLineRawContent(e10) : this._EOLNormalized ? this._lastVisitedLine.value = this.getLineRawContent(e10, this._EOLLength) : this._lastVisitedLine.value = this.getLineRawContent(e10).replace(/(\r\n|\r|\n)$/, ``), this._lastVisitedLine.value);
    }
    _getCharCode(e10) {
      if (e10.remainder === e10.node.piece.length) {
        let t10 = e10.node.next();
        if (!t10) return 0;
        let n10 = this._buffers[t10.piece.bufferIndex], r10 = this.offsetInBuffer(t10.piece.bufferIndex, t10.piece.start);
        return n10.buffer.charCodeAt(r10);
      } else {
        let t10 = this._buffers[e10.node.piece.bufferIndex], n10 = this.offsetInBuffer(e10.node.piece.bufferIndex, e10.node.piece.start), r10 = n10 + e10.remainder;
        return t10.buffer.charCodeAt(r10);
      }
    }
    getLineCharCode(e10, t10) {
      let n10 = this.nodeAt2(e10, t10 + 1);
      return this._getCharCode(n10);
    }
    getLineLength(e10) {
      if (e10 === this.getLineCount()) {
        let t10 = this.getOffsetAt(e10, 1);
        return this.getLength() - t10;
      }
      return this.getOffsetAt(e10 + 1, 1) - this.getOffsetAt(e10, 1) - this._EOLLength;
    }
    findMatchesInNode(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      let d10 = this._buffers[e10.piece.bufferIndex], f10 = this.offsetInBuffer(e10.piece.bufferIndex, e10.piece.start), p10 = this.offsetInBuffer(e10.piece.bufferIndex, i10), m10 = this.offsetInBuffer(e10.piece.bufferIndex, a10), h10, g10 = {
        line: 0,
        column: 0
      }, _10, v10;
      t10._wordSeparators ? (_10 = d10.buffer.substring(p10, m10), v10 = (e11) => e11 + p10, t10.reset(0)) : (_10 = d10.buffer, v10 = (e11) => e11, t10.reset(p10));
      do
        if (h10 = t10.next(_10), h10) {
          if (v10(h10.index) >= m10) return l10;
          this.positionInBuffer(e10, v10(h10.index) - f10, g10);
          let t11 = this.getLineFeedCnt(e10.piece.bufferIndex, i10, g10), a11 = g10.line === i10.line ? g10.column - i10.column + r10 : g10.column + 1, o11 = a11 + h10[0].length;
          if (u10[l10++] = uv(new F(n10 + t11, a11, n10 + t11, o11), h10, s10), v10(h10.index) + h10[0].length >= m10 || l10 >= c10) return l10;
        }
      while (h10);
      return l10;
    }
    findMatchesLineByLine(e10, t10, n10, r10) {
      let i10 = [], a10 = 0, o10 = new gv(t10.wordSeparators, t10.regex), s10 = this.nodeAt2(e10.startLineNumber, e10.startColumn);
      if (s10 === null) return [];
      let c10 = this.nodeAt2(e10.endLineNumber, e10.endColumn);
      if (c10 === null) return [];
      let l10 = this.positionInBuffer(s10.node, s10.remainder), u10 = this.positionInBuffer(c10.node, c10.remainder);
      if (s10.node === c10.node) return this.findMatchesInNode(s10.node, o10, e10.startLineNumber, e10.startColumn, l10, u10, t10, n10, r10, a10, i10), i10;
      let d10 = e10.startLineNumber, f10 = s10.node;
      for (; f10 !== c10.node; ) {
        let c11 = this.getLineFeedCnt(f10.piece.bufferIndex, l10, f10.piece.end);
        if (c11 >= 1) {
          let s11 = this._buffers[f10.piece.bufferIndex].lineStarts, u12 = this.offsetInBuffer(f10.piece.bufferIndex, f10.piece.start), p11 = s11[l10.line + c11], m10 = d10 === e10.startLineNumber ? e10.startColumn : 1;
          if (a10 = this.findMatchesInNode(f10, o10, d10, m10, l10, this.positionInBuffer(f10, p11 - u12), t10, n10, r10, a10, i10), a10 >= r10) return i10;
          d10 += c11;
        }
        let u11 = d10 === e10.startLineNumber ? e10.startColumn - 1 : 0;
        if (d10 === e10.endLineNumber) {
          let s11 = this.getLineContent(d10).substring(u11, e10.endColumn - 1);
          return a10 = this._findMatchesInLine(t10, o10, s11, e10.endLineNumber, u11, a10, i10, n10, r10), i10;
        }
        if (a10 = this._findMatchesInLine(t10, o10, this.getLineContent(d10).substr(u11), d10, u11, a10, i10, n10, r10), a10 >= r10) return i10;
        d10++, s10 = this.nodeAt2(d10, 1), f10 = s10.node, l10 = this.positionInBuffer(s10.node, s10.remainder);
      }
      if (d10 === e10.endLineNumber) {
        let s11 = d10 === e10.startLineNumber ? e10.startColumn - 1 : 0, c11 = this.getLineContent(d10).substring(s11, e10.endColumn - 1);
        return a10 = this._findMatchesInLine(t10, o10, c11, e10.endLineNumber, s11, a10, i10, n10, r10), i10;
      }
      let p10 = d10 === e10.startLineNumber ? e10.startColumn : 1;
      return a10 = this.findMatchesInNode(c10.node, o10, d10, p10, l10, u10, t10, n10, r10, a10, i10), i10;
    }
    _findMatchesInLine(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let l10 = e10.wordSeparators;
      if (!s10 && e10.simpleSearch) {
        let t11 = e10.simpleSearch, s11 = t11.length, u11 = n10.length, d10 = -s11;
        for (; (d10 = n10.indexOf(t11, d10 + s11)) !== -1; ) if ((!l10 || hv(l10, n10, u11, d10, s11)) && (o10[a10++] = new tv(new F(r10, d10 + 1 + i10, r10, d10 + 1 + s11 + i10), null), a10 >= c10)) return a10;
        return a10;
      }
      let u10;
      t10.reset(0);
      do
        if (u10 = t10.next(n10), u10 && (o10[a10++] = uv(new F(r10, u10.index + 1 + i10, r10, u10.index + 1 + u10[0].length + i10), u10, s10), a10 >= c10)) return a10;
      while (u10);
      return a10;
    }
    insert(e10, t10, n10 = false) {
      if (this._EOLNormalized = this._EOLNormalized && n10, this._lastVisitedLine.lineNumber = 0, this._lastVisitedLine.value = ``, this.root !== Z) {
        let { node: n11, remainder: r10, nodeStartOffset: i10 } = this.nodeAt(e10), a10 = n11.piece, o10 = a10.bufferIndex, s10 = this.positionInBuffer(n11, r10);
        if (n11.piece.bufferIndex === 0 && a10.end.line === this._lastChangeBufferPos.line && a10.end.column === this._lastChangeBufferPos.column && i10 + a10.length === e10 && t10.length < QB) {
          this.appendToNode(n11, t10), this.computeBufferMetadata();
          return;
        }
        if (i10 === e10) this.insertContentToNodeLeft(t10, n11), this._searchCache.validate(e10);
        else if (i10 + n11.piece.length > e10) {
          let e11 = [], i11 = new rV(a10.bufferIndex, s10, a10.end, this.getLineFeedCnt(a10.bufferIndex, s10, a10.end), this.offsetInBuffer(o10, a10.end) - this.offsetInBuffer(o10, s10));
          if (this.shouldCheckCRLF() && this.endWithCR(t10)) {
            let e12 = this.nodeCharCodeAt(n11, r10);
            if (e12 === 10) {
              let e13 = {
                line: i11.start.line + 1,
                column: 0
              };
              i11 = new rV(i11.bufferIndex, e13, i11.end, this.getLineFeedCnt(i11.bufferIndex, e13, i11.end), i11.length - 1), t10 += `
`;
            }
          }
          if (this.shouldCheckCRLF() && this.startWithLF(t10)) {
            let i12 = this.nodeCharCodeAt(n11, r10 - 1);
            if (i12 === 13) {
              let i13 = this.positionInBuffer(n11, r10 - 1);
              this.deleteNodeTail(n11, i13), t10 = `\r` + t10, n11.piece.length === 0 && e11.push(n11);
            } else this.deleteNodeTail(n11, s10);
          } else this.deleteNodeTail(n11, s10);
          let c10 = this.createNewPieces(t10);
          i11.length > 0 && this.rbInsertRight(n11, i11);
          let l10 = n11;
          for (let e12 = 0; e12 < c10.length; e12++) l10 = this.rbInsertRight(l10, c10[e12]);
          this.deleteNodes(e11);
        } else this.insertContentToNodeRight(t10, n11);
      } else {
        let e11 = this.createNewPieces(t10), n11 = this.rbInsertLeft(null, e11[0]);
        for (let t11 = 1; t11 < e11.length; t11++) n11 = this.rbInsertRight(n11, e11[t11]);
      }
      this.computeBufferMetadata();
    }
    delete(e10, t10) {
      if (this._lastVisitedLine.lineNumber = 0, this._lastVisitedLine.value = ``, t10 <= 0 || this.root === Z) return;
      let n10 = this.nodeAt(e10), r10 = this.nodeAt(e10 + t10), i10 = n10.node, a10 = r10.node;
      if (i10 === a10) {
        let a11 = this.positionInBuffer(i10, n10.remainder), o11 = this.positionInBuffer(i10, r10.remainder);
        if (n10.nodeStartOffset === e10) {
          if (t10 === i10.piece.length) {
            let e11 = i10.next();
            JB(this, i10), this.validateCRLFWithPrevNode(e11), this.computeBufferMetadata();
            return;
          }
          this.deleteNodeHead(i10, o11), this._searchCache.validate(e10), this.validateCRLFWithPrevNode(i10), this.computeBufferMetadata();
          return;
        }
        if (n10.nodeStartOffset + i10.piece.length === e10 + t10) {
          this.deleteNodeTail(i10, a11), this.validateCRLFWithNextNode(i10), this.computeBufferMetadata();
          return;
        }
        this.shrinkNode(i10, a11, o11), this.computeBufferMetadata();
        return;
      }
      let o10 = [], s10 = this.positionInBuffer(i10, n10.remainder);
      this.deleteNodeTail(i10, s10), this._searchCache.validate(e10), i10.piece.length === 0 && o10.push(i10);
      let c10 = this.positionInBuffer(a10, r10.remainder);
      this.deleteNodeHead(a10, c10), a10.piece.length === 0 && o10.push(a10);
      let l10 = i10.next();
      for (let e11 = l10; e11 !== Z && e11 !== a10; e11 = e11.next()) o10.push(e11);
      let u10 = i10.piece.length === 0 ? i10.prev() : i10;
      this.deleteNodes(o10), this.validateCRLFWithNextNode(u10), this.computeBufferMetadata();
    }
    insertContentToNodeLeft(e10, t10) {
      let n10 = [];
      if (this.shouldCheckCRLF() && this.endWithCR(e10) && this.startWithLF(t10)) {
        let r11 = t10.piece, i11 = {
          line: r11.start.line + 1,
          column: 0
        }, a10 = new rV(r11.bufferIndex, i11, r11.end, this.getLineFeedCnt(r11.bufferIndex, i11, r11.end), r11.length - 1);
        t10.piece = a10, e10 += `
`, XB(this, t10, -1, -1), t10.piece.length === 0 && n10.push(t10);
      }
      let r10 = this.createNewPieces(e10), i10 = this.rbInsertLeft(t10, r10[r10.length - 1]);
      for (let e11 = r10.length - 2; e11 >= 0; e11--) i10 = this.rbInsertLeft(i10, r10[e11]);
      this.validateCRLFWithPrevNode(i10), this.deleteNodes(n10);
    }
    insertContentToNodeRight(e10, t10) {
      this.adjustCarriageReturnFromNext(e10, t10) && (e10 += `
`);
      let n10 = this.createNewPieces(e10), r10 = this.rbInsertRight(t10, n10[0]), i10 = r10;
      for (let e11 = 1; e11 < n10.length; e11++) i10 = this.rbInsertRight(i10, n10[e11]);
      this.validateCRLFWithPrevNode(r10);
    }
    positionInBuffer(e10, t10, n10) {
      let r10 = e10.piece, i10 = e10.piece.bufferIndex, a10 = this._buffers[i10].lineStarts, o10 = a10[r10.start.line] + r10.start.column, s10 = o10 + t10, c10 = r10.start.line, l10 = r10.end.line, u10 = 0, d10 = 0, f10 = 0;
      for (; c10 <= l10 && (u10 = c10 + (l10 - c10) / 2 | 0, f10 = a10[u10], u10 !== l10); ) if (d10 = a10[u10 + 1], s10 < f10) l10 = u10 - 1;
      else if (s10 >= d10) c10 = u10 + 1;
      else break;
      return n10 ? (n10.line = u10, n10.column = s10 - f10, null) : {
        line: u10,
        column: s10 - f10
      };
    }
    getLineFeedCnt(e10, t10, n10) {
      if (n10.column === 0) return n10.line - t10.line;
      let r10 = this._buffers[e10].lineStarts;
      if (n10.line === r10.length - 1) return n10.line - t10.line;
      let i10 = r10[n10.line + 1], a10 = r10[n10.line] + n10.column;
      if (i10 > a10 + 1) return n10.line - t10.line;
      let o10 = a10 - 1, s10 = this._buffers[e10].buffer;
      return s10.charCodeAt(o10) === 13 ? n10.line - t10.line + 1 : n10.line - t10.line;
    }
    offsetInBuffer(e10, t10) {
      let n10 = this._buffers[e10].lineStarts;
      return n10[t10.line] + t10.column;
    }
    deleteNodes(e10) {
      for (let t10 = 0; t10 < e10.length; t10++) JB(this, e10[t10]);
    }
    createNewPieces(e10) {
      if (e10.length > QB) {
        let t11 = [];
        for (; e10.length > QB; ) {
          let n12 = e10.charCodeAt(QB - 1), r11;
          n12 === 13 || n12 >= 55296 && n12 <= 56319 ? (r11 = e10.substring(0, QB - 1), e10 = e10.substring(QB - 1)) : (r11 = e10.substring(0, QB), e10 = e10.substring(QB));
          let i11 = tV(r11);
          t11.push(new rV(this._buffers.length, {
            line: 0,
            column: 0
          }, {
            line: i11.length - 1,
            column: r11.length - i11[i11.length - 1]
          }, i11.length - 1, r11.length)), this._buffers.push(new iV(r11, i11));
        }
        let n11 = tV(e10);
        return t11.push(new rV(this._buffers.length, {
          line: 0,
          column: 0
        }, {
          line: n11.length - 1,
          column: e10.length - n11[n11.length - 1]
        }, n11.length - 1, e10.length)), this._buffers.push(new iV(e10, n11)), t11;
      }
      let t10 = this._buffers[0].buffer.length, n10 = tV(e10, false), r10 = this._lastChangeBufferPos;
      if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === t10 && t10 !== 0 && this.startWithLF(e10) && this.endWithCR(this._buffers[0].buffer)) {
        this._lastChangeBufferPos = {
          line: this._lastChangeBufferPos.line,
          column: this._lastChangeBufferPos.column + 1
        }, r10 = this._lastChangeBufferPos;
        for (let e11 = 0; e11 < n10.length; e11++) n10[e11] += t10 + 1;
        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(n10.slice(1)), this._buffers[0].buffer += `_` + e10, t10 += 1;
      } else {
        if (t10 !== 0) for (let e11 = 0; e11 < n10.length; e11++) n10[e11] += t10;
        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(n10.slice(1)), this._buffers[0].buffer += e10;
      }
      let i10 = this._buffers[0].buffer.length, a10 = this._buffers[0].lineStarts.length - 1, o10 = i10 - this._buffers[0].lineStarts[a10], s10 = {
        line: a10,
        column: o10
      }, c10 = new rV(0, r10, s10, this.getLineFeedCnt(0, r10, s10), i10 - t10);
      return this._lastChangeBufferPos = s10, [
        c10
      ];
    }
    getLineRawContent(e10, t10 = 0) {
      let n10 = this.root, r10 = ``, i10 = this._searchCache.get2(e10);
      if (i10) {
        n10 = i10.node;
        let a10 = this.getAccumulatedValue(n10, e10 - i10.nodeStartLineNumber - 1), o10 = this._buffers[n10.piece.bufferIndex].buffer, s10 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
        if (i10.nodeStartLineNumber + n10.piece.lineFeedCnt === e10) r10 = o10.substring(s10 + a10, s10 + n10.piece.length);
        else {
          let r11 = this.getAccumulatedValue(n10, e10 - i10.nodeStartLineNumber);
          return o10.substring(s10 + a10, s10 + r11 - t10);
        }
      } else {
        let i11 = 0, a10 = e10;
        for (; n10 !== Z; ) if (n10.left !== Z && n10.lf_left >= e10 - 1) n10 = n10.left;
        else if (n10.lf_left + n10.piece.lineFeedCnt > e10 - 1) {
          let r11 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 2), o10 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 1), s10 = this._buffers[n10.piece.bufferIndex].buffer, c10 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
          return i11 += n10.size_left, this._searchCache.set({
            node: n10,
            nodeStartOffset: i11,
            nodeStartLineNumber: a10 - (e10 - 1 - n10.lf_left)
          }), s10.substring(c10 + r11, c10 + o10 - t10);
        } else if (n10.lf_left + n10.piece.lineFeedCnt === e10 - 1) {
          let t11 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 2), i12 = this._buffers[n10.piece.bufferIndex].buffer, a11 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
          r10 = i12.substring(a11 + t11, a11 + n10.piece.length);
          break;
        } else e10 -= n10.lf_left + n10.piece.lineFeedCnt, i11 += n10.size_left + n10.piece.length, n10 = n10.right;
      }
      for (n10 = n10.next(); n10 !== Z; ) {
        let e11 = this._buffers[n10.piece.bufferIndex].buffer;
        if (n10.piece.lineFeedCnt > 0) {
          let i11 = this.getAccumulatedValue(n10, 0), a10 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
          return r10 += e11.substring(a10, a10 + i11 - t10), r10;
        } else {
          let t11 = this.offsetInBuffer(n10.piece.bufferIndex, n10.piece.start);
          r10 += e11.substr(t11, n10.piece.length);
        }
        n10 = n10.next();
      }
      return r10;
    }
    computeBufferMetadata() {
      let e10 = this.root, t10 = 1, n10 = 0;
      for (; e10 !== Z; ) t10 += e10.lf_left + e10.piece.lineFeedCnt, n10 += e10.size_left + e10.piece.length, e10 = e10.right;
      this._lineCnt = t10, this._length = n10, this._searchCache.validate(this._length);
    }
    getIndexOf(e10, t10) {
      let n10 = e10.piece, r10 = this.positionInBuffer(e10, t10), i10 = r10.line - n10.start.line;
      if (this.offsetInBuffer(n10.bufferIndex, n10.end) - this.offsetInBuffer(n10.bufferIndex, n10.start) === t10) {
        let t11 = this.getLineFeedCnt(e10.piece.bufferIndex, n10.start, r10);
        if (t11 !== i10) return {
          index: t11,
          remainder: 0
        };
      }
      return {
        index: i10,
        remainder: r10.column
      };
    }
    getAccumulatedValue(e10, t10) {
      if (t10 < 0) return 0;
      let n10 = e10.piece, r10 = this._buffers[n10.bufferIndex].lineStarts, i10 = n10.start.line + t10 + 1;
      return i10 > n10.end.line ? r10[n10.end.line] + n10.end.column - r10[n10.start.line] - n10.start.column : r10[i10] - r10[n10.start.line] - n10.start.column;
    }
    deleteNodeTail(e10, t10) {
      let n10 = e10.piece, r10 = n10.lineFeedCnt, i10 = this.offsetInBuffer(n10.bufferIndex, n10.end), a10 = t10, o10 = this.offsetInBuffer(n10.bufferIndex, a10), s10 = this.getLineFeedCnt(n10.bufferIndex, n10.start, a10), c10 = s10 - r10, l10 = o10 - i10, u10 = n10.length + l10;
      e10.piece = new rV(n10.bufferIndex, n10.start, a10, s10, u10), XB(this, e10, l10, c10);
    }
    deleteNodeHead(e10, t10) {
      let n10 = e10.piece, r10 = n10.lineFeedCnt, i10 = this.offsetInBuffer(n10.bufferIndex, n10.start), a10 = t10, o10 = this.getLineFeedCnt(n10.bufferIndex, a10, n10.end), s10 = this.offsetInBuffer(n10.bufferIndex, a10), c10 = o10 - r10, l10 = i10 - s10, u10 = n10.length + l10;
      e10.piece = new rV(n10.bufferIndex, a10, n10.end, o10, u10), XB(this, e10, l10, c10);
    }
    shrinkNode(e10, t10, n10) {
      let r10 = e10.piece, i10 = r10.start, a10 = r10.end, o10 = r10.length, s10 = r10.lineFeedCnt, c10 = t10, l10 = this.getLineFeedCnt(r10.bufferIndex, r10.start, c10), u10 = this.offsetInBuffer(r10.bufferIndex, t10) - this.offsetInBuffer(r10.bufferIndex, i10);
      e10.piece = new rV(r10.bufferIndex, r10.start, c10, l10, u10), XB(this, e10, u10 - o10, l10 - s10);
      let d10 = new rV(r10.bufferIndex, n10, a10, this.getLineFeedCnt(r10.bufferIndex, n10, a10), this.offsetInBuffer(r10.bufferIndex, a10) - this.offsetInBuffer(r10.bufferIndex, n10)), f10 = this.rbInsertRight(e10, d10);
      this.validateCRLFWithPrevNode(f10);
    }
    appendToNode(e10, t10) {
      this.adjustCarriageReturnFromNext(t10, e10) && (t10 += `
`);
      let n10 = this.shouldCheckCRLF() && this.startWithLF(t10) && this.endWithCR(e10), r10 = this._buffers[0].buffer.length;
      this._buffers[0].buffer += t10;
      let i10 = tV(t10, false);
      for (let e11 = 0; e11 < i10.length; e11++) i10[e11] += r10;
      if (n10) {
        let e11 = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];
        this._buffers[0].lineStarts.pop(), this._lastChangeBufferPos = {
          line: this._lastChangeBufferPos.line - 1,
          column: r10 - e11
        };
      }
      this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(i10.slice(1));
      let a10 = this._buffers[0].lineStarts.length - 1, o10 = this._buffers[0].buffer.length - this._buffers[0].lineStarts[a10], s10 = {
        line: a10,
        column: o10
      }, c10 = e10.piece.length + t10.length, l10 = e10.piece.lineFeedCnt, u10 = this.getLineFeedCnt(0, e10.piece.start, s10), d10 = u10 - l10;
      e10.piece = new rV(e10.piece.bufferIndex, e10.piece.start, s10, u10, c10), this._lastChangeBufferPos = s10, XB(this, e10, t10.length, d10);
    }
    nodeAt(e10) {
      let t10 = this.root, n10 = this._searchCache.get(e10);
      if (n10) return {
        node: n10.node,
        nodeStartOffset: n10.nodeStartOffset,
        remainder: e10 - n10.nodeStartOffset
      };
      let r10 = 0;
      for (; t10 !== Z; ) if (t10.size_left > e10) t10 = t10.left;
      else if (t10.size_left + t10.piece.length >= e10) {
        r10 += t10.size_left;
        let n11 = {
          node: t10,
          remainder: e10 - t10.size_left,
          nodeStartOffset: r10
        };
        return this._searchCache.set(n11), n11;
      } else e10 -= t10.size_left + t10.piece.length, r10 += t10.size_left + t10.piece.length, t10 = t10.right;
      return null;
    }
    nodeAt2(e10, t10) {
      let n10 = this.root, r10 = 0;
      for (; n10 !== Z; ) if (n10.left !== Z && n10.lf_left >= e10 - 1) n10 = n10.left;
      else if (n10.lf_left + n10.piece.lineFeedCnt > e10 - 1) {
        let i10 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 2), a10 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 1);
        return r10 += n10.size_left, {
          node: n10,
          remainder: Math.min(i10 + t10 - 1, a10),
          nodeStartOffset: r10
        };
      } else if (n10.lf_left + n10.piece.lineFeedCnt === e10 - 1) {
        let i10 = this.getAccumulatedValue(n10, e10 - n10.lf_left - 2);
        if (i10 + t10 - 1 <= n10.piece.length) return {
          node: n10,
          remainder: i10 + t10 - 1,
          nodeStartOffset: r10
        };
        t10 -= n10.piece.length - i10;
        break;
      } else e10 -= n10.lf_left + n10.piece.lineFeedCnt, r10 += n10.size_left + n10.piece.length, n10 = n10.right;
      for (n10 = n10.next(); n10 !== Z; ) {
        if (n10.piece.lineFeedCnt > 0) {
          let e11 = this.getAccumulatedValue(n10, 0), r11 = this.offsetOfNode(n10);
          return {
            node: n10,
            remainder: Math.min(t10 - 1, e11),
            nodeStartOffset: r11
          };
        } else if (n10.piece.length >= t10 - 1) {
          let e11 = this.offsetOfNode(n10);
          return {
            node: n10,
            remainder: t10 - 1,
            nodeStartOffset: e11
          };
        } else t10 -= n10.piece.length;
        n10 = n10.next();
      }
      return null;
    }
    nodeCharCodeAt(e10, t10) {
      if (e10.piece.lineFeedCnt < 1) return -1;
      let n10 = this._buffers[e10.piece.bufferIndex], r10 = this.offsetInBuffer(e10.piece.bufferIndex, e10.piece.start) + t10;
      return n10.buffer.charCodeAt(r10);
    }
    offsetOfNode(e10) {
      if (!e10) return 0;
      let t10 = e10.size_left;
      for (; e10 !== this.root; ) e10.parent.right === e10 && (t10 += e10.parent.size_left + e10.parent.piece.length), e10 = e10.parent;
      return t10;
    }
    shouldCheckCRLF() {
      return !(this._EOLNormalized && this._EOL === `
`);
    }
    startWithLF(e10) {
      if (typeof e10 == `string`) return e10.charCodeAt(0) === 10;
      if (e10 === Z || e10.piece.lineFeedCnt === 0) return false;
      let t10 = e10.piece, n10 = this._buffers[t10.bufferIndex].lineStarts, r10 = t10.start.line, i10 = n10[r10] + t10.start.column;
      if (r10 === n10.length - 1) return false;
      let a10 = n10[r10 + 1];
      return a10 > i10 + 1 ? false : this._buffers[t10.bufferIndex].buffer.charCodeAt(i10) === 10;
    }
    endWithCR(e10) {
      return typeof e10 == `string` ? e10.charCodeAt(e10.length - 1) === 13 : e10 === Z || e10.piece.lineFeedCnt === 0 ? false : this.nodeCharCodeAt(e10, e10.piece.length - 1) === 13;
    }
    validateCRLFWithPrevNode(e10) {
      if (this.shouldCheckCRLF() && this.startWithLF(e10)) {
        let t10 = e10.prev();
        this.endWithCR(t10) && this.fixCRLF(t10, e10);
      }
    }
    validateCRLFWithNextNode(e10) {
      if (this.shouldCheckCRLF() && this.endWithCR(e10)) {
        let t10 = e10.next();
        this.startWithLF(t10) && this.fixCRLF(e10, t10);
      }
    }
    fixCRLF(e10, t10) {
      let n10 = [], r10 = this._buffers[e10.piece.bufferIndex].lineStarts, i10;
      i10 = e10.piece.end.column === 0 ? {
        line: e10.piece.end.line - 1,
        column: r10[e10.piece.end.line] - r10[e10.piece.end.line - 1] - 1
      } : {
        line: e10.piece.end.line,
        column: e10.piece.end.column - 1
      };
      let a10 = e10.piece.length - 1, o10 = e10.piece.lineFeedCnt - 1;
      e10.piece = new rV(e10.piece.bufferIndex, e10.piece.start, i10, o10, a10), XB(this, e10, -1, -1), e10.piece.length === 0 && n10.push(e10);
      let s10 = {
        line: t10.piece.start.line + 1,
        column: 0
      }, c10 = t10.piece.length - 1, l10 = this.getLineFeedCnt(t10.piece.bufferIndex, s10, t10.piece.end);
      t10.piece = new rV(t10.piece.bufferIndex, s10, t10.piece.end, l10, c10), XB(this, t10, -1, -1), t10.piece.length === 0 && n10.push(t10);
      let u10 = this.createNewPieces(`\r
`);
      this.rbInsertRight(e10, u10[0]);
      for (let e11 = 0; e11 < n10.length; e11++) JB(this, n10[e11]);
    }
    adjustCarriageReturnFromNext(e10, t10) {
      if (this.shouldCheckCRLF() && this.endWithCR(e10)) {
        let n10 = t10.next();
        if (this.startWithLF(n10)) {
          if (e10 += `
`, n10.piece.length === 1) JB(this, n10);
          else {
            let e11 = n10.piece, t11 = {
              line: e11.start.line + 1,
              column: 0
            }, r10 = e11.length - 1, i10 = this.getLineFeedCnt(e11.bufferIndex, t11, e11.end);
            n10.piece = new rV(e11.bufferIndex, t11, e11.end, i10, r10), XB(this, n10, -1, -1);
          }
          return true;
        }
      }
      return false;
    }
    iterate(e10, t10) {
      if (e10 === Z) return t10(Z);
      let n10 = this.iterate(e10.left, t10);
      return n10 && t10(e10) && this.iterate(e10.right, t10);
    }
    getNodeContent(e10) {
      if (e10 === Z) return ``;
      let t10 = this._buffers[e10.piece.bufferIndex], n10 = e10.piece, r10 = this.offsetInBuffer(n10.bufferIndex, n10.start), i10 = this.offsetInBuffer(n10.bufferIndex, n10.end), a10 = t10.buffer.substring(r10, i10);
      return a10;
    }
    getPieceContent(e10) {
      let t10 = this._buffers[e10.bufferIndex], n10 = this.offsetInBuffer(e10.bufferIndex, e10.start), r10 = this.offsetInBuffer(e10.bufferIndex, e10.end), i10 = t10.buffer.substring(n10, r10);
      return i10;
    }
    rbInsertRight(e10, t10) {
      let n10 = new BB(t10, 1);
      n10.left = Z, n10.right = Z, n10.parent = Z, n10.size_left = 0, n10.lf_left = 0;
      let r10 = this.root;
      if (r10 === Z) this.root = n10, n10.color = 0;
      else if (e10.right === Z) e10.right = n10, n10.parent = e10;
      else {
        let t11 = VB(e10.right);
        t11.left = n10, n10.parent = t11;
      }
      return YB(this, n10), n10;
    }
    rbInsertLeft(e10, t10) {
      let n10 = new BB(t10, 1);
      if (n10.left = Z, n10.right = Z, n10.parent = Z, n10.size_left = 0, n10.lf_left = 0, this.root === Z) this.root = n10, n10.color = 0;
      else if (e10.left === Z) e10.left = n10, n10.parent = e10;
      else {
        let t11 = HB(e10.left);
        t11.right = n10, n10.parent = t11;
      }
      return YB(this, n10), n10;
    }
  }, cV = class e10 extends j {
    constructor(e11, t10, n10, r10, i10, a10, o10) {
      super(), this._onDidChangeContent = this._register(new N()), this._BOM = t10, this._mightContainNonBasicASCII = !a10, this._mightContainRTL = r10, this._mightContainUnusualLineTerminators = i10, this._pieceTree = new sV(e11, n10, o10);
    }
    mightContainRTL() {
      return this._mightContainRTL;
    }
    mightContainUnusualLineTerminators() {
      return this._mightContainUnusualLineTerminators;
    }
    resetMightContainUnusualLineTerminators() {
      this._mightContainUnusualLineTerminators = false;
    }
    mightContainNonBasicASCII() {
      return this._mightContainNonBasicASCII;
    }
    getBOM() {
      return this._BOM;
    }
    getEOL() {
      return this._pieceTree.getEOL();
    }
    createSnapshot(e11) {
      return this._pieceTree.createSnapshot(e11 ? this._BOM : ``);
    }
    getOffsetAt(e11, t10) {
      return this._pieceTree.getOffsetAt(e11, t10);
    }
    getPositionAt(e11) {
      return this._pieceTree.getPositionAt(e11);
    }
    getRangeAt(e11, t10) {
      let n10 = e11 + t10, r10 = this.getPositionAt(e11), i10 = this.getPositionAt(n10);
      return new F(r10.lineNumber, r10.column, i10.lineNumber, i10.column);
    }
    getValueInRange(e11, t10 = 0) {
      if (e11.isEmpty()) return ``;
      let n10 = this._getEndOfLine(t10);
      return this._pieceTree.getValueInRange(e11, n10);
    }
    getValueLengthInRange(e11, t10 = 0) {
      if (e11.isEmpty()) return 0;
      if (e11.startLineNumber === e11.endLineNumber) return e11.endColumn - e11.startColumn;
      let n10 = this.getOffsetAt(e11.startLineNumber, e11.startColumn), r10 = this.getOffsetAt(e11.endLineNumber, e11.endColumn), i10 = 0, a10 = this._getEndOfLine(t10), o10 = this.getEOL();
      if (a10.length !== o10.length) {
        let t11 = a10.length - o10.length, n11 = e11.endLineNumber - e11.startLineNumber;
        i10 = t11 * n11;
      }
      return r10 - n10 + i10;
    }
    getCharacterCountInRange(e11, t10 = 0) {
      if (this._mightContainNonBasicASCII) {
        let n10 = 0, r10 = e11.startLineNumber, i10 = e11.endLineNumber;
        for (let t11 = r10; t11 <= i10; t11++) {
          let a10 = this.getLineContent(t11), o10 = t11 === r10 ? e11.startColumn - 1 : 0, s10 = t11 === i10 ? e11.endColumn - 1 : a10.length;
          for (let e12 = o10; e12 < s10; e12++) Bs(a10.charCodeAt(e12)) ? (n10 += 1, e12 += 1) : n10 += 1;
        }
        return n10 += this._getEndOfLine(t10).length * (i10 - r10), n10;
      }
      return this.getValueLengthInRange(e11, t10);
    }
    getLength() {
      return this._pieceTree.getLength();
    }
    getLineCount() {
      return this._pieceTree.getLineCount();
    }
    getLinesContent() {
      return this._pieceTree.getLinesContent();
    }
    getLineContent(e11) {
      return this._pieceTree.getLineContent(e11);
    }
    getLineCharCode(e11, t10) {
      return this._pieceTree.getLineCharCode(e11, t10);
    }
    getLineLength(e11) {
      return this._pieceTree.getLineLength(e11);
    }
    getLineFirstNonWhitespaceColumn(e11) {
      let t10 = Es(this.getLineContent(e11));
      return t10 === -1 ? 0 : t10 + 1;
    }
    getLineLastNonWhitespaceColumn(e11) {
      let t10 = Os(this.getLineContent(e11));
      return t10 === -1 ? 0 : t10 + 2;
    }
    _getEndOfLine(e11) {
      switch (e11) {
        case 1:
          return `
`;
        case 2:
          return `\r
`;
        case 0:
          return this.getEOL();
        default:
          throw Error(`Unknown EOL preference`);
      }
    }
    setEOL(e11) {
      this._pieceTree.setEOL(e11);
    }
    applyEdits(t10, n10, r10) {
      let i10 = this._mightContainRTL, a10 = this._mightContainUnusualLineTerminators, o10 = this._mightContainNonBasicASCII, s10 = true, c10 = [];
      for (let e11 = 0; e11 < t10.length; e11++) {
        let n11 = t10[e11];
        s10 && n11._isTracked && (s10 = false);
        let r11 = n11.range;
        if (n11.text) {
          let e12 = true;
          o10 || (e12 = !ec(n11.text), o10 = e12), !i10 && e12 && (i10 = Qs(n11.text)), !a10 && e12 && (a10 = nc(n11.text));
        }
        let l11 = ``, u11 = 0, d11 = 0, f11 = 0;
        if (n11.text) {
          let e12;
          [u11, d11, f11, e12] = Hx(n11.text);
          let t11 = this.getEOL(), r12 = t11 === `\r
` ? 2 : 1;
          l11 = e12 === 0 || e12 === r12 ? n11.text : n11.text.replace(/\r\n|\r|\n/g, t11);
        }
        c10[e11] = {
          sortIndex: e11,
          identifier: n11.identifier || null,
          range: r11,
          rangeOffset: this.getOffsetAt(r11.startLineNumber, r11.startColumn),
          rangeLength: this.getValueLengthInRange(r11),
          text: l11,
          eolCount: u11,
          firstLineLength: d11,
          lastLineLength: f11,
          forceMoveMarkers: !!n11.forceMoveMarkers,
          isAutoWhitespaceEdit: n11.isAutoWhitespaceEdit || false
        };
      }
      c10.sort(e10._sortOpsAscending);
      let l10 = false;
      for (let e11 = 0, t11 = c10.length - 1; e11 < t11; e11++) {
        let t12 = c10[e11].range.getEndPosition(), n11 = c10[e11 + 1].range.getStartPosition();
        if (n11.isBeforeOrEqual(t12)) {
          if (n11.isBefore(t12)) throw Error(`Overlapping ranges are not allowed!`);
          l10 = true;
        }
      }
      s10 && (c10 = this._reduceOperations(c10));
      let u10 = r10 || n10 ? e10._getInverseEditRanges(c10) : [], d10 = [];
      if (n10) for (let e11 = 0; e11 < c10.length; e11++) {
        let t11 = c10[e11], n11 = u10[e11];
        if (t11.isAutoWhitespaceEdit && t11.range.isEmpty()) for (let e12 = n11.startLineNumber; e12 <= n11.endLineNumber; e12++) {
          let r11 = ``;
          e12 === n11.startLineNumber && (r11 = this.getLineContent(t11.range.startLineNumber), Es(r11) !== -1) || d10.push({
            lineNumber: e12,
            oldContent: r11
          });
        }
      }
      let f10 = null;
      if (r10) {
        let e11 = 0;
        f10 = [];
        for (let t11 = 0; t11 < c10.length; t11++) {
          let n11 = c10[t11], r11 = u10[t11], i11 = this.getValueInRange(n11.range), a11 = n11.rangeOffset + e11;
          e11 += n11.text.length - i11.length, f10[t11] = {
            sortIndex: n11.sortIndex,
            identifier: n11.identifier,
            range: r11,
            text: i11,
            textChange: new Bz(n11.rangeOffset, i11, a11, n11.text)
          };
        }
        l10 || f10.sort((e12, t11) => e12.sortIndex - t11.sortIndex);
      }
      this._mightContainRTL = i10, this._mightContainUnusualLineTerminators = a10, this._mightContainNonBasicASCII = o10;
      let p10 = this._doApplyEdits(c10), m10 = null;
      if (n10 && d10.length > 0) {
        d10.sort((e11, t11) => t11.lineNumber - e11.lineNumber), m10 = [];
        for (let e11 = 0, t11 = d10.length; e11 < t11; e11++) {
          let t12 = d10[e11].lineNumber;
          if (e11 > 0 && d10[e11 - 1].lineNumber === t12) continue;
          let n11 = d10[e11].oldContent, r11 = this.getLineContent(t12);
          r11.length === 0 || r11 === n11 || Es(r11) !== -1 || m10.push(t12);
        }
      }
      return this._onDidChangeContent.fire(), new av(f10, p10, m10);
    }
    _reduceOperations(e11) {
      return e11.length < 1e3 ? e11 : [
        this._toSingleEditOperation(e11)
      ];
    }
    _toSingleEditOperation(e11) {
      let t10 = false, n10 = e11[0].range, r10 = e11[e11.length - 1].range, i10 = new F(n10.startLineNumber, n10.startColumn, r10.endLineNumber, r10.endColumn), a10 = n10.startLineNumber, o10 = n10.startColumn, s10 = [];
      for (let n11 = 0, r11 = e11.length; n11 < r11; n11++) {
        let r12 = e11[n11], i11 = r12.range;
        t10 || (t10 = r12.forceMoveMarkers), s10.push(this.getValueInRange(new F(a10, o10, i11.startLineNumber, i11.startColumn))), r12.text.length > 0 && s10.push(r12.text), a10 = i11.endLineNumber, o10 = i11.endColumn;
      }
      let c10 = s10.join(``), [l10, u10, d10] = Hx(c10);
      return {
        sortIndex: 0,
        identifier: e11[0].identifier,
        range: i10,
        rangeOffset: this.getOffsetAt(i10.startLineNumber, i10.startColumn),
        rangeLength: this.getValueLengthInRange(i10, 0),
        text: c10,
        eolCount: l10,
        firstLineLength: u10,
        lastLineLength: d10,
        forceMoveMarkers: t10,
        isAutoWhitespaceEdit: false
      };
    }
    _doApplyEdits(t10) {
      t10.sort(e10._sortOpsDescending);
      let n10 = [];
      for (let e11 = 0; e11 < t10.length; e11++) {
        let r10 = t10[e11], i10 = r10.range.startLineNumber, a10 = r10.range.startColumn, o10 = r10.range.endLineNumber, s10 = r10.range.endColumn;
        if (i10 === o10 && a10 === s10 && r10.text.length === 0) continue;
        r10.text ? (this._pieceTree.delete(r10.rangeOffset, r10.rangeLength), this._pieceTree.insert(r10.rangeOffset, r10.text, true)) : this._pieceTree.delete(r10.rangeOffset, r10.rangeLength);
        let c10 = new F(i10, a10, o10, s10);
        n10.push({
          range: c10,
          rangeLength: r10.rangeLength,
          text: r10.text,
          rangeOffset: r10.rangeOffset,
          forceMoveMarkers: r10.forceMoveMarkers
        });
      }
      return n10;
    }
    findMatchesLineByLine(e11, t10, n10, r10) {
      return this._pieceTree.findMatchesLineByLine(e11, t10, n10, r10);
    }
    static _getInverseEditRanges(e11) {
      let t10 = [], n10 = 0, r10 = 0, i10 = null;
      for (let a10 = 0, o10 = e11.length; a10 < o10; a10++) {
        let o11 = e11[a10], s10, c10;
        i10 ? i10.range.endLineNumber === o11.range.startLineNumber ? (s10 = n10, c10 = r10 + (o11.range.startColumn - i10.range.endColumn)) : (s10 = n10 + (o11.range.startLineNumber - i10.range.endLineNumber), c10 = o11.range.startColumn) : (s10 = o11.range.startLineNumber, c10 = o11.range.startColumn);
        let l10;
        if (o11.text.length > 0) {
          let e12 = o11.eolCount + 1;
          l10 = e12 === 1 ? new F(s10, c10, s10, c10 + o11.firstLineLength) : new F(s10, c10, s10 + e12 - 1, o11.lastLineLength + 1);
        } else l10 = new F(s10, c10, s10, c10);
        n10 = l10.endLineNumber, r10 = l10.endColumn, t10.push(l10), i10 = o11;
      }
      return t10;
    }
    static _sortOpsAscending(e11, t10) {
      let n10 = F.compareRangesUsingEnds(e11.range, t10.range);
      return n10 === 0 ? e11.sortIndex - t10.sortIndex : n10;
    }
    static _sortOpsDescending(e11, t10) {
      let n10 = F.compareRangesUsingEnds(e11.range, t10.range);
      return n10 === 0 ? t10.sortIndex - e11.sortIndex : -n10;
    }
  }, lV = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      this._chunks = e10, this._bom = t10, this._cr = n10, this._lf = r10, this._crlf = i10, this._containsRTL = a10, this._containsUnusualLineTerminators = o10, this._isBasicASCII = s10, this._normalizeEOL = c10;
    }
    _getEOL(e10) {
      let t10 = this._cr + this._lf + this._crlf, n10 = this._cr + this._crlf;
      return t10 === 0 ? e10 === 1 ? `
` : `\r
` : n10 > t10 / 2 ? `\r
` : `
`;
    }
    create(e10) {
      let t10 = this._getEOL(e10), n10 = this._chunks;
      if (this._normalizeEOL && (t10 === `\r
` && (this._cr > 0 || this._lf > 0) || t10 === `
` && (this._cr > 0 || this._crlf > 0))) for (let e11 = 0, r11 = n10.length; e11 < r11; e11++) {
        let r12 = n10[e11].buffer.replace(/\r\n|\r|\n/g, t10), i10 = tV(r12);
        n10[e11] = new iV(r12, i10);
      }
      let r10 = new cV(n10, this._bom, t10, this._containsRTL, this._containsUnusualLineTerminators, this._isBasicASCII, this._normalizeEOL);
      return {
        textBuffer: r10,
        disposable: r10
      };
    }
  }, uV = class {
    constructor() {
      this.chunks = [], this.BOM = ``, this._hasPreviousChar = false, this._previousChar = 0, this._tmpLineStarts = [], this.cr = 0, this.lf = 0, this.crlf = 0, this.containsRTL = false, this.containsUnusualLineTerminators = false, this.isBasicASCII = true;
    }
    acceptChunk(e10) {
      if (e10.length === 0) return;
      this.chunks.length === 0 && oc(e10) && (this.BOM = ac, e10 = e10.substr(1));
      let t10 = e10.charCodeAt(e10.length - 1);
      t10 === 13 || t10 >= 55296 && t10 <= 56319 ? (this._acceptChunk1(e10.substr(0, e10.length - 1), false), this._hasPreviousChar = true, this._previousChar = t10) : (this._acceptChunk1(e10, false), this._hasPreviousChar = false, this._previousChar = t10);
    }
    _acceptChunk1(e10, t10) {
      !t10 && e10.length === 0 || (this._hasPreviousChar ? this._acceptChunk2(String.fromCharCode(this._previousChar) + e10) : this._acceptChunk2(e10));
    }
    _acceptChunk2(e10) {
      let t10 = nV(this._tmpLineStarts, e10);
      this.chunks.push(new iV(e10, t10.lineStarts)), this.cr += t10.cr, this.lf += t10.lf, this.crlf += t10.crlf, t10.isBasicASCII || (this.isBasicASCII = false, this.containsRTL || (this.containsRTL = Qs(e10)), this.containsUnusualLineTerminators || (this.containsUnusualLineTerminators = nc(e10)));
    }
    finish(e10 = true) {
      return this._finish(), new lV(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.containsUnusualLineTerminators, this.isBasicASCII, e10);
    }
    _finish() {
      if (this.chunks.length === 0 && this._acceptChunk1(``, true), this._hasPreviousChar) {
        this._hasPreviousChar = false;
        let e10 = this.chunks[this.chunks.length - 1];
        e10.buffer += String.fromCharCode(this._previousChar);
        let t10 = tV(e10.buffer);
        e10.lineStarts = t10, this._previousChar === 13 && this.cr++;
      }
    }
  }, dV = class {
    constructor(e10) {
      this._default = e10, this._store = [];
    }
    get(e10) {
      return e10 < this._store.length ? this._store[e10] : this._default;
    }
    set(e10, t10) {
      for (; e10 >= this._store.length; ) this._store[this._store.length] = this._default;
      this._store[e10] = t10;
    }
    replace(e10, t10, n10) {
      if (e10 >= this._store.length) return;
      if (t10 === 0) {
        this.insert(e10, n10);
        return;
      } else if (n10 === 0) {
        this.delete(e10, t10);
        return;
      }
      let r10 = this._store.slice(0, e10), i10 = this._store.slice(e10 + t10), a10 = fV(n10, this._default);
      this._store = r10.concat(a10, i10);
    }
    delete(e10, t10) {
      t10 === 0 || e10 >= this._store.length || this._store.splice(e10, t10);
    }
    insert(e10, t10) {
      if (t10 === 0 || e10 >= this._store.length) return;
      let n10 = [];
      for (let e11 = 0; e11 < t10; e11++) n10[e11] = this._default;
      this._store = ee(this._store, e10, n10);
    }
  };
  function fV(e10, t10) {
    let n10 = [];
    for (let r10 = 0; r10 < e10; r10++) n10[r10] = t10;
    return n10;
  }
  var pV = class {
    get startLineNumber() {
      return this._startLineNumber;
    }
    get endLineNumber() {
      return this._startLineNumber + this._tokens.length - 1;
    }
    constructor(e10, t10) {
      this._startLineNumber = e10, this._tokens = t10;
    }
    getLineTokens(e10) {
      return this._tokens[e10 - this._startLineNumber];
    }
    appendLineTokens(e10) {
      this._tokens.push(e10);
    }
  }, mV = class {
    constructor() {
      this._tokens = [];
    }
    add(e10, t10) {
      if (this._tokens.length > 0) {
        let n10 = this._tokens[this._tokens.length - 1];
        if (n10.endLineNumber + 1 === e10) {
          n10.appendLineTokens(t10);
          return;
        }
      }
      this._tokens.push(new pV(e10, [
        t10
      ]));
    }
    finalize() {
      return this._tokens;
    }
  }, hV = class {
    constructor(e10, t10) {
      this.tokenizationSupport = t10, this.initialState = this.tokenizationSupport.getInitialState(), this.store = new _V(e10);
    }
    getStartState(e10) {
      return this.store.getStartState(e10, this.initialState);
    }
    getFirstInvalidLine() {
      return this.store.getFirstInvalidLine(this.initialState);
    }
  }, gV = class extends hV {
    constructor(e10, t10, n10, r10) {
      super(e10, t10), this._textModel = n10, this._languageIdCodec = r10;
    }
    updateTokensUntilLine(e10, t10) {
      let n10 = this._textModel.getLanguageId();
      for (; ; ) {
        let r10 = this.getFirstInvalidLine();
        if (!r10 || r10.lineNumber > t10) break;
        let i10 = this._textModel.getLineContent(r10.lineNumber), a10 = bV(this._languageIdCodec, n10, this.tokenizationSupport, i10, true, r10.startState);
        e10.add(r10.lineNumber, a10.tokens), this.store.setEndState(r10.lineNumber, a10.endState);
      }
    }
    getTokenTypeIfInsertingCharacter(e10, t10) {
      let n10 = this.getStartState(e10.lineNumber);
      if (!n10) return 0;
      let r10 = this._textModel.getLanguageId(), i10 = this._textModel.getLineContent(e10.lineNumber), a10 = i10.substring(0, e10.column - 1) + t10 + i10.substring(e10.column - 1), o10 = bV(this._languageIdCodec, r10, this.tokenizationSupport, a10, true, n10), s10 = new CA(o10.tokens, a10, this._languageIdCodec);
      if (s10.getCount() === 0) return 0;
      let c10 = s10.findTokenIndexAtOffset(e10.column - 1);
      return s10.getStandardTokenType(c10);
    }
    tokenizeLineWithEdit(e10, t10, n10) {
      let r10 = e10.lineNumber, i10 = e10.column, a10 = this.getStartState(r10);
      if (!a10) return null;
      let o10 = this._textModel.getLineContent(r10), s10 = o10.substring(0, i10 - 1) + n10 + o10.substring(i10 - 1 + t10), c10 = this._textModel.getLanguageIdAtPosition(r10, 0), l10 = bV(this._languageIdCodec, c10, this.tokenizationSupport, s10, true, a10), u10 = new CA(l10.tokens, s10, this._languageIdCodec);
      return u10;
    }
    hasAccurateTokensForLine(e10) {
      let t10 = this.store.getFirstInvalidEndStateLineNumberOrMax();
      return e10 < t10;
    }
    isCheapToTokenize(e10) {
      let t10 = this.store.getFirstInvalidEndStateLineNumberOrMax();
      return e10 < t10 || e10 === t10 && this._textModel.getLineLength(e10) < 2048;
    }
    tokenizeHeuristically(e10, t10, n10) {
      if (n10 <= this.store.getFirstInvalidEndStateLineNumberOrMax()) return {
        heuristicTokens: false
      };
      if (t10 <= this.store.getFirstInvalidEndStateLineNumberOrMax()) return this.updateTokensUntilLine(e10, n10), {
        heuristicTokens: false
      };
      let r10 = this.guessStartState(t10), i10 = this._textModel.getLanguageId();
      for (let a10 = t10; a10 <= n10; a10++) {
        let t11 = this._textModel.getLineContent(a10), n11 = bV(this._languageIdCodec, i10, this.tokenizationSupport, t11, true, r10);
        e10.add(a10, n11.tokens), r10 = n11.endState;
      }
      return {
        heuristicTokens: true
      };
    }
    guessStartState(e10) {
      let t10 = this._textModel.getLineFirstNonWhitespaceColumn(e10), n10 = [], r10 = null;
      for (let i11 = e10 - 1; t10 > 1 && i11 >= 1; i11--) {
        let e11 = this._textModel.getLineFirstNonWhitespaceColumn(i11);
        if (e11 !== 0 && e11 < t10 && (n10.push(this._textModel.getLineContent(i11)), t10 = e11, r10 = this.getStartState(i11), r10)) break;
      }
      r10 || (r10 = this.tokenizationSupport.getInitialState()), n10.reverse();
      let i10 = this._textModel.getLanguageId(), a10 = r10;
      for (let e11 of n10) {
        let t11 = bV(this._languageIdCodec, i10, this.tokenizationSupport, e11, false, a10);
        a10 = t11.endState;
      }
      return a10;
    }
  }, _V = class {
    constructor(e10) {
      this.lineCount = e10, this._tokenizationStateStore = new vV(), this._invalidEndStatesLineNumbers = new yV(), this._invalidEndStatesLineNumbers.addRange(new Cv(1, e10 + 1));
    }
    getEndState(e10) {
      return this._tokenizationStateStore.getEndState(e10);
    }
    setEndState(e10, t10) {
      if (!t10) throw new Dr(`Cannot set null/undefined state`);
      this._invalidEndStatesLineNumbers.delete(e10);
      let n10 = this._tokenizationStateStore.setEndState(e10, t10);
      return n10 && e10 < this.lineCount && this._invalidEndStatesLineNumbers.addRange(new Cv(e10 + 1, e10 + 2)), n10;
    }
    acceptChange(e10, t10) {
      this.lineCount += t10 - e10.length, this._tokenizationStateStore.acceptChange(e10, t10), this._invalidEndStatesLineNumbers.addRangeAndResize(new Cv(e10.startLineNumber, e10.endLineNumberExclusive), t10);
    }
    acceptChanges(e10) {
      for (let t10 of e10) {
        let [e11] = Hx(t10.text);
        this.acceptChange(new G(t10.range.startLineNumber, t10.range.endLineNumber + 1), e11 + 1);
      }
    }
    invalidateEndStateRange(e10) {
      this._invalidEndStatesLineNumbers.addRange(new Cv(e10.startLineNumber, e10.endLineNumberExclusive));
    }
    getFirstInvalidEndStateLineNumber() {
      return this._invalidEndStatesLineNumbers.min;
    }
    getFirstInvalidEndStateLineNumberOrMax() {
      return this.getFirstInvalidEndStateLineNumber() || 2 ** 53 - 1;
    }
    allStatesValid() {
      return this._invalidEndStatesLineNumbers.min === null;
    }
    getStartState(e10, t10) {
      return e10 === 1 ? t10 : this.getEndState(e10 - 1);
    }
    getFirstInvalidLine(e10) {
      let t10 = this.getFirstInvalidEndStateLineNumber();
      if (t10 === null) return null;
      let n10 = this.getStartState(t10, e10);
      if (!n10) throw new Dr(`Start state must be defined`);
      return {
        lineNumber: t10,
        startState: n10
      };
    }
  }, vV = class {
    constructor() {
      this._lineEndStates = new dV(null);
    }
    getEndState(e10) {
      return this._lineEndStates.get(e10);
    }
    setEndState(e10, t10) {
      let n10 = this._lineEndStates.get(e10);
      return n10 && n10.equals(t10) ? false : (this._lineEndStates.set(e10, t10), true);
    }
    acceptChange(e10, t10) {
      let n10 = e10.length;
      t10 > 0 && n10 > 0 && (n10--, t10--), this._lineEndStates.replace(e10.startLineNumber, n10, t10);
    }
  }, yV = class {
    constructor() {
      this._ranges = [];
    }
    get min() {
      return this._ranges.length === 0 ? null : this._ranges[0].start;
    }
    delete(e10) {
      let t10 = this._ranges.findIndex((t11) => t11.contains(e10));
      if (t10 !== -1) {
        let n10 = this._ranges[t10];
        n10.start === e10 ? n10.endExclusive === e10 + 1 ? this._ranges.splice(t10, 1) : this._ranges[t10] = new Cv(e10 + 1, n10.endExclusive) : n10.endExclusive === e10 + 1 ? this._ranges[t10] = new Cv(n10.start, e10) : this._ranges.splice(t10, 1, new Cv(n10.start, e10), new Cv(e10 + 1, n10.endExclusive));
      }
    }
    addRange(e10) {
      Cv.addRange(e10, this._ranges);
    }
    addRangeAndResize(e10, t10) {
      let n10 = 0;
      for (; !(n10 >= this._ranges.length || e10.start <= this._ranges[n10].endExclusive); ) n10++;
      let r10 = n10;
      for (; !(r10 >= this._ranges.length || e10.endExclusive < this._ranges[r10].start); ) r10++;
      let i10 = t10 - e10.length;
      for (let e11 = r10; e11 < this._ranges.length; e11++) this._ranges[e11] = this._ranges[e11].delta(i10);
      if (n10 === r10) {
        let r11 = new Cv(e10.start, e10.start + t10);
        r11.isEmpty || this._ranges.splice(n10, 0, r11);
      } else {
        let t11 = Math.min(e10.start, this._ranges[n10].start), a10 = Math.max(e10.endExclusive, this._ranges[r10 - 1].endExclusive), o10 = new Cv(t11, a10 + i10);
        o10.isEmpty ? this._ranges.splice(n10, r10 - n10) : this._ranges.splice(n10, r10 - n10, o10);
      }
    }
    toString() {
      return this._ranges.map((e10) => e10.toString()).join(` + `);
    }
  };
  function bV(e10, t10, n10, r10, i10, a10) {
    let o10 = null;
    if (n10) try {
      o10 = n10.tokenizeEncoded(r10, i10, a10.clone());
    } catch (e11) {
      gr(e11);
    }
    return o10 || (o10 = OA(e10.encodeLanguageId(t10), a10)), CA.convertToEndOffset(o10.tokens, r10.length), o10;
  }
  var xV = class {
    constructor(e10, t10) {
      this._tokenizerWithStateStore = e10, this._backgroundTokenStore = t10, this._isDisposed = false, this._isScheduled = false;
    }
    dispose() {
      this._isDisposed = true;
    }
    handleChanges() {
      this._beginBackgroundTokenization();
    }
    _beginBackgroundTokenization() {
      this._isScheduled || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize() || (this._isScheduled = true, ll((e10) => {
        this._isScheduled = false, this._backgroundTokenizeWithDeadline(e10);
      }));
    }
    _backgroundTokenizeWithDeadline(e10) {
      let t10 = Date.now() + e10.timeRemaining(), n10 = () => {
        this._isDisposed || !this._tokenizerWithStateStore._textModel.isAttachedToEditor() || !this._hasLinesToTokenize() || (this._backgroundTokenizeForAtLeast1ms(), Date.now() < t10 ? Tt(n10) : this._beginBackgroundTokenization());
      };
      n10();
    }
    _backgroundTokenizeForAtLeast1ms() {
      let e10 = this._tokenizerWithStateStore._textModel.getLineCount(), t10 = new mV(), n10 = Gr.create(false);
      do {
        if (n10.elapsed() > 1) break;
        let r10 = this._tokenizeOneInvalidLine(t10);
        if (r10 >= e10) break;
      } while (this._hasLinesToTokenize());
      this._backgroundTokenStore.setTokens(t10.finalize()), this.checkFinished();
    }
    _hasLinesToTokenize() {
      return this._tokenizerWithStateStore ? !this._tokenizerWithStateStore.store.allStatesValid() : false;
    }
    _tokenizeOneInvalidLine(e10) {
      var _a3;
      let t10 = (_a3 = this._tokenizerWithStateStore) == null ? void 0 : _a3.getFirstInvalidLine();
      return t10 ? (this._tokenizerWithStateStore.updateTokensUntilLine(e10, t10.lineNumber), t10.lineNumber) : this._tokenizerWithStateStore._textModel.getLineCount() + 1;
    }
    checkFinished() {
      this._isDisposed || this._tokenizerWithStateStore.store.allStatesValid() && this._backgroundTokenStore.backgroundTokenizationFinished();
    }
    requestTokens(e10, t10) {
      this._tokenizerWithStateStore.store.invalidateEndStateRange(new G(e10, t10));
    }
  }, SV = class {
    constructor() {
      this._onDidChangeVisibleRanges = new N(), this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event, this._views = /* @__PURE__ */ new Set();
    }
    attachView() {
      let e10 = new CV((t10) => {
        this._onDidChangeVisibleRanges.fire({
          view: e10,
          state: t10
        });
      });
      return this._views.add(e10), e10;
    }
    detachView(e10) {
      this._views.delete(e10), this._onDidChangeVisibleRanges.fire({
        view: e10,
        state: void 0
      });
    }
  }, CV = class {
    constructor(e10) {
      this.handleStateChange = e10;
    }
    setVisibleLines(e10, t10) {
      let n10 = e10.map((e11) => new G(e11.startLineNumber, e11.endLineNumber + 1));
      this.handleStateChange({
        visibleLineRanges: n10,
        stabilized: t10
      });
    }
  }, wV = class extends j {
    get lineRanges() {
      return this._lineRanges;
    }
    constructor(e10) {
      super(), this._refreshTokens = e10, this.runner = this._register(new cl(() => this.update(), 50)), this._computedLineRanges = [], this._lineRanges = [];
    }
    update() {
      l(this._computedLineRanges, this._lineRanges, (e10, t10) => e10.equals(t10)) || (this._computedLineRanges = this._lineRanges, this._refreshTokens());
    }
    handleStateChange(e10) {
      this._lineRanges = e10.visibleLineRanges, e10.stabilized ? (this.runner.cancel(), this.update()) : this.runner.schedule();
    }
  }, TV = class extends j {
    get backgroundTokenizationState() {
      return this._backgroundTokenizationState;
    }
    constructor(e10, t10, n10) {
      super(), this._languageIdCodec = e10, this._textModel = t10, this.getLanguageId = n10, this._backgroundTokenizationState = 1, this._onDidChangeBackgroundTokenizationState = this._register(new N()), this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event, this._onDidChangeTokens = this._register(new N()), this.onDidChangeTokens = this._onDidChangeTokens.event;
    }
    tokenizeIfCheap(e10) {
      this.isCheapToTokenize(e10) && this.forceTokenization(e10);
    }
  }, EV = class extends TV {
    constructor(e10, t10, n10, r10) {
      super(t10, n10, r10), this._treeSitterService = e10, this._tokenizationSupport = null, this._initialize();
    }
    _initialize() {
      let e10 = this.getLanguageId();
      (!this._tokenizationSupport || this._lastLanguageId !== e10) && (this._lastLanguageId = e10, this._tokenizationSupport = oo.get(e10));
    }
    getLineTokens(e10) {
      let t10 = this._textModel.getLineContent(e10);
      if (this._tokenizationSupport) {
        let n10 = this._tokenizationSupport.tokenizeEncoded(e10, this._textModel);
        if (n10) return new CA(n10, t10, this._languageIdCodec);
      }
      return CA.createEmpty(t10, this._languageIdCodec);
    }
    resetTokenization(e10 = true) {
      e10 && this._onDidChangeTokens.fire({
        semanticTokensApplied: false,
        ranges: [
          {
            fromLineNumber: 1,
            toLineNumber: this._textModel.getLineCount()
          }
        ]
      }), this._initialize();
    }
    handleDidChangeAttached() {
    }
    handleDidChangeContent(e10) {
      e10.isFlush && this.resetTokenization(false);
    }
    forceTokenization(e10) {
    }
    hasAccurateTokensForLine(e10) {
      return true;
    }
    isCheapToTokenize(e10) {
      return true;
    }
    getTokenTypeIfInsertingCharacter(e10, t10, n10) {
      return 0;
    }
    tokenizeLineWithEdit(e10, t10, n10) {
      return null;
    }
    get hasTokens() {
      let e10 = this._treeSitterService.getParseResult(this._textModel) !== void 0;
      return e10;
    }
  };
  const DV = Xf(`treeSitterParserService`), OV = new Uint32Array().buffer;
  var kV = class e10 {
    static deleteBeginning(t10, n10) {
      return t10 === null || t10 === OV ? t10 : e10.delete(t10, 0, n10);
    }
    static deleteEnding(t10, n10) {
      if (t10 === null || t10 === OV) return t10;
      let r10 = AV(t10), i10 = r10[r10.length - 2];
      return e10.delete(t10, n10, i10);
    }
    static delete(e11, t10, n10) {
      if (e11 === null || e11 === OV || t10 === n10) return e11;
      let r10 = AV(e11), i10 = r10.length >>> 1;
      if (t10 === 0 && r10[r10.length - 2] === n10) return OV;
      let a10 = CA.findIndexInTokensArray(r10, t10), o10 = a10 > 0 ? r10[a10 - 1 << 1] : 0, s10 = r10[a10 << 1];
      if (n10 < s10) {
        let o11 = n10 - t10;
        for (let e12 = a10; e12 < i10; e12++) r10[e12 << 1] -= o11;
        return e11;
      }
      let c10, l10;
      o10 === t10 ? (c10 = a10 << 1, l10 = o10) : (r10[a10 << 1] = t10, c10 = a10 + 1 << 1, l10 = t10);
      let u10 = n10 - t10;
      for (let e12 = a10 + 1; e12 < i10; e12++) {
        let t11 = r10[e12 << 1] - u10;
        t11 > l10 && (r10[c10++] = t11, r10[c10++] = r10[(e12 << 1) + 1], l10 = t11);
      }
      if (c10 === r10.length) return e11;
      let d10 = new Uint32Array(c10);
      return d10.set(r10.subarray(0, c10), 0), d10.buffer;
    }
    static append(e11, t10) {
      if (t10 === OV) return e11;
      if (e11 === OV) return t10;
      if (e11 === null) return e11;
      if (t10 === null) return null;
      let n10 = AV(e11), r10 = AV(t10), i10 = r10.length >>> 1, a10 = new Uint32Array(n10.length + r10.length);
      a10.set(n10, 0);
      let o10 = n10.length, s10 = n10[n10.length - 2];
      for (let e12 = 0; e12 < i10; e12++) a10[o10++] = r10[e12 << 1] + s10, a10[o10++] = r10[(e12 << 1) + 1];
      return a10.buffer;
    }
    static insert(e11, t10, n10) {
      if (e11 === null || e11 === OV) return e11;
      let r10 = AV(e11), i10 = r10.length >>> 1, a10 = CA.findIndexInTokensArray(r10, t10);
      if (a10 > 0) {
        let e12 = r10[a10 - 1 << 1];
        e12 === t10 && a10--;
      }
      for (let e12 = a10; e12 < i10; e12++) r10[e12 << 1] += n10;
      return e11;
    }
  };
  function AV(e10) {
    return e10 instanceof Uint32Array ? e10 : new Uint32Array(e10);
  }
  var jV = class e10 {
    constructor(e11) {
      this._lineTokens = [], this._len = 0, this._languageIdCodec = e11;
    }
    flush() {
      this._lineTokens = [], this._len = 0;
    }
    get hasTokens() {
      return this._lineTokens.length > 0;
    }
    getTokens(e11, t10, n10) {
      let r10 = null;
      if (t10 < this._len && (r10 = this._lineTokens[t10]), r10 !== null && r10 !== OV) return new CA(AV(r10), n10, this._languageIdCodec);
      let i10 = new Uint32Array(2);
      return i10[0] = n10.length, i10[1] = MV(this._languageIdCodec.encodeLanguageId(e11)), new CA(i10, n10, this._languageIdCodec);
    }
    static _massageTokens(e11, t10, n10) {
      let r10 = n10 ? AV(n10) : null;
      if (t10 === 0) {
        let t11 = false;
        if (r10 && r10.length > 1 && (t11 = Vx.getLanguageId(r10[1]) !== e11), !t11) return OV;
      }
      if (!r10 || r10.length === 0) {
        let n11 = new Uint32Array(2);
        return n11[0] = t10, n11[1] = MV(e11), n11.buffer;
      }
      return r10[r10.length - 2] = t10, r10.byteOffset === 0 && r10.byteLength === r10.buffer.byteLength ? r10.buffer : r10;
    }
    _ensureLine(e11) {
      for (; e11 >= this._len; ) this._lineTokens[this._len] = null, this._len++;
    }
    _deleteLines(e11, t10) {
      t10 !== 0 && (e11 + t10 > this._len && (t10 = this._len - e11), this._lineTokens.splice(e11, t10), this._len -= t10);
    }
    _insertLines(e11, t10) {
      if (t10 === 0) return;
      let n10 = [];
      for (let e12 = 0; e12 < t10; e12++) n10[e12] = null;
      this._lineTokens = ee(this._lineTokens, e11, n10), this._len += t10;
    }
    setTokens(t10, n10, r10, i10, a10) {
      let o10 = e10._massageTokens(this._languageIdCodec.encodeLanguageId(t10), r10, i10);
      this._ensureLine(n10);
      let s10 = this._lineTokens[n10];
      return this._lineTokens[n10] = o10, a10 ? !e10._equals(s10, o10) : false;
    }
    static _equals(e11, t10) {
      if (!e11 || !t10) return !e11 && !t10;
      let n10 = AV(e11), r10 = AV(t10);
      if (n10.length !== r10.length) return false;
      for (let e12 = 0, t11 = n10.length; e12 < t11; e12++) if (n10[e12] !== r10[e12]) return false;
      return true;
    }
    acceptEdit(e11, t10, n10) {
      this._acceptDeleteRange(e11), this._acceptInsertText(new P(e11.startLineNumber, e11.startColumn), t10, n10);
    }
    _acceptDeleteRange(e11) {
      let t10 = e11.startLineNumber - 1;
      if (t10 >= this._len) return;
      if (e11.startLineNumber === e11.endLineNumber) {
        if (e11.startColumn === e11.endColumn) return;
        this._lineTokens[t10] = kV.delete(this._lineTokens[t10], e11.startColumn - 1, e11.endColumn - 1);
        return;
      }
      this._lineTokens[t10] = kV.deleteEnding(this._lineTokens[t10], e11.startColumn - 1);
      let n10 = e11.endLineNumber - 1, r10 = null;
      n10 < this._len && (r10 = kV.deleteBeginning(this._lineTokens[n10], e11.endColumn - 1)), this._lineTokens[t10] = kV.append(this._lineTokens[t10], r10), this._deleteLines(e11.startLineNumber, e11.endLineNumber - e11.startLineNumber);
    }
    _acceptInsertText(e11, t10, n10) {
      if (t10 === 0 && n10 === 0) return;
      let r10 = e11.lineNumber - 1;
      if (!(r10 >= this._len)) {
        if (t10 === 0) {
          this._lineTokens[r10] = kV.insert(this._lineTokens[r10], e11.column - 1, n10);
          return;
        }
        this._lineTokens[r10] = kV.deleteEnding(this._lineTokens[r10], e11.column - 1), this._lineTokens[r10] = kV.insert(this._lineTokens[r10], e11.column - 1, n10), this._insertLines(e11.lineNumber, t10);
      }
    }
    setMultilineTokens(e11, t10) {
      if (e11.length === 0) return {
        changes: []
      };
      let n10 = [];
      for (let r10 = 0, i10 = e11.length; r10 < i10; r10++) {
        let i11 = e11[r10], a10 = 0, o10 = 0, s10 = false;
        for (let e12 = i11.startLineNumber; e12 <= i11.endLineNumber; e12++) if (s10) this.setTokens(t10.getLanguageId(), e12 - 1, t10.getLineLength(e12), i11.getLineTokens(e12), false), o10 = e12;
        else {
          let n11 = this.setTokens(t10.getLanguageId(), e12 - 1, t10.getLineLength(e12), i11.getLineTokens(e12), true);
          n11 && (s10 = true, a10 = e12, o10 = e12);
        }
        s10 && n10.push({
          fromLineNumber: a10,
          toLineNumber: o10
        });
      }
      return {
        changes: n10
      };
    }
  };
  function MV(e10) {
    return (e10 << 0 | 33588224) >>> 0;
  }
  var NV = class e10 {
    constructor(e11) {
      this._pieces = [], this._isComplete = false, this._languageIdCodec = e11;
    }
    flush() {
      this._pieces = [], this._isComplete = false;
    }
    isEmpty() {
      return this._pieces.length === 0;
    }
    set(e11, t10) {
      this._pieces = e11 || [], this._isComplete = t10;
    }
    setPartial(e11, t10) {
      let n10 = e11;
      if (t10.length > 0) {
        let r11 = t10[0].getRange(), i10 = t10[t10.length - 1].getRange();
        if (!r11 || !i10) return e11;
        n10 = e11.plusRange(r11).plusRange(i10);
      }
      let r10 = null;
      for (let e12 = 0, t11 = this._pieces.length; e12 < t11; e12++) {
        let i10 = this._pieces[e12];
        if (i10.endLineNumber < n10.startLineNumber) continue;
        if (i10.startLineNumber > n10.endLineNumber) {
          r10 || (r10 = {
            index: e12
          });
          break;
        }
        if (i10.removeTokens(n10), i10.isEmpty()) {
          this._pieces.splice(e12, 1), e12--, t11--;
          continue;
        }
        if (i10.endLineNumber < n10.startLineNumber) continue;
        if (i10.startLineNumber > n10.endLineNumber) {
          r10 || (r10 = {
            index: e12
          });
          continue;
        }
        let [a10, o10] = i10.split(n10);
        if (a10.isEmpty()) {
          r10 || (r10 = {
            index: e12
          });
          continue;
        }
        o10.isEmpty() || (this._pieces.splice(e12, 1, a10, o10), e12++, t11++, r10 || (r10 = {
          index: e12
        }));
      }
      return r10 || (r10 = {
        index: this._pieces.length
      }), t10.length > 0 && (this._pieces = ee(this._pieces, r10.index, t10)), n10;
    }
    isComplete() {
      return this._isComplete;
    }
    addSparseTokens(t10, n10) {
      if (n10.getLineContent().length === 0) return n10;
      let r10 = this._pieces;
      if (r10.length === 0) return n10;
      let i10 = e10._findFirstPieceWithLine(r10, t10), a10 = r10[i10].getLineTokens(t10);
      if (!a10) return n10;
      let o10 = n10.getCount(), s10 = a10.getCount(), c10 = 0, l10 = [], u10 = 0, d10 = 0, f10 = (e11, t11) => {
        e11 !== d10 && (d10 = e11, l10[u10++] = e11, l10[u10++] = t11);
      };
      for (let e11 = 0; e11 < s10; e11++) {
        let t11 = a10.getStartCharacter(e11), r11 = a10.getEndCharacter(e11), i11 = a10.getMetadata(e11), s11 = ((i11 & 1 ? 2048 : 0) | (i11 & 2 ? 4096 : 0) | (i11 & 4 ? 8192 : 0) | (i11 & 8 ? 16384 : 0) | (i11 & 16 ? 16744448 : 0) | (i11 & 32 ? 4278190080 : 0)) >>> 0, l11 = ~s11 >>> 0;
        for (; c10 < o10 && n10.getEndOffset(c10) <= t11; ) f10(n10.getEndOffset(c10), n10.getMetadata(c10)), c10++;
        for (c10 < o10 && n10.getStartOffset(c10) < t11 && f10(t11, n10.getMetadata(c10)); c10 < o10 && n10.getEndOffset(c10) < r11; ) f10(n10.getEndOffset(c10), n10.getMetadata(c10) & l11 | i11 & s11), c10++;
        if (c10 < o10) f10(r11, n10.getMetadata(c10) & l11 | i11 & s11), n10.getEndOffset(c10) === r11 && c10++;
        else {
          let e12 = Math.min(Math.max(0, c10 - 1), o10 - 1);
          f10(r11, n10.getMetadata(e12) & l11 | i11 & s11);
        }
      }
      for (; c10 < o10; ) f10(n10.getEndOffset(c10), n10.getMetadata(c10)), c10++;
      return new CA(new Uint32Array(l10), n10.getLineContent(), this._languageIdCodec);
    }
    static _findFirstPieceWithLine(e11, t10) {
      let n10 = 0, r10 = e11.length - 1;
      for (; n10 < r10; ) {
        let i10 = n10 + Math.floor((r10 - n10) / 2);
        if (e11[i10].endLineNumber < t10) n10 = i10 + 1;
        else if (e11[i10].startLineNumber > t10) r10 = i10 - 1;
        else {
          for (; i10 > n10 && e11[i10 - 1].startLineNumber <= t10 && t10 <= e11[i10 - 1].endLineNumber; ) i10--;
          return i10;
        }
      }
      return n10;
    }
    acceptEdit(e11, t10, n10, r10, i10) {
      for (let a10 of this._pieces) a10.acceptEdit(e11, t10, n10, r10, i10);
    }
  }, PV = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, FV = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, IV;
  let LV = IV = class extends Xz {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(), this._textModel = e10, this._bracketPairsTextModelPart = t10, this._languageId = n10, this._attachedViews = r10, this._languageService = i10, this._languageConfigurationService = a10, this._treeSitterService = o10, this._semanticTokens = new NV(this._languageService.languageIdCodec), this._onDidChangeLanguage = this._register(new N()), this.onDidChangeLanguage = this._onDidChangeLanguage.event, this._onDidChangeLanguageConfiguration = this._register(new N()), this.onDidChangeLanguageConfiguration = this._onDidChangeLanguageConfiguration.event, this._onDidChangeTokens = this._register(new N()), this.onDidChangeTokens = this._onDidChangeTokens.event, this._tokensDisposables = this._register(new A()), this._register(this._languageConfigurationService.onDidChange((e11) => {
        e11.affects(this._languageId) && this._onDidChangeLanguageConfiguration.fire({});
      })), this._register(M.filter(oo.onDidChange, (e11) => e11.changedLanguages.includes(this._languageId))(() => {
        this.createPreferredTokenProvider();
      })), this.createPreferredTokenProvider();
    }
    createGrammarTokens() {
      return this._register(new RV(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));
    }
    createTreeSitterTokens() {
      return this._register(new EV(this._treeSitterService, this._languageService.languageIdCodec, this._textModel, () => this._languageId));
    }
    createTokens(e10) {
      var _a3;
      let t10 = this._tokens !== void 0;
      (_a3 = this._tokens) == null ? void 0 : _a3.dispose(), this._tokens = e10 ? this.createTreeSitterTokens() : this.createGrammarTokens(), this._tokensDisposables.clear(), this._tokensDisposables.add(this._tokens.onDidChangeTokens((e11) => {
        this._emitModelTokensChangedEvent(e11);
      })), this._tokensDisposables.add(this._tokens.onDidChangeBackgroundTokenizationState((e11) => {
        this._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();
      })), t10 && this._tokens.resetTokenization();
    }
    createPreferredTokenProvider() {
      oo.get(this._languageId) ? this._tokens instanceof EV || this.createTokens(true) : this._tokens instanceof RV || this.createTokens(false);
    }
    handleLanguageConfigurationServiceChange(e10) {
      e10.affects(this._languageId) && this._onDidChangeLanguageConfiguration.fire({});
    }
    handleDidChangeContent(e10) {
      if (e10.isFlush) this._semanticTokens.flush();
      else if (!e10.isEolChange) for (let t10 of e10.changes) {
        let [e11, n10, r10] = Hx(t10.text);
        this._semanticTokens.acceptEdit(t10.range, e11, n10, r10, t10.text.length > 0 ? t10.text.charCodeAt(0) : 0);
      }
      this._tokens.handleDidChangeContent(e10);
    }
    handleDidChangeAttached() {
      this._tokens.handleDidChangeAttached();
    }
    getLineTokens(e10) {
      this.validateLineNumber(e10);
      let t10 = this._tokens.getLineTokens(e10);
      return this._semanticTokens.addSparseTokens(e10, t10);
    }
    _emitModelTokensChangedEvent(e10) {
      this._textModel._isDisposing() || (this._bracketPairsTextModelPart.handleDidChangeTokens(e10), this._onDidChangeTokens.fire(e10));
    }
    validateLineNumber(e10) {
      if (e10 < 1 || e10 > this._textModel.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
    }
    get hasTokens() {
      return this._tokens.hasTokens;
    }
    resetTokenization() {
      this._tokens.resetTokenization();
    }
    get backgroundTokenizationState() {
      return this._tokens.backgroundTokenizationState;
    }
    forceTokenization(e10) {
      this.validateLineNumber(e10), this._tokens.forceTokenization(e10);
    }
    hasAccurateTokensForLine(e10) {
      return this.validateLineNumber(e10), this._tokens.hasAccurateTokensForLine(e10);
    }
    isCheapToTokenize(e10) {
      return this.validateLineNumber(e10), this._tokens.isCheapToTokenize(e10);
    }
    tokenizeIfCheap(e10) {
      this.validateLineNumber(e10), this._tokens.tokenizeIfCheap(e10);
    }
    getTokenTypeIfInsertingCharacter(e10, t10, n10) {
      return this._tokens.getTokenTypeIfInsertingCharacter(e10, t10, n10);
    }
    tokenizeLineWithEdit(e10, t10, n10) {
      return this._tokens.tokenizeLineWithEdit(e10, t10, n10);
    }
    setSemanticTokens(e10, t10) {
      this._semanticTokens.set(e10, t10), this._emitModelTokensChangedEvent({
        semanticTokensApplied: e10 !== null,
        ranges: [
          {
            fromLineNumber: 1,
            toLineNumber: this._textModel.getLineCount()
          }
        ]
      });
    }
    hasCompleteSemanticTokens() {
      return this._semanticTokens.isComplete();
    }
    hasSomeSemanticTokens() {
      return !this._semanticTokens.isEmpty();
    }
    setPartialSemanticTokens(e10, t10) {
      if (this.hasCompleteSemanticTokens()) return;
      let n10 = this._textModel.validateRange(this._semanticTokens.setPartial(e10, t10));
      this._emitModelTokensChangedEvent({
        semanticTokensApplied: true,
        ranges: [
          {
            fromLineNumber: n10.startLineNumber,
            toLineNumber: n10.endLineNumber
          }
        ]
      });
    }
    getWordAtPosition(e10) {
      this.assertNotDisposed();
      let t10 = this._textModel.validatePosition(e10), n10 = this._textModel.getLineContent(t10.lineNumber), r10 = this.getLineTokens(t10.lineNumber), i10 = r10.findTokenIndexAtOffset(t10.column - 1), [a10, o10] = IV._findLanguageBoundaries(r10, i10), s10 = Wt(t10.column, this.getLanguageConfiguration(r10.getLanguageId(i10)).getWordDefinition(), n10.substring(a10, o10), a10);
      if (s10 && s10.startColumn <= e10.column && e10.column <= s10.endColumn) return s10;
      if (i10 > 0 && a10 === t10.column - 1) {
        let [a11, o11] = IV._findLanguageBoundaries(r10, i10 - 1), s11 = Wt(t10.column, this.getLanguageConfiguration(r10.getLanguageId(i10 - 1)).getWordDefinition(), n10.substring(a11, o11), a11);
        if (s11 && s11.startColumn <= e10.column && e10.column <= s11.endColumn) return s11;
      }
      return null;
    }
    getLanguageConfiguration(e10) {
      return this._languageConfigurationService.getLanguageConfiguration(e10);
    }
    static _findLanguageBoundaries(e10, t10) {
      let n10 = e10.getLanguageId(t10), r10 = 0;
      for (let i11 = t10; i11 >= 0 && e10.getLanguageId(i11) === n10; i11--) r10 = e10.getStartOffset(i11);
      let i10 = e10.getLineContent().length;
      for (let r11 = t10, a10 = e10.getCount(); r11 < a10 && e10.getLanguageId(r11) === n10; r11++) i10 = e10.getEndOffset(r11);
      return [
        r10,
        i10
      ];
    }
    getWordUntilPosition(e10) {
      let t10 = this.getWordAtPosition(e10);
      return t10 ? {
        word: t10.word.substr(0, e10.column - t10.startColumn),
        startColumn: t10.startColumn,
        endColumn: e10.column
      } : {
        word: ``,
        startColumn: e10.column,
        endColumn: e10.column
      };
    }
    getLanguageId() {
      return this._languageId;
    }
    getLanguageIdAtPosition(e10, t10) {
      let n10 = this._textModel.validatePosition(new P(e10, t10)), r10 = this.getLineTokens(n10.lineNumber);
      return r10.getLanguageId(r10.findTokenIndexAtOffset(n10.column - 1));
    }
    setLanguageId(e10, t10 = `api`) {
      if (this._languageId === e10) return;
      let n10 = {
        oldLanguage: this._languageId,
        newLanguage: e10,
        source: t10
      };
      this._languageId = e10, this._bracketPairsTextModelPart.handleDidChangeLanguage(n10), this._tokens.resetTokenization(), this.createPreferredTokenProvider(), this._onDidChangeLanguage.fire(n10), this._onDidChangeLanguageConfiguration.fire({});
    }
  };
  LV = IV = PV([
    FV(4, _g),
    FV(5, i_),
    FV(6, DV)
  ], LV);
  var RV = class extends TV {
    constructor(e10, t10, n10, r10) {
      super(e10, t10, n10), this._tokenizer = null, this._defaultBackgroundTokenizer = null, this._backgroundTokenizer = this._register(new Br()), this._tokens = new jV(this._languageIdCodec), this._debugBackgroundTokenizer = this._register(new Br()), this._attachedViewStates = this._register(new Ur()), this._register(ao.onDidChange((e11) => {
        let t11 = this.getLanguageId();
        e11.changedLanguages.indexOf(t11) !== -1 && this.resetTokenization();
      })), this.resetTokenization(), this._register(r10.onDidChangeVisibleRanges(({ view: e11, state: t11 }) => {
        if (t11) {
          let n11 = this._attachedViewStates.get(e11);
          n11 || (n11 = new wV(() => this.refreshRanges(n11.lineRanges)), this._attachedViewStates.set(e11, n11)), n11.handleStateChange(t11);
        } else this._attachedViewStates.deleteAndDispose(e11);
      }));
    }
    resetTokenization(e10 = true) {
      var _a3;
      this._tokens.flush(), (_a3 = this._debugBackgroundTokens) == null ? void 0 : _a3.flush(), this._debugBackgroundStates && (this._debugBackgroundStates = new _V(this._textModel.getLineCount())), e10 && this._onDidChangeTokens.fire({
        semanticTokensApplied: false,
        ranges: [
          {
            fromLineNumber: 1,
            toLineNumber: this._textModel.getLineCount()
          }
        ]
      });
      let t10 = () => {
        if (this._textModel.isTooLargeForTokenization()) return [
          null,
          null
        ];
        let e11 = ao.get(this.getLanguageId());
        if (!e11) return [
          null,
          null
        ];
        let t11;
        try {
          t11 = e11.getInitialState();
        } catch (e12) {
          return gr(e12), [
            null,
            null
          ];
        }
        return [
          e11,
          t11
        ];
      }, [n10, r10] = t10();
      if (n10 && r10 ? this._tokenizer = new gV(this._textModel.getLineCount(), n10, this._textModel, this._languageIdCodec) : this._tokenizer = null, this._backgroundTokenizer.clear(), this._defaultBackgroundTokenizer = null, this._tokenizer) {
        let e11 = {
          setTokens: (e12) => {
            this.setTokens(e12);
          },
          backgroundTokenizationFinished: () => {
            if (this._backgroundTokenizationState === 2) return;
            let e12 = 2;
            this._backgroundTokenizationState = e12, this._onDidChangeBackgroundTokenizationState.fire();
          },
          setEndState: (e12, t11) => {
            var _a4;
            if (!this._tokenizer) return;
            let n11 = this._tokenizer.store.getFirstInvalidEndStateLineNumber();
            n11 !== null && e12 >= n11 && ((_a4 = this._tokenizer) == null ? void 0 : _a4.store.setEndState(e12, t11));
          }
        };
        n10 && n10.createBackgroundTokenizer && !n10.backgroundTokenizerShouldOnlyVerifyTokens && (this._backgroundTokenizer.value = n10.createBackgroundTokenizer(this._textModel, e11)), !this._backgroundTokenizer.value && !this._textModel.isTooLargeForTokenization() && (this._backgroundTokenizer.value = this._defaultBackgroundTokenizer = new xV(this._tokenizer, e11), this._defaultBackgroundTokenizer.handleChanges()), (n10 == null ? void 0 : n10.backgroundTokenizerShouldOnlyVerifyTokens) && n10.createBackgroundTokenizer ? (this._debugBackgroundTokens = new jV(this._languageIdCodec), this._debugBackgroundStates = new _V(this._textModel.getLineCount()), this._debugBackgroundTokenizer.clear(), this._debugBackgroundTokenizer.value = n10.createBackgroundTokenizer(this._textModel, {
          setTokens: (e12) => {
            var _a4;
            (_a4 = this._debugBackgroundTokens) == null ? void 0 : _a4.setMultilineTokens(e12, this._textModel);
          },
          backgroundTokenizationFinished() {
          },
          setEndState: (e12, t11) => {
            var _a4;
            (_a4 = this._debugBackgroundStates) == null ? void 0 : _a4.setEndState(e12, t11);
          }
        })) : (this._debugBackgroundTokens = void 0, this._debugBackgroundStates = void 0, this._debugBackgroundTokenizer.value = void 0);
      }
      this.refreshAllVisibleLineTokens();
    }
    handleDidChangeAttached() {
      var _a3;
      (_a3 = this._defaultBackgroundTokenizer) == null ? void 0 : _a3.handleChanges();
    }
    handleDidChangeContent(e10) {
      var _a3, _b3, _c3;
      if (e10.isFlush) this.resetTokenization(false);
      else if (!e10.isEolChange) {
        for (let t10 of e10.changes) {
          let [e11, n10] = Hx(t10.text);
          this._tokens.acceptEdit(t10.range, e11, n10), (_a3 = this._debugBackgroundTokens) == null ? void 0 : _a3.acceptEdit(t10.range, e11, n10);
        }
        (_b3 = this._debugBackgroundStates) == null ? void 0 : _b3.acceptChanges(e10.changes), this._tokenizer && this._tokenizer.store.acceptChanges(e10.changes), (_c3 = this._defaultBackgroundTokenizer) == null ? void 0 : _c3.handleChanges();
      }
    }
    setTokens(e10) {
      let { changes: t10 } = this._tokens.setMultilineTokens(e10, this._textModel);
      return t10.length > 0 && this._onDidChangeTokens.fire({
        semanticTokensApplied: false,
        ranges: t10
      }), {
        changes: t10
      };
    }
    refreshAllVisibleLineTokens() {
      let e10 = G.joinMany([
        ...this._attachedViewStates
      ].map(([e11, t10]) => t10.lineRanges));
      this.refreshRanges(e10);
    }
    refreshRanges(e10) {
      for (let t10 of e10) this.refreshRange(t10.startLineNumber, t10.endLineNumberExclusive - 1);
    }
    refreshRange(e10, t10) {
      var _a3, _b3;
      if (!this._tokenizer) return;
      e10 = Math.max(1, Math.min(this._textModel.getLineCount(), e10)), t10 = Math.min(this._textModel.getLineCount(), t10);
      let n10 = new mV(), { heuristicTokens: r10 } = this._tokenizer.tokenizeHeuristically(n10, e10, t10), i10 = this.setTokens(n10.finalize());
      if (r10) for (let e11 of i10.changes) (_a3 = this._backgroundTokenizer.value) == null ? void 0 : _a3.requestTokens(e11.fromLineNumber, e11.toLineNumber + 1);
      (_b3 = this._defaultBackgroundTokenizer) == null ? void 0 : _b3.checkFinished();
    }
    forceTokenization(e10) {
      var _a3, _b3;
      let t10 = new mV();
      (_a3 = this._tokenizer) == null ? void 0 : _a3.updateTokensUntilLine(t10, e10), this.setTokens(t10.finalize()), (_b3 = this._defaultBackgroundTokenizer) == null ? void 0 : _b3.checkFinished();
    }
    hasAccurateTokensForLine(e10) {
      return this._tokenizer ? this._tokenizer.hasAccurateTokensForLine(e10) : true;
    }
    isCheapToTokenize(e10) {
      return this._tokenizer ? this._tokenizer.isCheapToTokenize(e10) : true;
    }
    getLineTokens(e10) {
      var _a3;
      let t10 = this._textModel.getLineContent(e10), n10 = this._tokens.getTokens(this._textModel.getLanguageId(), e10 - 1, t10);
      if (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer && this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > e10 && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > e10) {
        let r10 = this._debugBackgroundTokens.getTokens(this._textModel.getLanguageId(), e10 - 1, t10);
        !n10.equals(r10) && ((_a3 = this._debugBackgroundTokenizer.value) == null ? void 0 : _a3.reportMismatchingTokens) && this._debugBackgroundTokenizer.value.reportMismatchingTokens(e10);
      }
      return n10;
    }
    getTokenTypeIfInsertingCharacter(e10, t10, n10) {
      if (!this._tokenizer) return 0;
      let r10 = this._textModel.validatePosition(new P(e10, t10));
      return this.forceTokenization(r10.lineNumber), this._tokenizer.getTokenTypeIfInsertingCharacter(r10, n10);
    }
    tokenizeLineWithEdit(e10, t10, n10) {
      if (!this._tokenizer) return null;
      let r10 = this._textModel.validatePosition(e10);
      return this.forceTokenization(r10.lineNumber), this._tokenizer.tokenizeLineWithEdit(r10, t10, n10);
    }
    get hasTokens() {
      return this._tokens.hasTokens;
    }
  }, zV = class {
    constructor() {
      this.changeType = 1;
    }
  }, BV = class e10 {
    static applyInjectedText(e11, t10) {
      if (!t10 || t10.length === 0) return e11;
      let n10 = ``, r10 = 0;
      for (let i10 of t10) n10 += e11.substring(r10, i10.column - 1), r10 = i10.column - 1, n10 += i10.options.content;
      return n10 += e11.substring(r10), n10;
    }
    static fromDecorations(t10) {
      let n10 = [];
      for (let r10 of t10) r10.options.before && r10.options.before.content.length > 0 && n10.push(new e10(r10.ownerId, r10.range.startLineNumber, r10.range.startColumn, r10.options.before, 0)), r10.options.after && r10.options.after.content.length > 0 && n10.push(new e10(r10.ownerId, r10.range.endLineNumber, r10.range.endColumn, r10.options.after, 1));
      return n10.sort((e11, t11) => e11.lineNumber === t11.lineNumber ? e11.column === t11.column ? e11.order - t11.order : e11.column - t11.column : e11.lineNumber - t11.lineNumber), n10;
    }
    constructor(e11, t10, n10, r10, i10) {
      this.ownerId = e11, this.lineNumber = t10, this.column = n10, this.options = r10, this.order = i10;
    }
  }, VV = class {
    constructor(e10, t10, n10) {
      this.changeType = 2, this.lineNumber = e10, this.detail = t10, this.injectedText = n10;
    }
  }, HV = class {
    constructor(e10, t10) {
      this.changeType = 3, this.fromLineNumber = e10, this.toLineNumber = t10;
    }
  }, UV = class {
    constructor(e10, t10, n10, r10) {
      this.changeType = 4, this.injectedTexts = r10, this.fromLineNumber = e10, this.toLineNumber = t10, this.detail = n10;
    }
  }, WV = class {
    constructor() {
      this.changeType = 5;
    }
  }, GV = class e10 {
    constructor(e11, t10, n10, r10) {
      this.changes = e11, this.versionId = t10, this.isUndoing = n10, this.isRedoing = r10, this.resultingSelection = null;
    }
    containsEvent(e11) {
      for (let t10 = 0, n10 = this.changes.length; t10 < n10; t10++) {
        let n11 = this.changes[t10];
        if (n11.changeType === e11) return true;
      }
      return false;
    }
    static merge(t10, n10) {
      let r10 = [].concat(t10.changes, n10.changes), i10 = n10.versionId, a10 = t10.isUndoing || n10.isUndoing, o10 = t10.isRedoing || n10.isRedoing;
      return new e10(r10, i10, a10, o10);
    }
  }, KV = class {
    constructor(e10) {
      this.changes = e10;
    }
  }, qV = class e10 {
    constructor(e11, t10) {
      this.rawContentChangedEvent = e11, this.contentChangedEvent = t10;
    }
    merge(t10) {
      let n10 = GV.merge(this.rawContentChangedEvent, t10.rawContentChangedEvent), r10 = e10._mergeChangeEvents(this.contentChangedEvent, t10.contentChangedEvent);
      return new e10(n10, r10);
    }
    static _mergeChangeEvents(e11, t10) {
      let n10 = [].concat(e11.changes, t10.changes), r10 = t10.eol, i10 = t10.versionId, a10 = e11.isUndoing || t10.isUndoing, o10 = e11.isRedoing || t10.isRedoing, s10 = e11.isFlush || t10.isFlush, c10 = e11.isEolChange && t10.isEolChange;
      return {
        changes: n10,
        eol: r10,
        isEolChange: c10,
        versionId: i10,
        isUndoing: a10,
        isRedoing: o10,
        isFlush: s10
      };
    }
  }, JV = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, YV = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, XV;
  function ZV(e10) {
    let t10 = new uV();
    return t10.acceptChunk(e10), t10.finish();
  }
  function QV(e10) {
    let t10 = new uV(), n10;
    for (; typeof (n10 = e10.read()) == `string`; ) t10.acceptChunk(n10);
    return t10.finish();
  }
  function $V(e10, t10) {
    let n10;
    return n10 = typeof e10 == `string` ? ZV(e10) : nv(e10) ? QV(e10) : e10, n10.create(t10);
  }
  let eH = 0;
  const tH = 999, nH = 1e4;
  var rH = class {
    constructor(e10) {
      this._source = e10, this._eos = false;
    }
    read() {
      if (this._eos) return null;
      let e10 = [], t10 = 0, n10 = 0;
      do {
        let r10 = this._source.read();
        if (r10 === null) return this._eos = true, t10 === 0 ? null : e10.join(``);
        if (r10.length > 0 && (e10[t10++] = r10, n10 += r10.length), n10 >= 64 * 1024) return e10.join(``);
      } while (true);
    }
  };
  const iH = () => {
    throw Error(`Invalid change accessor`);
  };
  aH = (_na = class extends j {
    static resolveOptions(e10, t10) {
      if (t10.detectIndentation) {
        let n10 = aB(e10, t10.tabSize, t10.insertSpaces);
        return new ev({
          tabSize: n10.tabSize,
          indentSize: `tabSize`,
          insertSpaces: n10.insertSpaces,
          trimAutoWhitespace: t10.trimAutoWhitespace,
          defaultEOL: t10.defaultEOL,
          bracketPairColorizationOptions: t10.bracketPairColorizationOptions
        });
      }
      return new ev(t10);
    }
    get onDidChangeLanguage() {
      return this._tokenizationTextModelPart.onDidChangeLanguage;
    }
    get onDidChangeLanguageConfiguration() {
      return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration;
    }
    get onDidChangeTokens() {
      return this._tokenizationTextModelPart.onDidChangeTokens;
    }
    onDidChangeContent(e10) {
      return this._eventEmitter.slowEvent((t10) => e10(t10.contentChangedEvent));
    }
    onDidChangeContentOrInjectedText(e10) {
      return zr(this._eventEmitter.fastEvent((t10) => e10(t10)), this._onDidChangeInjectedText.event((t10) => e10(t10)));
    }
    _isDisposing() {
      return this.__isDisposing;
    }
    get tokenization() {
      return this._tokenizationTextModelPart;
    }
    get bracketPairs() {
      return this._bracketPairs;
    }
    get guides() {
      return this._guidesTextModelPart;
    }
    constructor(e10, t10, n10, r10 = null, i10, a10, o10, s10) {
      super(), this._undoRedoService = i10, this._languageService = a10, this._languageConfigurationService = o10, this.instantiationService = s10, this._onWillDispose = this._register(new N()), this.onWillDispose = this._onWillDispose.event, this._onDidChangeDecorations = this._register(new bH((e11) => this.handleBeforeFireDecorationsChangedEvent(e11))), this.onDidChangeDecorations = this._onDidChangeDecorations.event, this._onDidChangeOptions = this._register(new N()), this.onDidChangeOptions = this._onDidChangeOptions.event, this._onDidChangeAttached = this._register(new N()), this.onDidChangeAttached = this._onDidChangeAttached.event, this._onDidChangeInjectedText = this._register(new N()), this._eventEmitter = this._register(new xH()), this._languageSelectionListener = this._register(new Br()), this._deltaDecorationCallCnt = 0, this._attachedViews = new SV(), eH++, this.id = `$model` + eH, this.isForSimpleWidget = n10.isForSimpleWidget, r10 == null ? this._associatedResource = xa.parse(`inmemory://model/` + eH) : this._associatedResource = r10, this._attachedEditorCount = 0;
      let { textBuffer: c10, disposable: l10 } = $V(e10, n10.defaultEOL);
      this._buffer = c10, this._bufferDisposable = l10, this._options = XV.resolveOptions(this._buffer, n10);
      let u10 = typeof t10 == `string` ? t10 : t10.languageId;
      typeof t10 != `string` && (this._languageSelectionListener.value = t10.onDidChange(() => this._setLanguage(t10.languageId))), this._bracketPairs = this._register(new Mz(this, this._languageConfigurationService)), this._guidesTextModelPart = this._register(new tB(this, this._languageConfigurationService)), this._decorationProvider = this._register(new Lz(this)), this._tokenizationTextModelPart = this.instantiationService.createInstance(LV, this, this._bracketPairs, u10, this._attachedViews);
      let d10 = this._buffer.getLineCount(), f10 = this._buffer.getValueLengthInRange(new F(1, 1, d10, this._buffer.getLineLength(d10) + 1), 0);
      n10.largeFileOptimizations ? (this._isTooLargeForTokenization = f10 > XV.LARGE_FILE_SIZE_THRESHOLD || d10 > XV.LARGE_FILE_LINE_COUNT_THRESHOLD, this._isTooLargeForHeapOperation = f10 > XV.LARGE_FILE_HEAP_OPERATION_THRESHOLD) : (this._isTooLargeForTokenization = false, this._isTooLargeForHeapOperation = false), this._isTooLargeForSyncing = f10 > XV._MODEL_SYNC_LIMIT, this._versionId = 1, this._alternativeVersionId = 1, this._initialUndoRedoSnapshot = null, this._isDisposed = false, this.__isDisposing = false, this._instanceId = cc(eH), this._lastDecorationId = 0, this._decorations = /* @__PURE__ */ Object.create(null), this._decorationsTree = new uH(), this._commandManager = new Yz(this, this._undoRedoService), this._isUndoing = false, this._isRedoing = false, this._trimAutoWhitespaceLines = null, this._register(this._decorationProvider.onDidChange(() => {
        this._onDidChangeDecorations.beginDeferredEmit(), this._onDidChangeDecorations.fire(), this._onDidChangeDecorations.endDeferredEmit();
      })), this._languageService.requestRichLanguageFeatures(u10), this._register(this._languageConfigurationService.onDidChange((e11) => {
        this._bracketPairs.handleLanguageConfigurationServiceChange(e11), this._tokenizationTextModelPart.handleLanguageConfigurationServiceChange(e11);
      }));
    }
    dispose() {
      this.__isDisposing = true, this._onWillDispose.fire(), this._tokenizationTextModelPart.dispose(), this._isDisposed = true, super.dispose(), this._bufferDisposable.dispose(), this.__isDisposing = false;
      let e10 = new cV([], ``, `
`, false, false, true, true);
      e10.dispose(), this._buffer = e10, this._bufferDisposable = j.None;
    }
    _assertNotDisposed() {
      if (this._isDisposed) throw new Dr(`Model is disposed!`);
    }
    _emitContentChangedEvent(e10, t10) {
      this.__isDisposing || (this._tokenizationTextModelPart.handleDidChangeContent(t10), this._bracketPairs.handleDidChangeContent(t10), this._eventEmitter.fire(new qV(e10, t10)));
    }
    setValue(e10) {
      if (this._assertNotDisposed(), e10 == null) throw Cr();
      let { textBuffer: t10, disposable: n10 } = $V(e10, this._options.defaultEOL);
      this._setValueFromTextBuffer(t10, n10);
    }
    _createContentChanged2(e10, t10, n10, r10, i10, a10, o10, s10) {
      return {
        changes: [
          {
            range: e10,
            rangeOffset: t10,
            rangeLength: n10,
            text: r10
          }
        ],
        eol: this._buffer.getEOL(),
        isEolChange: s10,
        versionId: this.getVersionId(),
        isUndoing: i10,
        isRedoing: a10,
        isFlush: o10
      };
    }
    _setValueFromTextBuffer(e10, t10) {
      this._assertNotDisposed();
      let n10 = this.getFullModelRange(), r10 = this.getValueLengthInRange(n10), i10 = this.getLineCount(), a10 = this.getLineMaxColumn(i10);
      this._buffer = e10, this._bufferDisposable.dispose(), this._bufferDisposable = t10, this._increaseVersionId(), this._decorations = /* @__PURE__ */ Object.create(null), this._decorationsTree = new uH(), this._commandManager.clear(), this._trimAutoWhitespaceLines = null, this._emitContentChangedEvent(new GV([
        new zV()
      ], this._versionId, false, false), this._createContentChanged2(new F(1, 1, i10, a10), 0, r10, this.getValue(), false, false, true, false));
    }
    setEOL(e10) {
      this._assertNotDisposed();
      let t10 = e10 === 1 ? `\r
` : `
`;
      if (this._buffer.getEOL() === t10) return;
      let n10 = this.getFullModelRange(), r10 = this.getValueLengthInRange(n10), i10 = this.getLineCount(), a10 = this.getLineMaxColumn(i10);
      this._onBeforeEOLChange(), this._buffer.setEOL(t10), this._increaseVersionId(), this._onAfterEOLChange(), this._emitContentChangedEvent(new GV([
        new WV()
      ], this._versionId, false, false), this._createContentChanged2(new F(1, 1, i10, a10), 0, r10, this.getValue(), false, false, false, true));
    }
    _onBeforeEOLChange() {
      this._decorationsTree.ensureAllNodesHaveRanges(this);
    }
    _onAfterEOLChange() {
      let e10 = this.getVersionId(), t10 = this._decorationsTree.collectNodesPostOrder();
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) {
        let r11 = t10[n10], i10 = r11.range, a10 = r11.cachedAbsoluteStart - r11.start, o10 = this._buffer.getOffsetAt(i10.startLineNumber, i10.startColumn), s10 = this._buffer.getOffsetAt(i10.endLineNumber, i10.endColumn);
        r11.cachedAbsoluteStart = o10, r11.cachedAbsoluteEnd = s10, r11.cachedVersionId = e10, r11.start = o10 - a10, r11.end = s10 - a10, LB(r11);
      }
    }
    onBeforeAttached() {
      return this._attachedEditorCount++, this._attachedEditorCount === 1 && (this._tokenizationTextModelPart.handleDidChangeAttached(), this._onDidChangeAttached.fire(void 0)), this._attachedViews.attachView();
    }
    onBeforeDetached(e10) {
      this._attachedEditorCount--, this._attachedEditorCount === 0 && (this._tokenizationTextModelPart.handleDidChangeAttached(), this._onDidChangeAttached.fire(void 0)), this._attachedViews.detachView(e10);
    }
    isAttachedToEditor() {
      return this._attachedEditorCount > 0;
    }
    getAttachedEditorCount() {
      return this._attachedEditorCount;
    }
    isTooLargeForSyncing() {
      return this._isTooLargeForSyncing;
    }
    isTooLargeForTokenization() {
      return this._isTooLargeForTokenization;
    }
    isTooLargeForHeapOperation() {
      return this._isTooLargeForHeapOperation;
    }
    isDisposed() {
      return this._isDisposed;
    }
    isDominatedByLongLines() {
      if (this._assertNotDisposed(), this.isTooLargeForTokenization()) return false;
      let e10 = 0, t10 = 0, n10 = this._buffer.getLineCount();
      for (let r10 = 1; r10 <= n10; r10++) {
        let n11 = this._buffer.getLineLength(r10);
        n11 >= nH ? t10 += n11 : e10 += n11;
      }
      return t10 > e10;
    }
    get uri() {
      return this._associatedResource;
    }
    getOptions() {
      return this._assertNotDisposed(), this._options;
    }
    getFormattingOptions() {
      return {
        tabSize: this._options.indentSize,
        insertSpaces: this._options.insertSpaces
      };
    }
    updateOptions(e10) {
      this._assertNotDisposed();
      let t10 = e10.tabSize === void 0 ? this._options.tabSize : e10.tabSize, n10 = e10.indentSize === void 0 ? this._options.originalIndentSize : e10.indentSize, r10 = e10.insertSpaces === void 0 ? this._options.insertSpaces : e10.insertSpaces, i10 = e10.trimAutoWhitespace === void 0 ? this._options.trimAutoWhitespace : e10.trimAutoWhitespace, a10 = e10.bracketColorizationOptions === void 0 ? this._options.bracketPairColorizationOptions : e10.bracketColorizationOptions, o10 = new ev({
        tabSize: t10,
        indentSize: n10,
        insertSpaces: r10,
        defaultEOL: this._options.defaultEOL,
        trimAutoWhitespace: i10,
        bracketPairColorizationOptions: a10
      });
      if (this._options.equals(o10)) return;
      let s10 = this._options.createChangeEvent(o10);
      this._options = o10, this._bracketPairs.handleDidChangeOptions(s10), this._decorationProvider.handleDidChangeOptions(s10), this._onDidChangeOptions.fire(s10);
    }
    detectIndentation(e10, t10) {
      this._assertNotDisposed();
      let n10 = aB(this._buffer, t10, e10);
      this.updateOptions({
        insertSpaces: n10.insertSpaces,
        tabSize: n10.tabSize,
        indentSize: n10.tabSize
      });
    }
    normalizeIndentation(e10) {
      return this._assertNotDisposed(), vR(e10, this._options.indentSize, this._options.insertSpaces);
    }
    getVersionId() {
      return this._assertNotDisposed(), this._versionId;
    }
    mightContainRTL() {
      return this._buffer.mightContainRTL();
    }
    mightContainUnusualLineTerminators() {
      return this._buffer.mightContainUnusualLineTerminators();
    }
    removeUnusualLineTerminators(e10 = null) {
      let t10 = this.findMatches(tc.source, false, true, false, null, false, 1073741824);
      this._buffer.resetMightContainUnusualLineTerminators(), this.pushEditOperations(e10, t10.map((e11) => ({
        range: e11.range,
        text: null
      })), () => null);
    }
    mightContainNonBasicASCII() {
      return this._buffer.mightContainNonBasicASCII();
    }
    getAlternativeVersionId() {
      return this._assertNotDisposed(), this._alternativeVersionId;
    }
    getInitialUndoRedoSnapshot() {
      return this._assertNotDisposed(), this._initialUndoRedoSnapshot;
    }
    getOffsetAt(e10) {
      this._assertNotDisposed();
      let t10 = this._validatePosition(e10.lineNumber, e10.column, 0);
      return this._buffer.getOffsetAt(t10.lineNumber, t10.column);
    }
    getPositionAt(e10) {
      this._assertNotDisposed();
      let t10 = Math.min(this._buffer.getLength(), Math.max(0, e10));
      return this._buffer.getPositionAt(t10);
    }
    _increaseVersionId() {
      this._versionId += 1, this._alternativeVersionId = this._versionId;
    }
    _overwriteVersionId(e10) {
      this._versionId = e10;
    }
    _overwriteAlternativeVersionId(e10) {
      this._alternativeVersionId = e10;
    }
    _overwriteInitialUndoRedoSnapshot(e10) {
      this._initialUndoRedoSnapshot = e10;
    }
    getValue(e10, t10 = false) {
      if (this._assertNotDisposed(), this.isTooLargeForHeapOperation()) throw new Dr(`Operation would exceed heap memory limits`);
      let n10 = this.getFullModelRange(), r10 = this.getValueInRange(n10, e10);
      return t10 ? this._buffer.getBOM() + r10 : r10;
    }
    createSnapshot(e10 = false) {
      return new rH(this._buffer.createSnapshot(e10));
    }
    getValueLength(e10, t10 = false) {
      this._assertNotDisposed();
      let n10 = this.getFullModelRange(), r10 = this.getValueLengthInRange(n10, e10);
      return t10 ? this._buffer.getBOM().length + r10 : r10;
    }
    getValueInRange(e10, t10 = 0) {
      return this._assertNotDisposed(), this._buffer.getValueInRange(this.validateRange(e10), t10);
    }
    getValueLengthInRange(e10, t10 = 0) {
      return this._assertNotDisposed(), this._buffer.getValueLengthInRange(this.validateRange(e10), t10);
    }
    getCharacterCountInRange(e10, t10 = 0) {
      return this._assertNotDisposed(), this._buffer.getCharacterCountInRange(this.validateRange(e10), t10);
    }
    getLineCount() {
      return this._assertNotDisposed(), this._buffer.getLineCount();
    }
    getLineContent(e10) {
      if (this._assertNotDisposed(), e10 < 1 || e10 > this.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
      return this._buffer.getLineContent(e10);
    }
    getLineLength(e10) {
      if (this._assertNotDisposed(), e10 < 1 || e10 > this.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
      return this._buffer.getLineLength(e10);
    }
    getLinesContent() {
      if (this._assertNotDisposed(), this.isTooLargeForHeapOperation()) throw new Dr(`Operation would exceed heap memory limits`);
      return this._buffer.getLinesContent();
    }
    getEOL() {
      return this._assertNotDisposed(), this._buffer.getEOL();
    }
    getEndOfLineSequence() {
      return this._assertNotDisposed(), this._buffer.getEOL() === `
` ? 0 : 1;
    }
    getLineMinColumn(e10) {
      return this._assertNotDisposed(), 1;
    }
    getLineMaxColumn(e10) {
      if (this._assertNotDisposed(), e10 < 1 || e10 > this.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
      return this._buffer.getLineLength(e10) + 1;
    }
    getLineFirstNonWhitespaceColumn(e10) {
      if (this._assertNotDisposed(), e10 < 1 || e10 > this.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
      return this._buffer.getLineFirstNonWhitespaceColumn(e10);
    }
    getLineLastNonWhitespaceColumn(e10) {
      if (this._assertNotDisposed(), e10 < 1 || e10 > this.getLineCount()) throw new Dr(`Illegal value for lineNumber`);
      return this._buffer.getLineLastNonWhitespaceColumn(e10);
    }
    _validateRangeRelaxedNoAllocations(e10) {
      let t10 = this._buffer.getLineCount(), n10 = e10.startLineNumber, r10 = e10.startColumn, i10 = Math.floor(typeof n10 == `number` && !isNaN(n10) ? n10 : 1), a10 = Math.floor(typeof r10 == `number` && !isNaN(r10) ? r10 : 1);
      if (i10 < 1) i10 = 1, a10 = 1;
      else if (i10 > t10) i10 = t10, a10 = this.getLineMaxColumn(i10);
      else if (a10 <= 1) a10 = 1;
      else {
        let e11 = this.getLineMaxColumn(i10);
        a10 >= e11 && (a10 = e11);
      }
      let o10 = e10.endLineNumber, s10 = e10.endColumn, c10 = Math.floor(typeof o10 == `number` && !isNaN(o10) ? o10 : 1), l10 = Math.floor(typeof s10 == `number` && !isNaN(s10) ? s10 : 1);
      if (c10 < 1) c10 = 1, l10 = 1;
      else if (c10 > t10) c10 = t10, l10 = this.getLineMaxColumn(c10);
      else if (l10 <= 1) l10 = 1;
      else {
        let e11 = this.getLineMaxColumn(c10);
        l10 >= e11 && (l10 = e11);
      }
      return n10 === i10 && r10 === a10 && o10 === c10 && s10 === l10 && e10 instanceof F && !(e10 instanceof Ma) ? e10 : new F(i10, a10, c10, l10);
    }
    _isValidPosition(e10, t10, n10) {
      if (typeof e10 != `number` || typeof t10 != `number` || isNaN(e10) || isNaN(t10) || e10 < 1 || t10 < 1 || (e10 | 0) !== e10 || (t10 | 0) !== t10) return false;
      let r10 = this._buffer.getLineCount();
      if (e10 > r10) return false;
      if (t10 === 1) return true;
      let i10 = this.getLineMaxColumn(e10);
      if (t10 > i10) return false;
      if (n10 === 1) {
        let n11 = this._buffer.getLineCharCode(e10, t10 - 2);
        if (Bs(n11)) return false;
      }
      return true;
    }
    _validatePosition(e10, t10, n10) {
      let r10 = Math.floor(typeof e10 == `number` && !isNaN(e10) ? e10 : 1), i10 = Math.floor(typeof t10 == `number` && !isNaN(t10) ? t10 : 1), a10 = this._buffer.getLineCount();
      if (r10 < 1) return new P(1, 1);
      if (r10 > a10) return new P(a10, this.getLineMaxColumn(a10));
      if (i10 <= 1) return new P(r10, 1);
      let o10 = this.getLineMaxColumn(r10);
      if (i10 >= o10) return new P(r10, o10);
      if (n10 === 1) {
        let e11 = this._buffer.getLineCharCode(r10, i10 - 2);
        if (Bs(e11)) return new P(r10, i10 - 1);
      }
      return new P(r10, i10);
    }
    validatePosition(e10) {
      let t10 = 1;
      return this._assertNotDisposed(), e10 instanceof P && this._isValidPosition(e10.lineNumber, e10.column, t10) ? e10 : this._validatePosition(e10.lineNumber, e10.column, t10);
    }
    _isValidRange(e10, t10) {
      let n10 = e10.startLineNumber, r10 = e10.startColumn, i10 = e10.endLineNumber, a10 = e10.endColumn;
      if (!this._isValidPosition(n10, r10, 0) || !this._isValidPosition(i10, a10, 0)) return false;
      if (t10 === 1) {
        let e11 = r10 > 1 ? this._buffer.getLineCharCode(n10, r10 - 2) : 0, t11 = a10 > 1 && a10 <= this._buffer.getLineLength(i10) ? this._buffer.getLineCharCode(i10, a10 - 2) : 0, o10 = Bs(e11), s10 = Bs(t11);
        return !o10 && !s10;
      }
      return true;
    }
    validateRange(e10) {
      let t10 = 1;
      if (this._assertNotDisposed(), e10 instanceof F && !(e10 instanceof Ma) && this._isValidRange(e10, t10)) return e10;
      let n10 = this._validatePosition(e10.startLineNumber, e10.startColumn, 0), r10 = this._validatePosition(e10.endLineNumber, e10.endColumn, 0), i10 = n10.lineNumber, a10 = n10.column, o10 = r10.lineNumber, s10 = r10.column;
      if (t10 === 1) {
        let e11 = a10 > 1 ? this._buffer.getLineCharCode(i10, a10 - 2) : 0, t11 = s10 > 1 && s10 <= this._buffer.getLineLength(o10) ? this._buffer.getLineCharCode(o10, s10 - 2) : 0, n11 = Bs(e11), r11 = Bs(t11);
        return !n11 && !r11 ? new F(i10, a10, o10, s10) : i10 === o10 && a10 === s10 ? new F(i10, a10 - 1, o10, s10 - 1) : n11 && r11 ? new F(i10, a10 - 1, o10, s10 + 1) : n11 ? new F(i10, a10 - 1, o10, s10) : new F(i10, a10, o10, s10 + 1);
      }
      return new F(i10, a10, o10, s10);
    }
    modifyPosition(e10, t10) {
      this._assertNotDisposed();
      let n10 = this.getOffsetAt(e10) + t10;
      return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, n10)));
    }
    getFullModelRange() {
      this._assertNotDisposed();
      let e10 = this.getLineCount();
      return new F(1, 1, e10, this.getLineMaxColumn(e10));
    }
    findMatchesLineByLine(e10, t10, n10, r10) {
      return this._buffer.findMatchesLineByLine(e10, t10, n10, r10);
    }
    findMatches(e10, t10, n10, r10, i10, a10, o10 = tH) {
      this._assertNotDisposed();
      let s10 = null;
      t10 !== null && (Array.isArray(t10) || (t10 = [
        t10
      ]), t10.every((e11) => F.isIRange(e11)) && (s10 = t10.map((e11) => this.validateRange(e11)))), s10 === null && (s10 = [
        this.getFullModelRange()
      ]), s10 = s10.sort((e11, t11) => e11.startLineNumber - t11.startLineNumber || e11.startColumn - t11.startColumn);
      let c10 = [];
      c10.push(s10.reduce((e11, t11) => F.areIntersecting(e11, t11) ? e11.plusRange(t11) : (c10.push(e11), t11)));
      let l10;
      if (!n10 && e10.indexOf(`
`) < 0) {
        let t11 = new cv(e10, n10, r10, i10), s11 = t11.parseSearchRequest();
        if (!s11) return [];
        l10 = (e11) => this.findMatchesLineByLine(e11, s11, a10, o10);
      } else l10 = (t11) => fv.findMatches(this, new cv(e10, n10, r10, i10), t11, a10, o10);
      return c10.map(l10).reduce((e11, t11) => e11.concat(t11), []);
    }
    findNextMatch(e10, t10, n10, r10, i10, a10) {
      this._assertNotDisposed();
      let o10 = this.validatePosition(t10);
      if (!n10 && e10.indexOf(`
`) < 0) {
        let t11 = new cv(e10, n10, r10, i10), s10 = t11.parseSearchRequest();
        if (!s10) return null;
        let c10 = this.getLineCount(), l10 = new F(o10.lineNumber, o10.column, c10, this.getLineMaxColumn(c10)), u10 = this.findMatchesLineByLine(l10, s10, a10, 1);
        return fv.findNextMatch(this, new cv(e10, n10, r10, i10), o10, a10), u10.length > 0 || (l10 = new F(1, 1, o10.lineNumber, this.getLineMaxColumn(o10.lineNumber)), u10 = this.findMatchesLineByLine(l10, s10, a10, 1), u10.length > 0) ? u10[0] : null;
      }
      return fv.findNextMatch(this, new cv(e10, n10, r10, i10), o10, a10);
    }
    findPreviousMatch(e10, t10, n10, r10, i10, a10) {
      this._assertNotDisposed();
      let o10 = this.validatePosition(t10);
      return fv.findPreviousMatch(this, new cv(e10, n10, r10, i10), o10, a10);
    }
    pushStackElement() {
      this._commandManager.pushStackElement();
    }
    popStackElement() {
      this._commandManager.popStackElement();
    }
    pushEOL(e10) {
      let t10 = this.getEOL() === `
` ? 0 : 1;
      if (t10 !== e10) try {
        this._onDidChangeDecorations.beginDeferredEmit(), this._eventEmitter.beginDeferredEmit(), this._initialUndoRedoSnapshot === null && (this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri)), this._commandManager.pushEOL(e10);
      } finally {
        this._eventEmitter.endDeferredEmit(), this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    _validateEditOperation(e10) {
      return e10 instanceof rv ? e10 : new rv(e10.identifier || null, this.validateRange(e10.range), e10.text, e10.forceMoveMarkers || false, e10.isAutoWhitespaceEdit || false, e10._isTracked || false);
    }
    _validateEditOperations(e10) {
      let t10 = [];
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) t10[n10] = this._validateEditOperation(e10[n10]);
      return t10;
    }
    pushEditOperations(e10, t10, n10, r10) {
      try {
        return this._onDidChangeDecorations.beginDeferredEmit(), this._eventEmitter.beginDeferredEmit(), this._pushEditOperations(e10, this._validateEditOperations(t10), n10, r10);
      } finally {
        this._eventEmitter.endDeferredEmit(), this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    _pushEditOperations(e10, t10, n10, r10) {
      if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {
        let n11 = t10.map((e11) => ({
          range: this.validateRange(e11.range),
          text: e11.text
        })), r11 = true;
        if (e10) for (let t11 = 0, i10 = e10.length; t11 < i10; t11++) {
          let i11 = e10[t11], a10 = false;
          for (let e11 = 0, t12 = n11.length; e11 < t12; e11++) {
            let t13 = n11[e11].range, r12 = t13.startLineNumber > i11.endLineNumber, o10 = i11.startLineNumber > t13.endLineNumber;
            if (!r12 && !o10) {
              a10 = true;
              break;
            }
          }
          if (!a10) {
            r11 = false;
            break;
          }
        }
        if (r11) for (let e11 = 0, r12 = this._trimAutoWhitespaceLines.length; e11 < r12; e11++) {
          let r13 = this._trimAutoWhitespaceLines[e11], i10 = this.getLineMaxColumn(r13), a10 = true;
          for (let e12 = 0, t11 = n11.length; e12 < t11; e12++) {
            let t12 = n11[e12].range, o10 = n11[e12].text;
            if (!(r13 < t12.startLineNumber || r13 > t12.endLineNumber) && !(r13 === t12.startLineNumber && t12.startColumn === i10 && t12.isEmpty() && o10 && o10.length > 0 && o10.charAt(0) === `
`) && !(r13 === t12.startLineNumber && t12.startColumn === 1 && t12.isEmpty() && o10 && o10.length > 0 && o10.charAt(o10.length - 1) === `
`)) {
              a10 = false;
              break;
            }
          }
          if (a10) {
            let e12 = new F(r13, 1, r13, i10);
            t10.push(new rv(null, e12, null, false, false, false));
          }
        }
        this._trimAutoWhitespaceLines = null;
      }
      return this._initialUndoRedoSnapshot === null && (this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri)), this._commandManager.pushEditOperation(e10, t10, n10, r10);
    }
    _applyUndo(e10, t10, n10, r10) {
      let i10 = e10.map((e11) => {
        let t11 = this.getPositionAt(e11.newPosition), n11 = this.getPositionAt(e11.newEnd);
        return {
          range: new F(t11.lineNumber, t11.column, n11.lineNumber, n11.column),
          text: e11.oldText
        };
      });
      this._applyUndoRedoEdits(i10, t10, true, false, n10, r10);
    }
    _applyRedo(e10, t10, n10, r10) {
      let i10 = e10.map((e11) => {
        let t11 = this.getPositionAt(e11.oldPosition), n11 = this.getPositionAt(e11.oldEnd);
        return {
          range: new F(t11.lineNumber, t11.column, n11.lineNumber, n11.column),
          text: e11.newText
        };
      });
      this._applyUndoRedoEdits(i10, t10, false, true, n10, r10);
    }
    _applyUndoRedoEdits(e10, t10, n10, r10, i10, a10) {
      try {
        this._onDidChangeDecorations.beginDeferredEmit(), this._eventEmitter.beginDeferredEmit(), this._isUndoing = n10, this._isRedoing = r10, this.applyEdits(e10, false), this.setEOL(t10), this._overwriteAlternativeVersionId(i10);
      } finally {
        this._isUndoing = false, this._isRedoing = false, this._eventEmitter.endDeferredEmit(a10), this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    applyEdits(e10, t10 = false) {
      try {
        this._onDidChangeDecorations.beginDeferredEmit(), this._eventEmitter.beginDeferredEmit();
        let n10 = this._validateEditOperations(e10);
        return this._doApplyEdits(n10, t10);
      } finally {
        this._eventEmitter.endDeferredEmit(), this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    _doApplyEdits(e10, t10) {
      let n10 = this._buffer.getLineCount(), r10 = this._buffer.applyEdits(e10, this._options.trimAutoWhitespace, t10), i10 = this._buffer.getLineCount(), a10 = r10.changes;
      if (this._trimAutoWhitespaceLines = r10.trimAutoWhitespaceLineNumbers, a10.length !== 0) {
        for (let e12 = 0, t12 = a10.length; e12 < t12; e12++) {
          let t13 = a10[e12];
          this._decorationsTree.acceptReplace(t13.rangeOffset, t13.rangeLength, t13.text.length, t13.forceMoveMarkers);
        }
        let e11 = [];
        this._increaseVersionId();
        let t11 = n10;
        for (let n11 = 0, r11 = a10.length; n11 < r11; n11++) {
          let r12 = a10[n11], [o10] = Hx(r12.text);
          this._onDidChangeDecorations.fire();
          let s10 = r12.range.startLineNumber, c10 = r12.range.endLineNumber, l10 = c10 - s10, u10 = o10, d10 = Math.min(l10, u10), f10 = u10 - l10, p10 = i10 - t11 - f10 + s10, m10 = p10, h10 = p10 + u10, g10 = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new P(m10, 1)), this.getOffsetAt(new P(h10, this.getLineMaxColumn(h10))), 0), _10 = BV.fromDecorations(g10), v10 = new me(_10);
          for (let t12 = d10; t12 >= 0; t12--) {
            let n12 = s10 + t12, r13 = p10 + t12;
            v10.takeFromEndWhile((e12) => e12.lineNumber > r13);
            let i11 = v10.takeFromEndWhile((e12) => e12.lineNumber === r13);
            e11.push(new VV(n12, this.getLineContent(r13), i11));
          }
          if (d10 < l10) {
            let t12 = s10 + d10;
            e11.push(new HV(t12 + 1, c10));
          }
          if (d10 < u10) {
            let n12 = new me(_10), r13 = s10 + d10, a11 = u10 - d10, o11 = i10 - t11 - a11 + r13 + 1, c11 = [], l11 = [];
            for (let e12 = 0; e12 < a11; e12++) {
              let t12 = o11 + e12;
              l11[e12] = this.getLineContent(t12), n12.takeWhile((e13) => e13.lineNumber < t12), c11[e12] = n12.takeWhile((e13) => e13.lineNumber === t12);
            }
            e11.push(new UV(r13 + 1, s10 + u10, l11, c11));
          }
          t11 += f10;
        }
        this._emitContentChangedEvent(new GV(e11, this.getVersionId(), this._isUndoing, this._isRedoing), {
          changes: a10,
          eol: this._buffer.getEOL(),
          isEolChange: false,
          versionId: this.getVersionId(),
          isUndoing: this._isUndoing,
          isRedoing: this._isRedoing,
          isFlush: false
        });
      }
      return r10.reverseEdits === null ? void 0 : r10.reverseEdits;
    }
    undo() {
      return this._undoRedoService.undo(this.uri);
    }
    canUndo() {
      return this._undoRedoService.canUndo(this.uri);
    }
    redo() {
      return this._undoRedoService.redo(this.uri);
    }
    canRedo() {
      return this._undoRedoService.canRedo(this.uri);
    }
    handleBeforeFireDecorationsChangedEvent(e10) {
      if (e10 === null || e10.size === 0) return;
      let t10 = Array.from(e10), n10 = t10.map((e11) => new VV(e11, this.getLineContent(e11), this._getInjectedTextInLine(e11)));
      this._onDidChangeInjectedText.fire(new KV(n10));
    }
    changeDecorations(e10, t10 = 0) {
      this._assertNotDisposed();
      try {
        return this._onDidChangeDecorations.beginDeferredEmit(), this._changeDecorations(t10, e10);
      } finally {
        this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    _changeDecorations(e10, t10) {
      let n10 = {
        addDecoration: (t11, n11) => this._deltaDecorationsImpl(e10, [], [
          {
            range: t11,
            options: n11
          }
        ])[0],
        changeDecoration: (e11, t11) => {
          this._changeDecorationImpl(e11, t11);
        },
        changeDecorationOptions: (e11, t11) => {
          this._changeDecorationOptionsImpl(e11, yH(t11));
        },
        removeDecoration: (t11) => {
          this._deltaDecorationsImpl(e10, [
            t11
          ], []);
        },
        deltaDecorations: (t11, n11) => t11.length === 0 && n11.length === 0 ? [] : this._deltaDecorationsImpl(e10, t11, n11)
      }, r10 = null;
      try {
        r10 = t10(n10);
      } catch (e11) {
        gr(e11);
      }
      return n10.addDecoration = iH, n10.changeDecoration = iH, n10.changeDecorationOptions = iH, n10.removeDecoration = iH, n10.deltaDecorations = iH, r10;
    }
    deltaDecorations(e10, t10, n10 = 0) {
      if (this._assertNotDisposed(), e10 || (e10 = []), e10.length === 0 && t10.length === 0) return [];
      try {
        return this._deltaDecorationCallCnt++, this._deltaDecorationCallCnt > 1 && (console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`), gr(Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`))), this._onDidChangeDecorations.beginDeferredEmit(), this._deltaDecorationsImpl(n10, e10, t10);
      } finally {
        this._onDidChangeDecorations.endDeferredEmit(), this._deltaDecorationCallCnt--;
      }
    }
    _getTrackedRange(e10) {
      return this.getDecorationRange(e10);
    }
    _setTrackedRange(e10, t10, n10) {
      let r10 = e10 ? this._decorations[e10] : null;
      if (!r10) return t10 ? this._deltaDecorationsImpl(0, [], [
        {
          range: t10,
          options: vH[n10]
        }
      ], true)[0] : null;
      if (!t10) return this._decorationsTree.delete(r10), delete this._decorations[r10.id], null;
      let i10 = this._validateRangeRelaxedNoAllocations(t10), a10 = this._buffer.getOffsetAt(i10.startLineNumber, i10.startColumn), o10 = this._buffer.getOffsetAt(i10.endLineNumber, i10.endColumn);
      return this._decorationsTree.delete(r10), r10.reset(this.getVersionId(), a10, o10, i10), r10.setOptions(vH[n10]), this._decorationsTree.insert(r10), r10.id;
    }
    removeAllDecorationsWithOwnerId(e10) {
      if (this._isDisposed) return;
      let t10 = this._decorationsTree.collectNodesFromOwner(e10);
      for (let e11 = 0, n10 = t10.length; e11 < n10; e11++) {
        let n11 = t10[e11];
        this._decorationsTree.delete(n11), delete this._decorations[n11.id];
      }
    }
    getDecorationOptions(e10) {
      let t10 = this._decorations[e10];
      return t10 ? t10.options : null;
    }
    getDecorationRange(e10) {
      let t10 = this._decorations[e10];
      return t10 ? this._decorationsTree.getNodeRange(this, t10) : null;
    }
    getLineDecorations(e10, t10 = 0, n10 = false) {
      return e10 < 1 || e10 > this.getLineCount() ? [] : this.getLinesDecorations(e10, e10, t10, n10);
    }
    getLinesDecorations(e10, t10, n10 = 0, r10 = false, i10 = false) {
      let a10 = this.getLineCount(), o10 = Math.min(a10, Math.max(1, e10)), s10 = Math.min(a10, Math.max(1, t10)), c10 = this.getLineMaxColumn(s10), l10 = new F(o10, 1, s10, c10), u10 = this._getDecorationsInRange(l10, n10, r10, i10);
      return re(u10, this._decorationProvider.getDecorationsInRange(l10, n10, r10)), u10;
    }
    getDecorationsInRange(e10, t10 = 0, n10 = false, r10 = false, i10 = false) {
      let a10 = this.validateRange(e10), o10 = this._getDecorationsInRange(a10, t10, n10, i10);
      return re(o10, this._decorationProvider.getDecorationsInRange(a10, t10, n10, r10)), o10;
    }
    getOverviewRulerDecorations(e10 = 0, t10 = false) {
      return this._decorationsTree.getAll(this, e10, t10, true, false);
    }
    getInjectedTextDecorations(e10 = 0) {
      return this._decorationsTree.getAllInjectedText(this, e10);
    }
    _getInjectedTextInLine(e10) {
      let t10 = this._buffer.getOffsetAt(e10, 1), n10 = t10 + this._buffer.getLineLength(e10), r10 = this._decorationsTree.getInjectedTextInInterval(this, t10, n10, 0);
      return BV.fromDecorations(r10).filter((t11) => t11.lineNumber === e10);
    }
    getAllDecorations(e10 = 0, t10 = false) {
      let n10 = this._decorationsTree.getAll(this, e10, t10, false, false);
      return n10 = n10.concat(this._decorationProvider.getAllDecorations(e10, t10)), n10;
    }
    getAllMarginDecorations(e10 = 0) {
      return this._decorationsTree.getAll(this, e10, false, false, true);
    }
    _getDecorationsInRange(e10, t10, n10, r10) {
      let i10 = this._buffer.getOffsetAt(e10.startLineNumber, e10.startColumn), a10 = this._buffer.getOffsetAt(e10.endLineNumber, e10.endColumn);
      return this._decorationsTree.getAllInInterval(this, i10, a10, t10, n10, r10);
    }
    getRangeAt(e10, t10) {
      return this._buffer.getRangeAt(e10, t10 - e10);
    }
    _changeDecorationImpl(e10, t10) {
      let n10 = this._decorations[e10];
      if (!n10) return;
      if (n10.options.after) {
        let t11 = this.getDecorationRange(e10);
        this._onDidChangeDecorations.recordLineAffectedByInjectedText(t11.endLineNumber);
      }
      if (n10.options.before) {
        let t11 = this.getDecorationRange(e10);
        this._onDidChangeDecorations.recordLineAffectedByInjectedText(t11.startLineNumber);
      }
      let r10 = this._validateRangeRelaxedNoAllocations(t10), i10 = this._buffer.getOffsetAt(r10.startLineNumber, r10.startColumn), a10 = this._buffer.getOffsetAt(r10.endLineNumber, r10.endColumn);
      this._decorationsTree.delete(n10), n10.reset(this.getVersionId(), i10, a10, r10), this._decorationsTree.insert(n10), this._onDidChangeDecorations.checkAffectedAndFire(n10.options), n10.options.after && this._onDidChangeDecorations.recordLineAffectedByInjectedText(r10.endLineNumber), n10.options.before && this._onDidChangeDecorations.recordLineAffectedByInjectedText(r10.startLineNumber);
    }
    _changeDecorationOptionsImpl(e10, t10) {
      let n10 = this._decorations[e10];
      if (!n10) return;
      let r10 = !!(n10.options.overviewRuler && n10.options.overviewRuler.color), i10 = !!(t10.overviewRuler && t10.overviewRuler.color);
      if (this._onDidChangeDecorations.checkAffectedAndFire(n10.options), this._onDidChangeDecorations.checkAffectedAndFire(t10), n10.options.after || t10.after) {
        let e11 = this._decorationsTree.getNodeRange(this, n10);
        this._onDidChangeDecorations.recordLineAffectedByInjectedText(e11.endLineNumber);
      }
      if (n10.options.before || t10.before) {
        let e11 = this._decorationsTree.getNodeRange(this, n10);
        this._onDidChangeDecorations.recordLineAffectedByInjectedText(e11.startLineNumber);
      }
      let a10 = r10 !== i10, o10 = cH(t10) !== lH(n10);
      a10 || o10 ? (this._decorationsTree.delete(n10), n10.setOptions(t10), this._decorationsTree.insert(n10)) : n10.setOptions(t10);
    }
    _deltaDecorationsImpl(e10, t10, n10, r10 = false) {
      let i10 = this.getVersionId(), a10 = t10.length, o10 = 0, s10 = n10.length, c10 = 0;
      this._onDidChangeDecorations.beginDeferredEmit();
      try {
        let l10 = Array(s10);
        for (; o10 < a10 || c10 < s10; ) {
          let u10 = null;
          if (o10 < a10) {
            do
              u10 = this._decorations[t10[o10++]];
            while (!u10 && o10 < a10);
            if (u10) {
              if (u10.options.after) {
                let e11 = this._decorationsTree.getNodeRange(this, u10);
                this._onDidChangeDecorations.recordLineAffectedByInjectedText(e11.endLineNumber);
              }
              if (u10.options.before) {
                let e11 = this._decorationsTree.getNodeRange(this, u10);
                this._onDidChangeDecorations.recordLineAffectedByInjectedText(e11.startLineNumber);
              }
              this._decorationsTree.delete(u10), r10 || this._onDidChangeDecorations.checkAffectedAndFire(u10.options);
            }
          }
          if (c10 < s10) {
            if (!u10) {
              let e11 = ++this._lastDecorationId, t12 = `${this._instanceId};${e11}`;
              u10 = new vB(t12, 0, 0), this._decorations[t12] = u10;
            }
            let t11 = n10[c10], a11 = this._validateRangeRelaxedNoAllocations(t11.range), o11 = yH(t11.options), s11 = this._buffer.getOffsetAt(a11.startLineNumber, a11.startColumn), d10 = this._buffer.getOffsetAt(a11.endLineNumber, a11.endColumn);
            u10.ownerId = e10, u10.reset(i10, s11, d10, a11), u10.setOptions(o11), u10.options.after && this._onDidChangeDecorations.recordLineAffectedByInjectedText(a11.endLineNumber), u10.options.before && this._onDidChangeDecorations.recordLineAffectedByInjectedText(a11.startLineNumber), r10 || this._onDidChangeDecorations.checkAffectedAndFire(o11), this._decorationsTree.insert(u10), l10[c10] = u10.id, c10++;
          } else u10 && delete this._decorations[u10.id];
        }
        return l10;
      } finally {
        this._onDidChangeDecorations.endDeferredEmit();
      }
    }
    getLanguageId() {
      return this.tokenization.getLanguageId();
    }
    setLanguage(e10, t10) {
      typeof e10 == `string` ? (this._languageSelectionListener.clear(), this._setLanguage(e10, t10)) : (this._languageSelectionListener.value = e10.onDidChange(() => this._setLanguage(e10.languageId, t10)), this._setLanguage(e10.languageId, t10));
    }
    _setLanguage(e10, t10) {
      this.tokenization.setLanguageId(e10, t10), this._languageService.requestRichLanguageFeatures(e10);
    }
    getLanguageIdAtPosition(e10, t10) {
      return this.tokenization.getLanguageIdAtPosition(e10, t10);
    }
    getWordAtPosition(e10) {
      return this._tokenizationTextModelPart.getWordAtPosition(e10);
    }
    getWordUntilPosition(e10) {
      return this._tokenizationTextModelPart.getWordUntilPosition(e10);
    }
    normalizePosition(e10, t10) {
      return e10;
    }
    getLineIndentColumn(e10) {
      return oH(this.getLineContent(e10)) + 1;
    }
  }, XV = _na, _na._MODEL_SYNC_LIMIT = 50 * 1024 * 1024, _na.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024, _na.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1e3, _na.LARGE_FILE_HEAP_OPERATION_THRESHOLD = 256 * 1024 * 1024, _na.DEFAULT_CREATION_OPTIONS = {
    isForSimpleWidget: false,
    tabSize: Ft.tabSize,
    indentSize: Ft.indentSize,
    insertSpaces: Ft.insertSpaces,
    detectIndentation: false,
    defaultEOL: 1,
    trimAutoWhitespace: Ft.trimAutoWhitespace,
    largeFileOptimizations: Ft.largeFileOptimizations,
    bracketPairColorizationOptions: Ft.bracketPairColorizationOptions
  }, _na);
  aH = XV = JV([
    YV(4, fx),
    YV(5, _g),
    YV(6, i_),
    YV(7, Jf)
  ], aH);
  function oH(e10) {
    let t10 = 0;
    for (let n10 of e10) if (n10 === ` ` || n10 === `	`) t10++;
    else break;
    return t10;
  }
  function sH(e10) {
    return !!(e10.options.overviewRuler && e10.options.overviewRuler.color);
  }
  function cH(e10) {
    return !!e10.after || !!e10.before;
  }
  function lH(e10) {
    return !!e10.options.after || !!e10.options.before;
  }
  var uH = class {
    constructor() {
      this._decorationsTree0 = new yB(), this._decorationsTree1 = new yB(), this._injectedTextDecorationsTree = new yB();
    }
    ensureAllNodesHaveRanges(e10) {
      this.getAll(e10, 0, false, false, false);
    }
    _ensureNodesHaveRanges(e10, t10) {
      for (let n10 of t10) n10.range === null && (n10.range = e10.getRangeAt(n10.cachedAbsoluteStart, n10.cachedAbsoluteEnd));
      return t10;
    }
    getAllInInterval(e10, t10, n10, r10, i10, a10) {
      let o10 = e10.getVersionId(), s10 = this._intervalSearch(t10, n10, r10, i10, o10, a10);
      return this._ensureNodesHaveRanges(e10, s10);
    }
    _intervalSearch(e10, t10, n10, r10, i10, a10) {
      let o10 = this._decorationsTree0.intervalSearch(e10, t10, n10, r10, i10, a10), s10 = this._decorationsTree1.intervalSearch(e10, t10, n10, r10, i10, a10), c10 = this._injectedTextDecorationsTree.intervalSearch(e10, t10, n10, r10, i10, a10);
      return o10.concat(s10).concat(c10);
    }
    getInjectedTextInInterval(e10, t10, n10, r10) {
      let i10 = e10.getVersionId(), a10 = this._injectedTextDecorationsTree.intervalSearch(t10, n10, r10, false, i10, false);
      return this._ensureNodesHaveRanges(e10, a10).filter((e11) => e11.options.showIfCollapsed || !e11.range.isEmpty());
    }
    getAllInjectedText(e10, t10) {
      let n10 = e10.getVersionId(), r10 = this._injectedTextDecorationsTree.search(t10, false, n10, false);
      return this._ensureNodesHaveRanges(e10, r10).filter((e11) => e11.options.showIfCollapsed || !e11.range.isEmpty());
    }
    getAll(e10, t10, n10, r10, i10) {
      let a10 = e10.getVersionId(), o10 = this._search(t10, n10, r10, a10, i10);
      return this._ensureNodesHaveRanges(e10, o10);
    }
    _search(e10, t10, n10, r10, i10) {
      if (n10) return this._decorationsTree1.search(e10, t10, r10, i10);
      {
        let n11 = this._decorationsTree0.search(e10, t10, r10, i10), a10 = this._decorationsTree1.search(e10, t10, r10, i10), o10 = this._injectedTextDecorationsTree.search(e10, t10, r10, i10);
        return n11.concat(a10).concat(o10);
      }
    }
    collectNodesFromOwner(e10) {
      let t10 = this._decorationsTree0.collectNodesFromOwner(e10), n10 = this._decorationsTree1.collectNodesFromOwner(e10), r10 = this._injectedTextDecorationsTree.collectNodesFromOwner(e10);
      return t10.concat(n10).concat(r10);
    }
    collectNodesPostOrder() {
      let e10 = this._decorationsTree0.collectNodesPostOrder(), t10 = this._decorationsTree1.collectNodesPostOrder(), n10 = this._injectedTextDecorationsTree.collectNodesPostOrder();
      return e10.concat(t10).concat(n10);
    }
    insert(e10) {
      lH(e10) ? this._injectedTextDecorationsTree.insert(e10) : sH(e10) ? this._decorationsTree1.insert(e10) : this._decorationsTree0.insert(e10);
    }
    delete(e10) {
      lH(e10) ? this._injectedTextDecorationsTree.delete(e10) : sH(e10) ? this._decorationsTree1.delete(e10) : this._decorationsTree0.delete(e10);
    }
    getNodeRange(e10, t10) {
      let n10 = e10.getVersionId();
      return t10.cachedVersionId !== n10 && this._resolveNode(t10, n10), t10.range === null && (t10.range = e10.getRangeAt(t10.cachedAbsoluteStart, t10.cachedAbsoluteEnd)), t10.range;
    }
    _resolveNode(e10, t10) {
      lH(e10) ? this._injectedTextDecorationsTree.resolveNode(e10, t10) : sH(e10) ? this._decorationsTree1.resolveNode(e10, t10) : this._decorationsTree0.resolveNode(e10, t10);
    }
    acceptReplace(e10, t10, n10, r10) {
      this._decorationsTree0.acceptReplace(e10, t10, n10, r10), this._decorationsTree1.acceptReplace(e10, t10, n10, r10), this._injectedTextDecorationsTree.acceptReplace(e10, t10, n10, r10);
    }
  };
  function dH(e10) {
    return e10.replace(/[^a-z0-9\-_]/gi, ` `);
  }
  let fH, pH, mH, hH;
  fH = class {
    constructor(e10) {
      this.color = e10.color || ``, this.darkColor = e10.darkColor || ``;
    }
  };
  pH = class extends fH {
    constructor(e10) {
      super(e10), this._resolvedColor = null, this.position = typeof e10.position == `number` ? e10.position : Z_.Center;
    }
    getColor(e10) {
      return this._resolvedColor || (e10.type !== `light` && this.darkColor ? this._resolvedColor = this._resolveColor(this.darkColor, e10) : this._resolvedColor = this._resolveColor(this.color, e10)), this._resolvedColor;
    }
    invalidateCachedColor() {
      this._resolvedColor = null;
    }
    _resolveColor(e10, t10) {
      if (typeof e10 == `string`) return e10;
      let n10 = e10 ? t10.getColor(e10.id) : null;
      return n10 ? n10.toString() : ``;
    }
  };
  mH = class {
    constructor(e10) {
      this.position = (e10 == null ? void 0 : e10.position) ?? Q_.Center, this.persistLane = e10 == null ? void 0 : e10.persistLane;
    }
  };
  hH = class extends fH {
    constructor(e10) {
      super(e10), this.position = e10.position, this.sectionHeaderStyle = e10.sectionHeaderStyle ?? null, this.sectionHeaderText = e10.sectionHeaderText ?? null;
    }
    getColor(e10) {
      return this._resolvedColor || (e10.type !== `light` && this.darkColor ? this._resolvedColor = this._resolveColor(this.darkColor, e10) : this._resolvedColor = this._resolveColor(this.color, e10)), this._resolvedColor;
    }
    invalidateCachedColor() {
      this._resolvedColor = void 0;
    }
    _resolveColor(e10, t10) {
      return typeof e10 == `string` ? K.fromHex(e10) : t10.getColor(e10.id);
    }
  };
  gH = class e10 {
    static from(t10) {
      return t10 instanceof e10 ? t10 : new e10(t10);
    }
    constructor(e11) {
      this.content = e11.content || ``, this.inlineClassName = e11.inlineClassName || null, this.inlineClassNameAffectsLetterSpacing = e11.inlineClassNameAffectsLetterSpacing || false, this.attachedData = e11.attachedData || null, this.cursorStops = e11.cursorStops || null;
    }
  };
  _H = class e10 {
    static register(t10) {
      return new e10(t10);
    }
    static createDynamic(t10) {
      return new e10(t10);
    }
    constructor(e11) {
      this.description = e11.description, this.blockClassName = e11.blockClassName ? dH(e11.blockClassName) : null, this.blockDoesNotCollapse = e11.blockDoesNotCollapse ?? null, this.blockIsAfterEnd = e11.blockIsAfterEnd ?? null, this.blockPadding = e11.blockPadding ?? null, this.stickiness = e11.stickiness || 0, this.zIndex = e11.zIndex || 0, this.className = e11.className ? dH(e11.className) : null, this.shouldFillLineOnLineBreak = e11.shouldFillLineOnLineBreak ?? null, this.hoverMessage = e11.hoverMessage || null, this.glyphMarginHoverMessage = e11.glyphMarginHoverMessage || null, this.lineNumberHoverMessage = e11.lineNumberHoverMessage || null, this.isWholeLine = e11.isWholeLine || false, this.showIfCollapsed = e11.showIfCollapsed || false, this.collapseOnReplaceEdit = e11.collapseOnReplaceEdit || false, this.overviewRuler = e11.overviewRuler ? new pH(e11.overviewRuler) : null, this.minimap = e11.minimap ? new hH(e11.minimap) : null, this.glyphMargin = e11.glyphMarginClassName ? new mH(e11.glyphMargin) : null, this.glyphMarginClassName = e11.glyphMarginClassName ? dH(e11.glyphMarginClassName) : null, this.linesDecorationsClassName = e11.linesDecorationsClassName ? dH(e11.linesDecorationsClassName) : null, this.lineNumberClassName = e11.lineNumberClassName ? dH(e11.lineNumberClassName) : null, this.linesDecorationsTooltip = e11.linesDecorationsTooltip ? ms(e11.linesDecorationsTooltip) : null, this.firstLineDecorationClassName = e11.firstLineDecorationClassName ? dH(e11.firstLineDecorationClassName) : null, this.marginClassName = e11.marginClassName ? dH(e11.marginClassName) : null, this.inlineClassName = e11.inlineClassName ? dH(e11.inlineClassName) : null, this.inlineClassNameAffectsLetterSpacing = e11.inlineClassNameAffectsLetterSpacing || false, this.beforeContentClassName = e11.beforeContentClassName ? dH(e11.beforeContentClassName) : null, this.afterContentClassName = e11.afterContentClassName ? dH(e11.afterContentClassName) : null, this.after = e11.after ? gH.from(e11.after) : null, this.before = e11.before ? gH.from(e11.before) : null, this.hideInCommentTokens = e11.hideInCommentTokens ?? false, this.hideInStringTokens = e11.hideInStringTokens ?? false;
    }
  };
  _H.EMPTY = _H.register({
    description: `empty`
  });
  const vH = [
    _H.register({
      description: `tracked-range-always-grows-when-typing-at-edges`,
      stickiness: 0
    }),
    _H.register({
      description: `tracked-range-never-grows-when-typing-at-edges`,
      stickiness: 1
    }),
    _H.register({
      description: `tracked-range-grows-only-when-typing-before`,
      stickiness: 2
    }),
    _H.register({
      description: `tracked-range-grows-only-when-typing-after`,
      stickiness: 3
    })
  ];
  function yH(e10) {
    return e10 instanceof _H ? e10 : _H.createDynamic(e10);
  }
  var bH = class extends j {
    constructor(e10) {
      super(), this.handleBeforeFire = e10, this._actual = this._register(new N()), this.event = this._actual.event, this._affectedInjectedTextLines = null, this._deferredCnt = 0, this._shouldFireDeferred = false, this._affectsMinimap = false, this._affectsOverviewRuler = false, this._affectsGlyphMargin = false, this._affectsLineNumber = false;
    }
    beginDeferredEmit() {
      this._deferredCnt++;
    }
    endDeferredEmit() {
      var _a3;
      this._deferredCnt--, this._deferredCnt === 0 && (this._shouldFireDeferred && this.doFire(), (_a3 = this._affectedInjectedTextLines) == null ? void 0 : _a3.clear(), this._affectedInjectedTextLines = null);
    }
    recordLineAffectedByInjectedText(e10) {
      this._affectedInjectedTextLines || (this._affectedInjectedTextLines = /* @__PURE__ */ new Set()), this._affectedInjectedTextLines.add(e10);
    }
    checkAffectedAndFire(e10) {
      var _a3, _b3;
      this._affectsMinimap || (this._affectsMinimap = !!((_a3 = e10.minimap) == null ? void 0 : _a3.position)), this._affectsOverviewRuler || (this._affectsOverviewRuler = !!((_b3 = e10.overviewRuler) == null ? void 0 : _b3.color)), this._affectsGlyphMargin || (this._affectsGlyphMargin = !!e10.glyphMarginClassName), this._affectsLineNumber || (this._affectsLineNumber = !!e10.lineNumberClassName), this.tryFire();
    }
    fire() {
      this._affectsMinimap = true, this._affectsOverviewRuler = true, this._affectsGlyphMargin = true, this.tryFire();
    }
    tryFire() {
      this._deferredCnt === 0 ? this.doFire() : this._shouldFireDeferred = true;
    }
    doFire() {
      this.handleBeforeFire(this._affectedInjectedTextLines);
      let e10 = {
        affectsMinimap: this._affectsMinimap,
        affectsOverviewRuler: this._affectsOverviewRuler,
        affectsGlyphMargin: this._affectsGlyphMargin,
        affectsLineNumber: this._affectsLineNumber
      };
      this._shouldFireDeferred = false, this._affectsMinimap = false, this._affectsOverviewRuler = false, this._affectsGlyphMargin = false, this._actual.fire(e10);
    }
  }, xH = class extends j {
    constructor() {
      super(), this._fastEmitter = this._register(new N()), this.fastEvent = this._fastEmitter.event, this._slowEmitter = this._register(new N()), this.slowEvent = this._slowEmitter.event, this._deferredCnt = 0, this._deferredEvent = null;
    }
    beginDeferredEmit() {
      this._deferredCnt++;
    }
    endDeferredEmit(e10 = null) {
      if (this._deferredCnt--, this._deferredCnt === 0 && this._deferredEvent !== null) {
        this._deferredEvent.rawContentChangedEvent.resultingSelection = e10;
        let t10 = this._deferredEvent;
        this._deferredEvent = null, this._fastEmitter.fire(t10), this._slowEmitter.fire(t10);
      }
    }
    fire(e10) {
      if (this._deferredCnt > 0) {
        this._deferredEvent ? this._deferredEvent = this._deferredEvent.merge(e10) : this._deferredEvent = e10;
        return;
      }
      this._fastEmitter.fire(e10), this._slowEmitter.fire(e10);
    }
  }, SH = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, CH = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, wH;
  function TH(e10) {
    return e10.toString();
  }
  var EH = class {
    constructor(e10, t10, n10) {
      this.model = e10, this._modelEventListeners = new A(), this.model = e10, this._modelEventListeners.add(e10.onWillDispose(() => t10(e10))), this._modelEventListeners.add(e10.onDidChangeLanguage((t11) => n10(e10, t11)));
    }
    dispose() {
      this._modelEventListeners.dispose();
    }
  };
  const DH = ht || E ? 1 : 2;
  var OH = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      this.uri = e10, this.initialUndoRedoSnapshot = t10, this.time = n10, this.sharesUndoRedoStack = r10, this.heapSize = i10, this.sha1 = a10, this.versionId = o10, this.alternativeVersionId = s10;
    }
  };
  let kH = (_oa = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._configurationService = e10, this._resourcePropertiesService = t10, this._undoRedoService = n10, this._instantiationService = r10, this._onModelAdded = this._register(new N()), this.onModelAdded = this._onModelAdded.event, this._onModelRemoved = this._register(new N()), this.onModelRemoved = this._onModelRemoved.event, this._onModelModeChanged = this._register(new N()), this.onModelLanguageChanged = this._onModelModeChanged.event, this._modelCreationOptionsByLanguageAndResource = /* @__PURE__ */ Object.create(null), this._models = {}, this._disposedModels = /* @__PURE__ */ new Map(), this._disposedModelsHeapSize = 0, this._register(this._configurationService.onDidChangeConfiguration((e11) => this._updateModelOptions(e11))), this._updateModelOptions(void 0);
    }
    static _readModelOptions(e10, t10) {
      var _a3;
      let n10 = Ft.tabSize;
      if (e10.editor && e10.editor.tabSize !== void 0) {
        let t11 = parseInt(e10.editor.tabSize, 10);
        isNaN(t11) || (n10 = t11), n10 < 1 && (n10 = 1);
      }
      let r10 = `tabSize`;
      if (e10.editor && e10.editor.indentSize !== void 0 && e10.editor.indentSize !== `tabSize`) {
        let t11 = parseInt(e10.editor.indentSize, 10);
        isNaN(t11) || (r10 = Math.max(t11, 1));
      }
      let i10 = Ft.insertSpaces;
      e10.editor && e10.editor.insertSpaces !== void 0 && (i10 = e10.editor.insertSpaces === `false` ? false : !!e10.editor.insertSpaces);
      let a10 = DH, o10 = e10.eol;
      o10 === `\r
` ? a10 = 2 : o10 === `
` && (a10 = 1);
      let s10 = Ft.trimAutoWhitespace;
      e10.editor && e10.editor.trimAutoWhitespace !== void 0 && (s10 = e10.editor.trimAutoWhitespace === `false` ? false : !!e10.editor.trimAutoWhitespace);
      let c10 = Ft.detectIndentation;
      e10.editor && e10.editor.detectIndentation !== void 0 && (c10 = e10.editor.detectIndentation === `false` ? false : !!e10.editor.detectIndentation);
      let l10 = Ft.largeFileOptimizations;
      e10.editor && e10.editor.largeFileOptimizations !== void 0 && (l10 = e10.editor.largeFileOptimizations === `false` ? false : !!e10.editor.largeFileOptimizations);
      let u10 = Ft.bracketPairColorizationOptions;
      return ((_a3 = e10.editor) == null ? void 0 : _a3.bracketPairColorization) && typeof e10.editor.bracketPairColorization == `object` && (u10 = {
        enabled: !!e10.editor.bracketPairColorization.enabled,
        independentColorPoolPerBracketType: !!e10.editor.bracketPairColorization.independentColorPoolPerBracketType
      }), {
        isForSimpleWidget: t10,
        tabSize: n10,
        indentSize: r10,
        insertSpaces: i10,
        detectIndentation: c10,
        defaultEOL: a10,
        trimAutoWhitespace: s10,
        largeFileOptimizations: l10,
        bracketPairColorizationOptions: u10
      };
    }
    _getEOL(e10, t10) {
      if (e10) return this._resourcePropertiesService.getEOL(e10, t10);
      let n10 = this._configurationService.getValue(`files.eol`, {
        overrideIdentifier: t10
      });
      return n10 && typeof n10 == `string` && n10 !== `auto` ? n10 : Et === 3 || Et === 2 ? `
` : `\r
`;
    }
    _shouldRestoreUndoStack() {
      let e10 = this._configurationService.getValue(`files.restoreUndoStack`);
      return typeof e10 == `boolean` ? e10 : true;
    }
    getCreationOptions(e10, t10, n10) {
      let r10 = typeof e10 == `string` ? e10 : e10.languageId, i10 = this._modelCreationOptionsByLanguageAndResource[r10 + t10];
      if (!i10) {
        let e11 = this._configurationService.getValue(`editor`, {
          overrideIdentifier: r10,
          resource: t10
        }), a10 = this._getEOL(t10, r10);
        i10 = wH._readModelOptions({
          editor: e11,
          eol: a10
        }, n10), this._modelCreationOptionsByLanguageAndResource[r10 + t10] = i10;
      }
      return i10;
    }
    _updateModelOptions(e10) {
      let t10 = this._modelCreationOptionsByLanguageAndResource;
      this._modelCreationOptionsByLanguageAndResource = /* @__PURE__ */ Object.create(null);
      let n10 = Object.keys(this._models);
      for (let r10 = 0, i10 = n10.length; r10 < i10; r10++) {
        let i11 = n10[r10], a10 = this._models[i11], o10 = a10.model.getLanguageId(), s10 = a10.model.uri;
        if (e10 && !e10.affectsConfiguration(`editor`, {
          overrideIdentifier: o10,
          resource: s10
        }) && !e10.affectsConfiguration(`files.eol`, {
          overrideIdentifier: o10,
          resource: s10
        })) continue;
        let c10 = t10[o10 + s10], l10 = this.getCreationOptions(o10, s10, a10.model.isForSimpleWidget);
        wH._setModelOptionsForModel(a10.model, l10, c10);
      }
    }
    static _setModelOptionsForModel(e10, t10, n10) {
      n10 && n10.defaultEOL !== t10.defaultEOL && e10.getLineCount() === 1 && e10.setEOL(t10.defaultEOL === 1 ? 0 : 1), !(n10 && n10.detectIndentation === t10.detectIndentation && n10.insertSpaces === t10.insertSpaces && n10.tabSize === t10.tabSize && n10.indentSize === t10.indentSize && n10.trimAutoWhitespace === t10.trimAutoWhitespace && Le(n10.bracketPairColorizationOptions, t10.bracketPairColorizationOptions)) && (t10.detectIndentation ? (e10.detectIndentation(t10.insertSpaces, t10.tabSize), e10.updateOptions({
        trimAutoWhitespace: t10.trimAutoWhitespace,
        bracketColorizationOptions: t10.bracketPairColorizationOptions
      })) : e10.updateOptions({
        insertSpaces: t10.insertSpaces,
        tabSize: t10.tabSize,
        indentSize: t10.indentSize,
        trimAutoWhitespace: t10.trimAutoWhitespace,
        bracketColorizationOptions: t10.bracketPairColorizationOptions
      }));
    }
    _insertDisposedModel(e10) {
      this._disposedModels.set(TH(e10.uri), e10), this._disposedModelsHeapSize += e10.heapSize;
    }
    _removeDisposedModel(e10) {
      let t10 = this._disposedModels.get(TH(e10));
      return t10 && (this._disposedModelsHeapSize -= t10.heapSize), this._disposedModels.delete(TH(e10)), t10;
    }
    _ensureDisposedModelsHeapSize(e10) {
      if (this._disposedModelsHeapSize > e10) {
        let t10 = [];
        for (this._disposedModels.forEach((e11) => {
          e11.sharesUndoRedoStack || t10.push(e11);
        }), t10.sort((e11, t11) => e11.time - t11.time); t10.length > 0 && this._disposedModelsHeapSize > e10; ) {
          let e11 = t10.shift();
          this._removeDisposedModel(e11.uri), e11.initialUndoRedoSnapshot !== null && this._undoRedoService.restoreSnapshot(e11.initialUndoRedoSnapshot);
        }
      }
    }
    _createModelData(e10, t10, n10, r10) {
      let i10 = this.getCreationOptions(t10, n10, r10), a10 = this._instantiationService.createInstance(aH, e10, t10, i10, n10);
      if (n10 && this._disposedModels.has(TH(n10))) {
        let e11 = this._removeDisposedModel(n10), t11 = this._undoRedoService.getElements(n10), r11 = this._getSHA1Computer(), i11 = r11.canComputeSHA1(a10) ? r11.computeSHA1(a10) === e11.sha1 : false;
        if (i11 || e11.sharesUndoRedoStack) {
          for (let e12 of t11.past) Jz(e12) && e12.matchesResource(n10) && e12.setModel(a10);
          for (let e12 of t11.future) Jz(e12) && e12.matchesResource(n10) && e12.setModel(a10);
          this._undoRedoService.setElementsValidFlag(n10, true, (e12) => Jz(e12) && e12.matchesResource(n10)), i11 && (a10._overwriteVersionId(e11.versionId), a10._overwriteAlternativeVersionId(e11.alternativeVersionId), a10._overwriteInitialUndoRedoSnapshot(e11.initialUndoRedoSnapshot));
        } else e11.initialUndoRedoSnapshot !== null && this._undoRedoService.restoreSnapshot(e11.initialUndoRedoSnapshot);
      }
      let o10 = TH(a10.uri);
      if (this._models[o10]) throw Error(`ModelService: Cannot add model because it already exists!`);
      let s10 = new EH(a10, (e11) => this._onWillDispose(e11), (e11, t11) => this._onDidChangeLanguage(e11, t11));
      return this._models[o10] = s10, s10;
    }
    createModel(e10, t10, n10, r10 = false) {
      let i10;
      return i10 = t10 ? this._createModelData(e10, t10, n10, r10) : this._createModelData(e10, Jg, n10, r10), this._onModelAdded.fire(i10.model), i10.model;
    }
    getModels() {
      let e10 = [], t10 = Object.keys(this._models);
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) {
        let r11 = t10[n10];
        e10.push(this._models[r11].model);
      }
      return e10;
    }
    getModel(e10) {
      let t10 = TH(e10), n10 = this._models[t10];
      return n10 ? n10.model : null;
    }
    _schemaShouldMaintainUndoRedoElements(e10) {
      return e10.scheme === Su.file || e10.scheme === Su.vscodeRemote || e10.scheme === Su.vscodeUserData || e10.scheme === Su.vscodeNotebookCell || e10.scheme === `fake-fs`;
    }
    _onWillDispose(e10) {
      let t10 = TH(e10.uri), n10 = this._models[t10], r10 = this._undoRedoService.getUriComparisonKey(e10.uri) !== e10.uri.toString(), i10 = false, a10 = 0;
      if (r10 || this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(e10.uri)) {
        let t11 = this._undoRedoService.getElements(e10.uri);
        if (t11.past.length > 0 || t11.future.length > 0) {
          for (let n11 of t11.past) Jz(n11) && n11.matchesResource(e10.uri) && (i10 = true, a10 += n11.heapSize(e10.uri), n11.setModel(e10.uri));
          for (let n11 of t11.future) Jz(n11) && n11.matchesResource(e10.uri) && (i10 = true, a10 += n11.heapSize(e10.uri), n11.setModel(e10.uri));
        }
      }
      let o10 = wH.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK, s10 = this._getSHA1Computer();
      if (i10) if (!r10 && (a10 > o10 || !s10.canComputeSHA1(e10))) {
        let e11 = n10.model.getInitialUndoRedoSnapshot();
        e11 !== null && this._undoRedoService.restoreSnapshot(e11);
      } else this._ensureDisposedModelsHeapSize(o10 - a10), this._undoRedoService.setElementsValidFlag(e10.uri, false, (t11) => Jz(t11) && t11.matchesResource(e10.uri)), this._insertDisposedModel(new OH(e10.uri, n10.model.getInitialUndoRedoSnapshot(), Date.now(), r10, a10, s10.computeSHA1(e10), e10.getVersionId(), e10.getAlternativeVersionId()));
      else if (!r10) {
        let e11 = n10.model.getInitialUndoRedoSnapshot();
        e11 !== null && this._undoRedoService.restoreSnapshot(e11);
      }
      delete this._models[t10], n10.dispose(), delete this._modelCreationOptionsByLanguageAndResource[e10.getLanguageId() + e10.uri], this._onModelRemoved.fire(e10);
    }
    _onDidChangeLanguage(e10, t10) {
      let n10 = t10.oldLanguage, r10 = e10.getLanguageId(), i10 = this.getCreationOptions(n10, e10.uri, e10.isForSimpleWidget), a10 = this.getCreationOptions(r10, e10.uri, e10.isForSimpleWidget);
      wH._setModelOptionsForModel(e10, a10, i10), this._onModelModeChanged.fire({
        model: e10,
        oldLanguageId: n10
      });
    }
    _getSHA1Computer() {
      return new AH();
    }
  }, wH = _oa, _oa.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024, _oa);
  kH = wH = SH([
    CH(0, ug),
    CH(1, Db),
    CH(2, fx),
    CH(3, Jf)
  ], kH);
  var AH = (_pa = class {
    canComputeSHA1(t10) {
      return t10.getValueLength() <= _pa.MAX_MODEL_SIZE;
    }
    computeSHA1(e10) {
      let t10 = new Uu(), n10 = e10.createSnapshot(), r10;
      for (; r10 = n10.read(); ) t10.update(r10);
      return t10.digest();
    }
  }, _pa.MAX_MODEL_SIZE = 10 * 1024 * 1024, _pa), jH;
  (function(e10) {
    e10[e10.PRESERVE = 0] = `PRESERVE`, e10[e10.LAST = 1] = `LAST`;
  })(jH || (jH = {}));
  MH = {
    Quickaccess: `workbench.contributions.quickaccess`
  };
  var NH = class {
    constructor() {
      this.providers = [], this.defaultProvider = void 0;
    }
    registerQuickAccessProvider(e10) {
      return e10.prefix.length === 0 ? this.defaultProvider = e10 : this.providers.push(e10), this.providers.sort((e11, t10) => t10.prefix.length - e11.prefix.length), k(() => {
        this.providers.splice(this.providers.indexOf(e10), 1), this.defaultProvider === e10 && (this.defaultProvider = void 0);
      });
    }
    getQuickAccessProviders() {
      return v([
        this.defaultProvider,
        ...this.providers
      ]);
    }
    getQuickAccessProvider(e10) {
      let t10 = e10 && this.providers.find((t11) => e10.startsWith(t11.prefix)) || void 0;
      return t10 || this.defaultProvider;
    }
  };
  am.add(MH.Quickaccess, new NH());
  const PH = {
    ctrlCmd: false,
    alt: false
  };
  var FH;
  (function(e10) {
    e10[e10.Blur = 1] = `Blur`, e10[e10.Gesture = 2] = `Gesture`, e10[e10.Other = 3] = `Other`;
  })(FH || (FH = {}));
  (function(e10) {
    e10[e10.NONE = 0] = `NONE`, e10[e10.FIRST = 1] = `FIRST`, e10[e10.SECOND = 2] = `SECOND`, e10[e10.LAST = 3] = `LAST`;
  })(IH || (IH = {}));
  var LH;
  (function(e10) {
    e10[e10.First = 1] = `First`, e10[e10.Second = 2] = `Second`, e10[e10.Last = 3] = `Last`, e10[e10.Next = 4] = `Next`, e10[e10.Previous = 5] = `Previous`, e10[e10.NextPage = 6] = `NextPage`, e10[e10.PreviousPage = 7] = `PreviousPage`, e10[e10.NextSeparator = 8] = `NextSeparator`, e10[e10.PreviousSeparator = 9] = `PreviousSeparator`;
  })(LH || (LH = {}));
  var RH;
  (function(e10) {
    e10[e10.Title = 1] = `Title`, e10[e10.Inline = 2] = `Inline`;
  })(RH || (RH = {}));
  var zH = class {
    constructor(e10) {
      this.options = e10;
    }
  };
  let ane;
  ane = new zH();
  BH = Xf(`quickInputService`);
  var VH = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, HH = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let UH = class extends j {
    constructor(e10, t10) {
      super(), this.quickInputService = e10, this.instantiationService = t10, this.registry = am.as(MH.Quickaccess), this.mapProviderToDescriptor = /* @__PURE__ */ new Map(), this.lastAcceptedPickerValues = /* @__PURE__ */ new Map(), this.visibleQuickAccess = void 0;
    }
    show(e10 = ``, t10) {
      this.doShowOrPick(e10, false, t10);
    }
    doShowOrPick(e10, t10, n10) {
      var _a3, _b3;
      let [r10, i10] = this.getOrInstantiateProvider(e10, n10 == null ? void 0 : n10.enabledProviderPrefixes), a10 = this.visibleQuickAccess, o10 = a10 == null ? void 0 : a10.descriptor;
      if (a10 && i10 && o10 === i10) {
        e10 !== i10.prefix && !(n10 == null ? void 0 : n10.preserveValue) && (a10.picker.value = e10), this.adjustValueSelection(a10.picker, i10, n10);
        return;
      }
      if (i10 && !(n10 == null ? void 0 : n10.preserveValue)) {
        let t11;
        if (a10 && o10 && o10 !== i10) {
          let e11 = a10.value.substr(o10.prefix.length);
          e11 && (t11 = `${i10.prefix}${e11}`);
        }
        if (!t11) {
          let e11 = r10 == null ? void 0 : r10.defaultFilterValue;
          e11 === jH.LAST ? t11 = this.lastAcceptedPickerValues.get(i10) : typeof e11 == `string` && (t11 = `${i10.prefix}${e11}`);
        }
        typeof t11 == `string` && (e10 = t11);
      }
      let s10 = (_a3 = a10 == null ? void 0 : a10.picker) == null ? void 0 : _a3.valueSelection, c10 = (_b3 = a10 == null ? void 0 : a10.picker) == null ? void 0 : _b3.value, l10 = new A(), u10 = l10.add(this.quickInputService.createQuickPick({
        useSeparators: true
      }));
      u10.value = e10, this.adjustValueSelection(u10, i10, n10), u10.placeholder = (n10 == null ? void 0 : n10.placeholder) ?? (i10 == null ? void 0 : i10.placeholder), u10.quickNavigate = n10 == null ? void 0 : n10.quickNavigateConfiguration, u10.hideInput = !!u10.quickNavigate && !a10, (typeof (n10 == null ? void 0 : n10.itemActivation) == `number` || (n10 == null ? void 0 : n10.quickNavigateConfiguration)) && (u10.itemActivation = (n10 == null ? void 0 : n10.itemActivation) ?? IH.SECOND), u10.contextKey = i10 == null ? void 0 : i10.contextKey, u10.filterValue = (e11) => e11.substring(i10 ? i10.prefix.length : 0);
      let d10;
      t10 && (d10 = new pl(), l10.add(M.once(u10.onWillAccept)((e11) => {
        e11.veto(), u10.hide();
      }))), l10.add(this.registerPickerListeners(u10, r10, i10, e10, n10));
      let f10 = l10.add(new gi());
      if (r10 && l10.add(r10.provide(u10, f10.token, n10 == null ? void 0 : n10.providerOptions)), M.once(u10.onDidHide)(() => {
        u10.selectedItems.length === 0 && f10.cancel(), l10.dispose(), d10 == null ? void 0 : d10.complete(u10.selectedItems.slice(0));
      }), u10.show(), s10 && c10 === e10 && (u10.valueSelection = s10), t10) return d10 == null ? void 0 : d10.p;
    }
    adjustValueSelection(e10, t10, n10) {
      let r10;
      r10 = (n10 == null ? void 0 : n10.preserveValue) ? [
        e10.value.length,
        e10.value.length
      ] : [
        (t10 == null ? void 0 : t10.prefix.length) ?? 0,
        e10.value.length
      ], e10.valueSelection = r10;
    }
    registerPickerListeners(e10, t10, n10, r10, i10) {
      let a10 = new A(), o10 = this.visibleQuickAccess = {
        picker: e10,
        descriptor: n10,
        value: r10
      };
      return a10.add(k(() => {
        o10 === this.visibleQuickAccess && (this.visibleQuickAccess = void 0);
      })), a10.add(e10.onDidChangeValue((e11) => {
        let [n11] = this.getOrInstantiateProvider(e11, i10 == null ? void 0 : i10.enabledProviderPrefixes);
        n11 === t10 ? o10.value = e11 : this.show(e11, {
          enabledProviderPrefixes: i10 == null ? void 0 : i10.enabledProviderPrefixes,
          preserveValue: true,
          providerOptions: i10 == null ? void 0 : i10.providerOptions
        });
      })), n10 && a10.add(e10.onDidAccept(() => {
        this.lastAcceptedPickerValues.set(n10, e10.value);
      })), a10;
    }
    getOrInstantiateProvider(e10, t10) {
      let n10 = this.registry.getQuickAccessProvider(e10);
      if (!n10 || t10 && !(t10 == null ? void 0 : t10.includes(n10.prefix))) return [
        void 0,
        void 0
      ];
      let r10 = this.mapProviderToDescriptor.get(n10);
      return r10 || (r10 = this.instantiationService.createInstance(n10.ctor), this.mapProviderToDescriptor.set(n10, r10)), [
        r10,
        n10
      ];
    }
  };
  UH = VH([
    HH(0, BH),
    HH(1, Jf)
  ], UH);
  let GH, KH;
  WH = class extends RE {
    constructor(e10) {
      super(), this._onChange = this._register(new N()), this.onChange = this._onChange.event, this._onKeyDown = this._register(new N()), this.onKeyDown = this._onKeyDown.event, this._opts = e10, this._checked = this._opts.isChecked;
      let t10 = [
        `monaco-custom-toggle`
      ];
      this._opts.icon && (this._icon = this._opts.icon, t10.push(...sp.asClassNameArray(this._icon))), this._opts.actionClassName && t10.push(...this._opts.actionClassName.split(` `)), this._checked && t10.push(`checked`), this.domNode = document.createElement(`div`), this._hover = this._register(RP().setupManagedHover(e10.hoverDelegate ?? PP(`mouse`), this.domNode, this._opts.title)), this.domNode.classList.add(...t10), this._opts.notFocusable || (this.domNode.tabIndex = 0), this.domNode.setAttribute(`role`, `checkbox`), this.domNode.setAttribute(`aria-checked`, String(this._checked)), this.domNode.setAttribute(`aria-label`, this._opts.title), this.applyStyles(), this.onclick(this.domNode, (e11) => {
        this.enabled && (this.checked = !this._checked, this._onChange.fire(false), e11.preventDefault());
      }), this._register(this.ignoreGesture(this.domNode)), this.onkeydown(this.domNode, (e11) => {
        if (e11.keyCode === 10 || e11.keyCode === 3) {
          this.checked = !this._checked, this._onChange.fire(true), e11.preventDefault(), e11.stopPropagation();
          return;
        }
        this._onKeyDown.fire(e11);
      });
    }
    get enabled() {
      return this.domNode.getAttribute(`aria-disabled`) !== `true`;
    }
    focus() {
      this.domNode.focus();
    }
    get checked() {
      return this._checked;
    }
    set checked(e10) {
      this._checked = e10, this.domNode.setAttribute(`aria-checked`, String(this._checked)), this.domNode.classList.toggle(`checked`, this._checked), this.applyStyles();
    }
    width() {
      return 22;
    }
    applyStyles() {
      this.domNode && (this.domNode.style.borderColor = this._checked && this._opts.inputActiveOptionBorder || ``, this.domNode.style.color = this._checked && this._opts.inputActiveOptionForeground || `inherit`, this.domNode.style.backgroundColor = this._checked && this._opts.inputActiveOptionBackground || ``);
    }
    enable() {
      this.domNode.setAttribute(`aria-disabled`, `false`);
    }
    disable() {
      this.domNode.setAttribute(`aria-disabled`, `true`);
    }
  };
  GH = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  };
  KH = class {
    constructor(e10) {
      this.nodes = e10;
    }
    toString() {
      return this.nodes.map((e10) => typeof e10 == `string` ? e10 : e10.label).join(``);
    }
  };
  GH([
    PE
  ], KH.prototype, `toString`, null);
  const qH = /\[([^\]]+)\]\(((?:https?:\/\/|command:|file:)[^\)\s]+)(?: (["'])(.+?)(\3))?\)/gi;
  function JH(e10) {
    let t10 = [], n10 = 0, r10;
    for (; r10 = qH.exec(e10); ) {
      r10.index - n10 > 0 && t10.push(e10.substring(n10, r10.index));
      let [, i10, a10, , o10] = r10;
      o10 ? t10.push({
        label: i10,
        href: a10,
        title: o10
      }) : t10.push({
        label: i10,
        href: a10
      }), n10 = r10.index + r10[0].length;
    }
    return n10 < e10.length && t10.push(e10.substring(n10)), new KH(t10);
  }
  const YH = {}, XH = new Dk(`quick-input-button-icon-`);
  function ZH(e10) {
    if (!e10) return;
    let t10, n10 = e10.dark.toString();
    return YH[n10] ? t10 = YH[n10] : (t10 = XH.nextId(), Hd(`.${t10}, .hc-light .${t10}`, `background-image: ${gf(e10.light || e10.dark)}`), Hd(`.vs-dark .${t10}, .hc-black .${t10}`, `background-image: ${gf(e10.dark)}`), YH[n10] = t10), t10;
  }
  function QH(e10, t10, n10) {
    let r10 = e10.iconClass || ZH(e10.iconPath);
    return e10.alwaysVisible && (r10 = r10 ? `${r10} always-visible` : `always-visible`), {
      id: t10,
      label: ``,
      tooltip: e10.tooltip || ``,
      class: r10,
      enabled: true,
      run: n10
    };
  }
  function $H(e10, t10, n10) {
    af(t10);
    let r10 = JH(e10), i10 = 0;
    for (let e11 of r10.nodes) if (typeof e11 == `string`) t10.append(...AD(e11));
    else {
      let r11 = e11.title;
      !r11 && e11.href.startsWith(`command:`) ? r11 = T(`executeCommand`, `Click to execute command '{0}'`, e11.href.substring(8)) : r11 || (r11 = e11.href);
      let a10 = H(`a`, {
        href: e11.href,
        title: r11,
        tabIndex: i10++
      }, e11.label);
      a10.style.textDecoration = `underline`;
      let o10 = (t11) => {
        Xd(t11) && Zd.stop(t11, true), n10.callback(e11.href);
      }, s10 = n10.disposables.add(new bD(a10, B.CLICK)).event, c10 = n10.disposables.add(new bD(a10, B.KEY_DOWN)).event, l10 = M.chain(c10, (e12) => e12.filter((e13) => {
        let t11 = new Hc(e13);
        return t11.equals(10) || t11.equals(3);
      }));
      n10.disposables.add(LE.addTarget(a10));
      let u10 = n10.disposables.add(new bD(a10, IE.Tap)).event;
      M.any(s10, u10, l10)(o10, null, n10.disposables), t10.appendChild(a10);
    }
  }
  var eU = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, tU = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const nU = `inQuickInput`, rU = new U(nU, false, T(`inQuickInput`, `Whether keyboard focus is inside the quick input control`)), iU = Ep.has(nU), aU = `quickInputType`, oU = new U(aU, void 0, T(`quickInputType`, `The type of the currently visible quick input`)), sU = `cursorAtEndOfQuickInputBox`, cU = new U(sU, false, T(`cursorAtEndOfQuickInputBox`, `Whether the cursor in the quick input is at the end of the input box`)), lU = Ep.has(sU), uU = {
    iconClass: sp.asClassName(L.quickInputBack),
    tooltip: T(`quickInput.back`, `Back`),
    handle: -1
  };
  var dU = (_qa = class extends j {
    constructor(t10) {
      super(), this.ui = t10, this._widgetUpdated = false, this.visible = false, this._enabled = true, this._busy = false, this._ignoreFocusOut = false, this._leftButtons = [], this._rightButtons = [], this._inlineButtons = [], this.buttonsUpdated = false, this._toggles = [], this.togglesUpdated = false, this.noValidationMessage = _qa.noPromptMessage, this._severity = sx.Ignore, this.onDidTriggerButtonEmitter = this._register(new N()), this.onDidHideEmitter = this._register(new N()), this.onWillHideEmitter = this._register(new N()), this.onDisposeEmitter = this._register(new N()), this.visibleDisposables = this._register(new A()), this.onDidHide = this.onDidHideEmitter.event;
    }
    get title() {
      return this._title;
    }
    set title(e10) {
      this._title = e10, this.update();
    }
    get description() {
      return this._description;
    }
    set description(e10) {
      this._description = e10, this.update();
    }
    get step() {
      return this._steps;
    }
    set step(e10) {
      this._steps = e10, this.update();
    }
    get totalSteps() {
      return this._totalSteps;
    }
    set totalSteps(e10) {
      this._totalSteps = e10, this.update();
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(e10) {
      this._enabled = e10, this.update();
    }
    get contextKey() {
      return this._contextKey;
    }
    set contextKey(e10) {
      this._contextKey = e10, this.update();
    }
    get busy() {
      return this._busy;
    }
    set busy(e10) {
      this._busy = e10, this.update();
    }
    get ignoreFocusOut() {
      return this._ignoreFocusOut;
    }
    set ignoreFocusOut(e10) {
      let t10 = this._ignoreFocusOut !== e10 && !bt;
      this._ignoreFocusOut = e10 && !bt, t10 && this.update();
    }
    get titleButtons() {
      return this._leftButtons.length ? [
        ...this._leftButtons,
        this._rightButtons
      ] : this._rightButtons;
    }
    get buttons() {
      return [
        ...this._leftButtons,
        ...this._rightButtons,
        ...this._inlineButtons
      ];
    }
    set buttons(e10) {
      this._leftButtons = e10.filter((e11) => e11 === uU), this._rightButtons = e10.filter((e11) => e11 !== uU && e11.location !== RH.Inline), this._inlineButtons = e10.filter((e11) => e11.location === RH.Inline), this.buttonsUpdated = true, this.update();
    }
    get toggles() {
      return this._toggles;
    }
    set toggles(e10) {
      this._toggles = e10 ?? [], this.togglesUpdated = true, this.update();
    }
    get validationMessage() {
      return this._validationMessage;
    }
    set validationMessage(e10) {
      this._validationMessage = e10, this.update();
    }
    get severity() {
      return this._severity;
    }
    set severity(e10) {
      this._severity = e10, this.update();
    }
    show() {
      this.visible || (this.visibleDisposables.add(this.ui.onDidTriggerButton((e10) => {
        this.buttons.indexOf(e10) !== -1 && this.onDidTriggerButtonEmitter.fire(e10);
      })), this.ui.show(this), this.visible = true, this._lastValidationMessage = void 0, this._lastSeverity = void 0, this.buttons.length && (this.buttonsUpdated = true), this.toggles.length && (this.togglesUpdated = true), this.update());
    }
    hide() {
      this.visible && this.ui.hide();
    }
    didHide(e10 = FH.Other) {
      this.visible = false, this.visibleDisposables.clear(), this.onDidHideEmitter.fire({
        reason: e10
      });
    }
    willHide(e10 = FH.Other) {
      this.onWillHideEmitter.fire({
        reason: e10
      });
    }
    update() {
      var _a3;
      if (!this.visible) return;
      let e10 = this.getTitle();
      e10 && this.ui.title.textContent !== e10 ? this.ui.title.textContent = e10 : !e10 && this.ui.title.innerHTML !== `&nbsp;` && (this.ui.title.innerText = `\xA0`);
      let t10 = this.getDescription();
      if (this.ui.description1.textContent !== t10 && (this.ui.description1.textContent = t10), this.ui.description2.textContent !== t10 && (this.ui.description2.textContent = t10), this._widgetUpdated && (this._widgetUpdated = false, this._widget ? af(this.ui.widget, this._widget) : af(this.ui.widget)), this.busy && !this.busyDelay && (this.busyDelay = new ol(), this.busyDelay.setIfNotSet(() => {
        this.visible && this.ui.progressBar.infinite();
      }, 800)), !this.busy && this.busyDelay && (this.ui.progressBar.stop(), this.busyDelay.cancel(), this.busyDelay = void 0), this.buttonsUpdated) {
        this.buttonsUpdated = false, this.ui.leftActionBar.clear();
        let e11 = this._leftButtons.map((e12, t12) => QH(e12, `id-${t12}`, async () => this.onDidTriggerButtonEmitter.fire(e12)));
        this.ui.leftActionBar.push(e11, {
          icon: true,
          label: false
        }), this.ui.rightActionBar.clear();
        let t11 = this._rightButtons.map((e12, t12) => QH(e12, `id-${t12}`, async () => this.onDidTriggerButtonEmitter.fire(e12)));
        this.ui.rightActionBar.push(t11, {
          icon: true,
          label: false
        }), this.ui.inlineActionBar.clear();
        let n11 = this._inlineButtons.map((e12, t12) => QH(e12, `id-${t12}`, async () => this.onDidTriggerButtonEmitter.fire(e12)));
        this.ui.inlineActionBar.push(n11, {
          icon: true,
          label: false
        });
      }
      if (this.togglesUpdated) {
        this.togglesUpdated = false;
        let e11 = ((_a3 = this.toggles) == null ? void 0 : _a3.filter((e12) => e12 instanceof WH)) ?? [];
        this.ui.inputBox.toggles = e11;
      }
      this.ui.ignoreFocusOut = this.ignoreFocusOut, this.ui.setEnabled(this.enabled), this.ui.setContextKey(this.contextKey);
      let n10 = this.validationMessage || this.noValidationMessage;
      this._lastValidationMessage !== n10 && (this._lastValidationMessage = n10, af(this.ui.message), $H(n10, this.ui.message, {
        callback: (e11) => {
          this.ui.linkOpenerDelegate(e11);
        },
        disposables: this.visibleDisposables
      })), this._lastSeverity !== this.severity && (this._lastSeverity = this.severity, this.showMessageDecoration(this.severity));
    }
    getTitle() {
      return this.title && this.step ? `${this.title} (${this.getSteps()})` : this.title ? this.title : this.step ? this.getSteps() : ``;
    }
    getDescription() {
      return this.description || ``;
    }
    getSteps() {
      return this.step && this.totalSteps ? T(`quickInput.steps`, `{0}/{1}`, this.step, this.totalSteps) : this.step ? String(this.step) : ``;
    }
    showMessageDecoration(e10) {
      if (this.ui.inputBox.showDecoration(e10), e10 !== sx.Ignore) {
        let t10 = this.ui.inputBox.stylesForType(e10);
        this.ui.message.style.color = t10.foreground ? `${t10.foreground}` : ``, this.ui.message.style.backgroundColor = t10.background ? `${t10.background}` : ``, this.ui.message.style.border = t10.border ? `1px solid ${t10.border}` : ``, this.ui.message.style.marginBottom = `-2px`;
      } else this.ui.message.style.color = ``, this.ui.message.style.backgroundColor = ``, this.ui.message.style.border = ``, this.ui.message.style.marginBottom = ``;
    }
    dispose() {
      this.hide(), this.onDisposeEmitter.fire(), super.dispose();
    }
  }, _qa.noPromptMessage = T(`inputModeEntry`, `Press 'Enter' to confirm your input or 'Escape' to cancel`), _qa), fU = (_ra = class extends dU {
    constructor() {
      super(...arguments), this._value = ``, this.onDidChangeValueEmitter = this._register(new N()), this.onWillAcceptEmitter = this._register(new N()), this.onDidAcceptEmitter = this._register(new N()), this.onDidCustomEmitter = this._register(new N()), this._items = [], this.itemsUpdated = false, this._canSelectMany = false, this._canAcceptInBackground = false, this._matchOnDescription = false, this._matchOnDetail = false, this._matchOnLabel = true, this._matchOnLabelMode = `fuzzy`, this._sortByLabel = true, this._keepScrollPosition = false, this._itemActivation = IH.FIRST, this._activeItems = [], this.activeItemsUpdated = false, this.activeItemsToConfirm = [], this.onDidChangeActiveEmitter = this._register(new N()), this._selectedItems = [], this.selectedItemsUpdated = false, this.selectedItemsToConfirm = [], this.onDidChangeSelectionEmitter = this._register(new N()), this.onDidTriggerItemButtonEmitter = this._register(new N()), this.onDidTriggerSeparatorButtonEmitter = this._register(new N()), this.valueSelectionUpdated = true, this._ok = `default`, this._customButton = false, this._focusEventBufferer = new di(), this.type = `quickPick`, this.filterValue = (e10) => e10, this.onDidChangeValue = this.onDidChangeValueEmitter.event, this.onWillAccept = this.onWillAcceptEmitter.event, this.onDidAccept = this.onDidAcceptEmitter.event, this.onDidChangeActive = this.onDidChangeActiveEmitter.event, this.onDidChangeSelection = this.onDidChangeSelectionEmitter.event, this.onDidTriggerItemButton = this.onDidTriggerItemButtonEmitter.event, this.onDidTriggerSeparatorButton = this.onDidTriggerSeparatorButtonEmitter.event;
    }
    get quickNavigate() {
      return this._quickNavigate;
    }
    set quickNavigate(e10) {
      this._quickNavigate = e10, this.update();
    }
    get value() {
      return this._value;
    }
    set value(e10) {
      this.doSetValue(e10);
    }
    doSetValue(e10, t10) {
      if (this._value !== e10) {
        if (this._value = e10, t10 || this.update(), this.visible) {
          let e11 = this.ui.list.filter(this.filterValue(this._value));
          e11 && this.trySelectFirst();
        }
        this.onDidChangeValueEmitter.fire(this._value);
      }
    }
    set ariaLabel(e10) {
      this._ariaLabel = e10, this.update();
    }
    get ariaLabel() {
      return this._ariaLabel;
    }
    get placeholder() {
      return this._placeholder;
    }
    set placeholder(e10) {
      this._placeholder = e10, this.update();
    }
    get items() {
      return this._items;
    }
    get scrollTop() {
      return this.ui.list.scrollTop;
    }
    set scrollTop(e10) {
      this.ui.list.scrollTop = e10;
    }
    set items(e10) {
      this._items = e10, this.itemsUpdated = true, this.update();
    }
    get canSelectMany() {
      return this._canSelectMany;
    }
    set canSelectMany(e10) {
      this._canSelectMany = e10, this.update();
    }
    get canAcceptInBackground() {
      return this._canAcceptInBackground;
    }
    set canAcceptInBackground(e10) {
      this._canAcceptInBackground = e10;
    }
    get matchOnDescription() {
      return this._matchOnDescription;
    }
    set matchOnDescription(e10) {
      this._matchOnDescription = e10, this.update();
    }
    get matchOnDetail() {
      return this._matchOnDetail;
    }
    set matchOnDetail(e10) {
      this._matchOnDetail = e10, this.update();
    }
    get matchOnLabel() {
      return this._matchOnLabel;
    }
    set matchOnLabel(e10) {
      this._matchOnLabel = e10, this.update();
    }
    get matchOnLabelMode() {
      return this._matchOnLabelMode;
    }
    set matchOnLabelMode(e10) {
      this._matchOnLabelMode = e10, this.update();
    }
    get sortByLabel() {
      return this._sortByLabel;
    }
    set sortByLabel(e10) {
      this._sortByLabel = e10, this.update();
    }
    get keepScrollPosition() {
      return this._keepScrollPosition;
    }
    set keepScrollPosition(e10) {
      this._keepScrollPosition = e10;
    }
    get itemActivation() {
      return this._itemActivation;
    }
    set itemActivation(e10) {
      this._itemActivation = e10;
    }
    get activeItems() {
      return this._activeItems;
    }
    set activeItems(e10) {
      this._activeItems = e10, this.activeItemsUpdated = true, this.update();
    }
    get selectedItems() {
      return this._selectedItems;
    }
    set selectedItems(e10) {
      this._selectedItems = e10, this.selectedItemsUpdated = true, this.update();
    }
    get keyMods() {
      return this._quickNavigate ? PH : this.ui.keyMods;
    }
    get valueSelection() {
      let e10 = this.ui.inputBox.getSelection();
      if (e10) return [
        e10.start,
        e10.end
      ];
    }
    set valueSelection(e10) {
      this._valueSelection = e10, this.valueSelectionUpdated = true, this.update();
    }
    get customButton() {
      return this._customButton;
    }
    set customButton(e10) {
      this._customButton = e10, this.update();
    }
    get customLabel() {
      return this._customButtonLabel;
    }
    set customLabel(e10) {
      this._customButtonLabel = e10, this.update();
    }
    get customHover() {
      return this._customButtonHover;
    }
    set customHover(e10) {
      this._customButtonHover = e10, this.update();
    }
    get ok() {
      return this._ok;
    }
    set ok(e10) {
      this._ok = e10, this.update();
    }
    get hideInput() {
      return !!this._hideInput;
    }
    set hideInput(e10) {
      this._hideInput = e10, this.update();
    }
    trySelectFirst() {
      this.canSelectMany || this.ui.list.focus(LH.First);
    }
    show() {
      this.visible || (this.visibleDisposables.add(this.ui.inputBox.onDidChange((e10) => {
        this.doSetValue(e10, true);
      })), this.visibleDisposables.add(this.ui.onDidAccept(() => {
        this.canSelectMany ? this.ui.list.getCheckedElements().length || (this._selectedItems = [], this.onDidChangeSelectionEmitter.fire(this.selectedItems)) : this.activeItems[0] && (this._selectedItems = [
          this.activeItems[0]
        ], this.onDidChangeSelectionEmitter.fire(this.selectedItems)), this.handleAccept(false);
      })), this.visibleDisposables.add(this.ui.onDidCustom(() => {
        this.onDidCustomEmitter.fire();
      })), this.visibleDisposables.add(this._focusEventBufferer.wrapEvent(this.ui.list.onDidChangeFocus, (e10, t10) => t10)((e10) => {
        this.activeItemsUpdated || this.activeItemsToConfirm !== this._activeItems && l(e10, this._activeItems, (e11, t10) => e11 === t10) || (this._activeItems = e10, this.onDidChangeActiveEmitter.fire(e10));
      })), this.visibleDisposables.add(this.ui.list.onDidChangeSelection(({ items: e10, event: t10 }) => {
        if (this.canSelectMany) {
          e10.length && this.ui.list.setSelectedElements([]);
          return;
        }
        this.selectedItemsToConfirm !== this._selectedItems && l(e10, this._selectedItems, (e11, t11) => e11 === t11) || (this._selectedItems = e10, this.onDidChangeSelectionEmitter.fire(e10), e10.length && this.handleAccept(Jd(t10) && t10.button === 1));
      })), this.visibleDisposables.add(this.ui.list.onChangedCheckedElements((e10) => {
        !this.canSelectMany || !this.visible || this.selectedItemsToConfirm !== this._selectedItems && l(e10, this._selectedItems, (e11, t10) => e11 === t10) || (this._selectedItems = e10, this.onDidChangeSelectionEmitter.fire(e10));
      })), this.visibleDisposables.add(this.ui.list.onButtonTriggered((e10) => this.onDidTriggerItemButtonEmitter.fire(e10))), this.visibleDisposables.add(this.ui.list.onSeparatorButtonTriggered((e10) => this.onDidTriggerSeparatorButtonEmitter.fire(e10))), this.visibleDisposables.add(this.registerQuickNavigation()), this.valueSelectionUpdated = true), super.show();
    }
    handleAccept(e10) {
      let t10 = false;
      this.onWillAcceptEmitter.fire({
        veto: () => t10 = true
      }), t10 || this.onDidAcceptEmitter.fire({
        inBackground: e10
      });
    }
    registerQuickNavigation() {
      return z(this.ui.container, B.KEY_UP, (e10) => {
        if (this.canSelectMany || !this._quickNavigate) return;
        let t10 = new Hc(e10), n10 = t10.keyCode, r10 = this._quickNavigate.keybindings, i10 = r10.some((e11) => {
          let r11 = e11.getChords();
          return r11.length > 1 ? false : r11[0].shiftKey && n10 === 4 ? !(t10.ctrlKey || t10.altKey || t10.metaKey) : !!(r11[0].altKey && n10 === 6 || r11[0].ctrlKey && n10 === 5 || r11[0].metaKey && n10 === 57);
        });
        i10 && (this.activeItems[0] && (this._selectedItems = [
          this.activeItems[0]
        ], this.onDidChangeSelectionEmitter.fire(this.selectedItems), this.handleAccept(false)), this._quickNavigate = void 0);
      });
    }
    update() {
      if (!this.visible) return;
      let t10 = this.keepScrollPosition ? this.scrollTop : 0, n10 = !!this.description, r10 = {
        title: !!this.title || !!this.step || !!this.titleButtons.length,
        description: n10,
        checkAll: this.canSelectMany && !this._hideCheckAll,
        checkBox: this.canSelectMany,
        inputBox: !this._hideInput,
        progressBar: !this._hideInput || n10,
        visibleCount: true,
        count: this.canSelectMany && !this._hideCountBadge,
        ok: this.ok === `default` ? this.canSelectMany : this.ok,
        list: true,
        message: !!this.validationMessage,
        customButton: this.customButton
      };
      this.ui.setVisibilities(r10), super.update(), this.ui.inputBox.value !== this.value && (this.ui.inputBox.value = this.value), this.valueSelectionUpdated && (this.valueSelectionUpdated = false, this.ui.inputBox.select(this._valueSelection && {
        start: this._valueSelection[0],
        end: this._valueSelection[1]
      })), this.ui.inputBox.placeholder !== (this.placeholder || ``) && (this.ui.inputBox.placeholder = this.placeholder || ``);
      let i10 = this.ariaLabel;
      !i10 && r10.inputBox && (i10 = this.placeholder || _ra.DEFAULT_ARIA_LABEL, this.title && (i10 += ` - ${this.title}`)), this.ui.list.ariaLabel !== i10 && (this.ui.list.ariaLabel = i10 ?? null), this.ui.list.matchOnDescription = this.matchOnDescription, this.ui.list.matchOnDetail = this.matchOnDetail, this.ui.list.matchOnLabel = this.matchOnLabel, this.ui.list.matchOnLabelMode = this.matchOnLabelMode, this.ui.list.sortByLabel = this.sortByLabel, this.itemsUpdated && (this.itemsUpdated = false, this._focusEventBufferer.bufferEvents(() => {
        switch (this.ui.list.setElements(this.items), this.ui.list.shouldLoop = !this.canSelectMany, this.ui.list.filter(this.filterValue(this.ui.inputBox.value)), this._itemActivation) {
          case IH.NONE:
            this._itemActivation = IH.FIRST;
            break;
          case IH.SECOND:
            this.ui.list.focus(LH.Second), this._itemActivation = IH.FIRST;
            break;
          case IH.LAST:
            this.ui.list.focus(LH.Last), this._itemActivation = IH.FIRST;
            break;
          default:
            this.trySelectFirst();
            break;
        }
      })), this.ui.container.classList.contains(`show-checkboxes`) !== !!this.canSelectMany && (this.canSelectMany ? this.ui.list.clearFocus() : this.trySelectFirst()), this.activeItemsUpdated && (this.activeItemsUpdated = false, this.activeItemsToConfirm = this._activeItems, this.ui.list.setFocusedElements(this.activeItems), this.activeItemsToConfirm === this._activeItems && (this.activeItemsToConfirm = null)), this.selectedItemsUpdated && (this.selectedItemsUpdated = false, this.selectedItemsToConfirm = this._selectedItems, this.canSelectMany ? this.ui.list.setCheckedElements(this.selectedItems) : this.ui.list.setSelectedElements(this.selectedItems), this.selectedItemsToConfirm === this._selectedItems && (this.selectedItemsToConfirm = null)), this.ui.customButton.label = this.customLabel || ``, this.ui.customButton.element.title = this.customHover || ``, r10.inputBox || (this.ui.list.domFocus(), this.canSelectMany && this.ui.list.focus(LH.First)), this.keepScrollPosition && (this.scrollTop = t10);
    }
    focus(e10) {
      this.ui.list.focus(e10), this.canSelectMany && this.ui.list.domFocus();
    }
    accept(e10) {
      e10 && !this._canAcceptInBackground || this.activeItems[0] && (this._selectedItems = [
        this.activeItems[0]
      ], this.onDidChangeSelectionEmitter.fire(this.selectedItems), this.handleAccept(e10 ?? false));
    }
  }, _ra.DEFAULT_ARIA_LABEL = T(`quickInputBox.ariaLabel`, `Type to narrow down results.`), _ra), pU = class extends dU {
    constructor() {
      super(...arguments), this._value = ``, this.valueSelectionUpdated = true, this._password = false, this.onDidValueChangeEmitter = this._register(new N()), this.onDidAcceptEmitter = this._register(new N()), this.type = `inputBox`, this.onDidChangeValue = this.onDidValueChangeEmitter.event, this.onDidAccept = this.onDidAcceptEmitter.event;
    }
    get value() {
      return this._value;
    }
    set value(e10) {
      this._value = e10 || ``, this.update();
    }
    get placeholder() {
      return this._placeholder;
    }
    set placeholder(e10) {
      this._placeholder = e10, this.update();
    }
    get password() {
      return this._password;
    }
    set password(e10) {
      this._password = e10, this.update();
    }
    show() {
      this.visible || (this.visibleDisposables.add(this.ui.inputBox.onDidChange((e10) => {
        e10 !== this.value && (this._value = e10, this.onDidValueChangeEmitter.fire(e10));
      })), this.visibleDisposables.add(this.ui.onDidAccept(() => this.onDidAcceptEmitter.fire())), this.valueSelectionUpdated = true), super.show();
    }
    update() {
      if (!this.visible) return;
      this.ui.container.classList.remove(`hidden-input`);
      let e10 = {
        title: !!this.title || !!this.step || !!this.titleButtons.length,
        description: !!this.description || !!this.step,
        inputBox: true,
        message: true,
        progressBar: true
      };
      this.ui.setVisibilities(e10), super.update(), this.ui.inputBox.value !== this.value && (this.ui.inputBox.value = this.value), this.valueSelectionUpdated && (this.valueSelectionUpdated = false, this.ui.inputBox.select(this._valueSelection && {
        start: this._valueSelection[0],
        end: this._valueSelection[1]
      })), this.ui.inputBox.placeholder !== (this.placeholder || ``) && (this.ui.inputBox.placeholder = this.placeholder || ``), this.ui.inputBox.password !== this.password && (this.ui.inputBox.password = this.password);
    }
  };
  let mU = class extends kE {
    constructor(e10, t10) {
      super(`element`, false, (e11) => this.getOverrideOptions(e11), e10, t10);
    }
    getOverrideOptions(e10) {
      let t10 = (Gd(e10.content) ? e10.content.textContent ?? `` : typeof e10.content == `string` ? e10.content : e10.content.value).includes(`
`);
      return {
        persistence: {
          hideOnKeyDown: false
        },
        appearance: {
          showHoverHint: t10,
          skipFadeInAnimation: true
        }
      };
    }
  };
  mU = eU([
    tU(0, ug),
    tU(1, OE)
  ], mU);
  const hU = {
    buttonBackground: `#0E639C`,
    buttonHoverBackground: `#006BB3`,
    buttonSeparator: K.white.toString(),
    buttonForeground: K.white.toString(),
    buttonBorder: void 0,
    buttonSecondaryBackground: void 0,
    buttonSecondaryForeground: void 0,
    buttonSecondaryHoverBackground: void 0
  };
  gU = class extends j {
    get onDidClick() {
      return this._onDidClick.event;
    }
    constructor(e10, t10) {
      super(), this._label = ``, this._onDidClick = this._register(new N()), this._onDidEscape = this._register(new N()), this.options = t10, this._element = document.createElement(`a`), this._element.classList.add(`monaco-button`), this._element.tabIndex = 0, this._element.setAttribute(`role`, `button`), this._element.classList.toggle(`secondary`, !!t10.secondary);
      let n10 = t10.secondary ? t10.buttonSecondaryBackground : t10.buttonBackground, r10 = t10.secondary ? t10.buttonSecondaryForeground : t10.buttonForeground;
      this._element.style.color = r10 || ``, this._element.style.backgroundColor = n10 || ``, t10.supportShortLabel && (this._labelShortElement = document.createElement(`div`), this._labelShortElement.classList.add(`monaco-button-label-short`), this._element.appendChild(this._labelShortElement), this._labelElement = document.createElement(`div`), this._labelElement.classList.add(`monaco-button-label`), this._element.appendChild(this._labelElement), this._element.classList.add(`monaco-text-button-with-short-label`)), typeof t10.title == `string` && this.setTitle(t10.title), typeof t10.ariaLabel == `string` && this._element.setAttribute(`aria-label`, t10.ariaLabel), e10.appendChild(this._element), this._register(LE.addTarget(this._element)), [
        B.CLICK,
        IE.Tap
      ].forEach((e11) => {
        this._register(z(this._element, e11, (e12) => {
          if (!this.enabled) {
            Zd.stop(e12);
            return;
          }
          this._onDidClick.fire(e12);
        }));
      }), this._register(z(this._element, B.KEY_DOWN, (e11) => {
        let t11 = new Hc(e11), n11 = false;
        this.enabled && (t11.equals(3) || t11.equals(10)) ? (this._onDidClick.fire(e11), n11 = true) : t11.equals(9) && (this._onDidEscape.fire(e11), this._element.blur(), n11 = true), n11 && Zd.stop(t11, true);
      })), this._register(z(this._element, B.MOUSE_OVER, (e11) => {
        this._element.classList.contains(`disabled`) || this.updateBackground(true);
      })), this._register(z(this._element, B.MOUSE_OUT, (e11) => {
        this.updateBackground(false);
      })), this.focusTracker = this._register(tf(this._element)), this._register(this.focusTracker.onDidFocus(() => {
        this.enabled && this.updateBackground(true);
      })), this._register(this.focusTracker.onDidBlur(() => {
        this.enabled && this.updateBackground(false);
      }));
    }
    dispose() {
      super.dispose(), this._element.remove();
    }
    getContentElements(e10) {
      let t10 = [];
      for (let n10 of AD(e10)) if (typeof n10 == `string`) {
        if (n10 = n10.trim(), n10 === ``) continue;
        let e11 = document.createElement(`span`);
        e11.textContent = n10, t10.push(e11);
      } else t10.push(n10);
      return t10;
    }
    updateBackground(e10) {
      let t10;
      t10 = this.options.secondary ? e10 ? this.options.buttonSecondaryHoverBackground : this.options.buttonSecondaryBackground : e10 ? this.options.buttonHoverBackground : this.options.buttonBackground, t10 && (this._element.style.backgroundColor = t10);
    }
    get element() {
      return this._element;
    }
    set label(e10) {
      var _a3;
      if (this._label === e10 || bk(this._label) && bk(e10) && xk(this._label, e10)) return;
      this._element.classList.add(`monaco-text-button`);
      let t10 = this.options.supportShortLabel ? this._labelElement : this._element;
      if (bk(e10)) {
        let n11 = Gk(e10, {
          inline: true
        });
        n11.dispose();
        let r10 = (_a3 = n11.element.querySelector(`p`)) == null ? void 0 : _a3.innerHTML;
        if (r10) {
          let e11 = yu(r10, {
            ADD_TAGS: [
              `b`,
              `i`,
              `u`,
              `code`,
              `span`
            ],
            ALLOWED_ATTR: [
              `class`
            ],
            RETURN_TRUSTED_TYPE: true
          });
          t10.innerHTML = e11;
        } else af(t10);
      } else this.options.supportIcons ? af(t10, ...this.getContentElements(e10)) : t10.textContent = e10;
      let n10 = ``;
      typeof this.options.title == `string` ? n10 = this.options.title : this.options.title && (n10 = Qk(e10)), this.setTitle(n10), typeof this.options.ariaLabel == `string` ? this._element.setAttribute(`aria-label`, this.options.ariaLabel) : this.options.ariaLabel && this._element.setAttribute(`aria-label`, n10), this._label = e10;
    }
    get label() {
      return this._label;
    }
    set icon(e10) {
      this._element.classList.add(...sp.asClassNameArray(e10));
    }
    set enabled(e10) {
      e10 ? (this._element.classList.remove(`disabled`), this._element.setAttribute(`aria-disabled`, `false`), this._element.tabIndex = 0) : (this._element.classList.add(`disabled`), this._element.setAttribute(`aria-disabled`, `true`));
    }
    get enabled() {
      return !this._element.classList.contains(`disabled`);
    }
    setTitle(e10) {
      !this._hover && e10 !== `` ? this._hover = this._register(RP().setupManagedHover(this.options.hoverDelegate ?? PP(`mouse`), this._element, e10)) : this._hover && this._hover.update(e10);
    }
  };
  _U = class {
    constructor(e10, t10, n10) {
      this.options = t10, this.styles = n10, this.count = 0, this.element = V(e10, H(`.monaco-count-badge`)), this.countFormat = this.options.countFormat || `{0}`, this.titleFormat = this.options.titleFormat || ``, this.setCount(this.options.count || 0);
    }
    setCount(e10) {
      this.count = e10, this.render();
    }
    setTitleFormat(e10) {
      this.titleFormat = e10, this.render();
    }
    render() {
      this.element.textContent = ps(this.countFormat, this.count), this.element.title = ps(this.titleFormat, this.count), this.element.style.backgroundColor = this.styles.badgeBackground ?? ``, this.element.style.color = this.styles.badgeForeground ?? ``, this.styles.badgeBorder && (this.element.style.border = `1px solid ${this.styles.badgeBorder}`);
    }
  };
  const vU = `done`, yU = `active`, bU = `infinite`, xU = `infinite-long-running`, SU = `discrete`;
  var CU = (_sa = class extends j {
    constructor(t10, n10) {
      super(), this.progressSignal = this._register(new Br()), this.workedVal = 0, this.showDelayedScheduler = this._register(new cl(() => df(this.element), 0)), this.longRunningScheduler = this._register(new cl(() => this.infiniteLongRunning(), _sa.LONG_RUNNING_INFINITE_THRESHOLD)), this.create(t10, n10);
    }
    create(e10, t10) {
      this.element = document.createElement(`div`), this.element.classList.add(`monaco-progress-container`), this.element.setAttribute(`role`, `progressbar`), this.element.setAttribute(`aria-valuemin`, `0`), e10.appendChild(this.element), this.bit = document.createElement(`div`), this.bit.classList.add(`progress-bit`), this.bit.style.backgroundColor = (t10 == null ? void 0 : t10.progressBarBackground) || `#0E70C0`, this.element.appendChild(this.bit);
    }
    off() {
      this.bit.style.width = `inherit`, this.bit.style.opacity = `1`, this.element.classList.remove(yU, bU, xU, SU), this.workedVal = 0, this.totalWork = void 0, this.longRunningScheduler.cancel(), this.progressSignal.clear();
    }
    stop() {
      return this.doDone(false);
    }
    doDone(e10) {
      return this.element.classList.add(vU), this.element.classList.contains(bU) ? (this.bit.style.opacity = `0`, e10 ? setTimeout(() => this.off(), 200) : this.off()) : (this.bit.style.width = `inherit`, e10 ? setTimeout(() => this.off(), 200) : this.off()), this;
    }
    infinite() {
      return this.bit.style.width = `2%`, this.bit.style.opacity = `1`, this.element.classList.remove(SU, vU, xU), this.element.classList.add(yU, bU), this.longRunningScheduler.schedule(), this;
    }
    infiniteLongRunning() {
      this.element.classList.add(xU);
    }
    getContainer() {
      return this.element;
    }
  }, _sa.LONG_RUNNING_INFINITE_THRESHOLD = 1e4, _sa);
  const wU = T(`caseDescription`, `Match Case`), TU = T(`wordsDescription`, `Match Whole Word`), EU = T(`regexDescription`, `Use Regular Expression`);
  let AU, jU;
  DU = class extends WH {
    constructor(e10) {
      super({
        icon: L.caseSensitive,
        title: wU + e10.appendTitle,
        isChecked: e10.isChecked,
        hoverDelegate: e10.hoverDelegate ?? PP(`element`),
        inputActiveOptionBorder: e10.inputActiveOptionBorder,
        inputActiveOptionForeground: e10.inputActiveOptionForeground,
        inputActiveOptionBackground: e10.inputActiveOptionBackground
      });
    }
  };
  OU = class extends WH {
    constructor(e10) {
      super({
        icon: L.wholeWord,
        title: TU + e10.appendTitle,
        isChecked: e10.isChecked,
        hoverDelegate: e10.hoverDelegate ?? PP(`element`),
        inputActiveOptionBorder: e10.inputActiveOptionBorder,
        inputActiveOptionForeground: e10.inputActiveOptionForeground,
        inputActiveOptionBackground: e10.inputActiveOptionBackground
      });
    }
  };
  kU = class extends WH {
    constructor(e10) {
      super({
        icon: L.regex,
        title: EU + e10.appendTitle,
        isChecked: e10.isChecked,
        hoverDelegate: e10.hoverDelegate ?? PP(`element`),
        inputActiveOptionBorder: e10.inputActiveOptionBorder,
        inputActiveOptionForeground: e10.inputActiveOptionForeground,
        inputActiveOptionBackground: e10.inputActiveOptionBackground
      });
    }
  };
  AU = class {
    constructor(e10, t10 = 0, n10 = e10.length, r10 = t10 - 1) {
      this.items = e10, this.start = t10, this.end = n10, this.index = r10;
    }
    current() {
      return this.index === this.start - 1 || this.index === this.end ? null : this.items[this.index];
    }
    next() {
      return this.index = Math.min(this.index + 1, this.end), this.current();
    }
    previous() {
      return this.index = Math.max(this.index - 1, this.start - 1), this.current();
    }
    first() {
      return this.index = this.start, this.current();
    }
    last() {
      return this.index = this.end - 1, this.current();
    }
  };
  jU = class {
    constructor(e10 = [], t10 = 10) {
      this._initialize(e10), this._limit = t10, this._onChange();
    }
    getHistory() {
      return this._elements;
    }
    add(e10) {
      this._history.delete(e10), this._history.add(e10), this._onChange();
    }
    next() {
      return this._navigator.next();
    }
    previous() {
      return this._currentPosition() === 0 ? null : this._navigator.previous();
    }
    current() {
      return this._navigator.current();
    }
    first() {
      return this._navigator.first();
    }
    last() {
      return this._navigator.last();
    }
    isLast() {
      return this._currentPosition() >= this._elements.length - 1;
    }
    isNowhere() {
      return this._navigator.current() === null;
    }
    has(e10) {
      return this._history.has(e10);
    }
    _onChange() {
      this._reduceToLimit();
      let e10 = this._elements;
      this._navigator = new AU(e10, 0, e10.length, e10.length);
    }
    _reduceToLimit() {
      let e10 = this._elements;
      e10.length > this._limit && this._initialize(e10.slice(e10.length - this._limit));
    }
    _currentPosition() {
      let e10 = this._navigator.current();
      return e10 ? this._elements.indexOf(e10) : -1;
    }
    _initialize(e10) {
      this._history = /* @__PURE__ */ new Set();
      for (let t10 of e10) this._history.add(t10);
    }
    get _elements() {
      let e10 = [];
      return this._history.forEach((t10) => e10.push(t10)), e10;
    }
  };
  const MU = H;
  let NU;
  NU = class extends RE {
    constructor(e10, t10, n10) {
      super(), this.state = `idle`, this.maxHeight = 1 / 0, this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._onDidHeightChange = this._register(new N()), this.onDidHeightChange = this._onDidHeightChange.event, this.contextViewProvider = t10, this.options = n10, this.message = null, this.placeholder = this.options.placeholder || ``, this.tooltip = this.options.tooltip ?? (this.placeholder || ``), this.ariaLabel = this.options.ariaLabel || ``, this.options.validationOptions && (this.validation = this.options.validationOptions.validation), this.element = V(e10, MU(`.monaco-inputbox.idle`));
      let r10 = this.options.flexibleHeight ? `textarea` : `input`, i10 = V(this.element, MU(`.ibwrapper`));
      if (this.input = V(i10, MU(r10 + `.input.empty`)), this.input.setAttribute(`autocorrect`, `off`), this.input.setAttribute(`autocapitalize`, `off`), this.input.setAttribute(`spellcheck`, `false`), this.onfocus(this.input, () => this.element.classList.add(`synthetic-focus`)), this.onblur(this.input, () => this.element.classList.remove(`synthetic-focus`)), this.options.flexibleHeight) {
        this.maxHeight = typeof this.options.flexibleMaxHeight == `number` ? this.options.flexibleMaxHeight : 1 / 0, this.mirror = V(i10, MU(`div.mirror`)), this.mirror.innerText = `\xA0`, this.scrollableElement = new cD(this.element, {
          vertical: 1
        }), this.options.flexibleWidth && (this.input.setAttribute(`wrap`, `off`), this.mirror.style.whiteSpace = `pre`, this.mirror.style.wordWrap = `initial`), V(e10, this.scrollableElement.getDomNode()), this._register(this.scrollableElement), this._register(this.scrollableElement.onScroll((e11) => this.input.scrollTop = e11.scrollTop));
        let t11 = this._register(new bD(e10.ownerDocument, `selectionchange`)), n11 = M.filter(t11.event, () => {
          let t12 = e10.ownerDocument.getSelection();
          return (t12 == null ? void 0 : t12.anchorNode) === i10;
        });
        this._register(n11(this.updateScrollDimensions, this)), this._register(this.onDidHeightChange(this.updateScrollDimensions, this));
      } else this.input.type = this.options.type || `text`, this.input.setAttribute(`wrap`, `off`);
      this.ariaLabel && this.input.setAttribute(`aria-label`, this.ariaLabel), this.placeholder && !this.options.showPlaceholderOnFocus && this.setPlaceHolder(this.placeholder), this.tooltip && this.setTooltip(this.tooltip), this.oninput(this.input, () => this.onValueChange()), this.onblur(this.input, () => this.onBlur()), this.onfocus(this.input, () => this.onFocus()), this._register(this.ignoreGesture(this.input)), setTimeout(() => this.updateMirror(), 0), this.options.actions && (this.actionbar = this._register(new jI(this.element)), this.actionbar.push(this.options.actions, {
        icon: true,
        label: false
      })), this.applyStyles();
    }
    onBlur() {
      this._hideMessage(), this.options.showPlaceholderOnFocus && this.input.setAttribute(`placeholder`, ``);
    }
    onFocus() {
      this._showMessage(), this.options.showPlaceholderOnFocus && this.input.setAttribute(`placeholder`, this.placeholder || ``);
    }
    setPlaceHolder(e10) {
      this.placeholder = e10, this.input.setAttribute(`placeholder`, e10);
    }
    setTooltip(e10) {
      this.tooltip = e10, this.hover ? this.hover.update(e10) : this.hover = this._register(RP().setupManagedHover(PP(`mouse`), this.input, e10));
    }
    get inputElement() {
      return this.input;
    }
    get value() {
      return this.input.value;
    }
    set value(e10) {
      this.input.value !== e10 && (this.input.value = e10, this.onValueChange());
    }
    get height() {
      return typeof this.cachedHeight == `number` ? this.cachedHeight : xd(this.element);
    }
    focus() {
      this.input.focus();
    }
    blur() {
      this.input.blur();
    }
    hasFocus() {
      return kd(this.input);
    }
    select(e10 = null) {
      this.input.select(), e10 && (this.input.setSelectionRange(e10.start, e10.end), e10.end === this.input.value.length && (this.input.scrollLeft = this.input.scrollWidth));
    }
    isSelectionAtEnd() {
      return this.input.selectionEnd === this.input.value.length && this.input.selectionStart === this.input.selectionEnd;
    }
    getSelection() {
      let e10 = this.input.selectionStart;
      if (e10 === null) return null;
      let t10 = this.input.selectionEnd ?? e10;
      return {
        start: e10,
        end: t10
      };
    }
    enable() {
      this.input.removeAttribute(`disabled`);
    }
    disable() {
      this.blur(), this.input.disabled = true, this._hideMessage();
    }
    set paddingRight(e10) {
      this.input.style.width = `calc(100% - ${e10}px)`, this.mirror && (this.mirror.style.paddingRight = e10 + `px`);
    }
    updateScrollDimensions() {
      if (typeof this.cachedContentHeight != `number` || typeof this.cachedHeight != `number` || !this.scrollableElement) return;
      let e10 = this.cachedContentHeight, t10 = this.cachedHeight, n10 = this.input.scrollTop;
      this.scrollableElement.setScrollDimensions({
        scrollHeight: e10,
        height: t10
      }), this.scrollableElement.setScrollPosition({
        scrollTop: n10
      });
    }
    showMessage(e10, t10) {
      if (this.state === `open` && Le(this.message, e10)) return;
      this.message = e10, this.element.classList.remove(`idle`), this.element.classList.remove(`info`), this.element.classList.remove(`warning`), this.element.classList.remove(`error`), this.element.classList.add(this.classForType(e10.type));
      let n10 = this.stylesForType(this.message.type);
      this.element.style.border = `1px solid ${vf(n10.border, `transparent`)}`, this.message.content && (this.hasFocus() || t10) && this._showMessage();
    }
    hideMessage() {
      this.message = null, this.element.classList.remove(`info`), this.element.classList.remove(`warning`), this.element.classList.remove(`error`), this.element.classList.add(`idle`), this._hideMessage(), this.applyStyles();
    }
    validate() {
      let e10 = null;
      return this.validation && (e10 = this.validation(this.value), e10 ? (this.inputElement.setAttribute(`aria-invalid`, `true`), this.showMessage(e10)) : this.inputElement.hasAttribute(`aria-invalid`) && (this.inputElement.removeAttribute(`aria-invalid`), this.hideMessage())), e10 == null ? void 0 : e10.type;
    }
    stylesForType(e10) {
      let t10 = this.options.inputBoxStyles;
      switch (e10) {
        case 1:
          return {
            border: t10.inputValidationInfoBorder,
            background: t10.inputValidationInfoBackground,
            foreground: t10.inputValidationInfoForeground
          };
        case 2:
          return {
            border: t10.inputValidationWarningBorder,
            background: t10.inputValidationWarningBackground,
            foreground: t10.inputValidationWarningForeground
          };
        default:
          return {
            border: t10.inputValidationErrorBorder,
            background: t10.inputValidationErrorBackground,
            foreground: t10.inputValidationErrorForeground
          };
      }
    }
    classForType(e10) {
      switch (e10) {
        case 1:
          return `info`;
        case 2:
          return `warning`;
        default:
          return `error`;
      }
    }
    _showMessage() {
      if (!this.contextViewProvider || !this.message) return;
      let e10, t10 = () => e10.style.width = vd(this.element) + `px`;
      this.contextViewProvider.showContextView({
        getAnchor: () => this.element,
        anchorAlignment: 1,
        render: (n11) => {
          if (!this.message) return null;
          e10 = V(n11, MU(`.monaco-inputbox-container`)), t10();
          let r10 = {
            inline: true,
            className: `monaco-inputbox-message`
          }, i10 = this.message.formatContent ? SD(this.message.content, r10) : xD(this.message.content, r10);
          i10.classList.add(this.classForType(this.message.type));
          let a10 = this.stylesForType(this.message.type);
          return i10.style.backgroundColor = a10.background ?? ``, i10.style.color = a10.foreground ?? ``, i10.style.border = a10.border ? `1px solid ${a10.border}` : ``, V(e10, i10), null;
        },
        onHide: () => {
          this.state = `closed`;
        },
        layout: t10
      });
      let n10;
      n10 = this.message.type === 3 ? T(`alertErrorMessage`, `Error: {0}`, this.message.content) : this.message.type === 2 ? T(`alertWarningMessage`, `Warning: {0}`, this.message.content) : T(`alertInfoMessage`, `Info: {0}`, this.message.content), JA(n10), this.state = `open`;
    }
    _hideMessage() {
      this.contextViewProvider && (this.state === `open` && this.contextViewProvider.hideContextView(), this.state = `idle`);
    }
    onValueChange() {
      this._onDidChange.fire(this.value), this.validate(), this.updateMirror(), this.input.classList.toggle(`empty`, !this.value), this.state === `open` && this.contextViewProvider && this.contextViewProvider.layout();
    }
    updateMirror() {
      if (!this.mirror) return;
      let e10 = this.value, t10 = e10.charCodeAt(e10.length - 1), n10 = t10 === 10 ? ` ` : ``, r10 = (e10 + n10).replace(/\u000c/g, ``);
      r10 ? this.mirror.textContent = e10 + n10 : this.mirror.innerText = `\xA0`, this.layout();
    }
    applyStyles() {
      let e10 = this.options.inputBoxStyles, t10 = e10.inputBackground ?? ``, n10 = e10.inputForeground ?? ``, r10 = e10.inputBorder ?? ``;
      this.element.style.backgroundColor = t10, this.element.style.color = n10, this.input.style.backgroundColor = `inherit`, this.input.style.color = n10, this.element.style.border = `1px solid ${vf(r10, `transparent`)}`;
    }
    layout() {
      if (!this.mirror) return;
      let e10 = this.cachedContentHeight;
      this.cachedContentHeight = xd(this.mirror), e10 !== this.cachedContentHeight && (this.cachedHeight = Math.min(this.cachedContentHeight, this.maxHeight), this.input.style.height = this.cachedHeight + `px`, this._onDidHeightChange.fire(this.cachedContentHeight));
    }
    insertAtCursor(e10) {
      let t10 = this.inputElement, n10 = t10.selectionStart, r10 = t10.selectionEnd, i10 = t10.value;
      n10 !== null && r10 !== null && (this.value = i10.substr(0, n10) + e10 + i10.substr(r10), t10.setSelectionRange(n10 + 1, n10 + 1), this.layout());
    }
    dispose() {
      var _a3;
      this._hideMessage(), this.message = null, (_a3 = this.actionbar) == null ? void 0 : _a3.dispose(), super.dispose();
    }
  };
  PU = class extends NU {
    constructor(e10, t10, n10) {
      let r10 = T({
        key: `history.inputbox.hint.suffix.noparens`,
        comment: [
          `Text is the suffix of an input field placeholder coming after the action the input field performs, this will be used when the input field ends in a closing parenthesis ")", for example "Filter (e.g. text, !exclude)". The character inserted into the final string is \u21C5 to represent the up and down arrow keys.`
        ]
      }, ` or {0} for history`, `\u21C5`), i10 = T({
        key: `history.inputbox.hint.suffix.inparens`,
        comment: [
          `Text is the suffix of an input field placeholder coming after the action the input field performs, this will be used when the input field does NOT end in a closing parenthesis (eg. "Find"). The character inserted into the final string is \u21C5 to represent the up and down arrow keys.`
        ]
      }, ` ({0} for history)`, `\u21C5`);
      super(e10, t10, n10), this._onDidFocus = this._register(new N()), this.onDidFocus = this._onDidFocus.event, this._onDidBlur = this._register(new N()), this.onDidBlur = this._onDidBlur.event, this.history = new jU(n10.history, 100);
      let a10 = () => {
        if (n10.showHistoryHint && n10.showHistoryHint() && !this.placeholder.endsWith(r10) && !this.placeholder.endsWith(i10) && this.history.getHistory().length) {
          let e11 = this.placeholder.endsWith(`)`) ? r10 : i10, t11 = this.placeholder + e11;
          n10.showPlaceholderOnFocus && !kd(this.input) ? this.placeholder = t11 : this.setPlaceHolder(t11);
        }
      };
      this.observer = new MutationObserver((e11, t11) => {
        e11.forEach((e12) => {
          e12.target.textContent || a10();
        });
      }), this.observer.observe(this.input, {
        attributeFilter: [
          `class`
        ]
      }), this.onfocus(this.input, () => a10()), this.onblur(this.input, () => {
        let e11 = (e12) => {
          if (this.placeholder.endsWith(e12)) {
            let t11 = this.placeholder.slice(0, this.placeholder.length - e12.length);
            return n10.showPlaceholderOnFocus ? this.placeholder = t11 : this.setPlaceHolder(t11), true;
          } else return false;
        };
        e11(i10) || e11(r10);
      });
    }
    dispose() {
      super.dispose(), this.observer && (this.observer.disconnect(), this.observer = void 0);
    }
    addToHistory(e10) {
      this.value && (e10 || this.value !== this.getCurrentValue()) && this.history.add(this.value);
    }
    isAtLastInHistory() {
      return this.history.isLast();
    }
    isNowhereInHistory() {
      return this.history.isNowhere();
    }
    showNextValue() {
      this.history.has(this.value) || this.addToHistory();
      let e10 = this.getNextValue();
      e10 && (e10 = e10 === this.value ? this.getNextValue() : e10), this.value = e10 ?? ``, YA(this.value ? this.value : T(`clearedInput`, `Cleared Input`));
    }
    showPreviousValue() {
      this.history.has(this.value) || this.addToHistory();
      let e10 = this.getPreviousValue();
      e10 && (e10 = e10 === this.value ? this.getPreviousValue() : e10), e10 && (this.value = e10, YA(this.value));
    }
    setPlaceHolder(e10) {
      super.setPlaceHolder(e10), this.setTooltip(e10);
    }
    onBlur() {
      super.onBlur(), this._onDidBlur.fire();
    }
    onFocus() {
      super.onFocus(), this._onDidFocus.fire();
    }
    getCurrentValue() {
      let e10 = this.history.current();
      return e10 || (e10 = this.history.last(), this.history.next()), e10;
    }
    getPreviousValue() {
      return this.history.previous() || this.history.first();
    }
    getNextValue() {
      return this.history.next();
    }
  };
  const FU = T(`defaultLabel`, `input`);
  IU = class extends RE {
    constructor(e10, t10, n10) {
      super(), this.fixFocusOnOptionClickEnabled = true, this.imeSessionInProgress = false, this.additionalTogglesDisposables = this._register(new Br()), this.additionalToggles = [], this._onDidOptionChange = this._register(new N()), this.onDidOptionChange = this._onDidOptionChange.event, this._onKeyDown = this._register(new N()), this.onKeyDown = this._onKeyDown.event, this._onMouseDown = this._register(new N()), this.onMouseDown = this._onMouseDown.event, this._onInput = this._register(new N()), this._onKeyUp = this._register(new N()), this._onCaseSensitiveKeyDown = this._register(new N()), this.onCaseSensitiveKeyDown = this._onCaseSensitiveKeyDown.event, this._onRegexKeyDown = this._register(new N()), this.onRegexKeyDown = this._onRegexKeyDown.event, this._lastHighlightFindOptions = 0, this.placeholder = n10.placeholder || ``, this.validation = n10.validation, this.label = n10.label || FU, this.showCommonFindToggles = !!n10.showCommonFindToggles;
      let r10 = n10.appendCaseSensitiveLabel || ``, i10 = n10.appendWholeWordsLabel || ``, a10 = n10.appendRegexLabel || ``, o10 = n10.history || [], s10 = !!n10.flexibleHeight, c10 = !!n10.flexibleWidth, l10 = n10.flexibleMaxHeight;
      this.domNode = document.createElement(`div`), this.domNode.classList.add(`monaco-findInput`), this.inputBox = this._register(new PU(this.domNode, t10, {
        placeholder: this.placeholder || ``,
        ariaLabel: this.label || ``,
        validationOptions: {
          validation: this.validation
        },
        history: o10,
        showHistoryHint: n10.showHistoryHint,
        flexibleHeight: s10,
        flexibleWidth: c10,
        flexibleMaxHeight: l10,
        inputBoxStyles: n10.inputBoxStyles
      }));
      let u10 = this._register(FP());
      if (this.showCommonFindToggles) {
        this.regex = this._register(new kU({
          appendTitle: a10,
          isChecked: false,
          hoverDelegate: u10,
          ...n10.toggleStyles
        })), this._register(this.regex.onChange((e12) => {
          this._onDidOptionChange.fire(e12), !e12 && this.fixFocusOnOptionClickEnabled && this.inputBox.focus(), this.validate();
        })), this._register(this.regex.onKeyDown((e12) => {
          this._onRegexKeyDown.fire(e12);
        })), this.wholeWords = this._register(new OU({
          appendTitle: i10,
          isChecked: false,
          hoverDelegate: u10,
          ...n10.toggleStyles
        })), this._register(this.wholeWords.onChange((e12) => {
          this._onDidOptionChange.fire(e12), !e12 && this.fixFocusOnOptionClickEnabled && this.inputBox.focus(), this.validate();
        })), this.caseSensitive = this._register(new DU({
          appendTitle: r10,
          isChecked: false,
          hoverDelegate: u10,
          ...n10.toggleStyles
        })), this._register(this.caseSensitive.onChange((e12) => {
          this._onDidOptionChange.fire(e12), !e12 && this.fixFocusOnOptionClickEnabled && this.inputBox.focus(), this.validate();
        })), this._register(this.caseSensitive.onKeyDown((e12) => {
          this._onCaseSensitiveKeyDown.fire(e12);
        }));
        let e11 = [
          this.caseSensitive.domNode,
          this.wholeWords.domNode,
          this.regex.domNode
        ];
        this.onkeydown(this.domNode, (t11) => {
          if (t11.equals(15) || t11.equals(17) || t11.equals(9)) {
            let n11 = e11.indexOf(this.domNode.ownerDocument.activeElement);
            if (n11 >= 0) {
              let r11 = -1;
              t11.equals(17) ? r11 = (n11 + 1) % e11.length : t11.equals(15) && (r11 = n11 === 0 ? e11.length - 1 : n11 - 1), t11.equals(9) ? (e11[n11].blur(), this.inputBox.focus()) : r11 >= 0 && e11[r11].focus(), Zd.stop(t11, true);
            }
          }
        });
      }
      this.controls = document.createElement(`div`), this.controls.className = `controls`, this.controls.style.display = this.showCommonFindToggles ? `` : `none`, this.caseSensitive && this.controls.append(this.caseSensitive.domNode), this.wholeWords && this.controls.appendChild(this.wholeWords.domNode), this.regex && this.controls.appendChild(this.regex.domNode), this.setAdditionalToggles(n10 == null ? void 0 : n10.additionalToggles), this.controls && this.domNode.appendChild(this.controls), e10 == null ? void 0 : e10.appendChild(this.domNode), this._register(z(this.inputBox.inputElement, `compositionstart`, (e11) => {
        this.imeSessionInProgress = true;
      })), this._register(z(this.inputBox.inputElement, `compositionend`, (e11) => {
        this.imeSessionInProgress = false, this._onInput.fire();
      })), this.onkeydown(this.inputBox.inputElement, (e11) => this._onKeyDown.fire(e11)), this.onkeyup(this.inputBox.inputElement, (e11) => this._onKeyUp.fire(e11)), this.oninput(this.inputBox.inputElement, (e11) => this._onInput.fire()), this.onmousedown(this.inputBox.inputElement, (e11) => this._onMouseDown.fire(e11));
    }
    get onDidChange() {
      return this.inputBox.onDidChange;
    }
    layout(e10) {
      this.inputBox.layout(), this.updateInputBoxPadding(e10.collapsedFindWidget);
    }
    enable() {
      var _a3, _b3, _c3;
      this.domNode.classList.remove(`disabled`), this.inputBox.enable(), (_a3 = this.regex) == null ? void 0 : _a3.enable(), (_b3 = this.wholeWords) == null ? void 0 : _b3.enable(), (_c3 = this.caseSensitive) == null ? void 0 : _c3.enable();
      for (let e10 of this.additionalToggles) e10.enable();
    }
    disable() {
      var _a3, _b3, _c3;
      this.domNode.classList.add(`disabled`), this.inputBox.disable(), (_a3 = this.regex) == null ? void 0 : _a3.disable(), (_b3 = this.wholeWords) == null ? void 0 : _b3.disable(), (_c3 = this.caseSensitive) == null ? void 0 : _c3.disable();
      for (let e10 of this.additionalToggles) e10.disable();
    }
    setFocusInputOnOptionClick(e10) {
      this.fixFocusOnOptionClickEnabled = e10;
    }
    setEnabled(e10) {
      e10 ? this.enable() : this.disable();
    }
    setAdditionalToggles(e10) {
      for (let e11 of this.additionalToggles) e11.domNode.remove();
      this.additionalToggles = [], this.additionalTogglesDisposables.value = new A();
      for (let t10 of e10 ?? []) this.additionalTogglesDisposables.value.add(t10), this.controls.appendChild(t10.domNode), this.additionalTogglesDisposables.value.add(t10.onChange((e11) => {
        this._onDidOptionChange.fire(e11), !e11 && this.fixFocusOnOptionClickEnabled && this.inputBox.focus();
      })), this.additionalToggles.push(t10);
      this.additionalToggles.length > 0 && (this.controls.style.display = ``), this.updateInputBoxPadding();
    }
    updateInputBoxPadding(e10 = false) {
      var _a3, _b3, _c3;
      e10 ? this.inputBox.paddingRight = 0 : this.inputBox.paddingRight = (((_a3 = this.caseSensitive) == null ? void 0 : _a3.width()) ?? 0) + (((_b3 = this.wholeWords) == null ? void 0 : _b3.width()) ?? 0) + (((_c3 = this.regex) == null ? void 0 : _c3.width()) ?? 0) + this.additionalToggles.reduce((e11, t10) => e11 + t10.width(), 0);
    }
    getValue() {
      return this.inputBox.value;
    }
    setValue(e10) {
      this.inputBox.value !== e10 && (this.inputBox.value = e10);
    }
    select() {
      this.inputBox.select();
    }
    focus() {
      this.inputBox.focus();
    }
    getCaseSensitive() {
      var _a3;
      return ((_a3 = this.caseSensitive) == null ? void 0 : _a3.checked) ?? false;
    }
    setCaseSensitive(e10) {
      this.caseSensitive && (this.caseSensitive.checked = e10);
    }
    getWholeWords() {
      var _a3;
      return ((_a3 = this.wholeWords) == null ? void 0 : _a3.checked) ?? false;
    }
    setWholeWords(e10) {
      this.wholeWords && (this.wholeWords.checked = e10);
    }
    getRegex() {
      var _a3;
      return ((_a3 = this.regex) == null ? void 0 : _a3.checked) ?? false;
    }
    setRegex(e10) {
      this.regex && (this.regex.checked = e10, this.validate());
    }
    focusOnCaseSensitive() {
      var _a3;
      (_a3 = this.caseSensitive) == null ? void 0 : _a3.focus();
    }
    highlightFindOptions() {
      this.domNode.classList.remove(`highlight-` + this._lastHighlightFindOptions), this._lastHighlightFindOptions = 1 - this._lastHighlightFindOptions, this.domNode.classList.add(`highlight-` + this._lastHighlightFindOptions);
    }
    validate() {
      this.inputBox.validate();
    }
    showMessage(e10) {
      this.inputBox.showMessage(e10);
    }
    clearMessage() {
      this.inputBox.hideMessage();
    }
  };
  const LU = H;
  var RU = class extends j {
    constructor(e10, t10, n10) {
      super(), this.parent = e10, this.onKeyDown = (e11) => td(this.findInput.inputBox.inputElement, B.KEY_DOWN, e11), this.onDidChange = (e11) => this.findInput.onDidChange(e11), this.container = V(this.parent, LU(`.quick-input-box`)), this.findInput = this._register(new IU(this.container, void 0, {
        label: ``,
        inputBoxStyles: t10,
        toggleStyles: n10
      }));
      let r10 = this.findInput.inputBox.inputElement;
      r10.role = `combobox`, r10.ariaHasPopup = `menu`, r10.ariaAutoComplete = `list`, r10.ariaExpanded = `true`;
    }
    get value() {
      return this.findInput.getValue();
    }
    set value(e10) {
      this.findInput.setValue(e10);
    }
    select(e10 = null) {
      this.findInput.inputBox.select(e10);
    }
    getSelection() {
      return this.findInput.inputBox.getSelection();
    }
    isSelectionAtEnd() {
      return this.findInput.inputBox.isSelectionAtEnd();
    }
    get placeholder() {
      return this.findInput.inputBox.inputElement.getAttribute(`placeholder`) || ``;
    }
    set placeholder(e10) {
      this.findInput.inputBox.setPlaceHolder(e10);
    }
    get password() {
      return this.findInput.inputBox.inputElement.type === `password`;
    }
    set password(e10) {
      this.findInput.inputBox.inputElement.type = e10 ? `password` : `text`;
    }
    set enabled(e10) {
      this.findInput.inputBox.inputElement.toggleAttribute(`readonly`, !e10);
    }
    set toggles(e10) {
      this.findInput.setAdditionalToggles(e10);
    }
    setAttribute(e10, t10) {
      this.findInput.inputBox.inputElement.setAttribute(e10, t10);
    }
    showDecoration(e10) {
      e10 === sx.Ignore ? this.findInput.clearMessage() : this.findInput.showMessage({
        type: e10 === sx.Info ? 1 : e10 === sx.Warning ? 2 : 3,
        content: ``
      });
    }
    stylesForType(e10) {
      return this.findInput.inputBox.stylesForType(e10 === sx.Info ? 1 : e10 === sx.Warning ? 2 : 3);
    }
    setFocus() {
      this.findInput.focus();
    }
    layout() {
      this.findInput.inputBox.layout();
    }
  }, zU = class {
    get templateId() {
      return this.renderer.templateId;
    }
    constructor(e10, t10) {
      this.renderer = e10, this.modelProvider = t10;
    }
    renderTemplate(e10) {
      let t10 = this.renderer.renderTemplate(e10);
      return {
        data: t10,
        disposable: j.None
      };
    }
    renderElement(e10, t10, n10, r10) {
      var _a3;
      if ((_a3 = n10.disposable) == null ? void 0 : _a3.dispose(), !n10.data) return;
      let i10 = this.modelProvider();
      if (i10.isResolved(e10)) return this.renderer.renderElement(i10.get(e10), e10, n10.data, r10);
      let a10 = new gi(), o10 = i10.resolve(e10, a10.token);
      n10.disposable = {
        dispose: () => a10.cancel()
      }, this.renderer.renderPlaceholder(e10, n10.data), o10.then((t11) => this.renderer.renderElement(t11, e10, n10.data, r10));
    }
    disposeTemplate(e10) {
      e10.disposable && (e10.disposable.dispose(), e10.disposable = void 0), e10.data && (this.renderer.disposeTemplate(e10.data), e10.data = void 0);
    }
  }, BU = class {
    constructor(e10, t10) {
      this.modelProvider = e10, this.accessibilityProvider = t10;
    }
    getWidgetAriaLabel() {
      return this.accessibilityProvider.getWidgetAriaLabel();
    }
    getAriaLabel(e10) {
      let t10 = this.modelProvider();
      return t10.isResolved(e10) ? this.accessibilityProvider.getAriaLabel(t10.get(e10)) : null;
    }
  };
  function VU(e10, t10) {
    return {
      ...t10,
      accessibilityProvider: t10.accessibilityProvider && new BU(e10, t10.accessibilityProvider)
    };
  }
  var HU = class {
    constructor(e10, t10, n10, r10, i10 = {}) {
      let a10 = () => this.model, o10 = r10.map((e11) => new zU(e11, a10));
      this.list = new IF(e10, t10, n10, o10, VU(a10, i10));
    }
    updateOptions(e10) {
      this.list.updateOptions(e10);
    }
    getHTMLElement() {
      return this.list.getHTMLElement();
    }
    get onDidFocus() {
      return this.list.onDidFocus;
    }
    get widget() {
      return this.list;
    }
    get onDidDispose() {
      return this.list.onDidDispose;
    }
    get onMouseDblClick() {
      return M.map(this.list.onMouseDblClick, ({ element: e10, index: t10, browserEvent: n10 }) => ({
        element: e10 === void 0 ? void 0 : this._model.get(e10),
        index: t10,
        browserEvent: n10
      }));
    }
    get onPointer() {
      return M.map(this.list.onPointer, ({ element: e10, index: t10, browserEvent: n10 }) => ({
        element: e10 === void 0 ? void 0 : this._model.get(e10),
        index: t10,
        browserEvent: n10
      }));
    }
    get onDidChangeSelection() {
      return M.map(this.list.onDidChangeSelection, ({ elements: e10, indexes: t10, browserEvent: n10 }) => ({
        elements: e10.map((e11) => this._model.get(e11)),
        indexes: t10,
        browserEvent: n10
      }));
    }
    get model() {
      return this._model;
    }
    set model(e10) {
      this._model = e10, this.list.splice(0, this.list.length, w(e10.length));
    }
    getFocus() {
      return this.list.getFocus();
    }
    getSelection() {
      return this.list.getSelection();
    }
    getSelectedElements() {
      return this.getSelection().map((e10) => this.model.get(e10));
    }
    style(e10) {
      this.list.style(e10);
    }
    dispose() {
      this.list.dispose();
    }
  }, UU = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  };
  const WU = false;
  (function(e10) {
    e10.North = `north`, e10.South = `south`, e10.East = `east`, e10.West = `west`;
  })(GU || (GU = {}));
  let KU = 4;
  const qU = new N();
  let JU = 300;
  const YU = new N();
  var XU = class {
    constructor(e10) {
      this.el = e10, this.disposables = new A();
    }
    get onPointerMove() {
      return this.disposables.add(new bD(R(this.el), `mousemove`)).event;
    }
    get onPointerUp() {
      return this.disposables.add(new bD(R(this.el), `mouseup`)).event;
    }
    dispose() {
      this.disposables.dispose();
    }
  };
  UU([
    PE
  ], XU.prototype, `onPointerMove`, null), UU([
    PE
  ], XU.prototype, `onPointerUp`, null);
  var ZU = class {
    get onPointerMove() {
      return this.disposables.add(new bD(this.el, IE.Change)).event;
    }
    get onPointerUp() {
      return this.disposables.add(new bD(this.el, IE.End)).event;
    }
    constructor(e10) {
      this.el = e10, this.disposables = new A();
    }
    dispose() {
      this.disposables.dispose();
    }
  };
  UU([
    PE
  ], ZU.prototype, `onPointerMove`, null), UU([
    PE
  ], ZU.prototype, `onPointerUp`, null);
  var QU = class {
    get onPointerMove() {
      return this.factory.onPointerMove;
    }
    get onPointerUp() {
      return this.factory.onPointerUp;
    }
    constructor(e10) {
      this.factory = e10;
    }
    dispose() {
    }
  };
  UU([
    PE
  ], QU.prototype, `onPointerMove`, null), UU([
    PE
  ], QU.prototype, `onPointerUp`, null);
  const $U = `pointer-events-disabled`;
  eW = class e10 extends j {
    get state() {
      return this._state;
    }
    get orthogonalStartSash() {
      return this._orthogonalStartSash;
    }
    get orthogonalEndSash() {
      return this._orthogonalEndSash;
    }
    set state(e11) {
      this._state !== e11 && (this.el.classList.toggle(`disabled`, e11 === 0), this.el.classList.toggle(`minimum`, e11 === 1), this.el.classList.toggle(`maximum`, e11 === 2), this._state = e11, this.onDidEnablementChange.fire(e11));
    }
    set orthogonalStartSash(t10) {
      if (this._orthogonalStartSash !== t10) {
        if (this.orthogonalStartDragHandleDisposables.clear(), this.orthogonalStartSashDisposables.clear(), t10) {
          let n10 = (n11) => {
            this.orthogonalStartDragHandleDisposables.clear(), n11 !== 0 && (this._orthogonalStartDragHandle = V(this.el, H(`.orthogonal-drag-handle.start`)), this.orthogonalStartDragHandleDisposables.add(k(() => this._orthogonalStartDragHandle.remove())), this.orthogonalStartDragHandleDisposables.add(new bD(this._orthogonalStartDragHandle, `mouseenter`)).event(() => e10.onMouseEnter(t10), void 0, this.orthogonalStartDragHandleDisposables), this.orthogonalStartDragHandleDisposables.add(new bD(this._orthogonalStartDragHandle, `mouseleave`)).event(() => e10.onMouseLeave(t10), void 0, this.orthogonalStartDragHandleDisposables));
          };
          this.orthogonalStartSashDisposables.add(t10.onDidEnablementChange.event(n10, this)), n10(t10.state);
        }
        this._orthogonalStartSash = t10;
      }
    }
    set orthogonalEndSash(t10) {
      if (this._orthogonalEndSash !== t10) {
        if (this.orthogonalEndDragHandleDisposables.clear(), this.orthogonalEndSashDisposables.clear(), t10) {
          let n10 = (n11) => {
            this.orthogonalEndDragHandleDisposables.clear(), n11 !== 0 && (this._orthogonalEndDragHandle = V(this.el, H(`.orthogonal-drag-handle.end`)), this.orthogonalEndDragHandleDisposables.add(k(() => this._orthogonalEndDragHandle.remove())), this.orthogonalEndDragHandleDisposables.add(new bD(this._orthogonalEndDragHandle, `mouseenter`)).event(() => e10.onMouseEnter(t10), void 0, this.orthogonalEndDragHandleDisposables), this.orthogonalEndDragHandleDisposables.add(new bD(this._orthogonalEndDragHandle, `mouseleave`)).event(() => e10.onMouseLeave(t10), void 0, this.orthogonalEndDragHandleDisposables));
          };
          this.orthogonalEndSashDisposables.add(t10.onDidEnablementChange.event(n10, this)), n10(t10.state);
        }
        this._orthogonalEndSash = t10;
      }
    }
    constructor(t10, n10, r10) {
      super(), this.hoverDelay = JU, this.hoverDelayer = this._register(new tl(this.hoverDelay)), this._state = 3, this.onDidEnablementChange = this._register(new N()), this._onDidStart = this._register(new N()), this._onDidChange = this._register(new N()), this._onDidReset = this._register(new N()), this._onDidEnd = this._register(new N()), this.orthogonalStartSashDisposables = this._register(new A()), this.orthogonalStartDragHandleDisposables = this._register(new A()), this.orthogonalEndSashDisposables = this._register(new A()), this.orthogonalEndDragHandleDisposables = this._register(new A()), this.onDidStart = this._onDidStart.event, this.onDidChange = this._onDidChange.event, this.onDidReset = this._onDidReset.event, this.onDidEnd = this._onDidEnd.event, this.linkedSash = void 0, this.el = V(t10, H(`.monaco-sash`)), r10.orthogonalEdge && this.el.classList.add(`orthogonal-edge-${r10.orthogonalEdge}`), E && this.el.classList.add(`mac`);
      let i10 = this._register(new bD(this.el, `mousedown`)).event;
      this._register(i10((e11) => this.onPointerStart(e11, new XU(t10)), this));
      let a10 = this._register(new bD(this.el, `dblclick`)).event;
      this._register(a10(this.onPointerDoublePress, this));
      let o10 = this._register(new bD(this.el, `mouseenter`)).event;
      this._register(o10(() => e10.onMouseEnter(this)));
      let s10 = this._register(new bD(this.el, `mouseleave`)).event;
      this._register(s10(() => e10.onMouseLeave(this))), this._register(LE.addTarget(this.el));
      let c10 = this._register(new bD(this.el, IE.Start)).event;
      this._register(c10((e11) => this.onPointerStart(e11, new ZU(this.el)), this));
      let l10 = this._register(new bD(this.el, IE.Tap)).event, u10;
      this._register(l10((e11) => {
        if (u10) {
          clearTimeout(u10), u10 = void 0, this.onPointerDoublePress(e11);
          return;
        }
        clearTimeout(u10), u10 = setTimeout(() => u10 = void 0, 250);
      }, this)), typeof r10.size == `number` ? (this.size = r10.size, r10.orientation === 0 ? this.el.style.width = `${this.size}px` : this.el.style.height = `${this.size}px`) : (this.size = KU, this._register(qU.event((e11) => {
        this.size = e11, this.layout();
      }))), this._register(YU.event((e11) => this.hoverDelay = e11)), this.layoutProvider = n10, this.orthogonalStartSash = r10.orthogonalStartSash, this.orthogonalEndSash = r10.orthogonalEndSash, this.orientation = r10.orientation || 0, this.orientation === 1 ? (this.el.classList.add(`horizontal`), this.el.classList.remove(`vertical`)) : (this.el.classList.remove(`horizontal`), this.el.classList.add(`vertical`)), this.el.classList.toggle(`debug`, WU), this.layout();
    }
    onPointerStart(e11, t10) {
      Zd.stop(e11);
      let n10 = false;
      if (!e11.__orthogonalSashEvent) {
        let r11 = this.getOrthogonalSash(e11);
        r11 && (n10 = true, e11.__orthogonalSashEvent = true, r11.onPointerStart(e11, new QU(t10)));
      }
      if (this.linkedSash && !e11.__linkedSashEvent && (e11.__linkedSashEvent = true, this.linkedSash.onPointerStart(e11, new QU(t10))), !this.state) return;
      let r10 = this.el.ownerDocument.getElementsByTagName(`iframe`);
      for (let e12 of r10) e12.classList.add($U);
      let i10 = e11.pageX, a10 = e11.pageY, o10 = e11.altKey, s10 = {
        startX: i10,
        currentX: i10,
        startY: a10,
        currentY: a10,
        altKey: o10
      };
      this.el.classList.add(`active`), this._onDidStart.fire(s10);
      let c10 = Id(this.el), l10 = () => {
        let e12 = ``;
        e12 = n10 ? `all-scroll` : this.orientation === 1 ? this.state === 1 ? `s-resize` : this.state === 2 ? `n-resize` : E ? `row-resize` : `ns-resize` : this.state === 1 ? `e-resize` : this.state === 2 ? `w-resize` : E ? `col-resize` : `ew-resize`, c10.textContent = `* { cursor: ${e12} !important; }`;
      }, u10 = new A();
      l10(), n10 || this.onDidEnablementChange.event(l10, null, u10);
      let d10 = (e12) => {
        Zd.stop(e12, false);
        let t11 = {
          startX: i10,
          currentX: e12.pageX,
          startY: a10,
          currentY: e12.pageY,
          altKey: o10
        };
        this._onDidChange.fire(t11);
      }, f10 = (e12) => {
        Zd.stop(e12, false), c10.remove(), this.el.classList.remove(`active`), this._onDidEnd.fire(), u10.dispose();
        for (let e13 of r10) e13.classList.remove($U);
      };
      t10.onPointerMove(d10, null, u10), t10.onPointerUp(f10, null, u10), u10.add(t10);
    }
    onPointerDoublePress(e11) {
      let t10 = this.getOrthogonalSash(e11);
      t10 && t10._onDidReset.fire(), this.linkedSash && this.linkedSash._onDidReset.fire(), this._onDidReset.fire();
    }
    static onMouseEnter(t10, n10 = false) {
      t10.el.classList.contains(`active`) ? (t10.hoverDelayer.cancel(), t10.el.classList.add(`hover`)) : t10.hoverDelayer.trigger(() => t10.el.classList.add(`hover`), t10.hoverDelay).then(void 0, () => {
      }), !n10 && t10.linkedSash && e10.onMouseEnter(t10.linkedSash, true);
    }
    static onMouseLeave(t10, n10 = false) {
      t10.hoverDelayer.cancel(), t10.el.classList.remove(`hover`), !n10 && t10.linkedSash && e10.onMouseLeave(t10.linkedSash, true);
    }
    clearSashHoverState() {
      e10.onMouseLeave(this);
    }
    layout() {
      if (this.orientation === 0) {
        let e11 = this.layoutProvider;
        this.el.style.left = e11.getVerticalSashLeft(this) - this.size / 2 + `px`, e11.getVerticalSashTop && (this.el.style.top = e11.getVerticalSashTop(this) + `px`), e11.getVerticalSashHeight && (this.el.style.height = e11.getVerticalSashHeight(this) + `px`);
      } else {
        let e11 = this.layoutProvider;
        this.el.style.top = e11.getHorizontalSashTop(this) - this.size / 2 + `px`, e11.getHorizontalSashLeft && (this.el.style.left = e11.getHorizontalSashLeft(this) + `px`), e11.getHorizontalSashWidth && (this.el.style.width = e11.getHorizontalSashWidth(this) + `px`);
      }
    }
    getOrthogonalSash(e11) {
      let t10 = e11.initialTarget ?? e11.target;
      if (!(!t10 || !Gd(t10)) && t10.classList.contains(`orthogonal-drag-handle`)) return t10.classList.contains(`start`) ? this.orthogonalStartSash : this.orthogonalEndSash;
    }
    dispose() {
      super.dispose(), this.el.remove();
    }
  };
  const tW = {
    separatorBorder: K.transparent
  };
  var nW = class {
    set size(e10) {
      this._size = e10;
    }
    get size() {
      return this._size;
    }
    get visible() {
      return this._cachedVisibleSize === void 0;
    }
    setVisible(e10, t10) {
      var _a3, _b3;
      if (e10 !== this.visible) {
        e10 ? (this.size = Ax(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize), this._cachedVisibleSize = void 0) : (this._cachedVisibleSize = typeof t10 == `number` ? t10 : this.size, this.size = 0), this.container.classList.toggle(`visible`, e10);
        try {
          (_b3 = (_a3 = this.view).setVisible) == null ? void 0 : _b3.call(_a3, e10);
        } catch (e11) {
          console.error(`Splitview: Failed to set visible view`), console.error(e11);
        }
      }
    }
    get minimumSize() {
      return this.visible ? this.view.minimumSize : 0;
    }
    get viewMinimumSize() {
      return this.view.minimumSize;
    }
    get maximumSize() {
      return this.visible ? this.view.maximumSize : 0;
    }
    get viewMaximumSize() {
      return this.view.maximumSize;
    }
    get priority() {
      return this.view.priority;
    }
    get proportionalLayout() {
      return this.view.proportionalLayout ?? true;
    }
    get snap() {
      return !!this.view.snap;
    }
    set enabled(e10) {
      this.container.style.pointerEvents = e10 ? `` : `none`;
    }
    constructor(e10, t10, n10, r10) {
      this.container = e10, this.view = t10, this.disposable = r10, this._cachedVisibleSize = void 0, typeof n10 == `number` ? (this._size = n10, this._cachedVisibleSize = void 0, e10.classList.add(`visible`)) : (this._size = 0, this._cachedVisibleSize = n10.cachedVisibleSize);
    }
    layout(e10, t10) {
      this.layoutContainer(e10);
      try {
        this.view.layout(this.size, e10, t10);
      } catch (e11) {
        console.error(`Splitview: Failed to layout view`), console.error(e11);
      }
    }
    dispose() {
      this.disposable.dispose();
    }
  }, rW = class extends nW {
    layoutContainer(e10) {
      this.container.style.top = `${e10}px`, this.container.style.height = `${this.size}px`;
    }
  }, iW = class extends nW {
    layoutContainer(e10) {
      this.container.style.left = `${e10}px`, this.container.style.width = `${this.size}px`;
    }
  }, aW;
  (function(e10) {
    e10[e10.Idle = 0] = `Idle`, e10[e10.Busy = 1] = `Busy`;
  })(aW || (aW = {}));
  (function(e10) {
    e10.Distribute = {
      type: `distribute`
    };
    function t10(e11) {
      return {
        type: `split`,
        index: e11
      };
    }
    e10.Split = t10;
    function n10(e11) {
      return {
        type: `auto`,
        index: e11
      };
    }
    e10.Auto = n10;
    function r10(e11) {
      return {
        type: `invisible`,
        cachedVisibleSize: e11
      };
    }
    e10.Invisible = r10;
  })(oW || (oW = {}));
  let cW;
  sW = class extends j {
    get orthogonalStartSash() {
      return this._orthogonalStartSash;
    }
    get orthogonalEndSash() {
      return this._orthogonalEndSash;
    }
    get startSnappingEnabled() {
      return this._startSnappingEnabled;
    }
    get endSnappingEnabled() {
      return this._endSnappingEnabled;
    }
    set orthogonalStartSash(e10) {
      for (let t10 of this.sashItems) t10.sash.orthogonalStartSash = e10;
      this._orthogonalStartSash = e10;
    }
    set orthogonalEndSash(e10) {
      for (let t10 of this.sashItems) t10.sash.orthogonalEndSash = e10;
      this._orthogonalEndSash = e10;
    }
    set startSnappingEnabled(e10) {
      this._startSnappingEnabled !== e10 && (this._startSnappingEnabled = e10, this.updateSashEnablement());
    }
    set endSnappingEnabled(e10) {
      this._endSnappingEnabled !== e10 && (this._endSnappingEnabled = e10, this.updateSashEnablement());
    }
    constructor(e10, t10 = {}) {
      super(), this.size = 0, this._contentSize = 0, this.proportions = void 0, this.viewItems = [], this.sashItems = [], this.state = aW.Idle, this._onDidSashChange = this._register(new N()), this._onDidSashReset = this._register(new N()), this._startSnappingEnabled = true, this._endSnappingEnabled = true, this.onDidSashChange = this._onDidSashChange.event, this.onDidSashReset = this._onDidSashReset.event, this.orientation = t10.orientation ?? 0, this.inverseAltBehavior = t10.inverseAltBehavior ?? false, this.proportionalLayout = t10.proportionalLayout ?? true, this.getSashOrthogonalSize = t10.getSashOrthogonalSize, this.el = document.createElement(`div`), this.el.classList.add(`monaco-split-view2`), this.el.classList.add(this.orientation === 0 ? `vertical` : `horizontal`), e10.appendChild(this.el), this.sashContainer = V(this.el, H(`.sash-container`)), this.viewContainer = H(`.split-view-container`), this.scrollable = this._register(new YE({
        forceIntegerValues: true,
        smoothScrollDuration: 125,
        scheduleAtNextAnimationFrame: (e11) => sd(R(this.el), e11)
      })), this.scrollableElement = this._register(new lD(this.viewContainer, {
        vertical: this.orientation === 0 ? t10.scrollbarVisibility ?? 1 : 2,
        horizontal: this.orientation === 1 ? t10.scrollbarVisibility ?? 1 : 2
      }, this.scrollable));
      let n10 = this._register(new bD(this.viewContainer, `scroll`)).event;
      this._register(n10((e11) => {
        let t11 = this.scrollableElement.getScrollPosition(), n11 = Math.abs(this.viewContainer.scrollLeft - t11.scrollLeft) <= 1 ? void 0 : this.viewContainer.scrollLeft, r10 = Math.abs(this.viewContainer.scrollTop - t11.scrollTop) <= 1 ? void 0 : this.viewContainer.scrollTop;
        (n11 !== void 0 || r10 !== void 0) && this.scrollableElement.setScrollPosition({
          scrollLeft: n11,
          scrollTop: r10
        });
      })), this.onDidScroll = this.scrollableElement.onScroll, this._register(this.onDidScroll((e11) => {
        e11.scrollTopChanged && (this.viewContainer.scrollTop = e11.scrollTop), e11.scrollLeftChanged && (this.viewContainer.scrollLeft = e11.scrollLeft);
      })), V(this.el, this.scrollableElement.getDomNode()), this.style(t10.styles || tW), t10.descriptor && (this.size = t10.descriptor.size, t10.descriptor.views.forEach((e11, t11) => {
        let n11 = Ce(e11.visible) || e11.visible ? e11.size : {
          type: `invisible`,
          cachedVisibleSize: e11.size
        }, r10 = e11.view;
        this.doAddView(r10, n11, t11, true);
      }), this._contentSize = this.viewItems.reduce((e11, t11) => e11 + t11.size, 0), this.saveProportions());
    }
    style(e10) {
      e10.separatorBorder.isTransparent() ? (this.el.classList.remove(`separator-border`), this.el.style.removeProperty(`--separator-border`)) : (this.el.classList.add(`separator-border`), this.el.style.setProperty(`--separator-border`, e10.separatorBorder.toString()));
    }
    addView(e10, t10, n10 = this.viewItems.length, r10) {
      this.doAddView(e10, t10, n10, r10);
    }
    layout(e10, t10) {
      let n10 = Math.max(this.size, this._contentSize);
      if (this.size = e10, this.layoutContext = t10, this.proportions) {
        let t11 = 0;
        for (let n11 = 0; n11 < this.viewItems.length; n11++) {
          let r10 = this.viewItems[n11], i10 = this.proportions[n11];
          typeof i10 == `number` ? t11 += i10 : e10 -= r10.size;
        }
        for (let n11 = 0; n11 < this.viewItems.length; n11++) {
          let r10 = this.viewItems[n11], i10 = this.proportions[n11];
          typeof i10 == `number` && t11 > 0 && (r10.size = Ax(Math.round(i10 * e10 / t11), r10.minimumSize, r10.maximumSize));
        }
      } else {
        let t11 = w(this.viewItems.length), r10 = t11.filter((e11) => this.viewItems[e11].priority === 1), i10 = t11.filter((e11) => this.viewItems[e11].priority === 2);
        this.resize(this.viewItems.length - 1, e10 - n10, void 0, r10, i10);
      }
      this.distributeEmptySpace(), this.layoutViews();
    }
    saveProportions() {
      this.proportionalLayout && this._contentSize > 0 && (this.proportions = this.viewItems.map((e10) => e10.proportionalLayout && e10.visible ? e10.size / this._contentSize : void 0));
    }
    onSashStart({ sash: e10, start: t10, alt: n10 }) {
      for (let e11 of this.viewItems) e11.enabled = false;
      let r10 = this.sashItems.findIndex((t11) => t11.sash === e10), i10 = zr(z(this.el.ownerDocument.body, `keydown`, (e11) => a10(this.sashDragState.current, e11.altKey)), z(this.el.ownerDocument.body, `keyup`, () => a10(this.sashDragState.current, false))), a10 = (e11, t11) => {
        let n11 = this.viewItems.map((e12) => e12.size), a11 = -1 / 0, o10 = 1 / 0;
        if (this.inverseAltBehavior && (t11 = !t11), t11) {
          let e12 = r10 === this.sashItems.length - 1;
          if (e12) {
            let e13 = this.viewItems[r10];
            a11 = (e13.minimumSize - e13.size) / 2, o10 = (e13.maximumSize - e13.size) / 2;
          } else {
            let e13 = this.viewItems[r10 + 1];
            a11 = (e13.size - e13.maximumSize) / 2, o10 = (e13.size - e13.minimumSize) / 2;
          }
        }
        let s10, c10;
        if (!t11) {
          let e12 = w(r10, -1), t12 = w(r10 + 1, this.viewItems.length), i11 = e12.reduce((e13, t13) => e13 + (this.viewItems[t13].minimumSize - n11[t13]), 0), a12 = e12.reduce((e13, t13) => e13 + (this.viewItems[t13].viewMaximumSize - n11[t13]), 0), o11 = t12.length === 0 ? 1 / 0 : t12.reduce((e13, t13) => e13 + (n11[t13] - this.viewItems[t13].minimumSize), 0), l10 = t12.length === 0 ? -1 / 0 : t12.reduce((e13, t13) => e13 + (n11[t13] - this.viewItems[t13].viewMaximumSize), 0), u10 = Math.max(i11, l10), d10 = Math.min(o11, a12), f10 = this.findFirstSnapIndex(e12), p10 = this.findFirstSnapIndex(t12);
          if (typeof f10 == `number`) {
            let e13 = this.viewItems[f10], t13 = Math.floor(e13.viewMinimumSize / 2);
            s10 = {
              index: f10,
              limitDelta: e13.visible ? u10 - t13 : u10 + t13,
              size: e13.size
            };
          }
          if (typeof p10 == `number`) {
            let e13 = this.viewItems[p10], t13 = Math.floor(e13.viewMinimumSize / 2);
            c10 = {
              index: p10,
              limitDelta: e13.visible ? d10 + t13 : d10 - t13,
              size: e13.size
            };
          }
        }
        this.sashDragState = {
          start: e11,
          current: e11,
          index: r10,
          sizes: n11,
          minDelta: a11,
          maxDelta: o10,
          alt: t11,
          snapBefore: s10,
          snapAfter: c10,
          disposable: i10
        };
      };
      a10(t10, n10);
    }
    onSashChange({ current: e10 }) {
      let { index: t10, start: n10, sizes: r10, alt: i10, minDelta: a10, maxDelta: o10, snapBefore: s10, snapAfter: c10 } = this.sashDragState;
      this.sashDragState.current = e10;
      let l10 = e10 - n10, u10 = this.resize(t10, l10, r10, void 0, void 0, a10, o10, s10, c10);
      if (i10) {
        let e11 = t10 === this.sashItems.length - 1, n11 = this.viewItems.map((e12) => e12.size), r11 = e11 ? t10 : t10 + 1, i11 = this.viewItems[r11], a11 = i11.size - i11.maximumSize, o11 = i11.size - i11.minimumSize, s11 = e11 ? t10 - 1 : t10 + 1;
        this.resize(s11, -u10, n11, void 0, void 0, a11, o11);
      }
      this.distributeEmptySpace(), this.layoutViews();
    }
    onSashEnd(e10) {
      this._onDidSashChange.fire(e10), this.sashDragState.disposable.dispose(), this.saveProportions();
      for (let e11 of this.viewItems) e11.enabled = true;
    }
    onViewChange(e10, t10) {
      let n10 = this.viewItems.indexOf(e10);
      n10 < 0 || n10 >= this.viewItems.length || (t10 = typeof t10 == `number` ? t10 : e10.size, t10 = Ax(t10, e10.minimumSize, e10.maximumSize), this.inverseAltBehavior && n10 > 0 ? (this.resize(n10 - 1, Math.floor((e10.size - t10) / 2)), this.distributeEmptySpace(), this.layoutViews()) : (e10.size = t10, this.relayout([
        n10
      ], void 0)));
    }
    resizeView(e10, t10) {
      if (!(e10 < 0 || e10 >= this.viewItems.length)) {
        if (this.state !== aW.Idle) throw Error(`Cant modify splitview`);
        this.state = aW.Busy;
        try {
          let n10 = w(this.viewItems.length).filter((t11) => t11 !== e10), r10 = [
            ...n10.filter((e11) => this.viewItems[e11].priority === 1),
            e10
          ], i10 = n10.filter((e11) => this.viewItems[e11].priority === 2), a10 = this.viewItems[e10];
          t10 = Math.round(t10), t10 = Ax(t10, a10.minimumSize, Math.min(a10.maximumSize, this.size)), a10.size = t10, this.relayout(r10, i10);
        } finally {
          this.state = aW.Idle;
        }
      }
    }
    distributeViewSizes() {
      let e10 = [], t10 = 0;
      for (let n11 of this.viewItems) n11.maximumSize - n11.minimumSize > 0 && (e10.push(n11), t10 += n11.size);
      let n10 = Math.floor(t10 / e10.length);
      for (let t11 of e10) t11.size = Ax(n10, t11.minimumSize, t11.maximumSize);
      let r10 = w(this.viewItems.length), i10 = r10.filter((e11) => this.viewItems[e11].priority === 1), a10 = r10.filter((e11) => this.viewItems[e11].priority === 2);
      this.relayout(i10, a10);
    }
    getViewSize(e10) {
      return e10 < 0 || e10 >= this.viewItems.length ? -1 : this.viewItems[e10].size;
    }
    doAddView(e10, t10, n10 = this.viewItems.length, r10) {
      if (this.state !== aW.Idle) throw Error(`Cant modify splitview`);
      this.state = aW.Busy;
      try {
        let i10 = H(`.split-view-view`);
        n10 === this.viewItems.length ? this.viewContainer.appendChild(i10) : this.viewContainer.insertBefore(i10, this.viewContainer.children.item(n10));
        let a10 = e10.onDidChange((e11) => this.onViewChange(l10, e11)), o10 = k(() => i10.remove()), s10 = zr(a10, o10), c10;
        typeof t10 == `number` ? c10 = t10 : (t10.type === `auto` && (t10 = this.areViewsDistributed() ? {
          type: `distribute`
        } : {
          type: `split`,
          index: t10.index
        }), c10 = t10.type === `split` ? this.getViewSize(t10.index) / 2 : t10.type === `invisible` ? {
          cachedVisibleSize: t10.cachedVisibleSize
        } : e10.minimumSize);
        let l10 = this.orientation === 0 ? new rW(i10, e10, c10, s10) : new iW(i10, e10, c10, s10);
        if (this.viewItems.splice(n10, 0, l10), this.viewItems.length > 1) {
          let e11 = {
            orthogonalStartSash: this.orthogonalStartSash,
            orthogonalEndSash: this.orthogonalEndSash
          }, t11 = this.orientation === 0 ? new eW(this.sashContainer, {
            getHorizontalSashTop: (e12) => this.getSashPosition(e12),
            getHorizontalSashWidth: this.getSashOrthogonalSize
          }, {
            ...e11,
            orientation: 1
          }) : new eW(this.sashContainer, {
            getVerticalSashLeft: (e12) => this.getSashPosition(e12),
            getVerticalSashHeight: this.getSashOrthogonalSize
          }, {
            ...e11,
            orientation: 0
          }), r11 = this.orientation === 0 ? (e12) => ({
            sash: t11,
            start: e12.startY,
            current: e12.currentY,
            alt: e12.altKey
          }) : (e12) => ({
            sash: t11,
            start: e12.startX,
            current: e12.currentX,
            alt: e12.altKey
          }), i11 = M.map(t11.onDidStart, r11), a11 = i11(this.onSashStart, this), o11 = M.map(t11.onDidChange, r11), s11 = o11(this.onSashChange, this), c11 = M.map(t11.onDidEnd, () => this.sashItems.findIndex((e12) => e12.sash === t11)), l11 = c11(this.onSashEnd, this), u11 = t11.onDidReset(() => {
            let e12 = this.sashItems.findIndex((e13) => e13.sash === t11), n11 = w(e12, -1), r12 = w(e12 + 1, this.viewItems.length), i12 = this.findFirstSnapIndex(n11), a12 = this.findFirstSnapIndex(r12);
            typeof i12 == `number` && !this.viewItems[i12].visible || typeof a12 == `number` && !this.viewItems[a12].visible || this._onDidSashReset.fire(e12);
          }), d10 = zr(a11, s11, l11, u11, t11), f10 = {
            sash: t11,
            disposable: d10
          };
          this.sashItems.splice(n10 - 1, 0, f10);
        }
        i10.appendChild(e10.element);
        let u10;
        typeof t10 != `number` && t10.type === `split` && (u10 = [
          t10.index
        ]), r10 || this.relayout([
          n10
        ], u10), !r10 && typeof t10 != `number` && t10.type === `distribute` && this.distributeViewSizes();
      } finally {
        this.state = aW.Idle;
      }
    }
    relayout(e10, t10) {
      let n10 = this.viewItems.reduce((e11, t11) => e11 + t11.size, 0);
      this.resize(this.viewItems.length - 1, this.size - n10, void 0, e10, t10), this.distributeEmptySpace(), this.layoutViews(), this.saveProportions();
    }
    resize(e10, t10, n10 = this.viewItems.map((e11) => e11.size), r10, i10, a10 = -1 / 0, o10 = 1 / 0, s10, c10) {
      if (e10 < 0 || e10 >= this.viewItems.length) return 0;
      let l10 = w(e10, -1), u10 = w(e10 + 1, this.viewItems.length);
      if (i10) for (let e11 of i10) te(l10, e11), te(u10, e11);
      if (r10) for (let e11 of r10) ne(l10, e11), ne(u10, e11);
      let d10 = l10.map((e11) => this.viewItems[e11]), f10 = l10.map((e11) => n10[e11]), p10 = u10.map((e11) => this.viewItems[e11]), m10 = u10.map((e11) => n10[e11]), h10 = l10.reduce((e11, t11) => e11 + (this.viewItems[t11].minimumSize - n10[t11]), 0), g10 = l10.reduce((e11, t11) => e11 + (this.viewItems[t11].maximumSize - n10[t11]), 0), _10 = u10.length === 0 ? 1 / 0 : u10.reduce((e11, t11) => e11 + (n10[t11] - this.viewItems[t11].minimumSize), 0), v10 = u10.length === 0 ? -1 / 0 : u10.reduce((e11, t11) => e11 + (n10[t11] - this.viewItems[t11].maximumSize), 0), y10 = Math.max(h10, v10, a10), b10 = Math.min(_10, g10, o10), x10 = false;
      if (s10) {
        let e11 = this.viewItems[s10.index], n11 = t10 >= s10.limitDelta;
        x10 = n11 !== e11.visible, e11.setVisible(n11, s10.size);
      }
      if (!x10 && c10) {
        let e11 = this.viewItems[c10.index], n11 = t10 < c10.limitDelta;
        x10 = n11 !== e11.visible, e11.setVisible(n11, c10.size);
      }
      if (x10) return this.resize(e10, t10, n10, r10, i10, a10, o10);
      t10 = Ax(t10, y10, b10);
      for (let e11 = 0, n11 = t10; e11 < d10.length; e11++) {
        let t11 = d10[e11], r11 = Ax(f10[e11] + n11, t11.minimumSize, t11.maximumSize), i11 = r11 - f10[e11];
        n11 -= i11, t11.size = r11;
      }
      for (let e11 = 0, n11 = t10; e11 < p10.length; e11++) {
        let t11 = p10[e11], r11 = Ax(m10[e11] - n11, t11.minimumSize, t11.maximumSize), i11 = r11 - m10[e11];
        n11 += i11, t11.size = r11;
      }
      return t10;
    }
    distributeEmptySpace(e10) {
      let t10 = this.viewItems.reduce((e11, t11) => e11 + t11.size, 0), n10 = this.size - t10, r10 = w(this.viewItems.length - 1, -1), i10 = r10.filter((e11) => this.viewItems[e11].priority === 1), a10 = r10.filter((e11) => this.viewItems[e11].priority === 2);
      for (let e11 of a10) te(r10, e11);
      for (let e11 of i10) ne(r10, e11);
      typeof e10 == `number` && ne(r10, e10);
      for (let e11 = 0; n10 !== 0 && e11 < r10.length; e11++) {
        let t11 = this.viewItems[r10[e11]], i11 = Ax(t11.size + n10, t11.minimumSize, t11.maximumSize), a11 = i11 - t11.size;
        n10 -= a11, t11.size = i11;
      }
    }
    layoutViews() {
      this._contentSize = this.viewItems.reduce((e11, t10) => e11 + t10.size, 0);
      let e10 = 0;
      for (let t10 of this.viewItems) t10.layout(e10, this.layoutContext), e10 += t10.size;
      this.sashItems.forEach((e11) => e11.sash.layout()), this.updateSashEnablement(), this.updateScrollableElement();
    }
    updateScrollableElement() {
      this.orientation === 0 ? this.scrollableElement.setScrollDimensions({
        height: this.size,
        scrollHeight: this._contentSize
      }) : this.scrollableElement.setScrollDimensions({
        width: this.size,
        scrollWidth: this._contentSize
      });
    }
    updateSashEnablement() {
      let e10 = false, t10 = this.viewItems.map((t11) => e10 = t11.size - t11.minimumSize > 0 || e10);
      e10 = false;
      let n10 = this.viewItems.map((t11) => e10 = t11.maximumSize - t11.size > 0 || e10), r10 = [
        ...this.viewItems
      ].reverse();
      e10 = false;
      let i10 = r10.map((t11) => e10 = t11.size - t11.minimumSize > 0 || e10).reverse();
      e10 = false;
      let a10 = r10.map((t11) => e10 = t11.maximumSize - t11.size > 0 || e10).reverse(), o10 = 0;
      for (let e11 = 0; e11 < this.sashItems.length; e11++) {
        let { sash: r11 } = this.sashItems[e11], s10 = this.viewItems[e11];
        o10 += s10.size;
        let c10 = !(t10[e11] && a10[e11 + 1]), l10 = !(n10[e11] && i10[e11 + 1]);
        if (c10 && l10) {
          let n11 = w(e11, -1), a11 = w(e11 + 1, this.viewItems.length), s11 = this.findFirstSnapIndex(n11), c11 = this.findFirstSnapIndex(a11), l11 = typeof s11 == `number` && !this.viewItems[s11].visible, u10 = typeof c11 == `number` && !this.viewItems[c11].visible;
          l11 && i10[e11] && (o10 > 0 || this.startSnappingEnabled) ? r11.state = 1 : u10 && t10[e11] && (o10 < this._contentSize || this.endSnappingEnabled) ? r11.state = 2 : r11.state = 0;
        } else c10 && !l10 ? r11.state = 1 : !c10 && l10 ? r11.state = 2 : r11.state = 3;
      }
    }
    getSashPosition(e10) {
      let t10 = 0;
      for (let n10 = 0; n10 < this.sashItems.length; n10++) if (t10 += this.viewItems[n10].size, this.sashItems[n10].sash === e10) return t10;
      return 0;
    }
    findFirstSnapIndex(e10) {
      for (let t10 of e10) {
        let e11 = this.viewItems[t10];
        if (!e11.visible) continue;
        if (e11.snap) return t10;
      }
      for (let t10 of e10) {
        let e11 = this.viewItems[t10];
        if (e11.visible && e11.maximumSize - e11.minimumSize > 0) return;
        if (!e11.visible && e11.snap) return t10;
      }
    }
    areViewsDistributed() {
      let e10, t10;
      for (let n10 of this.viewItems) if (e10 = e10 === void 0 ? n10.size : Math.min(e10, n10.size), t10 = t10 === void 0 ? n10.size : Math.max(t10, n10.size), t10 - e10 > 2) return false;
      return true;
    }
    dispose() {
      var _a3;
      (_a3 = this.sashDragState) == null ? void 0 : _a3.disposable.dispose(), Rr(this.viewItems), this.viewItems = [], this.sashItems.forEach((e10) => e10.disposable.dispose()), this.sashItems = [], super.dispose();
    }
  };
  cW = (_ta = class {
    constructor(t10, n10, r10) {
      this.columns = t10, this.getColumnSize = r10, this.templateId = _ta.TemplateId, this.renderedTemplates = /* @__PURE__ */ new Set();
      let i10 = new Map(n10.map((e10) => [
        e10.templateId,
        e10
      ]));
      this.renderers = [];
      for (let e10 of t10) {
        let t11 = i10.get(e10.templateId);
        if (!t11) throw Error(`Table cell renderer for template id ${e10.templateId} not found.`);
        this.renderers.push(t11);
      }
    }
    renderTemplate(e10) {
      let t10 = V(e10, H(`.monaco-table-tr`)), n10 = [], r10 = [];
      for (let e11 = 0; e11 < this.columns.length; e11++) {
        let i11 = this.renderers[e11], a10 = V(t10, H(`.monaco-table-td`, {
          "data-col-index": e11
        }));
        a10.style.width = `${this.getColumnSize(e11)}px`, n10.push(a10), r10.push(i11.renderTemplate(a10));
      }
      let i10 = {
        container: e10,
        cellContainers: n10,
        cellTemplateData: r10
      };
      return this.renderedTemplates.add(i10), i10;
    }
    renderElement(e10, t10, n10, r10) {
      for (let i10 = 0; i10 < this.columns.length; i10++) {
        let a10 = this.columns[i10], o10 = a10.project(e10), s10 = this.renderers[i10];
        s10.renderElement(o10, t10, n10.cellTemplateData[i10], r10);
      }
    }
    disposeElement(e10, t10, n10, r10) {
      for (let i10 = 0; i10 < this.columns.length; i10++) {
        let a10 = this.renderers[i10];
        if (a10.disposeElement) {
          let o10 = this.columns[i10], s10 = o10.project(e10);
          a10.disposeElement(s10, t10, n10.cellTemplateData[i10], r10);
        }
      }
    }
    disposeTemplate(e10) {
      for (let t10 = 0; t10 < this.columns.length; t10++) {
        let n10 = this.renderers[t10];
        n10.disposeTemplate(e10.cellTemplateData[t10]);
      }
      Zu(e10.container), this.renderedTemplates.delete(e10);
    }
    layoutColumn(e10, t10) {
      for (let { cellContainers: n10 } of this.renderedTemplates) n10[e10].style.width = `${t10}px`;
    }
  }, _ta.TemplateId = `row`, _ta);
  function lW(e10) {
    return {
      getHeight(t10) {
        return e10.getHeight(t10);
      },
      getTemplateId() {
        return cW.TemplateId;
      }
    };
  }
  var uW = class extends j {
    get minimumSize() {
      return this.column.minimumWidth ?? 120;
    }
    get maximumSize() {
      return this.column.maximumWidth ?? 1 / 0;
    }
    get onDidChange() {
      return this.column.onDidChangeWidthConstraints ?? M.None;
    }
    constructor(e10, t10) {
      super(), this.column = e10, this.index = t10, this._onDidLayout = new N(), this.onDidLayout = this._onDidLayout.event, this.element = H(`.monaco-table-th`, {
        "data-col-index": t10
      }, e10.label), e10.tooltip && this._register(RP().setupManagedHover(PP(`mouse`), this.element, e10.tooltip));
    }
    layout(e10) {
      this._onDidLayout.fire([
        this.index,
        e10
      ]);
    }
  }, dW = (_ua = class {
    get onDidChangeFocus() {
      return this.list.onDidChangeFocus;
    }
    get onDidChangeSelection() {
      return this.list.onDidChangeSelection;
    }
    get onDidScroll() {
      return this.list.onDidScroll;
    }
    get onMouseDblClick() {
      return this.list.onMouseDblClick;
    }
    get onPointer() {
      return this.list.onPointer;
    }
    get onDidFocus() {
      return this.list.onDidFocus;
    }
    get scrollTop() {
      return this.list.scrollTop;
    }
    set scrollTop(e10) {
      this.list.scrollTop = e10;
    }
    get scrollHeight() {
      return this.list.scrollHeight;
    }
    get renderHeight() {
      return this.list.renderHeight;
    }
    get onDidDispose() {
      return this.list.onDidDispose;
    }
    constructor(t10, n10, r10, i10, a10, o10) {
      this.virtualDelegate = r10, this.columns = i10, this.domId = `table_id_${++_ua.InstanceCount}`, this.disposables = new A(), this.cachedWidth = 0, this.cachedHeight = 0, this.domNode = V(n10, H(`.monaco-table.${this.domId}`));
      let s10 = i10.map((e10, t11) => this.disposables.add(new uW(e10, t11))), c10 = {
        size: s10.reduce((e10, t11) => e10 + t11.column.weight, 0),
        views: s10.map((e10) => ({
          size: e10.column.weight,
          view: e10
        }))
      };
      this.splitview = this.disposables.add(new sW(this.domNode, {
        orientation: 1,
        scrollbarVisibility: 2,
        getSashOrthogonalSize: () => this.cachedHeight,
        descriptor: c10
      })), this.splitview.el.style.height = `${r10.headerRowHeight}px`, this.splitview.el.style.lineHeight = `${r10.headerRowHeight}px`;
      let l10 = new cW(i10, a10, (e10) => this.splitview.getViewSize(e10));
      this.list = this.disposables.add(new IF(t10, this.domNode, lW(r10), [
        l10
      ], o10)), M.any(...s10.map((e10) => e10.onDidLayout))(([e10, t11]) => l10.layoutColumn(e10, t11), null, this.disposables), this.splitview.onDidSashReset((e10) => {
        let t11 = i10.reduce((e11, t12) => e11 + t12.weight, 0), n11 = i10[e10].weight / t11 * this.cachedWidth;
        this.splitview.resizeView(e10, n11);
      }, null, this.disposables), this.styleElement = Id(this.domNode), this.style(DF);
    }
    updateOptions(e10) {
      this.list.updateOptions(e10);
    }
    splice(e10, t10, n10 = []) {
      this.list.splice(e10, t10, n10);
    }
    getHTMLElement() {
      return this.domNode;
    }
    style(e10) {
      let t10 = [];
      t10.push(`.monaco-table.${this.domId} > .monaco-split-view2 .monaco-sash.vertical::before {
			top: ${this.virtualDelegate.headerRowHeight + 1}px;
			height: calc(100% - ${this.virtualDelegate.headerRowHeight}px);
		}`), this.styleElement.textContent = t10.join(`
`), this.list.style(e10);
    }
    getSelectedElements() {
      return this.list.getSelectedElements();
    }
    getSelection() {
      return this.list.getSelection();
    }
    getFocus() {
      return this.list.getFocus();
    }
    dispose() {
      this.disposables.dispose();
    }
  }, _ua.InstanceCount = 0, _ua), fW;
  (function(e10) {
    e10[e10.Expanded = 0] = `Expanded`, e10[e10.Collapsed = 1] = `Collapsed`, e10[e10.PreserveOrExpanded = 2] = `PreserveOrExpanded`, e10[e10.PreserveOrCollapsed = 3] = `PreserveOrCollapsed`;
  })(fW || (fW = {}));
  var pW;
  (function(e10) {
    e10[e10.Unknown = 0] = `Unknown`, e10[e10.Twistie = 1] = `Twistie`, e10[e10.Element = 2] = `Element`, e10[e10.Filter = 3] = `Filter`;
  })(pW || (pW = {}));
  var mW = class extends Error {
    constructor(e10, t10) {
      super(`TreeError [${e10}] ${t10}`);
    }
  }, hW = class {
    constructor(e10) {
      this.fn = e10, this._map = /* @__PURE__ */ new WeakMap();
    }
    map(e10) {
      let t10 = this._map.get(e10);
      return t10 || (t10 = this.fn(e10), this._map.set(e10, t10)), t10;
    }
  };
  function gW(e10) {
    return typeof e10 == `object` && `visibility` in e10 && `data` in e10;
  }
  function _W(e10) {
    switch (e10) {
      case true:
        return 1;
      case false:
        return 0;
      default:
        return e10;
    }
  }
  function vW(e10) {
    return typeof e10.collapsible == `boolean`;
  }
  var yW = class {
    constructor(e10, t10, n10, r10 = {}) {
      this.user = e10, this.list = t10, this.rootRef = [], this.eventBufferer = new di(), this._onDidChangeCollapseState = new N(), this.onDidChangeCollapseState = this.eventBufferer.wrapEvent(this._onDidChangeCollapseState.event), this._onDidChangeRenderNodeCount = new N(), this.onDidChangeRenderNodeCount = this.eventBufferer.wrapEvent(this._onDidChangeRenderNodeCount.event), this._onDidSplice = new N(), this.onDidSplice = this._onDidSplice.event, this.refilterDelayer = new tl(Jc), this.collapseByDefault = r10.collapseByDefault === void 0 ? false : r10.collapseByDefault, this.allowNonCollapsibleParents = r10.allowNonCollapsibleParents ?? false, this.filter = r10.filter, this.autoExpandSingleChildren = r10.autoExpandSingleChildren === void 0 ? false : r10.autoExpandSingleChildren, this.root = {
        parent: void 0,
        element: n10,
        children: [],
        depth: 0,
        visibleChildrenCount: 0,
        visibleChildIndex: -1,
        collapsible: false,
        collapsed: false,
        renderNodeCount: 0,
        visibility: 1,
        visible: true,
        filterData: void 0
      };
    }
    splice(e10, t10, n10 = It.empty(), r10 = {}) {
      if (e10.length === 0) throw new mW(this.user, `Invalid tree location`);
      r10.diffIdentityProvider ? this.spliceSmart(r10.diffIdentityProvider, e10, t10, n10, r10) : this.spliceSimple(e10, t10, n10, r10);
    }
    spliceSmart(e10, t10, n10, r10 = It.empty(), i10, a10 = i10.diffDepth ?? 0) {
      let { parentNode: o10 } = this.getParentNodeWithListIndex(t10);
      if (!o10.lastDiffIds) return this.spliceSimple(t10, n10, r10, i10);
      let s10 = [
        ...r10
      ], c10 = t10[t10.length - 1], l10 = new C_({
        getElements: () => o10.lastDiffIds
      }, {
        getElements: () => [
          ...o10.children.slice(0, c10),
          ...s10,
          ...o10.children.slice(c10 + n10)
        ].map((t11) => e10.getId(t11.element).toString())
      }).ComputeDiff(false);
      if (l10.quitEarly) return o10.lastDiffIds = void 0, this.spliceSimple(t10, n10, s10, i10);
      let u10 = t10.slice(0, -1), d10 = (t11, n11, r11) => {
        if (a10 > 0) for (let o11 = 0; o11 < r11; o11++) t11--, n11--, this.spliceSmart(e10, [
          ...u10,
          t11,
          0
        ], 2 ** 53 - 1, s10[n11].children, i10, a10 - 1);
      }, f10 = Math.min(o10.children.length, c10 + n10), p10 = s10.length;
      for (let e11 of l10.changes.sort((e12, t11) => t11.originalStart - e12.originalStart)) d10(f10, p10, f10 - (e11.originalStart + e11.originalLength)), f10 = e11.originalStart, p10 = e11.modifiedStart - c10, this.spliceSimple([
        ...u10,
        f10
      ], e11.originalLength, It.slice(s10, p10, p10 + e11.modifiedLength), i10);
      d10(f10, p10, f10);
    }
    spliceSimple(e10, t10, n10 = It.empty(), { onDidCreateNode: r10, onDidDeleteNode: i10, diffIdentityProvider: a10 }) {
      let { parentNode: o10, listIndex: s10, revealed: c10, visible: l10 } = this.getParentNodeWithListIndex(e10), u10 = [], d10 = It.map(n10, (e11) => this.createTreeNode(e11, o10, o10.visible ? 1 : 0, c10, u10, r10)), f10 = e10[e10.length - 1], p10 = 0;
      for (let e11 = f10; e11 >= 0 && e11 < o10.children.length; e11--) {
        let t11 = o10.children[e11];
        if (t11.visible) {
          p10 = t11.visibleChildIndex;
          break;
        }
      }
      let m10 = [], h10 = 0, g10 = 0;
      for (let e11 of d10) m10.push(e11), g10 += e11.renderNodeCount, e11.visible && (e11.visibleChildIndex = p10 + h10++);
      let _10 = oe(o10.children, f10, t10, m10);
      a10 ? o10.lastDiffIds ? oe(o10.lastDiffIds, f10, t10, m10.map((e11) => a10.getId(e11.element).toString())) : o10.lastDiffIds = o10.children.map((e11) => a10.getId(e11.element).toString()) : o10.lastDiffIds = void 0;
      let v10 = 0;
      for (let e11 of _10) e11.visible && v10++;
      if (v10 !== 0) for (let e11 = f10 + m10.length; e11 < o10.children.length; e11++) {
        let t11 = o10.children[e11];
        t11.visible && (t11.visibleChildIndex -= v10);
      }
      if (o10.visibleChildrenCount += h10 - v10, c10 && l10) {
        let e11 = _10.reduce((e12, t11) => e12 + (t11.visible ? t11.renderNodeCount : 0), 0);
        this._updateAncestorsRenderNodeCount(o10, g10 - e11), this.list.splice(s10, e11, u10);
      }
      if (_10.length > 0 && i10) {
        let e11 = (t11) => {
          i10(t11), t11.children.forEach(e11);
        };
        _10.forEach(e11);
      }
      this._onDidSplice.fire({
        insertedNodes: m10,
        deletedNodes: _10
      });
      let y10 = o10;
      for (; y10; ) {
        if (y10.visibility === 2) {
          this.refilterDelayer.trigger(() => this.refilter());
          break;
        }
        y10 = y10.parent;
      }
    }
    rerender(e10) {
      if (e10.length === 0) throw new mW(this.user, `Invalid tree location`);
      let { node: t10, listIndex: n10, revealed: r10 } = this.getTreeNodeWithListIndex(e10);
      t10.visible && r10 && this.list.splice(n10, 1, [
        t10
      ]);
    }
    has(e10) {
      return this.hasTreeNode(e10);
    }
    getListIndex(e10) {
      let { listIndex: t10, visible: n10, revealed: r10 } = this.getTreeNodeWithListIndex(e10);
      return n10 && r10 ? t10 : -1;
    }
    getListRenderCount(e10) {
      return this.getTreeNode(e10).renderNodeCount;
    }
    isCollapsible(e10) {
      return this.getTreeNode(e10).collapsible;
    }
    setCollapsible(e10, t10) {
      let n10 = this.getTreeNode(e10);
      t10 === void 0 && (t10 = !n10.collapsible);
      let r10 = {
        collapsible: t10
      };
      return this.eventBufferer.bufferEvents(() => this._setCollapseState(e10, r10));
    }
    isCollapsed(e10) {
      return this.getTreeNode(e10).collapsed;
    }
    setCollapsed(e10, t10, n10) {
      let r10 = this.getTreeNode(e10);
      t10 === void 0 && (t10 = !r10.collapsed);
      let i10 = {
        collapsed: t10,
        recursive: n10 || false
      };
      return this.eventBufferer.bufferEvents(() => this._setCollapseState(e10, i10));
    }
    _setCollapseState(e10, t10) {
      let { node: n10, listIndex: r10, revealed: i10 } = this.getTreeNodeWithListIndex(e10), a10 = this._setListNodeCollapseState(n10, r10, i10, t10);
      if (n10 !== this.root && this.autoExpandSingleChildren && a10 && !vW(t10) && n10.collapsible && !n10.collapsed && !t10.recursive) {
        let r11 = -1;
        for (let e11 = 0; e11 < n10.children.length; e11++) {
          let t11 = n10.children[e11];
          if (t11.visible) if (r11 > -1) {
            r11 = -1;
            break;
          } else r11 = e11;
        }
        r11 > -1 && this._setCollapseState([
          ...e10,
          r11
        ], t10);
      }
      return a10;
    }
    _setListNodeCollapseState(e10, t10, n10, r10) {
      let i10 = this._setNodeCollapseState(e10, r10, false);
      if (!n10 || !e10.visible || !i10) return i10;
      let a10 = e10.renderNodeCount, o10 = this.updateNodeAfterCollapseChange(e10), s10 = a10 - (t10 === -1 ? 0 : 1);
      return this.list.splice(t10 + 1, s10, o10.slice(1)), i10;
    }
    _setNodeCollapseState(e10, t10, n10) {
      let r10;
      if (e10 === this.root ? r10 = false : (vW(t10) ? (r10 = e10.collapsible !== t10.collapsible, e10.collapsible = t10.collapsible) : e10.collapsible ? (r10 = e10.collapsed !== t10.collapsed, e10.collapsed = t10.collapsed) : r10 = false, r10 && this._onDidChangeCollapseState.fire({
        node: e10,
        deep: n10
      })), !vW(t10) && t10.recursive) for (let n11 of e10.children) r10 = this._setNodeCollapseState(n11, t10, true) || r10;
      return r10;
    }
    expandTo(e10) {
      this.eventBufferer.bufferEvents(() => {
        let t10 = this.getTreeNode(e10);
        for (; t10.parent; ) t10 = t10.parent, e10 = e10.slice(0, e10.length - 1), t10.collapsed && this._setCollapseState(e10, {
          collapsed: false,
          recursive: false
        });
      });
    }
    refilter() {
      let e10 = this.root.renderNodeCount, t10 = this.updateNodeAfterFilterChange(this.root);
      this.list.splice(0, e10, t10), this.refilterDelayer.cancel();
    }
    createTreeNode(e10, t10, n10, r10, i10, a10) {
      let o10 = {
        parent: t10,
        element: e10.element,
        children: [],
        depth: t10.depth + 1,
        visibleChildrenCount: 0,
        visibleChildIndex: -1,
        collapsible: typeof e10.collapsible == `boolean` ? e10.collapsible : e10.collapsed !== void 0,
        collapsed: e10.collapsed === void 0 ? this.collapseByDefault : e10.collapsed,
        renderNodeCount: 1,
        visibility: 1,
        visible: true,
        filterData: void 0
      }, s10 = this._filterNode(o10, n10);
      o10.visibility = s10, r10 && i10.push(o10);
      let c10 = e10.children || It.empty(), l10 = r10 && s10 !== 0 && !o10.collapsed, u10 = 0, d10 = 1;
      for (let e11 of c10) {
        let t11 = this.createTreeNode(e11, o10, s10, l10, i10, a10);
        o10.children.push(t11), d10 += t11.renderNodeCount, t11.visible && (t11.visibleChildIndex = u10++);
      }
      return this.allowNonCollapsibleParents || (o10.collapsible = o10.collapsible || o10.children.length > 0), o10.visibleChildrenCount = u10, o10.visible = s10 === 2 ? u10 > 0 : s10 === 1, o10.visible ? o10.collapsed || (o10.renderNodeCount = d10) : (o10.renderNodeCount = 0, r10 && i10.pop()), a10 == null ? void 0 : a10(o10), o10;
    }
    updateNodeAfterCollapseChange(e10) {
      let t10 = e10.renderNodeCount, n10 = [];
      return this._updateNodeAfterCollapseChange(e10, n10), this._updateAncestorsRenderNodeCount(e10.parent, n10.length - t10), n10;
    }
    _updateNodeAfterCollapseChange(e10, t10) {
      if (e10.visible === false) return 0;
      if (t10.push(e10), e10.renderNodeCount = 1, !e10.collapsed) for (let n10 of e10.children) e10.renderNodeCount += this._updateNodeAfterCollapseChange(n10, t10);
      return this._onDidChangeRenderNodeCount.fire(e10), e10.renderNodeCount;
    }
    updateNodeAfterFilterChange(e10) {
      let t10 = e10.renderNodeCount, n10 = [];
      return this._updateNodeAfterFilterChange(e10, e10.visible ? 1 : 0, n10), this._updateAncestorsRenderNodeCount(e10.parent, n10.length - t10), n10;
    }
    _updateNodeAfterFilterChange(e10, t10, n10, r10 = true) {
      let i10;
      if (e10 !== this.root) {
        if (i10 = this._filterNode(e10, t10), i10 === 0) return e10.visible = false, e10.renderNodeCount = 0, false;
        r10 && n10.push(e10);
      }
      let a10 = n10.length;
      e10.renderNodeCount = e10 === this.root ? 0 : 1;
      let o10 = false;
      if (!e10.collapsed || i10 !== 0) {
        let t11 = 0;
        for (let a11 of e10.children) o10 = this._updateNodeAfterFilterChange(a11, i10, n10, r10 && !e10.collapsed) || o10, a11.visible && (a11.visibleChildIndex = t11++);
        e10.visibleChildrenCount = t11;
      } else e10.visibleChildrenCount = 0;
      return e10 !== this.root && (e10.visible = i10 === 2 ? o10 : i10 === 1, e10.visibility = i10), e10.visible ? e10.collapsed || (e10.renderNodeCount += n10.length - a10) : (e10.renderNodeCount = 0, r10 && n10.pop()), this._onDidChangeRenderNodeCount.fire(e10), e10.visible;
    }
    _updateAncestorsRenderNodeCount(e10, t10) {
      if (t10 !== 0) for (; e10; ) e10.renderNodeCount += t10, this._onDidChangeRenderNodeCount.fire(e10), e10 = e10.parent;
    }
    _filterNode(e10, t10) {
      let n10 = this.filter ? this.filter.filter(e10.element, t10) : 1;
      return typeof n10 == `boolean` ? (e10.filterData = void 0, n10 ? 1 : 0) : gW(n10) ? (e10.filterData = n10.data, _W(n10.visibility)) : (e10.filterData = void 0, _W(n10));
    }
    hasTreeNode(e10, t10 = this.root) {
      if (!e10 || e10.length === 0) return true;
      let [n10, ...r10] = e10;
      return n10 < 0 || n10 > t10.children.length ? false : this.hasTreeNode(r10, t10.children[n10]);
    }
    getTreeNode(e10, t10 = this.root) {
      if (!e10 || e10.length === 0) return t10;
      let [n10, ...r10] = e10;
      if (n10 < 0 || n10 > t10.children.length) throw new mW(this.user, `Invalid tree location`);
      return this.getTreeNode(r10, t10.children[n10]);
    }
    getTreeNodeWithListIndex(e10) {
      if (e10.length === 0) return {
        node: this.root,
        listIndex: -1,
        revealed: true,
        visible: false
      };
      let { parentNode: t10, listIndex: n10, revealed: r10, visible: i10 } = this.getParentNodeWithListIndex(e10), a10 = e10[e10.length - 1];
      if (a10 < 0 || a10 > t10.children.length) throw new mW(this.user, `Invalid tree location`);
      let o10 = t10.children[a10];
      return {
        node: o10,
        listIndex: n10,
        revealed: r10,
        visible: i10 && o10.visible
      };
    }
    getParentNodeWithListIndex(e10, t10 = this.root, n10 = 0, r10 = true, i10 = true) {
      let [a10, ...o10] = e10;
      if (a10 < 0 || a10 > t10.children.length) throw new mW(this.user, `Invalid tree location`);
      for (let e11 = 0; e11 < a10; e11++) n10 += t10.children[e11].renderNodeCount;
      return r10 && (r10 = !t10.collapsed), i10 && (i10 = t10.visible), o10.length === 0 ? {
        parentNode: t10,
        listIndex: n10,
        revealed: r10,
        visible: i10
      } : this.getParentNodeWithListIndex(o10, t10.children[a10], n10 + 1, r10, i10);
    }
    getNode(e10 = []) {
      return this.getTreeNode(e10);
    }
    getNodeLocation(e10) {
      let t10 = [], n10 = e10;
      for (; n10.parent; ) t10.push(n10.parent.children.indexOf(n10)), n10 = n10.parent;
      return t10.reverse();
    }
    getParentNodeLocation(e10) {
      if (e10.length !== 0) return e10.length === 1 ? [] : c(e10)[0];
    }
    getFirstElementChild(e10) {
      let t10 = this.getTreeNode(e10);
      if (t10.children.length !== 0) return t10.children[0].element;
    }
  }, bW = class extends XP {
    constructor(e10) {
      super(e10.elements.map((e11) => e11.element)), this.data = e10;
    }
  };
  function xW(e10) {
    return e10 instanceof XP ? new bW(e10) : e10;
  }
  var SW = class {
    constructor(e10, t10) {
      this.modelProvider = e10, this.dnd = t10, this.autoExpandDisposable = j.None, this.disposables = new A();
    }
    getDragURI(e10) {
      return this.dnd.getDragURI(e10.element);
    }
    getDragLabel(e10, t10) {
      if (this.dnd.getDragLabel) return this.dnd.getDragLabel(e10.map((e11) => e11.element), t10);
    }
    onDragStart(e10, t10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragStart) == null ? void 0 : _b3.call(_a3, xW(e10), t10);
    }
    onDragOver(e10, t10, n10, r10, i10, a10 = true) {
      let o10 = this.dnd.onDragOver(xW(e10), t10 && t10.element, n10, r10, i10), s10 = this.autoExpandNode !== t10;
      if (s10 && (this.autoExpandDisposable.dispose(), this.autoExpandNode = t10), t10 === void 0) return o10;
      if (s10 && typeof o10 != `boolean` && o10.autoExpand && (this.autoExpandDisposable = il(() => {
        let e11 = this.modelProvider(), n11 = e11.getNodeLocation(t10);
        e11.isCollapsed(n11) && e11.setCollapsed(n11, false), this.autoExpandNode = void 0;
      }, 500, this.disposables)), typeof o10 == `boolean` || !o10.accept || o10.bubble === void 0 || o10.feedback) {
        if (!a10) {
          let e11 = typeof o10 == `boolean` ? o10 : o10.accept, t11 = typeof o10 == `boolean` ? void 0 : o10.effect;
          return {
            accept: e11,
            effect: t11,
            feedback: [
              n10
            ]
          };
        }
        return o10;
      }
      if (o10.bubble === 1) {
        let n11 = this.modelProvider(), a11 = n11.getNodeLocation(t10), o11 = n11.getParentNodeLocation(a11), s11 = n11.getNode(o11), c11 = o11 && n11.getListIndex(o11);
        return this.onDragOver(e10, s11, c11, r10, i10, false);
      }
      let c10 = this.modelProvider(), l10 = c10.getNodeLocation(t10), u10 = c10.getListIndex(l10), d10 = c10.getListRenderCount(l10);
      return {
        ...o10,
        feedback: w(u10, u10 + d10)
      };
    }
    drop(e10, t10, n10, r10, i10) {
      this.autoExpandDisposable.dispose(), this.autoExpandNode = void 0, this.dnd.drop(xW(e10), t10 && t10.element, n10, r10, i10);
    }
    onDragEnd(e10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragEnd) == null ? void 0 : _b3.call(_a3, e10);
    }
    dispose() {
      this.disposables.dispose(), this.dnd.dispose();
    }
  };
  function CW(e10, t10) {
    return t10 && {
      ...t10,
      identityProvider: t10.identityProvider && {
        getId(e11) {
          return t10.identityProvider.getId(e11.element);
        }
      },
      dnd: t10.dnd && new SW(e10, t10.dnd),
      multipleSelectionController: t10.multipleSelectionController && {
        isSelectionSingleChangeEvent(e11) {
          return t10.multipleSelectionController.isSelectionSingleChangeEvent({
            ...e11,
            element: e11.element
          });
        },
        isSelectionRangeChangeEvent(e11) {
          return t10.multipleSelectionController.isSelectionRangeChangeEvent({
            ...e11,
            element: e11.element
          });
        }
      },
      accessibilityProvider: t10.accessibilityProvider && {
        ...t10.accessibilityProvider,
        getSetSize(t11) {
          let n10 = e10(), r10 = n10.getNodeLocation(t11), i10 = n10.getParentNodeLocation(r10), a10 = n10.getNode(i10);
          return a10.visibleChildrenCount;
        },
        getPosInSet(e11) {
          return e11.visibleChildIndex + 1;
        },
        isChecked: t10.accessibilityProvider && t10.accessibilityProvider.isChecked ? (e11) => t10.accessibilityProvider.isChecked(e11.element) : void 0,
        getRole: t10.accessibilityProvider && t10.accessibilityProvider.getRole ? (e11) => t10.accessibilityProvider.getRole(e11.element) : () => `treeitem`,
        getAriaLabel(e11) {
          return t10.accessibilityProvider.getAriaLabel(e11.element);
        },
        getWidgetAriaLabel() {
          return t10.accessibilityProvider.getWidgetAriaLabel();
        },
        getWidgetRole: t10.accessibilityProvider && t10.accessibilityProvider.getWidgetRole ? () => t10.accessibilityProvider.getWidgetRole() : () => `tree`,
        getAriaLevel: t10.accessibilityProvider && t10.accessibilityProvider.getAriaLevel ? (e11) => t10.accessibilityProvider.getAriaLevel(e11.element) : (e11) => e11.depth,
        getActiveDescendantId: t10.accessibilityProvider.getActiveDescendantId && ((e11) => t10.accessibilityProvider.getActiveDescendantId(e11.element))
      },
      keyboardNavigationLabelProvider: t10.keyboardNavigationLabelProvider && {
        ...t10.keyboardNavigationLabelProvider,
        getKeyboardNavigationLabel(e11) {
          return t10.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e11.element);
        }
      }
    };
  }
  var wW = class {
    constructor(e10) {
      this.delegate = e10;
    }
    getHeight(e10) {
      return this.delegate.getHeight(e10.element);
    }
    getTemplateId(e10) {
      return this.delegate.getTemplateId(e10.element);
    }
    hasDynamicHeight(e10) {
      return !!this.delegate.hasDynamicHeight && this.delegate.hasDynamicHeight(e10.element);
    }
    setDynamicHeight(e10, t10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.delegate).setDynamicHeight) == null ? void 0 : _b3.call(_a3, e10.element, t10);
    }
  }, TW;
  (function(e10) {
    e10.None = `none`, e10.OnHover = `onHover`, e10.Always = `always`;
  })(TW || (TW = {}));
  var EW = class {
    get elements() {
      return this._elements;
    }
    constructor(e10, t10 = []) {
      this._elements = t10, this.disposables = new A(), this.onDidChange = M.forEach(e10, (e11) => this._elements = e11, this.disposables);
    }
    dispose() {
      this.disposables.dispose();
    }
  }, DW = (_va = class {
    constructor(t10, n10, r10, i10, a10, o10 = {}) {
      var _a3;
      this.renderer = t10, this.modelProvider = n10, this.activeNodes = i10, this.renderedIndentGuides = a10, this.renderedElements = /* @__PURE__ */ new Map(), this.renderedNodes = /* @__PURE__ */ new Map(), this.indent = _va.DefaultIndent, this.hideTwistiesOfChildlessElements = false, this.shouldRenderIndentGuides = false, this.activeIndentNodes = /* @__PURE__ */ new Set(), this.indentGuidesDisposable = j.None, this.disposables = new A(), this.templateId = t10.templateId, this.updateOptions(o10), M.map(r10, (e10) => e10.node)(this.onDidChangeNodeTwistieState, this, this.disposables), (_a3 = t10.onDidChangeTwistieState) == null ? void 0 : _a3.call(t10, this.onDidChangeTwistieState, this, this.disposables);
    }
    updateOptions(e10 = {}) {
      if (e10.indent !== void 0) {
        let t10 = Ax(e10.indent, 0, 40);
        if (t10 !== this.indent) {
          this.indent = t10;
          for (let [e11, t11] of this.renderedNodes) this.renderTreeElement(e11, t11);
        }
      }
      if (e10.renderIndentGuides !== void 0) {
        let t10 = e10.renderIndentGuides !== TW.None;
        if (t10 !== this.shouldRenderIndentGuides) {
          this.shouldRenderIndentGuides = t10;
          for (let [e11, t11] of this.renderedNodes) this._renderIndentGuides(e11, t11);
          if (this.indentGuidesDisposable.dispose(), t10) {
            let e11 = new A();
            this.activeNodes.onDidChange(this._onDidChangeActiveNodes, this, e11), this.indentGuidesDisposable = e11, this._onDidChangeActiveNodes(this.activeNodes.elements);
          }
        }
      }
      e10.hideTwistiesOfChildlessElements !== void 0 && (this.hideTwistiesOfChildlessElements = e10.hideTwistiesOfChildlessElements);
    }
    renderTemplate(e10) {
      let t10 = V(e10, H(`.monaco-tl-row`)), n10 = V(t10, H(`.monaco-tl-indent`)), r10 = V(t10, H(`.monaco-tl-twistie`)), i10 = V(t10, H(`.monaco-tl-contents`)), a10 = this.renderer.renderTemplate(i10);
      return {
        container: e10,
        indent: n10,
        twistie: r10,
        indentGuidesDisposable: j.None,
        templateData: a10
      };
    }
    renderElement(e10, t10, n10, r10) {
      this.renderedNodes.set(e10, n10), this.renderedElements.set(e10.element, e10), this.renderTreeElement(e10, n10), this.renderer.renderElement(e10, t10, n10.templateData, r10);
    }
    disposeElement(e10, t10, n10, r10) {
      var _a3, _b3;
      n10.indentGuidesDisposable.dispose(), (_b3 = (_a3 = this.renderer).disposeElement) == null ? void 0 : _b3.call(_a3, e10, t10, n10.templateData, r10), typeof r10 == `number` && (this.renderedNodes.delete(e10), this.renderedElements.delete(e10.element));
    }
    disposeTemplate(e10) {
      this.renderer.disposeTemplate(e10.templateData);
    }
    onDidChangeTwistieState(e10) {
      let t10 = this.renderedElements.get(e10);
      t10 && this.onDidChangeNodeTwistieState(t10);
    }
    onDidChangeNodeTwistieState(e10) {
      let t10 = this.renderedNodes.get(e10);
      t10 && (this._onDidChangeActiveNodes(this.activeNodes.elements), this.renderTreeElement(e10, t10));
    }
    renderTreeElement(t10, n10) {
      let r10 = _va.DefaultIndent + (t10.depth - 1) * this.indent;
      n10.twistie.style.paddingLeft = `${r10}px`, n10.indent.style.width = `${r10 + this.indent - 16}px`, t10.collapsible ? n10.container.setAttribute(`aria-expanded`, String(!t10.collapsed)) : n10.container.removeAttribute(`aria-expanded`), n10.twistie.classList.remove(...sp.asClassNameArray(L.treeItemExpanded));
      let i10 = false;
      this.renderer.renderTwistie && (i10 = this.renderer.renderTwistie(t10.element, n10.twistie)), t10.collapsible && (!this.hideTwistiesOfChildlessElements || t10.visibleChildrenCount > 0) ? (i10 || n10.twistie.classList.add(...sp.asClassNameArray(L.treeItemExpanded)), n10.twistie.classList.add(`collapsible`), n10.twistie.classList.toggle(`collapsed`, t10.collapsed)) : n10.twistie.classList.remove(`collapsible`, `collapsed`), this._renderIndentGuides(t10, n10);
    }
    _renderIndentGuides(e10, t10) {
      if (Zu(t10.indent), t10.indentGuidesDisposable.dispose(), !this.shouldRenderIndentGuides) return;
      let n10 = new A(), r10 = this.modelProvider();
      for (; ; ) {
        let i10 = r10.getNodeLocation(e10), a10 = r10.getParentNodeLocation(i10);
        if (!a10) break;
        let o10 = r10.getNode(a10), s10 = H(`.indent-guide`, {
          style: `width: ${this.indent}px`
        });
        this.activeIndentNodes.has(o10) && s10.classList.add(`active`), t10.indent.childElementCount === 0 ? t10.indent.appendChild(s10) : t10.indent.insertBefore(s10, t10.indent.firstElementChild), this.renderedIndentGuides.add(o10, s10), n10.add(k(() => this.renderedIndentGuides.delete(o10, s10))), e10 = o10;
      }
      t10.indentGuidesDisposable = n10;
    }
    _onDidChangeActiveNodes(e10) {
      if (!this.shouldRenderIndentGuides) return;
      let t10 = /* @__PURE__ */ new Set(), n10 = this.modelProvider();
      e10.forEach((e11) => {
        let r10 = n10.getNodeLocation(e11);
        try {
          let i10 = n10.getParentNodeLocation(r10);
          e11.collapsible && e11.children.length > 0 && !e11.collapsed ? t10.add(e11) : i10 && t10.add(n10.getNode(i10));
        } catch {
        }
      }), this.activeIndentNodes.forEach((e11) => {
        t10.has(e11) || this.renderedIndentGuides.forEach(e11, (e12) => e12.classList.remove(`active`));
      }), t10.forEach((e11) => {
        this.activeIndentNodes.has(e11) || this.renderedIndentGuides.forEach(e11, (e12) => e12.classList.add(`active`));
      }), this.activeIndentNodes = t10;
    }
    dispose() {
      this.renderedNodes.clear(), this.renderedElements.clear(), this.indentGuidesDisposable.dispose(), Rr(this.disposables);
    }
  }, _va.DefaultIndent = 8, _va), OW = class {
    get totalCount() {
      return this._totalCount;
    }
    get matchCount() {
      return this._matchCount;
    }
    constructor(e10, t10, n10) {
      this.tree = e10, this.keyboardNavigationLabelProvider = t10, this._filter = n10, this._totalCount = 0, this._matchCount = 0, this._pattern = ``, this._lowercasePattern = ``, this.disposables = new A(), e10.onWillRefilter(this.reset, this, this.disposables);
    }
    filter(e10, t10) {
      let n10 = 1;
      if (this._filter) {
        let r11 = this._filter.filter(e10, t10);
        if (n10 = typeof r11 == `boolean` ? r11 ? 1 : 0 : gW(r11) ? _W(r11.visibility) : r11, n10 === 0) return false;
      }
      if (this._totalCount++, !this._pattern) return this._matchCount++, {
        data: LO.Default,
        visibility: n10
      };
      let r10 = this.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(e10), i10 = Array.isArray(r10) ? r10 : [
        r10
      ];
      for (let e11 of i10) {
        let t11 = e11 && e11.toString();
        if (t11 === void 0) return {
          data: LO.Default,
          visibility: n10
        };
        let r11;
        if (this.tree.findMatchType === AW.Contiguous) {
          let e12 = t11.toLowerCase().indexOf(this._lowercasePattern);
          if (e12 > -1) {
            r11 = [
              2 ** 53 - 1,
              0
            ];
            for (let t12 = this._lowercasePattern.length; t12 > 0; t12--) r11.push(e12 + t12 - 1);
          }
        } else r11 = zO(this._pattern, this._lowercasePattern, 0, t11, t11.toLowerCase(), 0, {
          firstMatchCanBeWeak: true,
          boostFullMatch: true
        });
        if (r11) return this._matchCount++, i10.length === 1 ? {
          data: r11,
          visibility: n10
        } : {
          data: {
            label: t11,
            score: r11
          },
          visibility: n10
        };
      }
      return this.tree.findMode === kW.Filter ? typeof this.tree.options.defaultFindVisibility == `number` ? this.tree.options.defaultFindVisibility : this.tree.options.defaultFindVisibility ? this.tree.options.defaultFindVisibility(e10) : 2 : {
        data: LO.Default,
        visibility: n10
      };
    }
    reset() {
      this._totalCount = 0, this._matchCount = 0;
    }
    dispose() {
      Rr(this.disposables);
    }
  }, kW;
  (function(e10) {
    e10[e10.Highlight = 0] = `Highlight`, e10[e10.Filter = 1] = `Filter`;
  })(kW || (kW = {}));
  var AW;
  (function(e10) {
    e10[e10.Fuzzy = 0] = `Fuzzy`, e10[e10.Contiguous = 1] = `Contiguous`;
  })(AW || (AW = {}));
  var jW = class {
    get pattern() {
      return this._pattern;
    }
    get mode() {
      return this._mode;
    }
    set mode(e10) {
      e10 !== this._mode && (this._mode = e10, this.widget && (this.widget.mode = this._mode), this.tree.refilter(), this.render(), this._onDidChangeMode.fire(e10));
    }
    get matchType() {
      return this._matchType;
    }
    set matchType(e10) {
      e10 !== this._matchType && (this._matchType = e10, this.widget && (this.widget.matchType = this._matchType), this.tree.refilter(), this.render(), this._onDidChangeMatchType.fire(e10));
    }
    constructor(e10, t10, n10, r10, i10, a10 = {}) {
      this.tree = e10, this.view = n10, this.filter = r10, this.contextViewProvider = i10, this.options = a10, this._pattern = ``, this.width = 0, this._onDidChangeMode = new N(), this.onDidChangeMode = this._onDidChangeMode.event, this._onDidChangeMatchType = new N(), this.onDidChangeMatchType = this._onDidChangeMatchType.event, this._onDidChangePattern = new N(), this._onDidChangeOpenState = new N(), this.onDidChangeOpenState = this._onDidChangeOpenState.event, this.enabledDisposables = new A(), this.disposables = new A(), this._mode = e10.options.defaultFindMode ?? kW.Highlight, this._matchType = e10.options.defaultFindMatchType ?? AW.Fuzzy, t10.onDidSplice(this.onDidSpliceModel, this, this.disposables);
    }
    updateOptions(e10 = {}) {
      e10.defaultFindMode !== void 0 && (this.mode = e10.defaultFindMode), e10.defaultFindMatchType !== void 0 && (this.matchType = e10.defaultFindMatchType);
    }
    onDidSpliceModel() {
      !this.widget || this.pattern.length === 0 || (this.tree.refilter(), this.render());
    }
    render() {
      var _a3, _b3, _c3;
      let e10 = this.filter.totalCount > 0 && this.filter.matchCount === 0;
      this.pattern && e10 ? (JA(T(`replFindNoResults`, `No results`)), this.tree.options.showNotFoundMessage ?? true ? (_a3 = this.widget) == null ? void 0 : _a3.showMessage({
        type: 2,
        content: T(`not found`, `No elements found.`)
      }) : (_b3 = this.widget) == null ? void 0 : _b3.showMessage({
        type: 2
      })) : ((_c3 = this.widget) == null ? void 0 : _c3.clearMessage(), this.pattern && JA(T(`replFindResults`, `{0} results`, this.filter.matchCount)));
    }
    shouldAllowFocus(e10) {
      return !this.widget || !this.pattern || this.filter.totalCount > 0 && this.filter.matchCount <= 1 ? true : !LO.isDefault(e10.filterData);
    }
    layout(e10) {
      var _a3;
      this.width = e10, (_a3 = this.widget) == null ? void 0 : _a3.layout(e10);
    }
    dispose() {
      this._history = void 0, this._onDidChangePattern.dispose(), this.enabledDisposables.dispose(), this.disposables.dispose();
    }
  };
  function MW(e10, t10) {
    return e10.position === t10.position && NW(e10, t10);
  }
  function NW(e10, t10) {
    return e10.node.element === t10.node.element && e10.startIndex === t10.startIndex && e10.height === t10.height && e10.endIndex === t10.endIndex;
  }
  var PW = class {
    constructor(e10 = []) {
      this.stickyNodes = e10;
    }
    get count() {
      return this.stickyNodes.length;
    }
    equal(e10) {
      return l(this.stickyNodes, e10.stickyNodes, MW);
    }
    lastNodePartiallyVisible() {
      if (this.count === 0) return false;
      let e10 = this.stickyNodes[this.count - 1];
      if (this.count === 1) return e10.position !== 0;
      let t10 = this.stickyNodes[this.count - 2];
      return t10.position + t10.height !== e10.position;
    }
    animationStateChanged(e10) {
      if (!l(this.stickyNodes, e10.stickyNodes, NW) || this.count === 0) return false;
      let t10 = this.stickyNodes[this.count - 1], n10 = e10.stickyNodes[e10.count - 1];
      return t10.position !== n10.position;
    }
  }, FW = class {
    constrainStickyScrollNodes(e10, t10, n10) {
      for (let r10 = 0; r10 < e10.length; r10++) {
        let i10 = e10[r10], a10 = i10.position + i10.height;
        if (a10 > n10 || r10 >= t10) return e10.slice(0, r10);
      }
      return e10;
    }
  }, IW = class extends j {
    constructor(e10, t10, n10, r10, i10, a10 = {}) {
      super(), this.tree = e10, this.model = t10, this.view = n10, this.treeDelegate = i10, this.maxWidgetViewRatio = 0.4;
      let o10 = this.validateStickySettings(a10);
      this.stickyScrollMaxItemCount = o10.stickyScrollMaxItemCount, this.stickyScrollDelegate = a10.stickyScrollDelegate ?? new FW(), this._widget = this._register(new LW(n10.getScrollableElement(), n10, e10, r10, i10, a10.accessibilityProvider)), this.onDidChangeHasFocus = this._widget.onDidChangeHasFocus, this.onContextMenu = this._widget.onContextMenu, this._register(n10.onDidScroll(() => this.update())), this._register(n10.onDidChangeContentHeight(() => this.update())), this._register(e10.onDidChangeCollapseState(() => this.update())), this.update();
    }
    get height() {
      return this._widget.height;
    }
    getNodeAtHeight(e10) {
      let t10;
      if (t10 = e10 === 0 ? this.view.firstVisibleIndex : this.view.indexAt(e10 + this.view.scrollTop), !(t10 < 0 || t10 >= this.view.length)) return this.view.element(t10);
    }
    update() {
      let e10 = this.getNodeAtHeight(0);
      if (!e10 || this.tree.scrollTop === 0) {
        this._widget.setState(void 0);
        return;
      }
      let t10 = this.findStickyState(e10);
      this._widget.setState(t10);
    }
    findStickyState(e10) {
      let t10 = [], n10 = e10, r10 = 0, i10 = this.getNextStickyNode(n10, void 0, r10);
      for (; i10 && (t10.push(i10), r10 += i10.height, !(t10.length <= this.stickyScrollMaxItemCount && (n10 = this.getNextVisibleNode(i10), !n10))); ) i10 = this.getNextStickyNode(n10, i10.node, r10);
      let a10 = this.constrainStickyNodes(t10);
      return a10.length ? new PW(a10) : void 0;
    }
    getNextVisibleNode(e10) {
      return this.getNodeAtHeight(e10.position + e10.height);
    }
    getNextStickyNode(e10, t10, n10) {
      let r10 = this.getAncestorUnderPrevious(e10, t10);
      if (r10 && !(r10 === e10 && (!this.nodeIsUncollapsedParent(e10) || this.nodeTopAlignsWithStickyNodesBottom(e10, n10)))) return this.createStickyScrollNode(r10, n10);
    }
    nodeTopAlignsWithStickyNodesBottom(e10, t10) {
      let n10 = this.getNodeIndex(e10), r10 = this.view.getElementTop(n10), i10 = t10;
      return this.view.scrollTop === r10 - i10;
    }
    createStickyScrollNode(e10, t10) {
      let n10 = this.treeDelegate.getHeight(e10), { startIndex: r10, endIndex: i10 } = this.getNodeRange(e10), a10 = this.calculateStickyNodePosition(i10, t10, n10);
      return {
        node: e10,
        position: a10,
        height: n10,
        startIndex: r10,
        endIndex: i10
      };
    }
    getAncestorUnderPrevious(e10, t10 = void 0) {
      let n10 = e10, r10 = this.getParentNode(n10);
      for (; r10; ) {
        if (r10 === t10) return n10;
        n10 = r10, r10 = this.getParentNode(n10);
      }
      if (t10 === void 0) return n10;
    }
    calculateStickyNodePosition(e10, t10, n10) {
      let r10 = this.view.getRelativeTop(e10);
      if (r10 === null && this.view.firstVisibleIndex === e10 && e10 + 1 < this.view.length) {
        let t11 = this.treeDelegate.getHeight(this.view.element(e10)), n11 = this.view.getRelativeTop(e10 + 1);
        r10 = n11 ? n11 - t11 / this.view.renderHeight : null;
      }
      if (r10 === null) return t10;
      let i10 = this.view.element(e10), a10 = this.treeDelegate.getHeight(i10), o10 = r10 * this.view.renderHeight, s10 = o10 + a10;
      return t10 + n10 > s10 && t10 <= s10 ? s10 - n10 : t10;
    }
    constrainStickyNodes(e10) {
      if (e10.length === 0) return [];
      let t10 = this.view.renderHeight * this.maxWidgetViewRatio, n10 = e10[e10.length - 1];
      if (e10.length <= this.stickyScrollMaxItemCount && n10.position + n10.height <= t10) return e10;
      let r10 = this.stickyScrollDelegate.constrainStickyScrollNodes(e10, this.stickyScrollMaxItemCount, t10);
      if (!r10.length) return [];
      let i10 = r10[r10.length - 1];
      if (r10.length > this.stickyScrollMaxItemCount || i10.position + i10.height > t10) throw Error(`stickyScrollDelegate violates constraints`);
      return r10;
    }
    getParentNode(e10) {
      let t10 = this.model.getNodeLocation(e10), n10 = this.model.getParentNodeLocation(t10);
      return n10 ? this.model.getNode(n10) : void 0;
    }
    nodeIsUncollapsedParent(e10) {
      let t10 = this.model.getNodeLocation(e10);
      return this.model.getListRenderCount(t10) > 1;
    }
    getNodeIndex(e10) {
      let t10 = this.model.getNodeLocation(e10), n10 = this.model.getListIndex(t10);
      return n10;
    }
    getNodeRange(e10) {
      let t10 = this.model.getNodeLocation(e10), n10 = this.model.getListIndex(t10);
      if (n10 < 0) throw Error(`Node not found in tree`);
      let r10 = this.model.getListRenderCount(t10), i10 = n10 + r10 - 1;
      return {
        startIndex: n10,
        endIndex: i10
      };
    }
    nodePositionTopBelowWidget(e10) {
      let t10 = [], n10 = this.getParentNode(e10);
      for (; n10; ) t10.push(n10), n10 = this.getParentNode(n10);
      let r10 = 0;
      for (let e11 = 0; e11 < t10.length && e11 < this.stickyScrollMaxItemCount; e11++) r10 += this.treeDelegate.getHeight(t10[e11]);
      return r10;
    }
    domFocus() {
      this._widget.domFocus();
    }
    focusedLast() {
      return this._widget.focusedLast();
    }
    updateOptions(e10 = {}) {
      if (!e10.stickyScrollMaxItemCount) return;
      let t10 = this.validateStickySettings(e10);
      this.stickyScrollMaxItemCount !== t10.stickyScrollMaxItemCount && (this.stickyScrollMaxItemCount = t10.stickyScrollMaxItemCount, this.update());
    }
    validateStickySettings(e10) {
      let t10 = 7;
      return typeof e10.stickyScrollMaxItemCount == `number` && (t10 = Math.max(e10.stickyScrollMaxItemCount, 1)), {
        stickyScrollMaxItemCount: t10
      };
    }
  }, LW = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.view = t10, this.tree = n10, this.treeRenderers = r10, this.treeDelegate = i10, this.accessibilityProvider = a10, this._previousElements = [], this._previousStateDisposables = new A(), this._rootDomNode = H(`.monaco-tree-sticky-container.empty`), e10.appendChild(this._rootDomNode);
      let o10 = H(`.monaco-tree-sticky-container-shadow`);
      this._rootDomNode.appendChild(o10), this.stickyScrollFocus = new RW(this._rootDomNode, t10), this.onDidChangeHasFocus = this.stickyScrollFocus.onDidChangeHasFocus, this.onContextMenu = this.stickyScrollFocus.onContextMenu;
    }
    get height() {
      if (!this._previousState) return 0;
      let e10 = this._previousState.stickyNodes[this._previousState.count - 1];
      return e10.position + e10.height;
    }
    setState(e10) {
      let t10 = !!this._previousState && this._previousState.count > 0, n10 = !!e10 && e10.count > 0;
      if (!t10 && !n10 || t10 && n10 && this._previousState.equal(e10)) return;
      if (t10 !== n10 && this.setVisible(n10), !n10) {
        this._previousState = void 0, this._previousElements = [], this._previousStateDisposables.clear();
        return;
      }
      let r10 = e10.stickyNodes[e10.count - 1];
      if (this._previousState && e10.animationStateChanged(this._previousState)) this._previousElements[this._previousState.count - 1].style.top = `${r10.position}px`;
      else {
        this._previousStateDisposables.clear();
        let t11 = Array(e10.count);
        for (let n11 = e10.count - 1; n11 >= 0; n11--) {
          let r11 = e10.stickyNodes[n11], { element: i10, disposable: a10 } = this.createElement(r11, n11, e10.count);
          t11[n11] = i10, this._rootDomNode.appendChild(i10), this._previousStateDisposables.add(a10);
        }
        this.stickyScrollFocus.updateElements(t11, e10), this._previousElements = t11;
      }
      this._previousState = e10, this._rootDomNode.style.height = `${r10.position + r10.height}px`;
    }
    createElement(e10, t10, n10) {
      let r10 = e10.startIndex, i10 = document.createElement(`div`);
      i10.style.top = `${e10.position}px`, this.tree.options.setRowHeight !== false && (i10.style.height = `${e10.height}px`), this.tree.options.setRowLineHeight !== false && (i10.style.lineHeight = `${e10.height}px`), i10.classList.add(`monaco-tree-sticky-row`), i10.classList.add(`monaco-list-row`), i10.setAttribute(`data-index`, `${r10}`), i10.setAttribute(`data-parity`, r10 % 2 == 0 ? `even` : `odd`), i10.setAttribute(`id`, this.view.getElementID(r10));
      let a10 = this.setAccessibilityAttributes(i10, e10.node.element, t10, n10), o10 = this.treeDelegate.getTemplateId(e10.node), s10 = this.treeRenderers.find((e11) => e11.templateId === o10);
      if (!s10) throw Error(`No renderer found for template id ${o10}`);
      let c10 = e10.node;
      c10 === this.tree.getNode(this.tree.getNodeLocation(e10.node)) && (c10 = new Proxy(e10.node, {}));
      let l10 = s10.renderTemplate(i10);
      s10.renderElement(c10, e10.startIndex, l10, e10.height);
      let u10 = k(() => {
        a10.dispose(), s10.disposeElement(c10, e10.startIndex, l10, e10.height), s10.disposeTemplate(l10), i10.remove();
      });
      return {
        element: i10,
        disposable: u10
      };
    }
    setAccessibilityAttributes(e10, t10, n10, r10) {
      if (!this.accessibilityProvider) return j.None;
      this.accessibilityProvider.getSetSize && e10.setAttribute(`aria-setsize`, String(this.accessibilityProvider.getSetSize(t10, n10, r10))), this.accessibilityProvider.getPosInSet && e10.setAttribute(`aria-posinset`, String(this.accessibilityProvider.getPosInSet(t10, n10))), this.accessibilityProvider.getRole && e10.setAttribute(`role`, this.accessibilityProvider.getRole(t10) ?? `treeitem`);
      let i10 = this.accessibilityProvider.getAriaLabel(t10), a10 = i10 && typeof i10 != `string` ? i10 : iP(i10), o10 = QN((t11) => {
        let n11 = t11.readObservable(a10);
        n11 ? e10.setAttribute(`aria-label`, n11) : e10.removeAttribute(`aria-label`);
      });
      typeof i10 == `string` || i10 && e10.setAttribute(`aria-label`, i10.get());
      let s10 = this.accessibilityProvider.getAriaLevel && this.accessibilityProvider.getAriaLevel(t10);
      return typeof s10 == `number` && e10.setAttribute(`aria-level`, `${s10}`), e10.setAttribute(`aria-selected`, `false`), o10;
    }
    setVisible(e10) {
      this._rootDomNode.classList.toggle(`empty`, !e10), e10 || this.stickyScrollFocus.updateElements([], void 0);
    }
    domFocus() {
      this.stickyScrollFocus.domFocus();
    }
    focusedLast() {
      return this.stickyScrollFocus.focusedLast();
    }
    dispose() {
      this.stickyScrollFocus.dispose(), this._previousStateDisposables.dispose(), this._rootDomNode.remove();
    }
  }, RW = class extends j {
    get domHasFocus() {
      return this._domHasFocus;
    }
    set domHasFocus(e10) {
      e10 !== this._domHasFocus && (this._onDidChangeHasFocus.fire(e10), this._domHasFocus = e10);
    }
    constructor(e10, t10) {
      super(), this.container = e10, this.view = t10, this.focusedIndex = -1, this.elements = [], this._onDidChangeHasFocus = new N(), this.onDidChangeHasFocus = this._onDidChangeHasFocus.event, this._onContextMenu = new N(), this.onContextMenu = this._onContextMenu.event, this._domHasFocus = false, this._register(z(this.container, `focus`, () => this.onFocus())), this._register(z(this.container, `blur`, () => this.onBlur())), this._register(this.view.onDidFocus(() => this.toggleStickyScrollFocused(false))), this._register(this.view.onKeyDown((e11) => this.onKeyDown(e11))), this._register(this.view.onMouseDown((e11) => this.onMouseDown(e11))), this._register(this.view.onContextMenu((e11) => this.handleContextMenu(e11)));
    }
    handleContextMenu(e10) {
      let t10 = e10.browserEvent.target;
      if (!pF(t10) && !fF(t10)) {
        this.focusedLast() && this.view.domFocus();
        return;
      }
      if (!Yd(e10.browserEvent)) {
        if (!this.state) throw Error(`Context menu should not be triggered when state is undefined`);
        let t11 = this.state.stickyNodes.findIndex((t12) => {
          var _a3;
          return t12.node.element === ((_a3 = e10.element) == null ? void 0 : _a3.element);
        });
        if (t11 === -1) throw Error(`Context menu should not be triggered when element is not in sticky scroll widget`);
        this.container.focus(), this.setFocus(t11);
        return;
      }
      if (!this.state || this.focusedIndex < 0) throw Error(`Context menu key should not be triggered when focus is not in sticky scroll widget`);
      let n10 = this.state.stickyNodes[this.focusedIndex], r10 = n10.node.element, i10 = this.elements[this.focusedIndex];
      this._onContextMenu.fire({
        element: r10,
        anchor: i10,
        browserEvent: e10.browserEvent,
        isStickyScroll: true
      });
    }
    onKeyDown(e10) {
      if (this.domHasFocus && this.state) {
        if (e10.key === `ArrowUp`) this.setFocusedElement(Math.max(0, this.focusedIndex - 1)), e10.preventDefault(), e10.stopPropagation();
        else if (e10.key === `ArrowDown` || e10.key === `ArrowRight`) {
          if (this.focusedIndex >= this.state.count - 1) {
            let e11 = this.state.stickyNodes[this.state.count - 1].startIndex + 1;
            this.view.domFocus(), this.view.setFocus([
              e11
            ]), this.scrollNodeUnderWidget(e11, this.state);
          } else this.setFocusedElement(this.focusedIndex + 1);
          e10.preventDefault(), e10.stopPropagation();
        }
      }
    }
    onMouseDown(e10) {
      let t10 = e10.browserEvent.target;
      !pF(t10) && !fF(t10) || (e10.browserEvent.preventDefault(), e10.browserEvent.stopPropagation());
    }
    updateElements(e10, t10) {
      if (t10 && t10.count === 0) throw Error(`Sticky scroll state must be undefined when there are no sticky nodes`);
      if (t10 && t10.count !== e10.length) throw Error(`Sticky scroll focus received illigel state`);
      let n10 = this.focusedIndex;
      if (this.removeFocus(), this.elements = e10, this.state = t10, t10) {
        let e11 = Ax(n10, 0, t10.count - 1);
        this.setFocus(e11);
      } else this.domHasFocus && this.view.domFocus();
      this.container.tabIndex = t10 ? 0 : -1;
    }
    setFocusedElement(e10) {
      let t10 = this.state;
      if (!t10) throw Error(`Cannot set focus when state is undefined`);
      if (this.setFocus(e10), !(e10 < t10.count - 1) && t10.lastNodePartiallyVisible()) {
        let n10 = t10.stickyNodes[e10];
        this.scrollNodeUnderWidget(n10.endIndex + 1, t10);
      }
    }
    scrollNodeUnderWidget(e10, t10) {
      let n10 = t10.stickyNodes[t10.count - 1], r10 = t10.count > 1 ? t10.stickyNodes[t10.count - 2] : void 0, i10 = this.view.getElementTop(e10), a10 = r10 ? r10.position + r10.height + n10.height : n10.height;
      this.view.scrollTop = i10 - a10;
    }
    domFocus() {
      if (!this.state) throw Error(`Cannot focus when state is undefined`);
      this.container.focus();
    }
    focusedLast() {
      return this.state ? this.view.getHTMLElement().classList.contains(`sticky-scroll-focused`) : false;
    }
    removeFocus() {
      this.focusedIndex !== -1 && (this.toggleElementFocus(this.elements[this.focusedIndex], false), this.focusedIndex = -1);
    }
    setFocus(e10) {
      if (0 > e10) throw Error(`addFocus() can not remove focus`);
      if (!this.state && e10 >= 0) throw Error(`Cannot set focus index when state is undefined`);
      if (this.state && e10 >= this.state.count) throw Error(`Cannot set focus index to an index that does not exist`);
      let t10 = this.focusedIndex;
      t10 >= 0 && this.toggleElementFocus(this.elements[t10], false), e10 >= 0 && this.toggleElementFocus(this.elements[e10], true), this.focusedIndex = e10;
    }
    toggleElementFocus(e10, t10) {
      this.toggleElementActiveFocus(e10, t10 && this.domHasFocus), this.toggleElementPassiveFocus(e10, t10);
    }
    toggleCurrentElementActiveFocus(e10) {
      this.focusedIndex !== -1 && this.toggleElementActiveFocus(this.elements[this.focusedIndex], e10);
    }
    toggleElementActiveFocus(e10, t10) {
      e10.classList.toggle(`focused`, t10);
    }
    toggleElementPassiveFocus(e10, t10) {
      e10.classList.toggle(`passive-focused`, t10);
    }
    toggleStickyScrollFocused(e10) {
      this.view.getHTMLElement().classList.toggle(`sticky-scroll-focused`, e10);
    }
    onFocus() {
      if (!this.state || this.elements.length === 0) throw Error(`Cannot focus when state is undefined or elements are empty`);
      this.domHasFocus = true, this.toggleStickyScrollFocused(true), this.toggleCurrentElementActiveFocus(true), this.focusedIndex === -1 && this.setFocus(0);
    }
    onBlur() {
      this.domHasFocus = false, this.toggleCurrentElementActiveFocus(false);
    }
    dispose() {
      this.toggleStickyScrollFocused(false), this._onDidChangeHasFocus.fire(false), super.dispose();
    }
  };
  function zW(e10) {
    let t10 = pW.Unknown;
    return wd(e10.browserEvent.target, `monaco-tl-twistie`, `monaco-tl-row`) ? t10 = pW.Twistie : wd(e10.browserEvent.target, `monaco-tl-contents`, `monaco-tl-row`) ? t10 = pW.Element : wd(e10.browserEvent.target, `monaco-tree-type-filter`, `monaco-list`) && (t10 = pW.Filter), {
      browserEvent: e10.browserEvent,
      element: e10.element ? e10.element.element : null,
      target: t10
    };
  }
  function BW(e10) {
    let t10 = pF(e10.browserEvent.target);
    return {
      element: e10.element ? e10.element.element : null,
      browserEvent: e10.browserEvent,
      anchor: e10.anchor,
      isStickyScroll: t10
    };
  }
  function VW(e10, t10) {
    t10(e10), e10.children.forEach((e11) => VW(e11, t10));
  }
  var HW = class {
    get nodeSet() {
      return this._nodeSet || (this._nodeSet = this.createNodeSet()), this._nodeSet;
    }
    constructor(e10, t10) {
      this.getFirstViewElementWithTrait = e10, this.identityProvider = t10, this.nodes = [], this._onDidChange = new N(), this.onDidChange = this._onDidChange.event;
    }
    set(e10, t10) {
      !(t10 == null ? void 0 : t10.__forceEvent) && l(this.nodes, e10) || this._set(e10, false, t10);
    }
    _set(e10, t10, n10) {
      if (this.nodes = [
        ...e10
      ], this.elements = void 0, this._nodeSet = void 0, !t10) {
        let e11 = this;
        this._onDidChange.fire({
          get elements() {
            return e11.get();
          },
          browserEvent: n10
        });
      }
    }
    get() {
      return this.elements || (this.elements = this.nodes.map((e10) => e10.element)), [
        ...this.elements
      ];
    }
    getNodes() {
      return this.nodes;
    }
    has(e10) {
      return this.nodeSet.has(e10);
    }
    onDidModelSplice({ insertedNodes: e10, deletedNodes: t10 }) {
      if (!this.identityProvider) {
        let e11 = this.createNodeSet(), n11 = (t11) => e11.delete(t11);
        t10.forEach((e12) => VW(e12, n11)), this.set([
          ...e11.values()
        ]);
        return;
      }
      let n10 = /* @__PURE__ */ new Set(), r10 = (e11) => n10.add(this.identityProvider.getId(e11.element).toString());
      t10.forEach((e11) => VW(e11, r10));
      let i10 = /* @__PURE__ */ new Map(), a10 = (e11) => i10.set(this.identityProvider.getId(e11.element).toString(), e11);
      e10.forEach((e11) => VW(e11, a10));
      let o10 = [];
      for (let e11 of this.nodes) {
        let t11 = this.identityProvider.getId(e11.element).toString(), r11 = n10.has(t11);
        if (!r11) o10.push(e11);
        else {
          let e12 = i10.get(t11);
          e12 && e12.visible && o10.push(e12);
        }
      }
      if (this.nodes.length > 0 && o10.length === 0) {
        let e11 = this.getFirstViewElementWithTrait();
        e11 && o10.push(e11);
      }
      this._set(o10, true);
    }
    createNodeSet() {
      let e10 = /* @__PURE__ */ new Set();
      for (let t10 of this.nodes) e10.add(t10);
      return e10;
    }
  }, UW = class extends TF {
    constructor(e10, t10, n10) {
      super(e10), this.tree = t10, this.stickyScrollProvider = n10;
    }
    onViewPointer(e10) {
      if (mF(e10.browserEvent.target) || sF(e10.browserEvent.target) || lF(e10.browserEvent.target) || e10.browserEvent.isHandledByList) return;
      let t10 = e10.element;
      if (!t10 || this.isSelectionRangeChangeEvent(e10) || this.isSelectionSingleChangeEvent(e10)) return super.onViewPointer(e10);
      let n10 = e10.browserEvent.target, r10 = n10.classList.contains(`monaco-tl-twistie`) || n10.classList.contains(`monaco-icon-label`) && n10.classList.contains(`folder-icon`) && e10.browserEvent.offsetX < 16, i10 = fF(e10.browserEvent.target), a10 = false;
      if (a10 = i10 ? true : typeof this.tree.expandOnlyOnTwistieClick == `function` ? this.tree.expandOnlyOnTwistieClick(t10.element) : !!this.tree.expandOnlyOnTwistieClick, i10) this.handleStickyScrollMouseEvent(e10, t10);
      else if (a10 && !r10 && e10.browserEvent.detail !== 2 || !this.tree.expandOnDoubleClick && e10.browserEvent.detail === 2) return super.onViewPointer(e10);
      if (t10.collapsible && (!i10 || r10)) {
        let n11 = this.tree.getNodeLocation(t10), i11 = e10.browserEvent.altKey;
        if (this.tree.setFocus([
          n11
        ]), this.tree.toggleCollapsed(n11, i11), r10) {
          e10.browserEvent.isHandledByList = true;
          return;
        }
      }
      i10 || super.onViewPointer(e10);
    }
    handleStickyScrollMouseEvent(e10, t10) {
      if (uF(e10.browserEvent.target) || dF(e10.browserEvent.target)) return;
      let n10 = this.stickyScrollProvider();
      if (!n10) throw Error(`Sticky scroll controller not found`);
      let r10 = this.list.indexOf(t10), i10 = this.list.getElementTop(r10), a10 = n10.nodePositionTopBelowWidget(t10);
      this.tree.scrollTop = i10 - a10, this.list.domFocus(), this.list.setFocus([
        r10
      ]), this.list.setSelection([
        r10
      ]);
    }
    onDoubleClick(e10) {
      let t10 = e10.browserEvent.target.classList.contains(`monaco-tl-twistie`);
      t10 || !this.tree.expandOnDoubleClick || e10.browserEvent.isHandledByList || super.onDoubleClick(e10);
    }
    onMouseDown(e10) {
      let t10 = e10.browserEvent.target;
      if (!pF(t10) && !fF(t10)) {
        super.onMouseDown(e10);
        return;
      }
    }
    onContextMenu(e10) {
      let t10 = e10.browserEvent.target;
      if (!pF(t10) && !fF(t10)) {
        super.onContextMenu(e10);
        return;
      }
    }
  }, WW = class extends IF {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      super(e10, t10, n10, r10, s10), this.focusTrait = i10, this.selectionTrait = a10, this.anchorTrait = o10;
    }
    createMouseController(e10) {
      return new UW(this, e10.tree, e10.stickyScrollProvider);
    }
    splice(e10, t10, n10 = []) {
      if (super.splice(e10, t10, n10), n10.length === 0) return;
      let r10 = [], i10 = [], a10;
      n10.forEach((t11, n11) => {
        this.focusTrait.has(t11) && r10.push(e10 + n11), this.selectionTrait.has(t11) && i10.push(e10 + n11), this.anchorTrait.has(t11) && (a10 = e10 + n11);
      }), r10.length > 0 && super.setFocus(S([
        ...super.getFocus(),
        ...r10
      ])), i10.length > 0 && super.setSelection(S([
        ...super.getSelection(),
        ...i10
      ])), typeof a10 == `number` && super.setAnchor(a10);
    }
    setFocus(e10, t10, n10 = false) {
      super.setFocus(e10, t10), n10 || this.focusTrait.set(e10.map((e11) => this.element(e11)), t10);
    }
    setSelection(e10, t10, n10 = false) {
      super.setSelection(e10, t10), n10 || this.selectionTrait.set(e10.map((e11) => this.element(e11)), t10);
    }
    setAnchor(e10, t10 = false) {
      super.setAnchor(e10), t10 || (e10 === void 0 ? this.anchorTrait.set([]) : this.anchorTrait.set([
        this.element(e10)
      ]));
    }
  }, GW = class {
    get onDidScroll() {
      return this.view.onDidScroll;
    }
    get onDidChangeFocus() {
      return this.eventBufferer.wrapEvent(this.focus.onDidChange);
    }
    get onDidChangeSelection() {
      return this.eventBufferer.wrapEvent(this.selection.onDidChange);
    }
    get onMouseDblClick() {
      return M.filter(M.map(this.view.onMouseDblClick, zW), (e10) => e10.target !== pW.Filter);
    }
    get onMouseOver() {
      return M.map(this.view.onMouseOver, zW);
    }
    get onMouseOut() {
      return M.map(this.view.onMouseOut, zW);
    }
    get onContextMenu() {
      var _a3;
      return M.any(M.filter(M.map(this.view.onContextMenu, BW), (e10) => !e10.isStickyScroll), ((_a3 = this.stickyScrollController) == null ? void 0 : _a3.onContextMenu) ?? M.None);
    }
    get onPointer() {
      return M.map(this.view.onPointer, zW);
    }
    get onKeyDown() {
      return this.view.onKeyDown;
    }
    get onDidFocus() {
      return this.view.onDidFocus;
    }
    get onDidChangeModel() {
      return M.signal(this.model.onDidSplice);
    }
    get onDidChangeCollapseState() {
      return this.model.onDidChangeCollapseState;
    }
    get findMode() {
      var _a3;
      return ((_a3 = this.findController) == null ? void 0 : _a3.mode) ?? kW.Highlight;
    }
    set findMode(e10) {
      this.findController && (this.findController.mode = e10);
    }
    get findMatchType() {
      var _a3;
      return ((_a3 = this.findController) == null ? void 0 : _a3.matchType) ?? AW.Fuzzy;
    }
    set findMatchType(e10) {
      this.findController && (this.findController.matchType = e10);
    }
    get expandOnDoubleClick() {
      return this._options.expandOnDoubleClick === void 0 ? true : this._options.expandOnDoubleClick;
    }
    get expandOnlyOnTwistieClick() {
      return this._options.expandOnlyOnTwistieClick === void 0 ? true : this._options.expandOnlyOnTwistieClick;
    }
    get onDidDispose() {
      return this.view.onDidDispose;
    }
    constructor(e10, t10, n10, r10, i10 = {}) {
      this._user = e10, this._options = i10, this.eventBufferer = new di(), this.onDidChangeFindOpenState = M.None, this.onDidChangeStickyScrollFocused = M.None, this.disposables = new A(), this._onWillRefilter = new N(), this.onWillRefilter = this._onWillRefilter.event, this._onDidUpdateOptions = new N(), this.treeDelegate = new wW(n10);
      let a10 = new fi(), o10 = new fi(), s10 = this.disposables.add(new EW(o10.event)), c10 = new q_();
      this.renderers = r10.map((e11) => new DW(e11, () => this.model, a10.event, s10, c10, i10));
      for (let e11 of this.renderers) this.disposables.add(e11);
      let l10;
      i10.keyboardNavigationLabelProvider && (l10 = new OW(this, i10.keyboardNavigationLabelProvider, i10.filter), i10 = {
        ...i10,
        filter: l10
      }, this.disposables.add(l10)), this.focus = new HW(() => this.view.getFocusedElements()[0], i10.identityProvider), this.selection = new HW(() => this.view.getSelectedElements()[0], i10.identityProvider), this.anchor = new HW(() => this.view.getAnchorElement(), i10.identityProvider), this.view = new WW(e10, t10, this.treeDelegate, this.renderers, this.focus, this.selection, this.anchor, {
        ...CW(() => this.model, i10),
        tree: this,
        stickyScrollProvider: () => this.stickyScrollController
      }), this.model = this.createModel(e10, this.view, i10), a10.input = this.model.onDidChangeCollapseState;
      let u10 = M.forEach(this.model.onDidSplice, (e11) => {
        this.eventBufferer.bufferEvents(() => {
          this.focus.onDidModelSplice(e11), this.selection.onDidModelSplice(e11);
        });
      }, this.disposables);
      u10(() => null, null, this.disposables);
      let d10 = this.disposables.add(new N()), f10 = this.disposables.add(new tl(0));
      if (this.disposables.add(M.any(u10, this.focus.onDidChange, this.selection.onDidChange)(() => {
        f10.trigger(() => {
          let e11 = /* @__PURE__ */ new Set();
          for (let t11 of this.focus.getNodes()) e11.add(t11);
          for (let t11 of this.selection.getNodes()) e11.add(t11);
          d10.fire([
            ...e11.values()
          ]);
        });
      })), o10.input = d10.event, i10.keyboardSupport !== false) {
        let e11 = M.chain(this.view.onKeyDown, (e12) => e12.filter((e13) => !sF(e13.target)).map((e13) => new Hc(e13)));
        M.chain(e11, (e12) => e12.filter((e13) => e13.keyCode === 15))(this.onLeftArrow, this, this.disposables), M.chain(e11, (e12) => e12.filter((e13) => e13.keyCode === 17))(this.onRightArrow, this, this.disposables), M.chain(e11, (e12) => e12.filter((e13) => e13.keyCode === 10))(this.onSpace, this, this.disposables);
      }
      if ((i10.findWidgetEnabled ?? true) && i10.keyboardNavigationLabelProvider && i10.contextViewProvider) {
        let e11 = this.options.findWidgetStyles ? {
          styles: this.options.findWidgetStyles
        } : void 0;
        this.findController = new jW(this, this.model, this.view, l10, i10.contextViewProvider, e11), this.focusNavigationFilter = (e12) => this.findController.shouldAllowFocus(e12), this.onDidChangeFindOpenState = this.findController.onDidChangeOpenState, this.disposables.add(this.findController), this.onDidChangeFindMode = this.findController.onDidChangeMode, this.onDidChangeFindMatchType = this.findController.onDidChangeMatchType;
      } else this.onDidChangeFindMode = M.None, this.onDidChangeFindMatchType = M.None;
      i10.enableStickyScroll && (this.stickyScrollController = new IW(this, this.model, this.view, this.renderers, this.treeDelegate, i10), this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus), this.styleElement = Id(this.view.getHTMLElement()), this.getHTMLElement().classList.toggle(`always`, this._options.renderIndentGuides === TW.Always);
    }
    updateOptions(e10 = {}) {
      var _a3;
      this._options = {
        ...this._options,
        ...e10
      };
      for (let t10 of this.renderers) t10.updateOptions(e10);
      this.view.updateOptions(this._options), (_a3 = this.findController) == null ? void 0 : _a3.updateOptions(e10), this.updateStickyScroll(e10), this._onDidUpdateOptions.fire(this._options), this.getHTMLElement().classList.toggle(`always`, this._options.renderIndentGuides === TW.Always);
    }
    get options() {
      return this._options;
    }
    updateStickyScroll(e10) {
      var _a3;
      !this.stickyScrollController && this._options.enableStickyScroll ? (this.stickyScrollController = new IW(this, this.model, this.view, this.renderers, this.treeDelegate, this._options), this.onDidChangeStickyScrollFocused = this.stickyScrollController.onDidChangeHasFocus) : this.stickyScrollController && !this._options.enableStickyScroll && (this.onDidChangeStickyScrollFocused = M.None, this.stickyScrollController.dispose(), this.stickyScrollController = void 0), (_a3 = this.stickyScrollController) == null ? void 0 : _a3.updateOptions(e10);
    }
    getHTMLElement() {
      return this.view.getHTMLElement();
    }
    get scrollTop() {
      return this.view.scrollTop;
    }
    set scrollTop(e10) {
      this.view.scrollTop = e10;
    }
    get scrollHeight() {
      return this.view.scrollHeight;
    }
    get renderHeight() {
      return this.view.renderHeight;
    }
    get ariaLabel() {
      return this.view.ariaLabel;
    }
    set ariaLabel(e10) {
      this.view.ariaLabel = e10;
    }
    domFocus() {
      var _a3;
      ((_a3 = this.stickyScrollController) == null ? void 0 : _a3.focusedLast()) ? this.stickyScrollController.domFocus() : this.view.domFocus();
    }
    layout(e10, t10) {
      var _a3;
      this.view.layout(e10, t10), be(t10) && ((_a3 = this.findController) == null ? void 0 : _a3.layout(t10));
    }
    style(e10) {
      let t10 = `.${this.view.domId}`, n10 = [];
      e10.treeIndentGuidesStroke && (n10.push(`.monaco-list${t10}:hover .monaco-tl-indent > .indent-guide, .monaco-list${t10}.always .monaco-tl-indent > .indent-guide  { border-color: ${e10.treeInactiveIndentGuidesStroke}; }`), n10.push(`.monaco-list${t10} .monaco-tl-indent > .indent-guide.active { border-color: ${e10.treeIndentGuidesStroke}; }`));
      let r10 = e10.treeStickyScrollBackground ?? e10.listBackground;
      r10 && (n10.push(`.monaco-list${t10} .monaco-scrollable-element .monaco-tree-sticky-container { background-color: ${r10}; }`), n10.push(`.monaco-list${t10} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-row { background-color: ${r10}; }`)), e10.treeStickyScrollBorder && n10.push(`.monaco-list${t10} .monaco-scrollable-element .monaco-tree-sticky-container { border-bottom: 1px solid ${e10.treeStickyScrollBorder}; }`), e10.treeStickyScrollShadow && n10.push(`.monaco-list${t10} .monaco-scrollable-element .monaco-tree-sticky-container .monaco-tree-sticky-container-shadow { box-shadow: ${e10.treeStickyScrollShadow} 0 6px 6px -6px inset; height: 3px; }`), e10.listFocusForeground && (n10.push(`.monaco-list${t10}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { color: ${e10.listFocusForeground}; }`), n10.push(`.monaco-list${t10}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { color: inherit; }`));
      let i10 = vf(e10.listFocusAndSelectionOutline, vf(e10.listSelectionOutline, e10.listFocusOutline ?? ``));
      i10 && (n10.push(`.monaco-list${t10}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused.selected { outline: 1px solid ${i10}; outline-offset: -1px;}`), n10.push(`.monaco-list${t10}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused.selected { outline: inherit;}`)), e10.listFocusOutline && (n10.push(`.monaco-list${t10}.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container:focus .monaco-list-row.focused { outline: 1px solid ${e10.listFocusOutline}; outline-offset: -1px; }`), n10.push(`.monaco-list${t10}:not(.sticky-scroll-focused) .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.focused { outline: inherit; }`), n10.push(`.monaco-workbench.context-menu-visible .monaco-list${t10}.last-focused.sticky-scroll-focused .monaco-scrollable-element .monaco-tree-sticky-container .monaco-list-row.passive-focused { outline: 1px solid ${e10.listFocusOutline}; outline-offset: -1px; }`), n10.push(`.monaco-workbench.context-menu-visible .monaco-list${t10}.last-focused.sticky-scroll-focused .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`), n10.push(`.monaco-workbench.context-menu-visible .monaco-list${t10}.last-focused:not(.sticky-scroll-focused) .monaco-tree-sticky-container .monaco-list-rows .monaco-list-row.focused { outline: inherit; }`)), this.styleElement.textContent = n10.join(`
`), this.view.style(e10);
    }
    getParentElement(e10) {
      let t10 = this.model.getParentNodeLocation(e10), n10 = this.model.getNode(t10);
      return n10.element;
    }
    getFirstElementChild(e10) {
      return this.model.getFirstElementChild(e10);
    }
    getNode(e10) {
      return this.model.getNode(e10);
    }
    getNodeLocation(e10) {
      return this.model.getNodeLocation(e10);
    }
    collapse(e10, t10 = false) {
      return this.model.setCollapsed(e10, true, t10);
    }
    expand(e10, t10 = false) {
      return this.model.setCollapsed(e10, false, t10);
    }
    toggleCollapsed(e10, t10 = false) {
      return this.model.setCollapsed(e10, void 0, t10);
    }
    isCollapsible(e10) {
      return this.model.isCollapsible(e10);
    }
    setCollapsible(e10, t10) {
      return this.model.setCollapsible(e10, t10);
    }
    isCollapsed(e10) {
      return this.model.isCollapsed(e10);
    }
    refilter() {
      this._onWillRefilter.fire(void 0), this.model.refilter();
    }
    setSelection(e10, t10) {
      this.eventBufferer.bufferEvents(() => {
        let n10 = e10.map((e11) => this.model.getNode(e11));
        this.selection.set(n10, t10);
        let r10 = e10.map((e11) => this.model.getListIndex(e11)).filter((e11) => e11 > -1);
        this.view.setSelection(r10, t10, true);
      });
    }
    getSelection() {
      return this.selection.get();
    }
    setFocus(e10, t10) {
      this.eventBufferer.bufferEvents(() => {
        let n10 = e10.map((e11) => this.model.getNode(e11));
        this.focus.set(n10, t10);
        let r10 = e10.map((e11) => this.model.getListIndex(e11)).filter((e11) => e11 > -1);
        this.view.setFocus(r10, t10, true);
      });
    }
    focusNext(e10 = 1, t10 = false, n10, r10 = Yd(n10) && n10.altKey ? void 0 : this.focusNavigationFilter) {
      this.view.focusNext(e10, t10, n10, r10);
    }
    focusPrevious(e10 = 1, t10 = false, n10, r10 = Yd(n10) && n10.altKey ? void 0 : this.focusNavigationFilter) {
      this.view.focusPrevious(e10, t10, n10, r10);
    }
    focusNextPage(e10, t10 = Yd(e10) && e10.altKey ? void 0 : this.focusNavigationFilter) {
      return this.view.focusNextPage(e10, t10);
    }
    focusPreviousPage(e10, t10 = Yd(e10) && e10.altKey ? void 0 : this.focusNavigationFilter) {
      return this.view.focusPreviousPage(e10, t10, () => {
        var _a3;
        return ((_a3 = this.stickyScrollController) == null ? void 0 : _a3.height) ?? 0;
      });
    }
    focusLast(e10, t10 = Yd(e10) && e10.altKey ? void 0 : this.focusNavigationFilter) {
      this.view.focusLast(e10, t10);
    }
    focusFirst(e10, t10 = Yd(e10) && e10.altKey ? void 0 : this.focusNavigationFilter) {
      this.view.focusFirst(e10, t10);
    }
    getFocus() {
      return this.focus.get();
    }
    reveal(e10, t10) {
      this.model.expandTo(e10);
      let n10 = this.model.getListIndex(e10);
      if (n10 !== -1) if (!this.stickyScrollController) this.view.reveal(n10, t10);
      else {
        let r10 = this.stickyScrollController.nodePositionTopBelowWidget(this.getNode(e10));
        this.view.reveal(n10, t10, r10);
      }
    }
    onLeftArrow(e10) {
      e10.preventDefault(), e10.stopPropagation();
      let t10 = this.view.getFocusedElements();
      if (t10.length === 0) return;
      let n10 = t10[0], r10 = this.model.getNodeLocation(n10), i10 = this.model.setCollapsed(r10, true);
      if (!i10) {
        let e11 = this.model.getParentNodeLocation(r10);
        if (!e11) return;
        let t11 = this.model.getListIndex(e11);
        this.view.reveal(t11), this.view.setFocus([
          t11
        ]);
      }
    }
    onRightArrow(e10) {
      e10.preventDefault(), e10.stopPropagation();
      let t10 = this.view.getFocusedElements();
      if (t10.length === 0) return;
      let n10 = t10[0], r10 = this.model.getNodeLocation(n10), i10 = this.model.setCollapsed(r10, false);
      if (!i10) {
        if (!n10.children.some((e12) => e12.visible)) return;
        let [e11] = this.view.getFocus(), t11 = e11 + 1;
        this.view.reveal(t11), this.view.setFocus([
          t11
        ]);
      }
    }
    onSpace(e10) {
      e10.preventDefault(), e10.stopPropagation();
      let t10 = this.view.getFocusedElements();
      if (t10.length === 0) return;
      let n10 = t10[0], r10 = this.model.getNodeLocation(n10), i10 = e10.browserEvent.altKey;
      this.model.setCollapsed(r10, void 0, i10);
    }
    dispose() {
      var _a3;
      Rr(this.disposables), (_a3 = this.stickyScrollController) == null ? void 0 : _a3.dispose(), this.view.dispose();
    }
  }, KW = class {
    constructor(e10, t10, n10 = {}) {
      this.user = e10, this.rootRef = null, this.nodes = /* @__PURE__ */ new Map(), this.nodesByIdentity = /* @__PURE__ */ new Map(), this.model = new yW(e10, t10, null, n10), this.onDidSplice = this.model.onDidSplice, this.onDidChangeCollapseState = this.model.onDidChangeCollapseState, this.onDidChangeRenderNodeCount = this.model.onDidChangeRenderNodeCount, n10.sorter && (this.sorter = {
        compare(e11, t11) {
          return n10.sorter.compare(e11.element, t11.element);
        }
      }), this.identityProvider = n10.identityProvider;
    }
    setChildren(e10, t10 = It.empty(), n10 = {}) {
      let r10 = this.getElementLocation(e10);
      this._setChildren(r10, this.preserveCollapseState(t10), n10);
    }
    _setChildren(e10, t10 = It.empty(), n10) {
      let r10 = /* @__PURE__ */ new Set(), i10 = /* @__PURE__ */ new Set(), a10 = (e11) => {
        var _a3;
        if (e11.element === null) return;
        let t11 = e11;
        if (r10.add(t11.element), this.nodes.set(t11.element, t11), this.identityProvider) {
          let e12 = this.identityProvider.getId(t11.element).toString();
          i10.add(e12), this.nodesByIdentity.set(e12, t11);
        }
        (_a3 = n10.onDidCreateNode) == null ? void 0 : _a3.call(n10, t11);
      }, o10 = (e11) => {
        var _a3;
        if (e11.element === null) return;
        let t11 = e11;
        if (r10.has(t11.element) || this.nodes.delete(t11.element), this.identityProvider) {
          let e12 = this.identityProvider.getId(t11.element).toString();
          i10.has(e12) || this.nodesByIdentity.delete(e12);
        }
        (_a3 = n10.onDidDeleteNode) == null ? void 0 : _a3.call(n10, t11);
      };
      this.model.splice([
        ...e10,
        0
      ], Number.MAX_VALUE, t10, {
        ...n10,
        onDidCreateNode: a10,
        onDidDeleteNode: o10
      });
    }
    preserveCollapseState(e10 = It.empty()) {
      return this.sorter && (e10 = [
        ...e10
      ].sort(this.sorter.compare.bind(this.sorter))), It.map(e10, (e11) => {
        let t10 = this.nodes.get(e11.element);
        if (!t10 && this.identityProvider) {
          let n11 = this.identityProvider.getId(e11.element).toString();
          t10 = this.nodesByIdentity.get(n11);
        }
        if (!t10) {
          let t11;
          return t11 = e11.collapsed === void 0 ? void 0 : e11.collapsed === fW.Collapsed || e11.collapsed === fW.PreserveOrCollapsed ? true : e11.collapsed === fW.Expanded || e11.collapsed === fW.PreserveOrExpanded ? false : !!e11.collapsed, {
            ...e11,
            children: this.preserveCollapseState(e11.children),
            collapsed: t11
          };
        }
        let n10 = typeof e11.collapsible == `boolean` ? e11.collapsible : t10.collapsible, r10;
        return r10 = e11.collapsed === void 0 || e11.collapsed === fW.PreserveOrCollapsed || e11.collapsed === fW.PreserveOrExpanded ? t10.collapsed : e11.collapsed === fW.Collapsed ? true : e11.collapsed === fW.Expanded ? false : !!e11.collapsed, {
          ...e11,
          collapsible: n10,
          collapsed: r10,
          children: this.preserveCollapseState(e11.children)
        };
      });
    }
    rerender(e10) {
      let t10 = this.getElementLocation(e10);
      this.model.rerender(t10);
    }
    getFirstElementChild(e10 = null) {
      let t10 = this.getElementLocation(e10);
      return this.model.getFirstElementChild(t10);
    }
    has(e10) {
      return this.nodes.has(e10);
    }
    getListIndex(e10) {
      let t10 = this.getElementLocation(e10);
      return this.model.getListIndex(t10);
    }
    getListRenderCount(e10) {
      let t10 = this.getElementLocation(e10);
      return this.model.getListRenderCount(t10);
    }
    isCollapsible(e10) {
      let t10 = this.getElementLocation(e10);
      return this.model.isCollapsible(t10);
    }
    setCollapsible(e10, t10) {
      let n10 = this.getElementLocation(e10);
      return this.model.setCollapsible(n10, t10);
    }
    isCollapsed(e10) {
      let t10 = this.getElementLocation(e10);
      return this.model.isCollapsed(t10);
    }
    setCollapsed(e10, t10, n10) {
      let r10 = this.getElementLocation(e10);
      return this.model.setCollapsed(r10, t10, n10);
    }
    expandTo(e10) {
      let t10 = this.getElementLocation(e10);
      this.model.expandTo(t10);
    }
    refilter() {
      this.model.refilter();
    }
    getNode(e10 = null) {
      if (e10 === null) return this.model.getNode(this.model.rootRef);
      let t10 = this.nodes.get(e10);
      if (!t10) throw new mW(this.user, `Tree element not found: ${e10}`);
      return t10;
    }
    getNodeLocation(e10) {
      return e10.element;
    }
    getParentNodeLocation(e10) {
      if (e10 === null) throw new mW(this.user, `Invalid getParentNodeLocation call`);
      let t10 = this.nodes.get(e10);
      if (!t10) throw new mW(this.user, `Tree element not found: ${e10}`);
      let n10 = this.model.getNodeLocation(t10), r10 = this.model.getParentNodeLocation(n10), i10 = this.model.getNode(r10);
      return i10.element;
    }
    getElementLocation(e10) {
      if (e10 === null) return [];
      let t10 = this.nodes.get(e10);
      if (!t10) throw new mW(this.user, `Tree element not found: ${e10}`);
      return this.model.getNodeLocation(t10);
    }
  };
  function qW(e10) {
    let t10 = [
      e10.element
    ], n10 = e10.incompressible || false;
    return {
      element: {
        elements: t10,
        incompressible: n10
      },
      children: It.map(It.from(e10.children), qW),
      collapsible: e10.collapsible,
      collapsed: e10.collapsed
    };
  }
  function JW(e10) {
    let t10 = [
      e10.element
    ], n10 = e10.incompressible || false, r10, i10;
    for (; [i10, r10] = It.consume(It.from(e10.children), 2), !(i10.length !== 1 || i10[0].incompressible); ) e10 = i10[0], t10.push(e10.element);
    return {
      element: {
        elements: t10,
        incompressible: n10
      },
      children: It.map(It.concat(i10, r10), JW),
      collapsible: e10.collapsible,
      collapsed: e10.collapsed
    };
  }
  function YW(e10, t10 = 0) {
    let n10;
    return n10 = t10 < e10.element.elements.length - 1 ? [
      YW(e10, t10 + 1)
    ] : It.map(It.from(e10.children), (e11) => YW(e11, 0)), t10 === 0 && e10.element.incompressible ? {
      element: e10.element.elements[t10],
      children: n10,
      incompressible: true,
      collapsible: e10.collapsible,
      collapsed: e10.collapsed
    } : {
      element: e10.element.elements[t10],
      children: n10,
      collapsible: e10.collapsible,
      collapsed: e10.collapsed
    };
  }
  function XW(e10) {
    return YW(e10, 0);
  }
  function ZW(e10, t10, n10) {
    return e10.element === t10 ? {
      ...e10,
      children: n10
    } : {
      ...e10,
      children: It.map(It.from(e10.children), (e11) => ZW(e11, t10, n10))
    };
  }
  const QW = (e10) => ({
    getId(t10) {
      return t10.elements.map((t11) => e10.getId(t11).toString()).join(`\0`);
    }
  });
  var $W = class {
    get onDidSplice() {
      return this.model.onDidSplice;
    }
    get onDidChangeCollapseState() {
      return this.model.onDidChangeCollapseState;
    }
    get onDidChangeRenderNodeCount() {
      return this.model.onDidChangeRenderNodeCount;
    }
    constructor(e10, t10, n10 = {}) {
      this.user = e10, this.rootRef = null, this.nodes = /* @__PURE__ */ new Map(), this.model = new KW(e10, t10, n10), this.enabled = n10.compressionEnabled === void 0 ? true : n10.compressionEnabled, this.identityProvider = n10.identityProvider;
    }
    setChildren(e10, t10 = It.empty(), n10) {
      let r10 = n10.diffIdentityProvider && QW(n10.diffIdentityProvider);
      if (e10 === null) {
        let e11 = It.map(t10, this.enabled ? JW : qW);
        this._setChildren(null, e11, {
          diffIdentityProvider: r10,
          diffDepth: 1 / 0
        });
        return;
      }
      let i10 = this.nodes.get(e10);
      if (!i10) throw new mW(this.user, `Unknown compressed tree node`);
      let a10 = this.model.getNode(i10), o10 = this.model.getParentNodeLocation(i10), s10 = this.model.getNode(o10), c10 = XW(a10), u10 = ZW(c10, e10, t10), d10 = (this.enabled ? JW : qW)(u10), f10 = n10.diffIdentityProvider ? (e11, t11) => n10.diffIdentityProvider.getId(e11) === n10.diffIdentityProvider.getId(t11) : void 0;
      if (l(d10.element.elements, a10.element.elements, f10)) {
        this._setChildren(i10, d10.children || It.empty(), {
          diffIdentityProvider: r10,
          diffDepth: 1
        });
        return;
      }
      let p10 = s10.children.map((e11) => e11 === a10 ? d10 : e11);
      this._setChildren(s10.element, p10, {
        diffIdentityProvider: r10,
        diffDepth: a10.depth - s10.depth
      });
    }
    isCompressionEnabled() {
      return this.enabled;
    }
    setCompressionEnabled(e10) {
      if (e10 === this.enabled) return;
      this.enabled = e10;
      let t10 = this.model.getNode(), n10 = t10.children, r10 = It.map(n10, XW), i10 = It.map(r10, e10 ? JW : qW);
      this._setChildren(null, i10, {
        diffIdentityProvider: this.identityProvider,
        diffDepth: 1 / 0
      });
    }
    _setChildren(e10, t10, n10) {
      let r10 = /* @__PURE__ */ new Set(), i10 = (e11) => {
        for (let t11 of e11.element.elements) r10.add(t11), this.nodes.set(t11, e11.element);
      }, a10 = (e11) => {
        for (let t11 of e11.element.elements) r10.has(t11) || this.nodes.delete(t11);
      };
      this.model.setChildren(e10, t10, {
        ...n10,
        onDidCreateNode: i10,
        onDidDeleteNode: a10
      });
    }
    has(e10) {
      return this.nodes.has(e10);
    }
    getListIndex(e10) {
      let t10 = this.getCompressedNode(e10);
      return this.model.getListIndex(t10);
    }
    getListRenderCount(e10) {
      let t10 = this.getCompressedNode(e10);
      return this.model.getListRenderCount(t10);
    }
    getNode(e10) {
      if (e10 === void 0) return this.model.getNode();
      let t10 = this.getCompressedNode(e10);
      return this.model.getNode(t10);
    }
    getNodeLocation(e10) {
      let t10 = this.model.getNodeLocation(e10);
      return t10 === null ? null : t10.elements[t10.elements.length - 1];
    }
    getParentNodeLocation(e10) {
      let t10 = this.getCompressedNode(e10), n10 = this.model.getParentNodeLocation(t10);
      return n10 === null ? null : n10.elements[n10.elements.length - 1];
    }
    getFirstElementChild(e10) {
      let t10 = this.getCompressedNode(e10);
      return this.model.getFirstElementChild(t10);
    }
    isCollapsible(e10) {
      let t10 = this.getCompressedNode(e10);
      return this.model.isCollapsible(t10);
    }
    setCollapsible(e10, t10) {
      let n10 = this.getCompressedNode(e10);
      return this.model.setCollapsible(n10, t10);
    }
    isCollapsed(e10) {
      let t10 = this.getCompressedNode(e10);
      return this.model.isCollapsed(t10);
    }
    setCollapsed(e10, t10, n10) {
      let r10 = this.getCompressedNode(e10);
      return this.model.setCollapsed(r10, t10, n10);
    }
    expandTo(e10) {
      let t10 = this.getCompressedNode(e10);
      this.model.expandTo(t10);
    }
    rerender(e10) {
      let t10 = this.getCompressedNode(e10);
      this.model.rerender(t10);
    }
    refilter() {
      this.model.refilter();
    }
    getCompressedNode(e10) {
      if (e10 === null) return null;
      let t10 = this.nodes.get(e10);
      if (!t10) throw new mW(this.user, `Tree element not found: ${e10}`);
      return t10;
    }
  };
  const eG = (e10) => e10[e10.length - 1];
  var tG = class e10 {
    get element() {
      return this.node.element === null ? null : this.unwrapper(this.node.element);
    }
    get children() {
      return this.node.children.map((t10) => new e10(this.unwrapper, t10));
    }
    get depth() {
      return this.node.depth;
    }
    get visibleChildrenCount() {
      return this.node.visibleChildrenCount;
    }
    get visibleChildIndex() {
      return this.node.visibleChildIndex;
    }
    get collapsible() {
      return this.node.collapsible;
    }
    get collapsed() {
      return this.node.collapsed;
    }
    get visible() {
      return this.node.visible;
    }
    get filterData() {
      return this.node.filterData;
    }
    constructor(e11, t10) {
      this.unwrapper = e11, this.node = t10;
    }
  };
  function nG(e10, t10) {
    return {
      splice(n10, r10, i10) {
        t10.splice(n10, r10, i10.map((t11) => e10.map(t11)));
      },
      updateElementHeight(e11, n10) {
        t10.updateElementHeight(e11, n10);
      }
    };
  }
  function rG(e10, t10) {
    return {
      ...t10,
      identityProvider: t10.identityProvider && {
        getId(n10) {
          return t10.identityProvider.getId(e10(n10));
        }
      },
      sorter: t10.sorter && {
        compare(e11, n10) {
          return t10.sorter.compare(e11.elements[0], n10.elements[0]);
        }
      },
      filter: t10.filter && {
        filter(n10, r10) {
          return t10.filter.filter(e10(n10), r10);
        }
      }
    };
  }
  var iG = class {
    get onDidSplice() {
      return M.map(this.model.onDidSplice, ({ insertedNodes: e10, deletedNodes: t10 }) => ({
        insertedNodes: e10.map((e11) => this.nodeMapper.map(e11)),
        deletedNodes: t10.map((e11) => this.nodeMapper.map(e11))
      }));
    }
    get onDidChangeCollapseState() {
      return M.map(this.model.onDidChangeCollapseState, ({ node: e10, deep: t10 }) => ({
        node: this.nodeMapper.map(e10),
        deep: t10
      }));
    }
    get onDidChangeRenderNodeCount() {
      return M.map(this.model.onDidChangeRenderNodeCount, (e10) => this.nodeMapper.map(e10));
    }
    constructor(e10, t10, n10 = {}) {
      this.rootRef = null, this.elementMapper = n10.elementMapper || eG;
      let r10 = (e11) => this.elementMapper(e11.elements);
      this.nodeMapper = new hW((e11) => new tG(r10, e11)), this.model = new $W(e10, nG(this.nodeMapper, t10), rG(r10, n10));
    }
    setChildren(e10, t10 = It.empty(), n10 = {}) {
      this.model.setChildren(e10, t10, n10);
    }
    isCompressionEnabled() {
      return this.model.isCompressionEnabled();
    }
    setCompressionEnabled(e10) {
      this.model.setCompressionEnabled(e10);
    }
    has(e10) {
      return this.model.has(e10);
    }
    getListIndex(e10) {
      return this.model.getListIndex(e10);
    }
    getListRenderCount(e10) {
      return this.model.getListRenderCount(e10);
    }
    getNode(e10) {
      return this.nodeMapper.map(this.model.getNode(e10));
    }
    getNodeLocation(e10) {
      return e10.element;
    }
    getParentNodeLocation(e10) {
      return this.model.getParentNodeLocation(e10);
    }
    getFirstElementChild(e10) {
      let t10 = this.model.getFirstElementChild(e10);
      return t10 == null ? t10 : this.elementMapper(t10.elements);
    }
    isCollapsible(e10) {
      return this.model.isCollapsible(e10);
    }
    setCollapsible(e10, t10) {
      return this.model.setCollapsible(e10, t10);
    }
    isCollapsed(e10) {
      return this.model.isCollapsed(e10);
    }
    setCollapsed(e10, t10, n10) {
      return this.model.setCollapsed(e10, t10, n10);
    }
    expandTo(e10) {
      return this.model.expandTo(e10);
    }
    rerender(e10) {
      return this.model.rerender(e10);
    }
    refilter() {
      return this.model.refilter();
    }
    getCompressedTreeNode(e10 = null) {
      return this.model.getNode(e10);
    }
  }, aG = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, oG = class extends GW {
    get onDidChangeCollapseState() {
      return this.model.onDidChangeCollapseState;
    }
    constructor(e10, t10, n10, r10, i10 = {}) {
      super(e10, t10, n10, r10, i10), this.user = e10;
    }
    setChildren(e10, t10 = It.empty(), n10) {
      this.model.setChildren(e10, t10, n10);
    }
    rerender(e10) {
      if (e10 === void 0) {
        this.view.rerender();
        return;
      }
      this.model.rerender(e10);
    }
    hasElement(e10) {
      return this.model.has(e10);
    }
    createModel(e10, t10, n10) {
      return new KW(e10, t10, n10);
    }
  }, sG = class {
    get compressedTreeNodeProvider() {
      return this._compressedTreeNodeProvider();
    }
    constructor(e10, t10, n10) {
      this._compressedTreeNodeProvider = e10, this.stickyScrollDelegate = t10, this.renderer = n10, this.templateId = n10.templateId, n10.onDidChangeTwistieState && (this.onDidChangeTwistieState = n10.onDidChangeTwistieState);
    }
    renderTemplate(e10) {
      let t10 = this.renderer.renderTemplate(e10);
      return {
        compressedTreeNode: void 0,
        data: t10
      };
    }
    renderElement(e10, t10, n10, r10) {
      let i10 = this.stickyScrollDelegate.getCompressedNode(e10);
      i10 || (i10 = this.compressedTreeNodeProvider.getCompressedTreeNode(e10.element)), i10.element.elements.length === 1 ? (n10.compressedTreeNode = void 0, this.renderer.renderElement(e10, t10, n10.data, r10)) : (n10.compressedTreeNode = i10, this.renderer.renderCompressedElements(i10, t10, n10.data, r10));
    }
    disposeElement(e10, t10, n10, r10) {
      var _a3, _b3, _c3, _d3;
      n10.compressedTreeNode ? (_b3 = (_a3 = this.renderer).disposeCompressedElements) == null ? void 0 : _b3.call(_a3, n10.compressedTreeNode, t10, n10.data, r10) : (_d3 = (_c3 = this.renderer).disposeElement) == null ? void 0 : _d3.call(_c3, e10, t10, n10.data, r10);
    }
    disposeTemplate(e10) {
      this.renderer.disposeTemplate(e10.data);
    }
    renderTwistie(e10, t10) {
      return this.renderer.renderTwistie ? this.renderer.renderTwistie(e10, t10) : false;
    }
  };
  aG([
    PE
  ], sG.prototype, `compressedTreeNodeProvider`, null);
  var cG = class {
    constructor(e10) {
      this.modelProvider = e10, this.compressedStickyNodes = /* @__PURE__ */ new Map();
    }
    getCompressedNode(e10) {
      return this.compressedStickyNodes.get(e10);
    }
    constrainStickyScrollNodes(e10, t10, n10) {
      if (this.compressedStickyNodes.clear(), e10.length === 0) return [];
      for (let r10 = 0; r10 < e10.length; r10++) {
        let i10 = e10[r10], a10 = i10.position + i10.height, o10 = r10 + 1 < e10.length && a10 + e10[r10 + 1].height > n10;
        if (o10 || r10 >= t10 - 1 && t10 < e10.length) {
          let t11 = e10.slice(0, r10), n11 = e10.slice(r10), i11 = this.compressStickyNodes(n11);
          return [
            ...t11,
            i11
          ];
        }
      }
      return e10;
    }
    compressStickyNodes(e10) {
      if (e10.length === 0) throw Error(`Can't compress empty sticky nodes`);
      let t10 = this.modelProvider();
      if (!t10.isCompressionEnabled()) return e10[0];
      let n10 = [];
      for (let r11 = 0; r11 < e10.length; r11++) {
        let i11 = e10[r11], a11 = t10.getCompressedTreeNode(i11.node.element);
        if (a11.element) {
          if (r11 !== 0 && a11.element.incompressible) break;
          n10.push(...a11.element.elements);
        }
      }
      if (n10.length < 2) return e10[0];
      let r10 = e10[e10.length - 1], i10 = {
        elements: n10,
        incompressible: false
      }, a10 = {
        ...r10.node,
        children: [],
        element: i10
      }, o10 = new Proxy(e10[0].node, {}), s10 = {
        node: o10,
        startIndex: e10[0].startIndex,
        endIndex: r10.endIndex,
        position: e10[0].position,
        height: e10[0].height
      };
      return this.compressedStickyNodes.set(o10, a10), s10;
    }
  };
  function lG(e10, t10) {
    return t10 && {
      ...t10,
      keyboardNavigationLabelProvider: t10.keyboardNavigationLabelProvider && {
        getKeyboardNavigationLabel(n10) {
          let r10;
          try {
            r10 = e10().getCompressedTreeNode(n10);
          } catch {
            return t10.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(n10);
          }
          return r10.element.elements.length === 1 ? t10.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(n10) : t10.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(r10.element.elements);
        }
      }
    };
  }
  var uG = class extends oG {
    constructor(e10, t10, n10, r10, i10 = {}) {
      let a10 = () => this, o10 = new cG(() => this.model), s10 = r10.map((e11) => new sG(a10, o10, e11));
      super(e10, t10, n10, s10, {
        ...lG(a10, i10),
        stickyScrollDelegate: o10
      });
    }
    setChildren(e10, t10 = It.empty(), n10) {
      this.model.setChildren(e10, t10, n10);
    }
    createModel(e10, t10, n10) {
      return new iG(e10, t10, n10);
    }
    updateOptions(e10 = {}) {
      super.updateOptions(e10), e10.compressionEnabled !== void 0 && this.model.setCompressionEnabled(e10.compressionEnabled);
    }
    getCompressedTreeNode(e10 = null) {
      return this.model.getCompressedTreeNode(e10);
    }
  };
  function dG(e10) {
    return {
      ...e10,
      children: [],
      refreshPromise: void 0,
      stale: true,
      slow: false,
      forceExpanded: false
    };
  }
  function fG(e10, t10) {
    return t10.parent ? t10.parent === e10 ? true : fG(e10, t10.parent) : false;
  }
  function pG(e10, t10) {
    return e10 === t10 || fG(e10, t10) || fG(t10, e10);
  }
  var mG = class e10 {
    get element() {
      return this.node.element.element;
    }
    get children() {
      return this.node.children.map((t10) => new e10(t10));
    }
    get depth() {
      return this.node.depth;
    }
    get visibleChildrenCount() {
      return this.node.visibleChildrenCount;
    }
    get visibleChildIndex() {
      return this.node.visibleChildIndex;
    }
    get collapsible() {
      return this.node.collapsible;
    }
    get collapsed() {
      return this.node.collapsed;
    }
    get visible() {
      return this.node.visible;
    }
    get filterData() {
      return this.node.filterData;
    }
    constructor(e11) {
      this.node = e11;
    }
  }, hG = class {
    constructor(e10, t10, n10) {
      this.renderer = e10, this.nodeMapper = t10, this.onDidChangeTwistieState = n10, this.renderedNodes = /* @__PURE__ */ new Map(), this.templateId = e10.templateId;
    }
    renderTemplate(e10) {
      let t10 = this.renderer.renderTemplate(e10);
      return {
        templateData: t10
      };
    }
    renderElement(e10, t10, n10, r10) {
      this.renderer.renderElement(this.nodeMapper.map(e10), t10, n10.templateData, r10);
    }
    renderTwistie(e10, t10) {
      return e10.slow ? (t10.classList.add(...sp.asClassNameArray(L.treeItemLoading)), true) : (t10.classList.remove(...sp.asClassNameArray(L.treeItemLoading)), false);
    }
    disposeElement(e10, t10, n10, r10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.renderer).disposeElement) == null ? void 0 : _b3.call(_a3, this.nodeMapper.map(e10), t10, n10.templateData, r10);
    }
    disposeTemplate(e10) {
      this.renderer.disposeTemplate(e10.templateData);
    }
    dispose() {
      this.renderedNodes.clear();
    }
  };
  function gG(e10) {
    return {
      browserEvent: e10.browserEvent,
      elements: e10.elements.map((e11) => e11.element)
    };
  }
  function _G(e10) {
    return {
      browserEvent: e10.browserEvent,
      element: e10.element && e10.element.element,
      target: e10.target
    };
  }
  var vG = class extends XP {
    constructor(e10) {
      super(e10.elements.map((e11) => e11.element)), this.data = e10;
    }
  };
  function yG(e10) {
    return e10 instanceof XP ? new vG(e10) : e10;
  }
  var bG = class {
    constructor(e10) {
      this.dnd = e10;
    }
    getDragURI(e10) {
      return this.dnd.getDragURI(e10.element);
    }
    getDragLabel(e10, t10) {
      if (this.dnd.getDragLabel) return this.dnd.getDragLabel(e10.map((e11) => e11.element), t10);
    }
    onDragStart(e10, t10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragStart) == null ? void 0 : _b3.call(_a3, yG(e10), t10);
    }
    onDragOver(e10, t10, n10, r10, i10, a10 = true) {
      return this.dnd.onDragOver(yG(e10), t10 && t10.element, n10, r10, i10);
    }
    drop(e10, t10, n10, r10, i10) {
      this.dnd.drop(yG(e10), t10 && t10.element, n10, r10, i10);
    }
    onDragEnd(e10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.dnd).onDragEnd) == null ? void 0 : _b3.call(_a3, e10);
    }
    dispose() {
      this.dnd.dispose();
    }
  };
  function xG(e10) {
    return e10 && {
      ...e10,
      collapseByDefault: true,
      identityProvider: e10.identityProvider && {
        getId(t10) {
          return e10.identityProvider.getId(t10.element);
        }
      },
      dnd: e10.dnd && new bG(e10.dnd),
      multipleSelectionController: e10.multipleSelectionController && {
        isSelectionSingleChangeEvent(t10) {
          return e10.multipleSelectionController.isSelectionSingleChangeEvent({
            ...t10,
            element: t10.element
          });
        },
        isSelectionRangeChangeEvent(t10) {
          return e10.multipleSelectionController.isSelectionRangeChangeEvent({
            ...t10,
            element: t10.element
          });
        }
      },
      accessibilityProvider: e10.accessibilityProvider && {
        ...e10.accessibilityProvider,
        getPosInSet: void 0,
        getSetSize: void 0,
        getRole: e10.accessibilityProvider.getRole ? (t10) => e10.accessibilityProvider.getRole(t10.element) : () => `treeitem`,
        isChecked: e10.accessibilityProvider.isChecked ? (t10) => {
          var _a3;
          return !!((_a3 = e10.accessibilityProvider) == null ? void 0 : _a3.isChecked(t10.element));
        } : void 0,
        getAriaLabel(t10) {
          return e10.accessibilityProvider.getAriaLabel(t10.element);
        },
        getWidgetAriaLabel() {
          return e10.accessibilityProvider.getWidgetAriaLabel();
        },
        getWidgetRole: e10.accessibilityProvider.getWidgetRole ? () => e10.accessibilityProvider.getWidgetRole() : () => `tree`,
        getAriaLevel: e10.accessibilityProvider.getAriaLevel && ((t10) => e10.accessibilityProvider.getAriaLevel(t10.element)),
        getActiveDescendantId: e10.accessibilityProvider.getActiveDescendantId && ((t10) => e10.accessibilityProvider.getActiveDescendantId(t10.element))
      },
      filter: e10.filter && {
        filter(t10, n10) {
          return e10.filter.filter(t10.element, n10);
        }
      },
      keyboardNavigationLabelProvider: e10.keyboardNavigationLabelProvider && {
        ...e10.keyboardNavigationLabelProvider,
        getKeyboardNavigationLabel(t10) {
          return e10.keyboardNavigationLabelProvider.getKeyboardNavigationLabel(t10.element);
        }
      },
      sorter: void 0,
      expandOnlyOnTwistieClick: e10.expandOnlyOnTwistieClick === void 0 ? void 0 : typeof e10.expandOnlyOnTwistieClick == `function` ? (t10) => e10.expandOnlyOnTwistieClick(t10.element) : e10.expandOnlyOnTwistieClick,
      defaultFindVisibility: (t10) => t10.hasChildren && t10.stale ? 1 : typeof e10.defaultFindVisibility == `number` ? e10.defaultFindVisibility : e10.defaultFindVisibility === void 0 ? 2 : e10.defaultFindVisibility(t10.element)
    };
  }
  function SG(e10, t10) {
    t10(e10), e10.children.forEach((e11) => SG(e11, t10));
  }
  var CG = class {
    get onDidScroll() {
      return this.tree.onDidScroll;
    }
    get onDidChangeFocus() {
      return M.map(this.tree.onDidChangeFocus, gG);
    }
    get onDidChangeSelection() {
      return M.map(this.tree.onDidChangeSelection, gG);
    }
    get onMouseDblClick() {
      return M.map(this.tree.onMouseDblClick, _G);
    }
    get onPointer() {
      return M.map(this.tree.onPointer, _G);
    }
    get onDidFocus() {
      return this.tree.onDidFocus;
    }
    get onDidChangeModel() {
      return this.tree.onDidChangeModel;
    }
    get onDidChangeCollapseState() {
      return this.tree.onDidChangeCollapseState;
    }
    get onDidChangeFindOpenState() {
      return this.tree.onDidChangeFindOpenState;
    }
    get onDidChangeStickyScrollFocused() {
      return this.tree.onDidChangeStickyScrollFocused;
    }
    get onDidDispose() {
      return this.tree.onDidDispose;
    }
    constructor(e10, t10, n10, r10, i10, a10 = {}) {
      this.user = e10, this.dataSource = i10, this.nodes = /* @__PURE__ */ new Map(), this.subTreeRefreshPromises = /* @__PURE__ */ new Map(), this.refreshPromises = /* @__PURE__ */ new Map(), this._onDidRender = new N(), this._onDidChangeNodeSlowState = new N(), this.nodeMapper = new hW((e11) => new mG(e11)), this.disposables = new A(), this.identityProvider = a10.identityProvider, this.autoExpandSingleChildren = a10.autoExpandSingleChildren === void 0 ? false : a10.autoExpandSingleChildren, this.sorter = a10.sorter, this.getDefaultCollapseState = (e11) => a10.collapseByDefault ? a10.collapseByDefault(e11) ? fW.PreserveOrCollapsed : fW.PreserveOrExpanded : void 0, this.tree = this.createTree(e10, t10, n10, r10, a10), this.onDidChangeFindMode = this.tree.onDidChangeFindMode, this.onDidChangeFindMatchType = this.tree.onDidChangeFindMatchType, this.root = dG({
        element: void 0,
        parent: null,
        hasChildren: true,
        defaultCollapseState: void 0
      }), this.identityProvider && (this.root = {
        ...this.root,
        id: null
      }), this.nodes.set(null, this.root), this.tree.onDidChangeCollapseState(this._onDidChangeCollapseState, this, this.disposables);
    }
    createTree(e10, t10, n10, r10, i10) {
      let a10 = new wW(n10), o10 = r10.map((e11) => new hG(e11, this.nodeMapper, this._onDidChangeNodeSlowState.event)), s10 = xG(i10) || {};
      return new oG(e10, t10, a10, o10, s10);
    }
    updateOptions(e10 = {}) {
      this.tree.updateOptions(e10);
    }
    getHTMLElement() {
      return this.tree.getHTMLElement();
    }
    get scrollTop() {
      return this.tree.scrollTop;
    }
    set scrollTop(e10) {
      this.tree.scrollTop = e10;
    }
    get scrollHeight() {
      return this.tree.scrollHeight;
    }
    get renderHeight() {
      return this.tree.renderHeight;
    }
    domFocus() {
      this.tree.domFocus();
    }
    layout(e10, t10) {
      this.tree.layout(e10, t10);
    }
    style(e10) {
      this.tree.style(e10);
    }
    getInput() {
      return this.root.element;
    }
    async setInput(e10, t10) {
      this.refreshPromises.forEach((e11) => e11.cancel()), this.refreshPromises.clear(), this.root.element = e10;
      let n10 = t10 && {
        viewState: t10,
        focus: [],
        selection: []
      };
      await this._updateChildren(e10, true, false, n10), n10 && (this.tree.setFocus(n10.focus), this.tree.setSelection(n10.selection)), t10 && typeof t10.scrollTop == `number` && (this.scrollTop = t10.scrollTop);
    }
    async _updateChildren(e10 = this.root.element, t10 = true, n10 = false, r10, i10) {
      if (this.root.element === void 0) throw new mW(this.user, `Tree input not set`);
      this.root.refreshPromise && (await this.root.refreshPromise, await M.toPromise(this._onDidRender.event));
      let a10 = this.getDataNode(e10);
      if (await this.refreshAndRenderNode(a10, t10, r10, i10), n10) try {
        this.tree.rerender(a10);
      } catch {
      }
    }
    rerender(e10) {
      if (e10 === void 0 || e10 === this.root.element) {
        this.tree.rerender();
        return;
      }
      let t10 = this.getDataNode(e10);
      this.tree.rerender(t10);
    }
    getNode(e10 = this.root.element) {
      let t10 = this.getDataNode(e10), n10 = this.tree.getNode(t10 === this.root ? null : t10);
      return this.nodeMapper.map(n10);
    }
    collapse(e10, t10 = false) {
      let n10 = this.getDataNode(e10);
      return this.tree.collapse(n10 === this.root ? null : n10, t10);
    }
    async expand(e10, t10 = false) {
      if (this.root.element === void 0) throw new mW(this.user, `Tree input not set`);
      this.root.refreshPromise && (await this.root.refreshPromise, await M.toPromise(this._onDidRender.event));
      let n10 = this.getDataNode(e10);
      if (this.tree.hasElement(n10) && !this.tree.isCollapsible(n10) || (n10.refreshPromise && (await this.root.refreshPromise, await M.toPromise(this._onDidRender.event)), n10 !== this.root && !n10.refreshPromise && !this.tree.isCollapsed(n10))) return false;
      let r10 = this.tree.expand(n10 === this.root ? null : n10, t10);
      return n10.refreshPromise && (await this.root.refreshPromise, await M.toPromise(this._onDidRender.event)), r10;
    }
    setSelection(e10, t10) {
      let n10 = e10.map((e11) => this.getDataNode(e11));
      this.tree.setSelection(n10, t10);
    }
    getSelection() {
      let e10 = this.tree.getSelection();
      return e10.map((e11) => e11.element);
    }
    setFocus(e10, t10) {
      let n10 = e10.map((e11) => this.getDataNode(e11));
      this.tree.setFocus(n10, t10);
    }
    getFocus() {
      let e10 = this.tree.getFocus();
      return e10.map((e11) => e11.element);
    }
    reveal(e10, t10) {
      this.tree.reveal(this.getDataNode(e10), t10);
    }
    getParentElement(e10) {
      let t10 = this.tree.getParentElement(this.getDataNode(e10));
      return t10 && t10.element;
    }
    getFirstElementChild(e10 = this.root.element) {
      let t10 = this.getDataNode(e10), n10 = this.tree.getFirstElementChild(t10 === this.root ? null : t10);
      return n10 && n10.element;
    }
    getDataNode(e10) {
      let t10 = this.nodes.get(e10 === this.root.element ? null : e10);
      if (!t10) throw new mW(this.user, `Data tree node not found: ${e10}`);
      return t10;
    }
    async refreshAndRenderNode(e10, t10, n10, r10) {
      await this.refreshNode(e10, t10, n10), !this.disposables.isDisposed && this.render(e10, n10, r10);
    }
    async refreshNode(e10, t10, n10) {
      let r10;
      if (this.subTreeRefreshPromises.forEach((i10, a10) => {
        !r10 && pG(a10, e10) && (r10 = i10.then(() => this.refreshNode(e10, t10, n10)));
      }), r10) return r10;
      if (e10 !== this.root) {
        let r11 = this.tree.getNode(e10);
        if (r11.collapsed) {
          e10.hasChildren = !!this.dataSource.hasChildren(e10.element), e10.stale = true, this.setChildren(e10, [], t10, n10);
          return;
        }
      }
      return this.doRefreshSubTree(e10, t10, n10);
    }
    async doRefreshSubTree(e10, t10, n10) {
      let r10;
      e10.refreshPromise = new Promise((e11) => r10 = e11), this.subTreeRefreshPromises.set(e10, e10.refreshPromise), e10.refreshPromise.finally(() => {
        e10.refreshPromise = void 0, this.subTreeRefreshPromises.delete(e10);
      });
      try {
        let r11 = await this.doRefreshNode(e10, t10, n10);
        e10.stale = false, await ml.settled(r11.map((e11) => this.doRefreshSubTree(e11, t10, n10)));
      } finally {
        r10();
      }
    }
    async doRefreshNode(e10, t10, n10) {
      e10.hasChildren = !!this.dataSource.hasChildren(e10.element);
      let r10;
      if (!e10.hasChildren) r10 = Promise.resolve(It.empty());
      else {
        let t11 = this.doGetChildren(e10);
        if (xe(t11)) r10 = Promise.resolve(t11);
        else {
          let n11 = rl(800);
          n11.then(() => {
            e10.slow = true, this._onDidChangeNodeSlowState.fire(e10);
          }, (e11) => null), r10 = t11.finally(() => n11.cancel());
        }
      }
      try {
        let i10 = await r10;
        return this.setChildren(e10, i10, t10, n10);
      } catch (t11) {
        if (e10 !== this.root && this.tree.hasElement(e10) && this.tree.collapse(e10), br(t11)) return [];
        throw t11;
      } finally {
        e10.slow && (e10.slow = false, this._onDidChangeNodeSlowState.fire(e10));
      }
    }
    doGetChildren(e10) {
      let t10 = this.refreshPromises.get(e10);
      if (t10) return t10;
      let n10 = this.dataSource.getChildren(e10.element);
      return xe(n10) ? this.processChildren(n10) : (t10 = Xc(async () => this.processChildren(await n10)), this.refreshPromises.set(e10, t10), t10.finally(() => {
        this.refreshPromises.delete(e10);
      }));
    }
    _onDidChangeCollapseState({ node: e10, deep: t10 }) {
      e10.element !== null && !e10.collapsed && e10.element.stale && (t10 ? this.collapse(e10.element.element) : this.refreshAndRenderNode(e10.element, false).catch(gr));
    }
    setChildren(e10, t10, n10, r10) {
      let i10 = [
        ...t10
      ];
      if (e10.children.length === 0 && i10.length === 0) return [];
      let a10 = /* @__PURE__ */ new Map(), o10 = /* @__PURE__ */ new Map();
      for (let t11 of e10.children) a10.set(t11.element, t11), this.identityProvider && o10.set(t11.id, {
        node: t11,
        collapsed: this.tree.hasElement(t11) && this.tree.isCollapsed(t11)
      });
      let s10 = [], c10 = i10.map((t11) => {
        let i11 = !!this.dataSource.hasChildren(t11);
        if (!this.identityProvider) {
          let n11 = dG({
            element: t11,
            parent: e10,
            hasChildren: i11,
            defaultCollapseState: this.getDefaultCollapseState(t11)
          });
          return i11 && n11.defaultCollapseState === fW.PreserveOrExpanded && s10.push(n11), n11;
        }
        let c11 = this.identityProvider.getId(t11).toString(), l10 = o10.get(c11);
        if (l10) {
          let e11 = l10.node;
          return a10.delete(e11.element), this.nodes.delete(e11.element), this.nodes.set(t11, e11), e11.element = t11, e11.hasChildren = i11, n10 ? l10.collapsed ? (e11.children.forEach((e12) => SG(e12, (e13) => this.nodes.delete(e13.element))), e11.children.splice(0, e11.children.length), e11.stale = true) : s10.push(e11) : i11 && !l10.collapsed && s10.push(e11), e11;
        }
        let u10 = dG({
          element: t11,
          parent: e10,
          id: c11,
          hasChildren: i11,
          defaultCollapseState: this.getDefaultCollapseState(t11)
        });
        return r10 && r10.viewState.focus && r10.viewState.focus.indexOf(c11) > -1 && r10.focus.push(u10), r10 && r10.viewState.selection && r10.viewState.selection.indexOf(c11) > -1 && r10.selection.push(u10), (r10 && r10.viewState.expanded && r10.viewState.expanded.indexOf(c11) > -1 || i11 && u10.defaultCollapseState === fW.PreserveOrExpanded) && s10.push(u10), u10;
      });
      for (let e11 of a10.values()) SG(e11, (e12) => this.nodes.delete(e12.element));
      for (let e11 of c10) this.nodes.set(e11.element, e11);
      return e10.children.splice(0, e10.children.length, ...c10), e10 !== this.root && this.autoExpandSingleChildren && c10.length === 1 && s10.length === 0 && (c10[0].forceExpanded = true, s10.push(c10[0])), s10;
    }
    render(e10, t10, n10) {
      let r10 = e10.children.map((e11) => this.asTreeElement(e11, t10)), i10 = n10 && {
        ...n10,
        diffIdentityProvider: n10.diffIdentityProvider && {
          getId(e11) {
            return n10.diffIdentityProvider.getId(e11.element);
          }
        }
      };
      this.tree.setChildren(e10 === this.root ? null : e10, r10, i10), e10 !== this.root && this.tree.setCollapsible(e10, e10.hasChildren), this._onDidRender.fire();
    }
    asTreeElement(e10, t10) {
      if (e10.stale) return {
        element: e10,
        collapsible: e10.hasChildren,
        collapsed: true
      };
      let n10;
      return t10 && t10.viewState.expanded && e10.id && t10.viewState.expanded.indexOf(e10.id) > -1 ? n10 = false : e10.forceExpanded ? (n10 = false, e10.forceExpanded = false) : n10 = e10.defaultCollapseState, {
        element: e10,
        children: e10.hasChildren ? It.map(e10.children, (e11) => this.asTreeElement(e11, t10)) : [],
        collapsible: e10.hasChildren,
        collapsed: n10
      };
    }
    processChildren(e10) {
      return this.sorter && (e10 = [
        ...e10
      ].sort(this.sorter.compare.bind(this.sorter))), e10;
    }
    dispose() {
      this.disposables.dispose(), this.tree.dispose();
    }
  }, wG = class e10 {
    get element() {
      return {
        elements: this.node.element.elements.map((e11) => e11.element),
        incompressible: this.node.element.incompressible
      };
    }
    get children() {
      return this.node.children.map((t10) => new e10(t10));
    }
    get depth() {
      return this.node.depth;
    }
    get visibleChildrenCount() {
      return this.node.visibleChildrenCount;
    }
    get visibleChildIndex() {
      return this.node.visibleChildIndex;
    }
    get collapsible() {
      return this.node.collapsible;
    }
    get collapsed() {
      return this.node.collapsed;
    }
    get visible() {
      return this.node.visible;
    }
    get filterData() {
      return this.node.filterData;
    }
    constructor(e11) {
      this.node = e11;
    }
  }, TG = class {
    constructor(e10, t10, n10, r10) {
      this.renderer = e10, this.nodeMapper = t10, this.compressibleNodeMapperProvider = n10, this.onDidChangeTwistieState = r10, this.renderedNodes = /* @__PURE__ */ new Map(), this.disposables = [], this.templateId = e10.templateId;
    }
    renderTemplate(e10) {
      let t10 = this.renderer.renderTemplate(e10);
      return {
        templateData: t10
      };
    }
    renderElement(e10, t10, n10, r10) {
      this.renderer.renderElement(this.nodeMapper.map(e10), t10, n10.templateData, r10);
    }
    renderCompressedElements(e10, t10, n10, r10) {
      this.renderer.renderCompressedElements(this.compressibleNodeMapperProvider().map(e10), t10, n10.templateData, r10);
    }
    renderTwistie(e10, t10) {
      return e10.slow ? (t10.classList.add(...sp.asClassNameArray(L.treeItemLoading)), true) : (t10.classList.remove(...sp.asClassNameArray(L.treeItemLoading)), false);
    }
    disposeElement(e10, t10, n10, r10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.renderer).disposeElement) == null ? void 0 : _b3.call(_a3, this.nodeMapper.map(e10), t10, n10.templateData, r10);
    }
    disposeCompressedElements(e10, t10, n10, r10) {
      var _a3, _b3;
      (_b3 = (_a3 = this.renderer).disposeCompressedElements) == null ? void 0 : _b3.call(_a3, this.compressibleNodeMapperProvider().map(e10), t10, n10.templateData, r10);
    }
    disposeTemplate(e10) {
      this.renderer.disposeTemplate(e10.templateData);
    }
    dispose() {
      this.renderedNodes.clear(), this.disposables = Rr(this.disposables);
    }
  };
  function EG(e10) {
    let t10 = e10 && xG(e10);
    return t10 && {
      ...t10,
      keyboardNavigationLabelProvider: t10.keyboardNavigationLabelProvider && {
        ...t10.keyboardNavigationLabelProvider,
        getCompressedNodeKeyboardNavigationLabel(t11) {
          return e10.keyboardNavigationLabelProvider.getCompressedNodeKeyboardNavigationLabel(t11.map((e11) => e11.element));
        }
      }
    };
  }
  var DG = class extends CG {
    constructor(e10, t10, n10, r10, i10, a10, o10 = {}) {
      super(e10, t10, n10, i10, a10, o10), this.compressionDelegate = r10, this.compressibleNodeMapper = new hW((e11) => new wG(e11)), this.filter = o10.filter;
    }
    createTree(e10, t10, n10, r10, i10) {
      let a10 = new wW(n10), o10 = r10.map((e11) => new TG(e11, this.nodeMapper, () => this.compressibleNodeMapper, this._onDidChangeNodeSlowState.event)), s10 = EG(i10) || {};
      return new uG(e10, t10, a10, o10, s10);
    }
    asTreeElement(e10, t10) {
      return {
        incompressible: this.compressionDelegate.isIncompressible(e10.element),
        ...super.asTreeElement(e10, t10)
      };
    }
    updateOptions(e10 = {}) {
      this.tree.updateOptions(e10);
    }
    render(e10, t10, n10) {
      if (!this.identityProvider) return super.render(e10, t10);
      let r10 = (e11) => this.identityProvider.getId(e11).toString(), i10 = (e11) => {
        let t11 = /* @__PURE__ */ new Set();
        for (let n11 of e11) {
          let e12 = this.tree.getCompressedTreeNode(n11 === this.root ? null : n11);
          if (!e12.element) continue;
          for (let n12 of e12.element.elements) t11.add(r10(n12.element));
        }
        return t11;
      }, a10 = i10(this.tree.getSelection()), o10 = i10(this.tree.getFocus());
      super.render(e10, t10, n10);
      let s10 = this.getSelection(), c10 = false, l10 = this.getFocus(), u10 = false, d10 = (e11) => {
        let t11 = e11.element;
        if (t11) for (let e12 = 0; e12 < t11.elements.length; e12++) {
          let n11 = r10(t11.elements[e12].element), i11 = t11.elements[t11.elements.length - 1].element;
          a10.has(n11) && s10.indexOf(i11) === -1 && (s10.push(i11), c10 = true), o10.has(n11) && l10.indexOf(i11) === -1 && (l10.push(i11), u10 = true);
        }
        e11.children.forEach(d10);
      };
      d10(this.tree.getCompressedTreeNode(e10 === this.root ? null : e10)), c10 && this.setSelection(s10), u10 && this.setFocus(l10);
    }
    processChildren(e10) {
      return this.filter && (e10 = It.filter(e10, (e11) => {
        let t10 = this.filter.filter(e11, 1), n10 = OG(t10);
        if (n10 === 2) throw Error(`Recursive tree visibility not supported in async data compressed trees`);
        return n10 === 1;
      })), super.processChildren(e10);
    }
  };
  function OG(e10) {
    return typeof e10 == `boolean` ? e10 ? 1 : 0 : gW(e10) ? _W(e10.visibility) : _W(e10);
  }
  var kG = class extends GW {
    constructor(e10, t10, n10, r10, i10, a10 = {}) {
      super(e10, t10, n10, r10, a10), this.user = e10, this.dataSource = i10, this.identityProvider = a10.identityProvider;
    }
    createModel(e10, t10, n10) {
      return new KW(e10, t10, n10);
    }
  };
  let one, sne, cne, lne, une, dne, fne, MG;
  one = new U(`isMac`, E, T(`isMac`, `Whether the operating system is macOS`));
  sne = new U(`isLinux`, ht, T(`isLinux`, `Whether the operating system is Linux`));
  AG = new U(`isWindows`, mt, T(`isWindows`, `Whether the operating system is Windows`));
  jG = new U(`isWeb`, _t, T(`isWeb`, `Whether the platform is a web browser`));
  cne = new U(`isMacNative`, E && !_t, T(`isMacNative`, `Whether the operating system is macOS on a non-browser platform`));
  lne = new U(`isIOS`, bt, T(`isIOS`, `Whether the operating system is iOS`));
  une = new U(`isMobile`, xt, T(`isMobile`, `Whether the platform is a mobile web browser`));
  dne = new U(`isDevelopment`, false, true);
  fne = new U(`productQualityType`, ``, T(`productQualityType`, `Quality type of VS Code`));
  MG = `inputFocus`;
  NG = new U(MG, false, T(`inputFocus`, `Whether keyboard focus is inside an input box`));
  var PG = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, FG = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  IG = Xf(`listService`);
  var LG = class {
    get lastFocusedList() {
      return this._lastFocusedWidget;
    }
    constructor() {
      this.disposables = new A(), this.lists = [], this._lastFocusedWidget = void 0, this._hasCreatedStyleController = false;
    }
    setLastFocusedList(e10) {
      var _a3, _b3;
      e10 !== this._lastFocusedWidget && ((_a3 = this._lastFocusedWidget) == null ? void 0 : _a3.getHTMLElement().classList.remove(`last-focused`), this._lastFocusedWidget = e10, (_b3 = this._lastFocusedWidget) == null ? void 0 : _b3.getHTMLElement().classList.add(`last-focused`));
    }
    register(e10, t10) {
      if (!this._hasCreatedStyleController) {
        this._hasCreatedStyleController = true;
        let e11 = new EF(Id(), ``);
        e11.style(gI);
      }
      if (this.lists.some((t11) => t11.widget === e10)) throw Error(`Cannot register the same widget multiple times`);
      let n10 = {
        widget: e10,
        extraContextKeys: t10
      };
      return this.lists.push(n10), kd(e10.getHTMLElement()) && this.setLastFocusedList(e10), zr(e10.onDidFocus(() => this.setLastFocusedList(e10)), k(() => this.lists.splice(this.lists.indexOf(n10), 1)), e10.onDidDispose(() => {
        this.lists = this.lists.filter((e11) => e11 !== n10), this._lastFocusedWidget === e10 && this.setLastFocusedList(void 0);
      }));
    }
    dispose() {
      this.disposables.dispose();
    }
  };
  let RG, pne, mne, zG, BG, VG, UG, WG, GG, KG, qG, YG, ZG, QG, $G, eK;
  RG = new U(`listScrollAtBoundary`, `none`);
  pne = Ep.or(RG.isEqualTo(`top`), RG.isEqualTo(`both`));
  mne = Ep.or(RG.isEqualTo(`bottom`), RG.isEqualTo(`both`));
  zG = new U(`listFocus`, true);
  BG = new U(`treestickyScrollFocused`, false);
  VG = new U(`listSupportsMultiselect`, true);
  HG = Ep.and(zG, Ep.not(MG), BG.negate());
  UG = new U(`listHasSelectionOrFocus`, false);
  WG = new U(`listDoubleSelection`, false);
  GG = new U(`listMultiSelection`, false);
  KG = new U(`listSelectionNavigation`, false);
  qG = new U(`listSupportsFind`, true);
  JG = new U(`treeElementCanCollapse`, false);
  YG = new U(`treeElementHasParent`, false);
  XG = new U(`treeElementCanExpand`, false);
  ZG = new U(`treeElementHasChild`, false);
  QG = new U(`treeFindOpen`, false);
  $G = `listTypeNavigationMode`;
  eK = `listAutomaticKeyboardNavigation`;
  function tK(e10, t10) {
    let n10 = e10.createScoped(t10.getHTMLElement());
    return zG.bindTo(n10), n10;
  }
  function nK(e10, t10) {
    let n10 = RG.bindTo(e10), r10 = () => {
      let e11 = t10.scrollTop === 0, r11 = t10.scrollHeight - t10.renderHeight - t10.scrollTop < 1;
      e11 && r11 ? n10.set(`both`) : e11 ? n10.set(`top`) : r11 ? n10.set(`bottom`) : n10.set(`none`);
    };
    return r10(), t10.onDidScroll(r10);
  }
  const rK = `workbench.list.multiSelectModifier`, iK = `workbench.list.openMode`, aK = `workbench.list.horizontalScrolling`, oK = `workbench.list.defaultFindMode`, sK = `workbench.list.typeNavigationMode`, cK = `workbench.list.keyboardNavigation`, lK = `workbench.list.scrollByPage`, uK = `workbench.list.defaultFindMatchType`, dK = `workbench.tree.indent`, fK = `workbench.tree.renderIndentGuides`, pK = `workbench.list.smoothScrolling`, mK = `workbench.list.mouseWheelScrollSensitivity`, hK = `workbench.list.fastScrollSensitivity`, gK = `workbench.tree.expandMode`, _K = `workbench.tree.enableStickyScroll`, vK = `workbench.tree.stickyScrollMaxItemCount`;
  function yK(e10) {
    return e10.getValue(rK) === `alt`;
  }
  var bK = class extends j {
    constructor(e10) {
      super(), this.configurationService = e10, this.useAltAsMultipleSelectionModifier = yK(e10), this.registerListeners();
    }
    registerListeners() {
      this._register(this.configurationService.onDidChangeConfiguration((e10) => {
        e10.affectsConfiguration(rK) && (this.useAltAsMultipleSelectionModifier = yK(this.configurationService));
      }));
    }
    isSelectionSingleChangeEvent(e10) {
      return this.useAltAsMultipleSelectionModifier ? e10.browserEvent.altKey : xF(e10);
    }
    isSelectionRangeChangeEvent(e10) {
      return SF(e10);
    }
  };
  function xK(e10, t10) {
    let n10 = e10.get(ug), r10 = e10.get(ME), i10 = new A(), a10 = {
      ...t10,
      keyboardNavigationDelegate: {
        mightProducePrintableCharacter(e11) {
          return r10.mightProducePrintableCharacter(e11);
        }
      },
      smoothScrolling: !!n10.getValue(pK),
      mouseWheelScrollSensitivity: n10.getValue(mK),
      fastScrollSensitivity: n10.getValue(hK),
      multipleSelectionController: t10.multipleSelectionController ?? i10.add(new bK(n10)),
      keyboardNavigationEventFilter: kK(r10),
      scrollByPage: !!n10.getValue(lK)
    };
    return [
      a10,
      i10
    ];
  }
  let SK = class extends IF {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let l10 = i10.horizontalScrolling === void 0 ? !!s10.getValue(aK) : i10.horizontalScrolling, [u10, d10] = c10.invokeFunction(xK, i10);
      super(e10, t10, n10, r10, {
        keyboardSupport: false,
        ...u10,
        horizontalScrolling: l10
      }), this.disposables.add(d10), this.contextKeyService = tK(a10, this), this.disposables.add(nK(this.contextKeyService, this)), this.listSupportsMultiSelect = VG.bindTo(this.contextKeyService), this.listSupportsMultiSelect.set(i10.multipleSelectionSupport !== false);
      let f10 = KG.bindTo(this.contextKeyService);
      f10.set(!!i10.selectionNavigation), this.listHasSelectionOrFocus = UG.bindTo(this.contextKeyService), this.listDoubleSelection = WG.bindTo(this.contextKeyService), this.listMultiSelection = GG.bindTo(this.contextKeyService), this.horizontalScrolling = i10.horizontalScrolling, this._useAltAsMultipleSelectionModifier = yK(s10), this.disposables.add(this.contextKeyService), this.disposables.add(o10.register(this)), this.updateStyles(i10.overrideStyles), this.disposables.add(this.onDidChangeSelection(() => {
        let e11 = this.getSelection(), t11 = this.getFocus();
        this.contextKeyService.bufferChangeEvents(() => {
          this.listHasSelectionOrFocus.set(e11.length > 0 || t11.length > 0), this.listMultiSelection.set(e11.length > 1), this.listDoubleSelection.set(e11.length === 2);
        });
      })), this.disposables.add(this.onDidChangeFocus(() => {
        let e11 = this.getSelection(), t11 = this.getFocus();
        this.listHasSelectionOrFocus.set(e11.length > 0 || t11.length > 0);
      })), this.disposables.add(s10.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(rK) && (this._useAltAsMultipleSelectionModifier = yK(s10));
        let t11 = {};
        if (e11.affectsConfiguration(aK) && this.horizontalScrolling === void 0) {
          let e12 = !!s10.getValue(aK);
          t11 = {
            ...t11,
            horizontalScrolling: e12
          };
        }
        if (e11.affectsConfiguration(lK)) {
          let e12 = !!s10.getValue(lK);
          t11 = {
            ...t11,
            scrollByPage: e12
          };
        }
        if (e11.affectsConfiguration(pK)) {
          let e12 = !!s10.getValue(pK);
          t11 = {
            ...t11,
            smoothScrolling: e12
          };
        }
        if (e11.affectsConfiguration(mK)) {
          let e12 = s10.getValue(mK);
          t11 = {
            ...t11,
            mouseWheelScrollSensitivity: e12
          };
        }
        if (e11.affectsConfiguration(hK)) {
          let e12 = s10.getValue(hK);
          t11 = {
            ...t11,
            fastScrollSensitivity: e12
          };
        }
        Object.keys(t11).length > 0 && this.updateOptions(t11);
      })), this.navigator = new EK(this, {
        configurationService: s10,
        ...i10
      }), this.disposables.add(this.navigator);
    }
    updateOptions(e10) {
      super.updateOptions(e10), e10.overrideStyles !== void 0 && this.updateStyles(e10.overrideStyles), e10.multipleSelectionSupport !== void 0 && this.listSupportsMultiSelect.set(!!e10.multipleSelectionSupport);
    }
    updateStyles(e10) {
      this.style(e10 ? _I(e10) : gI);
    }
  };
  SK = PG([
    FG(5, qp),
    FG(6, IG),
    FG(7, ug),
    FG(8, Jf)
  ], SK);
  let CK = class extends HU {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let l10 = i10.horizontalScrolling === void 0 ? !!s10.getValue(aK) : i10.horizontalScrolling, [u10, d10] = c10.invokeFunction(xK, i10);
      super(e10, t10, n10, r10, {
        keyboardSupport: false,
        ...u10,
        horizontalScrolling: l10
      }), this.disposables = new A(), this.disposables.add(d10), this.contextKeyService = tK(a10, this), this.disposables.add(nK(this.contextKeyService, this.widget)), this.horizontalScrolling = i10.horizontalScrolling, this.listSupportsMultiSelect = VG.bindTo(this.contextKeyService), this.listSupportsMultiSelect.set(i10.multipleSelectionSupport !== false);
      let f10 = KG.bindTo(this.contextKeyService);
      f10.set(!!i10.selectionNavigation), this._useAltAsMultipleSelectionModifier = yK(s10), this.disposables.add(this.contextKeyService), this.disposables.add(o10.register(this)), this.updateStyles(i10.overrideStyles), this.disposables.add(s10.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(rK) && (this._useAltAsMultipleSelectionModifier = yK(s10));
        let t11 = {};
        if (e11.affectsConfiguration(aK) && this.horizontalScrolling === void 0) {
          let e12 = !!s10.getValue(aK);
          t11 = {
            ...t11,
            horizontalScrolling: e12
          };
        }
        if (e11.affectsConfiguration(lK)) {
          let e12 = !!s10.getValue(lK);
          t11 = {
            ...t11,
            scrollByPage: e12
          };
        }
        if (e11.affectsConfiguration(pK)) {
          let e12 = !!s10.getValue(pK);
          t11 = {
            ...t11,
            smoothScrolling: e12
          };
        }
        if (e11.affectsConfiguration(mK)) {
          let e12 = s10.getValue(mK);
          t11 = {
            ...t11,
            mouseWheelScrollSensitivity: e12
          };
        }
        if (e11.affectsConfiguration(hK)) {
          let e12 = s10.getValue(hK);
          t11 = {
            ...t11,
            fastScrollSensitivity: e12
          };
        }
        Object.keys(t11).length > 0 && this.updateOptions(t11);
      })), this.navigator = new EK(this, {
        configurationService: s10,
        ...i10
      }), this.disposables.add(this.navigator);
    }
    updateOptions(e10) {
      super.updateOptions(e10), e10.overrideStyles !== void 0 && this.updateStyles(e10.overrideStyles), e10.multipleSelectionSupport !== void 0 && this.listSupportsMultiSelect.set(!!e10.multipleSelectionSupport);
    }
    updateStyles(e10) {
      this.style(e10 ? _I(e10) : gI);
    }
    dispose() {
      this.disposables.dispose(), super.dispose();
    }
  };
  CK = PG([
    FG(5, qp),
    FG(6, IG),
    FG(7, ug),
    FG(8, Jf)
  ], CK);
  let wK = class extends dW {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      let u10 = a10.horizontalScrolling === void 0 ? !!c10.getValue(aK) : a10.horizontalScrolling, [d10, f10] = l10.invokeFunction(xK, a10);
      super(e10, t10, n10, r10, i10, {
        keyboardSupport: false,
        ...d10,
        horizontalScrolling: u10
      }), this.disposables.add(f10), this.contextKeyService = tK(o10, this), this.disposables.add(nK(this.contextKeyService, this)), this.listSupportsMultiSelect = VG.bindTo(this.contextKeyService), this.listSupportsMultiSelect.set(a10.multipleSelectionSupport !== false);
      let p10 = KG.bindTo(this.contextKeyService);
      p10.set(!!a10.selectionNavigation), this.listHasSelectionOrFocus = UG.bindTo(this.contextKeyService), this.listDoubleSelection = WG.bindTo(this.contextKeyService), this.listMultiSelection = GG.bindTo(this.contextKeyService), this.horizontalScrolling = a10.horizontalScrolling, this._useAltAsMultipleSelectionModifier = yK(c10), this.disposables.add(this.contextKeyService), this.disposables.add(s10.register(this)), this.updateStyles(a10.overrideStyles), this.disposables.add(this.onDidChangeSelection(() => {
        let e11 = this.getSelection(), t11 = this.getFocus();
        this.contextKeyService.bufferChangeEvents(() => {
          this.listHasSelectionOrFocus.set(e11.length > 0 || t11.length > 0), this.listMultiSelection.set(e11.length > 1), this.listDoubleSelection.set(e11.length === 2);
        });
      })), this.disposables.add(this.onDidChangeFocus(() => {
        let e11 = this.getSelection(), t11 = this.getFocus();
        this.listHasSelectionOrFocus.set(e11.length > 0 || t11.length > 0);
      })), this.disposables.add(c10.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(rK) && (this._useAltAsMultipleSelectionModifier = yK(c10));
        let t11 = {};
        if (e11.affectsConfiguration(aK) && this.horizontalScrolling === void 0) {
          let e12 = !!c10.getValue(aK);
          t11 = {
            ...t11,
            horizontalScrolling: e12
          };
        }
        if (e11.affectsConfiguration(lK)) {
          let e12 = !!c10.getValue(lK);
          t11 = {
            ...t11,
            scrollByPage: e12
          };
        }
        if (e11.affectsConfiguration(pK)) {
          let e12 = !!c10.getValue(pK);
          t11 = {
            ...t11,
            smoothScrolling: e12
          };
        }
        if (e11.affectsConfiguration(mK)) {
          let e12 = c10.getValue(mK);
          t11 = {
            ...t11,
            mouseWheelScrollSensitivity: e12
          };
        }
        if (e11.affectsConfiguration(hK)) {
          let e12 = c10.getValue(hK);
          t11 = {
            ...t11,
            fastScrollSensitivity: e12
          };
        }
        Object.keys(t11).length > 0 && this.updateOptions(t11);
      })), this.navigator = new DK(this, {
        configurationService: c10,
        ...a10
      }), this.disposables.add(this.navigator);
    }
    updateOptions(e10) {
      super.updateOptions(e10), e10.overrideStyles !== void 0 && this.updateStyles(e10.overrideStyles), e10.multipleSelectionSupport !== void 0 && this.listSupportsMultiSelect.set(!!e10.multipleSelectionSupport);
    }
    updateStyles(e10) {
      this.style(e10 ? _I(e10) : gI);
    }
    dispose() {
      this.disposables.dispose(), super.dispose();
    }
  };
  wK = PG([
    FG(6, qp),
    FG(7, IG),
    FG(8, ug),
    FG(9, Jf)
  ], wK);
  var TK = class extends j {
    constructor(e10, t10) {
      super(), this.widget = e10, this._onDidOpen = this._register(new N()), this.onDidOpen = this._onDidOpen.event, this._register(M.filter(this.widget.onDidChangeSelection, (e11) => Yd(e11.browserEvent))((e11) => this.onSelectionFromKeyboard(e11))), this._register(this.widget.onPointer((e11) => this.onPointer(e11.element, e11.browserEvent))), this._register(this.widget.onMouseDblClick((e11) => this.onMouseDblClick(e11.element, e11.browserEvent))), typeof (t10 == null ? void 0 : t10.openOnSingleClick) != `boolean` && (t10 == null ? void 0 : t10.configurationService) ? (this.openOnSingleClick = (t10 == null ? void 0 : t10.configurationService.getValue(iK)) !== `doubleClick`, this._register(t10 == null ? void 0 : t10.configurationService.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(iK) && (this.openOnSingleClick = (t10 == null ? void 0 : t10.configurationService.getValue(iK)) !== `doubleClick`);
      }))) : this.openOnSingleClick = (t10 == null ? void 0 : t10.openOnSingleClick) ?? true;
    }
    onSelectionFromKeyboard(e10) {
      if (e10.elements.length !== 1) return;
      let t10 = e10.browserEvent, n10 = typeof t10.preserveFocus == `boolean` ? t10.preserveFocus : true, r10 = typeof t10.pinned == `boolean` ? t10.pinned : !n10, i10 = false;
      this._open(this.getSelectedElement(), n10, r10, i10, e10.browserEvent);
    }
    onPointer(e10, t10) {
      if (!this.openOnSingleClick) return;
      let n10 = t10.detail === 2;
      if (n10) return;
      let r10 = t10.button === 1, i10 = true, a10 = r10, o10 = t10.ctrlKey || t10.metaKey || t10.altKey;
      this._open(e10, i10, a10, o10, t10);
    }
    onMouseDblClick(e10, t10) {
      if (!t10) return;
      let n10 = t10.target, r10 = n10.classList.contains(`monaco-tl-twistie`) || n10.classList.contains(`monaco-icon-label`) && n10.classList.contains(`folder-icon`) && t10.offsetX < 16;
      if (r10) return;
      let i10 = false, a10 = true, o10 = t10.ctrlKey || t10.metaKey || t10.altKey;
      this._open(e10, i10, a10, o10, t10);
    }
    _open(e10, t10, n10, r10, i10) {
      e10 && this._onDidOpen.fire({
        editorOptions: {
          preserveFocus: t10,
          pinned: n10,
          revealIfVisible: true
        },
        sideBySide: r10,
        element: e10,
        browserEvent: i10
      });
    }
  }, EK = class extends TK {
    constructor(e10, t10) {
      super(e10, t10), this.widget = e10;
    }
    getSelectedElement() {
      return this.widget.getSelectedElements()[0];
    }
  }, DK = class extends TK {
    constructor(e10, t10) {
      super(e10, t10);
    }
    getSelectedElement() {
      return this.widget.getSelectedElements()[0];
    }
  }, OK = class extends TK {
    constructor(e10, t10) {
      super(e10, t10);
    }
    getSelectedElement() {
      return this.widget.getSelection()[0] ?? void 0;
    }
  };
  function kK(e10) {
    let t10 = false;
    return (n10) => {
      if (n10.toKeyCodeChord().isModifierKey()) return false;
      if (t10) return t10 = false, false;
      let r10 = e10.softDispatch(n10, n10.target);
      return r10.kind === 1 ? (t10 = true, false) : (t10 = false, r10.kind === 0);
    };
  }
  let AK = class extends oG {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let { options: l10, getTypeNavigationMode: u10, disposable: d10 } = a10.invokeFunction(LK, i10);
      super(e10, t10, n10, r10, l10), this.disposables.add(d10), this.internals = new RK(this, i10, u10, i10.overrideStyles, o10, s10, c10), this.disposables.add(this.internals);
    }
    updateOptions(e10) {
      super.updateOptions(e10), this.internals.updateOptions(e10);
    }
  };
  AK = PG([
    FG(5, Jf),
    FG(6, qp),
    FG(7, IG),
    FG(8, ug)
  ], AK);
  let jK = class extends uG {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let { options: l10, getTypeNavigationMode: u10, disposable: d10 } = a10.invokeFunction(LK, i10);
      super(e10, t10, n10, r10, l10), this.disposables.add(d10), this.internals = new RK(this, i10, u10, i10.overrideStyles, o10, s10, c10), this.disposables.add(this.internals);
    }
    updateOptions(e10 = {}) {
      super.updateOptions(e10), e10.overrideStyles && this.internals.updateStyleOverrides(e10.overrideStyles), this.internals.updateOptions(e10);
    }
  };
  jK = PG([
    FG(5, Jf),
    FG(6, qp),
    FG(7, IG),
    FG(8, ug)
  ], jK);
  let MK = class extends kG {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      let { options: u10, getTypeNavigationMode: d10, disposable: f10 } = o10.invokeFunction(LK, a10);
      super(e10, t10, n10, r10, i10, u10), this.disposables.add(f10), this.internals = new RK(this, a10, d10, a10.overrideStyles, s10, c10, l10), this.disposables.add(this.internals);
    }
    updateOptions(e10 = {}) {
      super.updateOptions(e10), e10.overrideStyles !== void 0 && this.internals.updateStyleOverrides(e10.overrideStyles), this.internals.updateOptions(e10);
    }
  };
  MK = PG([
    FG(6, Jf),
    FG(7, qp),
    FG(8, IG),
    FG(9, ug)
  ], MK);
  NK = class extends CG {
    get onDidOpen() {
      return this.internals.onDidOpen;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      let { options: u10, getTypeNavigationMode: d10, disposable: f10 } = o10.invokeFunction(LK, a10);
      super(e10, t10, n10, r10, i10, u10), this.disposables.add(f10), this.internals = new RK(this, a10, d10, a10.overrideStyles, s10, c10, l10), this.disposables.add(this.internals);
    }
    updateOptions(e10 = {}) {
      super.updateOptions(e10), e10.overrideStyles && this.internals.updateStyleOverrides(e10.overrideStyles), this.internals.updateOptions(e10);
    }
  };
  NK = PG([
    FG(6, Jf),
    FG(7, qp),
    FG(8, IG),
    FG(9, ug)
  ], NK);
  let PK = class extends DG {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      let { options: d10, getTypeNavigationMode: f10, disposable: p10 } = s10.invokeFunction(LK, o10);
      super(e10, t10, n10, r10, i10, a10, d10), this.disposables.add(p10), this.internals = new RK(this, o10, f10, o10.overrideStyles, c10, l10, u10), this.disposables.add(this.internals);
    }
    updateOptions(e10) {
      super.updateOptions(e10), this.internals.updateOptions(e10);
    }
  };
  PK = PG([
    FG(7, Jf),
    FG(8, qp),
    FG(9, IG),
    FG(10, ug)
  ], PK);
  function FK(e10) {
    let t10 = e10.getValue(oK);
    if (t10 === `highlight`) return kW.Highlight;
    if (t10 === `filter`) return kW.Filter;
    let n10 = e10.getValue(cK);
    if (n10 === `simple` || n10 === `highlight`) return kW.Highlight;
    if (n10 === `filter`) return kW.Filter;
  }
  function IK(e10) {
    let t10 = e10.getValue(uK);
    if (t10 === `fuzzy`) return AW.Fuzzy;
    if (t10 === `contiguous`) return AW.Contiguous;
  }
  function LK(e10, t10) {
    let n10 = e10.get(ug), r10 = e10.get(AE), i10 = e10.get(qp), a10 = e10.get(Jf), o10 = () => {
      let e11 = i10.getContextKeyValue($G);
      if (e11 === `automatic`) return gF.Automatic;
      if (e11 === `trigger`) return gF.Trigger;
      let t11 = i10.getContextKeyValue(eK);
      if (t11 === false) return gF.Trigger;
      let r11 = n10.getValue(sK);
      if (r11 === `automatic`) return gF.Automatic;
      if (r11 === `trigger`) return gF.Trigger;
    }, s10 = t10.horizontalScrolling === void 0 ? !!n10.getValue(aK) : t10.horizontalScrolling, [c10, l10] = a10.invokeFunction(xK, t10), u10 = t10.paddingBottom, d10 = t10.renderIndentGuides === void 0 ? n10.getValue(fK) : t10.renderIndentGuides;
    return {
      getTypeNavigationMode: o10,
      disposable: l10,
      options: {
        keyboardSupport: false,
        ...c10,
        indent: typeof n10.getValue(dK) == `number` ? n10.getValue(dK) : void 0,
        renderIndentGuides: d10,
        smoothScrolling: !!n10.getValue(pK),
        defaultFindMode: FK(n10),
        defaultFindMatchType: IK(n10),
        horizontalScrolling: s10,
        scrollByPage: !!n10.getValue(lK),
        paddingBottom: u10,
        hideTwistiesOfChildlessElements: t10.hideTwistiesOfChildlessElements,
        expandOnlyOnTwistieClick: t10.expandOnlyOnTwistieClick ?? n10.getValue(gK) === `doubleClick`,
        contextViewProvider: r10,
        findWidgetStyles: mI,
        enableStickyScroll: !!n10.getValue(_K),
        stickyScrollMaxItemCount: Number(n10.getValue(vK))
      }
    };
  }
  let RK = class {
    get onDidOpen() {
      return this.navigator.onDidOpen;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.tree = e10, this.disposables = [], this.contextKeyService = tK(i10, e10), this.disposables.push(nK(this.contextKeyService, e10)), this.listSupportsMultiSelect = VG.bindTo(this.contextKeyService), this.listSupportsMultiSelect.set(t10.multipleSelectionSupport !== false);
      let s10 = KG.bindTo(this.contextKeyService);
      s10.set(!!t10.selectionNavigation), this.listSupportFindWidget = qG.bindTo(this.contextKeyService), this.listSupportFindWidget.set(t10.findWidgetEnabled ?? true), this.hasSelectionOrFocus = UG.bindTo(this.contextKeyService), this.hasDoubleSelection = WG.bindTo(this.contextKeyService), this.hasMultiSelection = GG.bindTo(this.contextKeyService), this.treeElementCanCollapse = JG.bindTo(this.contextKeyService), this.treeElementHasParent = YG.bindTo(this.contextKeyService), this.treeElementCanExpand = XG.bindTo(this.contextKeyService), this.treeElementHasChild = ZG.bindTo(this.contextKeyService), this.treeFindOpen = QG.bindTo(this.contextKeyService), this.treeStickyScrollFocused = BG.bindTo(this.contextKeyService), this._useAltAsMultipleSelectionModifier = yK(o10), this.updateStyleOverrides(r10);
      let c10 = () => {
        let t11 = e10.getFocus()[0];
        if (!t11) return;
        let n11 = e10.getNode(t11);
        this.treeElementCanCollapse.set(n11.collapsible && !n11.collapsed), this.treeElementHasParent.set(!!e10.getParentElement(t11)), this.treeElementCanExpand.set(n11.collapsible && n11.collapsed), this.treeElementHasChild.set(!!e10.getFirstElementChild(t11));
      }, l10 = /* @__PURE__ */ new Set();
      l10.add($G), l10.add(eK), this.disposables.push(this.contextKeyService, a10.register(e10), e10.onDidChangeSelection(() => {
        let t11 = e10.getSelection(), n11 = e10.getFocus();
        this.contextKeyService.bufferChangeEvents(() => {
          this.hasSelectionOrFocus.set(t11.length > 0 || n11.length > 0), this.hasMultiSelection.set(t11.length > 1), this.hasDoubleSelection.set(t11.length === 2);
        });
      }), e10.onDidChangeFocus(() => {
        let t11 = e10.getSelection(), n11 = e10.getFocus();
        this.hasSelectionOrFocus.set(t11.length > 0 || n11.length > 0), c10();
      }), e10.onDidChangeCollapseState(c10), e10.onDidChangeModel(c10), e10.onDidChangeFindOpenState((e11) => this.treeFindOpen.set(e11)), e10.onDidChangeStickyScrollFocused((e11) => this.treeStickyScrollFocused.set(e11)), o10.onDidChangeConfiguration((r11) => {
        let i11 = {};
        if (r11.affectsConfiguration(rK) && (this._useAltAsMultipleSelectionModifier = yK(o10)), r11.affectsConfiguration(dK)) {
          let e11 = o10.getValue(dK);
          i11 = {
            ...i11,
            indent: e11
          };
        }
        if (r11.affectsConfiguration(fK) && t10.renderIndentGuides === void 0) {
          let e11 = o10.getValue(fK);
          i11 = {
            ...i11,
            renderIndentGuides: e11
          };
        }
        if (r11.affectsConfiguration(pK)) {
          let e11 = !!o10.getValue(pK);
          i11 = {
            ...i11,
            smoothScrolling: e11
          };
        }
        if (r11.affectsConfiguration(oK) || r11.affectsConfiguration(cK)) {
          let e11 = FK(o10);
          i11 = {
            ...i11,
            defaultFindMode: e11
          };
        }
        if (r11.affectsConfiguration(sK) || r11.affectsConfiguration(cK)) {
          let e11 = n10();
          i11 = {
            ...i11,
            typeNavigationMode: e11
          };
        }
        if (r11.affectsConfiguration(uK)) {
          let e11 = IK(o10);
          i11 = {
            ...i11,
            defaultFindMatchType: e11
          };
        }
        if (r11.affectsConfiguration(aK) && t10.horizontalScrolling === void 0) {
          let e11 = !!o10.getValue(aK);
          i11 = {
            ...i11,
            horizontalScrolling: e11
          };
        }
        if (r11.affectsConfiguration(lK)) {
          let e11 = !!o10.getValue(lK);
          i11 = {
            ...i11,
            scrollByPage: e11
          };
        }
        if (r11.affectsConfiguration(gK) && t10.expandOnlyOnTwistieClick === void 0 && (i11 = {
          ...i11,
          expandOnlyOnTwistieClick: o10.getValue(gK) === `doubleClick`
        }), r11.affectsConfiguration(_K)) {
          let e11 = o10.getValue(_K);
          i11 = {
            ...i11,
            enableStickyScroll: e11
          };
        }
        if (r11.affectsConfiguration(vK)) {
          let e11 = Math.max(1, o10.getValue(vK));
          i11 = {
            ...i11,
            stickyScrollMaxItemCount: e11
          };
        }
        if (r11.affectsConfiguration(mK)) {
          let e11 = o10.getValue(mK);
          i11 = {
            ...i11,
            mouseWheelScrollSensitivity: e11
          };
        }
        if (r11.affectsConfiguration(hK)) {
          let e11 = o10.getValue(hK);
          i11 = {
            ...i11,
            fastScrollSensitivity: e11
          };
        }
        Object.keys(i11).length > 0 && e10.updateOptions(i11);
      }), this.contextKeyService.onDidChangeContext((t11) => {
        t11.affectsSome(l10) && e10.updateOptions({
          typeNavigationMode: n10()
        });
      })), this.navigator = new OK(e10, {
        configurationService: o10,
        ...t10
      }), this.disposables.push(this.navigator);
    }
    updateOptions(e10) {
      e10.multipleSelectionSupport !== void 0 && this.listSupportsMultiSelect.set(!!e10.multipleSelectionSupport);
    }
    updateStyleOverrides(e10) {
      this.tree.style(e10 ? _I(e10) : gI);
    }
    dispose() {
      this.disposables = Rr(this.disposables);
    }
  };
  RK = PG([
    FG(4, qp),
    FG(5, IG),
    FG(6, ug)
  ], RK);
  const zK = am.as(Dg.Configuration);
  zK.registerConfiguration({
    id: `workbench`,
    order: 7,
    title: T(`workbenchConfigurationTitle`, `Workbench`),
    type: `object`,
    properties: {
      [rK]: {
        type: `string`,
        enum: [
          `ctrlCmd`,
          `alt`
        ],
        markdownEnumDescriptions: [
          T(`multiSelectModifier.ctrlCmd`, "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
          T(`multiSelectModifier.alt`, "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
        ],
        default: `ctrlCmd`,
        description: T({
          key: `multiSelectModifier`,
          comment: [
            "- `ctrlCmd` refers to a value the setting can take and should not be localized.",
            "- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized."
          ]
        }, `The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.`)
      },
      [iK]: {
        type: `string`,
        enum: [
          `singleClick`,
          `doubleClick`
        ],
        default: `singleClick`,
        description: T({
          key: `openModeModifier`,
          comment: [
            "`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized."
          ]
        }, `Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.`)
      },
      [aK]: {
        type: `boolean`,
        default: false,
        description: T(`horizontalScrolling setting`, `Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.`)
      },
      [lK]: {
        type: `boolean`,
        default: false,
        description: T(`list.scrollByPage`, `Controls whether clicks in the scrollbar scroll page by page.`)
      },
      [dK]: {
        type: `number`,
        default: 8,
        minimum: 4,
        maximum: 40,
        description: T(`tree indent setting`, `Controls tree indentation in pixels.`)
      },
      [fK]: {
        type: `string`,
        enum: [
          `none`,
          `onHover`,
          `always`
        ],
        default: `onHover`,
        description: T(`render tree indent guides`, `Controls whether the tree should render indent guides.`)
      },
      [pK]: {
        type: `boolean`,
        default: false,
        description: T(`list smoothScrolling setting`, `Controls whether lists and trees have smooth scrolling.`)
      },
      [mK]: {
        type: `number`,
        default: 1,
        markdownDescription: T(`Mouse Wheel Scroll Sensitivity`, "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.")
      },
      [hK]: {
        type: `number`,
        default: 5,
        markdownDescription: T(`Fast Scroll Sensitivity`, "Scrolling speed multiplier when pressing `Alt`.")
      },
      [oK]: {
        type: `string`,
        enum: [
          `highlight`,
          `filter`
        ],
        enumDescriptions: [
          T(`defaultFindModeSettingKey.highlight`, `Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.`),
          T(`defaultFindModeSettingKey.filter`, `Filter elements when searching.`)
        ],
        default: `highlight`,
        description: T(`defaultFindModeSettingKey`, `Controls the default find mode for lists and trees in the workbench.`)
      },
      [cK]: {
        type: `string`,
        enum: [
          `simple`,
          `highlight`,
          `filter`
        ],
        enumDescriptions: [
          T(`keyboardNavigationSettingKey.simple`, `Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.`),
          T(`keyboardNavigationSettingKey.highlight`, `Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.`),
          T(`keyboardNavigationSettingKey.filter`, `Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.`)
        ],
        default: `highlight`,
        description: T(`keyboardNavigationSettingKey`, `Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.`),
        deprecated: true,
        deprecationMessage: T(`keyboardNavigationSettingKeyDeprecated`, `Please use 'workbench.list.defaultFindMode' and	'workbench.list.typeNavigationMode' instead.`)
      },
      [uK]: {
        type: `string`,
        enum: [
          `fuzzy`,
          `contiguous`
        ],
        enumDescriptions: [
          T(`defaultFindMatchTypeSettingKey.fuzzy`, `Use fuzzy matching when searching.`),
          T(`defaultFindMatchTypeSettingKey.contiguous`, `Use contiguous matching when searching.`)
        ],
        default: `fuzzy`,
        description: T(`defaultFindMatchTypeSettingKey`, `Controls the type of matching used when searching lists and trees in the workbench.`)
      },
      [gK]: {
        type: `string`,
        enum: [
          `singleClick`,
          `doubleClick`
        ],
        default: `singleClick`,
        description: T(`expand mode`, `Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.`)
      },
      [_K]: {
        type: `boolean`,
        default: true,
        description: T(`sticky scroll`, `Controls whether sticky scrolling is enabled in trees.`)
      },
      [vK]: {
        type: `number`,
        minimum: 1,
        default: 7,
        markdownDescription: T(`sticky scroll maximum items`, `Controls the number of sticky elements displayed in the tree when {0} is enabled.`, "`#workbench.tree.enableStickyScroll#`")
      },
      [sK]: {
        type: `string`,
        enum: [
          `automatic`,
          `trigger`
        ],
        default: `automatic`,
        markdownDescription: T(`typeNavigationMode2`, "Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.")
      }
    }
  });
  let VK, UK;
  BK = class e10 extends j {
    constructor(e11, t10) {
      super(), this.options = t10, this.text = ``, this.title = ``, this.highlights = [], this.didEverRender = false, this.supportIcons = (t10 == null ? void 0 : t10.supportIcons) ?? false, this.domNode = V(e11, H(`span.monaco-highlighted-label`));
    }
    get element() {
      return this.domNode;
    }
    set(t10, n10 = [], r10 = ``, i10) {
      t10 || (t10 = ``), i10 && (t10 = e10.escapeNewLines(t10, n10)), !(this.didEverRender && this.text === t10 && this.title === r10 && Le(this.highlights, n10)) && (this.text = t10, this.title = r10, this.highlights = n10, this.render());
    }
    render() {
      var _a3, _b3, _c3;
      let e11 = [], t10 = 0;
      for (let n10 of this.highlights) {
        if (n10.end === n10.start) continue;
        if (t10 < n10.start) {
          let r11 = this.text.substring(t10, n10.start);
          this.supportIcons ? e11.push(...AD(r11)) : e11.push(r11), t10 = n10.start;
        }
        let r10 = this.text.substring(t10, n10.end), i10 = H(`span.highlight`, void 0, ...this.supportIcons ? AD(r10) : [
          r10
        ]);
        n10.extraClasses && i10.classList.add(...n10.extraClasses), e11.push(i10), t10 = n10.end;
      }
      if (t10 < this.text.length) {
        let n10 = this.text.substring(t10);
        this.supportIcons ? e11.push(...AD(n10)) : e11.push(n10);
      }
      if (af(this.domNode, ...e11), (_b3 = (_a3 = this.options) == null ? void 0 : _a3.hoverDelegate) == null ? void 0 : _b3.showNativeHover) this.domNode.title = this.title;
      else if (!this.customHover && this.title !== ``) {
        let e12 = ((_c3 = this.options) == null ? void 0 : _c3.hoverDelegate) ?? PP(`mouse`);
        this.customHover = this._register(RP().setupManagedHover(e12, this.domNode, this.title));
      } else this.customHover && this.customHover.update(this.title);
      this.didEverRender = true;
    }
    static escapeNewLines(e11, t10) {
      let n10 = 0, r10 = 0;
      return e11.replace(/\r\n|\r|\n/g, (e12, i10) => {
        r10 = e12 === `\r
` ? -1 : 0, i10 += n10;
        for (let e13 of t10) {
          if (e13.end <= i10) continue;
          e13.start >= i10 && (e13.start += r10), e13.end >= i10 && (e13.end += r10);
        }
        return n10 += r10, `\u23CE`;
      });
    }
  };
  VK = class {
    constructor(e10) {
      this._element = e10;
    }
    get element() {
      return this._element;
    }
    set textContent(e10) {
      this.disposed || e10 === this._textContent || (this._textContent = e10, this._element.textContent = e10);
    }
    set classNames(e10) {
      this.disposed || Le(e10, this._classNames) || (this._classNames = e10, this._element.classList.value = ``, this._element.classList.add(...e10));
    }
    set empty(e10) {
      this.disposed || e10 === this._empty || (this._empty = e10, this._element.style.marginLeft = e10 ? `0` : ``);
    }
    dispose() {
      this.disposed = true;
    }
  };
  HK = class extends j {
    constructor(e10, t10) {
      super(), this.customHovers = /* @__PURE__ */ new Map(), this.creationOptions = t10, this.domNode = this._register(new VK(V(e10, H(`.monaco-icon-label`)))), this.labelContainer = V(this.domNode.element, H(`.monaco-icon-label-container`)), this.nameContainer = V(this.labelContainer, H(`span.monaco-icon-name-container`)), (t10 == null ? void 0 : t10.supportHighlights) || (t10 == null ? void 0 : t10.supportIcons) ? this.nameNode = this._register(new GK(this.nameContainer, !!t10.supportIcons)) : this.nameNode = new UK(this.nameContainer), this.hoverDelegate = (t10 == null ? void 0 : t10.hoverDelegate) ?? PP(`mouse`);
    }
    get element() {
      return this.domNode.element;
    }
    setLabel(e10, t10, n10) {
      let r10 = [
        `monaco-icon-label`
      ], i10 = [
        `monaco-icon-label-container`
      ], a10 = ``;
      n10 && (n10.extraClasses && r10.push(...n10.extraClasses), n10.italic && r10.push(`italic`), n10.strikethrough && r10.push(`strikethrough`), n10.disabledCommand && i10.push(`disabled`), n10.title && (typeof n10.title == `string` ? a10 += n10.title : a10 += e10));
      let o10 = this.domNode.element.querySelector(`.monaco-icon-label-iconpath`);
      if (n10 == null ? void 0 : n10.iconPath) {
        let e11;
        !o10 || !Gd(o10) ? (e11 = H(`.monaco-icon-label-iconpath`), this.domNode.element.prepend(e11)) : e11 = o10, e11.style.backgroundImage = gf(n10 == null ? void 0 : n10.iconPath);
      } else o10 && o10.remove();
      if (this.domNode.classNames = r10, this.domNode.element.setAttribute(`aria-label`, a10), this.labelContainer.classList.value = ``, this.labelContainer.classList.add(...i10), this.setupHover((n10 == null ? void 0 : n10.descriptionTitle) ? this.labelContainer : this.element, n10 == null ? void 0 : n10.title), this.nameNode.setLabel(e10, n10), t10 || this.descriptionNode) {
        let e11 = this.getOrCreateDescriptionNode();
        e11 instanceof BK ? (e11.set(t10 || ``, n10 ? n10.descriptionMatches : void 0, void 0, n10 == null ? void 0 : n10.labelEscapeNewLines), this.setupHover(e11.element, n10 == null ? void 0 : n10.descriptionTitle)) : (e11.textContent = t10 && (n10 == null ? void 0 : n10.labelEscapeNewLines) ? BK.escapeNewLines(t10, []) : t10 || ``, this.setupHover(e11.element, (n10 == null ? void 0 : n10.descriptionTitle) || ``), e11.empty = !t10);
      }
      if ((n10 == null ? void 0 : n10.suffix) || this.suffixNode) {
        let e11 = this.getOrCreateSuffixNode();
        e11.textContent = (n10 == null ? void 0 : n10.suffix) ?? ``;
      }
    }
    setupHover(e10, t10) {
      let n10 = this.customHovers.get(e10);
      if (n10 && (n10.dispose(), this.customHovers.delete(e10)), !t10) {
        e10.removeAttribute(`title`);
        return;
      }
      if (this.hoverDelegate.showNativeHover) {
        let n11 = function(e11, t11) {
          _e(t11) ? e11.title = QO(t11) : (t11 == null ? void 0 : t11.markdownNotSupportedFallback) ? e11.title = t11.markdownNotSupportedFallback : e11.removeAttribute(`title`);
        };
        n11(e10, t10);
      } else {
        let n11 = RP().setupManagedHover(this.hoverDelegate, e10, t10);
        n11 && this.customHovers.set(e10, n11);
      }
    }
    dispose() {
      super.dispose();
      for (let e10 of this.customHovers.values()) e10.dispose();
      this.customHovers.clear();
    }
    getOrCreateSuffixNode() {
      if (!this.suffixNode) {
        let e10 = this._register(new VK(nf(this.nameContainer, H(`span.monaco-icon-suffix-container`))));
        this.suffixNode = this._register(new VK(V(e10.element, H(`span.label-suffix`))));
      }
      return this.suffixNode;
    }
    getOrCreateDescriptionNode() {
      var _a3;
      if (!this.descriptionNode) {
        let e10 = this._register(new VK(V(this.labelContainer, H(`span.monaco-icon-description-container`))));
        ((_a3 = this.creationOptions) == null ? void 0 : _a3.supportDescriptionHighlights) ? this.descriptionNode = this._register(new BK(V(e10.element, H(`span.label-description`)), {
          supportIcons: !!this.creationOptions.supportIcons
        })) : this.descriptionNode = this._register(new VK(V(e10.element, H(`span.label-description`))));
      }
      return this.descriptionNode;
    }
  };
  UK = class {
    constructor(e10) {
      this.container = e10, this.label = void 0, this.singleLabel = void 0;
    }
    setLabel(e10, t10) {
      if (!(this.label === e10 && Le(this.options, t10))) if (this.label = e10, this.options = t10, typeof e10 == `string`) this.singleLabel || (this.container.innerText = ``, this.container.classList.remove(`multiple`), this.singleLabel = V(this.container, H(`a.label-name`, {
        id: t10 == null ? void 0 : t10.domId
      }))), this.singleLabel.textContent = e10;
      else {
        this.container.innerText = ``, this.container.classList.add(`multiple`), this.singleLabel = void 0;
        for (let n10 = 0; n10 < e10.length; n10++) {
          let r10 = e10[n10], i10 = (t10 == null ? void 0 : t10.domId) && `${t10 == null ? void 0 : t10.domId}_${n10}`;
          V(this.container, H(`a.label-name`, {
            id: i10,
            "data-icon-label-count": e10.length,
            "data-icon-label-index": n10,
            role: `treeitem`
          }, r10)), n10 < e10.length - 1 && V(this.container, H(`span.label-separator`, void 0, (t10 == null ? void 0 : t10.separator) || `/`));
        }
      }
    }
  };
  function WK(e10, t10, n10) {
    if (!n10) return;
    let r10 = 0;
    return e10.map((e11) => {
      let i10 = {
        start: r10,
        end: r10 + e11.length
      }, a10 = n10.map((e12) => rj.intersect(i10, e12)).filter((e12) => !rj.isEmpty(e12)).map(({ start: e12, end: t11 }) => ({
        start: e12 - r10,
        end: t11 - r10
      }));
      return r10 = i10.end + t10.length, a10;
    });
  }
  var GK = class extends j {
    constructor(e10, t10) {
      super(), this.container = e10, this.supportIcons = t10, this.label = void 0, this.singleLabel = void 0;
    }
    setLabel(e10, t10) {
      if (!(this.label === e10 && Le(this.options, t10))) if (this.label = e10, this.options = t10, typeof e10 == `string`) this.singleLabel || (this.container.innerText = ``, this.container.classList.remove(`multiple`), this.singleLabel = this._register(new BK(V(this.container, H(`a.label-name`, {
        id: t10 == null ? void 0 : t10.domId
      })), {
        supportIcons: this.supportIcons
      }))), this.singleLabel.set(e10, t10 == null ? void 0 : t10.matches, void 0, t10 == null ? void 0 : t10.labelEscapeNewLines);
      else {
        this.container.innerText = ``, this.container.classList.add(`multiple`), this.singleLabel = void 0;
        let n10 = (t10 == null ? void 0 : t10.separator) || `/`, r10 = WK(e10, n10, t10 == null ? void 0 : t10.matches);
        for (let i10 = 0; i10 < e10.length; i10++) {
          let a10 = e10[i10], o10 = r10 ? r10[i10] : void 0, s10 = (t10 == null ? void 0 : t10.domId) && `${t10 == null ? void 0 : t10.domId}_${i10}`, c10 = H(`a.label-name`, {
            id: s10,
            "data-icon-label-count": e10.length,
            "data-icon-label-index": i10,
            role: `treeitem`
          }), l10 = this._register(new BK(V(this.container, c10), {
            supportIcons: this.supportIcons
          }));
          l10.set(a10, o10, void 0, t10 == null ? void 0 : t10.labelEscapeNewLines), i10 < e10.length - 1 && V(c10, H(`span.label-separator`, void 0, n10));
        }
      }
    }
  };
  let KK;
  KK = H;
  qK = {
    keybindingLabelBackground: void 0,
    keybindingLabelForeground: void 0,
    keybindingLabelBorder: void 0,
    keybindingLabelBottomBorder: void 0,
    keybindingLabelShadow: void 0
  };
  JK = class e10 extends j {
    constructor(e11, t10, n10) {
      super(), this.os = t10, this.keyElements = /* @__PURE__ */ new Set(), this.options = n10 || /* @__PURE__ */ Object.create(null);
      let r10 = this.options.keybindingLabelForeground;
      this.domNode = V(e11, KK(`.monaco-keybinding`)), r10 && (this.domNode.style.color = r10), this.hover = this._register(RP().setupManagedHover(PP(`mouse`), this.domNode, ``)), this.didEverRender = false, e11.appendChild(this.domNode);
    }
    get element() {
      return this.domNode;
    }
    set(t10, n10) {
      this.didEverRender && this.keybinding === t10 && e10.areSame(this.matches, n10) || (this.keybinding = t10, this.matches = n10, this.render());
    }
    render() {
      if (this.clear(), this.keybinding) {
        let e11 = this.keybinding.getChords();
        e11[0] && this.renderChord(this.domNode, e11[0], this.matches ? this.matches.firstPart : null);
        for (let t11 = 1; t11 < e11.length; t11++) V(this.domNode, KK(`span.monaco-keybinding-key-chord-separator`, void 0, ` `)), this.renderChord(this.domNode, e11[t11], this.matches ? this.matches.chordPart : null);
        let t10 = this.options.disableTitle ?? false ? void 0 : this.keybinding.getAriaLabel() || void 0;
        this.hover.update(t10), this.domNode.setAttribute(`aria-label`, t10 || ``);
      } else this.options && this.options.renderUnboundKeybindings && this.renderUnbound(this.domNode);
      this.didEverRender = true;
    }
    clear() {
      Zu(this.domNode), this.keyElements.clear();
    }
    renderChord(e11, t10, n10) {
      let r10 = eM.modifierLabels[this.os];
      t10.ctrlKey && this.renderKey(e11, r10.ctrlKey, !!(n10 == null ? void 0 : n10.ctrlKey), r10.separator), t10.shiftKey && this.renderKey(e11, r10.shiftKey, !!(n10 == null ? void 0 : n10.shiftKey), r10.separator), t10.altKey && this.renderKey(e11, r10.altKey, !!(n10 == null ? void 0 : n10.altKey), r10.separator), t10.metaKey && this.renderKey(e11, r10.metaKey, !!(n10 == null ? void 0 : n10.metaKey), r10.separator);
      let i10 = t10.keyLabel;
      i10 && this.renderKey(e11, i10, !!(n10 == null ? void 0 : n10.keyCode), ``);
    }
    renderKey(e11, t10, n10, r10) {
      V(e11, this.createKeyElement(t10, n10 ? `.highlight` : ``)), r10 && V(e11, KK(`span.monaco-keybinding-key-separator`, void 0, r10));
    }
    renderUnbound(e11) {
      V(e11, this.createKeyElement(T(`unbound`, `Unbound`)));
    }
    createKeyElement(e11, t10 = ``) {
      let n10 = KK(`span.monaco-keybinding-key` + t10, void 0, e11);
      return this.keyElements.add(n10), this.options.keybindingLabelBackground && (n10.style.backgroundColor = this.options.keybindingLabelBackground), this.options.keybindingLabelBorder && (n10.style.borderColor = this.options.keybindingLabelBorder), this.options.keybindingLabelBottomBorder && (n10.style.borderBottomColor = this.options.keybindingLabelBottomBorder), this.options.keybindingLabelShadow && (n10.style.boxShadow = `inset 0 -1px 0 ${this.options.keybindingLabelShadow}`), n10;
    }
    static areSame(e11, t10) {
      return e11 === t10 || !e11 && !t10 ? true : !!e11 && !!t10 && Le(e11.firstPart, t10.firstPart) && Le(e11.chordPart, t10.chordPart);
    }
  };
  const YK = new us(() => {
    let e10 = new Intl.Collator(void 0, {
      numeric: true,
      sensitivity: `base`
    });
    return {
      collator: e10,
      collatorIsNumeric: e10.resolvedOptions().numeric
    };
  }), hne = new us(() => {
    let e10 = new Intl.Collator(void 0, {
      numeric: true
    });
    return {
      collator: e10
    };
  }), gne = new us(() => {
    let e10 = new Intl.Collator(void 0, {
      numeric: true,
      sensitivity: `accent`
    });
    return {
      collator: e10
    };
  });
  function XK(e10, t10, n10 = false) {
    let r10 = e10 || ``, i10 = t10 || ``, a10 = YK.value.collator.compare(r10, i10);
    return YK.value.collatorIsNumeric && a10 === 0 && r10 !== i10 ? r10 < i10 ? -1 : 1 : a10;
  }
  function ZK(e10, t10, n10) {
    let r10 = e10.toLowerCase(), i10 = t10.toLowerCase(), a10 = QK(e10, t10, n10);
    if (a10) return a10;
    let o10 = r10.endsWith(n10), s10 = i10.endsWith(n10);
    if (o10 !== s10) return o10 ? -1 : 1;
    let c10 = XK(r10, i10);
    return c10 === 0 ? r10.localeCompare(i10) : c10;
  }
  function QK(e10, t10, n10) {
    let r10 = e10.toLowerCase(), i10 = t10.toLowerCase(), a10 = r10.startsWith(n10), o10 = i10.startsWith(n10);
    if (a10 !== o10) return a10 ? -1 : 1;
    if (a10 && o10) {
      if (r10.length < i10.length) return -1;
      if (r10.length > i10.length) return 1;
    }
    return 0;
  }
  var $K = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, eq = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, tq;
  const nq = H;
  var rq = class {
    constructor(e10, t10, n10) {
      this.index = e10, this.hasCheckbox = t10, this._hidden = false, this._init = new us(() => {
        let e11 = n10.label ?? ``, t11 = tk(e11).text.trim(), r10 = n10.ariaLabel || [
          e11,
          this.saneDescription,
          this.saneDetail
        ].map((e12) => $O(e12)).filter((e12) => !!e12).join(`, `);
        return {
          saneLabel: e11,
          saneSortLabel: t11,
          saneAriaLabel: r10
        };
      }), this._saneDescription = n10.description, this._saneTooltip = n10.tooltip;
    }
    get saneLabel() {
      return this._init.value.saneLabel;
    }
    get saneSortLabel() {
      return this._init.value.saneSortLabel;
    }
    get saneAriaLabel() {
      return this._init.value.saneAriaLabel;
    }
    get element() {
      return this._element;
    }
    set element(e10) {
      this._element = e10;
    }
    get hidden() {
      return this._hidden;
    }
    set hidden(e10) {
      this._hidden = e10;
    }
    get saneDescription() {
      return this._saneDescription;
    }
    set saneDescription(e10) {
      this._saneDescription = e10;
    }
    get saneDetail() {
      return this._saneDetail;
    }
    set saneDetail(e10) {
      this._saneDetail = e10;
    }
    get saneTooltip() {
      return this._saneTooltip;
    }
    set saneTooltip(e10) {
      this._saneTooltip = e10;
    }
    get labelHighlights() {
      return this._labelHighlights;
    }
    set labelHighlights(e10) {
      this._labelHighlights = e10;
    }
    get descriptionHighlights() {
      return this._descriptionHighlights;
    }
    set descriptionHighlights(e10) {
      this._descriptionHighlights = e10;
    }
    get detailHighlights() {
      return this._detailHighlights;
    }
    set detailHighlights(e10) {
      this._detailHighlights = e10;
    }
  }, iq = class extends rq {
    constructor(e10, t10, n10, r10, i10, a10) {
      var _a3, _b3, _c3;
      super(e10, t10, i10), this.fireButtonTriggered = n10, this._onChecked = r10, this.item = i10, this._separator = a10, this._checked = false, this.onChecked = t10 ? M.map(M.filter(this._onChecked.event, (e11) => e11.element === this), (e11) => e11.checked) : M.None, this._saneDetail = i10.detail, this._labelHighlights = (_a3 = i10.highlights) == null ? void 0 : _a3.label, this._descriptionHighlights = (_b3 = i10.highlights) == null ? void 0 : _b3.description, this._detailHighlights = (_c3 = i10.highlights) == null ? void 0 : _c3.detail;
    }
    get separator() {
      return this._separator;
    }
    set separator(e10) {
      this._separator = e10;
    }
    get checked() {
      return this._checked;
    }
    set checked(e10) {
      e10 !== this._checked && (this._checked = e10, this._onChecked.fire({
        element: this,
        checked: e10
      }));
    }
    get checkboxDisabled() {
      return !!this.item.disabled;
    }
  }, aq;
  (function(e10) {
    e10[e10.NONE = 0] = `NONE`, e10[e10.MOUSE_HOVER = 1] = `MOUSE_HOVER`, e10[e10.ACTIVE_ITEM = 2] = `ACTIVE_ITEM`;
  })(aq || (aq = {}));
  var oq = class extends rq {
    constructor(e10, t10, n10) {
      super(e10, false, n10), this.fireSeparatorButtonTriggered = t10, this.separator = n10, this.children = [], this.focusInsideSeparator = aq.NONE;
    }
  }, sq = class {
    getHeight(e10) {
      return e10 instanceof oq ? 30 : e10.saneDetail ? 44 : 22;
    }
    getTemplateId(e10) {
      return e10 instanceof iq ? uq.ID : dq.ID;
    }
  }, cq = class {
    getWidgetAriaLabel() {
      return T(`quickInput`, `Quick Input`);
    }
    getAriaLabel(e10) {
      var _a3;
      return ((_a3 = e10.separator) == null ? void 0 : _a3.label) ? `${e10.saneAriaLabel}, ${e10.separator.label}` : e10.saneAriaLabel;
    }
    getWidgetRole() {
      return `listbox`;
    }
    getRole(e10) {
      return e10.hasCheckbox ? `checkbox` : `option`;
    }
    isChecked(e10) {
      if (!(!e10.hasCheckbox || !(e10 instanceof iq))) return {
        get value() {
          return e10.checked;
        },
        onDidChange: (t10) => e10.onChecked(() => t10())
      };
    }
  }, lq = class {
    constructor(e10) {
      this.hoverDelegate = e10;
    }
    renderTemplate(e10) {
      let t10 = /* @__PURE__ */ Object.create(null);
      t10.toDisposeElement = new A(), t10.toDisposeTemplate = new A(), t10.entry = V(e10, nq(`.quick-input-list-entry`));
      let n10 = V(t10.entry, nq(`label.quick-input-list-label`));
      t10.toDisposeTemplate.add(td(n10, B.CLICK, (e11) => {
        t10.checkbox.offsetParent || e11.preventDefault();
      })), t10.checkbox = V(n10, nq(`input.quick-input-list-checkbox`)), t10.checkbox.type = `checkbox`;
      let r10 = V(n10, nq(`.quick-input-list-rows`)), i10 = V(r10, nq(`.quick-input-list-row`)), a10 = V(r10, nq(`.quick-input-list-row`));
      t10.label = new HK(i10, {
        supportHighlights: true,
        supportDescriptionHighlights: true,
        supportIcons: true,
        hoverDelegate: this.hoverDelegate
      }), t10.toDisposeTemplate.add(t10.label), t10.icon = rf(t10.label.element, nq(`.quick-input-list-icon`));
      let o10 = V(i10, nq(`.quick-input-list-entry-keybinding`));
      t10.keybinding = new JK(o10, Et), t10.toDisposeTemplate.add(t10.keybinding);
      let s10 = V(a10, nq(`.quick-input-list-label-meta`));
      return t10.detail = new HK(s10, {
        supportHighlights: true,
        supportIcons: true,
        hoverDelegate: this.hoverDelegate
      }), t10.toDisposeTemplate.add(t10.detail), t10.separator = V(t10.entry, nq(`.quick-input-list-separator`)), t10.actionBar = new jI(t10.entry, this.hoverDelegate ? {
        hoverDelegate: this.hoverDelegate
      } : void 0), t10.actionBar.domNode.classList.add(`quick-input-list-entry-action-bar`), t10.toDisposeTemplate.add(t10.actionBar), t10;
    }
    disposeTemplate(e10) {
      e10.toDisposeElement.dispose(), e10.toDisposeTemplate.dispose();
    }
    disposeElement(e10, t10, n10) {
      n10.toDisposeElement.clear(), n10.actionBar.clear();
    }
  };
  let uq = (_wa = class extends lq {
    constructor(e10, t10) {
      super(e10), this.themeService = t10, this._itemsWithSeparatorsFrequency = /* @__PURE__ */ new Map();
    }
    get templateId() {
      return tq.ID;
    }
    renderTemplate(e10) {
      let t10 = super.renderTemplate(e10);
      return t10.toDisposeTemplate.add(td(t10.checkbox, B.CHANGE, (e11) => {
        t10.element.checked = t10.checkbox.checked;
      })), t10;
    }
    renderElement(e10, t10, n10) {
      var _a3;
      let r10 = e10.element;
      n10.element = r10, r10.element = n10.entry ?? void 0;
      let i10 = r10.item;
      n10.checkbox.checked = r10.checked, n10.toDisposeElement.add(r10.onChecked((e11) => n10.checkbox.checked = e11)), n10.checkbox.disabled = r10.checkboxDisabled;
      let { labelHighlights: a10, descriptionHighlights: o10, detailHighlights: s10 } = r10;
      if (i10.iconPath) {
        let e11 = Bb(this.themeService.getColorTheme().type) ? i10.iconPath.dark : i10.iconPath.light ?? i10.iconPath.dark, t11 = xa.revive(e11);
        n10.icon.className = `quick-input-list-icon`, n10.icon.style.backgroundImage = gf(t11);
      } else n10.icon.style.backgroundImage = ``, n10.icon.className = i10.iconClass ? `quick-input-list-icon ${i10.iconClass}` : ``;
      let c10;
      !r10.saneTooltip && r10.saneDescription && (c10 = {
        markdown: {
          value: r10.saneDescription,
          supportThemeIcons: true
        },
        markdownNotSupportedFallback: r10.saneDescription
      });
      let l10 = {
        matches: a10 || [],
        descriptionTitle: c10,
        descriptionMatches: o10 || [],
        labelEscapeNewLines: true
      };
      if (l10.extraClasses = i10.iconClasses, l10.italic = i10.italic, l10.strikethrough = i10.strikethrough, n10.entry.classList.remove(`quick-input-list-separator-as-item`), n10.label.setLabel(r10.saneLabel, r10.saneDescription, l10), n10.keybinding.set(i10.keybinding), r10.saneDetail) {
        let e11;
        r10.saneTooltip || (e11 = {
          markdown: {
            value: r10.saneDetail,
            supportThemeIcons: true
          },
          markdownNotSupportedFallback: r10.saneDetail
        }), n10.detail.element.style.display = ``, n10.detail.setLabel(r10.saneDetail, void 0, {
          matches: s10,
          title: e11,
          labelEscapeNewLines: true
        });
      } else n10.detail.element.style.display = `none`;
      ((_a3 = r10.separator) == null ? void 0 : _a3.label) ? (n10.separator.textContent = r10.separator.label, n10.separator.style.display = ``, this.addItemWithSeparator(r10)) : n10.separator.style.display = `none`, n10.entry.classList.toggle(`quick-input-list-separator-border`, !!r10.separator);
      let u10 = i10.buttons;
      u10 && u10.length ? (n10.actionBar.push(u10.map((e11, t11) => QH(e11, `id-${t11}`, () => r10.fireButtonTriggered({
        button: e11,
        item: r10.item
      }))), {
        icon: true,
        label: false
      }), n10.entry.classList.add(`has-actions`)) : n10.entry.classList.remove(`has-actions`);
    }
    disposeElement(e10, t10, n10) {
      this.removeItemWithSeparator(e10.element), super.disposeElement(e10, t10, n10);
    }
    isItemWithSeparatorVisible(e10) {
      return this._itemsWithSeparatorsFrequency.has(e10);
    }
    addItemWithSeparator(e10) {
      this._itemsWithSeparatorsFrequency.set(e10, (this._itemsWithSeparatorsFrequency.get(e10) || 0) + 1);
    }
    removeItemWithSeparator(e10) {
      let t10 = this._itemsWithSeparatorsFrequency.get(e10) || 0;
      t10 > 1 ? this._itemsWithSeparatorsFrequency.set(e10, t10 - 1) : this._itemsWithSeparatorsFrequency.delete(e10);
    }
  }, tq = _wa, _wa.ID = `quickpickitem`, _wa);
  uq = tq = $K([
    eq(1, Vb)
  ], uq);
  var dq = (_xa = class extends lq {
    constructor() {
      super(...arguments), this._visibleSeparatorsFrequency = /* @__PURE__ */ new Map();
    }
    get templateId() {
      return _xa.ID;
    }
    get visibleSeparators() {
      return [
        ...this._visibleSeparatorsFrequency.keys()
      ];
    }
    isSeparatorVisible(e10) {
      return this._visibleSeparatorsFrequency.has(e10);
    }
    renderTemplate(e10) {
      let t10 = super.renderTemplate(e10);
      return t10.checkbox.style.display = `none`, t10;
    }
    renderElement(e10, t10, n10) {
      let r10 = e10.element;
      n10.element = r10, r10.element = n10.entry ?? void 0, r10.element.classList.toggle(`focus-inside`, !!r10.focusInsideSeparator);
      let i10 = r10.separator, { labelHighlights: a10, descriptionHighlights: o10, detailHighlights: s10 } = r10;
      n10.icon.style.backgroundImage = ``, n10.icon.className = ``;
      let c10;
      !r10.saneTooltip && r10.saneDescription && (c10 = {
        markdown: {
          value: r10.saneDescription,
          supportThemeIcons: true
        },
        markdownNotSupportedFallback: r10.saneDescription
      });
      let l10 = {
        matches: a10 || [],
        descriptionTitle: c10,
        descriptionMatches: o10 || [],
        labelEscapeNewLines: true
      };
      if (n10.entry.classList.add(`quick-input-list-separator-as-item`), n10.label.setLabel(r10.saneLabel, r10.saneDescription, l10), r10.saneDetail) {
        let e11;
        r10.saneTooltip || (e11 = {
          markdown: {
            value: r10.saneDetail,
            supportThemeIcons: true
          },
          markdownNotSupportedFallback: r10.saneDetail
        }), n10.detail.element.style.display = ``, n10.detail.setLabel(r10.saneDetail, void 0, {
          matches: s10,
          title: e11,
          labelEscapeNewLines: true
        });
      } else n10.detail.element.style.display = `none`;
      n10.separator.style.display = `none`, n10.entry.classList.add(`quick-input-list-separator-border`);
      let u10 = i10.buttons;
      u10 && u10.length ? (n10.actionBar.push(u10.map((e11, t11) => QH(e11, `id-${t11}`, () => r10.fireSeparatorButtonTriggered({
        button: e11,
        separator: r10.separator
      }))), {
        icon: true,
        label: false
      }), n10.entry.classList.add(`has-actions`)) : n10.entry.classList.remove(`has-actions`), this.addSeparator(r10);
    }
    disposeElement(e10, t10, n10) {
      var _a3;
      this.removeSeparator(e10.element), this.isSeparatorVisible(e10.element) || ((_a3 = e10.element.element) == null ? void 0 : _a3.classList.remove(`focus-inside`)), super.disposeElement(e10, t10, n10);
    }
    addSeparator(e10) {
      this._visibleSeparatorsFrequency.set(e10, (this._visibleSeparatorsFrequency.get(e10) || 0) + 1);
    }
    removeSeparator(e10) {
      let t10 = this._visibleSeparatorsFrequency.get(e10) || 0;
      t10 > 1 ? this._visibleSeparatorsFrequency.set(e10, t10 - 1) : this._visibleSeparatorsFrequency.delete(e10);
    }
  }, _xa.ID = `quickpickseparator`, _xa);
  let fq = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this.parent = e10, this.hoverDelegate = t10, this.linkOpenerDelegate = n10, this.accessibilityService = a10, this._onKeyDown = new N(), this._onLeave = new N(), this.onLeave = this._onLeave.event, this._visibleCountObservable = VN(`VisibleCount`, 0), this.onChangedVisibleCount = M.fromObservable(this._visibleCountObservable, this._store), this._allVisibleCheckedObservable = VN(`AllVisibleChecked`, false), this.onChangedAllVisibleChecked = M.fromObservable(this._allVisibleCheckedObservable, this._store), this._checkedCountObservable = VN(`CheckedCount`, 0), this.onChangedCheckedCount = M.fromObservable(this._checkedCountObservable, this._store), this._checkedElementsObservable = wP({
        equalsFn: l
      }, []), this.onChangedCheckedElements = M.fromObservable(this._checkedElementsObservable, this._store), this._onButtonTriggered = new N(), this.onButtonTriggered = this._onButtonTriggered.event, this._onSeparatorButtonTriggered = new N(), this.onSeparatorButtonTriggered = this._onSeparatorButtonTriggered.event, this._elementChecked = new N(), this._elementCheckedEventBufferer = new di(), this._hasCheckboxes = false, this._inputElements = [], this._elementTree = [], this._itemElements = [], this._elementDisposable = this._register(new A()), this._matchOnDescription = false, this._matchOnDetail = false, this._matchOnLabel = true, this._matchOnLabelMode = `fuzzy`, this._sortByLabel = true, this._shouldLoop = true, this._container = V(this.parent, nq(`.quick-input-list`)), this._separatorRenderer = new dq(t10), this._itemRenderer = i10.createInstance(uq, t10), this._tree = this._register(i10.createInstance(AK, `QuickInput`, this._container, new sq(), [
        this._itemRenderer,
        this._separatorRenderer
      ], {
        filter: {
          filter(e11) {
            return e11.hidden ? 0 : e11 instanceof oq ? 2 : 1;
          }
        },
        sorter: {
          compare: (e11, t11) => {
            if (!this.sortByLabel || !this._lastQueryString) return 0;
            let n11 = this._lastQueryString.toLowerCase();
            return hq(e11, t11, n11);
          }
        },
        accessibilityProvider: new cq(),
        setRowLineHeight: false,
        multipleSelectionSupport: false,
        hideTwistiesOfChildlessElements: true,
        renderIndentGuides: TW.None,
        findWidgetEnabled: false,
        indent: 0,
        horizontalScrolling: false,
        allowNonCollapsibleParents: true,
        alwaysConsumeMouseWheel: true
      })), this._tree.getHTMLElement().id = r10, this._registerListeners();
    }
    get onDidChangeFocus() {
      return M.map(this._tree.onDidChangeFocus, (e10) => e10.elements.filter((e11) => e11 instanceof iq).map((e11) => e11.item), this._store);
    }
    get onDidChangeSelection() {
      return M.map(this._tree.onDidChangeSelection, (e10) => ({
        items: e10.elements.filter((e11) => e11 instanceof iq).map((e11) => e11.item),
        event: e10.browserEvent
      }), this._store);
    }
    get displayed() {
      return this._container.style.display !== `none`;
    }
    set displayed(e10) {
      this._container.style.display = e10 ? `` : `none`;
    }
    get scrollTop() {
      return this._tree.scrollTop;
    }
    set scrollTop(e10) {
      this._tree.scrollTop = e10;
    }
    get ariaLabel() {
      return this._tree.ariaLabel;
    }
    set ariaLabel(e10) {
      this._tree.ariaLabel = e10 ?? ``;
    }
    set enabled(e10) {
      this._tree.getHTMLElement().style.pointerEvents = e10 ? `` : `none`;
    }
    get matchOnDescription() {
      return this._matchOnDescription;
    }
    set matchOnDescription(e10) {
      this._matchOnDescription = e10;
    }
    get matchOnDetail() {
      return this._matchOnDetail;
    }
    set matchOnDetail(e10) {
      this._matchOnDetail = e10;
    }
    get matchOnLabel() {
      return this._matchOnLabel;
    }
    set matchOnLabel(e10) {
      this._matchOnLabel = e10;
    }
    get matchOnLabelMode() {
      return this._matchOnLabelMode;
    }
    set matchOnLabelMode(e10) {
      this._matchOnLabelMode = e10;
    }
    get sortByLabel() {
      return this._sortByLabel;
    }
    set sortByLabel(e10) {
      this._sortByLabel = e10;
    }
    get shouldLoop() {
      return this._shouldLoop;
    }
    set shouldLoop(e10) {
      this._shouldLoop = e10;
    }
    _registerListeners() {
      this._registerOnKeyDown(), this._registerOnContainerClick(), this._registerOnMouseMiddleClick(), this._registerOnTreeModelChanged(), this._registerOnElementChecked(), this._registerOnContextMenu(), this._registerHoverListeners(), this._registerSelectionChangeListener(), this._registerSeparatorActionShowingListeners();
    }
    _registerOnKeyDown() {
      this._register(this._tree.onKeyDown((e10) => {
        let t10 = new Hc(e10);
        switch (t10.keyCode) {
          case 10:
            this.toggleCheckbox();
            break;
        }
        this._onKeyDown.fire(t10);
      }));
    }
    _registerOnContainerClick() {
      this._register(z(this._container, B.CLICK, (e10) => {
        (e10.x || e10.y) && this._onLeave.fire();
      }));
    }
    _registerOnMouseMiddleClick() {
      this._register(z(this._container, B.AUXCLICK, (e10) => {
        e10.button === 1 && this._onLeave.fire();
      }));
    }
    _registerOnTreeModelChanged() {
      this._register(this._tree.onDidChangeModel(() => {
        let e10 = this._itemElements.filter((e11) => !e11.hidden).length;
        this._visibleCountObservable.set(e10, void 0), this._hasCheckboxes && this._updateCheckedObservables();
      }));
    }
    _registerOnElementChecked() {
      this._register(this._elementCheckedEventBufferer.wrapEvent(this._elementChecked.event, (e10, t10) => t10)((e10) => this._updateCheckedObservables()));
    }
    _registerOnContextMenu() {
      this._register(this._tree.onContextMenu((e10) => {
        e10.element && (e10.browserEvent.preventDefault(), this._tree.setSelection([
          e10.element
        ]));
      }));
    }
    _registerHoverListeners() {
      let e10 = this._register(new nl(this.hoverDelegate.delay));
      this._register(this._tree.onMouseOver(async (t10) => {
        var _a3;
        if (Kd(t10.browserEvent.target)) {
          e10.cancel();
          return;
        }
        if (!(!Kd(t10.browserEvent.relatedTarget) && Sd(t10.browserEvent.relatedTarget, (_a3 = t10.element) == null ? void 0 : _a3.element))) try {
          await e10.trigger(async () => {
            t10.element instanceof iq && this.showHover(t10.element);
          });
        } catch (e11) {
          if (!br(e11)) throw e11;
        }
      })), this._register(this._tree.onMouseOut((t10) => {
        var _a3;
        Sd(t10.browserEvent.relatedTarget, (_a3 = t10.element) == null ? void 0 : _a3.element) || e10.cancel();
      }));
    }
    _registerSeparatorActionShowingListeners() {
      this._register(this._tree.onDidChangeFocus((e10) => {
        let t10 = e10.elements[0] ? this._tree.getParentElement(e10.elements[0]) : null;
        for (let e11 of this._separatorRenderer.visibleSeparators) {
          let n10 = e11 === t10, r10 = !!(e11.focusInsideSeparator & aq.ACTIVE_ITEM);
          r10 !== n10 && (n10 ? e11.focusInsideSeparator |= aq.ACTIVE_ITEM : e11.focusInsideSeparator &= ~aq.ACTIVE_ITEM, this._tree.rerender(e11));
        }
      })), this._register(this._tree.onMouseOver((e10) => {
        let t10 = e10.element ? this._tree.getParentElement(e10.element) : null;
        for (let e11 of this._separatorRenderer.visibleSeparators) {
          if (e11 !== t10) continue;
          let n10 = !!(e11.focusInsideSeparator & aq.MOUSE_HOVER);
          n10 || (e11.focusInsideSeparator |= aq.MOUSE_HOVER, this._tree.rerender(e11));
        }
      })), this._register(this._tree.onMouseOut((e10) => {
        let t10 = e10.element ? this._tree.getParentElement(e10.element) : null;
        for (let e11 of this._separatorRenderer.visibleSeparators) {
          if (e11 !== t10) continue;
          let n10 = !!(e11.focusInsideSeparator & aq.MOUSE_HOVER);
          n10 && (e11.focusInsideSeparator &= ~aq.MOUSE_HOVER, this._tree.rerender(e11));
        }
      }));
    }
    _registerSelectionChangeListener() {
      this._register(this._tree.onDidChangeSelection((e10) => {
        let t10 = e10.elements.filter((e11) => e11 instanceof iq);
        t10.length !== e10.elements.length && (e10.elements.length === 1 && e10.elements[0] instanceof oq && (this._tree.setFocus([
          e10.elements[0].children[0]
        ]), this._tree.reveal(e10.elements[0], 0)), this._tree.setSelection(t10));
      }));
    }
    setAllVisibleChecked(e10) {
      this._elementCheckedEventBufferer.bufferEvents(() => {
        this._itemElements.forEach((t10) => {
          !t10.hidden && !t10.checkboxDisabled && (t10.checked = e10);
        });
      });
    }
    setElements(e10) {
      this._elementDisposable.clear(), this._lastQueryString = void 0, this._inputElements = e10, this._hasCheckboxes = this.parent.classList.contains(`show-checkboxes`);
      let t10;
      this._itemElements = [], this._elementTree = e10.reduce((n10, r10, i10) => {
        let a10;
        if (r10.type === `separator`) {
          if (!r10.buttons) return n10;
          t10 = new oq(i10, (e11) => this._onSeparatorButtonTriggered.fire(e11), r10), a10 = t10;
        } else {
          let o10 = i10 > 0 ? e10[i10 - 1] : void 0, s10;
          o10 && o10.type === `separator` && !o10.buttons && (t10 = void 0, s10 = o10);
          let c10 = new iq(i10, this._hasCheckboxes, (e11) => this._onButtonTriggered.fire(e11), this._elementChecked, r10, s10);
          if (this._itemElements.push(c10), t10) return t10.children.push(c10), n10;
          a10 = c10;
        }
        return n10.push(a10), n10;
      }, []), this._setElementsToTree(this._elementTree), this.accessibilityService.isScreenReaderOptimized() && setTimeout(() => {
        let e11 = this._tree.getHTMLElement().querySelector(`.monaco-list-row.focused`), t11 = e11 == null ? void 0 : e11.parentNode;
        if (e11 && t11) {
          let n10 = e11.nextSibling;
          e11.remove(), t11.insertBefore(e11, n10);
        }
      }, 0);
    }
    setFocusedElements(e10) {
      let t10 = e10.map((e11) => this._itemElements.find((t11) => t11.item === e11)).filter((e11) => !!e11).filter((e11) => !e11.hidden);
      if (this._tree.setFocus(t10), e10.length > 0) {
        let e11 = this._tree.getFocus()[0];
        e11 && this._tree.reveal(e11);
      }
    }
    getActiveDescendant() {
      return this._tree.getHTMLElement().getAttribute(`aria-activedescendant`);
    }
    setSelectedElements(e10) {
      let t10 = e10.map((e11) => this._itemElements.find((t11) => t11.item === e11)).filter((e11) => !!e11);
      this._tree.setSelection(t10);
    }
    getCheckedElements() {
      return this._itemElements.filter((e10) => e10.checked).map((e10) => e10.item);
    }
    setCheckedElements(e10) {
      this._elementCheckedEventBufferer.bufferEvents(() => {
        let t10 = /* @__PURE__ */ new Set();
        for (let n10 of e10) t10.add(n10);
        for (let e11 of this._itemElements) e11.checked = t10.has(e11.item);
      });
    }
    focus(e10) {
      var _a3;
      if (this._itemElements.length) switch (e10 === LH.Second && this._itemElements.length < 2 && (e10 = LH.First), e10) {
        case LH.First:
          this._tree.scrollTop = 0, this._tree.focusFirst(void 0, (e11) => e11.element instanceof iq);
          break;
        case LH.Second: {
          this._tree.scrollTop = 0;
          let e11 = false;
          this._tree.focusFirst(void 0, (t10) => t10.element instanceof iq ? e11 ? true : (e11 = !e11, false) : false);
          break;
        }
        case LH.Last:
          this._tree.scrollTop = this._tree.scrollHeight, this._tree.focusLast(void 0, (e11) => e11.element instanceof iq);
          break;
        case LH.Next: {
          let e11 = this._tree.getFocus();
          this._tree.focusNext(void 0, this._shouldLoop, void 0, (e12) => e12.element instanceof iq ? (this._tree.reveal(e12.element), true) : false);
          let t10 = this._tree.getFocus();
          e11.length && e11[0] === t10[0] && e11[0] === this._itemElements[this._itemElements.length - 1] && this._onLeave.fire();
          break;
        }
        case LH.Previous: {
          let e11 = this._tree.getFocus();
          this._tree.focusPrevious(void 0, this._shouldLoop, void 0, (e12) => {
            if (!(e12.element instanceof iq)) return false;
            let t11 = this._tree.getParentElement(e12.element);
            return t11 === null || t11.children[0] !== e12.element ? this._tree.reveal(e12.element) : this._tree.reveal(t11), true;
          });
          let t10 = this._tree.getFocus();
          e11.length && e11[0] === t10[0] && e11[0] === this._itemElements[0] && this._onLeave.fire();
          break;
        }
        case LH.NextPage:
          this._tree.focusNextPage(void 0, (e11) => e11.element instanceof iq ? (this._tree.reveal(e11.element), true) : false);
          break;
        case LH.PreviousPage:
          this._tree.focusPreviousPage(void 0, (e11) => {
            if (!(e11.element instanceof iq)) return false;
            let t10 = this._tree.getParentElement(e11.element);
            return t10 === null || t10.children[0] !== e11.element ? this._tree.reveal(e11.element) : this._tree.reveal(t10), true;
          });
          break;
        case LH.NextSeparator: {
          let e11 = false, t10 = this._tree.getFocus()[0];
          this._tree.focusNext(void 0, true, void 0, (t11) => {
            if (e11) return true;
            if (t11.element instanceof oq) e11 = true, this._separatorRenderer.isSeparatorVisible(t11.element) ? this._tree.reveal(t11.element.children[0]) : this._tree.reveal(t11.element, 0);
            else if (t11.element instanceof iq) {
              if (t11.element.separator) return this._itemRenderer.isItemWithSeparatorVisible(t11.element) ? this._tree.reveal(t11.element) : this._tree.reveal(t11.element, 0), true;
              if (t11.element === this._elementTree[0]) return this._tree.reveal(t11.element, 0), true;
            }
            return false;
          });
          let n10 = this._tree.getFocus()[0];
          t10 === n10 && (this._tree.scrollTop = this._tree.scrollHeight, this._tree.focusLast(void 0, (e12) => e12.element instanceof iq));
          break;
        }
        case LH.PreviousSeparator: {
          let e11, t10 = !!((_a3 = this._tree.getFocus()[0]) == null ? void 0 : _a3.separator);
          this._tree.focusPrevious(void 0, true, void 0, (n10) => {
            if (n10.element instanceof oq) t10 ? e11 || (this._separatorRenderer.isSeparatorVisible(n10.element) ? this._tree.reveal(n10.element) : this._tree.reveal(n10.element, 0), e11 = n10.element.children[0]) : t10 = true;
            else if (n10.element instanceof iq && !e11) {
              if (n10.element.separator) this._itemRenderer.isItemWithSeparatorVisible(n10.element) ? this._tree.reveal(n10.element) : this._tree.reveal(n10.element, 0), e11 = n10.element;
              else if (n10.element === this._elementTree[0]) return this._tree.reveal(n10.element, 0), true;
            }
            return false;
          }), e11 && this._tree.setFocus([
            e11
          ]);
          break;
        }
      }
    }
    clearFocus() {
      this._tree.setFocus([]);
    }
    domFocus() {
      this._tree.domFocus();
    }
    layout(e10) {
      this._tree.getHTMLElement().style.maxHeight = e10 ? `${Math.floor(e10 / 44) * 44 + 6}px` : ``, this._tree.layout();
    }
    filter(e10) {
      if (this._lastQueryString = e10, !(this._sortByLabel || this._matchOnLabel || this._matchOnDescription || this._matchOnDetail)) return this._tree.layout(), false;
      let t10 = e10;
      if (e10 = e10.trim(), !e10 || !(this.matchOnLabel || this.matchOnDescription || this.matchOnDetail)) this._itemElements.forEach((e11) => {
        e11.labelHighlights = void 0, e11.descriptionHighlights = void 0, e11.detailHighlights = void 0, e11.hidden = false;
        let t11 = e11.index && this._inputElements[e11.index - 1];
        e11.item && (e11.separator = t11 && t11.type === `separator` && !t11.buttons ? t11 : void 0);
      });
      else {
        let n10;
        this._itemElements.forEach((r10) => {
          let i10;
          i10 = this.matchOnLabelMode === `fuzzy` ? this.matchOnLabel ? nk(e10, tk(r10.saneLabel)) ?? void 0 : void 0 : this.matchOnLabel ? pq(t10, tk(r10.saneLabel)) ?? void 0 : void 0;
          let a10 = this.matchOnDescription ? nk(e10, tk(r10.saneDescription || ``)) ?? void 0 : void 0, o10 = this.matchOnDetail ? nk(e10, tk(r10.saneDetail || ``)) ?? void 0 : void 0;
          if (i10 || a10 || o10 ? (r10.labelHighlights = i10, r10.descriptionHighlights = a10, r10.detailHighlights = o10, r10.hidden = false) : (r10.labelHighlights = void 0, r10.descriptionHighlights = void 0, r10.detailHighlights = void 0, r10.hidden = r10.item ? !r10.item.alwaysShow : true), r10.item ? r10.separator = void 0 : r10.separator && (r10.hidden = true), !this.sortByLabel) {
            let e11 = r10.index && this._inputElements[r10.index - 1] || void 0;
            (e11 == null ? void 0 : e11.type) === `separator` && !e11.buttons && (n10 = e11), n10 && !r10.hidden && (r10.separator = n10, n10 = void 0);
          }
        });
      }
      return this._setElementsToTree(this._sortByLabel && e10 ? this._itemElements : this._elementTree), this._tree.layout(), true;
    }
    toggleCheckbox() {
      this._elementCheckedEventBufferer.bufferEvents(() => {
        let e10 = this._tree.getFocus().filter((e11) => e11 instanceof iq), t10 = this._allVisibleChecked(e10);
        for (let n10 of e10) n10.checkboxDisabled || (n10.checked = !t10);
      });
    }
    style(e10) {
      this._tree.style(e10);
    }
    toggleHover() {
      let e10 = this._tree.getFocus()[0];
      if (!(e10 == null ? void 0 : e10.saneTooltip) || !(e10 instanceof iq)) return;
      if (this._lastHover && !this._lastHover.isDisposed) {
        this._lastHover.dispose();
        return;
      }
      this.showHover(e10);
      let t10 = new A();
      t10.add(this._tree.onDidChangeFocus((e11) => {
        e11.elements[0] instanceof iq && this.showHover(e11.elements[0]);
      })), this._lastHover && t10.add(this._lastHover), this._elementDisposable.add(t10);
    }
    _setElementsToTree(e10) {
      let t10 = [];
      for (let n10 of e10) n10 instanceof oq ? t10.push({
        element: n10,
        collapsible: false,
        collapsed: false,
        children: n10.children.map((e11) => ({
          element: e11,
          collapsible: false,
          collapsed: false
        }))
      }) : t10.push({
        element: n10,
        collapsible: false,
        collapsed: false
      });
      this._tree.setChildren(null, t10);
    }
    _allVisibleChecked(e10, t10 = true) {
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10];
        if (!r11.hidden) if (r11.checked) t10 = true;
        else return false;
      }
      return t10;
    }
    _updateCheckedObservables() {
      FN((e10) => {
        this._allVisibleCheckedObservable.set(this._allVisibleChecked(this._itemElements, false), e10);
        let t10 = this._itemElements.filter((e11) => e11.checked).length;
        this._checkedCountObservable.set(t10, e10), this._checkedElementsObservable.set(this.getCheckedElements(), e10);
      });
    }
    showHover(e10) {
      var _a3, _b3, _c3;
      this._lastHover && !this._lastHover.isDisposed && ((_b3 = (_a3 = this.hoverDelegate).onDidHideHover) == null ? void 0 : _b3.call(_a3), (_c3 = this._lastHover) == null ? void 0 : _c3.dispose()), !(!e10.element || !e10.saneTooltip) && (this._lastHover = this.hoverDelegate.showHover({
        content: e10.saneTooltip,
        target: e10.element,
        linkHandler: (e11) => {
          this.linkOpenerDelegate(e11);
        },
        appearance: {
          showPointer: true
        },
        container: this._container,
        position: {
          hoverPosition: 1
        }
      }, false));
    }
  };
  $K([
    PE
  ], fq.prototype, `onDidChangeFocus`, null), $K([
    PE
  ], fq.prototype, `onDidChangeSelection`, null), fq = $K([
    eq(4, Jf),
    eq(5, zA)
  ], fq);
  function pq(e10, t10) {
    let { text: n10, iconOffsets: r10 } = t10;
    if (!r10 || r10.length === 0) return mq(e10, n10);
    let i10 = vs(n10, ` `), a10 = n10.length - i10.length, o10 = mq(e10, i10);
    if (o10) for (let e11 of o10) {
      let t11 = r10[e11.start + a10] + a10;
      e11.start += t11, e11.end += t11;
    }
    return o10;
  }
  function mq(e10, t10) {
    let n10 = t10.toLowerCase().indexOf(e10.toLowerCase());
    return n10 === -1 ? null : [
      {
        start: n10,
        end: n10 + e10.length
      }
    ];
  }
  function hq(e10, t10, n10) {
    let r10 = e10.labelHighlights || [], i10 = t10.labelHighlights || [];
    return r10.length && !i10.length ? -1 : !r10.length && i10.length ? 1 : r10.length === 0 && i10.length === 0 ? 0 : ZK(e10.saneSortLabel, t10.saneSortLabel, n10);
  }
  const gq = {
    weight: 200,
    when: Ep.and(Ep.equals(aU, `quickPick`), iU),
    metadata: {
      description: T(`quickPick`, `Used while in the context of the quick pick. If you change one keybinding for this command, you should change all of the other keybindings (modifier variants) of this command as well.`)
    }
  };
  function _q(e10, t10 = {}) {
    sm.registerCommandAndKeybindingRule({
      ...gq,
      ...e10,
      secondary: yq(e10.primary, e10.secondary ?? [], t10)
    });
  }
  const vq = E ? 256 : 2048;
  function yq(e10, t10, n10 = {}) {
    return n10.withAltMod && t10.push(512 + e10), n10.withCtrlMod && (t10.push(vq + e10), n10.withAltMod && t10.push(512 + vq + e10)), n10.withCmdMod && E && (t10.push(2048 + e10), n10.withCtrlMod && t10.push(2304 + e10), n10.withAltMod && (t10.push(2560 + e10), n10.withCtrlMod && t10.push(2816 + e10))), t10;
  }
  function bq(e10, t10) {
    return (n10) => {
      let r10 = n10.get(BH).currentQuickInput;
      if (r10) return t10 && r10.quickNavigate ? r10.focus(t10) : r10.focus(e10);
    };
  }
  _q({
    id: `quickInput.pageNext`,
    primary: 12,
    handler: bq(LH.NextPage)
  }, {
    withAltMod: true,
    withCtrlMod: true,
    withCmdMod: true
  }), _q({
    id: `quickInput.pagePrevious`,
    primary: 11,
    handler: bq(LH.PreviousPage)
  }, {
    withAltMod: true,
    withCtrlMod: true,
    withCmdMod: true
  }), _q({
    id: `quickInput.first`,
    primary: vq + 14,
    handler: bq(LH.First)
  }, {
    withAltMod: true,
    withCmdMod: true
  }), _q({
    id: `quickInput.last`,
    primary: vq + 13,
    handler: bq(LH.Last)
  }, {
    withAltMod: true,
    withCmdMod: true
  }), _q({
    id: `quickInput.next`,
    primary: 18,
    handler: bq(LH.Next)
  }, {
    withCtrlMod: true
  }), _q({
    id: `quickInput.previous`,
    primary: 16,
    handler: bq(LH.Previous)
  }, {
    withCtrlMod: true
  });
  const xq = T(`quickInput.nextSeparatorWithQuickAccessFallback`, `If we're in quick access mode, this will navigate to the next item. If we are not in quick access mode, this will navigate to the next separator.`), Sq = T(`quickInput.previousSeparatorWithQuickAccessFallback`, `If we're in quick access mode, this will navigate to the previous item. If we are not in quick access mode, this will navigate to the previous separator.`);
  E ? (_q({
    id: `quickInput.nextSeparatorWithQuickAccessFallback`,
    primary: 2066,
    handler: bq(LH.NextSeparator, LH.Next),
    metadata: {
      description: xq
    }
  }), _q({
    id: `quickInput.nextSeparator`,
    primary: 2578,
    secondary: [
      2322
    ],
    handler: bq(LH.NextSeparator)
  }, {
    withCtrlMod: true
  }), _q({
    id: `quickInput.previousSeparatorWithQuickAccessFallback`,
    primary: 2064,
    handler: bq(LH.PreviousSeparator, LH.Previous),
    metadata: {
      description: Sq
    }
  }), _q({
    id: `quickInput.previousSeparator`,
    primary: 2576,
    secondary: [
      2320
    ],
    handler: bq(LH.PreviousSeparator)
  }, {
    withCtrlMod: true
  })) : (_q({
    id: `quickInput.nextSeparatorWithQuickAccessFallback`,
    primary: 530,
    handler: bq(LH.NextSeparator, LH.Next),
    metadata: {
      description: xq
    }
  }), _q({
    id: `quickInput.nextSeparator`,
    primary: 2578,
    handler: bq(LH.NextSeparator)
  }), _q({
    id: `quickInput.previousSeparatorWithQuickAccessFallback`,
    primary: 528,
    handler: bq(LH.PreviousSeparator, LH.Previous),
    metadata: {
      description: Sq
    }
  }), _q({
    id: `quickInput.previousSeparator`,
    primary: 2576,
    handler: bq(LH.PreviousSeparator)
  })), _q({
    id: `quickInput.acceptInBackground`,
    when: Ep.and(gq.when, Ep.or(NG.negate(), lU)),
    primary: 17,
    weight: 250,
    handler: (e10) => {
      let t10 = e10.get(BH).currentQuickInput;
      t10 == null ? void 0 : t10.accept(true);
    }
  }, {
    withAltMod: true,
    withCtrlMod: true,
    withCmdMod: true
  });
  var Cq = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, wq = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, Tq;
  const Eq = H;
  let Dq = (_ya = class extends j {
    get currentQuickInput() {
      return this.controller ?? void 0;
    }
    get container() {
      return this._container;
    }
    constructor(e10, t10, n10, r10) {
      super(), this.options = e10, this.layoutService = t10, this.instantiationService = n10, this.contextKeyService = r10, this.enabled = true, this.onDidAcceptEmitter = this._register(new N()), this.onDidCustomEmitter = this._register(new N()), this.onDidTriggerButtonEmitter = this._register(new N()), this.keyMods = {
        ctrlCmd: false,
        alt: false
      }, this.controller = null, this.onShowEmitter = this._register(new N()), this.onShow = this.onShowEmitter.event, this.onHideEmitter = this._register(new N()), this.onHide = this.onHideEmitter.event, this.inQuickInputContext = rU.bindTo(this.contextKeyService), this.quickInputTypeContext = oU.bindTo(this.contextKeyService), this.endOfQuickInputBoxContext = cU.bindTo(this.contextKeyService), this.idPrefix = e10.idPrefix, this._container = e10.container, this.styles = e10.styles, this._register(M.runAndSubscribe(Ju, ({ window: e11, disposables: t11 }) => this.registerKeyModsListeners(e11, t11), {
        window: os,
        disposables: this._store
      })), this._register(Yu((e11) => {
        this.ui && R(this.ui.container) === e11 && (this.reparentUI(this.layoutService.mainContainer), this.layout(this.layoutService.mainContainerDimension, this.layoutService.mainContainerOffset.quickPickTop));
      }));
    }
    registerKeyModsListeners(e10, t10) {
      let n10 = (e11) => {
        this.keyMods.ctrlCmd = e11.ctrlKey || e11.metaKey, this.keyMods.alt = e11.altKey;
      };
      for (let r10 of [
        B.KEY_DOWN,
        B.KEY_UP,
        B.MOUSE_DOWN
      ]) t10.add(z(e10, r10, n10, true));
    }
    getUI(e10) {
      if (this.ui) return e10 && R(this._container) !== R(this.layoutService.activeContainer) && (this.reparentUI(this.layoutService.activeContainer), this.layout(this.layoutService.activeContainerDimension, this.layoutService.activeContainerOffset.quickPickTop)), this.ui;
      let t10 = V(this._container, Eq(`.quick-input-widget.show-file-icons`));
      t10.tabIndex = -1, t10.style.display = `none`;
      let n10 = Id(t10), r10 = V(t10, Eq(`.quick-input-titlebar`)), i10 = this._register(new jI(r10, {
        hoverDelegate: this.options.hoverDelegate
      }));
      i10.domNode.classList.add(`quick-input-left-action-bar`);
      let a10 = V(r10, Eq(`.quick-input-title`)), o10 = this._register(new jI(r10, {
        hoverDelegate: this.options.hoverDelegate
      }));
      o10.domNode.classList.add(`quick-input-right-action-bar`);
      let s10 = V(t10, Eq(`.quick-input-header`)), c10 = V(s10, Eq(`input.quick-input-check-all`));
      c10.type = `checkbox`, c10.setAttribute(`aria-label`, T(`quickInput.checkAll`, `Toggle all checkboxes`)), this._register(td(c10, B.CHANGE, (e11) => {
        let t11 = c10.checked;
        ne2.setAllVisibleChecked(t11);
      })), this._register(z(c10, B.CLICK, (e11) => {
        (e11.x || e11.y) && f10.setFocus();
      }));
      let l10 = V(s10, Eq(`.quick-input-description`)), u10 = V(s10, Eq(`.quick-input-and-message`)), d10 = V(u10, Eq(`.quick-input-filter`)), f10 = this._register(new RU(d10, this.styles.inputBox, this.styles.toggle));
      f10.setAttribute(`aria-describedby`, `${this.idPrefix}message`);
      let p10 = V(d10, Eq(`.quick-input-visible-count`));
      p10.setAttribute(`aria-live`, `polite`), p10.setAttribute(`aria-atomic`, `true`);
      let m10 = new _U(p10, {
        countFormat: T({
          key: `quickInput.visibleCount`,
          comment: [
            `This tells the user how many items are shown in a list of items to select from. The items can be anything. Currently not visible, but read by screen readers.`
          ]
        }, `{0} Results`)
      }, this.styles.countBadge), h10 = V(d10, Eq(`.quick-input-count`));
      h10.setAttribute(`aria-live`, `polite`);
      let g10 = new _U(h10, {
        countFormat: T({
          key: `quickInput.countSelected`,
          comment: [
            `This tells the user how many items are selected in a list of items to select from. The items can be anything.`
          ]
        }, `{0} Selected`)
      }, this.styles.countBadge), _10 = this._register(new jI(s10, {
        hoverDelegate: this.options.hoverDelegate
      }));
      _10.domNode.classList.add(`quick-input-inline-action-bar`);
      let v10 = V(s10, Eq(`.quick-input-action`)), y10 = this._register(new gU(v10, this.styles.button));
      y10.label = T(`ok`, `OK`), this._register(y10.onDidClick((e11) => {
        this.onDidAcceptEmitter.fire();
      }));
      let b10 = V(s10, Eq(`.quick-input-action`)), x10 = this._register(new gU(b10, {
        ...this.styles.button,
        supportIcons: true
      }));
      x10.label = T(`custom`, `Custom`), this._register(x10.onDidClick((e11) => {
        this.onDidCustomEmitter.fire();
      }));
      let S10 = V(u10, Eq(`#${this.idPrefix}message.quick-input-message`)), C10 = this._register(new CU(t10, this.styles.progressBar));
      C10.getContainer().classList.add(`quick-input-progress`);
      let w10 = V(t10, Eq(`.quick-input-html-widget`));
      w10.tabIndex = -1;
      let ee2 = V(t10, Eq(`.quick-input-description`)), te2 = this.idPrefix + `list`, ne2 = this._register(this.instantiationService.createInstance(fq, t10, this.options.hoverDelegate, this.options.linkOpenerDelegate, te2));
      f10.setAttribute(`aria-controls`, te2), this._register(ne2.onDidChangeFocus(() => {
        f10.setAttribute(`aria-activedescendant`, ne2.getActiveDescendant() ?? ``);
      })), this._register(ne2.onChangedAllVisibleChecked((e11) => {
        c10.checked = e11;
      })), this._register(ne2.onChangedVisibleCount((e11) => {
        m10.setCount(e11);
      })), this._register(ne2.onChangedCheckedCount((e11) => {
        g10.setCount(e11);
      })), this._register(ne2.onLeave(() => {
        setTimeout(() => {
          this.controller && (f10.setFocus(), this.controller instanceof fU && this.controller.canSelectMany && ne2.clearFocus());
        }, 0);
      }));
      let re2 = tf(t10);
      return this._register(re2), this._register(z(t10, B.FOCUS, (e11) => {
        let t11 = this.getUI();
        if (Sd(e11.relatedTarget, t11.inputContainer)) {
          let e12 = t11.inputBox.isSelectionAtEnd();
          this.endOfQuickInputBoxContext.get() !== e12 && this.endOfQuickInputBoxContext.set(e12);
        }
        Sd(e11.relatedTarget, t11.container) || (this.inQuickInputContext.set(true), this.previousFocusElement = Gd(e11.relatedTarget) ? e11.relatedTarget : void 0);
      }, true)), this._register(re2.onDidBlur(() => {
        !this.getUI().ignoreFocusOut && !this.options.ignoreFocusOut() && this.hide(FH.Blur), this.inQuickInputContext.set(false), this.endOfQuickInputBoxContext.set(false), this.previousFocusElement = void 0;
      })), this._register(f10.onKeyDown((e11) => {
        let t11 = this.getUI().inputBox.isSelectionAtEnd();
        this.endOfQuickInputBoxContext.get() !== t11 && this.endOfQuickInputBoxContext.set(t11);
      })), this._register(z(t10, B.FOCUS, (e11) => {
        f10.setFocus();
      })), this._register(td(t10, B.KEY_DOWN, (e11) => {
        if (!Sd(e11.target, w10)) switch (e11.keyCode) {
          case 3:
            Zd.stop(e11, true), this.enabled && this.onDidAcceptEmitter.fire();
            break;
          case 9:
            Zd.stop(e11, true), this.hide(FH.Gesture);
            break;
          case 2:
            if (!e11.altKey && !e11.ctrlKey && !e11.metaKey) {
              let n11 = [
                `.quick-input-list .monaco-action-bar .always-visible`,
                `.quick-input-list-entry:hover .monaco-action-bar`,
                `.monaco-list-row.focused .monaco-action-bar`
              ];
              if (t10.classList.contains(`show-checkboxes`) ? n11.push(`input`) : n11.push(`input[type=text]`), this.getUI().list.displayed && n11.push(`.monaco-list`), this.getUI().message && n11.push(`.quick-input-message a`), this.getUI().widget) {
                if (Sd(e11.target, this.getUI().widget)) break;
                n11.push(`.quick-input-html-widget`);
              }
              let r11 = t10.querySelectorAll(n11.join(`, `));
              e11.shiftKey && e11.target === r11[0] ? (Zd.stop(e11, true), ne2.clearFocus()) : !e11.shiftKey && Sd(e11.target, r11[r11.length - 1]) && (Zd.stop(e11, true), r11[0].focus());
            }
            break;
          case 10:
            e11.ctrlKey && (Zd.stop(e11, true), this.getUI().list.toggleHover());
            break;
        }
      })), this.ui = {
        container: t10,
        styleSheet: n10,
        leftActionBar: i10,
        titleBar: r10,
        title: a10,
        description1: ee2,
        description2: l10,
        widget: w10,
        rightActionBar: o10,
        inlineActionBar: _10,
        checkAll: c10,
        inputContainer: u10,
        filterContainer: d10,
        inputBox: f10,
        visibleCountContainer: p10,
        visibleCount: m10,
        countContainer: h10,
        count: g10,
        okContainer: v10,
        ok: y10,
        message: S10,
        customButtonContainer: b10,
        customButton: x10,
        list: ne2,
        progressBar: C10,
        onDidAccept: this.onDidAcceptEmitter.event,
        onDidCustom: this.onDidCustomEmitter.event,
        onDidTriggerButton: this.onDidTriggerButtonEmitter.event,
        ignoreFocusOut: false,
        keyMods: this.keyMods,
        show: (e11) => this.show(e11),
        hide: () => this.hide(),
        setVisibilities: (e11) => this.setVisibilities(e11),
        setEnabled: (e11) => this.setEnabled(e11),
        setContextKey: (e11) => this.options.setContextKey(e11),
        linkOpenerDelegate: (e11) => this.options.linkOpenerDelegate(e11)
      }, this.updateStyles(), this.ui;
    }
    reparentUI(e10) {
      this.ui && (this._container = e10, V(this._container, this.ui.container));
    }
    pick(e10, t10 = {}, n10 = mi.None) {
      return new Promise((r10, i10) => {
        let a10 = (e11) => {
          var _a3;
          a10 = r10, (_a3 = t10.onKeyMods) == null ? void 0 : _a3.call(t10, o10.keyMods), r10(e11);
        };
        if (n10.isCancellationRequested) {
          a10(void 0);
          return;
        }
        let o10 = this.createQuickPick({
          useSeparators: true
        }), s10, c10 = [
          o10,
          o10.onDidAccept(() => {
            if (o10.canSelectMany) a10(o10.selectedItems.slice()), o10.hide();
            else {
              let e11 = o10.activeItems[0];
              e11 && (a10(e11), o10.hide());
            }
          }),
          o10.onDidChangeActive((e11) => {
            let n11 = e11[0];
            n11 && t10.onDidFocus && t10.onDidFocus(n11);
          }),
          o10.onDidChangeSelection((e11) => {
            if (!o10.canSelectMany) {
              let t11 = e11[0];
              t11 && (a10(t11), o10.hide());
            }
          }),
          o10.onDidTriggerItemButton((e11) => t10.onDidTriggerItemButton && t10.onDidTriggerItemButton({
            ...e11,
            removeItem: () => {
              let t11 = o10.items.indexOf(e11.item);
              if (t11 !== -1) {
                let e12 = o10.items.slice(), n11 = e12.splice(t11, 1), r11 = o10.activeItems.filter((e13) => e13 !== n11[0]), i11 = o10.keepScrollPosition;
                o10.keepScrollPosition = true, o10.items = e12, r11 && (o10.activeItems = r11), o10.keepScrollPosition = i11;
              }
            }
          })),
          o10.onDidTriggerSeparatorButton((e11) => {
            var _a3;
            return (_a3 = t10.onDidTriggerSeparatorButton) == null ? void 0 : _a3.call(t10, e11);
          }),
          o10.onDidChangeValue((e11) => {
            s10 && !e11 && (o10.activeItems.length !== 1 || o10.activeItems[0] !== s10) && (o10.activeItems = [
              s10
            ]);
          }),
          n10.onCancellationRequested(() => {
            o10.hide();
          }),
          o10.onDidHide(() => {
            Rr(c10), a10(void 0);
          })
        ];
        o10.title = t10.title, t10.value && (o10.value = t10.value), o10.canSelectMany = !!t10.canPickMany, o10.placeholder = t10.placeHolder, o10.ignoreFocusOut = !!t10.ignoreFocusLost, o10.matchOnDescription = !!t10.matchOnDescription, o10.matchOnDetail = !!t10.matchOnDetail, o10.matchOnLabel = t10.matchOnLabel === void 0 || t10.matchOnLabel, o10.quickNavigate = t10.quickNavigate, o10.hideInput = !!t10.hideInput, o10.contextKey = t10.contextKey, o10.busy = true, Promise.all([
          e10,
          t10.activeItem
        ]).then(([e11, t11]) => {
          s10 = t11, o10.busy = false, o10.items = e11, o10.canSelectMany && (o10.selectedItems = e11.filter((e12) => e12.type !== `separator` && e12.picked)), s10 && (o10.activeItems = [
            s10
          ]);
        }), o10.show(), Promise.resolve(e10).then(void 0, (e11) => {
          i10(e11), o10.hide();
        });
      });
    }
    createQuickPick(e10 = {
      useSeparators: false
    }) {
      let t10 = this.getUI(true);
      return new fU(t10);
    }
    createInputBox() {
      let e10 = this.getUI(true);
      return new pU(e10);
    }
    show(e10) {
      let t10 = this.getUI(true);
      this.onShowEmitter.fire();
      let n10 = this.controller;
      this.controller = e10, n10 == null ? void 0 : n10.didHide(), this.setEnabled(true), t10.leftActionBar.clear(), t10.title.textContent = ``, t10.description1.textContent = ``, t10.description2.textContent = ``, af(t10.widget), t10.rightActionBar.clear(), t10.inlineActionBar.clear(), t10.checkAll.checked = false, t10.inputBox.placeholder = ``, t10.inputBox.password = false, t10.inputBox.showDecoration(sx.Ignore), t10.visibleCount.setCount(0), t10.count.setCount(0), af(t10.message), t10.progressBar.stop(), t10.list.setElements([]), t10.list.matchOnDescription = false, t10.list.matchOnDetail = false, t10.list.matchOnLabel = true, t10.list.sortByLabel = true, t10.ignoreFocusOut = false, t10.inputBox.toggles = void 0;
      let r10 = this.options.backKeybindingLabel();
      uU.tooltip = r10 ? T(`quickInput.backWithKeybinding`, `Back ({0})`, r10) : T(`quickInput.back`, `Back`), t10.container.style.display = ``, this.updateLayout(), t10.inputBox.setFocus(), this.quickInputTypeContext.set(e10.type);
    }
    isVisible() {
      return !!this.ui && this.ui.container.style.display !== `none`;
    }
    setVisibilities(e10) {
      let t10 = this.getUI();
      t10.title.style.display = e10.title ? `` : `none`, t10.description1.style.display = e10.description && (e10.inputBox || e10.checkAll) ? `` : `none`, t10.description2.style.display = e10.description && !(e10.inputBox || e10.checkAll) ? `` : `none`, t10.checkAll.style.display = e10.checkAll ? `` : `none`, t10.inputContainer.style.display = e10.inputBox ? `` : `none`, t10.filterContainer.style.display = e10.inputBox ? `` : `none`, t10.visibleCountContainer.style.display = e10.visibleCount ? `` : `none`, t10.countContainer.style.display = e10.count ? `` : `none`, t10.okContainer.style.display = e10.ok ? `` : `none`, t10.customButtonContainer.style.display = e10.customButton ? `` : `none`, t10.message.style.display = e10.message ? `` : `none`, t10.progressBar.getContainer().style.display = e10.progressBar ? `` : `none`, t10.list.displayed = !!e10.list, t10.container.classList.toggle(`show-checkboxes`, !!e10.checkBox), t10.container.classList.toggle(`hidden-input`, !e10.inputBox && !e10.description), this.updateLayout();
    }
    setEnabled(e10) {
      if (e10 !== this.enabled) {
        this.enabled = e10;
        for (let t10 of this.getUI().leftActionBar.viewItems) t10.action.enabled = e10;
        for (let t10 of this.getUI().rightActionBar.viewItems) t10.action.enabled = e10;
        this.getUI().checkAll.disabled = !e10, this.getUI().inputBox.enabled = e10, this.getUI().ok.enabled = e10, this.getUI().list.enabled = e10;
      }
    }
    hide(e10) {
      var _a3;
      let t10 = this.controller;
      if (!t10) return;
      t10.willHide(e10);
      let n10 = (_a3 = this.ui) == null ? void 0 : _a3.container, r10 = n10 && !Ad(n10);
      if (this.controller = null, this.onHideEmitter.fire(), n10 && (n10.style.display = `none`), !r10) {
        let e11 = this.previousFocusElement;
        for (; e11 && !e11.offsetParent; ) e11 = e11.parentElement ?? void 0;
        (e11 == null ? void 0 : e11.offsetParent) ? (e11.focus(), this.previousFocusElement = void 0) : this.options.returnFocus();
      }
      t10.didHide(e10);
    }
    layout(e10, t10) {
      this.dimension = e10, this.titleBarOffset = t10, this.updateLayout();
    }
    updateLayout() {
      if (this.ui && this.isVisible()) {
        this.ui.container.style.top = `${this.titleBarOffset}px`;
        let e10 = this.ui.container.style, t10 = Math.min(this.dimension.width * 0.62, Tq.MAX_WIDTH);
        e10.width = t10 + `px`, e10.marginLeft = `-` + t10 / 2 + `px`, this.ui.inputBox.layout(), this.ui.list.layout(this.dimension && this.dimension.height * 0.4);
      }
    }
    applyStyles(e10) {
      this.styles = e10, this.updateStyles();
    }
    updateStyles() {
      if (this.ui) {
        let { quickInputTitleBackground: e10, quickInputBackground: t10, quickInputForeground: n10, widgetBorder: r10, widgetShadow: i10 } = this.styles.widget;
        this.ui.titleBar.style.backgroundColor = e10 ?? ``, this.ui.container.style.backgroundColor = t10 ?? ``, this.ui.container.style.color = n10 ?? ``, this.ui.container.style.border = r10 ? `1px solid ${r10}` : ``, this.ui.container.style.boxShadow = i10 ? `0 0 8px 2px ${i10}` : ``, this.ui.list.style(this.styles.list);
        let a10 = [];
        this.styles.pickerGroup.pickerGroupBorder && a10.push(`.quick-input-list .quick-input-list-entry { border-top-color:  ${this.styles.pickerGroup.pickerGroupBorder}; }`), this.styles.pickerGroup.pickerGroupForeground && a10.push(`.quick-input-list .quick-input-list-separator { color:  ${this.styles.pickerGroup.pickerGroupForeground}; }`), this.styles.pickerGroup.pickerGroupForeground && a10.push(`.quick-input-list .quick-input-list-separator-as-item { color: var(--vscode-descriptionForeground); }`), (this.styles.keybindingLabel.keybindingLabelBackground || this.styles.keybindingLabel.keybindingLabelBorder || this.styles.keybindingLabel.keybindingLabelBottomBorder || this.styles.keybindingLabel.keybindingLabelShadow || this.styles.keybindingLabel.keybindingLabelForeground) && (a10.push(`.quick-input-list .monaco-keybinding > .monaco-keybinding-key {`), this.styles.keybindingLabel.keybindingLabelBackground && a10.push(`background-color: ${this.styles.keybindingLabel.keybindingLabelBackground};`), this.styles.keybindingLabel.keybindingLabelBorder && a10.push(`border-color: ${this.styles.keybindingLabel.keybindingLabelBorder};`), this.styles.keybindingLabel.keybindingLabelBottomBorder && a10.push(`border-bottom-color: ${this.styles.keybindingLabel.keybindingLabelBottomBorder};`), this.styles.keybindingLabel.keybindingLabelShadow && a10.push(`box-shadow: inset 0 -1px 0 ${this.styles.keybindingLabel.keybindingLabelShadow};`), this.styles.keybindingLabel.keybindingLabelForeground && a10.push(`color: ${this.styles.keybindingLabel.keybindingLabelForeground};`), a10.push(`}`));
        let o10 = a10.join(`
`);
        o10 !== this.ui.styleSheet.textContent && (this.ui.styleSheet.textContent = o10);
      }
    }
  }, Tq = _ya, _ya.MAX_WIDTH = 600, _ya);
  Dq = Tq = Cq([
    wq(1, tx),
    wq(2, Jf),
    wq(3, qp)
  ], Dq);
  var Oq = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, kq = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let Aq = class extends Jb {
    get controller() {
      return this._controller || (this._controller = this._register(this.createController())), this._controller;
    }
    get hasController() {
      return !!this._controller;
    }
    get currentQuickInput() {
      return this.controller.currentQuickInput;
    }
    get quickAccess() {
      return this._quickAccess || (this._quickAccess = this._register(this.instantiationService.createInstance(UH))), this._quickAccess;
    }
    constructor(e10, t10, n10, r10, i10) {
      super(n10), this.instantiationService = e10, this.contextKeyService = t10, this.layoutService = r10, this.configurationService = i10, this._onShow = this._register(new N()), this._onHide = this._register(new N()), this.contexts = /* @__PURE__ */ new Map();
    }
    createController(e10 = this.layoutService, t10) {
      let n10 = {
        idPrefix: `quickInput_`,
        container: e10.activeContainer,
        ignoreFocusOut: () => false,
        backKeybindingLabel: () => void 0,
        setContextKey: (e11) => this.setContextKey(e11),
        linkOpenerDelegate: (e11) => {
          this.instantiationService.invokeFunction((t11) => {
            let n11 = t11.get(vD);
            n11.open(e11, {
              allowCommands: true,
              fromUserGesture: true
            });
          });
        },
        returnFocus: () => e10.focus(),
        styles: this.computeStyles(),
        hoverDelegate: this._register(this.instantiationService.createInstance(mU))
      }, r10 = this._register(this.instantiationService.createInstance(Dq, {
        ...n10,
        ...t10
      }));
      return r10.layout(e10.activeContainerDimension, e10.activeContainerOffset.quickPickTop), this._register(e10.onDidLayoutActiveContainer((t11) => {
        R(e10.activeContainer) === R(r10.container) && r10.layout(t11, e10.activeContainerOffset.quickPickTop);
      })), this._register(e10.onDidChangeActiveContainer(() => {
        r10.isVisible() || r10.layout(e10.activeContainerDimension, e10.activeContainerOffset.quickPickTop);
      })), this._register(r10.onShow(() => {
        this.resetContextKeys(), this._onShow.fire();
      })), this._register(r10.onHide(() => {
        this.resetContextKeys(), this._onHide.fire();
      })), r10;
    }
    setContextKey(e10) {
      let t10;
      e10 && (t10 = this.contexts.get(e10), t10 || (t10 = new U(e10, false).bindTo(this.contextKeyService), this.contexts.set(e10, t10))), !(t10 && t10.get()) && (this.resetContextKeys(), t10 == null ? void 0 : t10.set(true));
    }
    resetContextKeys() {
      this.contexts.forEach((e10) => {
        e10.get() && e10.reset();
      });
    }
    pick(e10, t10, n10 = mi.None) {
      return this.controller.pick(e10, t10, n10);
    }
    createQuickPick(e10 = {
      useSeparators: false
    }) {
      return this.controller.createQuickPick(e10);
    }
    createInputBox() {
      return this.controller.createInputBox();
    }
    updateStyles() {
      this.hasController && this.controller.applyStyles(this.computeStyles());
    }
    computeStyles() {
      return {
        widget: {
          quickInputBackground: q(_E),
          quickInputForeground: q(vE),
          quickInputTitleBackground: q(yE),
          widgetBorder: q(xw),
          widgetShadow: q(bw)
        },
        inputBox: pI,
        toggle: dI,
        countBadge: hI,
        button: lI,
        progressBar: uI,
        keybindingLabel: cI,
        list: _I({
          listBackground: _E,
          listFocusBackground: TE,
          listFocusForeground: CE,
          listInactiveFocusForeground: CE,
          listInactiveSelectionIconForeground: wE,
          listInactiveFocusBackground: TE,
          listFocusOutline: vC,
          listInactiveFocusOutline: vC
        }),
        pickerGroup: {
          pickerGroupBorder: q(xE),
          pickerGroupForeground: q(bE)
        }
      };
    }
  };
  Aq = Oq([
    kq(0, Jf),
    kq(1, qp),
    kq(2, Vb),
    kq(3, tx),
    kq(4, ug)
  ], Aq);
  var jq = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, Mq = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let Nq = class extends Aq {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(t10, n10, r10, new ax(e10.getContainerDomNode(), i10), a10), this.host = void 0;
      let o10 = Fq.get(e10);
      if (o10) {
        let t11 = o10.widget;
        this.host = {
          _serviceBrand: void 0,
          get mainContainer() {
            return t11.getDomNode();
          },
          getContainer() {
            return t11.getDomNode();
          },
          whenContainerStylesLoaded() {
          },
          get containers() {
            return [
              t11.getDomNode()
            ];
          },
          get activeContainer() {
            return t11.getDomNode();
          },
          get mainContainerDimension() {
            return e10.getLayoutInfo();
          },
          get activeContainerDimension() {
            return e10.getLayoutInfo();
          },
          get onDidLayoutMainContainer() {
            return e10.onDidLayoutChange;
          },
          get onDidLayoutActiveContainer() {
            return e10.onDidLayoutChange;
          },
          get onDidLayoutContainer() {
            return M.map(e10.onDidLayoutChange, (e11) => ({
              container: t11.getDomNode(),
              dimension: e11
            }));
          },
          get onDidChangeActiveContainer() {
            return M.None;
          },
          get onDidAddContainer() {
            return M.None;
          },
          get mainContainerOffset() {
            return {
              top: 0,
              quickPickTop: 0
            };
          },
          get activeContainerOffset() {
            return {
              top: 0,
              quickPickTop: 0
            };
          },
          focus: () => e10.focus()
        };
      } else this.host = void 0;
    }
    createController() {
      return super.createController(this.host);
    }
  };
  Nq = jq([
    Mq(1, Jf),
    Mq(2, qp),
    Mq(3, Vb),
    Mq(4, Zf),
    Mq(5, ug)
  ], Nq);
  let Pq = class {
    get activeService() {
      let e10 = this.codeEditorService.getFocusedCodeEditor();
      if (!e10) throw Error(`Quick input service needs a focused editor to work.`);
      let t10 = this.mapEditorToService.get(e10);
      if (!t10) {
        let n10 = t10 = this.instantiationService.createInstance(Nq, e10);
        this.mapEditorToService.set(e10, t10), Or(e10.onDidDispose)(() => {
          n10.dispose(), this.mapEditorToService.delete(e10);
        });
      }
      return t10;
    }
    get currentQuickInput() {
      return this.activeService.currentQuickInput;
    }
    get quickAccess() {
      return this.activeService.quickAccess;
    }
    constructor(e10, t10) {
      this.instantiationService = e10, this.codeEditorService = t10, this.mapEditorToService = /* @__PURE__ */ new Map();
    }
    pick(e10, t10, n10 = mi.None) {
      return this.activeService.pick(e10, t10, n10);
    }
    createQuickPick(e10 = {
      useSeparators: false
    }) {
      return this.activeService.createQuickPick(e10);
    }
    createInputBox() {
      return this.activeService.createInputBox();
    }
  };
  Pq = jq([
    Mq(0, Jf),
    Mq(1, Zf)
  ], Pq);
  var Fq = (_za = class {
    static get(t10) {
      return t10.getContribution(_za.ID);
    }
    constructor(e10) {
      this.editor = e10, this.widget = new Iq(this.editor);
    }
    dispose() {
      this.widget.dispose();
    }
  }, _za.ID = `editor.controller.quickInput`, _za), Iq = (_Aa = class {
    constructor(e10) {
      this.codeEditor = e10, this.domNode = document.createElement(`div`), this.codeEditor.addOverlayWidget(this);
    }
    getId() {
      return _Aa.ID;
    }
    getDomNode() {
      return this.domNode;
    }
    getPosition() {
      return {
        preference: 2
      };
    }
    dispose() {
      this.codeEditor.removeOverlayWidget(this);
    }
  }, _Aa.ID = `editor.contrib.quickInputWidget`, _Aa);
  Hm(Fq.ID, Fq, 4);
  var Lq = class {
    constructor(e10, t10, n10, r10, i10) {
      this._parsedThemeRuleBrand = void 0, this.token = e10, this.index = t10, this.fontStyle = n10, this.foreground = r10, this.background = i10;
    }
  };
  function Rq(e10) {
    if (!e10 || !Array.isArray(e10)) return [];
    let t10 = [], n10 = 0;
    for (let r10 = 0, i10 = e10.length; r10 < i10; r10++) {
      let i11 = e10[r10], a10 = -1;
      if (typeof i11.fontStyle == `string`) {
        a10 = 0;
        let e11 = i11.fontStyle.split(` `);
        for (let t11 = 0, n11 = e11.length; t11 < n11; t11++) {
          let n12 = e11[t11];
          switch (n12) {
            case `italic`:
              a10 |= 1;
              break;
            case `bold`:
              a10 |= 2;
              break;
            case `underline`:
              a10 |= 4;
              break;
            case `strikethrough`:
              a10 |= 8;
              break;
          }
        }
      }
      let o10 = null;
      typeof i11.foreground == `string` && (o10 = i11.foreground);
      let s10 = null;
      typeof i11.background == `string` && (s10 = i11.background), t10[n10++] = new Lq(i11.token || ``, r10, a10, o10, s10);
    }
    return t10;
  }
  function zq(e10, t10) {
    e10.sort((e11, t11) => {
      let n11 = Gq(e11.token, t11.token);
      return n11 === 0 ? e11.index - t11.index : n11;
    });
    let n10 = 0, r10 = `000000`, i10 = `ffffff`;
    for (; e10.length >= 1 && e10[0].token === ``; ) {
      let t11 = e10.shift();
      t11.fontStyle !== -1 && (n10 = t11.fontStyle), t11.foreground !== null && (r10 = t11.foreground), t11.background !== null && (i10 = t11.background);
    }
    let a10 = new Vq();
    for (let e11 of t10) a10.getId(e11);
    let o10 = a10.getId(r10), s10 = a10.getId(i10), c10 = new Kq(n10, o10, s10), l10 = new qq(c10);
    for (let t11 = 0, n11 = e10.length; t11 < n11; t11++) {
      let n12 = e10[t11];
      l10.insert(n12.token, n12.fontStyle, a10.getId(n12.foreground), a10.getId(n12.background));
    }
    return new Hq(a10, l10);
  }
  const Bq = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;
  var Vq = class {
    constructor() {
      this._lastColorId = 0, this._id2color = [], this._color2id = /* @__PURE__ */ new Map();
    }
    getId(e10) {
      if (e10 === null) return 0;
      let t10 = e10.match(Bq);
      if (!t10) throw Error(`Illegal value for token color: ` + e10);
      e10 = t10[1].toUpperCase();
      let n10 = this._color2id.get(e10);
      return n10 || (n10 = ++this._lastColorId, this._color2id.set(e10, n10), this._id2color[n10] = K.fromHex(`#` + e10), n10);
    }
    getColorMap() {
      return this._id2color.slice(0);
    }
  }, Hq = class {
    static createFromRawTokenTheme(e10, t10) {
      return this.createFromParsedTokenTheme(Rq(e10), t10);
    }
    static createFromParsedTokenTheme(e10, t10) {
      return zq(e10, t10);
    }
    constructor(e10, t10) {
      this._colorMap = e10, this._root = t10, this._cache = /* @__PURE__ */ new Map();
    }
    getColorMap() {
      return this._colorMap.getColorMap();
    }
    _match(e10) {
      return this._root.match(e10);
    }
    match(e10, t10) {
      let n10 = this._cache.get(t10);
      if (n10 === void 0) {
        let e11 = this._match(t10), r10 = Wq(t10);
        n10 = (e11.metadata | r10 << 8) >>> 0, this._cache.set(t10, n10);
      }
      return (n10 | e10 << 0) >>> 0;
    }
  };
  const Uq = /\b(comment|string|regex|regexp)\b/;
  function Wq(e10) {
    let t10 = e10.match(Uq);
    if (!t10) return 0;
    switch (t10[1]) {
      case `comment`:
        return 1;
      case `string`:
        return 2;
      case `regex`:
        return 3;
      case `regexp`:
        return 3;
    }
    throw Error(`Unexpected match for standard token type!`);
  }
  function Gq(e10, t10) {
    return e10 < t10 ? -1 : e10 > t10 ? 1 : 0;
  }
  var Kq = class e10 {
    constructor(e11, t10, n10) {
      this._themeTrieElementRuleBrand = void 0, this._fontStyle = e11, this._foreground = t10, this._background = n10, this.metadata = (this._fontStyle << 11 | this._foreground << 15 | this._background << 24) >>> 0;
    }
    clone() {
      return new e10(this._fontStyle, this._foreground, this._background);
    }
    acceptOverwrite(e11, t10, n10) {
      e11 !== -1 && (this._fontStyle = e11), t10 !== 0 && (this._foreground = t10), n10 !== 0 && (this._background = n10), this.metadata = (this._fontStyle << 11 | this._foreground << 15 | this._background << 24) >>> 0;
    }
  }, qq = class e10 {
    constructor(e11) {
      this._themeTrieElementBrand = void 0, this._mainRule = e11, this._children = /* @__PURE__ */ new Map();
    }
    match(e11) {
      if (e11 === ``) return this._mainRule;
      let t10 = e11.indexOf(`.`), n10, r10;
      t10 === -1 ? (n10 = e11, r10 = ``) : (n10 = e11.substring(0, t10), r10 = e11.substring(t10 + 1));
      let i10 = this._children.get(n10);
      return i10 === void 0 ? this._mainRule : i10.match(r10);
    }
    insert(t10, n10, r10, i10) {
      if (t10 === ``) {
        this._mainRule.acceptOverwrite(n10, r10, i10);
        return;
      }
      let a10 = t10.indexOf(`.`), o10, s10;
      a10 === -1 ? (o10 = t10, s10 = ``) : (o10 = t10.substring(0, a10), s10 = t10.substring(a10 + 1));
      let c10 = this._children.get(o10);
      c10 === void 0 && (c10 = new e10(this._mainRule.clone()), this._children.set(o10, c10)), c10.insert(s10, n10, r10, i10);
    }
  };
  function Jq(e10) {
    let t10 = [];
    for (let n10 = 1, r10 = e10.length; n10 < r10; n10++) {
      let r11 = e10[n10];
      t10[n10] = `.mtk${n10} { color: ${r11}; }`;
    }
    return t10.push(`.mtki { font-style: italic; }`), t10.push(`.mtkb { font-weight: bold; }`), t10.push(`.mtku { text-decoration: underline; text-underline-position: under; }`), t10.push(`.mtks { text-decoration: line-through; }`), t10.push(`.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }`), t10.join(`
`);
  }
  const Yq = {
    base: `vs`,
    inherit: false,
    rules: [
      {
        token: ``,
        foreground: `000000`,
        background: `fffffe`
      },
      {
        token: `invalid`,
        foreground: `cd3131`
      },
      {
        token: `emphasis`,
        fontStyle: `italic`
      },
      {
        token: `strong`,
        fontStyle: `bold`
      },
      {
        token: `variable`,
        foreground: `001188`
      },
      {
        token: `variable.predefined`,
        foreground: `4864AA`
      },
      {
        token: `constant`,
        foreground: `dd0000`
      },
      {
        token: `comment`,
        foreground: `008000`
      },
      {
        token: `number`,
        foreground: `098658`
      },
      {
        token: `number.hex`,
        foreground: `3030c0`
      },
      {
        token: `regexp`,
        foreground: `800000`
      },
      {
        token: `annotation`,
        foreground: `808080`
      },
      {
        token: `type`,
        foreground: `008080`
      },
      {
        token: `delimiter`,
        foreground: `000000`
      },
      {
        token: `delimiter.html`,
        foreground: `383838`
      },
      {
        token: `delimiter.xml`,
        foreground: `0000FF`
      },
      {
        token: `tag`,
        foreground: `800000`
      },
      {
        token: `tag.id.pug`,
        foreground: `4F76AC`
      },
      {
        token: `tag.class.pug`,
        foreground: `4F76AC`
      },
      {
        token: `meta.scss`,
        foreground: `800000`
      },
      {
        token: `metatag`,
        foreground: `e00000`
      },
      {
        token: `metatag.content.html`,
        foreground: `FF0000`
      },
      {
        token: `metatag.html`,
        foreground: `808080`
      },
      {
        token: `metatag.xml`,
        foreground: `808080`
      },
      {
        token: `metatag.php`,
        fontStyle: `bold`
      },
      {
        token: `key`,
        foreground: `863B00`
      },
      {
        token: `string.key.json`,
        foreground: `A31515`
      },
      {
        token: `string.value.json`,
        foreground: `0451A5`
      },
      {
        token: `attribute.name`,
        foreground: `FF0000`
      },
      {
        token: `attribute.value`,
        foreground: `0451A5`
      },
      {
        token: `attribute.value.number`,
        foreground: `098658`
      },
      {
        token: `attribute.value.unit`,
        foreground: `098658`
      },
      {
        token: `attribute.value.html`,
        foreground: `0000FF`
      },
      {
        token: `attribute.value.xml`,
        foreground: `0000FF`
      },
      {
        token: `string`,
        foreground: `A31515`
      },
      {
        token: `string.html`,
        foreground: `0000FF`
      },
      {
        token: `string.sql`,
        foreground: `FF0000`
      },
      {
        token: `string.yaml`,
        foreground: `0451A5`
      },
      {
        token: `keyword`,
        foreground: `0000FF`
      },
      {
        token: `keyword.json`,
        foreground: `0451A5`
      },
      {
        token: `keyword.flow`,
        foreground: `AF00DB`
      },
      {
        token: `keyword.flow.scss`,
        foreground: `0000FF`
      },
      {
        token: `operator.scss`,
        foreground: `666666`
      },
      {
        token: `operator.sql`,
        foreground: `778899`
      },
      {
        token: `operator.swift`,
        foreground: `666666`
      },
      {
        token: `predefined.sql`,
        foreground: `C700C7`
      }
    ],
    colors: {
      [DC]: `#FFFFFE`,
      [OC]: `#000000`,
      [UC]: `#E5EBF1`,
      [gL]: `#D3D3D3`,
      [SL]: `#939393`,
      [WC]: `#ADD6FF4D`
    }
  }, Xq = {
    base: `vs-dark`,
    inherit: false,
    rules: [
      {
        token: ``,
        foreground: `D4D4D4`,
        background: `1E1E1E`
      },
      {
        token: `invalid`,
        foreground: `f44747`
      },
      {
        token: `emphasis`,
        fontStyle: `italic`
      },
      {
        token: `strong`,
        fontStyle: `bold`
      },
      {
        token: `variable`,
        foreground: `74B0DF`
      },
      {
        token: `variable.predefined`,
        foreground: `4864AA`
      },
      {
        token: `variable.parameter`,
        foreground: `9CDCFE`
      },
      {
        token: `constant`,
        foreground: `569CD6`
      },
      {
        token: `comment`,
        foreground: `608B4E`
      },
      {
        token: `number`,
        foreground: `B5CEA8`
      },
      {
        token: `number.hex`,
        foreground: `5BB498`
      },
      {
        token: `regexp`,
        foreground: `B46695`
      },
      {
        token: `annotation`,
        foreground: `cc6666`
      },
      {
        token: `type`,
        foreground: `3DC9B0`
      },
      {
        token: `delimiter`,
        foreground: `DCDCDC`
      },
      {
        token: `delimiter.html`,
        foreground: `808080`
      },
      {
        token: `delimiter.xml`,
        foreground: `808080`
      },
      {
        token: `tag`,
        foreground: `569CD6`
      },
      {
        token: `tag.id.pug`,
        foreground: `4F76AC`
      },
      {
        token: `tag.class.pug`,
        foreground: `4F76AC`
      },
      {
        token: `meta.scss`,
        foreground: `A79873`
      },
      {
        token: `meta.tag`,
        foreground: `CE9178`
      },
      {
        token: `metatag`,
        foreground: `DD6A6F`
      },
      {
        token: `metatag.content.html`,
        foreground: `9CDCFE`
      },
      {
        token: `metatag.html`,
        foreground: `569CD6`
      },
      {
        token: `metatag.xml`,
        foreground: `569CD6`
      },
      {
        token: `metatag.php`,
        fontStyle: `bold`
      },
      {
        token: `key`,
        foreground: `9CDCFE`
      },
      {
        token: `string.key.json`,
        foreground: `9CDCFE`
      },
      {
        token: `string.value.json`,
        foreground: `CE9178`
      },
      {
        token: `attribute.name`,
        foreground: `9CDCFE`
      },
      {
        token: `attribute.value`,
        foreground: `CE9178`
      },
      {
        token: `attribute.value.number.css`,
        foreground: `B5CEA8`
      },
      {
        token: `attribute.value.unit.css`,
        foreground: `B5CEA8`
      },
      {
        token: `attribute.value.hex.css`,
        foreground: `D4D4D4`
      },
      {
        token: `string`,
        foreground: `CE9178`
      },
      {
        token: `string.sql`,
        foreground: `FF0000`
      },
      {
        token: `keyword`,
        foreground: `569CD6`
      },
      {
        token: `keyword.flow`,
        foreground: `C586C0`
      },
      {
        token: `keyword.json`,
        foreground: `CE9178`
      },
      {
        token: `keyword.flow.scss`,
        foreground: `569CD6`
      },
      {
        token: `operator.scss`,
        foreground: `909090`
      },
      {
        token: `operator.sql`,
        foreground: `778899`
      },
      {
        token: `operator.swift`,
        foreground: `909090`
      },
      {
        token: `predefined.sql`,
        foreground: `FF00FF`
      }
    ],
    colors: {
      [DC]: `#1E1E1E`,
      [OC]: `#D4D4D4`,
      [UC]: `#3A3D41`,
      [gL]: `#404040`,
      [SL]: `#707070`,
      [WC]: `#ADD6FF26`
    }
  }, Zq = {
    base: `hc-black`,
    inherit: false,
    rules: [
      {
        token: ``,
        foreground: `FFFFFF`,
        background: `000000`
      },
      {
        token: `invalid`,
        foreground: `f44747`
      },
      {
        token: `emphasis`,
        fontStyle: `italic`
      },
      {
        token: `strong`,
        fontStyle: `bold`
      },
      {
        token: `variable`,
        foreground: `1AEBFF`
      },
      {
        token: `variable.parameter`,
        foreground: `9CDCFE`
      },
      {
        token: `constant`,
        foreground: `569CD6`
      },
      {
        token: `comment`,
        foreground: `608B4E`
      },
      {
        token: `number`,
        foreground: `FFFFFF`
      },
      {
        token: `regexp`,
        foreground: `C0C0C0`
      },
      {
        token: `annotation`,
        foreground: `569CD6`
      },
      {
        token: `type`,
        foreground: `3DC9B0`
      },
      {
        token: `delimiter`,
        foreground: `FFFF00`
      },
      {
        token: `delimiter.html`,
        foreground: `FFFF00`
      },
      {
        token: `tag`,
        foreground: `569CD6`
      },
      {
        token: `tag.id.pug`,
        foreground: `4F76AC`
      },
      {
        token: `tag.class.pug`,
        foreground: `4F76AC`
      },
      {
        token: `meta`,
        foreground: `D4D4D4`
      },
      {
        token: `meta.tag`,
        foreground: `CE9178`
      },
      {
        token: `metatag`,
        foreground: `569CD6`
      },
      {
        token: `metatag.content.html`,
        foreground: `1AEBFF`
      },
      {
        token: `metatag.html`,
        foreground: `569CD6`
      },
      {
        token: `metatag.xml`,
        foreground: `569CD6`
      },
      {
        token: `metatag.php`,
        fontStyle: `bold`
      },
      {
        token: `key`,
        foreground: `9CDCFE`
      },
      {
        token: `string.key`,
        foreground: `9CDCFE`
      },
      {
        token: `string.value`,
        foreground: `CE9178`
      },
      {
        token: `attribute.name`,
        foreground: `569CD6`
      },
      {
        token: `attribute.value`,
        foreground: `3FF23F`
      },
      {
        token: `string`,
        foreground: `CE9178`
      },
      {
        token: `string.sql`,
        foreground: `FF0000`
      },
      {
        token: `keyword`,
        foreground: `569CD6`
      },
      {
        token: `keyword.flow`,
        foreground: `C586C0`
      },
      {
        token: `operator.sql`,
        foreground: `778899`
      },
      {
        token: `operator.swift`,
        foreground: `909090`
      },
      {
        token: `predefined.sql`,
        foreground: `FF00FF`
      }
    ],
    colors: {
      [DC]: `#000000`,
      [OC]: `#FFFFFF`,
      [gL]: `#FFFFFF`,
      [SL]: `#FFFFFF`
    }
  }, Qq = {
    base: `hc-light`,
    inherit: false,
    rules: [
      {
        token: ``,
        foreground: `292929`,
        background: `FFFFFF`
      },
      {
        token: `invalid`,
        foreground: `B5200D`
      },
      {
        token: `emphasis`,
        fontStyle: `italic`
      },
      {
        token: `strong`,
        fontStyle: `bold`
      },
      {
        token: `variable`,
        foreground: `264F70`
      },
      {
        token: `variable.predefined`,
        foreground: `4864AA`
      },
      {
        token: `constant`,
        foreground: `dd0000`
      },
      {
        token: `comment`,
        foreground: `008000`
      },
      {
        token: `number`,
        foreground: `098658`
      },
      {
        token: `number.hex`,
        foreground: `3030c0`
      },
      {
        token: `regexp`,
        foreground: `800000`
      },
      {
        token: `annotation`,
        foreground: `808080`
      },
      {
        token: `type`,
        foreground: `008080`
      },
      {
        token: `delimiter`,
        foreground: `000000`
      },
      {
        token: `delimiter.html`,
        foreground: `383838`
      },
      {
        token: `tag`,
        foreground: `800000`
      },
      {
        token: `tag.id.pug`,
        foreground: `4F76AC`
      },
      {
        token: `tag.class.pug`,
        foreground: `4F76AC`
      },
      {
        token: `meta.scss`,
        foreground: `800000`
      },
      {
        token: `metatag`,
        foreground: `e00000`
      },
      {
        token: `metatag.content.html`,
        foreground: `B5200D`
      },
      {
        token: `metatag.html`,
        foreground: `808080`
      },
      {
        token: `metatag.xml`,
        foreground: `808080`
      },
      {
        token: `metatag.php`,
        fontStyle: `bold`
      },
      {
        token: `key`,
        foreground: `863B00`
      },
      {
        token: `string.key.json`,
        foreground: `A31515`
      },
      {
        token: `string.value.json`,
        foreground: `0451A5`
      },
      {
        token: `attribute.name`,
        foreground: `264F78`
      },
      {
        token: `attribute.value`,
        foreground: `0451A5`
      },
      {
        token: `string`,
        foreground: `A31515`
      },
      {
        token: `string.sql`,
        foreground: `B5200D`
      },
      {
        token: `keyword`,
        foreground: `0000FF`
      },
      {
        token: `keyword.flow`,
        foreground: `AF00DB`
      },
      {
        token: `operator.sql`,
        foreground: `778899`
      },
      {
        token: `operator.swift`,
        foreground: `666666`
      },
      {
        token: `predefined.sql`,
        foreground: `C700C7`
      }
    ],
    colors: {
      [DC]: `#FFFFFF`,
      [OC]: `#292929`,
      [gL]: `#292929`,
      [SL]: `#292929`
    }
  }, $q = {
    IconContribution: `base.contributions.icons`
  };
  var eJ;
  (function(e10) {
    function t10(e11, t11) {
      let n10 = e11.defaults;
      for (; sp.isThemeIcon(n10); ) {
        let e12 = rJ.getIcon(n10.id);
        if (!e12) return;
        n10 = e12.defaults;
      }
      return n10;
    }
    e10.getDefinition = t10;
  })(eJ || (eJ = {}));
  var tJ;
  (function(e10) {
    function t10(e11) {
      return {
        weight: e11.weight,
        style: e11.style,
        src: e11.src.map((e12) => ({
          format: e12.format,
          location: e12.location.toString()
        }))
      };
    }
    e10.toJSONObject = t10;
    function n10(e11) {
      let t11 = (e12) => _e(e12) ? e12 : void 0;
      if (e11 && Array.isArray(e11.src) && e11.src.every((e12) => _e(e12.format) && _e(e12.location))) return {
        weight: t11(e11.weight),
        style: t11(e11.style),
        src: e11.src.map((e12) => ({
          format: e12.format,
          location: xa.parse(e12.location)
        }))
      };
    }
    e10.fromJSONObject = n10;
  })(tJ || (tJ = {}));
  var nJ = class {
    constructor() {
      this._onDidChange = new N(), this.onDidChange = this._onDidChange.event, this.iconSchema = {
        definitions: {
          icons: {
            type: `object`,
            properties: {
              fontId: {
                type: `string`,
                description: T(`iconDefinition.fontId`, `The id of the font to use. If not set, the font that is defined first is used.`)
              },
              fontCharacter: {
                type: `string`,
                description: T(`iconDefinition.fontCharacter`, `The font character associated with the icon definition.`)
              }
            },
            additionalProperties: false,
            defaultSnippets: [
              {
                body: {
                  fontCharacter: `\\\\e030`
                }
              }
            ]
          }
        },
        type: `object`,
        properties: {}
      }, this.iconReferenceSchema = {
        type: `string`,
        pattern: `^${sp.iconNameExpression}$`,
        enum: [],
        enumDescriptions: []
      }, this.iconsById = {}, this.iconFontsById = {};
    }
    registerIcon(e10, t10, n10, r10) {
      let i10 = this.iconsById[e10];
      if (i10) {
        if (n10 && !i10.description) {
          i10.description = n10, this.iconSchema.properties[e10].markdownDescription = `${n10} $(${e10})`;
          let t11 = this.iconReferenceSchema.enum.indexOf(e10);
          t11 !== -1 && (this.iconReferenceSchema.enumDescriptions[t11] = n10), this._onDidChange.fire();
        }
        return i10;
      }
      let a10 = {
        id: e10,
        description: n10,
        defaults: t10,
        deprecationMessage: r10
      };
      this.iconsById[e10] = a10;
      let o10 = {
        $ref: `#/definitions/icons`
      };
      return r10 && (o10.deprecationMessage = r10), n10 && (o10.markdownDescription = `${n10}: $(${e10})`), this.iconSchema.properties[e10] = o10, this.iconReferenceSchema.enum.push(e10), this.iconReferenceSchema.enumDescriptions.push(n10 || ``), this._onDidChange.fire(), {
        id: e10
      };
    }
    getIcons() {
      return Object.keys(this.iconsById).map((e10) => this.iconsById[e10]);
    }
    getIcon(e10) {
      return this.iconsById[e10];
    }
    getIconSchema() {
      return this.iconSchema;
    }
    toString() {
      let e10 = (e11, t11) => e11.id.localeCompare(t11.id), t10 = (e11) => {
        for (; sp.isThemeIcon(e11.defaults); ) e11 = this.iconsById[e11.defaults.id];
        return `codicon codicon-${e11 ? e11.id : ``}`;
      }, n10 = [];
      n10.push(`| preview     | identifier                        | default codicon ID                | description`), n10.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);
      let r10 = Object.keys(this.iconsById).map((e11) => this.iconsById[e11]);
      for (let i10 of r10.filter((e11) => !!e11.description).sort(e10)) n10.push(`|<i class="${t10(i10)}"></i>|${i10.id}|${sp.isThemeIcon(i10.defaults) ? i10.defaults.id : i10.id}|${i10.description || ``}|`);
      n10.push(`| preview     | identifier                        `), n10.push(`| ----------- | --------------------------------- |`);
      for (let i10 of r10.filter((e11) => !sp.isThemeIcon(e11.defaults)).sort(e10)) n10.push(`|<i class="${t10(i10)}"></i>|${i10.id}|`);
      return n10.join(`
`);
    }
  };
  const rJ = new nJ();
  am.add($q.IconContribution, rJ);
  iJ = function(e10, t10, n10, r10) {
    return rJ.registerIcon(e10, t10, n10, r10);
  };
  function aJ() {
    return rJ;
  }
  function oJ() {
    let e10 = Pa();
    for (let t10 in e10) {
      let n10 = `\\` + e10[t10].toString(16);
      rJ.registerIcon(t10, {
        fontCharacter: n10
      });
    }
  }
  oJ();
  const sJ = `vscode://schemas/icons`, cJ = am.as(Cg.JSONContribution);
  cJ.registerSchema(sJ, rJ.getIconSchema());
  const lJ = new cl(() => cJ.notifySchemaChanged(sJ), 200);
  rJ.onDidChange(() => {
    lJ.isScheduled() || lJ.schedule();
  });
  let _ne, vne, yne, bne;
  uJ = iJ(`widget-close`, L.close, T(`widgetClose`, `Icon for the close action in widgets.`));
  _ne = iJ(`goto-previous-location`, L.arrowUp, T(`previousChangeIcon`, `Icon for goto previous editor location.`));
  vne = iJ(`goto-next-location`, L.arrowDown, T(`nextChangeIcon`, `Icon for goto next editor location.`));
  yne = sp.modify(L.sync, `spin`);
  bne = sp.modify(L.loading, `spin`);
  function dJ(e10) {
    let t10 = new A(), n10 = t10.add(new N()), r10 = aJ();
    return t10.add(r10.onDidChange(() => n10.fire())), e10 && t10.add(e10.onDidProductIconThemeChange(() => n10.fire())), {
      dispose: () => t10.dispose(),
      onDidChange: n10.event,
      getCSS() {
        let t11 = e10 ? e10.getProductIconTheme() : new fJ(), n11 = {}, i10 = [], a10 = [];
        for (let e11 of r10.getIcons()) {
          let r11 = t11.getIcon(e11);
          if (!r11) continue;
          let o10 = r11.font, s10 = `--vscode-icon-${e11.id}-font-family`, c10 = `--vscode-icon-${e11.id}-content`;
          o10 ? (n11[o10.id] = o10.definition, a10.push(`${s10}: ${_f(o10.id)};`, `${c10}: '${r11.fontCharacter}';`), i10.push(`.codicon-${e11.id}:before { content: '${r11.fontCharacter}'; font-family: ${_f(o10.id)}; }`)) : (a10.push(`${c10}: '${r11.fontCharacter}'; ${s10}: 'codicon';`), i10.push(`.codicon-${e11.id}:before { content: '${r11.fontCharacter}'; }`));
        }
        for (let e11 in n11) {
          let t12 = n11[e11], r11 = t12.weight ? `font-weight: ${t12.weight};` : ``, a11 = t12.style ? `font-style: ${t12.style};` : ``, o10 = t12.src.map((e12) => `${gf(e12.location)} format('${e12.format}')`).join(`, `);
          i10.push(`@font-face { src: ${o10}; font-family: ${_f(e11)};${r11}${a11} font-display: block; }`);
        }
        return i10.push(`:root { ${a10.join(` `)} }`), i10.join(`
`);
      }
    };
  }
  var fJ = class {
    getIcon(e10) {
      let t10 = aJ(), n10 = e10.defaults;
      for (; sp.isThemeIcon(n10); ) {
        let e11 = t10.getIcon(n10.id);
        if (!e11) return;
        n10 = e11.defaults;
      }
      return n10;
    }
  };
  let _J, vJ;
  pJ = `vs`;
  mJ = `vs-dark`;
  hJ = `hc-black`;
  gJ = `hc-light`;
  _J = am.as(XS.ColorContribution);
  vJ = am.as(Wb.ThemingContribution);
  var yJ = class {
    constructor(e10, t10) {
      this.semanticHighlighting = false, this.themeData = t10;
      let n10 = t10.base;
      e10.length > 0 ? (bJ(e10) ? this.id = e10 : this.id = n10 + ` ` + e10, this.themeName = e10) : (this.id = n10, this.themeName = n10), this.colors = null, this.defaultColors = /* @__PURE__ */ Object.create(null), this._tokenTheme = null;
    }
    get base() {
      return this.themeData.base;
    }
    notifyBaseUpdated() {
      this.themeData.inherit && (this.colors = null, this._tokenTheme = null);
    }
    getColors() {
      if (!this.colors) {
        let e10 = /* @__PURE__ */ new Map();
        for (let t10 in this.themeData.colors) e10.set(t10, K.fromHex(this.themeData.colors[t10]));
        if (this.themeData.inherit) {
          let t10 = xJ(this.themeData.base);
          for (let n10 in t10.colors) e10.has(n10) || e10.set(n10, K.fromHex(t10.colors[n10]));
        }
        this.colors = e10;
      }
      return this.colors;
    }
    getColor(e10, t10) {
      let n10 = this.getColors().get(e10);
      if (n10) return n10;
      if (t10 !== false) return this.getDefault(e10);
    }
    getDefault(e10) {
      let t10 = this.defaultColors[e10];
      return t10 || (t10 = _J.resolveDefaultColor(e10, this), this.defaultColors[e10] = t10, t10);
    }
    defines(e10) {
      return this.getColors().has(e10);
    }
    get type() {
      switch (this.base) {
        case pJ:
          return Rb.LIGHT;
        case hJ:
          return Rb.HIGH_CONTRAST_DARK;
        case gJ:
          return Rb.HIGH_CONTRAST_LIGHT;
        default:
          return Rb.DARK;
      }
    }
    get tokenTheme() {
      if (!this._tokenTheme) {
        let e10 = [], t10 = [];
        if (this.themeData.inherit) {
          let n11 = xJ(this.themeData.base);
          e10 = n11.rules, n11.encodedTokensColors && (t10 = n11.encodedTokensColors);
        }
        let n10 = this.themeData.colors[`editor.foreground`], r10 = this.themeData.colors[`editor.background`];
        if (n10 || r10) {
          let t11 = {
            token: ``
          };
          n10 && (t11.foreground = n10), r10 && (t11.background = r10), e10.push(t11);
        }
        e10 = e10.concat(this.themeData.rules), this.themeData.encodedTokensColors && (t10 = this.themeData.encodedTokensColors), this._tokenTheme = Hq.createFromRawTokenTheme(e10, t10);
      }
      return this._tokenTheme;
    }
    getTokenStyleMetadata(e10, t10, n10) {
      let r10 = this.tokenTheme._match([
        e10
      ].concat(t10).join(`.`)), i10 = r10.metadata, a10 = Vx.getForeground(i10), o10 = Vx.getFontStyle(i10);
      return {
        foreground: a10,
        italic: !!(o10 & 1),
        bold: !!(o10 & 2),
        underline: !!(o10 & 4),
        strikethrough: !!(o10 & 8)
      };
    }
  };
  function bJ(e10) {
    return e10 === pJ || e10 === mJ || e10 === hJ || e10 === gJ;
  }
  function xJ(e10) {
    switch (e10) {
      case pJ:
        return Yq;
      case mJ:
        return Xq;
      case hJ:
        return Zq;
      case gJ:
        return Qq;
    }
  }
  function SJ(e10) {
    let t10 = xJ(e10);
    return new yJ(e10, t10);
  }
  var CJ = class extends j {
    constructor() {
      super(), this._onColorThemeChange = this._register(new N()), this.onDidColorThemeChange = this._onColorThemeChange.event, this._onProductIconThemeChange = this._register(new N()), this.onDidProductIconThemeChange = this._onProductIconThemeChange.event, this._environment = /* @__PURE__ */ Object.create(null), this._builtInProductIconTheme = new fJ(), this._autoDetectHighContrast = true, this._knownThemes = /* @__PURE__ */ new Map(), this._knownThemes.set(pJ, SJ(pJ)), this._knownThemes.set(mJ, SJ(mJ)), this._knownThemes.set(hJ, SJ(hJ)), this._knownThemes.set(gJ, SJ(gJ));
      let e10 = this._register(dJ(this));
      this._codiconCSS = e10.getCSS(), this._themeCSS = ``, this._allCSS = `${this._codiconCSS}
${this._themeCSS}`, this._globalStyleElement = null, this._styleElements = [], this._colorMapOverride = null, this.setTheme(pJ), this._onOSSchemeChanged(), this._register(e10.onDidChange(() => {
        this._codiconCSS = e10.getCSS(), this._updateCSS();
      })), yc(os, `(forced-colors: active)`, () => {
        this._onOSSchemeChanged();
      });
    }
    registerEditorContainer(e10) {
      return Ed(e10) ? this._registerShadowDomContainer(e10) : this._registerRegularEditorContainer();
    }
    _registerRegularEditorContainer() {
      return this._globalStyleElement || (this._globalStyleElement = Id(void 0, (e10) => {
        e10.className = `monaco-colors`, e10.textContent = this._allCSS;
      }), this._styleElements.push(this._globalStyleElement)), j.None;
    }
    _registerShadowDomContainer(e10) {
      let t10 = Id(e10, (e11) => {
        e11.className = `monaco-colors`, e11.textContent = this._allCSS;
      });
      return this._styleElements.push(t10), {
        dispose: () => {
          for (let e11 = 0; e11 < this._styleElements.length; e11++) if (this._styleElements[e11] === t10) {
            this._styleElements.splice(e11, 1);
            return;
          }
        }
      };
    }
    defineTheme(e10, t10) {
      if (!/^[a-z0-9\-]+$/i.test(e10)) throw Error(`Illegal theme name!`);
      if (!bJ(t10.base) && !bJ(e10)) throw Error(`Illegal theme base!`);
      this._knownThemes.set(e10, new yJ(e10, t10)), bJ(e10) && this._knownThemes.forEach((t11) => {
        t11.base === e10 && t11.notifyBaseUpdated();
      }), this._theme.themeName === e10 && this.setTheme(e10);
    }
    getColorTheme() {
      return this._theme;
    }
    setColorMapOverride(e10) {
      this._colorMapOverride = e10, this._updateThemeOrColorMap();
    }
    setTheme(e10) {
      let t10;
      t10 = this._knownThemes.has(e10) ? this._knownThemes.get(e10) : this._knownThemes.get(pJ), this._updateActualTheme(t10);
    }
    _updateActualTheme(e10) {
      !e10 || this._theme === e10 || (this._theme = e10, this._updateThemeOrColorMap());
    }
    _onOSSchemeChanged() {
      if (this._autoDetectHighContrast) {
        let e10 = os.matchMedia(`(forced-colors: active)`).matches;
        if (e10 !== zb(this._theme.type)) {
          let t10;
          t10 = Bb(this._theme.type) ? e10 ? hJ : mJ : e10 ? gJ : pJ, this._updateActualTheme(this._knownThemes.get(t10));
        }
      }
    }
    setAutoDetectHighContrast(e10) {
      this._autoDetectHighContrast = e10, this._onOSSchemeChanged();
    }
    _updateThemeOrColorMap() {
      let e10 = [], t10 = {}, n10 = {
        addRule: (n11) => {
          t10[n11] || (e10.push(n11), t10[n11] = true);
        }
      };
      vJ.getThemingParticipants().forEach((e11) => e11(this._theme, n10, this._environment));
      let r10 = [];
      for (let e11 of _J.getColors()) {
        let t11 = this._theme.getColor(e11.id, true);
        t11 && r10.push(`${qS(e11.id)}: ${t11.toString()};`);
      }
      n10.addRule(`.monaco-editor, .monaco-diff-editor, .monaco-component { ${r10.join(`
`)} }`);
      let i10 = this._colorMapOverride || this._theme.tokenTheme.getColorMap();
      n10.addRule(Jq(i10)), this._themeCSS = e10.join(`
`), this._updateCSS(), ao.setColorMap(i10), this._onColorThemeChange.fire(this._theme);
    }
    _updateCSS() {
      this._allCSS = `${this._codiconCSS}
${this._themeCSS}`, this._styleElements.forEach((e10) => e10.textContent = this._allCSS);
    }
    getFileIconTheme() {
      return {
        hasFileIcons: false,
        hasFolderIcons: false,
        hidesExplorerArrows: false
      };
    }
    getProductIconTheme() {
      return this._builtInProductIconTheme;
    }
  };
  wJ = Xf(`themeService`);
  var TJ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, EJ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let DJ = class extends j {
    constructor(e10, t10, n10) {
      super(), this._contextKeyService = e10, this._layoutService = t10, this._configurationService = n10, this._accessibilitySupport = 0, this._onDidChangeScreenReaderOptimized = new N(), this._onDidChangeReducedMotion = new N(), this._onDidChangeLinkUnderline = new N(), this._accessibilityModeEnabledContext = BA.bindTo(this._contextKeyService);
      let r10 = () => this._accessibilityModeEnabledContext.set(this.isScreenReaderOptimized());
      this._register(this._configurationService.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(`editor.accessibilitySupport`) && (r10(), this._onDidChangeScreenReaderOptimized.fire()), e11.affectsConfiguration(`workbench.reduceMotion`) && (this._configMotionReduced = this._configurationService.getValue(`workbench.reduceMotion`), this._onDidChangeReducedMotion.fire());
      })), r10(), this._register(this.onDidChangeScreenReaderOptimized(() => r10()));
      let i10 = os.matchMedia(`(prefers-reduced-motion: reduce)`);
      this._systemMotionReduced = i10.matches, this._configMotionReduced = this._configurationService.getValue(`workbench.reduceMotion`), this._linkUnderlinesEnabled = this._configurationService.getValue(`accessibility.underlineLinks`), this.initReducedMotionListeners(i10), this.initLinkUnderlineListeners();
    }
    initReducedMotionListeners(e10) {
      this._register(z(e10, `change`, () => {
        this._systemMotionReduced = e10.matches, this._configMotionReduced === `auto` && this._onDidChangeReducedMotion.fire();
      }));
      let t10 = () => {
        let e11 = this.isMotionReduced();
        this._layoutService.mainContainer.classList.toggle(`reduce-motion`, e11), this._layoutService.mainContainer.classList.toggle(`enable-motion`, !e11);
      };
      t10(), this._register(this.onDidChangeReducedMotion(() => t10()));
    }
    initLinkUnderlineListeners() {
      this._register(this._configurationService.onDidChangeConfiguration((e11) => {
        if (e11.affectsConfiguration(`accessibility.underlineLinks`)) {
          let e12 = this._configurationService.getValue(`accessibility.underlineLinks`);
          this._linkUnderlinesEnabled = e12, this._onDidChangeLinkUnderline.fire();
        }
      }));
      let e10 = () => {
        let e11 = this._linkUnderlinesEnabled;
        this._layoutService.mainContainer.classList.toggle(`underline-links`, e11);
      };
      e10(), this._register(this.onDidChangeLinkUnderlines(() => e10()));
    }
    onDidChangeLinkUnderlines(e10) {
      return this._onDidChangeLinkUnderline.event(e10);
    }
    get onDidChangeScreenReaderOptimized() {
      return this._onDidChangeScreenReaderOptimized.event;
    }
    isScreenReaderOptimized() {
      let e10 = this._configurationService.getValue(`editor.accessibilitySupport`);
      return e10 === `on` || e10 === `auto` && this._accessibilitySupport === 2;
    }
    get onDidChangeReducedMotion() {
      return this._onDidChangeReducedMotion.event;
    }
    isMotionReduced() {
      let e10 = this._configMotionReduced;
      return e10 === `on` || e10 === `auto` && this._systemMotionReduced;
    }
    getAccessibilitySupport() {
      return this._accessibilitySupport;
    }
  };
  DJ = TJ([
    EJ(0, qp),
    EJ(1, tx),
    EJ(2, ug)
  ], DJ);
  var OJ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, kJ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, AJ, jJ;
  let MJ = class {
    constructor(e10, t10, n10) {
      this._commandService = e10, this._keybindingService = t10, this._hiddenStates = new NJ(n10);
    }
    createMenu(e10, t10, n10) {
      return new IJ(e10, this._hiddenStates, {
        emitEventsForSubmenuChanges: false,
        eventDebounceDelay: 50,
        ...n10
      }, this._commandService, this._keybindingService, t10);
    }
    getMenuActions(e10, t10, n10) {
      let r10 = new IJ(e10, this._hiddenStates, {
        emitEventsForSubmenuChanges: false,
        eventDebounceDelay: 50,
        ...n10
      }, this._commandService, this._keybindingService, t10), i10 = r10.getActions(n10);
      return r10.dispose(), i10;
    }
    resetHiddenStates(e10) {
      this._hiddenStates.reset(e10);
    }
  };
  MJ = OJ([
    kJ(0, cp),
    kJ(1, ME),
    kJ(2, nI)
  ], MJ);
  let NJ = (_Ba = class {
    constructor(e10) {
      this._storageService = e10, this._disposables = new A(), this._onDidChange = new N(), this.onDidChange = this._onDidChange.event, this._ignoreChangeEvent = false, this._hiddenByDefaultCache = /* @__PURE__ */ new Map();
      try {
        let t10 = e10.get(AJ._key, 0, `{}`);
        this._data = JSON.parse(t10);
      } catch {
        this._data = /* @__PURE__ */ Object.create(null);
      }
      this._disposables.add(e10.onDidChangeValue(0, AJ._key, this._disposables)(() => {
        if (!this._ignoreChangeEvent) try {
          let t10 = e10.get(AJ._key, 0, `{}`);
          this._data = JSON.parse(t10);
        } catch (e11) {
          console.log(`FAILED to read storage after UPDATE`, e11);
        }
        this._onDidChange.fire();
      }));
    }
    dispose() {
      this._onDidChange.dispose(), this._disposables.dispose();
    }
    _isHiddenByDefault(e10, t10) {
      return this._hiddenByDefaultCache.get(`${e10.id}/${t10}`) ?? false;
    }
    setDefaultState(e10, t10, n10) {
      this._hiddenByDefaultCache.set(`${e10.id}/${t10}`, n10);
    }
    isHidden(e10, t10) {
      var _a3;
      let n10 = this._isHiddenByDefault(e10, t10), r10 = ((_a3 = this._data[e10.id]) == null ? void 0 : _a3.includes(t10)) ?? false;
      return n10 ? !r10 : r10;
    }
    updateHidden(e10, t10, n10) {
      let r10 = this._isHiddenByDefault(e10, t10);
      r10 && (n10 = !n10);
      let i10 = this._data[e10.id];
      if (n10) if (!i10) this._data[e10.id] = [
        t10
      ];
      else {
        let e11 = i10.indexOf(t10);
        e11 < 0 && i10.push(t10);
      }
      else if (i10) {
        let n11 = i10.indexOf(t10);
        n11 >= 0 && u(i10, n11), i10.length === 0 && delete this._data[e10.id];
      }
      this._persist();
    }
    reset(e10) {
      if (e10 === void 0) this._data = /* @__PURE__ */ Object.create(null), this._persist();
      else {
        for (let { id: t10 } of e10) this._data[t10] && delete this._data[t10];
        this._persist();
      }
    }
    _persist() {
      try {
        this._ignoreChangeEvent = true;
        let e10 = JSON.stringify(this._data);
        this._storageService.store(AJ._key, e10, 0, 0);
      } finally {
        this._ignoreChangeEvent = false;
      }
    }
  }, AJ = _Ba, _Ba._key = `menu.hiddenCommands`, _Ba);
  NJ = AJ = OJ([
    kJ(0, nI)
  ], NJ);
  var PJ = class e10 {
    constructor(e11, t10) {
      this._id = e11, this._collectContextKeysForSubmenus = t10, this._menuGroups = [], this._allMenuIds = /* @__PURE__ */ new Set(), this._structureContextKeys = /* @__PURE__ */ new Set(), this._preconditionContextKeys = /* @__PURE__ */ new Set(), this._toggledContextKeys = /* @__PURE__ */ new Set(), this.refresh();
    }
    get allMenuIds() {
      return this._allMenuIds;
    }
    get structureContextKeys() {
      return this._structureContextKeys;
    }
    get preconditionContextKeys() {
      return this._preconditionContextKeys;
    }
    get toggledContextKeys() {
      return this._toggledContextKeys;
    }
    refresh() {
      this._menuGroups.length = 0, this._allMenuIds.clear(), this._structureContextKeys.clear(), this._preconditionContextKeys.clear(), this._toggledContextKeys.clear();
      let e11 = this._sort(vm.getMenuItems(this._id)), t10;
      for (let n10 of e11) {
        let e12 = n10.group || ``;
        (!t10 || t10[0] !== e12) && (t10 = [
          e12,
          []
        ], this._menuGroups.push(t10)), t10[1].push(n10), this._collectContextKeysAndSubmenuIds(n10);
      }
      this._allMenuIds.add(this._id);
    }
    _sort(e11) {
      return e11;
    }
    _collectContextKeysAndSubmenuIds(t10) {
      if (e10._fillInKbExprKeys(t10.when, this._structureContextKeys), pm(t10)) {
        if (t10.command.precondition && e10._fillInKbExprKeys(t10.command.precondition, this._preconditionContextKeys), t10.command.toggled) {
          let n10 = t10.command.toggled.condition || t10.command.toggled;
          e10._fillInKbExprKeys(n10, this._toggledContextKeys);
        }
      } else this._collectContextKeysForSubmenus && (vm.getMenuItems(t10.submenu).forEach(this._collectContextKeysAndSubmenuIds, this), this._allMenuIds.add(t10.submenu));
    }
    static _fillInKbExprKeys(e11, t10) {
      if (e11) for (let n10 of e11.keys()) t10.add(n10);
    }
  };
  let FJ = jJ = class extends PJ {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(e10, n10), this._hiddenStates = t10, this._commandService = r10, this._keybindingService = i10, this._contextKeyService = a10, this.refresh();
    }
    createActionGroups(e10) {
      let t10 = [];
      for (let n10 of this._menuGroups) {
        let [r10, i10] = n10, a10;
        for (let t11 of i10) if (this._contextKeyService.contextMatchesRules(t11.when)) {
          let n11 = pm(t11);
          n11 && this._hiddenStates.setDefaultState(this._id, t11.command.id, !!t11.isHiddenByDefault);
          let r11 = LJ(this._id, n11 ? t11.command : t11, this._hiddenStates);
          if (n11) {
            let n12 = RJ(this._commandService, this._keybindingService, t11.command.id, t11.when);
            (a10 ?? (a10 = [])).push(new bm(t11.command, t11.alt, e10, r11, n12, this._contextKeyService, this._commandService));
          } else {
            let n12 = new jJ(t11.submenu, this._hiddenStates, this._collectContextKeysForSubmenus, this._commandService, this._keybindingService, this._contextKeyService).createActionGroups(e10), i11 = np.join(...n12.map((e11) => e11[1]));
            i11.length > 0 && (a10 ?? (a10 = [])).push(new ym(t11, r11, i11));
          }
        }
        a10 && a10.length > 0 && t10.push([
          r10,
          a10
        ]);
      }
      return t10;
    }
    _sort(e10) {
      return e10.sort(jJ._compareMenuItems);
    }
    static _compareMenuItems(e10, t10) {
      let n10 = e10.group, r10 = t10.group;
      if (n10 !== r10) {
        if (n10) {
          if (!r10) return -1;
        } else return 1;
        if (n10 === `navigation`) return -1;
        if (r10 === `navigation`) return 1;
        let e11 = n10.localeCompare(r10);
        if (e11 !== 0) return e11;
      }
      let i10 = e10.order || 0, a10 = t10.order || 0;
      return i10 < a10 ? -1 : i10 > a10 ? 1 : jJ._compareTitles(pm(e10) ? e10.command.title : e10.title, pm(t10) ? t10.command.title : t10.title);
    }
    static _compareTitles(e10, t10) {
      let n10 = typeof e10 == `string` ? e10 : e10.original, r10 = typeof t10 == `string` ? t10 : t10.original;
      return n10.localeCompare(r10);
    }
  };
  FJ = jJ = OJ([
    kJ(3, cp),
    kJ(4, ME),
    kJ(5, qp)
  ], FJ);
  let IJ = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this._disposables = new A(), this._menuInfo = new FJ(e10, t10, n10.emitEventsForSubmenuChanges, r10, i10, a10);
      let o10 = new cl(() => {
        this._menuInfo.refresh(), this._onDidChange.fire({
          menu: this,
          isStructuralChange: true,
          isEnablementChange: true,
          isToggleChange: true
        });
      }, n10.eventDebounceDelay);
      this._disposables.add(o10), this._disposables.add(vm.onDidChangeMenu((e11) => {
        for (let t11 of this._menuInfo.allMenuIds) if (e11.has(t11)) {
          o10.schedule();
          break;
        }
      }));
      let s10 = this._disposables.add(new A()), c10 = (e11) => {
        let t11 = false, n11 = false, r11 = false;
        for (let i11 of e11) if (t11 || (t11 = i11.isStructuralChange), n11 || (n11 = i11.isEnablementChange), r11 || (r11 = i11.isToggleChange), t11 && n11 && r11) break;
        return {
          menu: this,
          isStructuralChange: t11,
          isEnablementChange: n11,
          isToggleChange: r11
        };
      }, l10 = () => {
        s10.add(a10.onDidChangeContext((e11) => {
          let t11 = e11.affectsSome(this._menuInfo.structureContextKeys), n11 = e11.affectsSome(this._menuInfo.preconditionContextKeys), r11 = e11.affectsSome(this._menuInfo.toggledContextKeys);
          (t11 || n11 || r11) && this._onDidChange.fire({
            menu: this,
            isStructuralChange: t11,
            isEnablementChange: n11,
            isToggleChange: r11
          });
        })), s10.add(t10.onDidChange((e11) => {
          this._onDidChange.fire({
            menu: this,
            isStructuralChange: true,
            isEnablementChange: false,
            isToggleChange: false
          });
        }));
      };
      this._onDidChange = new ci({
        onWillAddFirstListener: l10,
        onDidRemoveLastListener: s10.clear.bind(s10),
        delay: n10.eventDebounceDelay,
        merge: c10
      }), this.onDidChange = this._onDidChange.event;
    }
    getActions(e10) {
      return this._menuInfo.createActionGroups(e10);
    }
    dispose() {
      this._disposables.dispose(), this._onDidChange.dispose();
    }
  };
  IJ = OJ([
    kJ(3, cp),
    kJ(4, ME),
    kJ(5, qp)
  ], IJ);
  function LJ(e10, t10, n10) {
    let r10 = mm(t10) ? t10.submenu.id : t10.id, i10 = typeof t10.title == `string` ? t10.title : t10.title.value, a10 = ap({
      id: `hide/${e10.id}/${r10}`,
      label: T(`hide.label`, `Hide '{0}'`, i10),
      run() {
        n10.updateHidden(e10, r10, true);
      }
    }), o10 = ap({
      id: `toggle/${e10.id}/${r10}`,
      label: i10,
      get checked() {
        return !n10.isHidden(e10, r10);
      },
      run() {
        n10.updateHidden(e10, r10, !!this.checked);
      }
    });
    return {
      hide: a10,
      toggle: o10,
      get isHidden() {
        return !o10.checked;
      }
    };
  }
  function RJ(e10, t10, n10, r10 = void 0, i10 = true) {
    return ap({
      id: `configureKeybinding/${n10}`,
      label: T(`configure keybinding`, `Configure Keybinding`),
      enabled: i10,
      run() {
        let i11 = !!t10.lookupKeybinding(n10), a10 = !i11 && r10 ? r10.serialize() : void 0;
        e10.executeCommand(`workbench.action.openGlobalKeybindings`, `@command:${n10}` + (a10 ? ` +when:${a10}` : ``));
      }
    });
  }
  var zJ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, BJ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, VJ;
  const HJ = `application/vnd.code.resources`;
  let UJ = (_Ca = class extends j {
    constructor(e10, t10) {
      super(), this.layoutService = e10, this.logService = t10, this.mapTextToType = /* @__PURE__ */ new Map(), this.findText = ``, this.resources = [], this.resourcesStateHash = void 0, (Tc || Ec) && this.installWebKitWriteTextWorkaround(), this._register(M.runAndSubscribe(Ju, ({ window: e11, disposables: t11 }) => {
        t11.add(z(e11.document, `copy`, () => this.clearResourcesState()));
      }, {
        window: os,
        disposables: this._store
      }));
    }
    installWebKitWriteTextWorkaround() {
      let e10 = () => {
        let e11 = new pl();
        this.webKitPendingClipboardWritePromise && !this.webKitPendingClipboardWritePromise.isSettled && this.webKitPendingClipboardWritePromise.cancel(), this.webKitPendingClipboardWritePromise = e11, Md().navigator.clipboard.write([
          new ClipboardItem({
            "text/plain": e11.p
          })
        ]).catch(async (t10) => {
          (!(t10 instanceof Error) || t10.name !== `NotAllowedError` || !e11.isRejected) && this.logService.error(t10);
        });
      };
      this._register(M.runAndSubscribe(this.layoutService.onDidAddContainer, ({ container: t10, disposables: n10 }) => {
        n10.add(z(t10, `click`, e10)), n10.add(z(t10, `keydown`, e10));
      }, {
        container: this.layoutService.mainContainer,
        disposables: this._store
      }));
    }
    async writeText(e10, t10) {
      if (this.clearResourcesState(), t10) {
        this.mapTextToType.set(t10, e10);
        return;
      }
      if (this.webKitPendingClipboardWritePromise) return this.webKitPendingClipboardWritePromise.complete(e10);
      try {
        return await Md().navigator.clipboard.writeText(e10);
      } catch (e11) {
        console.error(e11);
      }
      this.fallbackWriteText(e10);
    }
    fallbackWriteText(e10) {
      let t10 = jd(), n10 = t10.activeElement, r10 = t10.body.appendChild(H(`textarea`, {
        "aria-hidden": true
      }));
      r10.style.height = `1px`, r10.style.width = `1px`, r10.style.position = `absolute`, r10.value = e10, r10.focus(), r10.select(), t10.execCommand(`copy`), Gd(n10) && n10.focus(), r10.remove();
    }
    async readText(e10) {
      if (e10) return this.mapTextToType.get(e10) || ``;
      try {
        return await Md().navigator.clipboard.readText();
      } catch (e11) {
        console.error(e11);
      }
      return ``;
    }
    async readFindText() {
      return this.findText;
    }
    async writeFindText(e10) {
      this.findText = e10;
    }
    async readResources() {
      try {
        let e11 = await Md().navigator.clipboard.read();
        for (let t10 of e11) if (t10.types.includes(`web ${HJ}`)) {
          let e12 = await t10.getType(`web ${HJ}`), n10 = JSON.parse(await e12.text()).map((e13) => xa.from(e13));
          return n10;
        }
      } catch {
      }
      let e10 = await this.computeResourcesStateHash();
      return this.resourcesStateHash !== e10 && this.clearResourcesState(), this.resources;
    }
    async computeResourcesStateHash() {
      if (this.resources.length === 0) return;
      let e10 = await this.readText();
      return Mu(e10.substring(0, VJ.MAX_RESOURCE_STATE_SOURCE_LENGTH));
    }
    clearInternalState() {
      this.clearResourcesState();
    }
    clearResourcesState() {
      this.resources = [], this.resourcesStateHash = void 0;
    }
  }, VJ = _Ca, _Ca.MAX_RESOURCE_STATE_SOURCE_LENGTH = 1e3, _Ca);
  UJ = VJ = zJ([
    BJ(0, tx),
    BJ(1, wm)
  ], UJ);
  WJ = Xf(`clipboardService`);
  var GJ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, KJ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const qJ = `data-keybinding-context`;
  var JJ = class {
    constructor(e10, t10) {
      this._id = e10, this._parent = t10, this._value = /* @__PURE__ */ Object.create(null), this._value._contextId = e10;
    }
    get value() {
      return {
        ...this._value
      };
    }
    setValue(e10, t10) {
      return this._value[e10] === t10 ? false : (this._value[e10] = t10, true);
    }
    removeValue(e10) {
      return e10 in this._value ? (delete this._value[e10], true) : false;
    }
    getValue(e10) {
      let t10 = this._value[e10];
      return t10 === void 0 && this._parent ? this._parent.getValue(e10) : t10;
    }
  }, YJ = (_Da = class extends JJ {
    constructor() {
      super(-1, null);
    }
    setValue(e10, t10) {
      return false;
    }
    removeValue(e10) {
      return false;
    }
    getValue(e10) {
    }
  }, _Da.INSTANCE = new _Da(), _Da), XJ = (_Ea = class extends JJ {
    constructor(e10, t10, n10) {
      super(e10, null), this._configurationService = t10, this._values = gM.forConfigKeys(), this._listener = this._configurationService.onDidChangeConfiguration((e11) => {
        if (e11.source === 7) {
          let e12 = Array.from(this._values, ([e13]) => e13);
          this._values.clear(), n10.fire(new $J(e12));
        } else {
          let t11 = [];
          for (let n11 of e11.affectedKeys) {
            let e12 = `config.${n11}`, r10 = this._values.findSuperstr(e12);
            r10 !== void 0 && (t11.push(...It.map(r10, ([e13]) => e13)), this._values.deleteSuperstr(e12)), this._values.has(e12) && (t11.push(e12), this._values.delete(e12));
          }
          n10.fire(new $J(t11));
        }
      });
    }
    dispose() {
      this._listener.dispose();
    }
    getValue(t10) {
      if (t10.indexOf(_Ea._keyPrefix) !== 0) return super.getValue(t10);
      if (this._values.has(t10)) return this._values.get(t10);
      let n10 = t10.substr(_Ea._keyPrefix.length), r10 = this._configurationService.getValue(n10), i10;
      switch (typeof r10) {
        case `number`:
        case `boolean`:
        case `string`:
          i10 = r10;
          break;
        default:
          i10 = Array.isArray(r10) ? JSON.stringify(r10) : r10;
      }
      return this._values.set(t10, i10), i10;
    }
    setValue(e10, t10) {
      return super.setValue(e10, t10);
    }
    removeValue(e10) {
      return super.removeValue(e10);
    }
  }, _Ea._keyPrefix = `config.`, _Ea), ZJ = class {
    constructor(e10, t10, n10) {
      this._service = e10, this._key = t10, this._defaultValue = n10, this.reset();
    }
    set(e10) {
      this._service.setContext(this._key, e10);
    }
    reset() {
      this._defaultValue === void 0 ? this._service.removeContext(this._key) : this._service.setContext(this._key, this._defaultValue);
    }
    get() {
      return this._service.getContextKeyValue(this._key);
    }
  }, QJ = class {
    constructor(e10) {
      this.key = e10;
    }
    affectsSome(e10) {
      return e10.has(this.key);
    }
    allKeysContainedIn(e10) {
      return this.affectsSome(e10);
    }
  }, $J = class {
    constructor(e10) {
      this.keys = e10;
    }
    affectsSome(e10) {
      for (let t10 of this.keys) if (e10.has(t10)) return true;
      return false;
    }
    allKeysContainedIn(e10) {
      return this.keys.every((t10) => e10.has(t10));
    }
  }, eY = class {
    constructor(e10) {
      this.events = e10;
    }
    affectsSome(e10) {
      for (let t10 of this.events) if (t10.affectsSome(e10)) return true;
      return false;
    }
    allKeysContainedIn(e10) {
      return this.events.every((t10) => t10.allKeysContainedIn(e10));
    }
  };
  function tY(e10, t10) {
    return e10.allKeysContainedIn(new Set(Object.keys(t10)));
  }
  var nY = class extends j {
    constructor(e10) {
      super(), this._onDidChangeContext = this._register(new si({
        merge: (e11) => new eY(e11)
      })), this.onDidChangeContext = this._onDidChangeContext.event, this._isDisposed = false, this._myContextId = e10;
    }
    createKey(e10, t10) {
      if (this._isDisposed) throw Error(`AbstractContextKeyService has been disposed`);
      return new ZJ(this, e10, t10);
    }
    bufferChangeEvents(e10) {
      this._onDidChangeContext.pause();
      try {
        e10();
      } finally {
        this._onDidChangeContext.resume();
      }
    }
    createScoped(e10) {
      if (this._isDisposed) throw Error(`AbstractContextKeyService has been disposed`);
      return new iY(this, e10);
    }
    contextMatchesRules(e10) {
      if (this._isDisposed) throw Error(`AbstractContextKeyService has been disposed`);
      let t10 = this.getContextValuesContainer(this._myContextId), n10 = e10 ? e10.evaluate(t10) : true;
      return n10;
    }
    getContextKeyValue(e10) {
      if (!this._isDisposed) return this.getContextValuesContainer(this._myContextId).getValue(e10);
    }
    setContext(e10, t10) {
      if (this._isDisposed) return;
      let n10 = this.getContextValuesContainer(this._myContextId);
      n10 && n10.setValue(e10, t10) && this._onDidChangeContext.fire(new QJ(e10));
    }
    removeContext(e10) {
      this._isDisposed || this.getContextValuesContainer(this._myContextId).removeValue(e10) && this._onDidChangeContext.fire(new QJ(e10));
    }
    getContext(e10) {
      return this._isDisposed ? YJ.INSTANCE : this.getContextValuesContainer(aY(e10));
    }
    dispose() {
      super.dispose(), this._isDisposed = true;
    }
  };
  let rY = class extends nY {
    constructor(e10) {
      super(0), this._contexts = /* @__PURE__ */ new Map(), this._lastContextId = 0;
      let t10 = this._register(new XJ(this._myContextId, e10, this._onDidChangeContext));
      this._contexts.set(this._myContextId, t10);
    }
    getContextValuesContainer(e10) {
      return this._isDisposed ? YJ.INSTANCE : this._contexts.get(e10) || YJ.INSTANCE;
    }
    createChildContext(e10 = this._myContextId) {
      if (this._isDisposed) throw Error(`ContextKeyService has been disposed`);
      let t10 = ++this._lastContextId;
      return this._contexts.set(t10, new JJ(t10, this.getContextValuesContainer(e10))), t10;
    }
    disposeContext(e10) {
      this._isDisposed || this._contexts.delete(e10);
    }
  };
  rY = GJ([
    KJ(0, ug)
  ], rY);
  var iY = class extends nY {
    constructor(e10, t10) {
      if (super(e10.createChildContext()), this._parentChangeListener = this._register(new Br()), this._parent = e10, this._updateParentChangeListener(), this._domNode = t10, this._domNode.hasAttribute(qJ)) {
        let e11 = ``;
        this._domNode.classList && (e11 = Array.from(this._domNode.classList.values()).join(`, `)), console.error(`Element already has context attribute${e11 ? `: ` + e11 : ``}`);
      }
      this._domNode.setAttribute(qJ, String(this._myContextId));
    }
    _updateParentChangeListener() {
      this._parentChangeListener.value = this._parent.onDidChangeContext((e10) => {
        let t10 = this._parent.getContextValuesContainer(this._myContextId), n10 = t10.value;
        tY(e10, n10) || this._onDidChangeContext.fire(e10);
      });
    }
    dispose() {
      this._isDisposed || (this._parent.disposeContext(this._myContextId), this._domNode.removeAttribute(qJ), super.dispose());
    }
    getContextValuesContainer(e10) {
      return this._isDisposed ? YJ.INSTANCE : this._parent.getContextValuesContainer(e10);
    }
    createChildContext(e10 = this._myContextId) {
      if (this._isDisposed) throw Error(`ScopedContextKeyService has been disposed`);
      return this._parent.createChildContext(e10);
    }
    disposeContext(e10) {
      this._isDisposed || this._parent.disposeContext(e10);
    }
  };
  function aY(e10) {
    for (; e10; ) {
      if (e10.hasAttribute(qJ)) {
        let t10 = e10.getAttribute(qJ);
        return t10 ? parseInt(t10, 10) : NaN;
      }
      e10 = e10.parentElement;
    }
    return 0;
  }
  function oY(e10, t10, n10) {
    let r10 = e10.get(qp);
    r10.createKey(String(t10), sY(n10));
  }
  function sY(e10) {
    return Pe(e10, (e11) => {
      if (typeof e11 == `object` && e11.$mid === 1) return xa.revive(e11).toString();
      if (e11 instanceof xa) return e11.toString();
    });
  }
  lp.registerCommand(`_setContext`, oY), lp.registerCommand({
    id: `getContextKeyInfo`,
    handler() {
      return [
        ...U.all()
      ].sort((e10, t10) => e10.key.localeCompare(t10.key));
    },
    metadata: {
      description: T(`getContextKeyInfo`, `A command that returns information about context keys`),
      args: []
    }
  }), lp.registerCommand(`_generateContextKeyInfo`, function() {
    let e10 = [], t10 = /* @__PURE__ */ new Set();
    for (let n10 of U.all()) t10.has(n10.key) || (t10.add(n10.key), e10.push(n10));
    e10.sort((e11, t11) => e11.key.localeCompare(t11.key)), console.log(JSON.stringify(e10, void 0, 2));
  });
  var cY = class {
    constructor(e10, t10) {
      this.key = e10, this.data = t10, this.incoming = /* @__PURE__ */ new Map(), this.outgoing = /* @__PURE__ */ new Map();
    }
  }, lY = class {
    constructor(e10) {
      this._hashFn = e10, this._nodes = /* @__PURE__ */ new Map();
    }
    roots() {
      let e10 = [];
      for (let t10 of this._nodes.values()) t10.outgoing.size === 0 && e10.push(t10);
      return e10;
    }
    insertEdge(e10, t10) {
      let n10 = this.lookupOrInsertNode(e10), r10 = this.lookupOrInsertNode(t10);
      n10.outgoing.set(r10.key, r10), r10.incoming.set(n10.key, n10);
    }
    removeNode(e10) {
      let t10 = this._hashFn(e10);
      this._nodes.delete(t10);
      for (let e11 of this._nodes.values()) e11.outgoing.delete(t10), e11.incoming.delete(t10);
    }
    lookupOrInsertNode(e10) {
      let t10 = this._hashFn(e10), n10 = this._nodes.get(t10);
      return n10 || (n10 = new cY(t10, e10), this._nodes.set(t10, n10)), n10;
    }
    isEmpty() {
      return this._nodes.size === 0;
    }
    toString() {
      let e10 = [];
      for (let [t10, n10] of this._nodes) e10.push(`${t10}
	(-> incoming)[${[
        ...n10.incoming.keys()
      ].join(`, `)}]
	(outgoing ->)[${[
        ...n10.outgoing.keys()
      ].join(`,`)}]
`);
      return e10.join(`
`);
    }
    findCycleSlow() {
      for (let [e10, t10] of this._nodes) {
        let n10 = /* @__PURE__ */ new Set([
          e10
        ]), r10 = this._findCycle(t10, n10);
        if (r10) return r10;
      }
    }
    _findCycle(e10, t10) {
      for (let [n10, r10] of e10.outgoing) {
        if (t10.has(n10)) return [
          ...t10,
          n10
        ].join(` -> `);
        t10.add(n10);
        let e11 = this._findCycle(r10, t10);
        if (e11) return e11;
        t10.delete(n10);
      }
    }
  }, uY = class {
    constructor(...e10) {
      this._entries = /* @__PURE__ */ new Map();
      for (let [t10, n10] of e10) this.set(t10, n10);
    }
    set(e10, t10) {
      let n10 = this._entries.get(e10);
      return this._entries.set(e10, t10), n10;
    }
    get(e10) {
      return this._entries.get(e10);
    }
  };
  const dY = false;
  var fY = class extends Error {
    constructor(e10) {
      super(`cyclic dependency between services`), this.message = e10.findCycleSlow() ?? `UNABLE to detect cycle, dumping graph: 
${e10.toString()}`;
    }
  }, pY = class e10 {
    constructor(e11 = new uY(), t10 = false, n10, r10 = dY) {
      this._services = e11, this._strict = t10, this._parent = n10, this._enableTracing = r10, this._isDisposed = false, this._servicesToMaybeDispose = /* @__PURE__ */ new Set(), this._children = /* @__PURE__ */ new Set(), this._activeInstantiations = /* @__PURE__ */ new Set(), this._services.set(Jf, this), this._globalGraph = r10 ? (n10 == null ? void 0 : n10._globalGraph) ?? new lY((e12) => e12) : void 0;
    }
    dispose() {
      if (!this._isDisposed) {
        this._isDisposed = true, Rr(this._children), this._children.clear();
        for (let e11 of this._servicesToMaybeDispose) Lr(e11) && e11.dispose();
        this._servicesToMaybeDispose.clear();
      }
    }
    _throwIfDisposed() {
      if (this._isDisposed) throw Error(`InstantiationService has been disposed`);
    }
    createChild(t10, n10) {
      this._throwIfDisposed();
      let r10 = this, i10 = new class extends e10 {
        dispose() {
          r10._children.delete(i10), super.dispose();
        }
      }(t10, this._strict, this, this._enableTracing);
      return this._children.add(i10), n10 == null ? void 0 : n10.add(i10), i10;
    }
    invokeFunction(e11, ...t10) {
      this._throwIfDisposed();
      let n10 = mY.traceInvocation(this._enableTracing, e11), r10 = false;
      try {
        let i10 = {
          get: (e12) => {
            if (r10) throw wr(`service accessor is only valid during the invocation of its target method`);
            let t11 = this._getOrCreateServiceInstance(e12, n10);
            if (!t11) throw Error(`[invokeFunction] unknown service '${e12}'`);
            return t11;
          }
        };
        return e11(i10, ...t10);
      } finally {
        r10 = true, n10.stop();
      }
    }
    createInstance(e11, ...t10) {
      this._throwIfDisposed();
      let n10, r10;
      return e11 instanceof vg ? (n10 = mY.traceCreation(this._enableTracing, e11.ctor), r10 = this._createInstance(e11.ctor, e11.staticArguments.concat(t10), n10)) : (n10 = mY.traceCreation(this._enableTracing, e11), r10 = this._createInstance(e11, t10, n10)), n10.stop(), r10;
    }
    _createInstance(e11, t10 = [], n10) {
      let r10 = qf.getServiceDependencies(e11).sort((e12, t11) => e12.index - t11.index), i10 = [];
      for (let t11 of r10) {
        let r11 = this._getOrCreateServiceInstance(t11.id, n10);
        r11 || this._throwIfStrict(`[createInstance] ${e11.name} depends on UNKNOWN service ${t11.id}.`, false), i10.push(r11);
      }
      let a10 = r10.length > 0 ? r10[0].index : t10.length;
      if (t10.length !== a10) {
        console.trace(`[createInstance] First service dependency of ${e11.name} at position ${a10 + 1} conflicts with ${t10.length} static arguments`);
        let n11 = a10 - t10.length;
        t10 = n11 > 0 ? t10.concat(Array(n11)) : t10.slice(0, a10);
      }
      return Reflect.construct(e11, t10.concat(i10));
    }
    _setCreatedServiceInstance(e11, t10) {
      if (this._services.get(e11) instanceof vg) this._services.set(e11, t10);
      else if (this._parent) this._parent._setCreatedServiceInstance(e11, t10);
      else throw Error(`illegalState - setting UNKNOWN service instance`);
    }
    _getServiceInstanceOrDescriptor(e11) {
      let t10 = this._services.get(e11);
      return !t10 && this._parent ? this._parent._getServiceInstanceOrDescriptor(e11) : t10;
    }
    _getOrCreateServiceInstance(e11, t10) {
      this._globalGraph && this._globalGraphImplicitDependency && this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(e11));
      let n10 = this._getServiceInstanceOrDescriptor(e11);
      return n10 instanceof vg ? this._safeCreateAndCacheServiceInstance(e11, n10, t10.branch(e11, true)) : (t10.branch(e11, false), n10);
    }
    _safeCreateAndCacheServiceInstance(e11, t10, n10) {
      if (this._activeInstantiations.has(e11)) throw Error(`illegal state - RECURSIVELY instantiating service '${e11}'`);
      this._activeInstantiations.add(e11);
      try {
        return this._createAndCacheServiceInstance(e11, t10, n10);
      } finally {
        this._activeInstantiations.delete(e11);
      }
    }
    _createAndCacheServiceInstance(e11, t10, n10) {
      var _a3;
      let r10 = new lY((e12) => e12.id.toString()), i10 = 0, a10 = [
        {
          id: e11,
          desc: t10,
          _trace: n10
        }
      ], o10 = /* @__PURE__ */ new Set();
      for (; a10.length; ) {
        let t11 = a10.pop();
        if (!o10.has(String(t11.id))) {
          if (o10.add(String(t11.id)), r10.lookupOrInsertNode(t11), i10++ > 1e3) throw new fY(r10);
          for (let n11 of qf.getServiceDependencies(t11.desc.ctor)) {
            let i11 = this._getServiceInstanceOrDescriptor(n11.id);
            if (i11 || this._throwIfStrict(`[createInstance] ${e11} depends on ${n11.id} which is NOT registered.`, true), (_a3 = this._globalGraph) == null ? void 0 : _a3.insertEdge(String(t11.id), String(n11.id)), i11 instanceof vg) {
              let e12 = {
                id: n11.id,
                desc: i11,
                _trace: t11._trace.branch(n11.id, true)
              };
              r10.insertEdge(t11, e12), a10.push(e12);
            }
          }
        }
      }
      for (; ; ) {
        let e12 = r10.roots();
        if (e12.length === 0) {
          if (!r10.isEmpty()) throw new fY(r10);
          break;
        }
        for (let { data: t11 } of e12) {
          let e13 = this._getServiceInstanceOrDescriptor(t11.id);
          if (e13 instanceof vg) {
            let e14 = this._createServiceInstanceWithOwner(t11.id, t11.desc.ctor, t11.desc.staticArguments, t11.desc.supportsDelayedInstantiation, t11._trace);
            this._setCreatedServiceInstance(t11.id, e14);
          }
          r10.removeNode(t11);
        }
      }
      return this._getServiceInstanceOrDescriptor(e11);
    }
    _createServiceInstanceWithOwner(e11, t10, n10 = [], r10, i10) {
      if (this._services.get(e11) instanceof vg) return this._createServiceInstance(e11, t10, n10, r10, i10, this._servicesToMaybeDispose);
      if (this._parent) return this._parent._createServiceInstanceWithOwner(e11, t10, n10, r10, i10);
      throw Error(`illegalState - creating UNKNOWN service instance ${t10.name}`);
    }
    _createServiceInstance(t10, n10, r10 = [], i10, a10, o10) {
      if (i10) {
        let i11 = new e10(void 0, this._strict, this, this._enableTracing);
        i11._globalGraphImplicitDependency = String(t10);
        let s10 = /* @__PURE__ */ new Map(), c10 = new fl(() => {
          let e11 = i11._createInstance(n10, r10, a10);
          for (let [t11, n11] of s10) {
            let r11 = e11[t11];
            if (typeof r11 == `function`) for (let t12 of n11) t12.disposable = r11.apply(e11, t12.listener);
          }
          return s10.clear(), o10.add(e11), e11;
        });
        return new Proxy(/* @__PURE__ */ Object.create(null), {
          get(e11, t11) {
            if (!c10.isInitialized && typeof t11 == `string` && (t11.startsWith(`onDid`) || t11.startsWith(`onWill`))) {
              let e12 = s10.get(t11);
              e12 || (e12 = new Rt(), s10.set(t11, e12));
              let n12 = (n13, r12, i12) => {
                if (c10.isInitialized) return c10.value[t11](n13, r12, i12);
                {
                  let t12 = {
                    listener: [
                      n13,
                      r12,
                      i12
                    ],
                    disposable: void 0
                  }, a11 = e12.push(t12), o11 = k(() => {
                    var _a3;
                    a11(), (_a3 = t12.disposable) == null ? void 0 : _a3.dispose();
                  });
                  return o11;
                }
              };
              return n12;
            }
            if (t11 in e11) return e11[t11];
            let n11 = c10.value, r11 = n11[t11];
            return typeof r11 == `function` ? (r11 = r11.bind(n11), e11[t11] = r11, r11) : r11;
          },
          set(e11, t11, n11) {
            return c10.value[t11] = n11, true;
          },
          getPrototypeOf(e11) {
            return n10.prototype;
          }
        });
      } else {
        let e11 = this._createInstance(n10, r10, a10);
        return o10.add(e11), e11;
      }
    }
    _throwIfStrict(e11, t10) {
      if (t10 && console.warn(e11), this._strict) throw Error(e11);
    }
  }, mY = (_Fa = class {
    static traceInvocation(t10, n10) {
      return t10 ? new _Fa(2, n10.name || Error().stack.split(`
`).slice(3, 4).join(`
`)) : _Fa._None;
    }
    static traceCreation(t10, n10) {
      return t10 ? new _Fa(1, n10.name) : _Fa._None;
    }
    constructor(e10, t10) {
      this.type = e10, this.name = t10, this._start = Date.now(), this._dep = [];
    }
    branch(t10, n10) {
      let r10 = new _Fa(3, t10.toString());
      return this._dep.push([
        t10,
        n10,
        r10
      ]), r10;
    }
    stop() {
      let t10 = Date.now() - this._start;
      _Fa._totals += t10;
      let n10 = false;
      function r10(e10, t11) {
        let i11 = [], a10 = Array(e10 + 1).join(`	`);
        for (let [o10, s10, c10] of t11._dep) if (s10 && c10) {
          n10 = true, i11.push(`${a10}CREATES -> ${o10}`);
          let t12 = r10(e10 + 1, c10);
          t12 && i11.push(t12);
        } else i11.push(`${a10}uses -> ${o10}`);
        return i11.join(`
`);
      }
      let i10 = [
        `${this.type === 1 ? `CREATE` : `CALL`} ${this.name}`,
        `${r10(1, this)}`,
        `DONE, took ${t10.toFixed(2)}ms (grand total ${_Fa._totals.toFixed(2)}ms)`
      ];
      (t10 > 2 || n10) && _Fa.all.add(i10.join(`
`));
    }
  }, _Fa.all = /* @__PURE__ */ new Set(), _Fa._None = new class extends _Fa {
    constructor() {
      super(0, null);
    }
    stop() {
    }
    branch() {
      return this;
    }
  }(), _Fa._totals = 0, _Fa);
  const hY = /* @__PURE__ */ new Set([
    Su.inMemory,
    Su.vscodeSourceControl,
    Su.walkThrough,
    Su.walkThroughSnippet,
    Su.vscodeChatCodeBlock
  ]);
  var gY = class {
    constructor() {
      this._byResource = new H_(), this._byOwner = /* @__PURE__ */ new Map();
    }
    set(e10, t10, n10) {
      let r10 = this._byResource.get(e10);
      r10 || (r10 = /* @__PURE__ */ new Map(), this._byResource.set(e10, r10)), r10.set(t10, n10);
      let i10 = this._byOwner.get(t10);
      i10 || (i10 = new H_(), this._byOwner.set(t10, i10)), i10.set(e10, n10);
    }
    get(e10, t10) {
      let n10 = this._byResource.get(e10);
      return n10 == null ? void 0 : n10.get(t10);
    }
    delete(e10, t10) {
      let n10 = false, r10 = false, i10 = this._byResource.get(e10);
      i10 && (n10 = i10.delete(t10));
      let a10 = this._byOwner.get(t10);
      if (a10 && (r10 = a10.delete(e10)), n10 !== r10) throw Error(`illegal state`);
      return n10 && r10;
    }
    values(e10) {
      var _a3, _b3;
      return typeof e10 == `string` ? ((_a3 = this._byOwner.get(e10)) == null ? void 0 : _a3.values()) ?? It.empty() : xa.isUri(e10) ? ((_b3 = this._byResource.get(e10)) == null ? void 0 : _b3.values()) ?? It.empty() : It.map(It.concat(...this._byOwner.values()), (e11) => e11[1]);
    }
  }, _Y = class {
    constructor(e10) {
      this.errors = 0, this.infos = 0, this.warnings = 0, this.unknowns = 0, this._data = new H_(), this._service = e10, this._subscription = e10.onMarkerChanged(this._update, this);
    }
    dispose() {
      this._subscription.dispose();
    }
    _update(e10) {
      for (let t10 of e10) {
        let e11 = this._data.get(t10);
        e11 && this._substract(e11);
        let n10 = this._resourceStats(t10);
        this._add(n10), this._data.set(t10, n10);
      }
    }
    _resourceStats(e10) {
      let t10 = {
        errors: 0,
        warnings: 0,
        infos: 0,
        unknowns: 0
      };
      if (hY.has(e10.scheme)) return t10;
      for (let { severity: n10 } of this._service.read({
        resource: e10
      })) n10 === tL.Error ? t10.errors += 1 : n10 === tL.Warning ? t10.warnings += 1 : n10 === tL.Info ? t10.infos += 1 : t10.unknowns += 1;
      return t10;
    }
    _substract(e10) {
      this.errors -= e10.errors, this.warnings -= e10.warnings, this.infos -= e10.infos, this.unknowns -= e10.unknowns;
    }
    _add(e10) {
      this.errors += e10.errors, this.warnings += e10.warnings, this.infos += e10.infos, this.unknowns += e10.unknowns;
    }
  }, vY = class e10 {
    constructor() {
      this._onMarkerChanged = new ci({
        delay: 0,
        merge: e10._merge
      }), this.onMarkerChanged = this._onMarkerChanged.event, this._data = new gY(), this._stats = new _Y(this);
    }
    dispose() {
      this._stats.dispose(), this._onMarkerChanged.dispose();
    }
    remove(e11, t10) {
      for (let n10 of t10 || []) this.changeOne(e11, n10, []);
    }
    changeOne(t10, n10, r10) {
      if (b(r10)) {
        let e11 = this._data.delete(n10, t10);
        e11 && this._onMarkerChanged.fire([
          n10
        ]);
      } else {
        let i10 = [];
        for (let a10 of r10) {
          let r11 = e10._toMarker(t10, n10, a10);
          r11 && i10.push(r11);
        }
        this._data.set(n10, t10, i10), this._onMarkerChanged.fire([
          n10
        ]);
      }
    }
    static _toMarker(e11, t10, n10) {
      let { code: r10, severity: i10, message: a10, source: o10, startLineNumber: s10, startColumn: c10, endLineNumber: l10, endColumn: u10, relatedInformation: d10, tags: f10 } = n10;
      if (a10) return s10 = s10 > 0 ? s10 : 1, c10 = c10 > 0 ? c10 : 1, l10 = l10 >= s10 ? l10 : s10, u10 = u10 > 0 ? u10 : c10, {
        resource: t10,
        owner: e11,
        code: r10,
        severity: i10,
        message: a10,
        source: o10,
        startLineNumber: s10,
        startColumn: c10,
        endLineNumber: l10,
        endColumn: u10,
        relatedInformation: d10,
        tags: f10
      };
    }
    changeAll(t10, n10) {
      let r10 = [], i10 = this._data.values(t10);
      if (i10) for (let e11 of i10) {
        let n11 = It.first(e11);
        n11 && (r10.push(n11.resource), this._data.delete(n11.resource, t10));
      }
      if (x(n10)) {
        let i11 = new H_();
        for (let { resource: a10, marker: o10 } of n10) {
          let n11 = e10._toMarker(t10, a10, o10);
          if (!n11) continue;
          let s10 = i11.get(a10);
          s10 ? s10.push(n11) : (i11.set(a10, [
            n11
          ]), r10.push(a10));
        }
        for (let [e11, n11] of i11) this._data.set(e11, t10, n11);
      }
      r10.length > 0 && this._onMarkerChanged.fire(r10);
    }
    read(t10 = /* @__PURE__ */ Object.create(null)) {
      let { owner: n10, resource: r10, severities: i10, take: a10 } = t10;
      if ((!a10 || a10 < 0) && (a10 = -1), n10 && r10) {
        let t11 = this._data.get(r10, n10);
        if (t11) {
          let n11 = [];
          for (let r11 of t11) if (e10._accept(r11, i10)) {
            let e11 = n11.push(r11);
            if (a10 > 0 && e11 === a10) break;
          }
          return n11;
        } else return [];
      } else if (!n10 && !r10) {
        let t11 = [];
        for (let n11 of this._data.values()) for (let r11 of n11) if (e10._accept(r11, i10)) {
          let e11 = t11.push(r11);
          if (a10 > 0 && e11 === a10) return t11;
        }
        return t11;
      } else {
        let t11 = this._data.values(r10 ?? n10), o10 = [];
        for (let n11 of t11) for (let t12 of n11) if (e10._accept(t12, i10)) {
          let e11 = o10.push(t12);
          if (a10 > 0 && e11 === a10) return o10;
        }
        return o10;
      }
    }
    static _accept(e11, t10) {
      return t10 === void 0 || (t10 & e11.severity) === e11.severity;
    }
    static _merge(e11) {
      let t10 = new H_();
      for (let n10 of e11) for (let e12 of n10) t10.set(e12, true);
      return Array.from(t10.keys());
    }
  }, yY = class extends j {
    get configurationModel() {
      return this._configurationModel;
    }
    constructor(e10) {
      super(), this.logService = e10, this._configurationModel = Fj.createEmptyModel(this.logService);
    }
    reload() {
      return this.resetConfigurationModel(), this.configurationModel;
    }
    getConfigurationDefaultOverrides() {
      return {};
    }
    resetConfigurationModel() {
      this._configurationModel = Fj.createEmptyModel(this.logService);
      let e10 = am.as(Dg.Configuration).getConfigurationProperties();
      this.updateConfigurationModel(Object.keys(e10), e10);
    }
    updateConfigurationModel(e10, t10) {
      let n10 = this.getConfigurationDefaultOverrides();
      for (let r10 of e10) {
        let e11 = n10[r10], i10 = t10[r10];
        e11 === void 0 ? i10 ? this._configurationModel.setValue(r10, i10.default) : this._configurationModel.removeValue(r10) : this._configurationModel.setValue(r10, e11);
      }
    }
  };
  let xne;
  bY = Xf(`accessibilitySignalService`);
  xne = Symbol(`AcknowledgeDocCommentsToken`);
  let xY, SY, wY;
  xY = (_Ga = class {
    static register(t10) {
      let n10 = new _Ga(t10.fileName);
      return n10;
    }
    constructor(e10) {
      this.fileName = e10;
    }
  }, _Ga.error = _Ga.register({
    fileName: `error.mp3`
  }), _Ga.warning = _Ga.register({
    fileName: `warning.mp3`
  }), _Ga.success = _Ga.register({
    fileName: `success.mp3`
  }), _Ga.foldedArea = _Ga.register({
    fileName: `foldedAreas.mp3`
  }), _Ga.break = _Ga.register({
    fileName: `break.mp3`
  }), _Ga.quickFixes = _Ga.register({
    fileName: `quickFixes.mp3`
  }), _Ga.taskCompleted = _Ga.register({
    fileName: `taskCompleted.mp3`
  }), _Ga.taskFailed = _Ga.register({
    fileName: `taskFailed.mp3`
  }), _Ga.terminalBell = _Ga.register({
    fileName: `terminalBell.mp3`
  }), _Ga.diffLineInserted = _Ga.register({
    fileName: `diffLineInserted.mp3`
  }), _Ga.diffLineDeleted = _Ga.register({
    fileName: `diffLineDeleted.mp3`
  }), _Ga.diffLineModified = _Ga.register({
    fileName: `diffLineModified.mp3`
  }), _Ga.chatRequestSent = _Ga.register({
    fileName: `chatRequestSent.mp3`
  }), _Ga.chatResponseReceived1 = _Ga.register({
    fileName: `chatResponseReceived1.mp3`
  }), _Ga.chatResponseReceived2 = _Ga.register({
    fileName: `chatResponseReceived2.mp3`
  }), _Ga.chatResponseReceived3 = _Ga.register({
    fileName: `chatResponseReceived3.mp3`
  }), _Ga.chatResponseReceived4 = _Ga.register({
    fileName: `chatResponseReceived4.mp3`
  }), _Ga.clear = _Ga.register({
    fileName: `clear.mp3`
  }), _Ga.save = _Ga.register({
    fileName: `save.mp3`
  }), _Ga.format = _Ga.register({
    fileName: `format.mp3`
  }), _Ga.voiceRecordingStarted = _Ga.register({
    fileName: `voiceRecordingStarted.mp3`
  }), _Ga.voiceRecordingStopped = _Ga.register({
    fileName: `voiceRecordingStopped.mp3`
  }), _Ga.progress = _Ga.register({
    fileName: `progress.mp3`
  }), _Ga);
  SY = class {
    constructor(e10) {
      this.randomOneOf = e10;
    }
  };
  CY = (_Ha = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.sound = e10, this.name = t10, this.legacySoundSettingsKey = n10, this.settingsKey = r10, this.legacyAnnouncementSettingsKey = i10, this.announcementMessage = a10;
    }
    static register(t10) {
      let n10 = new SY(`randomOneOf` in t10.sound ? t10.sound.randomOneOf : [
        t10.sound
      ]), r10 = new _Ha(n10, t10.name, t10.legacySoundSettingsKey, t10.settingsKey, t10.legacyAnnouncementSettingsKey, t10.announcementMessage);
      return _Ha._signals.add(r10), r10;
    }
  }, _Ha._signals = /* @__PURE__ */ new Set(), _Ha.errorAtPosition = _Ha.register({
    name: T(`accessibilitySignals.positionHasError.name`, `Error at Position`),
    sound: xY.error,
    announcementMessage: T(`accessibility.signals.positionHasError`, `Error`),
    settingsKey: `accessibility.signals.positionHasError`,
    delaySettingsKey: `accessibility.signalOptions.delays.errorAtPosition`
  }), _Ha.warningAtPosition = _Ha.register({
    name: T(`accessibilitySignals.positionHasWarning.name`, `Warning at Position`),
    sound: xY.warning,
    announcementMessage: T(`accessibility.signals.positionHasWarning`, `Warning`),
    settingsKey: `accessibility.signals.positionHasWarning`,
    delaySettingsKey: `accessibility.signalOptions.delays.warningAtPosition`
  }), _Ha.errorOnLine = _Ha.register({
    name: T(`accessibilitySignals.lineHasError.name`, `Error on Line`),
    sound: xY.error,
    legacySoundSettingsKey: `audioCues.lineHasError`,
    legacyAnnouncementSettingsKey: `accessibility.alert.error`,
    announcementMessage: T(`accessibility.signals.lineHasError`, `Error on Line`),
    settingsKey: `accessibility.signals.lineHasError`
  }), _Ha.warningOnLine = _Ha.register({
    name: T(`accessibilitySignals.lineHasWarning.name`, `Warning on Line`),
    sound: xY.warning,
    legacySoundSettingsKey: `audioCues.lineHasWarning`,
    legacyAnnouncementSettingsKey: `accessibility.alert.warning`,
    announcementMessage: T(`accessibility.signals.lineHasWarning`, `Warning on Line`),
    settingsKey: `accessibility.signals.lineHasWarning`
  }), _Ha.foldedArea = _Ha.register({
    name: T(`accessibilitySignals.lineHasFoldedArea.name`, `Folded Area on Line`),
    sound: xY.foldedArea,
    legacySoundSettingsKey: `audioCues.lineHasFoldedArea`,
    legacyAnnouncementSettingsKey: `accessibility.alert.foldedArea`,
    announcementMessage: T(`accessibility.signals.lineHasFoldedArea`, `Folded`),
    settingsKey: `accessibility.signals.lineHasFoldedArea`
  }), _Ha.break = _Ha.register({
    name: T(`accessibilitySignals.lineHasBreakpoint.name`, `Breakpoint on Line`),
    sound: xY.break,
    legacySoundSettingsKey: `audioCues.lineHasBreakpoint`,
    legacyAnnouncementSettingsKey: `accessibility.alert.breakpoint`,
    announcementMessage: T(`accessibility.signals.lineHasBreakpoint`, `Breakpoint`),
    settingsKey: `accessibility.signals.lineHasBreakpoint`
  }), _Ha.inlineSuggestion = _Ha.register({
    name: T(`accessibilitySignals.lineHasInlineSuggestion.name`, `Inline Suggestion on Line`),
    sound: xY.quickFixes,
    legacySoundSettingsKey: `audioCues.lineHasInlineSuggestion`,
    settingsKey: `accessibility.signals.lineHasInlineSuggestion`
  }), _Ha.terminalQuickFix = _Ha.register({
    name: T(`accessibilitySignals.terminalQuickFix.name`, `Terminal Quick Fix`),
    sound: xY.quickFixes,
    legacySoundSettingsKey: `audioCues.terminalQuickFix`,
    legacyAnnouncementSettingsKey: `accessibility.alert.terminalQuickFix`,
    announcementMessage: T(`accessibility.signals.terminalQuickFix`, `Quick Fix`),
    settingsKey: `accessibility.signals.terminalQuickFix`
  }), _Ha.onDebugBreak = _Ha.register({
    name: T(`accessibilitySignals.onDebugBreak.name`, `Debugger Stopped on Breakpoint`),
    sound: xY.break,
    legacySoundSettingsKey: `audioCues.onDebugBreak`,
    legacyAnnouncementSettingsKey: `accessibility.alert.onDebugBreak`,
    announcementMessage: T(`accessibility.signals.onDebugBreak`, `Breakpoint`),
    settingsKey: `accessibility.signals.onDebugBreak`
  }), _Ha.noInlayHints = _Ha.register({
    name: T(`accessibilitySignals.noInlayHints`, `No Inlay Hints on Line`),
    sound: xY.error,
    legacySoundSettingsKey: `audioCues.noInlayHints`,
    legacyAnnouncementSettingsKey: `accessibility.alert.noInlayHints`,
    announcementMessage: T(`accessibility.signals.noInlayHints`, `No Inlay Hints`),
    settingsKey: `accessibility.signals.noInlayHints`
  }), _Ha.taskCompleted = _Ha.register({
    name: T(`accessibilitySignals.taskCompleted`, `Task Completed`),
    sound: xY.taskCompleted,
    legacySoundSettingsKey: `audioCues.taskCompleted`,
    legacyAnnouncementSettingsKey: `accessibility.alert.taskCompleted`,
    announcementMessage: T(`accessibility.signals.taskCompleted`, `Task Completed`),
    settingsKey: `accessibility.signals.taskCompleted`
  }), _Ha.taskFailed = _Ha.register({
    name: T(`accessibilitySignals.taskFailed`, `Task Failed`),
    sound: xY.taskFailed,
    legacySoundSettingsKey: `audioCues.taskFailed`,
    legacyAnnouncementSettingsKey: `accessibility.alert.taskFailed`,
    announcementMessage: T(`accessibility.signals.taskFailed`, `Task Failed`),
    settingsKey: `accessibility.signals.taskFailed`
  }), _Ha.terminalCommandFailed = _Ha.register({
    name: T(`accessibilitySignals.terminalCommandFailed`, `Terminal Command Failed`),
    sound: xY.error,
    legacySoundSettingsKey: `audioCues.terminalCommandFailed`,
    legacyAnnouncementSettingsKey: `accessibility.alert.terminalCommandFailed`,
    announcementMessage: T(`accessibility.signals.terminalCommandFailed`, `Command Failed`),
    settingsKey: `accessibility.signals.terminalCommandFailed`
  }), _Ha.terminalCommandSucceeded = _Ha.register({
    name: T(`accessibilitySignals.terminalCommandSucceeded`, `Terminal Command Succeeded`),
    sound: xY.success,
    announcementMessage: T(`accessibility.signals.terminalCommandSucceeded`, `Command Succeeded`),
    settingsKey: `accessibility.signals.terminalCommandSucceeded`
  }), _Ha.terminalBell = _Ha.register({
    name: T(`accessibilitySignals.terminalBell`, `Terminal Bell`),
    sound: xY.terminalBell,
    legacySoundSettingsKey: `audioCues.terminalBell`,
    legacyAnnouncementSettingsKey: `accessibility.alert.terminalBell`,
    announcementMessage: T(`accessibility.signals.terminalBell`, `Terminal Bell`),
    settingsKey: `accessibility.signals.terminalBell`
  }), _Ha.notebookCellCompleted = _Ha.register({
    name: T(`accessibilitySignals.notebookCellCompleted`, `Notebook Cell Completed`),
    sound: xY.taskCompleted,
    legacySoundSettingsKey: `audioCues.notebookCellCompleted`,
    legacyAnnouncementSettingsKey: `accessibility.alert.notebookCellCompleted`,
    announcementMessage: T(`accessibility.signals.notebookCellCompleted`, `Notebook Cell Completed`),
    settingsKey: `accessibility.signals.notebookCellCompleted`
  }), _Ha.notebookCellFailed = _Ha.register({
    name: T(`accessibilitySignals.notebookCellFailed`, `Notebook Cell Failed`),
    sound: xY.taskFailed,
    legacySoundSettingsKey: `audioCues.notebookCellFailed`,
    legacyAnnouncementSettingsKey: `accessibility.alert.notebookCellFailed`,
    announcementMessage: T(`accessibility.signals.notebookCellFailed`, `Notebook Cell Failed`),
    settingsKey: `accessibility.signals.notebookCellFailed`
  }), _Ha.diffLineInserted = _Ha.register({
    name: T(`accessibilitySignals.diffLineInserted`, `Diff Line Inserted`),
    sound: xY.diffLineInserted,
    legacySoundSettingsKey: `audioCues.diffLineInserted`,
    settingsKey: `accessibility.signals.diffLineInserted`
  }), _Ha.diffLineDeleted = _Ha.register({
    name: T(`accessibilitySignals.diffLineDeleted`, `Diff Line Deleted`),
    sound: xY.diffLineDeleted,
    legacySoundSettingsKey: `audioCues.diffLineDeleted`,
    settingsKey: `accessibility.signals.diffLineDeleted`
  }), _Ha.diffLineModified = _Ha.register({
    name: T(`accessibilitySignals.diffLineModified`, `Diff Line Modified`),
    sound: xY.diffLineModified,
    legacySoundSettingsKey: `audioCues.diffLineModified`,
    settingsKey: `accessibility.signals.diffLineModified`
  }), _Ha.chatRequestSent = _Ha.register({
    name: T(`accessibilitySignals.chatRequestSent`, `Chat Request Sent`),
    sound: xY.chatRequestSent,
    legacySoundSettingsKey: `audioCues.chatRequestSent`,
    legacyAnnouncementSettingsKey: `accessibility.alert.chatRequestSent`,
    announcementMessage: T(`accessibility.signals.chatRequestSent`, `Chat Request Sent`),
    settingsKey: `accessibility.signals.chatRequestSent`
  }), _Ha.chatResponseReceived = _Ha.register({
    name: T(`accessibilitySignals.chatResponseReceived`, `Chat Response Received`),
    legacySoundSettingsKey: `audioCues.chatResponseReceived`,
    sound: {
      randomOneOf: [
        xY.chatResponseReceived1,
        xY.chatResponseReceived2,
        xY.chatResponseReceived3,
        xY.chatResponseReceived4
      ]
    },
    settingsKey: `accessibility.signals.chatResponseReceived`
  }), _Ha.progress = _Ha.register({
    name: T(`accessibilitySignals.progress`, `Progress`),
    sound: xY.progress,
    legacySoundSettingsKey: `audioCues.chatResponsePending`,
    legacyAnnouncementSettingsKey: `accessibility.alert.progress`,
    announcementMessage: T(`accessibility.signals.progress`, `Progress`),
    settingsKey: `accessibility.signals.progress`
  }), _Ha.clear = _Ha.register({
    name: T(`accessibilitySignals.clear`, `Clear`),
    sound: xY.clear,
    legacySoundSettingsKey: `audioCues.clear`,
    legacyAnnouncementSettingsKey: `accessibility.alert.clear`,
    announcementMessage: T(`accessibility.signals.clear`, `Clear`),
    settingsKey: `accessibility.signals.clear`
  }), _Ha.save = _Ha.register({
    name: T(`accessibilitySignals.save`, `Save`),
    sound: xY.save,
    legacySoundSettingsKey: `audioCues.save`,
    legacyAnnouncementSettingsKey: `accessibility.alert.save`,
    announcementMessage: T(`accessibility.signals.save`, `Save`),
    settingsKey: `accessibility.signals.save`
  }), _Ha.format = _Ha.register({
    name: T(`accessibilitySignals.format`, `Format`),
    sound: xY.format,
    legacySoundSettingsKey: `audioCues.format`,
    legacyAnnouncementSettingsKey: `accessibility.alert.format`,
    announcementMessage: T(`accessibility.signals.format`, `Format`),
    settingsKey: `accessibility.signals.format`
  }), _Ha.voiceRecordingStarted = _Ha.register({
    name: T(`accessibilitySignals.voiceRecordingStarted`, `Voice Recording Started`),
    sound: xY.voiceRecordingStarted,
    legacySoundSettingsKey: `audioCues.voiceRecordingStarted`,
    settingsKey: `accessibility.signals.voiceRecordingStarted`
  }), _Ha.voiceRecordingStopped = _Ha.register({
    name: T(`accessibilitySignals.voiceRecordingStopped`, `Voice Recording Stopped`),
    sound: xY.voiceRecordingStopped,
    legacySoundSettingsKey: `audioCues.voiceRecordingStopped`,
    settingsKey: `accessibility.signals.voiceRecordingStopped`
  }), _Ha);
  wY = class extends j {
    constructor(e10, t10 = []) {
      super(), this.logger = new km([
        e10,
        ...t10
      ]), this._register(e10.onDidChangeLogLevel((e11) => this.setLevel(e11)));
    }
    get onDidChangeLogLevel() {
      return this.logger.onDidChangeLogLevel;
    }
    setLevel(e10) {
      this.logger.setLevel(e10);
    }
    getLevel() {
      return this.logger.getLevel();
    }
    trace(e10, ...t10) {
      this.logger.trace(e10, ...t10);
    }
    debug(e10, ...t10) {
      this.logger.debug(e10, ...t10);
    }
    info(e10, ...t10) {
      this.logger.info(e10, ...t10);
    }
    warn(e10, ...t10) {
      this.logger.warn(e10, ...t10);
    }
    error(e10, ...t10) {
      this.logger.error(e10, ...t10);
    }
  };
  const TY = [];
  EY = function(e10) {
    TY.push(e10);
  };
  function DY() {
    return TY.slice(0);
  }
  var OY = class {
    getParseResult(e10) {
    }
  }, kY = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, AY = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, jY = class {
    constructor(e10) {
      this.disposed = false, this.model = e10, this._onWillDispose = new N();
    }
    get textEditorModel() {
      return this.model;
    }
    dispose() {
      this.disposed = true, this._onWillDispose.fire();
    }
  };
  let MY = class {
    constructor(e10) {
      this.modelService = e10;
    }
    createModelReference(e10) {
      let t10 = this.modelService.getModel(e10);
      return t10 ? Promise.resolve(new Hr(new jY(t10))) : Promise.reject(Error(`Model not found`));
    }
  };
  MY = kY([
    AY(0, Qf)
  ], MY);
  var NY = (_Ia = class {
    show() {
      return _Ia.NULL_PROGRESS_RUNNER;
    }
    async showWhile(e10, t10) {
      await e10;
    }
  }, _Ia.NULL_PROGRESS_RUNNER = {
    done: () => {
    },
    total: () => {
    },
    worked: () => {
    }
  }, _Ia), PY = class {
    withProgress(e10, t10, n10) {
      return t10({
        report: () => {
        }
      });
    }
  }, FY = class {
    constructor() {
      this.isExtensionDevelopment = false, this.isBuilt = false;
    }
  }, IY = class {
    async confirm(e10) {
      let t10 = this.doConfirm(e10.message, e10.detail);
      return {
        confirmed: t10,
        checkboxChecked: false
      };
    }
    doConfirm(e10, t10) {
      let n10 = e10;
      return t10 && (n10 = n10 + `

` + t10), os.confirm(n10);
    }
    async prompt(e10) {
      var _a3;
      let t10, n10 = this.doConfirm(e10.message, e10.detail);
      if (n10) {
        let n11 = [
          ...e10.buttons ?? []
        ];
        e10.cancelButton && typeof e10.cancelButton != `string` && typeof e10.cancelButton != `boolean` && n11.push(e10.cancelButton), t10 = await ((_a3 = n11[0]) == null ? void 0 : _a3.run({
          checkboxChecked: false
        }));
      }
      return {
        result: t10
      };
    }
    async error(e10, t10) {
      await this.prompt({
        type: sx.Error,
        message: e10,
        detail: t10
      });
    }
  }, LY = (_Ja = class {
    info(e10) {
      return this.notify({
        severity: sx.Info,
        message: e10
      });
    }
    warn(e10) {
      return this.notify({
        severity: sx.Warning,
        message: e10
      });
    }
    error(e10) {
      return this.notify({
        severity: sx.Error,
        message: e10
      });
    }
    notify(t10) {
      switch (t10.severity) {
        case sx.Error:
          console.error(t10.message);
          break;
        case sx.Warning:
          console.warn(t10.message);
          break;
        default:
          console.log(t10.message);
          break;
      }
      return _Ja.NO_OP;
    }
    prompt(t10, n10, r10, i10) {
      return _Ja.NO_OP;
    }
    status(e10, t10) {
      return j.None;
    }
  }, _Ja.NO_OP = new dx(), _Ja);
  let RY = class {
    constructor(e10) {
      this._onWillExecuteCommand = new N(), this._onDidExecuteCommand = new N(), this.onDidExecuteCommand = this._onDidExecuteCommand.event, this._instantiationService = e10;
    }
    executeCommand(e10, ...t10) {
      let n10 = lp.getCommand(e10);
      if (!n10) return Promise.reject(Error(`command '${e10}' not found`));
      try {
        this._onWillExecuteCommand.fire({
          commandId: e10,
          args: t10
        });
        let r10 = this._instantiationService.invokeFunction.apply(this._instantiationService, [
          n10.handler,
          ...t10
        ]);
        return this._onDidExecuteCommand.fire({
          commandId: e10,
          args: t10
        }), Promise.resolve(r10);
      } catch (e11) {
        return Promise.reject(e11);
      }
    }
  };
  RY = kY([
    AY(0, Jf)
  ], RY);
  let zY = class extends Yj {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(e10, t10, n10, r10, i10), this._cachedResolver = null, this._dynamicKeybindings = [], this._domNodeListeners = [];
      let o10 = (e11) => {
        let t11 = new A();
        t11.add(z(e11, B.KEY_DOWN, (e12) => {
          let t12 = new Hc(e12), n11 = this._dispatch(t12, t12.target);
          n11 && (t12.preventDefault(), t12.stopPropagation());
        })), t11.add(z(e11, B.KEY_UP, (e12) => {
          let t12 = new Hc(e12), n11 = this._singleModifierDispatch(t12, t12.target);
          n11 && t12.preventDefault();
        })), this._domNodeListeners.push(new BY(e11, t11));
      }, s10 = (e11) => {
        for (let t11 = 0; t11 < this._domNodeListeners.length; t11++) {
          let n11 = this._domNodeListeners[t11];
          n11.domNode === e11 && (this._domNodeListeners.splice(t11, 1), n11.dispose());
        }
      }, c10 = (e11) => {
        e11.getOption(61) || o10(e11.getContainerDomNode());
      }, l10 = (e11) => {
        e11.getOption(61) || s10(e11.getContainerDomNode());
      };
      this._register(a10.onCodeEditorAdd(c10)), this._register(a10.onCodeEditorRemove(l10)), a10.listCodeEditors().forEach(c10);
      let u10 = (e11) => {
        o10(e11.getContainerDomNode());
      }, d10 = (e11) => {
        s10(e11.getContainerDomNode());
      };
      this._register(a10.onDiffEditorAdd(u10)), this._register(a10.onDiffEditorRemove(d10)), a10.listDiffEditors().forEach(u10);
    }
    addDynamicKeybinding(e10, t10, n10, r10) {
      return zr(lp.registerCommand(e10, n10), this.addDynamicKeybindings([
        {
          keybinding: t10,
          command: e10,
          when: r10
        }
      ]));
    }
    addDynamicKeybindings(e10) {
      let t10 = e10.map((e11) => {
        let t11 = jc(e11.keybinding, Et);
        return {
          keybinding: t11,
          command: e11.command ?? null,
          commandArgs: e11.commandArgs,
          when: e11.when,
          weight1: 1e3,
          weight2: 0,
          extensionId: null,
          isBuiltinExtension: false
        };
      });
      return this._dynamicKeybindings = this._dynamicKeybindings.concat(t10), this.updateResolver(), k(() => {
        for (let e11 = 0; e11 < this._dynamicKeybindings.length; e11++) if (this._dynamicKeybindings[e11] === t10[0]) {
          this._dynamicKeybindings.splice(e11, t10.length), this.updateResolver();
          return;
        }
      });
    }
    updateResolver() {
      this._cachedResolver = null, this._onDidUpdateKeybindings.fire();
    }
    _getResolver() {
      if (!this._cachedResolver) {
        let e10 = this._toNormalizedKeybindingItems(sm.getDefaultKeybindings(), true), t10 = this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);
        this._cachedResolver = new Gj(e10, t10, (e11) => this._log(e11));
      }
      return this._cachedResolver;
    }
    _documentHasFocus() {
      return os.document.hasFocus();
    }
    _toNormalizedKeybindingItems(e10, t10) {
      let n10 = [], r10 = 0;
      for (let i10 of e10) {
        let e11 = i10.when || void 0, a10 = i10.keybinding;
        if (!a10) n10[r10++] = new Zj(void 0, i10.command, i10.commandArgs, e11, t10, null, false);
        else {
          let o10 = oM.resolveKeybinding(a10, Et);
          for (let a11 of o10) n10[r10++] = new Zj(a11, i10.command, i10.commandArgs, e11, t10, null, false);
        }
      }
      return n10;
    }
    resolveKeyboardEvent(e10) {
      let t10 = new Nc(e10.ctrlKey, e10.shiftKey, e10.altKey, e10.metaKey, e10.keyCode);
      return new oM([
        t10
      ], Et);
    }
  };
  zY = kY([
    AY(0, qp),
    AY(1, cp),
    AY(2, Cm),
    AY(3, ux),
    AY(4, wm),
    AY(5, Zf)
  ], zY);
  var BY = class extends j {
    constructor(e10, t10) {
      super(), this.domNode = e10, this._register(t10);
    }
  };
  function VY(e10) {
    return e10 && typeof e10 == `object` && (!e10.overrideIdentifier || typeof e10.overrideIdentifier == `string`) && (!e10.resource || e10.resource instanceof xa);
  }
  let HY = class {
    constructor(e10) {
      this.logService = e10, this._onDidChangeConfiguration = new N(), this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
      let t10 = new yY(e10);
      this._configuration = new Rj(t10.reload(), Fj.createEmptyModel(e10), Fj.createEmptyModel(e10), Fj.createEmptyModel(e10), Fj.createEmptyModel(e10), Fj.createEmptyModel(e10), new H_(), Fj.createEmptyModel(e10), new H_(), e10), t10.dispose();
    }
    getValue(e10, t10) {
      let n10 = typeof e10 == `string` ? e10 : void 0, r10 = VY(e10) ? e10 : VY(t10) ? t10 : {};
      return this._configuration.getValue(n10, r10, void 0);
    }
    updateValues(e10) {
      let t10 = {
        data: this._configuration.toData()
      }, n10 = [];
      for (let t11 of e10) {
        let [e11, r10] = t11;
        if (this.getValue(e11) === r10) continue;
        this._configuration.updateValue(e11, r10), n10.push(e11);
      }
      if (n10.length > 0) {
        let e11 = new zj({
          keys: n10,
          overrides: []
        }, t10, this._configuration, void 0, this.logService);
        e11.source = 8, this._onDidChangeConfiguration.fire(e11);
      }
      return Promise.resolve();
    }
    updateValue(e10, t10, n10, r10) {
      return this.updateValues([
        [
          e10,
          t10
        ]
      ]);
    }
    inspect(e10, t10 = {}) {
      return this._configuration.inspect(e10, t10, void 0);
    }
  };
  HY = kY([
    AY(0, wm)
  ], HY);
  let UY = class {
    constructor(e10, t10, n10) {
      this.configurationService = e10, this.modelService = t10, this.languageService = n10, this._onDidChangeConfiguration = new N(), this.configurationService.onDidChangeConfiguration((e11) => {
        this._onDidChangeConfiguration.fire({
          affectedKeys: e11.affectedKeys,
          affectsConfiguration: (t11, n11) => e11.affectsConfiguration(n11)
        });
      });
    }
    getValue(e10, t10, n10) {
      let r10 = P.isIPosition(t10) ? t10 : null, i10 = r10 ? typeof n10 == `string` ? n10 : void 0 : typeof t10 == `string` ? t10 : void 0, a10 = e10 ? this.getLanguage(e10, r10) : void 0;
      return i10 === void 0 ? this.configurationService.getValue({
        resource: e10,
        overrideIdentifier: a10
      }) : this.configurationService.getValue(i10, {
        resource: e10,
        overrideIdentifier: a10
      });
    }
    getLanguage(e10, t10) {
      let n10 = this.modelService.getModel(e10);
      return n10 ? t10 ? n10.getLanguageIdAtPosition(t10.lineNumber, t10.column) : n10.getLanguageId() : this.languageService.guessLanguageIdByFilepathOrFirstLine(e10);
    }
  };
  UY = kY([
    AY(0, ug),
    AY(1, Qf),
    AY(2, _g)
  ], UY);
  let WY = class {
    constructor(e10) {
      this.configurationService = e10;
    }
    getEOL(e10, t10) {
      let n10 = this.configurationService.getValue(`files.eol`, {
        overrideIdentifier: t10,
        resource: e10
      });
      return n10 && typeof n10 == `string` && n10 !== `auto` ? n10 : ht || E ? `
` : `\r
`;
    }
  };
  WY = kY([
    AY(0, ug)
  ], WY);
  var GY = class {
    publicLog2() {
    }
  }, KY = (_Ka = class {
    constructor() {
      let t10 = xa.from({
        scheme: _Ka.SCHEME,
        authority: `model`,
        path: `/`
      });
      this.workspace = {
        id: EM,
        folders: [
          new wM({
            uri: t10,
            name: ``,
            index: 0
          })
        ]
      };
    }
    getWorkspace() {
      return this.workspace;
    }
    getWorkspaceFolder(t10) {
      return t10 && t10.scheme === _Ka.SCHEME ? this.workspace.folders[0] : null;
    }
  }, _Ka.SCHEME = `inmemory`, _Ka);
  function qY(e10, t10, n10) {
    if (!t10 || !(e10 instanceof HY)) return;
    let r10 = [];
    Object.keys(t10).forEach((e11) => {
      Aj(e11) && r10.push([
        `editor.${e11}`,
        t10[e11]
      ]), n10 && jj(e11) && r10.push([
        `diffEditor.${e11}`,
        t10[e11]
      ]);
    }), r10.length > 0 && e10.updateValues(r10);
  }
  let JY = class {
    constructor(e10) {
      this._modelService = e10;
    }
    hasPreviewHandler() {
      return false;
    }
    async apply(e10, t10) {
      let n10 = Array.isArray(e10) ? e10 : xj.convert(e10), r10 = /* @__PURE__ */ new Map();
      for (let e11 of n10) {
        if (!(e11 instanceof Sj)) throw Error(`bad edit - only text edits are supported`);
        let t11 = this._modelService.getModel(e11.resource);
        if (!t11) throw Error(`bad edit - model not found`);
        if (typeof e11.versionId == `number` && t11.getVersionId() !== e11.versionId) throw Error(`bad state - model changed in the meantime`);
        let n11 = r10.get(t11);
        n11 || (n11 = [], r10.set(t11, n11)), n11.push(Nj.replaceMove(F.lift(e11.textEdit.range), e11.textEdit.text));
      }
      let i10 = 0, a10 = 0;
      for (let [e11, t11] of r10) e11.pushStackElement(), e11.pushEditOperations([], t11, () => []), e11.pushStackElement(), a10 += 1, i10 += t11.length;
      return {
        ariaSummary: ps(FM.bulkEditServiceSummary, i10, a10),
        isApplied: i10 > 0
      };
    }
  };
  JY = kY([
    AY(0, Qf)
  ], JY);
  var YY = class {
    getUriLabel(e10, t10) {
      return e10.scheme === `file` ? e10.fsPath : e10.path;
    }
    getUriBasenameLabel(e10) {
      return ck(e10);
    }
  };
  let XY = class extends fj {
    constructor(e10, t10) {
      super(e10), this._codeEditorService = t10;
    }
    showContextView(e10, t10, n10) {
      if (!t10) {
        let e11 = this._codeEditorService.getFocusedCodeEditor() || this._codeEditorService.getActiveCodeEditor();
        e11 && (t10 = e11.getContainerDomNode());
      }
      return super.showContextView(e10, t10, n10);
    }
  };
  XY = kY([
    AY(0, tx),
    AY(1, Zf)
  ], XY);
  var ZY = class {
    constructor() {
      this._neverEmitter = new N(), this.onDidChangeTrust = this._neverEmitter.event;
    }
    isWorkspaceTrusted() {
      return true;
    }
  }, QY = class extends EP {
    constructor() {
      super();
    }
  }, $Y = class extends wY {
    constructor() {
      super(new Om());
    }
  };
  let eX = class extends KI {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(e10, t10, n10, r10, i10, a10), this.configure({
        blockMouse: false
      });
    }
  };
  eX = kY([
    AY(0, Cm),
    AY(1, ux),
    AY(2, AE),
    AY(3, ME),
    AY(4, gm),
    AY(5, qp)
  ], eX);
  const tX = {
    amdModuleId: `vs/editor/common/services/editorSimpleWorker`,
    esmModuleLocation: void 0,
    label: `editorWorkerService`
  };
  let nX = class extends Nb {
    constructor(e10, t10, n10, r10, i10) {
      super(tX, e10, t10, n10, r10, i10);
    }
  };
  nX = kY([
    AY(0, Qf),
    AY(1, Eb),
    AY(2, wm),
    AY(3, i_),
    AY(4, Ob)
  ], nX);
  var rX = class {
    async playSignal(e10, t10) {
    }
  };
  bg(wm, $Y, 0), bg(ug, HY, 0), bg(Eb, UY, 0), bg(Db, WY, 0), bg(_M, KY, 0), bg(sM, YY, 0), bg(Cm, GY, 0), bg(cx, IY, 0), bg(Nx, FY, 0), bg(ux, LY, 0), bg(rL, vY, 0), bg(_g, QY, 0), bg(wJ, CJ, 0), bg(Qf, kH, 0), bg(hR, pR, 0), bg(qp, rY, 0), bg(cM, PY, 0), bg(uM, NY, 0), bg(nI, oI, 0), bg(eL, nX, 0), bg(bj, JY, 0), bg(IM, ZY, 0), bg($f, MY, 0), bg(zA, DJ, 0), bg(IG, LG, 0), bg(cp, RY, 0), bg(ME, zY, 0), bg(BH, Pq, 0), bg(AE, XY, 0), bg(vD, $I, 0), bg(WJ, UJ, 0), bg(jE, eX, 0), bg(gm, MJ, 0), bg(bY, rX, 0), bg(DV, OY, 0);
  var Q;
  (function(e10) {
    let t10 = new uY();
    for (let [e11, n11] of xg()) t10.set(e11, n11);
    let n10 = new pY(t10, true);
    t10.set(Jf, n10);
    function r10(e11) {
      i10 || o10({});
      let r11 = t10.get(e11);
      if (!r11) throw Error(`Missing service ` + e11);
      return r11 instanceof vg ? n10.invokeFunction((t11) => t11.get(e11)) : r11;
    }
    e10.get = r10;
    let i10 = false, a10 = new N();
    function o10(e11) {
      if (i10) return n10;
      i10 = true;
      for (let [e12, n11] of xg()) t10.get(e12) || t10.set(e12, n11);
      for (let n11 in e11) if (e11.hasOwnProperty(n11)) {
        let r12 = Xf(n11), i11 = t10.get(r12);
        i11 instanceof vg && t10.set(r12, e11[n11]);
      }
      let r11 = DY();
      for (let e12 of r11) try {
        n10.createInstance(e12);
      } catch (e13) {
        gr(e13);
      }
      return a10.fire(), n10;
    }
    e10.initialize = o10;
    function s10(e11) {
      if (i10) return e11();
      let t11 = new A(), n11 = t11.add(a10.event(() => {
        n11.dispose(), t11.add(e11());
      }));
      return t11;
    }
    e10.withServices = s10;
  })(Q || (Q = {}));
  function iX(e10, t10) {
    return new aX(e10, t10);
  }
  var aX = class extends Lb {
    constructor(e10, t10) {
      let n10 = {
        amdModuleId: tX.amdModuleId,
        esmModuleLocation: tX.esmModuleLocation,
        label: t10.label
      };
      super(n10, t10.keepIdleModels || false, e10), this._foreignModuleId = t10.moduleId, this._foreignModuleCreateData = t10.createData || null, this._foreignModuleHost = t10.host || null, this._foreignProxy = null;
    }
    fhr(e10, t10) {
      if (!this._foreignModuleHost || typeof this._foreignModuleHost[e10] != `function`) return Promise.reject(Error(`Missing method ` + e10 + ` or missing main thread foreign host.`));
      try {
        return Promise.resolve(this._foreignModuleHost[e10].apply(this._foreignModuleHost, t10));
      } catch (e11) {
        return Promise.reject(e11);
      }
    }
    _getForeignProxy() {
      return this._foreignProxy || (this._foreignProxy = this._getProxy().then((e10) => {
        let t10 = this._foreignModuleHost ? ze(this._foreignModuleHost) : [];
        return e10.$loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData, t10).then((t11) => {
          this._foreignModuleCreateData = null;
          let n10 = (t12, n11) => e10.$fmr(t12, n11), r10 = (e11, t12) => function() {
            let n11 = Array.prototype.slice.call(arguments, 0);
            return t12(e11, n11);
          }, i10 = {};
          for (let e11 of t11) i10[e11] = r10(e11, n10);
          return i10;
        });
      })), this._foreignProxy;
    }
    getProxy() {
      return this._getForeignProxy();
    }
    withSyncedResources(e10) {
      return this.workerWithSyncedResources(e10).then((e11) => this.getProxy());
    }
  };
  const oX = {
    ICodeEditor: `vs.editor.ICodeEditor`,
    IDiffEditor: `vs.editor.IDiffEditor`
  };
  let cX, lX, uX, dX, fX, mX, hX, gX;
  sX = class e10 {
    constructor(e11, t10, n10, r10) {
      this.startColumn = e11, this.endColumn = t10, this.className = n10, this.type = r10, this._lineDecorationBrand = void 0;
    }
    static _equals(e11, t10) {
      return e11.startColumn === t10.startColumn && e11.endColumn === t10.endColumn && e11.className === t10.className && e11.type === t10.type;
    }
    static equalsArr(t10, n10) {
      let r10 = t10.length, i10 = n10.length;
      if (r10 !== i10) return false;
      for (let i11 = 0; i11 < r10; i11++) if (!e10._equals(t10[i11], n10[i11])) return false;
      return true;
    }
    static extractWrapped(t10, n10, r10) {
      if (t10.length === 0) return t10;
      let i10 = n10 + 1, a10 = r10 + 1, o10 = r10 - n10, s10 = [], c10 = 0;
      for (let n11 of t10) {
        if (n11.endColumn <= i10 || n11.startColumn >= a10) continue;
        s10[c10++] = new e10(Math.max(1, n11.startColumn - i10 + 1), Math.min(o10 + 1, n11.endColumn - i10 + 1), n11.className, n11.type);
      }
      return s10;
    }
    static filter(t10, n10, r10, i10) {
      if (t10.length === 0) return [];
      let a10 = [], o10 = 0;
      for (let s10 = 0, c10 = t10.length; s10 < c10; s10++) {
        let c11 = t10[s10], l10 = c11.range;
        if (l10.endLineNumber < n10 || l10.startLineNumber > n10 || l10.isEmpty() && (c11.type === 0 || c11.type === 3)) continue;
        let u10 = l10.startLineNumber === n10 ? l10.startColumn : r10, d10 = l10.endLineNumber === n10 ? l10.endColumn : i10;
        a10[o10++] = new e10(u10, d10, c11.inlineClassName, c11.type);
      }
      return a10;
    }
    static _typeCompare(e11, t10) {
      let n10 = [
        2,
        0,
        1,
        3
      ];
      return n10[e11] - n10[t10];
    }
    static compare(t10, n10) {
      if (t10.startColumn !== n10.startColumn) return t10.startColumn - n10.startColumn;
      if (t10.endColumn !== n10.endColumn) return t10.endColumn - n10.endColumn;
      let r10 = e10._typeCompare(t10.type, n10.type);
      return r10 === 0 ? t10.className === n10.className ? 0 : t10.className < n10.className ? -1 : 1 : r10;
    }
  };
  cX = class {
    constructor(e10, t10, n10, r10) {
      this.startOffset = e10, this.endOffset = t10, this.className = n10, this.metadata = r10;
    }
  };
  lX = class e10 {
    constructor() {
      this.stopOffsets = [], this.classNames = [], this.metadata = [], this.count = 0;
    }
    static _metadata(e11) {
      let t10 = 0;
      for (let n10 = 0, r10 = e11.length; n10 < r10; n10++) t10 |= e11[n10];
      return t10;
    }
    consumeLowerThan(t10, n10, r10) {
      for (; this.count > 0 && this.stopOffsets[0] < t10; ) {
        let t11 = 0;
        for (; t11 + 1 < this.count && this.stopOffsets[t11] === this.stopOffsets[t11 + 1]; ) t11++;
        r10.push(new cX(n10, this.stopOffsets[t11], this.classNames.join(` `), e10._metadata(this.metadata))), n10 = this.stopOffsets[t11] + 1, this.stopOffsets.splice(0, t11 + 1), this.classNames.splice(0, t11 + 1), this.metadata.splice(0, t11 + 1), this.count -= t11 + 1;
      }
      return this.count > 0 && n10 < t10 && (r10.push(new cX(n10, t10 - 1, this.classNames.join(` `), e10._metadata(this.metadata))), n10 = t10), n10;
    }
    insert(e11, t10, n10) {
      if (this.count === 0 || this.stopOffsets[this.count - 1] <= e11) this.stopOffsets.push(e11), this.classNames.push(t10), this.metadata.push(n10);
      else for (let r10 = 0; r10 < this.count; r10++) if (this.stopOffsets[r10] >= e11) {
        this.stopOffsets.splice(r10, 0, e11), this.classNames.splice(r10, 0, t10), this.metadata.splice(r10, 0, n10);
        break;
      }
      this.count++;
    }
  };
  uX = class {
    static normalize(e10, t10) {
      if (t10.length === 0) return [];
      let n10 = [], r10 = new lX(), i10 = 0;
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10], s10 = o11.startColumn, c10 = o11.endColumn, l10 = o11.className, u10 = o11.type === 1 ? 2 : o11.type === 2 ? 4 : 0;
        if (s10 > 1) {
          let t11 = e10.charCodeAt(s10 - 2);
          Bs(t11) && s10--;
        }
        if (c10 > 1) {
          let t11 = e10.charCodeAt(c10 - 2);
          Bs(t11) && c10--;
        }
        let d10 = s10 - 1, f10 = c10 - 2;
        i10 = r10.consumeLowerThan(d10, i10, n10), r10.count === 0 && (i10 = d10), r10.insert(f10, l10, u10);
      }
      return r10.consumeLowerThan(1073741824, i10, n10), n10;
    }
  };
  dX = class {
    constructor(e10, t10, n10, r10) {
      this.endIndex = e10, this.type = t10, this.metadata = n10, this.containsRTL = r10, this._linePartBrand = void 0;
    }
    isWhitespace() {
      return !!(this.metadata & 1);
    }
    isPseudoAfter() {
      return !!(this.metadata & 4);
    }
  };
  fX = class {
    constructor(e10, t10) {
      this.startOffset = e10, this.endOffset = t10;
    }
    equals(e10) {
      return this.startOffset === e10.startOffset && this.endOffset === e10.endOffset;
    }
  };
  pX = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10, p10, m10, h10, g10, _10, v10) {
      this.useMonospaceOptimizations = e10, this.canUseHalfwidthRightwardsArrow = t10, this.lineContent = n10, this.continuesWithWrappedLine = r10, this.isBasicASCII = i10, this.containsRTL = a10, this.fauxIndentLength = o10, this.lineTokens = s10, this.lineDecorations = c10.sort(sX.compare), this.tabSize = l10, this.startVisibleColumn = u10, this.spaceWidth = d10, this.stopRenderingLineAfter = m10, this.renderWhitespace = h10 === `all` ? 4 : h10 === `boundary` ? 1 : h10 === `selection` ? 2 : h10 === `trailing` ? 3 : 0, this.renderControlCharacters = g10, this.fontLigatures = _10, this.selectionsOnLine = v10 && v10.sort((e11, t11) => e11.startOffset < t11.startOffset ? -1 : 1);
      let y10 = Math.abs(p10 - d10), b10 = Math.abs(f10 - d10);
      y10 < b10 ? (this.renderSpaceWidth = p10, this.renderSpaceCharCode = 11825) : (this.renderSpaceWidth = f10, this.renderSpaceCharCode = 183);
    }
    sameSelection(e10) {
      if (this.selectionsOnLine === null) return e10 === null;
      if (e10 === null || e10.length !== this.selectionsOnLine.length) return false;
      for (let t10 = 0; t10 < this.selectionsOnLine.length; t10++) if (!this.selectionsOnLine[t10].equals(e10[t10])) return false;
      return true;
    }
    equals(e10) {
      return this.useMonospaceOptimizations === e10.useMonospaceOptimizations && this.canUseHalfwidthRightwardsArrow === e10.canUseHalfwidthRightwardsArrow && this.lineContent === e10.lineContent && this.continuesWithWrappedLine === e10.continuesWithWrappedLine && this.isBasicASCII === e10.isBasicASCII && this.containsRTL === e10.containsRTL && this.fauxIndentLength === e10.fauxIndentLength && this.tabSize === e10.tabSize && this.startVisibleColumn === e10.startVisibleColumn && this.spaceWidth === e10.spaceWidth && this.renderSpaceWidth === e10.renderSpaceWidth && this.renderSpaceCharCode === e10.renderSpaceCharCode && this.stopRenderingLineAfter === e10.stopRenderingLineAfter && this.renderWhitespace === e10.renderWhitespace && this.renderControlCharacters === e10.renderControlCharacters && this.fontLigatures === e10.fontLigatures && sX.equalsArr(this.lineDecorations, e10.lineDecorations) && this.lineTokens.equals(e10.lineTokens) && this.sameSelection(e10.selectionsOnLine);
    }
  };
  mX = class {
    constructor(e10, t10) {
      this.partIndex = e10, this.charIndex = t10;
    }
  };
  hX = class e10 {
    static getPartIndex(e11) {
      return (e11 & 4294901760) >>> 16;
    }
    static getCharIndex(e11) {
      return (e11 & 65535) >>> 0;
    }
    constructor(e11, t10) {
      this.length = e11, this._data = new Uint32Array(this.length), this._horizontalOffset = new Uint32Array(this.length);
    }
    setColumnInfo(e11, t10, n10, r10) {
      let i10 = (t10 << 16 | n10 << 0) >>> 0;
      this._data[e11 - 1] = i10, this._horizontalOffset[e11 - 1] = r10;
    }
    getHorizontalOffset(e11) {
      return this._horizontalOffset.length === 0 ? 0 : this._horizontalOffset[e11 - 1];
    }
    charOffsetToPartData(e11) {
      return this.length === 0 ? 0 : e11 < 0 ? this._data[0] : e11 >= this.length ? this._data[this.length - 1] : this._data[e11];
    }
    getDomPosition(t10) {
      let n10 = this.charOffsetToPartData(t10 - 1), r10 = e10.getPartIndex(n10), i10 = e10.getCharIndex(n10);
      return new mX(r10, i10);
    }
    getColumn(e11, t10) {
      let n10 = this.partDataToCharOffset(e11.partIndex, t10, e11.charIndex);
      return n10 + 1;
    }
    partDataToCharOffset(t10, n10, r10) {
      if (this.length === 0) return 0;
      let i10 = (t10 << 16 | r10 << 0) >>> 0, a10 = 0, o10 = this.length - 1;
      for (; a10 + 1 < o10; ) {
        let e11 = a10 + o10 >>> 1, t11 = this._data[e11];
        if (t11 === i10) return e11;
        t11 > i10 ? o10 = e11 : a10 = e11;
      }
      if (a10 === o10) return a10;
      let s10 = this._data[a10], c10 = this._data[o10];
      if (s10 === i10) return a10;
      if (c10 === i10) return o10;
      let l10 = e10.getPartIndex(s10), u10 = e10.getCharIndex(s10), d10 = e10.getPartIndex(c10), f10;
      f10 = l10 === d10 ? e10.getCharIndex(c10) : n10;
      let p10 = r10 - u10, m10 = f10 - r10;
      return p10 <= m10 ? a10 : o10;
    }
  };
  gX = class {
    constructor(e10, t10, n10) {
      this._renderLineOutputBrand = void 0, this.characterMapping = e10, this.containsRTL = t10, this.containsForeignElements = n10;
    }
  };
  _X = function(e10, t10) {
    if (e10.lineContent.length === 0) {
      if (e10.lineDecorations.length > 0) {
        t10.appendString(`<span>`);
        let n10 = 0, r10 = 0, i10 = 0;
        for (let a11 of e10.lineDecorations) (a11.type === 1 || a11.type === 2) && (t10.appendString(`<span class="`), t10.appendString(a11.className), t10.appendString(`"></span>`), a11.type === 1 && (i10 |= 1, n10++), a11.type === 2 && (i10 |= 2, r10++));
        t10.appendString(`</span>`);
        let a10 = new hX(1, n10 + r10);
        return a10.setColumnInfo(1, n10, 0, 0), new gX(a10, false, i10);
      }
      return t10.appendString(`<span><span></span></span>`), new gX(new hX(0, 0), false, 0);
    }
    return OX(xX(e10), t10);
  };
  var vX = class {
    constructor(e10, t10, n10, r10) {
      this.characterMapping = e10, this.html = t10, this.containsRTL = n10, this.containsForeignElements = r10;
    }
  };
  function yX(e10) {
    let t10 = new Gh(1e4), n10 = _X(e10, t10);
    return new vX(n10.characterMapping, t10.build(), n10.containsRTL, n10.containsForeignElements);
  }
  var bX = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10, p10, m10, h10) {
      this.fontIsMonospace = e10, this.canUseHalfwidthRightwardsArrow = t10, this.lineContent = n10, this.len = r10, this.isOverflowing = i10, this.overflowingCharCount = a10, this.parts = o10, this.containsForeignElements = s10, this.fauxIndentLength = c10, this.tabSize = l10, this.startVisibleColumn = u10, this.containsRTL = d10, this.spaceWidth = f10, this.renderSpaceCharCode = p10, this.renderWhitespace = m10, this.renderControlCharacters = h10;
    }
  };
  function xX(e10) {
    let t10 = e10.lineContent, n10, r10, i10;
    e10.stopRenderingLineAfter !== -1 && e10.stopRenderingLineAfter < t10.length ? (n10 = true, r10 = t10.length - e10.stopRenderingLineAfter, i10 = e10.stopRenderingLineAfter) : (n10 = false, r10 = 0, i10 = t10.length);
    let a10 = SX(t10, e10.containsRTL, e10.lineTokens, e10.fauxIndentLength, i10);
    e10.renderControlCharacters && !e10.isBasicASCII && (a10 = TX(t10, a10)), (e10.renderWhitespace === 4 || e10.renderWhitespace === 1 || e10.renderWhitespace === 2 && e10.selectionsOnLine || e10.renderWhitespace === 3 && !e10.continuesWithWrappedLine) && (a10 = EX(e10, t10, i10, a10));
    let o10 = 0;
    if (e10.lineDecorations.length > 0) {
      for (let t11 = 0, n11 = e10.lineDecorations.length; t11 < n11; t11++) {
        let n12 = e10.lineDecorations[t11];
        n12.type === 3 || n12.type === 1 ? o10 |= 1 : n12.type === 2 && (o10 |= 2);
      }
      a10 = DX(t10, i10, a10, e10.lineDecorations);
    }
    return e10.containsRTL || (a10 = CX(t10, a10, !e10.isBasicASCII || e10.fontLigatures)), new bX(e10.useMonospaceOptimizations, e10.canUseHalfwidthRightwardsArrow, t10, i10, n10, r10, a10, o10, e10.fauxIndentLength, e10.tabSize, e10.startVisibleColumn, e10.containsRTL, e10.spaceWidth, e10.renderSpaceCharCode, e10.renderWhitespace, e10.renderControlCharacters);
  }
  function SX(e10, t10, n10, r10, i10) {
    let a10 = [], o10 = 0;
    r10 > 0 && (a10[o10++] = new dX(r10, ``, 0, false));
    let s10 = r10;
    for (let c10 = 0, l10 = n10.getCount(); c10 < l10; c10++) {
      let l11 = n10.getEndOffset(c10);
      if (l11 <= r10) continue;
      let u10 = n10.getClassName(c10);
      if (l11 >= i10) {
        let n11 = t10 ? Qs(e10.substring(s10, i10)) : false;
        a10[o10++] = new dX(i10, u10, 0, n11);
        break;
      }
      let d10 = t10 ? Qs(e10.substring(s10, l11)) : false;
      a10[o10++] = new dX(l11, u10, 0, d10), s10 = l11;
    }
    return a10;
  }
  function CX(e10, t10, n10) {
    let r10 = 0, i10 = [], a10 = 0;
    if (n10) for (let n11 = 0, o10 = t10.length; n11 < o10; n11++) {
      let o11 = t10[n11], s10 = o11.endIndex;
      if (r10 + 50 < s10) {
        let t11 = o11.type, n12 = o11.metadata, c10 = o11.containsRTL, l10 = -1, u10 = r10;
        for (let o12 = r10; o12 < s10; o12++) e10.charCodeAt(o12) === 32 && (l10 = o12), l10 !== -1 && o12 - u10 >= 50 && (i10[a10++] = new dX(l10 + 1, t11, n12, c10), u10 = l10 + 1, l10 = -1);
        u10 !== s10 && (i10[a10++] = new dX(s10, t11, n12, c10));
      } else i10[a10++] = o11;
      r10 = s10;
    }
    else for (let e11 = 0, n11 = t10.length; e11 < n11; e11++) {
      let n12 = t10[e11], o10 = n12.endIndex, s10 = o10 - r10;
      if (s10 > 50) {
        let e12 = n12.type, t11 = n12.metadata, c10 = n12.containsRTL, l10 = Math.ceil(s10 / 50);
        for (let n13 = 1; n13 < l10; n13++) {
          let o11 = r10 + n13 * 50;
          i10[a10++] = new dX(o11, e12, t11, c10);
        }
        i10[a10++] = new dX(o10, e12, t11, c10);
      } else i10[a10++] = n12;
      r10 = o10;
    }
    return i10;
  }
  function wX(e10) {
    return e10 < 32 ? e10 !== 9 : e10 === 127 || e10 >= 8234 && e10 <= 8238 || e10 >= 8294 && e10 <= 8297 || e10 >= 8206 && e10 <= 8207 || e10 === 1564;
  }
  function TX(e10, t10) {
    let n10 = [], r10 = new dX(0, ``, 0, false), i10 = 0;
    for (let a10 of t10) {
      let t11 = a10.endIndex;
      for (; i10 < t11; i10++) {
        let t12 = e10.charCodeAt(i10);
        wX(t12) && (i10 > r10.endIndex && (r10 = new dX(i10, a10.type, a10.metadata, a10.containsRTL), n10.push(r10)), r10 = new dX(i10 + 1, `mtkcontrol`, a10.metadata, false), n10.push(r10));
      }
      i10 > r10.endIndex && (r10 = new dX(t11, a10.type, a10.metadata, a10.containsRTL), n10.push(r10));
    }
    return n10;
  }
  function EX(e10, t10, n10, r10) {
    let i10 = e10.continuesWithWrappedLine, a10 = e10.fauxIndentLength, o10 = e10.tabSize, s10 = e10.startVisibleColumn, c10 = e10.useMonospaceOptimizations, l10 = e10.selectionsOnLine, u10 = e10.renderWhitespace === 1, d10 = e10.renderWhitespace === 3, f10 = e10.renderSpaceWidth !== e10.spaceWidth, p10 = [], m10 = 0, h10 = 0, g10 = r10[h10].type, _10 = r10[h10].containsRTL, v10 = r10[h10].endIndex, y10 = r10.length, b10 = false, x10 = Es(t10), S10;
    x10 === -1 ? (b10 = true, x10 = n10, S10 = n10) : S10 = Os(t10);
    let C10 = false, w10 = 0, ee2 = l10 && l10[w10], te2 = s10 % o10;
    for (let e11 = a10; e11 < n10; e11++) {
      let i11 = t10.charCodeAt(e11);
      ee2 && e11 >= ee2.endOffset && (w10++, ee2 = l10 && l10[w10]);
      let s11;
      if (e11 < x10 || e11 > S10) s11 = true;
      else if (i11 === 9) s11 = true;
      else if (i11 === 32) if (u10) if (C10) s11 = true;
      else {
        let r11 = e11 + 1 < n10 ? t10.charCodeAt(e11 + 1) : 0;
        s11 = r11 === 32 || r11 === 9;
      }
      else s11 = true;
      else s11 = false;
      if (s11 && l10 && (s11 = !!ee2 && ee2.startOffset <= e11 && ee2.endOffset > e11), s11 && d10 && (s11 = b10 || e11 > S10), s11 && _10 && e11 >= x10 && e11 <= S10 && (s11 = false), C10) {
        if (!s11 || !c10 && te2 >= o10) {
          if (f10) {
            let t11 = m10 > 0 ? p10[m10 - 1].endIndex : a10;
            for (let n11 = t11 + 1; n11 <= e11; n11++) p10[m10++] = new dX(n11, `mtkw`, 1, false);
          } else p10[m10++] = new dX(e11, `mtkw`, 1, false);
          te2 %= o10;
        }
      } else (e11 === v10 || s11 && e11 > a10) && (p10[m10++] = new dX(e11, g10, 0, _10), te2 %= o10);
      for (i11 === 9 ? te2 = o10 : rc(i11) ? te2 += 2 : te2++, C10 = s11; e11 === v10 && (h10++, h10 < y10); ) g10 = r10[h10].type, _10 = r10[h10].containsRTL, v10 = r10[h10].endIndex;
    }
    let ne2 = false;
    if (C10) if (i10 && u10) {
      let e11 = n10 > 0 ? t10.charCodeAt(n10 - 1) : 0, r11 = n10 > 1 ? t10.charCodeAt(n10 - 2) : 0, i11 = e11 === 32 && r11 !== 32 && r11 !== 9;
      i11 || (ne2 = true);
    } else ne2 = true;
    if (ne2) if (f10) {
      let e11 = m10 > 0 ? p10[m10 - 1].endIndex : a10;
      for (let t11 = e11 + 1; t11 <= n10; t11++) p10[m10++] = new dX(t11, `mtkw`, 1, false);
    } else p10[m10++] = new dX(n10, `mtkw`, 1, false);
    else p10[m10++] = new dX(n10, g10, 0, _10);
    return p10;
  }
  function DX(e10, t10, n10, r10) {
    r10.sort(sX.compare);
    let i10 = uX.normalize(e10, r10), a10 = i10.length, o10 = 0, s10 = [], c10 = 0, l10 = 0;
    for (let e11 = 0, t11 = n10.length; e11 < t11; e11++) {
      let t12 = n10[e11], r11 = t12.endIndex, u11 = t12.type, d10 = t12.metadata, f10 = t12.containsRTL;
      for (; o10 < a10 && i10[o10].startOffset < r11; ) {
        let e12 = i10[o10];
        if (e12.startOffset > l10 && (l10 = e12.startOffset, s10[c10++] = new dX(l10, u11, d10, f10)), e12.endOffset + 1 <= r11) l10 = e12.endOffset + 1, s10[c10++] = new dX(l10, u11 + ` ` + e12.className, d10 | e12.metadata, f10), o10++;
        else {
          l10 = r11, s10[c10++] = new dX(l10, u11 + ` ` + e12.className, d10 | e12.metadata, f10);
          break;
        }
      }
      r11 > l10 && (l10 = r11, s10[c10++] = new dX(l10, u11, d10, f10));
    }
    let u10 = n10[n10.length - 1].endIndex;
    if (o10 < a10 && i10[o10].startOffset === u10) for (; o10 < a10 && i10[o10].startOffset === u10; ) {
      let e11 = i10[o10];
      s10[c10++] = new dX(l10, e11.className, e11.metadata, false), o10++;
    }
    return s10;
  }
  function OX(e10, t10) {
    let n10 = e10.fontIsMonospace, r10 = e10.canUseHalfwidthRightwardsArrow, i10 = e10.containsForeignElements, a10 = e10.lineContent, o10 = e10.len, s10 = e10.isOverflowing, c10 = e10.overflowingCharCount, l10 = e10.parts, u10 = e10.fauxIndentLength, d10 = e10.tabSize, f10 = e10.startVisibleColumn, p10 = e10.containsRTL, m10 = e10.spaceWidth, h10 = e10.renderSpaceCharCode, g10 = e10.renderWhitespace, _10 = e10.renderControlCharacters, v10 = new hX(o10 + 1, l10.length), y10 = false, b10 = 0, x10 = f10, S10 = 0, C10 = 0, w10 = 0;
    p10 ? t10.appendString(`<span dir="ltr">`) : t10.appendString(`<span>`);
    for (let e11 = 0, s11 = l10.length; e11 < s11; e11++) {
      let s12 = l10[e11], c11 = s12.endIndex, f11 = s12.type, p11 = s12.containsRTL, ee2 = g10 !== 0 && s12.isWhitespace(), te2 = ee2 && !n10 && (f11 === `mtkw` || !i10), ne2 = b10 === c11 && s12.isPseudoAfter();
      if (S10 = 0, t10.appendString(`<span `), p11 && t10.appendString(`style="unicode-bidi:isolate" `), t10.appendString(`class="`), t10.appendString(te2 ? `mtkz` : f11), t10.appendASCIICharCode(34), ee2) {
        let n11 = 0;
        {
          let e12 = b10, t11 = x10;
          for (; e12 < c11; e12++) {
            let r11 = a10.charCodeAt(e12), i11 = (r11 === 9 ? d10 - t11 % d10 : 1) | 0;
            n11 += i11, e12 >= u10 && (t11 += i11);
          }
        }
        for (te2 && (t10.appendString(` style="width:`), t10.appendString(String(m10 * n11)), t10.appendString(`px"`)), t10.appendASCIICharCode(62); b10 < c11; b10++) {
          v10.setColumnInfo(b10 + 1, e11 - w10, S10, C10), w10 = 0;
          let n12 = a10.charCodeAt(b10), i11, o11;
          if (n12 === 9) {
            i11 = d10 - x10 % d10 | 0, o11 = i11, !r10 || o11 > 1 ? t10.appendCharCode(8594) : t10.appendCharCode(65515);
            for (let e12 = 2; e12 <= o11; e12++) t10.appendCharCode(160);
          } else i11 = 2, o11 = 1, t10.appendCharCode(h10), t10.appendCharCode(8204);
          S10 += i11, C10 += o11, b10 >= u10 && (x10 += o11);
        }
      } else for (t10.appendASCIICharCode(62); b10 < c11; b10++) {
        v10.setColumnInfo(b10 + 1, e11 - w10, S10, C10), w10 = 0;
        let n11 = a10.charCodeAt(b10), r11 = 1, i11 = 1;
        switch (n11) {
          case 9:
            r11 = d10 - x10 % d10, i11 = r11;
            for (let e12 = 1; e12 <= r11; e12++) t10.appendCharCode(160);
            break;
          case 32:
            t10.appendCharCode(160);
            break;
          case 60:
            t10.appendString(`&lt;`);
            break;
          case 62:
            t10.appendString(`&gt;`);
            break;
          case 38:
            t10.appendString(`&amp;`);
            break;
          case 0:
            _10 ? t10.appendCharCode(9216) : t10.appendString(`&#00;`);
            break;
          case 65279:
          case 8232:
          case 8233:
          case 133:
            t10.appendCharCode(65533);
            break;
          default:
            rc(n11) && i11++, _10 && n11 < 32 ? t10.appendCharCode(9216 + n11) : _10 && n11 === 127 ? t10.appendCharCode(9249) : _10 && wX(n11) ? (t10.appendString(`[U+`), t10.appendString(kX(n11)), t10.appendString(`]`), r11 = 8, i11 = r11) : t10.appendCharCode(n11);
        }
        S10 += r11, C10 += i11, b10 >= u10 && (x10 += i11);
      }
      ne2 ? w10++ : w10 = 0, b10 >= o10 && !y10 && s12.isPseudoAfter() && (y10 = true, v10.setColumnInfo(b10 + 1, e11, S10, C10)), t10.appendString(`</span>`);
    }
    return y10 || v10.setColumnInfo(o10 + 1, l10.length - 1, S10, C10), s10 && (t10.appendString(`<span class="mtkoverflow">`), t10.appendString(T(`showMore`, `Show more ({0})`, AX(c10))), t10.appendString(`</span>`)), t10.appendString(`</span>`), new gX(v10, p10, i10);
  }
  function kX(e10) {
    return e10.toString(16).toUpperCase().padStart(4, `0`);
  }
  function AX(e10) {
    return e10 < 1024 ? T(`overflow.chars`, `{0} chars`, e10) : e10 < 1024 * 1024 ? `${(e10 / 1024).toFixed(1)} KB` : `${(e10 / 1024 / 1024).toFixed(1)} MB`;
  }
  var jX = class {
    constructor(e10, t10, n10, r10) {
      this._viewportBrand = void 0, this.top = e10 | 0, this.left = t10 | 0, this.width = n10 | 0, this.height = r10 | 0;
    }
  }, MX = class {
    constructor(e10, t10) {
      this.tabSize = e10, this.data = t10;
    }
  }, NX = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this._viewLineDataBrand = void 0, this.content = e10, this.continuesWithWrappedLine = t10, this.minColumn = n10, this.maxColumn = r10, this.startVisibleColumn = i10, this.tokens = a10, this.inlineDecorations = o10;
    }
  }, PX = class e10 {
    constructor(t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      this.minColumn = t10, this.maxColumn = n10, this.content = r10, this.continuesWithWrappedLine = i10, this.isBasicASCII = e10.isBasicASCII(r10, o10), this.containsRTL = e10.containsRTL(r10, this.isBasicASCII, a10), this.tokens = s10, this.inlineDecorations = c10, this.tabSize = l10, this.startVisibleColumn = u10;
    }
    static isBasicASCII(e11, t10) {
      return t10 ? ec(e11) : true;
    }
    static containsRTL(e11, t10, n10) {
      return !t10 && n10 ? Qs(e11) : false;
    }
  }, FX = class {
    constructor(e10, t10, n10) {
      this.range = e10, this.inlineClassName = t10, this.type = n10;
    }
  }, IX = class {
    constructor(e10, t10, n10, r10) {
      this.startOffset = e10, this.endOffset = t10, this.inlineClassName = n10, this.inlineClassNameAffectsLetterSpacing = r10;
    }
    toInlineDecoration(e10) {
      return new FX(new F(e10, this.startOffset + 1, e10, this.endOffset + 1), this.inlineClassName, this.inlineClassNameAffectsLetterSpacing ? 3 : 0);
    }
  }, LX = class {
    constructor(e10, t10) {
      this._viewModelDecorationBrand = void 0, this.range = e10, this.options = t10;
    }
  }, RX = class e10 {
    constructor(e11, t10, n10) {
      this.color = e11, this.zIndex = t10, this.data = n10;
    }
    static compareByRenderingProps(e11, t10) {
      return e11.zIndex === t10.zIndex ? e11.color < t10.color ? -1 : e11.color > t10.color ? 1 : 0 : e11.zIndex - t10.zIndex;
    }
    static equals(e11, t10) {
      return e11.color === t10.color && e11.zIndex === t10.zIndex && l(e11.data, t10.data);
    }
    static equalsArr(t10, n10) {
      return l(t10, n10, e10.equals);
    }
  };
  function zX(e10) {
    return Array.isArray(e10);
  }
  function BX(e10) {
    return !zX(e10);
  }
  function VX(e10) {
    return typeof e10 == `string`;
  }
  function HX(e10) {
    return !VX(e10);
  }
  function UX(e10) {
    return !e10;
  }
  function WX(e10, t10) {
    return e10.ignoreCase && t10 ? t10.toLowerCase() : t10;
  }
  function GX(e10) {
    return e10.replace(/[&<>'"_]/g, `-`);
  }
  function KX(e10, t10) {
    console.log(`${e10.languageId}: ${t10}`);
  }
  function qX(e10, t10) {
    return Error(`${e10.languageId}: ${t10}`);
  }
  function JX(e10, t10, n10, r10, i10) {
    let a10 = /\$((\$)|(#)|(\d\d?)|[sS](\d\d?)|@(\w+))/g, o10 = null;
    return t10.replace(a10, function(t11, a11, s10, c10, l10, u10, d10, f10, p10) {
      return UX(s10) ? UX(c10) ? !UX(l10) && l10 < r10.length ? WX(e10, r10[l10]) : !UX(d10) && e10 && typeof e10[d10] == `string` ? e10[d10] : (o10 === null && (o10 = i10.split(`.`), o10.unshift(i10)), !UX(u10) && u10 < o10.length ? WX(e10, o10[u10]) : ``) : WX(e10, n10) : `$`;
    });
  }
  function YX(e10, t10, n10) {
    let r10 = /\$[sS](\d\d?)/g, i10 = null;
    return t10.replace(r10, function(t11, r11) {
      return i10 === null && (i10 = n10.split(`.`), i10.unshift(n10)), !UX(r11) && r11 < i10.length ? WX(e10, i10[r11]) : ``;
    });
  }
  function XX(e10, t10) {
    let n10 = t10;
    for (; n10 && n10.length > 0; ) {
      let t11 = e10.tokenizer[n10];
      if (t11) return t11;
      let r10 = n10.lastIndexOf(`.`);
      n10 = r10 < 0 ? null : n10.substr(0, r10);
    }
    return null;
  }
  function ZX(e10, t10) {
    let n10 = t10;
    for (; n10 && n10.length > 0; ) {
      let t11 = e10.stateNames[n10];
      if (t11) return true;
      let r10 = n10.lastIndexOf(`.`);
      n10 = r10 < 0 ? null : n10.substr(0, r10);
    }
    return false;
  }
  var QX = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, $X = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, eZ;
  const tZ = 5;
  var nZ = (_La = class {
    static create(e10, t10) {
      return this._INSTANCE.create(e10, t10);
    }
    constructor(e10) {
      this._maxCacheDepth = e10, this._entries = /* @__PURE__ */ Object.create(null);
    }
    create(e10, t10) {
      if (e10 !== null && e10.depth >= this._maxCacheDepth) return new rZ(e10, t10);
      let n10 = rZ.getStackElementId(e10);
      n10.length > 0 && (n10 += `|`), n10 += t10;
      let r10 = this._entries[n10];
      return r10 || (r10 = new rZ(e10, t10), this._entries[n10] = r10, r10);
    }
  }, _La._INSTANCE = new _La(tZ), _La), rZ = class e10 {
    constructor(e11, t10) {
      this.parent = e11, this.state = t10, this.depth = (this.parent ? this.parent.depth : 0) + 1;
    }
    static getStackElementId(e11) {
      let t10 = ``;
      for (; e11 !== null; ) t10.length > 0 && (t10 += `|`), t10 += e11.state, e11 = e11.parent;
      return t10;
    }
    static _equals(e11, t10) {
      for (; e11 !== null && t10 !== null; ) {
        if (e11 === t10) return true;
        if (e11.state !== t10.state) return false;
        e11 = e11.parent, t10 = t10.parent;
      }
      return e11 === null && t10 === null;
    }
    equals(t10) {
      return e10._equals(this, t10);
    }
    push(e11) {
      return nZ.create(this, e11);
    }
    pop() {
      return this.parent;
    }
    popall() {
      let e11 = this;
      for (; e11.parent; ) e11 = e11.parent;
      return e11;
    }
    switchTo(e11) {
      return nZ.create(this.parent, e11);
    }
  }, iZ = class e10 {
    constructor(e11, t10) {
      this.languageId = e11, this.state = t10;
    }
    equals(e11) {
      return this.languageId === e11.languageId && this.state.equals(e11.state);
    }
    clone() {
      let t10 = this.state.clone();
      return t10 === this.state ? this : new e10(this.languageId, this.state);
    }
  }, aZ = (_Ma = class {
    static create(e10, t10) {
      return this._INSTANCE.create(e10, t10);
    }
    constructor(e10) {
      this._maxCacheDepth = e10, this._entries = /* @__PURE__ */ Object.create(null);
    }
    create(e10, t10) {
      if (t10 !== null || e10 !== null && e10.depth >= this._maxCacheDepth) return new oZ(e10, t10);
      let n10 = rZ.getStackElementId(e10), r10 = this._entries[n10];
      return r10 || (r10 = new oZ(e10, null), this._entries[n10] = r10, r10);
    }
  }, _Ma._INSTANCE = new _Ma(tZ), _Ma), oZ = class e10 {
    constructor(e11, t10) {
      this.stack = e11, this.embeddedLanguageData = t10;
    }
    clone() {
      let e11 = this.embeddedLanguageData ? this.embeddedLanguageData.clone() : null;
      return e11 === this.embeddedLanguageData ? this : aZ.create(this.stack, this.embeddedLanguageData);
    }
    equals(t10) {
      return !(t10 instanceof e10) || !this.stack.equals(t10.stack) ? false : this.embeddedLanguageData === null && t10.embeddedLanguageData === null ? true : this.embeddedLanguageData === null || t10.embeddedLanguageData === null ? false : this.embeddedLanguageData.equals(t10.embeddedLanguageData);
    }
  }, sZ = class {
    constructor() {
      this._tokens = [], this._languageId = null, this._lastTokenType = null, this._lastTokenLanguage = null;
    }
    enterLanguage(e10) {
      this._languageId = e10;
    }
    emit(e10, t10) {
      this._lastTokenType === t10 && this._lastTokenLanguage === this._languageId || (this._lastTokenType = t10, this._lastTokenLanguage = this._languageId, this._tokens.push(new za(e10, t10, this._languageId)));
    }
    nestedLanguageTokenize(e10, t10, n10, r10) {
      let i10 = n10.languageId, a10 = n10.state, o10 = ao.get(i10);
      if (!o10) return this.enterLanguage(i10), this.emit(r10, ``), a10;
      let s10 = o10.tokenize(e10, t10, a10);
      if (r10 !== 0) for (let e11 of s10.tokens) this._tokens.push(new za(e11.offset + r10, e11.type, e11.language));
      else this._tokens = this._tokens.concat(s10.tokens);
      return this._lastTokenType = null, this._lastTokenLanguage = null, this._languageId = null, s10.endState;
    }
    finalize(e10) {
      return new Ba(this._tokens, e10);
    }
  }, cZ = class e10 {
    constructor(e11, t10) {
      this._languageService = e11, this._theme = t10, this._prependTokens = null, this._tokens = [], this._currentLanguageId = 0, this._lastTokenMetadata = 0;
    }
    enterLanguage(e11) {
      this._currentLanguageId = this._languageService.languageIdCodec.encodeLanguageId(e11);
    }
    emit(e11, t10) {
      let n10 = this._theme.match(this._currentLanguageId, t10) | 1024;
      this._lastTokenMetadata !== n10 && (this._lastTokenMetadata = n10, this._tokens.push(e11), this._tokens.push(n10));
    }
    static _merge(e11, t10, n10) {
      let r10 = e11 === null ? 0 : e11.length, i10 = t10.length, a10 = n10 === null ? 0 : n10.length;
      if (r10 === 0 && i10 === 0 && a10 === 0) return new Uint32Array();
      if (r10 === 0 && i10 === 0) return n10;
      if (i10 === 0 && a10 === 0) return e11;
      let o10 = new Uint32Array(r10 + i10 + a10);
      e11 !== null && o10.set(e11);
      for (let e12 = 0; e12 < i10; e12++) o10[r10 + e12] = t10[e12];
      return n10 !== null && o10.set(n10, r10 + i10), o10;
    }
    nestedLanguageTokenize(t10, n10, r10, i10) {
      let a10 = r10.languageId, o10 = r10.state, s10 = ao.get(a10);
      if (!s10) return this.enterLanguage(a10), this.emit(i10, ``), o10;
      let c10 = s10.tokenizeEncoded(t10, n10, o10);
      if (i10 !== 0) for (let e11 = 0, t11 = c10.tokens.length; e11 < t11; e11 += 2) c10.tokens[e11] += i10;
      return this._prependTokens = e10._merge(this._prependTokens, this._tokens, c10.tokens), this._tokens = [], this._currentLanguageId = 0, this._lastTokenMetadata = 0, c10.endState;
    }
    finalize(t10) {
      return new Va(e10._merge(this._prependTokens, this._tokens, null), t10);
    }
  };
  let lZ = eZ = class extends j {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._configurationService = i10, this._languageService = e10, this._standaloneThemeService = t10, this._languageId = n10, this._lexer = r10, this._embeddedLanguages = /* @__PURE__ */ Object.create(null), this.embeddedLoaded = Promise.resolve(void 0);
      let a10 = false;
      this._register(ao.onDidChange((e11) => {
        if (a10) return;
        let t11 = false;
        for (let n11 = 0, r11 = e11.changedLanguages.length; n11 < r11; n11++) {
          let r12 = e11.changedLanguages[n11];
          if (this._embeddedLanguages[r12]) {
            t11 = true;
            break;
          }
        }
        t11 && (a10 = true, ao.handleChange([
          this._languageId
        ]), a10 = false);
      })), this._maxTokenizationLineLength = this._configurationService.getValue(`editor.maxTokenizationLineLength`, {
        overrideIdentifier: this._languageId
      }), this._register(this._configurationService.onDidChangeConfiguration((e11) => {
        e11.affectsConfiguration(`editor.maxTokenizationLineLength`) && (this._maxTokenizationLineLength = this._configurationService.getValue(`editor.maxTokenizationLineLength`, {
          overrideIdentifier: this._languageId
        }));
      }));
    }
    getLoadStatus() {
      let e10 = [];
      for (let t10 in this._embeddedLanguages) {
        let n10 = ao.get(t10);
        if (n10) {
          if (n10 instanceof eZ) {
            let t11 = n10.getLoadStatus();
            t11.loaded === false && e10.push(t11.promise);
          }
          continue;
        }
        ao.isResolved(t10) || e10.push(ao.getOrCreate(t10));
      }
      return e10.length === 0 ? {
        loaded: true
      } : {
        loaded: false,
        promise: Promise.all(e10).then((e11) => void 0)
      };
    }
    getInitialState() {
      let e10 = nZ.create(null, this._lexer.start);
      return aZ.create(e10, null);
    }
    tokenize(e10, t10, n10) {
      if (e10.length >= this._maxTokenizationLineLength) return DA(this._languageId, n10);
      let r10 = new sZ(), i10 = this._tokenize(e10, t10, n10, r10);
      return r10.finalize(i10);
    }
    tokenizeEncoded(e10, t10, n10) {
      if (e10.length >= this._maxTokenizationLineLength) return OA(this._languageService.languageIdCodec.encodeLanguageId(this._languageId), n10);
      let r10 = new cZ(this._languageService, this._standaloneThemeService.getColorTheme().tokenTheme), i10 = this._tokenize(e10, t10, n10, r10);
      return r10.finalize(i10);
    }
    _tokenize(e10, t10, n10, r10) {
      return n10.embeddedLanguageData ? this._nestedTokenize(e10, t10, n10, 0, r10) : this._myTokenize(e10, t10, n10, 0, r10);
    }
    _findLeavingNestedLanguageOffset(e10, t10) {
      let n10 = this._lexer.tokenizer[t10.stack.state];
      if (!n10 && (n10 = XX(this._lexer, t10.stack.state), !n10)) throw qX(this._lexer, `tokenizer state is not defined: ` + t10.stack.state);
      let r10 = -1, i10 = false;
      for (let a10 of n10) {
        if (!HX(a10.action) || a10.action.nextEmbedded !== `@pop`) continue;
        i10 = true;
        let n11 = a10.resolveRegex(t10.stack.state), o10 = n11.source;
        if (o10.substr(0, 4) === `^(?:` && o10.substr(o10.length - 1, 1) === `)`) {
          let e11 = (n11.ignoreCase ? `i` : ``) + (n11.unicode ? `u` : ``);
          n11 = new RegExp(o10.substr(4, o10.length - 5), e11);
        }
        let s10 = e10.search(n11);
        if (s10 === -1 || s10 !== 0 && a10.matchOnlyAtLineStart) continue;
        (r10 === -1 || s10 < r10) && (r10 = s10);
      }
      if (!i10) throw qX(this._lexer, `no rule containing nextEmbedded: "@pop" in tokenizer embedded state: ` + t10.stack.state);
      return r10;
    }
    _nestedTokenize(e10, t10, n10, r10, i10) {
      let a10 = this._findLeavingNestedLanguageOffset(e10, n10);
      if (a10 === -1) {
        let a11 = i10.nestedLanguageTokenize(e10, t10, n10.embeddedLanguageData, r10);
        return aZ.create(n10.stack, new iZ(n10.embeddedLanguageData.languageId, a11));
      }
      let o10 = e10.substring(0, a10);
      o10.length > 0 && i10.nestedLanguageTokenize(o10, false, n10.embeddedLanguageData, r10);
      let s10 = e10.substring(a10);
      return this._myTokenize(s10, t10, n10, r10 + a10, i10);
    }
    _safeRuleName(e10) {
      return e10 ? e10.name : `(unknown)`;
    }
    _myTokenize(e10, t10, n10, r10, i10) {
      i10.enterLanguage(this._languageId);
      let a10 = e10.length, o10 = t10 && this._lexer.includeLF ? e10 + `
` : e10, s10 = o10.length, c10 = n10.embeddedLanguageData, l10 = n10.stack, u10 = 0, d10 = null, f10 = true;
      for (; f10 || u10 < s10; ) {
        let n11 = u10, p10 = l10.depth, m10 = d10 ? d10.groups.length : 0, h10 = l10.state, g10 = null, _10 = null, v10 = null, y10 = null, b10 = null;
        if (d10) {
          g10 = d10.matches;
          let e11 = d10.groups.shift();
          _10 = e11.matched, v10 = e11.action, y10 = d10.rule, d10.groups.length === 0 && (d10 = null);
        } else {
          if (!f10 && u10 >= s10) break;
          f10 = false;
          let e11 = this._lexer.tokenizer[h10];
          if (!e11 && (e11 = XX(this._lexer, h10), !e11)) throw qX(this._lexer, `tokenizer state is not defined: ` + h10);
          let t11 = o10.substr(u10);
          for (let n12 of e11) if ((u10 === 0 || !n12.matchOnlyAtLineStart) && (g10 = t11.match(n12.resolveRegex(h10)), g10)) {
            _10 = g10[0], v10 = n12.action;
            break;
          }
        }
        if (g10 || (g10 = [
          ``
        ], _10 = ``), v10 || (u10 < s10 && (g10 = [
          o10.charAt(u10)
        ], _10 = g10[0]), v10 = this._lexer.defaultToken), _10 === null) break;
        for (u10 += _10.length; BX(v10) && HX(v10) && v10.test; ) v10 = v10.test(_10, g10, h10, u10 === s10);
        let x10 = null;
        if (typeof v10 == `string` || Array.isArray(v10)) x10 = v10;
        else if (v10.group) x10 = v10.group;
        else if (v10.token !== null && v10.token !== void 0) {
          if (x10 = v10.tokenSubst ? JX(this._lexer, v10.token, _10, g10, h10) : v10.token, v10.nextEmbedded) if (v10.nextEmbedded === `@pop`) {
            if (!c10) throw qX(this._lexer, `cannot pop embedded language if not inside one`);
            c10 = null;
          } else if (c10) throw qX(this._lexer, `cannot enter embedded language from within an embedded language`);
          else b10 = JX(this._lexer, v10.nextEmbedded, _10, g10, h10);
          if (v10.goBack && (u10 = Math.max(0, u10 - v10.goBack)), v10.switchTo && typeof v10.switchTo == `string`) {
            let e11 = JX(this._lexer, v10.switchTo, _10, g10, h10);
            if (e11[0] === `@` && (e11 = e11.substr(1)), XX(this._lexer, e11)) l10 = l10.switchTo(e11);
            else throw qX(this._lexer, `trying to switch to a state '` + e11 + `' that is undefined in rule: ` + this._safeRuleName(y10));
          } else if (v10.transform && typeof v10.transform == `function`) throw qX(this._lexer, `action.transform not supported`);
          else if (v10.next) if (v10.next === `@push`) {
            if (l10.depth >= this._lexer.maxStack) throw qX(this._lexer, `maximum tokenizer stack size reached: [` + l10.state + `,` + l10.parent.state + `,...]`);
            l10 = l10.push(h10);
          } else if (v10.next === `@pop`) {
            if (l10.depth <= 1) throw qX(this._lexer, `trying to pop an empty stack in rule: ` + this._safeRuleName(y10));
            l10 = l10.pop();
          } else if (v10.next === `@popall`) l10 = l10.popall();
          else {
            let e11 = JX(this._lexer, v10.next, _10, g10, h10);
            if (e11[0] === `@` && (e11 = e11.substr(1)), XX(this._lexer, e11)) l10 = l10.push(e11);
            else throw qX(this._lexer, `trying to set a next state '` + e11 + `' that is undefined in rule: ` + this._safeRuleName(y10));
          }
          v10.log && typeof v10.log == `string` && KX(this._lexer, this._lexer.languageId + `: ` + JX(this._lexer, v10.log, _10, g10, h10));
        }
        if (x10 === null) throw qX(this._lexer, `lexer rule has no well-defined action in rule: ` + this._safeRuleName(y10));
        let S10 = (n12) => {
          let a11 = this._languageService.getLanguageIdByLanguageName(n12) || this._languageService.getLanguageIdByMimeType(n12) || n12, o11 = this._getNestedEmbeddedLanguageData(a11);
          if (u10 < s10) {
            let n13 = e10.substr(u10);
            return this._nestedTokenize(n13, t10, aZ.create(l10, o11), r10 + u10, i10);
          } else return aZ.create(l10, o11);
        };
        if (Array.isArray(x10)) {
          if (d10 && d10.groups.length > 0) throw qX(this._lexer, `groups cannot be nested: ` + this._safeRuleName(y10));
          if (g10.length !== x10.length + 1) throw qX(this._lexer, `matched number of groups does not match the number of actions in rule: ` + this._safeRuleName(y10));
          let e11 = 0;
          for (let t11 = 1; t11 < g10.length; t11++) e11 += g10[t11].length;
          if (e11 !== _10.length) throw qX(this._lexer, `with groups, all characters should be matched in consecutive groups in rule: ` + this._safeRuleName(y10));
          d10 = {
            rule: y10,
            matches: g10,
            groups: []
          };
          for (let e12 = 0; e12 < x10.length; e12++) d10.groups[e12] = {
            action: x10[e12],
            matched: g10[e12 + 1]
          };
          u10 -= _10.length;
          continue;
        } else {
          if (x10 === `@rematch` && (u10 -= _10.length, _10 = ``, g10 = null, x10 = ``, b10 !== null)) return S10(b10);
          if (_10.length === 0) {
            if (s10 === 0 || p10 !== l10.depth || h10 !== l10.state || (d10 ? d10.groups.length : 0) !== m10) continue;
            throw qX(this._lexer, `no progress in tokenizer in rule: ` + this._safeRuleName(y10));
          }
          let e11 = null;
          if (VX(x10) && x10.indexOf(`@brackets`) === 0) {
            let t11 = x10.substr(9), n12 = uZ(this._lexer, _10);
            if (!n12) throw qX(this._lexer, `@brackets token returned but no bracket defined as: ` + _10);
            e11 = GX(n12.token + t11);
          } else {
            let t11 = x10 === `` ? `` : x10 + this._lexer.tokenPostfix;
            e11 = GX(t11);
          }
          n11 < a10 && i10.emit(n11 + r10, e11);
        }
        if (b10 !== null) return S10(b10);
      }
      return aZ.create(l10, c10);
    }
    _getNestedEmbeddedLanguageData(e10) {
      if (!this._languageService.isRegisteredLanguageId(e10)) return new iZ(e10, EA);
      e10 !== this._languageId && (this._languageService.requestBasicLanguageFeatures(e10), ao.getOrCreate(e10), this._embeddedLanguages[e10] = true);
      let t10 = ao.get(e10);
      return t10 ? new iZ(e10, t10.getInitialState()) : new iZ(e10, EA);
    }
  };
  lZ = eZ = QX([
    $X(4, ug)
  ], lZ);
  function uZ(e10, t10) {
    if (!t10) return null;
    t10 = WX(e10, t10);
    let n10 = e10.brackets;
    for (let e11 of n10) if (e11.open === t10) return {
      token: e11.token,
      bracketType: 1
    };
    else if (e11.close === t10) return {
      token: e11.token,
      bracketType: -1
    };
    return null;
  }
  const dZ = lh(`standaloneColorizer`, {
    createHTML: (e10) => e10
  });
  var fZ = class {
    static colorizeElement(e10, t10, n10, r10) {
      r10 || (r10 = {});
      let i10 = r10.theme || `vs`, a10 = r10.mimeType || n10.getAttribute(`lang`) || n10.getAttribute(`data-lang`);
      if (!a10) return console.error(`Mode not detected`), Promise.resolve();
      let o10 = t10.getLanguageIdByMimeType(a10) || a10;
      e10.setTheme(i10);
      let s10 = n10.firstChild ? n10.firstChild.nodeValue : ``;
      n10.className += ` ` + i10;
      let c10 = (e11) => {
        let t11 = (dZ == null ? void 0 : dZ.createHTML(e11)) ?? e11;
        n10.innerHTML = t11;
      };
      return this.colorize(t10, s10 || ``, o10, r10).then(c10, (e11) => console.error(e11));
    }
    static async colorize(e10, t10, n10, r10) {
      let i10 = e10.languageIdCodec, a10 = 4;
      r10 && typeof r10.tabSize == `number` && (a10 = r10.tabSize), oc(t10) && (t10 = t10.substr(1));
      let o10 = ws(t10);
      if (!e10.isRegisteredLanguageId(n10)) return mZ(o10, a10, i10);
      let s10 = await ao.getOrCreate(n10);
      return s10 ? pZ(o10, a10, s10, i10) : mZ(o10, a10, i10);
    }
    static colorizeLine(e10, t10, n10, r10, i10 = 4) {
      let a10 = PX.isBasicASCII(e10, t10), o10 = PX.containsRTL(e10, a10, n10), s10 = yX(new pX(false, true, e10, false, a10, o10, 0, r10, [], i10, 0, 0, 0, 0, -1, `none`, false, false, null));
      return s10.html;
    }
    static colorizeModelLine(e10, t10, n10 = 4) {
      let r10 = e10.getLineContent(t10);
      e10.tokenization.forceTokenization(t10);
      let i10 = e10.tokenization.getLineTokens(t10), a10 = i10.inflate();
      return this.colorizeLine(r10, e10.mightContainNonBasicASCII(), e10.mightContainRTL(), a10, n10);
    }
  };
  function pZ(e10, t10, n10, r10) {
    return new Promise((i10, a10) => {
      let o10 = () => {
        let s10 = hZ(e10, t10, n10, r10);
        if (n10 instanceof lZ) {
          let e11 = n10.getLoadStatus();
          if (e11.loaded === false) {
            e11.promise.then(o10, a10);
            return;
          }
        }
        i10(s10);
      };
      o10();
    });
  }
  function mZ(e10, t10, n10) {
    let r10 = [], i10 = 33587200, a10 = new Uint32Array(2);
    a10[0] = 0, a10[1] = i10;
    for (let i11 = 0, o10 = e10.length; i11 < o10; i11++) {
      let o11 = e10[i11];
      a10[0] = o11.length;
      let s10 = new CA(a10, o11, n10), c10 = PX.isBasicASCII(o11, true), l10 = PX.containsRTL(o11, c10, true), u10 = yX(new pX(false, true, o11, false, c10, l10, 0, s10, [], t10, 0, 0, 0, 0, -1, `none`, false, false, null));
      r10 = r10.concat(u10.html), r10.push(`<br/>`);
    }
    return r10.join(``);
  }
  function hZ(e10, t10, n10, r10) {
    let i10 = [], a10 = n10.getInitialState();
    for (let o10 = 0, s10 = e10.length; o10 < s10; o10++) {
      let s11 = e10[o10], c10 = n10.tokenizeEncoded(s11, true, a10);
      CA.convertToEndOffset(c10.tokens, s11.length);
      let l10 = new CA(c10.tokens, s11, r10), u10 = PX.isBasicASCII(s11, true), d10 = PX.containsRTL(s11, u10, true), f10 = yX(new pX(false, true, s11, false, u10, d10, 0, l10.inflate(), [], t10, 0, 0, 0, 0, -1, `none`, false, false, null));
      i10 = i10.concat(f10.html), i10.push(`<br/>`), a10 = c10.endState;
    }
    return i10.join(``);
  }
  var gZ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, _Z = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let vZ = (_Na = class {
    constructor(e10, t10) {
    }
    dispose() {
    }
  }, _Na.ID = `editor.contrib.markerDecorations`, _Na);
  vZ = gZ([
    _Z(1, hR)
  ], vZ), Hm(vZ.ID, vZ, 0);
  var yZ = class extends j {
    constructor(e10, t10) {
      super(), this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._referenceDomElement = e10, this._width = -1, this._height = -1, this._resizeObserver = null, this.measureReferenceDomElement(false, t10);
    }
    dispose() {
      this.stopObserving(), super.dispose();
    }
    getWidth() {
      return this._width;
    }
    getHeight() {
      return this._height;
    }
    startObserving() {
      if (!this._resizeObserver && this._referenceDomElement) {
        let e10 = null, t10 = () => {
          e10 ? this.observe({
            width: e10.width,
            height: e10.height
          }) : this.observe();
        }, n10 = false, r10 = false, i10 = () => {
          if (n10 && !r10) try {
            n10 = false, r10 = true, t10();
          } finally {
            sd(R(this._referenceDomElement), () => {
              r10 = false, i10();
            });
          }
        };
        this._resizeObserver = new ResizeObserver((t11) => {
          e10 = t11 && t11[0] && t11[0].contentRect ? {
            width: t11[0].contentRect.width,
            height: t11[0].contentRect.height
          } : null, n10 = true, i10();
        }), this._resizeObserver.observe(this._referenceDomElement);
      }
    }
    stopObserving() {
      this._resizeObserver && (this._resizeObserver.disconnect(), this._resizeObserver = null);
    }
    observe(e10) {
      this.measureReferenceDomElement(true, e10);
    }
    measureReferenceDomElement(e10, t10) {
      let n10 = 0, r10 = 0;
      t10 ? (n10 = t10.width, r10 = t10.height) : this._referenceDomElement && (n10 = this._referenceDomElement.clientWidth, r10 = this._referenceDomElement.clientHeight), n10 = Math.max(5, n10), r10 = Math.max(5, r10), (this._width !== n10 || this._height !== r10) && (this._width = n10, this._height = r10, e10 && this._onDidChange.fire());
    }
  }, bZ = (_Oa = class {
    constructor(e10, t10) {
      this.key = e10, this.migrate = t10;
    }
    apply(t10) {
      let n10 = _Oa._read(t10, this.key), r10 = (n11) => _Oa._read(t10, n11), i10 = (n11, r11) => _Oa._write(t10, n11, r11);
      this.migrate(n10, r10, i10);
    }
    static _read(e10, t10) {
      if (e10 === void 0) return;
      let n10 = t10.indexOf(`.`);
      if (n10 >= 0) {
        let r10 = t10.substring(0, n10);
        return this._read(e10[r10], t10.substring(n10 + 1));
      }
      return e10[t10];
    }
    static _write(e10, t10, n10) {
      let r10 = t10.indexOf(`.`);
      if (r10 >= 0) {
        let i10 = t10.substring(0, r10);
        e10[i10] = e10[i10] || {}, this._write(e10[i10], t10.substring(r10 + 1), n10);
        return;
      }
      e10[t10] = n10;
    }
  }, _Oa.items = [], _Oa);
  function xZ(e10, t10) {
    bZ.items.push(new bZ(e10, t10));
  }
  function SZ(e10, t10) {
    xZ(e10, (n10, r10, i10) => {
      if (n10 !== void 0) {
        for (let [r11, a10] of t10) if (n10 === r11) {
          i10(e10, a10);
          return;
        }
      }
    });
  }
  function CZ(e10) {
    bZ.items.forEach((t10) => t10.apply(e10));
  }
  SZ(`wordWrap`, [
    [
      true,
      `on`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`lineNumbers`, [
    [
      true,
      `on`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`cursorBlinking`, [
    [
      `visible`,
      `solid`
    ]
  ]), SZ(`renderWhitespace`, [
    [
      true,
      `boundary`
    ],
    [
      false,
      `none`
    ]
  ]), SZ(`renderLineHighlight`, [
    [
      true,
      `line`
    ],
    [
      false,
      `none`
    ]
  ]), SZ(`acceptSuggestionOnEnter`, [
    [
      true,
      `on`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`tabCompletion`, [
    [
      false,
      `off`
    ],
    [
      true,
      `onlySnippets`
    ]
  ]), SZ(`hover`, [
    [
      true,
      {
        enabled: true
      }
    ],
    [
      false,
      {
        enabled: false
      }
    ]
  ]), SZ(`parameterHints`, [
    [
      true,
      {
        enabled: true
      }
    ],
    [
      false,
      {
        enabled: false
      }
    ]
  ]), SZ(`autoIndent`, [
    [
      false,
      `advanced`
    ],
    [
      true,
      `full`
    ]
  ]), SZ(`matchBrackets`, [
    [
      true,
      `always`
    ],
    [
      false,
      `never`
    ]
  ]), SZ(`renderFinalNewline`, [
    [
      true,
      `on`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`cursorSmoothCaretAnimation`, [
    [
      true,
      `on`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`occurrencesHighlight`, [
    [
      true,
      `singleFile`
    ],
    [
      false,
      `off`
    ]
  ]), SZ(`wordBasedSuggestions`, [
    [
      true,
      `matchingDocuments`
    ],
    [
      false,
      `off`
    ]
  ]), xZ(`autoClosingBrackets`, (e10, t10, n10) => {
    e10 === false && (n10(`autoClosingBrackets`, `never`), t10(`autoClosingQuotes`) === void 0 && n10(`autoClosingQuotes`, `never`), t10(`autoSurround`) === void 0 && n10(`autoSurround`, `never`));
  }), xZ(`renderIndentGuides`, (e10, t10, n10) => {
    e10 !== void 0 && (n10(`renderIndentGuides`, void 0), t10(`guides.indentation`) === void 0 && n10(`guides.indentation`, !!e10));
  }), xZ(`highlightActiveIndentGuide`, (e10, t10, n10) => {
    e10 !== void 0 && (n10(`highlightActiveIndentGuide`, void 0), t10(`guides.highlightActiveIndentation`) === void 0 && n10(`guides.highlightActiveIndentation`, !!e10));
  });
  const wZ = {
    method: `showMethods`,
    function: `showFunctions`,
    constructor: `showConstructors`,
    deprecated: `showDeprecated`,
    field: `showFields`,
    variable: `showVariables`,
    class: `showClasses`,
    struct: `showStructs`,
    interface: `showInterfaces`,
    module: `showModules`,
    property: `showProperties`,
    event: `showEvents`,
    operator: `showOperators`,
    unit: `showUnits`,
    value: `showValues`,
    constant: `showConstants`,
    enum: `showEnums`,
    enumMember: `showEnumMembers`,
    keyword: `showKeywords`,
    text: `showWords`,
    color: `showColors`,
    file: `showFiles`,
    reference: `showReferences`,
    folder: `showFolders`,
    typeParameter: `showTypeParameters`,
    snippet: `showSnippets`
  };
  xZ(`suggest.filteredTypes`, (e10, t10, n10) => {
    if (e10 && typeof e10 == `object`) {
      for (let r10 of Object.entries(wZ)) {
        let i10 = e10[r10[0]];
        i10 === false && t10(`suggest.${r10[1]}`) === void 0 && n10(`suggest.${r10[1]}`, false);
      }
      n10(`suggest.filteredTypes`, void 0);
    }
  }), xZ(`quickSuggestions`, (e10, t10, n10) => {
    if (typeof e10 == `boolean`) {
      let t11 = e10 ? `on` : `off`, r10 = {
        comments: t11,
        strings: t11,
        other: t11
      };
      n10(`quickSuggestions`, r10);
    }
  }), xZ(`experimental.stickyScroll.enabled`, (e10, t10, n10) => {
    typeof e10 == `boolean` && (n10(`experimental.stickyScroll.enabled`, void 0), t10(`stickyScroll.enabled`) === void 0 && n10(`stickyScroll.enabled`, e10));
  }), xZ(`experimental.stickyScroll.maxLineCount`, (e10, t10, n10) => {
    typeof e10 == `number` && (n10(`experimental.stickyScroll.maxLineCount`, void 0), t10(`stickyScroll.maxLineCount`) === void 0 && n10(`stickyScroll.maxLineCount`, e10));
  }), xZ(`codeActionsOnSave`, (e10, t10, n10) => {
    if (e10 && typeof e10 == `object`) {
      let t11 = false, r10 = {};
      for (let n11 of Object.entries(e10)) typeof n11[1] == `boolean` ? (t11 = true, r10[n11[0]] = n11[1] ? `explicit` : `never`) : r10[n11[0]] = n11[1];
      t11 && n10(`codeActionsOnSave`, r10);
    }
  }), xZ(`codeActionWidget.includeNearbyQuickfixes`, (e10, t10, n10) => {
    typeof e10 == `boolean` && (n10(`codeActionWidget.includeNearbyQuickfixes`, void 0), t10(`codeActionWidget.includeNearbyQuickFixes`) === void 0 && n10(`codeActionWidget.includeNearbyQuickFixes`, e10));
  }), xZ(`lightbulb.enabled`, (e10, t10, n10) => {
    typeof e10 == `boolean` && n10(`lightbulb.enabled`, e10 ? void 0 : `off`);
  });
  var TZ = class {
    constructor() {
      this._tabFocus = false, this._onDidChangeTabFocus = new N(), this.onDidChangeTabFocus = this._onDidChangeTabFocus.event;
    }
    getTabFocusMode() {
      return this._tabFocus;
    }
    setTabFocusMode(e10) {
      this._tabFocus = e10, this._onDidChangeTabFocus.fire(this._tabFocus);
    }
  };
  EZ = new TZ();
  var DZ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, OZ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let kZ = class extends j {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._accessibilityService = i10, this._onDidChange = this._register(new N()), this.onDidChange = this._onDidChange.event, this._onDidChangeFast = this._register(new N()), this.onDidChangeFast = this._onDidChangeFast.event, this._isDominatedByLongLines = false, this._viewLineCount = 1, this._lineNumbersDigitCount = 1, this._reservedHeight = 0, this._glyphMarginDecorationLaneCount = 1, this._computeOptionsMemory = new Jt(), this.isSimpleWidget = e10, this.contextMenuId = t10, this._containerObserver = this._register(new yZ(r10, n10.dimension)), this._targetWindowId = R(r10).vscodeWindowId, this._rawOptions = FZ(n10), this._validatedOptions = PZ.validateOptions(this._rawOptions), this.options = this._computeOptions(), this.options.get(13) && this._containerObserver.startObserving(), this._register(Rf.onDidChangeZoomLevel(() => this._recomputeOptions())), this._register(EZ.onDidChangeTabFocus(() => this._recomputeOptions())), this._register(this._containerObserver.onDidChange(() => this._recomputeOptions())), this._register(Kf.onDidChange(() => this._recomputeOptions())), this._register(Af.getInstance(R(r10)).onDidChange(() => this._recomputeOptions())), this._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => this._recomputeOptions()));
    }
    _recomputeOptions() {
      let e10 = this._computeOptions(), t10 = PZ.checkEquals(this.options, e10);
      t10 !== null && (this.options = e10, this._onDidChangeFast.fire(t10), this._onDidChange.fire(t10));
    }
    _computeOptions() {
      let e10 = this._readEnvConfiguration(), t10 = Vf.createFromValidatedSettings(this._validatedOptions, e10.pixelRatio, this.isSimpleWidget), n10 = this._readFontInfo(t10), r10 = {
        memory: this._computeOptionsMemory,
        outerWidth: e10.outerWidth,
        outerHeight: e10.outerHeight - this._reservedHeight,
        fontInfo: n10,
        extraEditorClassName: e10.extraEditorClassName,
        isDominatedByLongLines: this._isDominatedByLongLines,
        viewLineCount: this._viewLineCount,
        lineNumbersDigitCount: this._lineNumbersDigitCount,
        emptySelectionClipboard: e10.emptySelectionClipboard,
        pixelRatio: e10.pixelRatio,
        tabFocusMode: EZ.getTabFocusMode(),
        accessibilitySupport: e10.accessibilitySupport,
        glyphMarginDecorationLaneCount: this._glyphMarginDecorationLaneCount
      };
      return PZ.computeOptions(this._validatedOptions, r10);
    }
    _readEnvConfiguration() {
      return {
        extraEditorClassName: jZ(),
        outerWidth: this._containerObserver.getWidth(),
        outerHeight: this._containerObserver.getHeight(),
        emptySelectionClipboard: Cc || Sc,
        pixelRatio: Af.getInstance(qu(this._targetWindowId, true).window).value,
        accessibilitySupport: this._accessibilityService.isScreenReaderOptimized() ? 2 : this._accessibilityService.getAccessibilitySupport()
      };
    }
    _readFontInfo(e10) {
      return Kf.readFontInfo(qu(this._targetWindowId, true).window, e10);
    }
    getRawOptions() {
      return this._rawOptions;
    }
    updateOptions(e10) {
      let t10 = FZ(e10), n10 = PZ.applyUpdate(this._rawOptions, t10);
      n10 && (this._validatedOptions = PZ.validateOptions(this._rawOptions), this._recomputeOptions());
    }
    observeContainer(e10) {
      this._containerObserver.observe(e10);
    }
    setIsDominatedByLongLines(e10) {
      this._isDominatedByLongLines !== e10 && (this._isDominatedByLongLines = e10, this._recomputeOptions());
    }
    setModelLineCount(e10) {
      let t10 = AZ(e10);
      this._lineNumbersDigitCount !== t10 && (this._lineNumbersDigitCount = t10, this._recomputeOptions());
    }
    setViewLineCount(e10) {
      this._viewLineCount !== e10 && (this._viewLineCount = e10, this._recomputeOptions());
    }
    setReservedHeight(e10) {
      this._reservedHeight !== e10 && (this._reservedHeight = e10, this._recomputeOptions());
    }
    setGlyphMarginDecorationLaneCount(e10) {
      this._glyphMarginDecorationLaneCount !== e10 && (this._glyphMarginDecorationLaneCount = e10, this._recomputeOptions());
    }
  };
  kZ = DZ([
    OZ(4, zA)
  ], kZ);
  function AZ(e10) {
    let t10 = 0;
    for (; e10; ) e10 = Math.floor(e10 / 10), t10++;
    return t10 || 1;
  }
  function jZ() {
    let e10 = ``;
    return !Tc && !Ec && (e10 += `no-user-select `), Tc && (e10 += `no-minimap-shadow `, e10 += `enable-user-select `), E && (e10 += `mac `), e10;
  }
  var MZ = class {
    constructor() {
      this._values = [];
    }
    _read(e10) {
      return this._values[e10];
    }
    get(e10) {
      return this._values[e10];
    }
    _write(e10, t10) {
      this._values[e10] = t10;
    }
  }, NZ = class {
    constructor() {
      this._values = [];
    }
    _read(e10) {
      if (e10 >= this._values.length) throw Error(`Cannot read uninitialized value`);
      return this._values[e10];
    }
    get(e10) {
      return this._read(e10);
    }
    _write(e10, t10) {
      this._values[e10] = t10;
    }
  }, PZ = class e10 {
    static validateOptions(e11) {
      let t10 = new MZ();
      for (let n10 of fr) {
        let r10 = n10.name === `_never_` ? void 0 : e11[n10.name];
        t10._write(n10.id, n10.validate(r10));
      }
      return t10;
    }
    static computeOptions(e11, t10) {
      let n10 = new NZ();
      for (let r10 of fr) n10._write(r10.id, r10.compute(t10, n10, e11._read(r10.id)));
      return n10;
    }
    static _deepEquals(t10, n10) {
      if (typeof t10 != `object` || typeof n10 != `object` || !t10 || !n10) return t10 === n10;
      if (Array.isArray(t10) || Array.isArray(n10)) return Array.isArray(t10) && Array.isArray(n10) ? l(t10, n10) : false;
      if (Object.keys(t10).length !== Object.keys(n10).length) return false;
      for (let r10 in t10) if (!e10._deepEquals(t10[r10], n10[r10])) return false;
      return true;
    }
    static checkEquals(t10, n10) {
      let r10 = [], i10 = false;
      for (let a10 of fr) {
        let o10 = !e10._deepEquals(t10._read(a10.id), n10._read(a10.id));
        r10[a10.id] = o10, o10 && (i10 = true);
      }
      return i10 ? new qt(r10) : null;
    }
    static applyUpdate(e11, t10) {
      let n10 = false;
      for (let r10 of fr) if (t10.hasOwnProperty(r10.name)) {
        let i10 = r10.applyUpdate(e11[r10.name], t10[r10.name]);
        e11[r10.name] = i10.newValue, n10 || (n10 = i10.didChange);
      }
      return n10;
    }
  };
  function FZ(e10) {
    let t10 = je(e10);
    return CZ(t10), t10;
  }
  var IZ;
  (function(e10) {
    let t10 = {
      total: 0,
      min: Number.MAX_VALUE,
      max: 0
    }, n10 = {
      ...t10
    }, r10 = {
      ...t10
    }, i10 = {
      ...t10
    }, a10 = 0, o10 = {
      keydown: 0,
      input: 0,
      render: 0
    };
    function s10() {
      _10(), performance.mark(`inputlatency/start`), performance.mark(`keydown/start`), o10.keydown = 1, queueMicrotask(c10);
    }
    e10.onKeyDown = s10;
    function c10() {
      o10.keydown === 1 && (performance.mark(`keydown/end`), o10.keydown = 2);
    }
    function l10() {
      performance.mark(`input/start`), o10.input = 1, g10();
    }
    e10.onBeforeInput = l10;
    function u10() {
      o10.input === 0 && l10(), queueMicrotask(d10);
    }
    e10.onInput = u10;
    function d10() {
      o10.input === 1 && (performance.mark(`input/end`), o10.input = 2);
    }
    function f10() {
      _10();
    }
    e10.onKeyUp = f10;
    function p10() {
      _10();
    }
    e10.onSelectionChange = p10;
    function m10() {
      o10.keydown === 2 && o10.input === 2 && o10.render === 0 && (performance.mark(`render/start`), o10.render = 1, queueMicrotask(h10), g10());
    }
    e10.onRenderStart = m10;
    function h10() {
      o10.render === 1 && (performance.mark(`render/end`), o10.render = 2);
    }
    function g10() {
      setTimeout(_10);
    }
    function _10() {
      o10.keydown === 2 && o10.input === 2 && o10.render === 2 && (performance.mark(`inputlatency/end`), performance.measure(`keydown`, `keydown/start`, `keydown/end`), performance.measure(`input`, `input/start`, `input/end`), performance.measure(`render`, `render/start`, `render/end`), performance.measure(`inputlatency`, `inputlatency/start`, `inputlatency/end`), v10(`keydown`, t10), v10(`input`, n10), v10(`render`, r10), v10(`inputlatency`, i10), a10++, y10());
    }
    function v10(e11, t11) {
      let n11 = performance.getEntriesByName(e11)[0].duration;
      t11.total += n11, t11.min = Math.min(t11.min, n11), t11.max = Math.max(t11.max, n11);
    }
    function y10() {
      performance.clearMarks(`keydown/start`), performance.clearMarks(`keydown/end`), performance.clearMarks(`input/start`), performance.clearMarks(`input/end`), performance.clearMarks(`render/start`), performance.clearMarks(`render/end`), performance.clearMarks(`inputlatency/start`), performance.clearMarks(`inputlatency/end`), performance.clearMeasures(`keydown`), performance.clearMeasures(`input`), performance.clearMeasures(`render`), performance.clearMeasures(`inputlatency`), o10.keydown = 0, o10.input = 0, o10.render = 0;
    }
    function b10() {
      if (a10 === 0) return;
      let e11 = {
        keydown: x10(t10),
        input: x10(n10),
        render: x10(r10),
        total: x10(i10),
        sampleCount: a10
      };
      return S10(t10), S10(n10), S10(r10), S10(i10), a10 = 0, e11;
    }
    e10.getAndClearMeasurements = b10;
    function x10(e11) {
      return {
        average: e11.total / a10,
        max: e11.max,
        min: e11.min
      };
    }
    function S10(e11) {
      e11.total = 0, e11.min = Number.MAX_VALUE, e11.max = 0;
    }
  })(IZ || (IZ = {}));
  var LZ = class {
    constructor(e10, t10) {
      this.x = e10, this.y = t10, this._pageCoordinatesBrand = void 0;
    }
    toClientCoordinates(e10) {
      return new RZ(this.x - e10.scrollX, this.y - e10.scrollY);
    }
  }, RZ = class {
    constructor(e10, t10) {
      this.clientX = e10, this.clientY = t10, this._clientCoordinatesBrand = void 0;
    }
    toPageCoordinates(e10) {
      return new LZ(this.clientX + e10.scrollX, this.clientY + e10.scrollY);
    }
  }, zZ = class {
    constructor(e10, t10, n10, r10) {
      this.x = e10, this.y = t10, this.width = n10, this.height = r10, this._editorPagePositionBrand = void 0;
    }
  }, BZ = class {
    constructor(e10, t10) {
      this.x = e10, this.y = t10, this._positionRelativeToEditorBrand = void 0;
    }
  };
  function VZ(e10) {
    let t10 = gd(e10);
    return new zZ(t10.left, t10.top, t10.width, t10.height);
  }
  function HZ(e10, t10, n10) {
    let r10 = t10.width / e10.offsetWidth, i10 = t10.height / e10.offsetHeight, a10 = (n10.x - t10.x) / r10, o10 = (n10.y - t10.y) / i10;
    return new BZ(a10, o10);
  }
  let UZ, WZ, GZ, KZ, JZ;
  UZ = class extends Kc {
    constructor(e10, t10, n10) {
      super(R(n10), e10), this._editorMouseEventBrand = void 0, this.isFromPointerCapture = t10, this.pos = new LZ(this.posx, this.posy), this.editorPos = VZ(n10), this.relativePos = HZ(n10, this.editorPos, this.pos);
    }
  };
  WZ = class {
    constructor(e10) {
      this._editorViewDomNode = e10;
    }
    _create(e10) {
      return new UZ(e10, false, this._editorViewDomNode);
    }
    onContextMenu(e10, t10) {
      return z(e10, `contextmenu`, (e11) => {
        t10(this._create(e11));
      });
    }
    onMouseUp(e10, t10) {
      return z(e10, `mouseup`, (e11) => {
        t10(this._create(e11));
      });
    }
    onMouseDown(e10, t10) {
      return z(e10, B.MOUSE_DOWN, (e11) => {
        t10(this._create(e11));
      });
    }
    onPointerDown(e10, t10) {
      return z(e10, B.POINTER_DOWN, (e11) => {
        t10(this._create(e11), e11.pointerId);
      });
    }
    onMouseLeave(e10, t10) {
      return z(e10, B.MOUSE_LEAVE, (e11) => {
        t10(this._create(e11));
      });
    }
    onMouseMove(e10, t10) {
      return z(e10, `mousemove`, (e11) => t10(this._create(e11)));
    }
  };
  GZ = class {
    constructor(e10) {
      this._editorViewDomNode = e10;
    }
    _create(e10) {
      return new UZ(e10, false, this._editorViewDomNode);
    }
    onPointerUp(e10, t10) {
      return z(e10, `pointerup`, (e11) => {
        t10(this._create(e11));
      });
    }
    onPointerDown(e10, t10) {
      return z(e10, B.POINTER_DOWN, (e11) => {
        t10(this._create(e11), e11.pointerId);
      });
    }
    onPointerLeave(e10, t10) {
      return z(e10, B.POINTER_LEAVE, (e11) => {
        t10(this._create(e11));
      });
    }
    onPointerMove(e10, t10) {
      return z(e10, `pointermove`, (e11) => t10(this._create(e11)));
    }
  };
  KZ = class extends j {
    constructor(e10) {
      super(), this._editorViewDomNode = e10, this._globalPointerMoveMonitor = this._register(new NE()), this._keydownListener = null;
    }
    startMonitoring(e10, t10, n10, r10, i10) {
      this._keydownListener = td(e10.ownerDocument, `keydown`, (e11) => {
        let t11 = e11.toKeyCodeChord();
        t11.isModifierKey() || this._globalPointerMoveMonitor.stopMonitoring(true, e11.browserEvent);
      }, true), this._globalPointerMoveMonitor.startMonitoring(e10, t10, n10, (e11) => {
        r10(new UZ(e11, true, this._editorViewDomNode));
      }, (e11) => {
        this._keydownListener.dispose(), i10(e11);
      });
    }
    stopMonitoring() {
      this._globalPointerMoveMonitor.stopMonitoring(true);
    }
  };
  qZ = (_Pa = class {
    constructor(t10) {
      this._editor = t10, this._instanceId = ++_Pa._idPool, this._counter = 0, this._rules = /* @__PURE__ */ new Map(), this._garbageCollectionScheduler = new cl(() => this.garbageCollect(), 1e3);
    }
    createClassNameRef(e10) {
      let t10 = this.getOrCreateRule(e10);
      return t10.increaseRefCount(), {
        className: t10.className,
        dispose: () => {
          t10.decreaseRefCount(), this._garbageCollectionScheduler.schedule();
        }
      };
    }
    getOrCreateRule(e10) {
      let t10 = this.computeUniqueKey(e10), n10 = this._rules.get(t10);
      if (!n10) {
        let r10 = this._counter++;
        n10 = new JZ(t10, `dyn-rule-${this._instanceId}-${r10}`, Ed(this._editor.getContainerDomNode()) ? this._editor.getContainerDomNode() : void 0, e10), this._rules.set(t10, n10);
      }
      return n10;
    }
    computeUniqueKey(e10) {
      return JSON.stringify(e10);
    }
    garbageCollect() {
      for (let e10 of this._rules.values()) e10.hasReferences() || (this._rules.delete(e10.key), e10.dispose());
    }
  }, _Pa._idPool = 0, _Pa);
  JZ = class {
    constructor(e10, t10, n10, r10) {
      this.key = e10, this.className = t10, this.properties = r10, this._referenceCount = 0, this._styleElementDisposables = new A(), this._styleElement = Id(n10, void 0, this._styleElementDisposables), this._styleElement.textContent = this.getCssText(this.className, this.properties);
    }
    getCssText(e10, t10) {
      let n10 = `.${e10} {`;
      for (let e11 in t10) {
        let r10 = t10[e11], i10;
        i10 = typeof r10 == `object` ? q(r10.id) : r10;
        let a10 = YZ(e11);
        n10 += `
	${a10}: ${i10};`;
      }
      return n10 += `
}`, n10;
    }
    dispose() {
      this._styleElementDisposables.dispose(), this._styleElement = void 0;
    }
    increaseRefCount() {
      this._referenceCount++;
    }
    decreaseRefCount() {
      this._referenceCount--;
    }
    hasReferences() {
      return this._referenceCount > 0;
    }
  };
  function YZ(e10) {
    return e10.replace(/(^[A-Z])/, ([e11]) => e11.toLowerCase()).replace(/([A-Z])/g, ([e11]) => `-${e11.toLowerCase()}`);
  }
  var XZ = class extends j {
    constructor() {
      super(), this._shouldRender = true;
    }
    shouldRender() {
      return this._shouldRender;
    }
    forceShouldRender() {
      this._shouldRender = true;
    }
    setShouldRender() {
      this._shouldRender = true;
    }
    onDidRender() {
      this._shouldRender = false;
    }
    onCompositionStart(e10) {
      return false;
    }
    onCompositionEnd(e10) {
      return false;
    }
    onConfigurationChanged(e10) {
      return false;
    }
    onCursorStateChanged(e10) {
      return false;
    }
    onDecorationsChanged(e10) {
      return false;
    }
    onFlushed(e10) {
      return false;
    }
    onFocusChanged(e10) {
      return false;
    }
    onLanguageConfigurationChanged(e10) {
      return false;
    }
    onLineMappingChanged(e10) {
      return false;
    }
    onLinesChanged(e10) {
      return false;
    }
    onLinesDeleted(e10) {
      return false;
    }
    onLinesInserted(e10) {
      return false;
    }
    onRevealRangeRequest(e10) {
      return false;
    }
    onScrollChanged(e10) {
      return false;
    }
    onThemeChanged(e10) {
      return false;
    }
    onTokensChanged(e10) {
      return false;
    }
    onTokensColorsChanged(e10) {
      return false;
    }
    onZonesChanged(e10) {
      return false;
    }
    handleEvents(e10) {
      let t10 = false;
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10];
        switch (r11.type) {
          case 0:
            this.onCompositionStart(r11) && (t10 = true);
            break;
          case 1:
            this.onCompositionEnd(r11) && (t10 = true);
            break;
          case 2:
            this.onConfigurationChanged(r11) && (t10 = true);
            break;
          case 3:
            this.onCursorStateChanged(r11) && (t10 = true);
            break;
          case 4:
            this.onDecorationsChanged(r11) && (t10 = true);
            break;
          case 5:
            this.onFlushed(r11) && (t10 = true);
            break;
          case 6:
            this.onFocusChanged(r11) && (t10 = true);
            break;
          case 7:
            this.onLanguageConfigurationChanged(r11) && (t10 = true);
            break;
          case 8:
            this.onLineMappingChanged(r11) && (t10 = true);
            break;
          case 9:
            this.onLinesChanged(r11) && (t10 = true);
            break;
          case 10:
            this.onLinesDeleted(r11) && (t10 = true);
            break;
          case 11:
            this.onLinesInserted(r11) && (t10 = true);
            break;
          case 12:
            this.onRevealRangeRequest(r11) && (t10 = true);
            break;
          case 13:
            this.onScrollChanged(r11) && (t10 = true);
            break;
          case 15:
            this.onTokensChanged(r11) && (t10 = true);
            break;
          case 14:
            this.onThemeChanged(r11) && (t10 = true);
            break;
          case 16:
            this.onTokensColorsChanged(r11) && (t10 = true);
            break;
          case 17:
            this.onZonesChanged(r11) && (t10 = true);
            break;
          default:
            console.info(`View received unknown event: `), console.info(r11);
        }
      }
      t10 && (this._shouldRender = true);
    }
  }, ZZ = class extends XZ {
    constructor(e10) {
      super(), this._context = e10, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), super.dispose();
    }
  }, QZ = class {
    static write(e10, t10) {
      e10.setAttribute(`data-mprt`, String(t10));
    }
    static read(e10) {
      let t10 = e10.getAttribute(`data-mprt`);
      return t10 === null ? 0 : parseInt(t10, 10);
    }
    static collect(e10, t10) {
      let n10 = [], r10 = 0;
      for (; e10 && e10 !== e10.ownerDocument.body && e10 !== t10; ) e10.nodeType === e10.ELEMENT_NODE && (n10[r10++] = this.read(e10)), e10 = e10.parentElement;
      let i10 = new Uint8Array(r10);
      for (let e11 = 0; e11 < r10; e11++) i10[e11] = n10[r10 - e11 - 1];
      return i10;
    }
  }, $Z = class {
    constructor(e10, t10) {
      this._restrictedRenderingContextBrand = void 0, this._viewLayout = e10, this.viewportData = t10, this.scrollWidth = this._viewLayout.getScrollWidth(), this.scrollHeight = this._viewLayout.getScrollHeight(), this.visibleRange = this.viewportData.visibleRange, this.bigNumbersDelta = this.viewportData.bigNumbersDelta;
      let n10 = this._viewLayout.getCurrentViewport();
      this.scrollTop = n10.top, this.scrollLeft = n10.left, this.viewportWidth = n10.width, this.viewportHeight = n10.height;
    }
    getScrolledTopFromAbsoluteTop(e10) {
      return e10 - this.scrollTop;
    }
    getVerticalOffsetForLineNumber(e10, t10) {
      return this._viewLayout.getVerticalOffsetForLineNumber(e10, t10);
    }
    getVerticalOffsetAfterLineNumber(e10, t10) {
      return this._viewLayout.getVerticalOffsetAfterLineNumber(e10, t10);
    }
    getDecorationsInViewport() {
      return this.viewportData.getDecorationsInViewport();
    }
  }, eQ = class extends $Z {
    constructor(e10, t10, n10) {
      super(e10, t10), this._renderingContextBrand = void 0, this._viewLines = n10;
    }
    linesVisibleRangesForRange(e10, t10) {
      return this._viewLines.linesVisibleRangesForRange(e10, t10);
    }
    visibleRangeForPosition(e10) {
      return this._viewLines.visibleRangeForPosition(e10);
    }
  }, tQ = class {
    constructor(e10, t10, n10, r10) {
      this.outsideRenderedLine = e10, this.lineNumber = t10, this.ranges = n10, this.continuesOnNextLine = r10;
    }
  }, nQ = class e10 {
    static from(t10) {
      let n10 = Array(t10.length);
      for (let r10 = 0, i10 = t10.length; r10 < i10; r10++) {
        let i11 = t10[r10];
        n10[r10] = new e10(i11.left, i11.width);
      }
      return n10;
    }
    constructor(e11, t10) {
      this._horizontalRangeBrand = void 0, this.left = Math.round(e11), this.width = Math.round(t10);
    }
    toString() {
      return `[${this.left},${this.width}]`;
    }
  }, rQ = class {
    constructor(e10, t10) {
      this._floatHorizontalRangeBrand = void 0, this.left = e10, this.width = t10;
    }
    toString() {
      return `[${this.left},${this.width}]`;
    }
    static compare(e10, t10) {
      return e10.left - t10.left;
    }
  }, iQ = class {
    constructor(e10, t10) {
      this.outsideRenderedLine = e10, this.originalLeft = t10, this.left = Math.round(this.originalLeft);
    }
  }, aQ = class {
    constructor(e10, t10) {
      this.outsideRenderedLine = e10, this.ranges = t10;
    }
  }, oQ = class {
    static _createRange() {
      return this._handyReadyRange || (this._handyReadyRange = document.createRange()), this._handyReadyRange;
    }
    static _detachRange(e10, t10) {
      e10.selectNodeContents(t10);
    }
    static _readClientRects(e10, t10, n10, r10, i10) {
      let a10 = this._createRange();
      try {
        return a10.setStart(e10, t10), a10.setEnd(n10, r10), a10.getClientRects();
      } catch {
        return null;
      } finally {
        this._detachRange(a10, i10);
      }
    }
    static _mergeAdjacentRanges(e10) {
      if (e10.length === 1) return e10;
      e10.sort(rQ.compare);
      let t10 = [], n10 = 0, r10 = e10[0];
      for (let i10 = 1, a10 = e10.length; i10 < a10; i10++) {
        let a11 = e10[i10];
        r10.left + r10.width + 0.9 >= a11.left ? r10.width = Math.max(r10.width, a11.left + a11.width - r10.left) : (t10[n10++] = r10, r10 = a11);
      }
      return t10[n10++] = r10, t10;
    }
    static _createHorizontalRangesFromClientRects(e10, t10, n10) {
      if (!e10 || e10.length === 0) return null;
      let r10 = [];
      for (let i10 = 0, a10 = e10.length; i10 < a10; i10++) {
        let a11 = e10[i10];
        r10[i10] = new rQ(Math.max(0, (a11.left - t10) / n10), a11.width / n10);
      }
      return this._mergeAdjacentRanges(r10);
    }
    static readHorizontalRanges(e10, t10, n10, r10, i10, a10) {
      let o10 = 0, s10 = e10.children.length - 1;
      if (o10 > s10) return null;
      if (t10 = Math.min(s10, Math.max(o10, t10)), r10 = Math.min(s10, Math.max(o10, r10)), t10 === r10 && n10 === i10 && n10 === 0 && !e10.children[t10].firstChild) {
        let n11 = e10.children[t10].getClientRects();
        return a10.markDidDomLayout(), this._createHorizontalRangesFromClientRects(n11, a10.clientRectDeltaLeft, a10.clientRectScale);
      }
      t10 !== r10 && r10 > 0 && i10 === 0 && (r10--, i10 = 1073741824);
      let c10 = e10.children[t10].firstChild, l10 = e10.children[r10].firstChild;
      if ((!c10 || !l10) && (!c10 && n10 === 0 && t10 > 0 && (c10 = e10.children[t10 - 1].firstChild, n10 = 1073741824), !l10 && i10 === 0 && r10 > 0 && (l10 = e10.children[r10 - 1].firstChild, i10 = 1073741824)), !c10 || !l10) return null;
      n10 = Math.min(c10.textContent.length, Math.max(0, n10)), i10 = Math.min(l10.textContent.length, Math.max(0, i10));
      let u10 = this._readClientRects(c10, n10, l10, i10, a10.endNode);
      return a10.markDidDomLayout(), this._createHorizontalRangesFromClientRects(u10, a10.clientRectDeltaLeft, a10.clientRectScale);
    }
  };
  const sQ = /* @__PURE__ */ function() {
    return gt ? true : !(ht || Sc || Tc);
  }();
  let cQ = true;
  var lQ = class {
    constructor(e10, t10) {
      this.themeType = t10;
      let n10 = e10.options, r10 = n10.get(50), i10 = n10.get(38);
      i10 === `off` ? this.renderWhitespace = n10.get(100) : this.renderWhitespace = `none`, this.renderControlCharacters = n10.get(95), this.spaceWidth = r10.spaceWidth, this.middotWidth = r10.middotWidth, this.wsmiddotWidth = r10.wsmiddotWidth, this.useMonospaceOptimizations = r10.isMonospace && !n10.get(33), this.canUseHalfwidthRightwardsArrow = r10.canUseHalfwidthRightwardsArrow, this.lineHeight = n10.get(67), this.stopRenderingLineAfter = n10.get(118), this.fontLigatures = n10.get(51);
    }
    equals(e10) {
      return this.themeType === e10.themeType && this.renderWhitespace === e10.renderWhitespace && this.renderControlCharacters === e10.renderControlCharacters && this.spaceWidth === e10.spaceWidth && this.middotWidth === e10.middotWidth && this.wsmiddotWidth === e10.wsmiddotWidth && this.useMonospaceOptimizations === e10.useMonospaceOptimizations && this.canUseHalfwidthRightwardsArrow === e10.canUseHalfwidthRightwardsArrow && this.lineHeight === e10.lineHeight && this.stopRenderingLineAfter === e10.stopRenderingLineAfter && this.fontLigatures === e10.fontLigatures;
    }
  }, uQ = (_Qa = class {
    constructor(e10) {
      this._options = e10, this._isMaybeInvalid = true, this._renderedViewLine = null;
    }
    getDomNode() {
      return this._renderedViewLine && this._renderedViewLine.domNode ? this._renderedViewLine.domNode.domNode : null;
    }
    setDomNode(e10) {
      if (this._renderedViewLine) this._renderedViewLine.domNode = Nf(e10);
      else throw Error(`I have no rendered view line to set the dom node to...`);
    }
    onContentChanged() {
      this._isMaybeInvalid = true;
    }
    onTokensChanged() {
      this._isMaybeInvalid = true;
    }
    onDecorationsChanged() {
      this._isMaybeInvalid = true;
    }
    onOptionsChanged(e10) {
      this._isMaybeInvalid = true, this._options = e10;
    }
    onSelectionChanged() {
      return zb(this._options.themeType) || this._options.renderWhitespace === `selection` ? (this._isMaybeInvalid = true, true) : false;
    }
    renderLine(t10, n10, r10, i10, a10) {
      if (this._isMaybeInvalid === false) return false;
      this._isMaybeInvalid = false;
      let o10 = i10.getViewLineRenderingData(t10), s10 = this._options, c10 = sX.filter(o10.inlineDecorations, t10, o10.minColumn, o10.maxColumn), l10 = null;
      if (zb(s10.themeType) || this._options.renderWhitespace === `selection`) {
        let e10 = i10.selections;
        for (let n11 of e10) {
          if (n11.endLineNumber < t10 || n11.startLineNumber > t10) continue;
          let e11 = n11.startLineNumber === t10 ? n11.startColumn : o10.minColumn, r11 = n11.endLineNumber === t10 ? n11.endColumn : o10.maxColumn;
          e11 < r11 && (zb(s10.themeType) && c10.push(new sX(e11, r11, `inline-selected-text`, 0)), this._options.renderWhitespace === `selection` && (l10 || (l10 = []), l10.push(new fX(e11 - 1, r11 - 1))));
        }
      }
      let u10 = new pX(s10.useMonospaceOptimizations, s10.canUseHalfwidthRightwardsArrow, o10.content, o10.continuesWithWrappedLine, o10.isBasicASCII, o10.containsRTL, o10.minColumn - 1, o10.tokens, c10, o10.tabSize, o10.startVisibleColumn, s10.spaceWidth, s10.middotWidth, s10.wsmiddotWidth, s10.stopRenderingLineAfter, s10.renderWhitespace, s10.renderControlCharacters, s10.fontLigatures !== yn.OFF, l10);
      if (this._renderedViewLine && this._renderedViewLine.input.equals(u10)) return false;
      a10.appendString(`<div style="top:`), a10.appendString(String(n10)), a10.appendString(`px;height:`), a10.appendString(String(r10)), a10.appendString(`px;" class="`), a10.appendString(_Qa.CLASS_NAME), a10.appendString(`">`);
      let d10 = _X(u10, a10);
      a10.appendString(`</div>`);
      let f10 = null;
      return cQ && sQ && o10.isBasicASCII && s10.useMonospaceOptimizations && d10.containsForeignElements === 0 && (f10 = new dQ(this._renderedViewLine ? this._renderedViewLine.domNode : null, u10, d10.characterMapping)), f10 || (f10 = mQ(this._renderedViewLine ? this._renderedViewLine.domNode : null, u10, d10.characterMapping, d10.containsRTL, d10.containsForeignElements)), this._renderedViewLine = f10, true;
    }
    layoutLine(e10, t10, n10) {
      this._renderedViewLine && this._renderedViewLine.domNode && (this._renderedViewLine.domNode.setTop(t10), this._renderedViewLine.domNode.setHeight(n10));
    }
    getWidth(e10) {
      return this._renderedViewLine ? this._renderedViewLine.getWidth(e10) : 0;
    }
    getWidthIsFast() {
      return this._renderedViewLine ? this._renderedViewLine.getWidthIsFast() : true;
    }
    needsMonospaceFontCheck() {
      return this._renderedViewLine ? this._renderedViewLine instanceof dQ : false;
    }
    monospaceAssumptionsAreValid() {
      return this._renderedViewLine && this._renderedViewLine instanceof dQ ? this._renderedViewLine.monospaceAssumptionsAreValid() : cQ;
    }
    onMonospaceAssumptionsInvalidated() {
      this._renderedViewLine && this._renderedViewLine instanceof dQ && (this._renderedViewLine = this._renderedViewLine.toSlowRenderedLine());
    }
    getVisibleRangesForRange(e10, t10, n10, r10) {
      if (!this._renderedViewLine) return null;
      t10 = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, t10)), n10 = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, n10));
      let i10 = this._renderedViewLine.input.stopRenderingLineAfter;
      if (i10 !== -1 && t10 > i10 + 1 && n10 > i10 + 1) return new aQ(true, [
        new rQ(this.getWidth(r10), 0)
      ]);
      i10 !== -1 && t10 > i10 + 1 && (t10 = i10 + 1), i10 !== -1 && n10 > i10 + 1 && (n10 = i10 + 1);
      let a10 = this._renderedViewLine.getVisibleRangesForRange(e10, t10, n10, r10);
      return a10 && a10.length > 0 ? new aQ(false, a10) : null;
    }
    getColumnOfNodeOffset(e10, t10) {
      return this._renderedViewLine ? this._renderedViewLine.getColumnOfNodeOffset(e10, t10) : 1;
    }
  }, _Qa.CLASS_NAME = `view-line`, _Qa), dQ = class {
    constructor(e10, t10, n10) {
      this._cachedWidth = -1, this.domNode = e10, this.input = t10;
      let r10 = Math.floor(t10.lineContent.length / 300);
      if (r10 > 0) {
        this._keyColumnPixelOffsetCache = new Float32Array(r10);
        for (let e11 = 0; e11 < r10; e11++) this._keyColumnPixelOffsetCache[e11] = -1;
      } else this._keyColumnPixelOffsetCache = null;
      this._characterMapping = n10, this._charWidth = t10.spaceWidth;
    }
    getWidth(e10) {
      if (!this.domNode || this.input.lineContent.length < 300) {
        let e11 = this._characterMapping.getHorizontalOffset(this._characterMapping.length);
        return Math.round(this._charWidth * e11);
      }
      return this._cachedWidth === -1 && (this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth, e10 == null ? void 0 : e10.markDidDomLayout()), this._cachedWidth;
    }
    getWidthIsFast() {
      return this.input.lineContent.length < 300 || this._cachedWidth !== -1;
    }
    monospaceAssumptionsAreValid() {
      if (!this.domNode) return cQ;
      if (this.input.lineContent.length < 300) {
        let e10 = this.getWidth(null), t10 = this.domNode.domNode.firstChild.offsetWidth;
        Math.abs(e10 - t10) >= 2 && (console.warn(`monospace assumptions have been violated, therefore disabling monospace optimizations!`), cQ = false);
      }
      return cQ;
    }
    toSlowRenderedLine() {
      return mQ(this.domNode, this.input, this._characterMapping, false, 0);
    }
    getVisibleRangesForRange(e10, t10, n10, r10) {
      let i10 = this._getColumnPixelOffset(e10, t10, r10), a10 = this._getColumnPixelOffset(e10, n10, r10);
      return [
        new rQ(i10, a10 - i10)
      ];
    }
    _getColumnPixelOffset(e10, t10, n10) {
      if (t10 <= 300) {
        let e11 = this._characterMapping.getHorizontalOffset(t10);
        return this._charWidth * e11;
      }
      let r10 = Math.floor((t10 - 1) / 300) - 1, i10 = (r10 + 1) * 300 + 1, a10 = -1;
      if (this._keyColumnPixelOffsetCache && (a10 = this._keyColumnPixelOffsetCache[r10], a10 === -1 && (a10 = this._actualReadPixelOffset(e10, i10, n10), this._keyColumnPixelOffsetCache[r10] = a10)), a10 === -1) {
        let e11 = this._characterMapping.getHorizontalOffset(t10);
        return this._charWidth * e11;
      }
      let o10 = this._characterMapping.getHorizontalOffset(i10), s10 = this._characterMapping.getHorizontalOffset(t10);
      return a10 + this._charWidth * (s10 - o10);
    }
    _getReadingTarget(e10) {
      return e10.domNode.firstChild;
    }
    _actualReadPixelOffset(e10, t10, n10) {
      if (!this.domNode) return -1;
      let r10 = this._characterMapping.getDomPosition(t10), i10 = oQ.readHorizontalRanges(this._getReadingTarget(this.domNode), r10.partIndex, r10.charIndex, r10.partIndex, r10.charIndex, n10);
      return !i10 || i10.length === 0 ? -1 : i10[0].left;
    }
    getColumnOfNodeOffset(e10, t10) {
      return _Q(this._characterMapping, e10, t10);
    }
  }, fQ = class {
    constructor(e10, t10, n10, r10, i10) {
      if (this.domNode = e10, this.input = t10, this._characterMapping = n10, this._isWhitespaceOnly = /^\s*$/.test(t10.lineContent), this._containsForeignElements = i10, this._cachedWidth = -1, this._pixelOffsetCache = null, !r10 || this._characterMapping.length === 0) {
        this._pixelOffsetCache = new Float32Array(Math.max(2, this._characterMapping.length + 1));
        for (let e11 = 0, t11 = this._characterMapping.length; e11 <= t11; e11++) this._pixelOffsetCache[e11] = -1;
      }
    }
    _getReadingTarget(e10) {
      return e10.domNode.firstChild;
    }
    getWidth(e10) {
      return this.domNode ? (this._cachedWidth === -1 && (this._cachedWidth = this._getReadingTarget(this.domNode).offsetWidth, e10 == null ? void 0 : e10.markDidDomLayout()), this._cachedWidth) : 0;
    }
    getWidthIsFast() {
      return this._cachedWidth !== -1;
    }
    getVisibleRangesForRange(e10, t10, n10, r10) {
      if (!this.domNode) return null;
      if (this._pixelOffsetCache !== null) {
        let i10 = this._readPixelOffset(this.domNode, e10, t10, r10);
        if (i10 === -1) return null;
        let a10 = this._readPixelOffset(this.domNode, e10, n10, r10);
        return a10 === -1 ? null : [
          new rQ(i10, a10 - i10)
        ];
      }
      return this._readVisibleRangesForRange(this.domNode, e10, t10, n10, r10);
    }
    _readVisibleRangesForRange(e10, t10, n10, r10, i10) {
      if (n10 === r10) {
        let r11 = this._readPixelOffset(e10, t10, n10, i10);
        return r11 === -1 ? null : [
          new rQ(r11, 0)
        ];
      } else return this._readRawVisibleRangesForRange(e10, n10, r10, i10);
    }
    _readPixelOffset(e10, t10, n10, r10) {
      if (this._characterMapping.length === 0) {
        if (this._containsForeignElements === 0 || this._containsForeignElements === 2) return 0;
        if (this._containsForeignElements === 1) return this.getWidth(r10);
        let t11 = this._getReadingTarget(e10);
        return t11.firstChild ? (r10.markDidDomLayout(), t11.firstChild.offsetWidth) : 0;
      }
      if (this._pixelOffsetCache !== null) {
        let i10 = this._pixelOffsetCache[n10];
        if (i10 !== -1) return i10;
        let a10 = this._actualReadPixelOffset(e10, t10, n10, r10);
        return this._pixelOffsetCache[n10] = a10, a10;
      }
      return this._actualReadPixelOffset(e10, t10, n10, r10);
    }
    _actualReadPixelOffset(e10, t10, n10, r10) {
      if (this._characterMapping.length === 0) {
        let t11 = oQ.readHorizontalRanges(this._getReadingTarget(e10), 0, 0, 0, 0, r10);
        return !t11 || t11.length === 0 ? -1 : t11[0].left;
      }
      if (n10 === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === 0) return this.getWidth(r10);
      let i10 = this._characterMapping.getDomPosition(n10), a10 = oQ.readHorizontalRanges(this._getReadingTarget(e10), i10.partIndex, i10.charIndex, i10.partIndex, i10.charIndex, r10);
      if (!a10 || a10.length === 0) return -1;
      let o10 = a10[0].left;
      if (this.input.isBasicASCII) {
        let e11 = this._characterMapping.getHorizontalOffset(n10), t11 = Math.round(this.input.spaceWidth * e11);
        if (Math.abs(t11 - o10) <= 1) return t11;
      }
      return o10;
    }
    _readRawVisibleRangesForRange(e10, t10, n10, r10) {
      if (t10 === 1 && n10 === this._characterMapping.length) return [
        new rQ(0, this.getWidth(r10))
      ];
      let i10 = this._characterMapping.getDomPosition(t10), a10 = this._characterMapping.getDomPosition(n10);
      return oQ.readHorizontalRanges(this._getReadingTarget(e10), i10.partIndex, i10.charIndex, a10.partIndex, a10.charIndex, r10);
    }
    getColumnOfNodeOffset(e10, t10) {
      return _Q(this._characterMapping, e10, t10);
    }
  }, pQ = class extends fQ {
    _readVisibleRangesForRange(e10, t10, n10, r10, i10) {
      let a10 = super._readVisibleRangesForRange(e10, t10, n10, r10, i10);
      if (!a10 || a10.length === 0 || n10 === r10 || n10 === 1 && r10 === this._characterMapping.length) return a10;
      if (!this.input.containsRTL) {
        let n11 = this._readPixelOffset(e10, t10, r10, i10);
        if (n11 !== -1) {
          let e11 = a10[a10.length - 1];
          e11.left < n11 && (e11.width = n11 - e11.left);
        }
      }
      return a10;
    }
  };
  const mQ = /* @__PURE__ */ function() {
    return Cc ? hQ : gQ;
  }();
  function hQ(e10, t10, n10, r10, i10) {
    return new pQ(e10, t10, n10, r10, i10);
  }
  function gQ(e10, t10, n10, r10, i10) {
    return new fQ(e10, t10, n10, r10, i10);
  }
  _Q = function(e10, t10, n10) {
    let r10 = t10.textContent.length, i10 = -1;
    for (; t10; ) t10 = t10.previousSibling, i10++;
    return e10.getColumn(new mX(i10, n10), r10);
  };
  var vQ = class e10 {
    static whitespaceVisibleColumn(e11, t10, n10) {
      let r10 = e11.length, i10 = 0, a10 = -1, o10 = -1;
      for (let s10 = 0; s10 < r10; s10++) {
        if (s10 === t10) return [
          a10,
          o10,
          i10
        ];
        i10 % n10 === 0 && (a10 = s10, o10 = i10);
        let r11 = e11.charCodeAt(s10);
        switch (r11) {
          case 32:
            i10 += 1;
            break;
          case 9:
            i10 = gR.nextRenderTabStop(i10, n10);
            break;
          default:
            return [
              -1,
              -1,
              -1
            ];
        }
      }
      return t10 === r10 ? [
        a10,
        o10,
        i10
      ] : [
        -1,
        -1,
        -1
      ];
    }
    static atomicPosition(t10, n10, r10, i10) {
      let a10 = t10.length, [o10, s10, c10] = e10.whitespaceVisibleColumn(t10, n10, r10);
      if (c10 === -1) return -1;
      let l10;
      switch (i10) {
        case 0:
          l10 = true;
          break;
        case 1:
          l10 = false;
          break;
        case 2:
          if (c10 % r10 === 0) return n10;
          l10 = c10 % r10 <= r10 / 2;
          break;
      }
      if (l10) {
        if (o10 === -1) return -1;
        let e11 = s10;
        for (let n11 = o10; n11 < a10; ++n11) {
          if (e11 === s10 + r10) return o10;
          let i11 = t10.charCodeAt(n11);
          switch (i11) {
            case 32:
              e11 += 1;
              break;
            case 9:
              e11 = gR.nextRenderTabStop(e11, r10);
              break;
            default:
              return -1;
          }
        }
        return e11 === s10 + r10 ? o10 : -1;
      }
      let u10 = gR.nextRenderTabStop(c10, r10), d10 = c10;
      for (let e11 = n10; e11 < a10; e11++) {
        if (d10 === u10) return e11;
        let n11 = t10.charCodeAt(e11);
        switch (n11) {
          case 32:
            d10 += 1;
            break;
          case 9:
            d10 = gR.nextRenderTabStop(d10, r10);
            break;
          default:
            return -1;
        }
      }
      return d10 === u10 ? a10 : -1;
    }
  }, yQ = class {
    constructor(e10 = null) {
      this.hitTarget = e10, this.type = 0;
    }
  }, bQ = class {
    get hitTarget() {
      return this.spanNode;
    }
    constructor(e10, t10, n10) {
      this.position = e10, this.spanNode = t10, this.injectedText = n10, this.type = 1;
    }
  }, xQ;
  (function(e10) {
    function t10(e11, t11, n10) {
      let r10 = e11.getPositionFromDOMInfo(t11, n10);
      return r10 ? new bQ(r10, t11, null) : new yQ(t11);
    }
    e10.createFromDOMInfo = t10;
  })(xQ || (xQ = {}));
  var SQ = class {
    constructor(e10, t10) {
      this.lastViewCursorsRenderData = e10, this.lastTextareaPosition = t10;
    }
  }, CQ = class {
    static _deduceRage(e10, t10 = null) {
      return !t10 && e10 ? new F(e10.lineNumber, e10.column, e10.lineNumber, e10.column) : t10 ?? null;
    }
    static createUnknown(e10, t10, n10) {
      return {
        type: 0,
        element: e10,
        mouseColumn: t10,
        position: n10,
        range: this._deduceRage(n10)
      };
    }
    static createTextarea(e10, t10) {
      return {
        type: 1,
        element: e10,
        mouseColumn: t10,
        position: null,
        range: null
      };
    }
    static createMargin(e10, t10, n10, r10, i10, a10) {
      return {
        type: e10,
        element: t10,
        mouseColumn: n10,
        position: r10,
        range: i10,
        detail: a10
      };
    }
    static createViewZone(e10, t10, n10, r10, i10) {
      return {
        type: e10,
        element: t10,
        mouseColumn: n10,
        position: r10,
        range: this._deduceRage(r10),
        detail: i10
      };
    }
    static createContentText(e10, t10, n10, r10, i10) {
      return {
        type: 6,
        element: e10,
        mouseColumn: t10,
        position: n10,
        range: this._deduceRage(n10, r10),
        detail: i10
      };
    }
    static createContentEmpty(e10, t10, n10, r10) {
      return {
        type: 7,
        element: e10,
        mouseColumn: t10,
        position: n10,
        range: this._deduceRage(n10),
        detail: r10
      };
    }
    static createContentWidget(e10, t10, n10) {
      return {
        type: 9,
        element: e10,
        mouseColumn: t10,
        position: null,
        range: null,
        detail: n10
      };
    }
    static createScrollbar(e10, t10, n10) {
      return {
        type: 11,
        element: e10,
        mouseColumn: t10,
        position: n10,
        range: this._deduceRage(n10)
      };
    }
    static createOverlayWidget(e10, t10, n10) {
      return {
        type: 12,
        element: e10,
        mouseColumn: t10,
        position: null,
        range: null,
        detail: n10
      };
    }
    static createOutsideEditor(e10, t10, n10, r10) {
      return {
        type: 13,
        element: null,
        mouseColumn: e10,
        position: t10,
        range: this._deduceRage(t10),
        outsidePosition: n10,
        outsideDistance: r10
      };
    }
    static _typeToString(e10) {
      return e10 === 1 ? `TEXTAREA` : e10 === 2 ? `GUTTER_GLYPH_MARGIN` : e10 === 3 ? `GUTTER_LINE_NUMBERS` : e10 === 4 ? `GUTTER_LINE_DECORATIONS` : e10 === 5 ? `GUTTER_VIEW_ZONE` : e10 === 6 ? `CONTENT_TEXT` : e10 === 7 ? `CONTENT_EMPTY` : e10 === 8 ? `CONTENT_VIEW_ZONE` : e10 === 9 ? `CONTENT_WIDGET` : e10 === 10 ? `OVERVIEW_RULER` : e10 === 11 ? `SCROLLBAR` : e10 === 12 ? `OVERLAY_WIDGET` : `UNKNOWN`;
    }
    static toString(e10) {
      return this._typeToString(e10.type) + `: ` + e10.position + ` - ` + e10.range + ` - ` + JSON.stringify(e10.detail);
    }
  }, wQ = class {
    static isTextArea(e10) {
      return e10.length === 2 && e10[0] === 3 && e10[1] === 7;
    }
    static isChildOfViewLines(e10) {
      return e10.length >= 4 && e10[0] === 3 && e10[3] === 8;
    }
    static isStrictChildOfViewLines(e10) {
      return e10.length > 4 && e10[0] === 3 && e10[3] === 8;
    }
    static isChildOfScrollableElement(e10) {
      return e10.length >= 2 && e10[0] === 3 && e10[1] === 6;
    }
    static isChildOfMinimap(e10) {
      return e10.length >= 2 && e10[0] === 3 && e10[1] === 9;
    }
    static isChildOfContentWidgets(e10) {
      return e10.length >= 4 && e10[0] === 3 && e10[3] === 1;
    }
    static isChildOfOverflowGuard(e10) {
      return e10.length >= 1 && e10[0] === 3;
    }
    static isChildOfOverflowingContentWidgets(e10) {
      return e10.length >= 1 && e10[0] === 2;
    }
    static isChildOfOverlayWidgets(e10) {
      return e10.length >= 2 && e10[0] === 3 && e10[1] === 4;
    }
    static isChildOfOverflowingOverlayWidgets(e10) {
      return e10.length >= 1 && e10[0] === 5;
    }
  }, TQ = class e10 {
    constructor(e11, t10, n10) {
      this.viewModel = e11.viewModel;
      let r10 = e11.configuration.options;
      this.layoutInfo = r10.get(146), this.viewDomNode = t10.viewDomNode, this.lineHeight = r10.get(67), this.stickyTabStops = r10.get(117), this.typicalHalfwidthCharacterWidth = r10.get(50).typicalHalfwidthCharacterWidth, this.lastRenderData = n10, this._context = e11, this._viewHelper = t10;
    }
    getZoneAtCoord(t10) {
      return e10.getZoneAtCoord(this._context, t10);
    }
    static getZoneAtCoord(e11, t10) {
      let n10 = e11.viewLayout.getWhitespaceAtVerticalOffset(t10);
      if (n10) {
        let r10 = n10.verticalOffset + n10.height / 2, i10 = e11.viewModel.getLineCount(), a10 = null, o10, s10 = null;
        return n10.afterLineNumber !== i10 && (s10 = new P(n10.afterLineNumber + 1, 1)), n10.afterLineNumber > 0 && (a10 = new P(n10.afterLineNumber, e11.viewModel.getLineMaxColumn(n10.afterLineNumber))), o10 = s10 === null ? a10 : a10 === null ? s10 : t10 < r10 ? a10 : s10, {
          viewZoneId: n10.id,
          afterLineNumber: n10.afterLineNumber,
          positionBefore: a10,
          positionAfter: s10,
          position: o10
        };
      }
      return null;
    }
    getFullLineRangeAtCoord(e11) {
      if (this._context.viewLayout.isAfterLines(e11)) {
        let e12 = this._context.viewModel.getLineCount(), t11 = this._context.viewModel.getLineMaxColumn(e12);
        return {
          range: new F(e12, t11, e12, t11),
          isAfterLines: true
        };
      }
      let t10 = this._context.viewLayout.getLineNumberAtVerticalOffset(e11), n10 = this._context.viewModel.getLineMaxColumn(t10);
      return {
        range: new F(t10, 1, t10, n10),
        isAfterLines: false
      };
    }
    getLineNumberAtVerticalOffset(e11) {
      return this._context.viewLayout.getLineNumberAtVerticalOffset(e11);
    }
    isAfterLines(e11) {
      return this._context.viewLayout.isAfterLines(e11);
    }
    isInTopPadding(e11) {
      return this._context.viewLayout.isInTopPadding(e11);
    }
    isInBottomPadding(e11) {
      return this._context.viewLayout.isInBottomPadding(e11);
    }
    getVerticalOffsetForLineNumber(e11) {
      return this._context.viewLayout.getVerticalOffsetForLineNumber(e11);
    }
    findAttribute(t10, n10) {
      return e10._findAttribute(t10, n10, this._viewHelper.viewDomNode);
    }
    static _findAttribute(e11, t10, n10) {
      for (; e11 && e11 !== e11.ownerDocument.body; ) {
        if (e11.hasAttribute && e11.hasAttribute(t10)) return e11.getAttribute(t10);
        if (e11 === n10) return null;
        e11 = e11.parentNode;
      }
      return null;
    }
    getLineWidth(e11) {
      return this._viewHelper.getLineWidth(e11);
    }
    visibleRangeForPosition(e11, t10) {
      return this._viewHelper.visibleRangeForPosition(e11, t10);
    }
    getPositionFromDOMInfo(e11, t10) {
      return this._viewHelper.getPositionFromDOMInfo(e11, t10);
    }
    getCurrentScrollTop() {
      return this._context.viewLayout.getCurrentScrollTop();
    }
    getCurrentScrollLeft() {
      return this._context.viewLayout.getCurrentScrollLeft();
    }
  }, EQ = class {
    constructor(e10, t10, n10, r10) {
      this.editorPos = t10, this.pos = n10, this.relativePos = r10, this.mouseVerticalOffset = Math.max(0, e10.getCurrentScrollTop() + this.relativePos.y), this.mouseContentHorizontalOffset = e10.getCurrentScrollLeft() + this.relativePos.x - e10.layoutInfo.contentLeft, this.isInMarginArea = this.relativePos.x < e10.layoutInfo.contentLeft && this.relativePos.x >= e10.layoutInfo.glyphMarginLeft, this.isInContentArea = !this.isInMarginArea, this.mouseColumn = Math.max(0, AQ._getMouseColumn(this.mouseContentHorizontalOffset, e10.typicalHalfwidthCharacterWidth));
    }
  }, DQ = class extends EQ {
    get target() {
      return this._useHitTestTarget ? this.hitTestResult.value.hitTarget : this._eventTarget;
    }
    get targetPath() {
      return this._targetPathCacheElement !== this.target && (this._targetPathCacheElement = this.target, this._targetPathCacheValue = QZ.collect(this.target, this._ctx.viewDomNode)), this._targetPathCacheValue;
    }
    constructor(e10, t10, n10, r10, i10) {
      super(e10, t10, n10, r10), this.hitTestResult = new us(() => AQ.doHitTest(this._ctx, this)), this._targetPathCacheElement = null, this._targetPathCacheValue = new Uint8Array(), this._ctx = e10, this._eventTarget = i10;
      let a10 = !!this._eventTarget;
      this._useHitTestTarget = !a10;
    }
    toString() {
      return `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), relativePos(${this.relativePos.x},${this.relativePos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}
	target: ${this.target ? this.target.outerHTML : null}`;
    }
    get wouldBenefitFromHitTestTargetSwitch() {
      return !this._useHitTestTarget && this.hitTestResult.value.hitTarget !== null && this.target !== this.hitTestResult.value.hitTarget;
    }
    switchToHitTestTarget() {
      this._useHitTestTarget = true;
    }
    _getMouseColumn(e10 = null) {
      return e10 && e10.column < this._ctx.viewModel.getLineMaxColumn(e10.lineNumber) ? gR.visibleColumnFromColumn(this._ctx.viewModel.getLineContent(e10.lineNumber), e10.column, this._ctx.viewModel.model.getOptions().tabSize) + 1 : this.mouseColumn;
    }
    fulfillUnknown(e10 = null) {
      return CQ.createUnknown(this.target, this._getMouseColumn(e10), e10);
    }
    fulfillTextarea() {
      return CQ.createTextarea(this.target, this._getMouseColumn());
    }
    fulfillMargin(e10, t10, n10, r10) {
      return CQ.createMargin(e10, this.target, this._getMouseColumn(t10), t10, n10, r10);
    }
    fulfillViewZone(e10, t10, n10) {
      return CQ.createViewZone(e10, this.target, this._getMouseColumn(t10), t10, n10);
    }
    fulfillContentText(e10, t10, n10) {
      return CQ.createContentText(this.target, this._getMouseColumn(e10), e10, t10, n10);
    }
    fulfillContentEmpty(e10, t10) {
      return CQ.createContentEmpty(this.target, this._getMouseColumn(e10), e10, t10);
    }
    fulfillContentWidget(e10) {
      return CQ.createContentWidget(this.target, this._getMouseColumn(), e10);
    }
    fulfillScrollbar(e10) {
      return CQ.createScrollbar(this.target, this._getMouseColumn(e10), e10);
    }
    fulfillOverlayWidget(e10) {
      return CQ.createOverlayWidget(this.target, this._getMouseColumn(), e10);
    }
  };
  const OQ = {
    isAfterLines: true
  };
  function kQ(e10) {
    return {
      isAfterLines: false,
      horizontalDistanceToText: e10
    };
  }
  var AQ = class e10 {
    constructor(e11, t10) {
      this._context = e11, this._viewHelper = t10;
    }
    mouseTargetIsWidget(e11) {
      let t10 = e11.target, n10 = QZ.collect(t10, this._viewHelper.viewDomNode);
      return !!(wQ.isChildOfContentWidgets(n10) || wQ.isChildOfOverflowingContentWidgets(n10) || wQ.isChildOfOverlayWidgets(n10) || wQ.isChildOfOverflowingOverlayWidgets(n10));
    }
    createMouseTarget(t10, n10, r10, i10, a10) {
      let o10 = new TQ(this._context, this._viewHelper, t10), s10 = new DQ(o10, n10, r10, i10, a10);
      try {
        let t11 = e10._createMouseTarget(o10, s10);
        if (t11.type === 6 && o10.stickyTabStops && t11.position !== null) {
          let n11 = e10._snapToSoftTabBoundary(t11.position, o10.viewModel), r11 = F.fromPositions(n11, n11).plusRange(t11.range);
          return s10.fulfillContentText(n11, r11, t11.detail);
        }
        return t11;
      } catch {
        return s10.fulfillUnknown();
      }
    }
    static _createMouseTarget(t10, n10) {
      if (n10.target === null) return n10.fulfillUnknown();
      let r10 = n10, i10 = null;
      return !wQ.isChildOfOverflowGuard(n10.targetPath) && !wQ.isChildOfOverflowingContentWidgets(n10.targetPath) && !wQ.isChildOfOverflowingOverlayWidgets(n10.targetPath) && (i10 || (i10 = n10.fulfillUnknown())), i10 || (i10 = e10._hitTestContentWidget(t10, r10)), i10 || (i10 = e10._hitTestOverlayWidget(t10, r10)), i10 || (i10 = e10._hitTestMinimap(t10, r10)), i10 || (i10 = e10._hitTestScrollbarSlider(t10, r10)), i10 || (i10 = e10._hitTestViewZone(t10, r10)), i10 || (i10 = e10._hitTestMargin(t10, r10)), i10 || (i10 = e10._hitTestViewCursor(t10, r10)), i10 || (i10 = e10._hitTestTextArea(t10, r10)), i10 || (i10 = e10._hitTestViewLines(t10, r10)), i10 || (i10 = e10._hitTestScrollbar(t10, r10)), i10 || n10.fulfillUnknown();
    }
    static _hitTestContentWidget(e11, t10) {
      if (wQ.isChildOfContentWidgets(t10.targetPath) || wQ.isChildOfOverflowingContentWidgets(t10.targetPath)) {
        let n10 = e11.findAttribute(t10.target, `widgetId`);
        return n10 ? t10.fulfillContentWidget(n10) : t10.fulfillUnknown();
      }
      return null;
    }
    static _hitTestOverlayWidget(e11, t10) {
      if (wQ.isChildOfOverlayWidgets(t10.targetPath) || wQ.isChildOfOverflowingOverlayWidgets(t10.targetPath)) {
        let n10 = e11.findAttribute(t10.target, `widgetId`);
        return n10 ? t10.fulfillOverlayWidget(n10) : t10.fulfillUnknown();
      }
      return null;
    }
    static _hitTestViewCursor(e11, t10) {
      if (t10.target) {
        let n10 = e11.lastRenderData.lastViewCursorsRenderData;
        for (let e12 of n10) if (t10.target === e12.domNode) return t10.fulfillContentText(e12.position, null, {
          mightBeForeignElement: false,
          injectedText: null
        });
      }
      if (t10.isInContentArea) {
        let n10 = e11.lastRenderData.lastViewCursorsRenderData, r10 = t10.mouseContentHorizontalOffset, i10 = t10.mouseVerticalOffset;
        for (let a10 of n10) {
          if (r10 < a10.contentLeft || r10 > a10.contentLeft + a10.width) continue;
          let n11 = e11.getVerticalOffsetForLineNumber(a10.position.lineNumber);
          if (n11 <= i10 && i10 <= n11 + a10.height) return t10.fulfillContentText(a10.position, null, {
            mightBeForeignElement: false,
            injectedText: null
          });
        }
      }
      return null;
    }
    static _hitTestViewZone(e11, t10) {
      let n10 = e11.getZoneAtCoord(t10.mouseVerticalOffset);
      if (n10) {
        let e12 = t10.isInContentArea ? 8 : 5;
        return t10.fulfillViewZone(e12, n10.position, n10);
      }
      return null;
    }
    static _hitTestTextArea(e11, t10) {
      return wQ.isTextArea(t10.targetPath) ? e11.lastRenderData.lastTextareaPosition ? t10.fulfillContentText(e11.lastRenderData.lastTextareaPosition, null, {
        mightBeForeignElement: false,
        injectedText: null
      }) : t10.fulfillTextarea() : null;
    }
    static _hitTestMargin(e11, t10) {
      if (t10.isInMarginArea) {
        let n10 = e11.getFullLineRangeAtCoord(t10.mouseVerticalOffset), r10 = n10.range.getStartPosition(), i10 = Math.abs(t10.relativePos.x), a10 = {
          isAfterLines: n10.isAfterLines,
          glyphMarginLeft: e11.layoutInfo.glyphMarginLeft,
          glyphMarginWidth: e11.layoutInfo.glyphMarginWidth,
          lineNumbersWidth: e11.layoutInfo.lineNumbersWidth,
          offsetX: i10
        };
        if (i10 -= e11.layoutInfo.glyphMarginLeft, i10 <= e11.layoutInfo.glyphMarginWidth) {
          let o10 = e11.viewModel.coordinatesConverter.convertViewPositionToModelPosition(n10.range.getStartPosition()), s10 = e11.viewModel.glyphLanes.getLanesAtLine(o10.lineNumber);
          return a10.glyphMarginLane = s10[Math.floor(i10 / e11.lineHeight)], t10.fulfillMargin(2, r10, n10.range, a10);
        }
        return i10 -= e11.layoutInfo.glyphMarginWidth, i10 <= e11.layoutInfo.lineNumbersWidth ? t10.fulfillMargin(3, r10, n10.range, a10) : (i10 -= e11.layoutInfo.lineNumbersWidth, t10.fulfillMargin(4, r10, n10.range, a10));
      }
      return null;
    }
    static _hitTestViewLines(t10, n10) {
      if (!wQ.isChildOfViewLines(n10.targetPath)) return null;
      if (t10.isInTopPadding(n10.mouseVerticalOffset)) return n10.fulfillContentEmpty(new P(1, 1), OQ);
      if (t10.isAfterLines(n10.mouseVerticalOffset) || t10.isInBottomPadding(n10.mouseVerticalOffset)) {
        let e11 = t10.viewModel.getLineCount(), r11 = t10.viewModel.getLineMaxColumn(e11);
        return n10.fulfillContentEmpty(new P(e11, r11), OQ);
      }
      if (wQ.isStrictChildOfViewLines(n10.targetPath)) {
        let e11 = t10.getLineNumberAtVerticalOffset(n10.mouseVerticalOffset);
        if (t10.viewModel.getLineLength(e11) === 0) {
          let r12 = t10.getLineWidth(e11), i10 = kQ(n10.mouseContentHorizontalOffset - r12);
          return n10.fulfillContentEmpty(new P(e11, 1), i10);
        }
        let r11 = t10.getLineWidth(e11);
        if (n10.mouseContentHorizontalOffset >= r11) {
          let i10 = kQ(n10.mouseContentHorizontalOffset - r11), a10 = new P(e11, t10.viewModel.getLineMaxColumn(e11));
          return n10.fulfillContentEmpty(a10, i10);
        }
      }
      let r10 = n10.hitTestResult.value;
      return r10.type === 1 ? e10.createMouseTargetFromHitTestPosition(t10, n10, r10.spanNode, r10.position, r10.injectedText) : n10.wouldBenefitFromHitTestTargetSwitch ? (n10.switchToHitTestTarget(), this._createMouseTarget(t10, n10)) : n10.fulfillUnknown();
    }
    static _hitTestMinimap(e11, t10) {
      if (wQ.isChildOfMinimap(t10.targetPath)) {
        let n10 = e11.getLineNumberAtVerticalOffset(t10.mouseVerticalOffset), r10 = e11.viewModel.getLineMaxColumn(n10);
        return t10.fulfillScrollbar(new P(n10, r10));
      }
      return null;
    }
    static _hitTestScrollbarSlider(e11, t10) {
      if (wQ.isChildOfScrollableElement(t10.targetPath) && t10.target && t10.target.nodeType === 1) {
        let n10 = t10.target.className;
        if (n10 && /\b(slider|scrollbar)\b/.test(n10)) {
          let n11 = e11.getLineNumberAtVerticalOffset(t10.mouseVerticalOffset), r10 = e11.viewModel.getLineMaxColumn(n11);
          return t10.fulfillScrollbar(new P(n11, r10));
        }
      }
      return null;
    }
    static _hitTestScrollbar(e11, t10) {
      if (wQ.isChildOfScrollableElement(t10.targetPath)) {
        let n10 = e11.getLineNumberAtVerticalOffset(t10.mouseVerticalOffset), r10 = e11.viewModel.getLineMaxColumn(n10);
        return t10.fulfillScrollbar(new P(n10, r10));
      }
      return null;
    }
    getMouseColumn(t10) {
      let n10 = this._context.configuration.options, r10 = n10.get(146), i10 = this._context.viewLayout.getCurrentScrollLeft() + t10.x - r10.contentLeft;
      return e10._getMouseColumn(i10, n10.get(50).typicalHalfwidthCharacterWidth);
    }
    static _getMouseColumn(e11, t10) {
      if (e11 < 0) return 1;
      let n10 = Math.round(e11 / t10);
      return n10 + 1;
    }
    static createMouseTargetFromHitTestPosition(e11, t10, n10, r10, i10) {
      let a10 = r10.lineNumber, o10 = r10.column, s10 = e11.getLineWidth(a10);
      if (t10.mouseContentHorizontalOffset > s10) {
        let e12 = kQ(t10.mouseContentHorizontalOffset - s10);
        return t10.fulfillContentEmpty(r10, e12);
      }
      let c10 = e11.visibleRangeForPosition(a10, o10);
      if (!c10) return t10.fulfillUnknown(r10);
      let l10 = c10.left;
      if (Math.abs(t10.mouseContentHorizontalOffset - l10) < 1) return t10.fulfillContentText(r10, null, {
        mightBeForeignElement: !!i10,
        injectedText: i10
      });
      let u10 = [];
      if (u10.push({
        offset: c10.left,
        column: o10
      }), o10 > 1) {
        let t11 = e11.visibleRangeForPosition(a10, o10 - 1);
        t11 && u10.push({
          offset: t11.left,
          column: o10 - 1
        });
      }
      let d10 = e11.viewModel.getLineMaxColumn(a10);
      if (o10 < d10) {
        let t11 = e11.visibleRangeForPosition(a10, o10 + 1);
        t11 && u10.push({
          offset: t11.left,
          column: o10 + 1
        });
      }
      u10.sort((e12, t11) => e12.offset - t11.offset);
      let f10 = t10.pos.toClientCoordinates(R(e11.viewDomNode)), p10 = n10.getBoundingClientRect(), m10 = p10.left <= f10.clientX && f10.clientX <= p10.right, h10 = null;
      for (let e12 = 1; e12 < u10.length; e12++) {
        let n11 = u10[e12 - 1], i11 = u10[e12];
        if (n11.offset <= t10.mouseContentHorizontalOffset && t10.mouseContentHorizontalOffset <= i11.offset) {
          h10 = new F(a10, n11.column, a10, i11.column);
          let e13 = Math.abs(n11.offset - t10.mouseContentHorizontalOffset), o11 = Math.abs(i11.offset - t10.mouseContentHorizontalOffset);
          r10 = e13 < o11 ? new P(a10, n11.column) : new P(a10, i11.column);
          break;
        }
      }
      return t10.fulfillContentText(r10, h10, {
        mightBeForeignElement: !m10 || !!i10,
        injectedText: i10
      });
    }
    static _doHitTestWithCaretRangeFromPoint(e11, t10) {
      let n10 = e11.getLineNumberAtVerticalOffset(t10.mouseVerticalOffset), r10 = e11.getVerticalOffsetForLineNumber(n10), i10 = r10 + e11.lineHeight, a10 = n10 === e11.viewModel.getLineCount() && t10.mouseVerticalOffset > i10;
      if (!a10) {
        let n11 = Math.floor((r10 + i10) / 2), a11 = t10.pos.y + (n11 - t10.mouseVerticalOffset);
        a11 <= t10.editorPos.y && (a11 = t10.editorPos.y + 1), a11 >= t10.editorPos.y + t10.editorPos.height && (a11 = t10.editorPos.y + t10.editorPos.height - 1);
        let o10 = new LZ(t10.pos.x, a11), s10 = this._actualDoHitTestWithCaretRangeFromPoint(e11, o10.toClientCoordinates(R(e11.viewDomNode)));
        if (s10.type === 1) return s10;
      }
      return this._actualDoHitTestWithCaretRangeFromPoint(e11, t10.pos.toClientCoordinates(R(e11.viewDomNode)));
    }
    static _actualDoHitTestWithCaretRangeFromPoint(e11, t10) {
      let n10 = Dd(e11.viewDomNode), r10;
      if (r10 = n10 ? n10.caretRangeFromPoint === void 0 ? jQ(n10, t10.clientX, t10.clientY) : n10.caretRangeFromPoint(t10.clientX, t10.clientY) : e11.viewDomNode.ownerDocument.caretRangeFromPoint(t10.clientX, t10.clientY), !r10 || !r10.startContainer) return new yQ();
      let i10 = r10.startContainer;
      if (i10.nodeType === i10.TEXT_NODE) {
        let t11 = i10.parentNode, n11 = t11 ? t11.parentNode : null, a10 = n11 ? n11.parentNode : null, o10 = a10 && a10.nodeType === a10.ELEMENT_NODE ? a10.className : null;
        return o10 === uQ.CLASS_NAME ? xQ.createFromDOMInfo(e11, t11, r10.startOffset) : new yQ(i10.parentNode);
      } else if (i10.nodeType === i10.ELEMENT_NODE) {
        let t11 = i10.parentNode, n11 = t11 ? t11.parentNode : null, r11 = n11 && n11.nodeType === n11.ELEMENT_NODE ? n11.className : null;
        return r11 === uQ.CLASS_NAME ? xQ.createFromDOMInfo(e11, i10, i10.textContent.length) : new yQ(i10);
      }
      return new yQ();
    }
    static _doHitTestWithCaretPositionFromPoint(e11, t10) {
      let n10 = e11.viewDomNode.ownerDocument.caretPositionFromPoint(t10.clientX, t10.clientY);
      if (n10.offsetNode.nodeType === n10.offsetNode.TEXT_NODE) {
        let t11 = n10.offsetNode.parentNode, r10 = t11 ? t11.parentNode : null, i10 = r10 ? r10.parentNode : null, a10 = i10 && i10.nodeType === i10.ELEMENT_NODE ? i10.className : null;
        return a10 === uQ.CLASS_NAME ? xQ.createFromDOMInfo(e11, n10.offsetNode.parentNode, n10.offset) : new yQ(n10.offsetNode.parentNode);
      }
      if (n10.offsetNode.nodeType === n10.offsetNode.ELEMENT_NODE) {
        let t11 = n10.offsetNode.parentNode, r10 = t11 && t11.nodeType === t11.ELEMENT_NODE ? t11.className : null, i10 = t11 ? t11.parentNode : null, a10 = i10 && i10.nodeType === i10.ELEMENT_NODE ? i10.className : null;
        if (r10 === uQ.CLASS_NAME) {
          let t12 = n10.offsetNode.childNodes[Math.min(n10.offset, n10.offsetNode.childNodes.length - 1)];
          if (t12) return xQ.createFromDOMInfo(e11, t12, 0);
        } else if (a10 === uQ.CLASS_NAME) return xQ.createFromDOMInfo(e11, n10.offsetNode, 0);
      }
      return new yQ(n10.offsetNode);
    }
    static _snapToSoftTabBoundary(e11, t10) {
      let n10 = t10.getLineContent(e11.lineNumber), { tabSize: r10 } = t10.model.getOptions(), i10 = vQ.atomicPosition(n10, e11.column - 1, r10, 2);
      return i10 === -1 ? e11 : new P(e11.lineNumber, i10 + 1);
    }
    static doHitTest(e11, t10) {
      let n10 = new yQ();
      if (typeof e11.viewDomNode.ownerDocument.caretRangeFromPoint == `function` ? n10 = this._doHitTestWithCaretRangeFromPoint(e11, t10) : e11.viewDomNode.ownerDocument.caretPositionFromPoint && (n10 = this._doHitTestWithCaretPositionFromPoint(e11, t10.pos.toClientCoordinates(R(e11.viewDomNode)))), n10.type === 1) {
        let t11 = e11.viewModel.getInjectedTextAt(n10.position), r10 = e11.viewModel.normalizePosition(n10.position, 2);
        (t11 || !r10.equals(n10.position)) && (n10 = new bQ(r10, n10.spanNode, t11));
      }
      return n10;
    }
  };
  function jQ(e10, t10, n10) {
    let r10 = document.createRange(), i10 = e10.elementFromPoint(t10, n10);
    if (i10 !== null) {
      for (; i10 && i10.firstChild && i10.firstChild.nodeType !== i10.firstChild.TEXT_NODE && i10.lastChild && i10.lastChild.firstChild; ) i10 = i10.lastChild;
      let e11 = i10.getBoundingClientRect(), n11 = R(i10), a10 = n11.getComputedStyle(i10, null).getPropertyValue(`font-style`), o10 = n11.getComputedStyle(i10, null).getPropertyValue(`font-variant`), s10 = n11.getComputedStyle(i10, null).getPropertyValue(`font-weight`), c10 = n11.getComputedStyle(i10, null).getPropertyValue(`font-size`), l10 = n11.getComputedStyle(i10, null).getPropertyValue(`line-height`), u10 = n11.getComputedStyle(i10, null).getPropertyValue(`font-family`), d10 = `${a10} ${o10} ${s10} ${c10}/${l10} ${u10}`, f10 = i10.innerText, p10 = e11.left, m10 = 0, h10;
      if (t10 > e11.left + e11.width) m10 = f10.length;
      else {
        let e12 = MQ.getInstance();
        for (let n12 = 0; n12 < f10.length + 1; n12++) {
          if (h10 = e12.getCharWidth(f10.charAt(n12), d10) / 2, p10 += h10, t10 < p10) {
            m10 = n12;
            break;
          }
          p10 += h10;
        }
      }
      r10.setStart(i10.firstChild, m10), r10.setEnd(i10.firstChild, m10);
    }
    return r10;
  }
  var MQ = (_Ra = class {
    static getInstance() {
      return _Ra._INSTANCE || (_Ra._INSTANCE = new _Ra()), _Ra._INSTANCE;
    }
    constructor() {
      this._cache = {}, this._canvas = document.createElement(`canvas`);
    }
    getCharWidth(e10, t10) {
      let n10 = e10 + t10;
      if (this._cache[n10]) return this._cache[n10];
      let r10 = this._canvas.getContext(`2d`);
      r10.font = t10;
      let i10 = r10.measureText(e10), a10 = i10.width;
      return this._cache[n10] = a10, a10;
    }
  }, _Ra._INSTANCE = null, _Ra), NQ = class extends XZ {
    constructor(e10, t10, n10) {
      super(), this._mouseLeaveMonitor = null, this._context = e10, this.viewController = t10, this.viewHelper = n10, this.mouseTargetFactory = new AQ(this._context, n10), this._mouseDownOperation = this._register(new PQ(this._context, this.viewController, this.viewHelper, this.mouseTargetFactory, (e11, t11) => this._createMouseTarget(e11, t11), (e11) => this._getMouseColumn(e11))), this.lastMouseLeaveTime = -1, this._height = this._context.configuration.options.get(146).height;
      let r10 = new WZ(this.viewHelper.viewDomNode);
      this._register(r10.onContextMenu(this.viewHelper.viewDomNode, (e11) => this._onContextMenu(e11, true))), this._register(r10.onMouseMove(this.viewHelper.viewDomNode, (e11) => {
        this._onMouseMove(e11), this._mouseLeaveMonitor || (this._mouseLeaveMonitor = z(this.viewHelper.viewDomNode.ownerDocument, `mousemove`, (e12) => {
          this.viewHelper.viewDomNode.contains(e12.target) || this._onMouseLeave(new UZ(e12, false, this.viewHelper.viewDomNode));
        }));
      })), this._register(r10.onMouseUp(this.viewHelper.viewDomNode, (e11) => this._onMouseUp(e11))), this._register(r10.onMouseLeave(this.viewHelper.viewDomNode, (e11) => this._onMouseLeave(e11)));
      let i10 = 0;
      this._register(r10.onPointerDown(this.viewHelper.viewDomNode, (e11, t11) => {
        i10 = t11;
      })), this._register(z(this.viewHelper.viewDomNode, B.POINTER_UP, (e11) => {
        this._mouseDownOperation.onPointerUp();
      })), this._register(r10.onMouseDown(this.viewHelper.viewDomNode, (e11) => this._onMouseDown(e11, i10))), this._setupMouseWheelZoomListener(), this._context.addEventHandler(this);
    }
    _setupMouseWheelZoomListener() {
      let e10 = oD.INSTANCE, t10 = 0, n10 = Rf.getZoomLevel(), r10 = false, i10 = 0, a10 = (a11) => {
        if (this.viewController.emitMouseWheel(a11), !this._context.configuration.options.get(76)) return;
        let s10 = new qc(a11);
        if (e10.acceptStandardWheelEvent(s10), e10.isPhysicalMouseWheel()) {
          if (o10(a11)) {
            let e11 = Rf.getZoomLevel(), t11 = s10.deltaY > 0 ? 1 : -1;
            Rf.setZoomLevel(e11 + t11), s10.preventDefault(), s10.stopPropagation();
          }
        } else Date.now() - t10 > 50 && (n10 = Rf.getZoomLevel(), r10 = o10(a11), i10 = 0), t10 = Date.now(), i10 += s10.deltaY, r10 && (Rf.setZoomLevel(n10 + i10 / 5), s10.preventDefault(), s10.stopPropagation());
      };
      this._register(z(this.viewHelper.viewDomNode, B.MOUSE_WHEEL, a10, {
        capture: true,
        passive: false
      }));
      function o10(e11) {
        return E ? (e11.metaKey || e11.ctrlKey) && !e11.shiftKey && !e11.altKey : e11.ctrlKey && !e11.metaKey && !e11.shiftKey && !e11.altKey;
      }
    }
    dispose() {
      this._context.removeEventHandler(this), this._mouseLeaveMonitor && (this._mouseLeaveMonitor.dispose(), this._mouseLeaveMonitor = null), super.dispose();
    }
    onConfigurationChanged(e10) {
      if (e10.hasChanged(146)) {
        let e11 = this._context.configuration.options.get(146).height;
        this._height !== e11 && (this._height = e11, this._mouseDownOperation.onHeightChanged());
      }
      return false;
    }
    onCursorStateChanged(e10) {
      return this._mouseDownOperation.onCursorStateChanged(e10), false;
    }
    onFocusChanged(e10) {
      return false;
    }
    getTargetAtClientPoint(e10, t10) {
      let n10 = new RZ(e10, t10), r10 = n10.toPageCoordinates(R(this.viewHelper.viewDomNode)), i10 = VZ(this.viewHelper.viewDomNode);
      if (r10.y < i10.y || r10.y > i10.y + i10.height || r10.x < i10.x || r10.x > i10.x + i10.width) return null;
      let a10 = HZ(this.viewHelper.viewDomNode, i10, r10);
      return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), i10, r10, a10, null);
    }
    _createMouseTarget(e10, t10) {
      let n10 = e10.target;
      if (!this.viewHelper.viewDomNode.contains(n10)) {
        let t11 = Dd(this.viewHelper.viewDomNode);
        t11 && (n10 = t11.elementsFromPoint(e10.posx, e10.posy).find((e11) => this.viewHelper.viewDomNode.contains(e11)));
      }
      return this.mouseTargetFactory.createMouseTarget(this.viewHelper.getLastRenderData(), e10.editorPos, e10.pos, e10.relativePos, t10 ? n10 : null);
    }
    _getMouseColumn(e10) {
      return this.mouseTargetFactory.getMouseColumn(e10.relativePos);
    }
    _onContextMenu(e10, t10) {
      this.viewController.emitContextMenu({
        event: e10,
        target: this._createMouseTarget(e10, t10)
      });
    }
    _onMouseMove(e10) {
      let t10 = this.mouseTargetFactory.mouseTargetIsWidget(e10);
      if (t10 || e10.preventDefault(), this._mouseDownOperation.isActive()) return;
      let n10 = e10.timestamp;
      n10 < this.lastMouseLeaveTime || this.viewController.emitMouseMove({
        event: e10,
        target: this._createMouseTarget(e10, true)
      });
    }
    _onMouseLeave(e10) {
      this._mouseLeaveMonitor && (this._mouseLeaveMonitor.dispose(), this._mouseLeaveMonitor = null), this.lastMouseLeaveTime = (/* @__PURE__ */ new Date()).getTime(), this.viewController.emitMouseLeave({
        event: e10,
        target: null
      });
    }
    _onMouseUp(e10) {
      this.viewController.emitMouseUp({
        event: e10,
        target: this._createMouseTarget(e10, true)
      });
    }
    _onMouseDown(e10, t10) {
      let n10 = this._createMouseTarget(e10, true), r10 = n10.type === 6 || n10.type === 7, i10 = n10.type === 2 || n10.type === 3 || n10.type === 4, a10 = n10.type === 3, o10 = this._context.configuration.options.get(110), s10 = n10.type === 8 || n10.type === 5, c10 = n10.type === 9, l10 = e10.leftButton || e10.middleButton;
      E && e10.leftButton && e10.ctrlKey && (l10 = false);
      let u10 = () => {
        e10.preventDefault(), this.viewHelper.focusTextArea();
      };
      if (l10 && (r10 || a10 && o10)) u10(), this._mouseDownOperation.start(n10.type, e10, t10);
      else if (i10) e10.preventDefault();
      else if (s10) {
        let r11 = n10.detail;
        l10 && this.viewHelper.shouldSuppressMouseDownOnViewZone(r11.viewZoneId) && (u10(), this._mouseDownOperation.start(n10.type, e10, t10), e10.preventDefault());
      } else c10 && this.viewHelper.shouldSuppressMouseDownOnWidget(n10.detail) && (u10(), e10.preventDefault());
      this.viewController.emitMouseDown({
        event: e10,
        target: n10
      });
    }
  }, PQ = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._context = e10, this._viewController = t10, this._viewHelper = n10, this._mouseTargetFactory = r10, this._createMouseTarget = i10, this._getMouseColumn = a10, this._mouseMoveMonitor = this._register(new KZ(this._viewHelper.viewDomNode)), this._topBottomDragScrolling = this._register(new FQ(this._context, this._viewHelper, this._mouseTargetFactory, (e11, t11, n11) => this._dispatchMouse(e11, t11, n11))), this._mouseState = new LQ(), this._currentSelection = new Ma(1, 1, 1, 1), this._isActive = false, this._lastMouseEvent = null;
    }
    dispose() {
      super.dispose();
    }
    isActive() {
      return this._isActive;
    }
    _onMouseDownThenMove(e10) {
      this._lastMouseEvent = e10, this._mouseState.setModifiers(e10);
      let t10 = this._findMousePosition(e10, false);
      t10 && (this._mouseState.isDragAndDrop ? this._viewController.emitMouseDrag({
        event: e10,
        target: t10
      }) : t10.type === 13 && (t10.outsidePosition === `above` || t10.outsidePosition === `below`) ? this._topBottomDragScrolling.start(t10, e10) : (this._topBottomDragScrolling.stop(), this._dispatchMouse(t10, true, 1)));
    }
    start(e10, t10, n10) {
      this._lastMouseEvent = t10, this._mouseState.setStartedOnLineNumbers(e10 === 3), this._mouseState.setStartButtons(t10), this._mouseState.setModifiers(t10);
      let r10 = this._findMousePosition(t10, true);
      if (!r10 || !r10.position) return;
      this._mouseState.trySetCount(t10.detail, r10.position), t10.detail = this._mouseState.count;
      let i10 = this._context.configuration.options;
      if (!i10.get(92) && i10.get(35) && !i10.get(22) && !this._mouseState.altKey && t10.detail < 2 && !this._isActive && !this._currentSelection.isEmpty() && r10.type === 6 && r10.position && this._currentSelection.containsPosition(r10.position)) {
        this._mouseState.isDragAndDrop = true, this._isActive = true, this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, n10, t10.buttons, (e11) => this._onMouseDownThenMove(e11), (e11) => {
          let t11 = this._findMousePosition(this._lastMouseEvent, false);
          Yd(e11) ? this._viewController.emitMouseDropCanceled() : this._viewController.emitMouseDrop({
            event: this._lastMouseEvent,
            target: t11 ? this._createMouseTarget(this._lastMouseEvent, true) : null
          }), this._stop();
        });
        return;
      }
      this._mouseState.isDragAndDrop = false, this._dispatchMouse(r10, t10.shiftKey, 1), this._isActive || (this._isActive = true, this._mouseMoveMonitor.startMonitoring(this._viewHelper.viewLinesDomNode, n10, t10.buttons, (e11) => this._onMouseDownThenMove(e11), () => this._stop()));
    }
    _stop() {
      this._isActive = false, this._topBottomDragScrolling.stop();
    }
    onHeightChanged() {
      this._mouseMoveMonitor.stopMonitoring();
    }
    onPointerUp() {
      this._mouseMoveMonitor.stopMonitoring();
    }
    onCursorStateChanged(e10) {
      this._currentSelection = e10.selections[0];
    }
    _getPositionOutsideEditor(e10) {
      let t10 = e10.editorPos, n10 = this._context.viewModel, r10 = this._context.viewLayout, i10 = this._getMouseColumn(e10);
      if (e10.posy < t10.y) {
        let n11 = t10.y - e10.posy, a11 = Math.max(r10.getCurrentScrollTop() - n11, 0), o10 = TQ.getZoneAtCoord(this._context, a11);
        if (o10) {
          let e11 = this._helpPositionJumpOverViewZone(o10);
          if (e11) return CQ.createOutsideEditor(i10, e11, `above`, n11);
        }
        let s10 = r10.getLineNumberAtVerticalOffset(a11);
        return CQ.createOutsideEditor(i10, new P(s10, 1), `above`, n11);
      }
      if (e10.posy > t10.y + t10.height) {
        let a11 = e10.posy - t10.y - t10.height, o10 = r10.getCurrentScrollTop() + e10.relativePos.y, s10 = TQ.getZoneAtCoord(this._context, o10);
        if (s10) {
          let e11 = this._helpPositionJumpOverViewZone(s10);
          if (e11) return CQ.createOutsideEditor(i10, e11, `below`, a11);
        }
        let c10 = r10.getLineNumberAtVerticalOffset(o10);
        return CQ.createOutsideEditor(i10, new P(c10, n10.getLineMaxColumn(c10)), `below`, a11);
      }
      let a10 = r10.getLineNumberAtVerticalOffset(r10.getCurrentScrollTop() + e10.relativePos.y);
      if (e10.posx < t10.x) {
        let n11 = t10.x - e10.posx;
        return CQ.createOutsideEditor(i10, new P(a10, 1), `left`, n11);
      }
      if (e10.posx > t10.x + t10.width) {
        let r11 = e10.posx - t10.x - t10.width;
        return CQ.createOutsideEditor(i10, new P(a10, n10.getLineMaxColumn(a10)), `right`, r11);
      }
      return null;
    }
    _findMousePosition(e10, t10) {
      let n10 = this._getPositionOutsideEditor(e10);
      if (n10) return n10;
      let r10 = this._createMouseTarget(e10, t10), i10 = r10.position;
      if (!i10) return null;
      if (r10.type === 8 || r10.type === 5) {
        let e11 = this._helpPositionJumpOverViewZone(r10.detail);
        if (e11) return CQ.createViewZone(r10.type, r10.element, r10.mouseColumn, e11, r10.detail);
      }
      return r10;
    }
    _helpPositionJumpOverViewZone(e10) {
      let t10 = new P(this._currentSelection.selectionStartLineNumber, this._currentSelection.selectionStartColumn), n10 = e10.positionBefore, r10 = e10.positionAfter;
      return n10 && r10 ? n10.isBefore(t10) ? n10 : r10 : null;
    }
    _dispatchMouse(e10, t10, n10) {
      e10.position && this._viewController.dispatchMouse({
        position: e10.position,
        mouseColumn: e10.mouseColumn,
        startedOnLineNumbers: this._mouseState.startedOnLineNumbers,
        revealType: n10,
        inSelectionMode: t10,
        mouseDownCount: this._mouseState.count,
        altKey: this._mouseState.altKey,
        ctrlKey: this._mouseState.ctrlKey,
        metaKey: this._mouseState.metaKey,
        shiftKey: this._mouseState.shiftKey,
        leftButton: this._mouseState.leftButton,
        middleButton: this._mouseState.middleButton,
        onInjectedText: e10.type === 6 && e10.detail.injectedText !== null
      });
    }
  }, FQ = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._context = e10, this._viewHelper = t10, this._mouseTargetFactory = n10, this._dispatchMouse = r10, this._operation = null;
    }
    dispose() {
      super.dispose(), this.stop();
    }
    start(e10, t10) {
      this._operation ? this._operation.setPosition(e10, t10) : this._operation = new IQ(this._context, this._viewHelper, this._mouseTargetFactory, this._dispatchMouse, e10, t10);
    }
    stop() {
      this._operation && (this._operation.dispose(), this._operation = null);
    }
  }, IQ = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._context = e10, this._viewHelper = t10, this._mouseTargetFactory = n10, this._dispatchMouse = r10, this._position = i10, this._mouseEvent = a10, this._lastTime = Date.now(), this._animationFrameDisposable = sd(R(a10.browserEvent), () => this._execute());
    }
    dispose() {
      this._animationFrameDisposable.dispose(), super.dispose();
    }
    setPosition(e10, t10) {
      this._position = e10, this._mouseEvent = t10;
    }
    _tick() {
      let e10 = Date.now(), t10 = e10 - this._lastTime;
      return this._lastTime = e10, t10;
    }
    _getScrollSpeed() {
      let e10 = this._context.configuration.options.get(67), t10 = this._context.configuration.options.get(146).height / e10, n10 = this._position.outsideDistance / e10;
      return n10 <= 1.5 ? Math.max(30, t10 * (1 + n10)) : n10 <= 3 ? Math.max(60, t10 * (2 + n10)) : Math.max(200, t10 * (7 + n10));
    }
    _execute() {
      let e10 = this._context.configuration.options.get(67), t10 = this._getScrollSpeed(), n10 = this._tick(), r10 = t10 * (n10 / 1e3) * e10, i10 = this._position.outsidePosition === `above` ? -r10 : r10;
      this._context.viewModel.viewLayout.deltaScrollNow(0, i10), this._viewHelper.renderNow();
      let a10 = this._context.viewLayout.getLinesViewportData(), o10 = this._position.outsidePosition === `above` ? a10.startLineNumber : a10.endLineNumber, s10;
      {
        let e11 = VZ(this._viewHelper.viewDomNode), t11 = this._context.configuration.options.get(146).horizontalScrollbarHeight, n11 = new LZ(this._mouseEvent.pos.x, e11.y + e11.height - t11 - 0.1), r11 = HZ(this._viewHelper.viewDomNode, e11, n11);
        s10 = this._mouseTargetFactory.createMouseTarget(this._viewHelper.getLastRenderData(), e11, n11, r11, null);
      }
      (!s10.position || s10.position.lineNumber !== o10) && (s10 = this._position.outsidePosition === `above` ? CQ.createOutsideEditor(this._position.mouseColumn, new P(o10, 1), `above`, this._position.outsideDistance) : CQ.createOutsideEditor(this._position.mouseColumn, new P(o10, this._context.viewModel.getLineMaxColumn(o10)), `below`, this._position.outsideDistance)), this._dispatchMouse(s10, true, 2), this._animationFrameDisposable = sd(R(s10.element), () => this._execute());
    }
  }, LQ = (_Sa = class {
    get altKey() {
      return this._altKey;
    }
    get ctrlKey() {
      return this._ctrlKey;
    }
    get metaKey() {
      return this._metaKey;
    }
    get shiftKey() {
      return this._shiftKey;
    }
    get leftButton() {
      return this._leftButton;
    }
    get middleButton() {
      return this._middleButton;
    }
    get startedOnLineNumbers() {
      return this._startedOnLineNumbers;
    }
    constructor() {
      this._altKey = false, this._ctrlKey = false, this._metaKey = false, this._shiftKey = false, this._leftButton = false, this._middleButton = false, this._startedOnLineNumbers = false, this._lastMouseDownPosition = null, this._lastMouseDownPositionEqualCount = 0, this._lastMouseDownCount = 0, this._lastSetMouseDownCountTime = 0, this.isDragAndDrop = false;
    }
    get count() {
      return this._lastMouseDownCount;
    }
    setModifiers(e10) {
      this._altKey = e10.altKey, this._ctrlKey = e10.ctrlKey, this._metaKey = e10.metaKey, this._shiftKey = e10.shiftKey;
    }
    setStartButtons(e10) {
      this._leftButton = e10.leftButton, this._middleButton = e10.middleButton;
    }
    setStartedOnLineNumbers(e10) {
      this._startedOnLineNumbers = e10;
    }
    trySetCount(t10, n10) {
      let r10 = (/* @__PURE__ */ new Date()).getTime();
      r10 - this._lastSetMouseDownCountTime > _Sa.CLEAR_MOUSE_DOWN_COUNT_TIME && (t10 = 1), this._lastSetMouseDownCountTime = r10, t10 > this._lastMouseDownCount + 1 && (t10 = this._lastMouseDownCount + 1), this._lastMouseDownPosition && this._lastMouseDownPosition.equals(n10) ? this._lastMouseDownPositionEqualCount++ : this._lastMouseDownPositionEqualCount = 1, this._lastMouseDownPosition = n10, this._lastMouseDownCount = Math.min(t10, this._lastMouseDownPositionEqualCount);
    }
  }, _Sa.CLEAR_MOUSE_DOWN_COUNT_TIME = 400, _Sa);
  const RQ = false;
  var zQ = (_Ta = class {
    constructor(e10, t10, n10, r10, i10) {
      this.value = e10, this.selectionStart = t10, this.selectionEnd = n10, this.selection = r10, this.newlineCountBeforeSelection = i10;
    }
    toString() {
      return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;
    }
    static readFromTextArea(t10, n10) {
      let r10 = t10.getValue(), i10 = t10.getSelectionStart(), a10 = t10.getSelectionEnd(), o10;
      if (n10) {
        let e10 = r10.substring(0, i10), t11 = n10.value.substring(0, n10.selectionStart);
        e10 === t11 && (o10 = n10.newlineCountBeforeSelection);
      }
      return new _Ta(r10, i10, a10, null, o10);
    }
    collapseSelection() {
      return this.selectionStart === this.value.length ? this : new _Ta(this.value, this.value.length, this.value.length, null, void 0);
    }
    writeToTextArea(e10, t10, n10) {
      RQ && console.log(`writeToTextArea ${e10}: ${this.toString()}`), t10.setValue(e10, this.value), n10 && t10.setSelectionRange(e10, this.selectionStart, this.selectionEnd);
    }
    deduceEditorPosition(e10) {
      var _a3, _b3, _c3, _d3;
      if (e10 <= this.selectionStart) {
        let t11 = this.value.substring(e10, this.selectionStart);
        return this._finishDeduceEditorPosition(((_a3 = this.selection) == null ? void 0 : _a3.getStartPosition()) ?? null, t11, -1);
      }
      if (e10 >= this.selectionEnd) {
        let t11 = this.value.substring(this.selectionEnd, e10);
        return this._finishDeduceEditorPosition(((_b3 = this.selection) == null ? void 0 : _b3.getEndPosition()) ?? null, t11, 1);
      }
      let t10 = this.value.substring(this.selectionStart, e10);
      if (t10.indexOf(`\u2026`) === -1) return this._finishDeduceEditorPosition(((_c3 = this.selection) == null ? void 0 : _c3.getStartPosition()) ?? null, t10, 1);
      let n10 = this.value.substring(e10, this.selectionEnd);
      return this._finishDeduceEditorPosition(((_d3 = this.selection) == null ? void 0 : _d3.getEndPosition()) ?? null, n10, -1);
    }
    _finishDeduceEditorPosition(e10, t10, n10) {
      let r10 = 0, i10 = -1;
      for (; (i10 = t10.indexOf(`
`, i10 + 1)) !== -1; ) r10++;
      return [
        e10,
        n10 * t10.length,
        r10
      ];
    }
    static deduceInput(e10, t10, n10) {
      if (!e10) return {
        text: ``,
        replacePrevCharCnt: 0,
        replaceNextCharCnt: 0,
        positionDelta: 0
      };
      RQ && (console.log(`------------------------deduceInput`), console.log(`PREVIOUS STATE: ${e10.toString()}`), console.log(`CURRENT STATE: ${t10.toString()}`));
      let r10 = Math.min(Rs(e10.value, t10.value), e10.selectionStart, t10.selectionStart), i10 = Math.min(zs(e10.value, t10.value), e10.value.length - e10.selectionEnd, t10.value.length - t10.selectionEnd), a10 = e10.value.substring(r10, e10.value.length - i10), o10 = t10.value.substring(r10, t10.value.length - i10), s10 = e10.selectionStart - r10, c10 = e10.selectionEnd - r10, l10 = t10.selectionStart - r10, u10 = t10.selectionEnd - r10;
      if (RQ && (console.log(`AFTER DIFFING PREVIOUS STATE: <${a10}>, selectionStart: ${s10}, selectionEnd: ${c10}`), console.log(`AFTER DIFFING CURRENT STATE: <${o10}>, selectionStart: ${l10}, selectionEnd: ${u10}`)), l10 === u10) {
        let t11 = e10.selectionStart - r10;
        return RQ && console.log(`REMOVE PREVIOUS: ${t11} chars`), {
          text: o10,
          replacePrevCharCnt: t11,
          replaceNextCharCnt: 0,
          positionDelta: 0
        };
      }
      let d10 = c10 - s10;
      return {
        text: o10,
        replacePrevCharCnt: d10,
        replaceNextCharCnt: 0,
        positionDelta: 0
      };
    }
    static deduceAndroidCompositionInput(e10, t10) {
      if (!e10) return {
        text: ``,
        replacePrevCharCnt: 0,
        replaceNextCharCnt: 0,
        positionDelta: 0
      };
      if (RQ && (console.log(`------------------------deduceAndroidCompositionInput`), console.log(`PREVIOUS STATE: ${e10.toString()}`), console.log(`CURRENT STATE: ${t10.toString()}`)), e10.value === t10.value) return {
        text: ``,
        replacePrevCharCnt: 0,
        replaceNextCharCnt: 0,
        positionDelta: t10.selectionEnd - e10.selectionEnd
      };
      let n10 = Math.min(Rs(e10.value, t10.value), e10.selectionEnd), r10 = Math.min(zs(e10.value, t10.value), e10.value.length - e10.selectionEnd), i10 = e10.value.substring(n10, e10.value.length - r10), a10 = t10.value.substring(n10, t10.value.length - r10), o10 = e10.selectionStart - n10, s10 = e10.selectionEnd - n10, c10 = t10.selectionStart - n10, l10 = t10.selectionEnd - n10;
      return RQ && (console.log(`AFTER DIFFING PREVIOUS STATE: <${i10}>, selectionStart: ${o10}, selectionEnd: ${s10}`), console.log(`AFTER DIFFING CURRENT STATE: <${a10}>, selectionStart: ${c10}, selectionEnd: ${l10}`)), {
        text: a10,
        replacePrevCharCnt: s10,
        replaceNextCharCnt: i10.length - s10,
        positionDelta: l10 - a10.length
      };
    }
  }, _Ta.EMPTY = new _Ta(``, 0, 0, null, void 0), _Ta), BQ = class e10 {
    static _getPageOfLine(e11, t10) {
      return Math.floor((e11 - 1) / t10);
    }
    static _getRangeForPage(e11, t10) {
      let n10 = e11 * t10, r10 = n10 + 1, i10 = n10 + t10;
      return new F(r10, 1, i10 + 1, 1);
    }
    static fromEditorSelection(t10, n10, r10, i10) {
      let a10 = 500, o10 = e10._getPageOfLine(n10.startLineNumber, r10), s10 = e10._getRangeForPage(o10, r10), c10 = e10._getPageOfLine(n10.endLineNumber, r10), l10 = e10._getRangeForPage(c10, r10), u10 = s10.intersectRanges(new F(1, 1, n10.startLineNumber, n10.startColumn));
      if (i10 && t10.getValueLengthInRange(u10, 1) > a10) {
        let e11 = t10.modifyPosition(u10.getEndPosition(), -a10);
        u10 = F.fromPositions(e11, u10.getEndPosition());
      }
      let d10 = t10.getValueInRange(u10, 1), f10 = t10.getLineCount(), p10 = t10.getLineMaxColumn(f10), m10 = l10.intersectRanges(new F(n10.endLineNumber, n10.endColumn, f10, p10));
      if (i10 && t10.getValueLengthInRange(m10, 1) > a10) {
        let e11 = t10.modifyPosition(m10.getStartPosition(), a10);
        m10 = F.fromPositions(m10.getStartPosition(), e11);
      }
      let h10 = t10.getValueInRange(m10, 1), g10;
      if (o10 === c10 || o10 + 1 === c10) g10 = t10.getValueInRange(n10, 1);
      else {
        let e11 = s10.intersectRanges(n10), r11 = l10.intersectRanges(n10);
        g10 = t10.getValueInRange(e11, 1) + `\u2026` + t10.getValueInRange(r11, 1);
      }
      return i10 && g10.length > 2 * a10 && (g10 = g10.substring(0, a10) + `\u2026` + g10.substring(g10.length - a10, g10.length)), new zQ(d10 + g10 + h10, d10.length, d10.length + g10.length, n10, u10.endLineNumber - u10.startLineNumber);
    }
  }, VQ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, HQ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, UQ;
  (function(e10) {
    e10.Tap = `-monaco-textarea-synthetic-tap`;
  })(UQ || (UQ = {}));
  WQ = {
    forceCopyWithSyntaxHighlighting: false
  };
  let KQ;
  GQ = (_Ua = class {
    constructor() {
      this._lastState = null;
    }
    set(e10, t10) {
      this._lastState = {
        lastCopiedValue: e10,
        data: t10
      };
    }
    get(e10) {
      return this._lastState && this._lastState.lastCopiedValue === e10 ? this._lastState.data : (this._lastState = null, null);
    }
  }, _Ua.INSTANCE = new _Ua(), _Ua);
  KQ = class {
    constructor() {
      this._lastTypeTextLength = 0;
    }
    handleCompositionUpdate(e10) {
      e10 || (e10 = ``);
      let t10 = {
        text: e10,
        replacePrevCharCnt: this._lastTypeTextLength,
        replaceNextCharCnt: 0,
        positionDelta: 0
      };
      return this._lastTypeTextLength = e10.length, t10;
    }
  };
  let qQ = class extends j {
    get textAreaState() {
      return this._textAreaState;
    }
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._host = e10, this._textArea = t10, this._OS = n10, this._browser = r10, this._accessibilityService = i10, this._logService = a10, this._onFocus = this._register(new N()), this.onFocus = this._onFocus.event, this._onBlur = this._register(new N()), this.onBlur = this._onBlur.event, this._onKeyDown = this._register(new N()), this.onKeyDown = this._onKeyDown.event, this._onKeyUp = this._register(new N()), this.onKeyUp = this._onKeyUp.event, this._onCut = this._register(new N()), this.onCut = this._onCut.event, this._onPaste = this._register(new N()), this.onPaste = this._onPaste.event, this._onType = this._register(new N()), this.onType = this._onType.event, this._onCompositionStart = this._register(new N()), this.onCompositionStart = this._onCompositionStart.event, this._onCompositionUpdate = this._register(new N()), this.onCompositionUpdate = this._onCompositionUpdate.event, this._onCompositionEnd = this._register(new N()), this.onCompositionEnd = this._onCompositionEnd.event, this._onSelectionChangeRequest = this._register(new N()), this.onSelectionChangeRequest = this._onSelectionChangeRequest.event, this._asyncFocusGainWriteScreenReaderContent = this._register(new Br()), this._asyncTriggerCut = this._register(new cl(() => this._onCut.fire(), 0)), this._textAreaState = zQ.EMPTY, this._selectionChangeListener = null, this._accessibilityService.isScreenReaderOptimized() && this.writeNativeTextAreaContent(`ctor`), this._register(M.runAndSubscribe(this._accessibilityService.onDidChangeScreenReaderOptimized, () => {
        this._accessibilityService.isScreenReaderOptimized() && !this._asyncFocusGainWriteScreenReaderContent.value ? this._asyncFocusGainWriteScreenReaderContent.value = this._register(new cl(() => this.writeNativeTextAreaContent(`asyncFocusGain`), 0)) : this._asyncFocusGainWriteScreenReaderContent.clear();
      })), this._hasFocus = false, this._currentComposition = null;
      let o10 = null;
      this._register(this._textArea.onKeyDown((e11) => {
        let t11 = new Hc(e11);
        (t11.keyCode === 114 || this._currentComposition && t11.keyCode === 1) && t11.stopPropagation(), t11.equals(9) && t11.preventDefault(), o10 = t11, this._onKeyDown.fire(t11);
      })), this._register(this._textArea.onKeyUp((e11) => {
        let t11 = new Hc(e11);
        this._onKeyUp.fire(t11);
      })), this._register(this._textArea.onCompositionStart((e11) => {
        RQ && console.log(`[compositionstart]`, e11);
        let t11 = new KQ();
        if (this._currentComposition) {
          this._currentComposition = t11;
          return;
        }
        if (this._currentComposition = t11, this._OS === 2 && o10 && o10.equals(114) && this._textAreaState.selectionStart === this._textAreaState.selectionEnd && this._textAreaState.selectionStart > 0 && this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e11.data && (o10.code === `ArrowRight` || o10.code === `ArrowLeft`)) {
          RQ && console.log(`[compositionstart] Handling long press case on macOS + arrow key`, e11), t11.handleCompositionUpdate(`x`), this._onCompositionStart.fire({
            data: e11.data
          });
          return;
        }
        if (this._browser.isAndroid) {
          this._onCompositionStart.fire({
            data: e11.data
          });
          return;
        }
        this._onCompositionStart.fire({
          data: e11.data
        });
      })), this._register(this._textArea.onCompositionUpdate((e11) => {
        RQ && console.log(`[compositionupdate]`, e11);
        let t11 = this._currentComposition;
        if (!t11) return;
        if (this._browser.isAndroid) {
          let t12 = zQ.readFromTextArea(this._textArea, this._textAreaState), n12 = zQ.deduceAndroidCompositionInput(this._textAreaState, t12);
          this._textAreaState = t12, this._onType.fire(n12), this._onCompositionUpdate.fire(e11);
          return;
        }
        let n11 = t11.handleCompositionUpdate(e11.data);
        this._textAreaState = zQ.readFromTextArea(this._textArea, this._textAreaState), this._onType.fire(n11), this._onCompositionUpdate.fire(e11);
      })), this._register(this._textArea.onCompositionEnd((e11) => {
        RQ && console.log(`[compositionend]`, e11);
        let t11 = this._currentComposition;
        if (!t11) return;
        if (this._currentComposition = null, this._browser.isAndroid) {
          let e12 = zQ.readFromTextArea(this._textArea, this._textAreaState), t12 = zQ.deduceAndroidCompositionInput(this._textAreaState, e12);
          this._textAreaState = e12, this._onType.fire(t12), this._onCompositionEnd.fire();
          return;
        }
        let n11 = t11.handleCompositionUpdate(e11.data);
        this._textAreaState = zQ.readFromTextArea(this._textArea, this._textAreaState), this._onType.fire(n11), this._onCompositionEnd.fire();
      })), this._register(this._textArea.onInput((e11) => {
        if (RQ && console.log(`[input]`, e11), this._textArea.setIgnoreSelectionChangeTime(`received input event`), this._currentComposition) return;
        let t11 = zQ.readFromTextArea(this._textArea, this._textAreaState), n11 = zQ.deduceInput(this._textAreaState, t11, this._OS === 2);
        n11.replacePrevCharCnt === 0 && n11.text.length === 1 && (Bs(n11.text.charCodeAt(0)) || n11.text.charCodeAt(0) === 127) || (this._textAreaState = t11, (n11.text !== `` || n11.replacePrevCharCnt !== 0 || n11.replaceNextCharCnt !== 0 || n11.positionDelta !== 0) && this._onType.fire(n11));
      })), this._register(this._textArea.onCut((e11) => {
        this._textArea.setIgnoreSelectionChangeTime(`received cut event`), this._ensureClipboardGetsEditorSelection(e11), this._asyncTriggerCut.schedule();
      })), this._register(this._textArea.onCopy((e11) => {
        this._ensureClipboardGetsEditorSelection(e11);
      })), this._register(this._textArea.onPaste((e11) => {
        if (this._textArea.setIgnoreSelectionChangeTime(`received paste event`), e11.preventDefault(), !e11.clipboardData) return;
        let [t11, n11] = JQ.getTextData(e11.clipboardData);
        t11 && (n11 || (n11 = GQ.INSTANCE.get(t11)), this._onPaste.fire({
          text: t11,
          metadata: n11
        }));
      })), this._register(this._textArea.onFocus(() => {
        let e11 = this._hasFocus;
        this._setHasFocus(true), this._accessibilityService.isScreenReaderOptimized() && this._browser.isSafari && !e11 && this._hasFocus && (this._asyncFocusGainWriteScreenReaderContent.value || (this._asyncFocusGainWriteScreenReaderContent.value = new cl(() => this.writeNativeTextAreaContent(`asyncFocusGain`), 0)), this._asyncFocusGainWriteScreenReaderContent.value.schedule());
      })), this._register(this._textArea.onBlur(() => {
        this._currentComposition && (this._currentComposition = null, this.writeNativeTextAreaContent(`blurWithoutCompositionEnd`), this._onCompositionEnd.fire()), this._setHasFocus(false);
      })), this._register(this._textArea.onSyntheticTap(() => {
        this._browser.isAndroid && this._currentComposition && (this._currentComposition = null, this.writeNativeTextAreaContent(`tapWithoutCompositionEnd`), this._onCompositionEnd.fire());
      }));
    }
    _installSelectionChangeListener() {
      let e10 = 0;
      return z(this._textArea.ownerDocument, `selectionchange`, (t10) => {
        if (IZ.onSelectionChange(), !this._hasFocus || this._currentComposition || !this._browser.isChrome) return;
        let n10 = Date.now(), r10 = n10 - e10;
        if (e10 = n10, r10 < 5) return;
        let i10 = n10 - this._textArea.getIgnoreSelectionChangeTime();
        if (this._textArea.resetSelectionChangeTime(), i10 < 100 || !this._textAreaState.selection) return;
        let a10 = this._textArea.getValue();
        if (this._textAreaState.value !== a10) return;
        let o10 = this._textArea.getSelectionStart(), s10 = this._textArea.getSelectionEnd();
        if (this._textAreaState.selectionStart === o10 && this._textAreaState.selectionEnd === s10) return;
        let c10 = this._textAreaState.deduceEditorPosition(o10), l10 = this._host.deduceModelPosition(c10[0], c10[1], c10[2]), u10 = this._textAreaState.deduceEditorPosition(s10), d10 = this._host.deduceModelPosition(u10[0], u10[1], u10[2]), f10 = new Ma(l10.lineNumber, l10.column, d10.lineNumber, d10.column);
        this._onSelectionChangeRequest.fire(f10);
      });
    }
    dispose() {
      super.dispose(), this._selectionChangeListener && (this._selectionChangeListener.dispose(), this._selectionChangeListener = null);
    }
    focusTextArea() {
      this._setHasFocus(true), this.refreshFocusState();
    }
    isFocused() {
      return this._hasFocus;
    }
    refreshFocusState() {
      this._setHasFocus(this._textArea.hasFocus());
    }
    _setHasFocus(e10) {
      this._hasFocus !== e10 && (this._hasFocus = e10, this._selectionChangeListener && (this._selectionChangeListener.dispose(), this._selectionChangeListener = null), this._hasFocus && (this._selectionChangeListener = this._installSelectionChangeListener()), this._hasFocus && this.writeNativeTextAreaContent(`focusgain`), this._hasFocus ? this._onFocus.fire() : this._onBlur.fire());
    }
    _setAndWriteTextAreaState(e10, t10) {
      this._hasFocus || (t10 = t10.collapseSelection()), t10.writeToTextArea(e10, this._textArea, this._hasFocus), this._textAreaState = t10;
    }
    writeNativeTextAreaContent(e10) {
      !this._accessibilityService.isScreenReaderOptimized() && e10 === `render` || this._currentComposition || (this._logService.trace(`writeTextAreaState(reason: ${e10})`), this._setAndWriteTextAreaState(e10, this._host.getScreenReaderContent()));
    }
    _ensureClipboardGetsEditorSelection(e10) {
      let t10 = this._host.getDataToCopy(), n10 = {
        version: 1,
        isFromEmptySelection: t10.isFromEmptySelection,
        multicursorText: t10.multicursorText,
        mode: t10.mode
      };
      GQ.INSTANCE.set(this._browser.isFirefox ? t10.text.replace(/\r\n/g, `
`) : t10.text, n10), e10.preventDefault(), e10.clipboardData && JQ.setTextData(e10.clipboardData, t10.text, t10.html, n10);
    }
  };
  qQ = VQ([
    HQ(4, zA),
    HQ(5, wm)
  ], qQ);
  JQ = {
    getTextData(e10) {
      let t10 = e10.getData(Sg.text), n10 = null, r10 = e10.getData(`vscode-editor-data`);
      if (typeof r10 == `string`) try {
        n10 = JSON.parse(r10), n10.version !== 1 && (n10 = null);
      } catch {
      }
      if (t10.length === 0 && n10 === null && e10.files.length > 0) {
        let t11 = Array.prototype.slice.call(e10.files, 0);
        return [
          t11.map((e11) => e11.name).join(`
`),
          null
        ];
      }
      return [
        t10,
        n10
      ];
    },
    setTextData(e10, t10, n10, r10) {
      e10.setData(Sg.text, t10), typeof n10 == `string` && e10.setData(`text/html`, n10), e10.setData(`vscode-editor-data`, JSON.stringify(r10));
    }
  };
  var YQ = class extends j {
    get ownerDocument() {
      return this._actual.ownerDocument;
    }
    constructor(e10) {
      super(), this._actual = e10, this.onKeyDown = this._register(new bD(this._actual, `keydown`)).event, this.onKeyUp = this._register(new bD(this._actual, `keyup`)).event, this.onCompositionStart = this._register(new bD(this._actual, `compositionstart`)).event, this.onCompositionUpdate = this._register(new bD(this._actual, `compositionupdate`)).event, this.onCompositionEnd = this._register(new bD(this._actual, `compositionend`)).event, this.onBeforeInput = this._register(new bD(this._actual, `beforeinput`)).event, this.onInput = this._register(new bD(this._actual, `input`)).event, this.onCut = this._register(new bD(this._actual, `cut`)).event, this.onCopy = this._register(new bD(this._actual, `copy`)).event, this.onPaste = this._register(new bD(this._actual, `paste`)).event, this.onFocus = this._register(new bD(this._actual, `focus`)).event, this.onBlur = this._register(new bD(this._actual, `blur`)).event, this._onSyntheticTap = this._register(new N()), this.onSyntheticTap = this._onSyntheticTap.event, this._ignoreSelectionChangeTime = 0, this._register(this.onKeyDown(() => IZ.onKeyDown())), this._register(this.onBeforeInput(() => IZ.onBeforeInput())), this._register(this.onInput(() => IZ.onInput())), this._register(this.onKeyUp(() => IZ.onKeyUp())), this._register(z(this._actual, UQ.Tap, () => this._onSyntheticTap.fire()));
    }
    hasFocus() {
      let e10 = Dd(this._actual);
      return e10 ? e10.activeElement === this._actual : this._actual.isConnected ? Od() === this._actual : false;
    }
    setIgnoreSelectionChangeTime(e10) {
      this._ignoreSelectionChangeTime = Date.now();
    }
    getIgnoreSelectionChangeTime() {
      return this._ignoreSelectionChangeTime;
    }
    resetSelectionChangeTime() {
      this._ignoreSelectionChangeTime = 0;
    }
    getValue() {
      return this._actual.value;
    }
    setValue(e10, t10) {
      let n10 = this._actual;
      n10.value !== t10 && (this.setIgnoreSelectionChangeTime(`setValue`), n10.value = t10);
    }
    getSelectionStart() {
      return this._actual.selectionDirection === `backward` ? this._actual.selectionEnd : this._actual.selectionStart;
    }
    getSelectionEnd() {
      return this._actual.selectionDirection === `backward` ? this._actual.selectionStart : this._actual.selectionEnd;
    }
    setSelectionRange(e10, t10, n10) {
      let r10 = this._actual, i10 = null, a10 = Dd(r10);
      i10 = a10 ? a10.activeElement : Od();
      let o10 = R(i10), s10 = i10 === r10, c10 = r10.selectionStart, l10 = r10.selectionEnd;
      if (s10 && c10 === t10 && l10 === n10) {
        Sc && o10.parent !== o10 && r10.focus();
        return;
      }
      if (s10) {
        this.setIgnoreSelectionChangeTime(`setSelectionRange`), r10.setSelectionRange(t10, n10), Sc && o10.parent !== o10 && r10.focus();
        return;
      }
      try {
        let e11 = Qd(r10);
        this.setIgnoreSelectionChangeTime(`setSelectionRange`), r10.focus(), r10.setSelectionRange(t10, n10), $d(r10, e11);
      } catch {
      }
    }
  }, XQ = class extends NQ {
    constructor(e10, t10, n10) {
      super(e10, t10, n10), this._register(LE.addTarget(this.viewHelper.linesContentDomNode)), this._register(z(this.viewHelper.linesContentDomNode, IE.Tap, (e11) => this.onTap(e11))), this._register(z(this.viewHelper.linesContentDomNode, IE.Change, (e11) => this.onChange(e11))), this._register(z(this.viewHelper.linesContentDomNode, IE.Contextmenu, (e11) => this._onContextMenu(new UZ(e11, false, this.viewHelper.viewDomNode), false))), this._lastPointerType = `mouse`, this._register(z(this.viewHelper.linesContentDomNode, `pointerdown`, (e11) => {
        let t11 = e11.pointerType;
        if (t11 === `mouse`) {
          this._lastPointerType = `mouse`;
          return;
        } else t11 === `touch` ? this._lastPointerType = `touch` : this._lastPointerType = `pen`;
      }));
      let r10 = new GZ(this.viewHelper.viewDomNode);
      this._register(r10.onPointerMove(this.viewHelper.viewDomNode, (e11) => this._onMouseMove(e11))), this._register(r10.onPointerUp(this.viewHelper.viewDomNode, (e11) => this._onMouseUp(e11))), this._register(r10.onPointerLeave(this.viewHelper.viewDomNode, (e11) => this._onMouseLeave(e11))), this._register(r10.onPointerDown(this.viewHelper.viewDomNode, (e11, t11) => this._onMouseDown(e11, t11)));
    }
    onTap(e10) {
      !e10.initialTarget || !this.viewHelper.linesContentDomNode.contains(e10.initialTarget) || (e10.preventDefault(), this.viewHelper.focusTextArea(), this._dispatchGesture(e10, false));
    }
    onChange(e10) {
      this._lastPointerType === `touch` && this._context.viewModel.viewLayout.deltaScrollNow(-e10.translationX, -e10.translationY), this._lastPointerType === `pen` && this._dispatchGesture(e10, true);
    }
    _dispatchGesture(e10, t10) {
      let n10 = this._createMouseTarget(new UZ(e10, false, this.viewHelper.viewDomNode), false);
      n10.position && this.viewController.dispatchMouse({
        position: n10.position,
        mouseColumn: n10.position.column,
        startedOnLineNumbers: false,
        revealType: 1,
        mouseDownCount: e10.tapCount,
        inSelectionMode: t10,
        altKey: false,
        ctrlKey: false,
        metaKey: false,
        shiftKey: false,
        leftButton: false,
        middleButton: false,
        onInjectedText: n10.type === 6 && n10.detail.injectedText !== null
      });
    }
    _onMouseDown(e10, t10) {
      e10.browserEvent.pointerType !== `touch` && super._onMouseDown(e10, t10);
    }
  }, ZQ = class extends NQ {
    constructor(e10, t10, n10) {
      super(e10, t10, n10), this._register(LE.addTarget(this.viewHelper.linesContentDomNode)), this._register(z(this.viewHelper.linesContentDomNode, IE.Tap, (e11) => this.onTap(e11))), this._register(z(this.viewHelper.linesContentDomNode, IE.Change, (e11) => this.onChange(e11))), this._register(z(this.viewHelper.linesContentDomNode, IE.Contextmenu, (e11) => this._onContextMenu(new UZ(e11, false, this.viewHelper.viewDomNode), false)));
    }
    onTap(e10) {
      e10.preventDefault(), this.viewHelper.focusTextArea();
      let t10 = this._createMouseTarget(new UZ(e10, false, this.viewHelper.viewDomNode), false);
      if (t10.position) {
        let e11 = document.createEvent(`CustomEvent`);
        e11.initEvent(UQ.Tap, false, true), this.viewHelper.dispatchTextAreaEvent(e11), this.viewController.moveTo(t10.position, 1);
      }
    }
    onChange(e10) {
      this._context.viewModel.viewLayout.deltaScrollNow(-e10.translationX, -e10.translationY);
    }
  }, QQ = class extends j {
    constructor(e10, t10, n10) {
      super();
      let r10 = bt || Pt && xt;
      r10 && Ac.pointerEvents ? this.handler = this._register(new XQ(e10, t10, n10)) : os.TouchEvent ? this.handler = this._register(new ZQ(e10, t10, n10)) : this.handler = this._register(new NQ(e10, t10, n10));
    }
    getTargetAtClientPoint(e10, t10) {
      return this.handler.getTargetAtClientPoint(e10, t10);
    }
  }, $Q = class extends XZ {
  }, e$ = (_Va = class extends $Q {
    constructor(e10) {
      super(), this._context = e10, this._readConfig(), this._lastCursorModelPosition = new P(1, 1), this._renderResult = null, this._activeLineNumber = 1, this._context.addEventHandler(this);
    }
    _readConfig() {
      let e10 = this._context.configuration.options;
      this._lineHeight = e10.get(67);
      let t10 = e10.get(68);
      this._renderLineNumbers = t10.renderType, this._renderCustomLineNumbers = t10.renderFn, this._renderFinalNewline = e10.get(96);
      let n10 = e10.get(146);
      this._lineNumbersLeft = n10.lineNumbersLeft, this._lineNumbersWidth = n10.lineNumbersWidth;
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      return this._readConfig(), true;
    }
    onCursorStateChanged(e10) {
      let t10 = e10.selections[0].getPosition();
      this._lastCursorModelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(t10);
      let n10 = false;
      return this._activeLineNumber !== t10.lineNumber && (this._activeLineNumber = t10.lineNumber, n10 = true), (this._renderLineNumbers === 2 || this._renderLineNumbers === 3) && (n10 = true), n10;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    onDecorationsChanged(e10) {
      return e10.affectsLineNumber;
    }
    _getLineRenderLineNumber(e10) {
      let t10 = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new P(e10, 1));
      if (t10.column !== 1) return ``;
      let n10 = t10.lineNumber;
      if (this._renderCustomLineNumbers) return this._renderCustomLineNumbers(n10);
      if (this._renderLineNumbers === 2) {
        let e11 = Math.abs(this._lastCursorModelPosition.lineNumber - n10);
        return e11 === 0 ? `<span class="relative-current-line-number">` + n10 + `</span>` : String(e11);
      }
      if (this._renderLineNumbers === 3) {
        if (this._lastCursorModelPosition.lineNumber === n10 || n10 % 10 == 0) return String(n10);
        let e11 = this._context.viewModel.getLineCount();
        return n10 === e11 ? String(n10) : ``;
      }
      return String(n10);
    }
    prepareRender(t10) {
      if (this._renderLineNumbers === 0) {
        this._renderResult = null;
        return;
      }
      let n10 = ht ? this._lineHeight % 2 == 0 ? ` lh-even` : ` lh-odd` : ``, r10 = t10.visibleRange.startLineNumber, i10 = t10.visibleRange.endLineNumber, a10 = this._context.viewModel.getDecorationsInViewport(t10.visibleRange).filter((e10) => !!e10.options.lineNumberClassName);
      a10.sort((e10, t11) => F.compareRangesUsingEnds(e10.range, t11.range));
      let o10 = 0, s10 = this._context.viewModel.getLineCount(), c10 = [];
      for (let t11 = r10; t11 <= i10; t11++) {
        let i11 = t11 - r10, l10 = this._getLineRenderLineNumber(t11), u10 = ``;
        for (; o10 < a10.length && a10[o10].range.endLineNumber < t11; ) o10++;
        for (let e10 = o10; e10 < a10.length; e10++) {
          let { range: n11, options: r11 } = a10[e10];
          n11.startLineNumber <= t11 && (u10 += ` ` + r11.lineNumberClassName);
        }
        if (!l10 && !u10) {
          c10[i11] = ``;
          continue;
        }
        t11 === s10 && this._context.viewModel.getLineLength(t11) === 0 && (this._renderFinalNewline === `off` && (l10 = ``), this._renderFinalNewline === `dimmed` && (u10 += ` dimmed-line-number`)), t11 === this._activeLineNumber && (u10 += ` active-line-number`), c10[i11] = `<div class="${_Va.CLASS_NAME}${n10}${u10}" style="left:${this._lineNumbersLeft}px;width:${this._lineNumbersWidth}px;">${l10}</div>`;
      }
      this._renderResult = c10;
    }
    render(e10, t10) {
      if (!this._renderResult) return ``;
      let n10 = t10 - e10;
      return n10 < 0 || n10 >= this._renderResult.length ? `` : this._renderResult[n10];
    }
  }, _Va.CLASS_NAME = `line-numbers`, _Va);
  qb((e10, t10) => {
    let n10 = e10.getColor(pL), r10 = e10.getColor(AL);
    r10 ? t10.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${r10}; }`) : n10 && t10.addRule(`.monaco-editor .line-numbers.dimmed-line-number { color: ${n10.transparent(0.4)}; }`);
  });
  var t$ = (_Wa = class extends ZZ {
    constructor(t10) {
      super(t10);
      let n10 = this._context.configuration.options, r10 = n10.get(146);
      this._canUseLayerHinting = !n10.get(32), this._contentLeft = r10.contentLeft, this._glyphMarginLeft = r10.glyphMarginLeft, this._glyphMarginWidth = r10.glyphMarginWidth, this._domNode = Nf(document.createElement(`div`)), this._domNode.setClassName(_Wa.OUTER_CLASS_NAME), this._domNode.setPosition(`absolute`), this._domNode.setAttribute(`role`, `presentation`), this._domNode.setAttribute(`aria-hidden`, `true`), this._glyphMarginBackgroundDomNode = Nf(document.createElement(`div`)), this._glyphMarginBackgroundDomNode.setClassName(_Wa.CLASS_NAME), this._domNode.appendChild(this._glyphMarginBackgroundDomNode);
    }
    dispose() {
      super.dispose();
    }
    getDomNode() {
      return this._domNode;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._canUseLayerHinting = !t10.get(32), this._contentLeft = n10.contentLeft, this._glyphMarginLeft = n10.glyphMarginLeft, this._glyphMarginWidth = n10.glyphMarginWidth, true;
    }
    onScrollChanged(e10) {
      return super.onScrollChanged(e10) || e10.scrollTopChanged;
    }
    prepareRender(e10) {
    }
    render(e10) {
      this._domNode.setLayerHinting(this._canUseLayerHinting), this._domNode.setContain(`strict`);
      let t10 = e10.scrollTop - e10.bigNumbersDelta;
      this._domNode.setTop(-t10);
      let n10 = Math.min(e10.scrollHeight, 1e6);
      this._domNode.setHeight(n10), this._domNode.setWidth(this._contentLeft), this._glyphMarginBackgroundDomNode.setLeft(this._glyphMarginLeft), this._glyphMarginBackgroundDomNode.setWidth(this._glyphMarginWidth), this._glyphMarginBackgroundDomNode.setHeight(n10);
    }
  }, _Wa.CLASS_NAME = `glyph-margin`, _Wa.OUTER_CLASS_NAME = `margin`, _Wa);
  const n$ = `monaco-mouse-cursor-text`;
  var r$ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, i$ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, a$ = class {
    constructor(e10, t10, n10, r10, i10) {
      this._context = e10, this.modelLineNumber = t10, this.distanceToModelLineStart = n10, this.widthOfHiddenLineTextBefore = r10, this.distanceToModelLineEnd = i10, this._visibleTextAreaBrand = void 0, this.startPosition = null, this.endPosition = null, this.visibleTextareaStart = null, this.visibleTextareaEnd = null, this._previousPresentation = null;
    }
    prepareRender(e10) {
      let t10 = new P(this.modelLineNumber, this.distanceToModelLineStart + 1), n10 = new P(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);
      this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(t10), this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(n10), this.startPosition.lineNumber === this.endPosition.lineNumber ? (this.visibleTextareaStart = e10.visibleRangeForPosition(this.startPosition), this.visibleTextareaEnd = e10.visibleRangeForPosition(this.endPosition)) : (this.visibleTextareaStart = null, this.visibleTextareaEnd = null);
    }
    definePresentation(e10) {
      return this._previousPresentation || (e10 ? this._previousPresentation = e10 : this._previousPresentation = {
        foreground: 1,
        italic: false,
        bold: false,
        underline: false,
        strikethrough: false
      }), this._previousPresentation;
    }
  };
  const o$ = Sc;
  let s$ = class extends ZZ {
    constructor(e10, t10, n10, r10, i10) {
      super(e10), this._keybindingService = r10, this._instantiationService = i10, this._primaryCursorPosition = new P(1, 1), this._primaryCursorVisibleRange = null, this._viewController = t10, this._visibleRangeProvider = n10, this._scrollLeft = 0, this._scrollTop = 0;
      let a10 = this._context.configuration.options, o10 = a10.get(146);
      this._setAccessibilityOptions(a10), this._contentLeft = o10.contentLeft, this._contentWidth = o10.contentWidth, this._contentHeight = o10.height, this._fontInfo = a10.get(50), this._lineHeight = a10.get(67), this._emptySelectionClipboard = a10.get(37), this._copyWithSyntaxHighlighting = a10.get(25), this._visibleTextArea = null, this._selections = [
        new Ma(1, 1, 1, 1)
      ], this._modelSelections = [
        new Ma(1, 1, 1, 1)
      ], this._lastRenderPosition = null, this.textArea = Nf(document.createElement(`textarea`)), QZ.write(this.textArea, 7), this.textArea.setClassName(`inputarea ${n$}`), this.textArea.setAttribute(`wrap`, this._textAreaWrapping && !this._visibleTextArea ? `on` : `off`);
      let { tabSize: s10 } = this._context.viewModel.model.getOptions();
      this.textArea.domNode.style.tabSize = `${s10 * this._fontInfo.spaceWidth}px`, this.textArea.setAttribute(`autocorrect`, `off`), this.textArea.setAttribute(`autocapitalize`, `off`), this.textArea.setAttribute(`autocomplete`, `off`), this.textArea.setAttribute(`spellcheck`, `false`), this.textArea.setAttribute(`aria-label`, this._getAriaLabel(a10)), this.textArea.setAttribute(`aria-required`, a10.get(5) ? `true` : `false`), this.textArea.setAttribute(`tabindex`, String(a10.get(125))), this.textArea.setAttribute(`role`, `textbox`), this.textArea.setAttribute(`aria-roledescription`, T(`editor`, `editor`)), this.textArea.setAttribute(`aria-multiline`, `true`), this.textArea.setAttribute(`aria-autocomplete`, a10.get(92) ? `none` : `both`), this._ensureReadOnlyAttribute(), this.textAreaCover = Nf(document.createElement(`div`)), this.textAreaCover.setPosition(`absolute`);
      let c10 = {
        getLineCount: () => this._context.viewModel.getLineCount(),
        getLineMaxColumn: (e11) => this._context.viewModel.getLineMaxColumn(e11),
        getValueInRange: (e11, t11) => this._context.viewModel.getValueInRange(e11, t11),
        getValueLengthInRange: (e11, t11) => this._context.viewModel.getValueLengthInRange(e11, t11),
        modifyPosition: (e11, t11) => this._context.viewModel.modifyPosition(e11, t11)
      }, l10 = {
        getDataToCopy: () => {
          let e11 = this._context.viewModel.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, mt), t11 = this._context.viewModel.model.getEOL(), n11 = this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty(), r11 = Array.isArray(e11) ? e11 : null, i11 = Array.isArray(e11) ? e11.join(t11) : e11, a11, o11 = null;
          if (WQ.forceCopyWithSyntaxHighlighting || this._copyWithSyntaxHighlighting && i11.length < 65536) {
            let e12 = this._context.viewModel.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);
            e12 && (a11 = e12.html, o11 = e12.mode);
          }
          return {
            isFromEmptySelection: n11,
            multicursorText: r11,
            text: i11,
            html: a11,
            mode: o11
          };
        },
        getScreenReaderContent: () => {
          if (this._accessibilitySupport === 1) {
            let e11 = this._selections[0];
            if (E && e11.isEmpty()) {
              let t12 = e11.getStartPosition(), n11 = this._getWordBeforePosition(t12);
              if (n11.length === 0 && (n11 = this._getCharacterBeforePosition(t12)), n11.length > 0) return new zQ(n11, n11.length, n11.length, F.fromPositions(t12), 0);
            }
            let t11 = 500;
            if (E && !e11.isEmpty() && c10.getValueLengthInRange(e11, 0) < t11) {
              let t12 = c10.getValueInRange(e11, 0);
              return new zQ(t12, 0, t12.length, e11, 0);
            }
            if (Tc && !e11.isEmpty()) {
              let e12 = `vscode-placeholder`;
              return new zQ(e12, 0, e12.length, null, void 0);
            }
            return zQ.EMPTY;
          }
          if (Dc) {
            let e11 = this._selections[0];
            if (e11.isEmpty()) {
              let t11 = e11.getStartPosition(), [n11, r11] = this._getAndroidWordAtPosition(t11);
              if (n11.length > 0) return new zQ(n11, r11, r11, F.fromPositions(t11), 0);
            }
            return zQ.EMPTY;
          }
          return BQ.fromEditorSelection(c10, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0);
        },
        deduceModelPosition: (e11, t11, n11) => this._context.viewModel.deduceModelPositionRelativeToViewPosition(e11, t11, n11)
      }, u10 = this._register(new YQ(this.textArea.domNode));
      this._textAreaInput = this._register(this._instantiationService.createInstance(qQ, l10, u10, Et, {
        isAndroid: Dc,
        isChrome: wc,
        isFirefox: Sc,
        isSafari: Tc
      })), this._register(this._textAreaInput.onKeyDown((e11) => {
        this._viewController.emitKeyDown(e11);
      })), this._register(this._textAreaInput.onKeyUp((e11) => {
        this._viewController.emitKeyUp(e11);
      })), this._register(this._textAreaInput.onPaste((e11) => {
        let t11 = false, n11 = null, r11 = null;
        e11.metadata && (t11 = this._emptySelectionClipboard && !!e11.metadata.isFromEmptySelection, n11 = e11.metadata.multicursorText === void 0 ? null : e11.metadata.multicursorText, r11 = e11.metadata.mode), this._viewController.paste(e11.text, t11, n11, r11);
      })), this._register(this._textAreaInput.onCut(() => {
        this._viewController.cut();
      })), this._register(this._textAreaInput.onType((e11) => {
        e11.replacePrevCharCnt || e11.replaceNextCharCnt || e11.positionDelta ? (RQ && console.log(` => compositionType: <<${e11.text}>>, ${e11.replacePrevCharCnt}, ${e11.replaceNextCharCnt}, ${e11.positionDelta}`), this._viewController.compositionType(e11.text, e11.replacePrevCharCnt, e11.replaceNextCharCnt, e11.positionDelta)) : (RQ && console.log(` => type: <<${e11.text}>>`), this._viewController.type(e11.text));
      })), this._register(this._textAreaInput.onSelectionChangeRequest((e11) => {
        this._viewController.setSelection(e11);
      })), this._register(this._textAreaInput.onCompositionStart((e11) => {
        let t11 = this.textArea.domNode, n11 = this._modelSelections[0], { distanceToModelLineStart: r11, widthOfHiddenTextBefore: i11 } = (() => {
          let e12 = t11.value.substring(0, Math.min(t11.selectionStart, t11.selectionEnd)), r12 = e12.lastIndexOf(`
`), i12 = e12.substring(r12 + 1), a12 = i12.lastIndexOf(`	`), o11 = i12.length - a12 - 1, s11 = n11.getStartPosition(), c11 = Math.min(s11.column - 1, o11), l11 = s11.column - 1 - c11, u11 = i12.substring(0, i12.length - c11), { tabSize: d10 } = this._context.viewModel.model.getOptions(), f10 = c$(this.textArea.domNode.ownerDocument, u11, this._fontInfo, d10);
          return {
            distanceToModelLineStart: l11,
            widthOfHiddenTextBefore: f10
          };
        })(), { distanceToModelLineEnd: a11 } = (() => {
          let e12 = t11.value.substring(Math.max(t11.selectionStart, t11.selectionEnd)), r12 = e12.indexOf(`
`), i12 = r12 === -1 ? e12 : e12.substring(0, r12), a12 = i12.indexOf(`	`), o11 = a12 === -1 ? i12.length : i12.length - a12 - 1, s11 = n11.getEndPosition(), c11 = Math.min(this._context.viewModel.model.getLineMaxColumn(s11.lineNumber) - s11.column, o11), l11 = this._context.viewModel.model.getLineMaxColumn(s11.lineNumber) - s11.column - c11;
          return {
            distanceToModelLineEnd: l11
          };
        })();
        this._context.viewModel.revealRange(`keyboard`, true, F.fromPositions(this._selections[0].getStartPosition()), 0, 1), this._visibleTextArea = new a$(this._context, n11.startLineNumber, r11, i11, a11), this.textArea.setAttribute(`wrap`, this._textAreaWrapping && !this._visibleTextArea ? `on` : `off`), this._visibleTextArea.prepareRender(this._visibleRangeProvider), this._render(), this.textArea.setClassName(`inputarea ${n$} ime-input`), this._viewController.compositionStart(), this._context.viewModel.onCompositionStart();
      })), this._register(this._textAreaInput.onCompositionUpdate((e11) => {
        this._visibleTextArea && (this._visibleTextArea.prepareRender(this._visibleRangeProvider), this._render());
      })), this._register(this._textAreaInput.onCompositionEnd(() => {
        this._visibleTextArea = null, this.textArea.setAttribute(`wrap`, this._textAreaWrapping && !this._visibleTextArea ? `on` : `off`), this._render(), this.textArea.setClassName(`inputarea ${n$}`), this._viewController.compositionEnd(), this._context.viewModel.onCompositionEnd();
      })), this._register(this._textAreaInput.onFocus(() => {
        this._context.viewModel.setHasFocus(true);
      })), this._register(this._textAreaInput.onBlur(() => {
        this._context.viewModel.setHasFocus(false);
      })), this._register(Vj.onDidChange(() => {
        this._ensureReadOnlyAttribute();
      }));
    }
    writeScreenReaderContent(e10) {
      this._textAreaInput.writeNativeTextAreaContent(e10);
    }
    dispose() {
      super.dispose();
    }
    _getAndroidWordAtPosition(e10) {
      let t10 = '`~!@#$%^&*()-=+[{]}\\|;:",.<>/?', n10 = this._context.viewModel.getLineContent(e10.lineNumber), r10 = X_(t10, []), i10 = true, a10 = e10.column, o10 = true, s10 = e10.column, c10 = 0;
      for (; c10 < 50 && (i10 || o10); ) {
        if (i10 && a10 <= 1 && (i10 = false), i10) {
          let e11 = n10.charCodeAt(a10 - 2), t11 = r10.get(e11);
          t11 === 0 ? a10-- : i10 = false;
        }
        if (o10 && s10 > n10.length && (o10 = false), o10) {
          let e11 = n10.charCodeAt(s10 - 1), t11 = r10.get(e11);
          t11 === 0 ? s10++ : o10 = false;
        }
        c10++;
      }
      return [
        n10.substring(a10 - 1, s10 - 1),
        e10.column - a10
      ];
    }
    _getWordBeforePosition(e10) {
      let t10 = this._context.viewModel.getLineContent(e10.lineNumber), n10 = X_(this._context.configuration.options.get(132), []), r10 = e10.column, i10 = 0;
      for (; r10 > 1; ) {
        let a10 = t10.charCodeAt(r10 - 2), o10 = n10.get(a10);
        if (o10 !== 0 || i10 > 50) return t10.substring(r10 - 1, e10.column - 1);
        i10++, r10--;
      }
      return t10.substring(0, e10.column - 1);
    }
    _getCharacterBeforePosition(e10) {
      if (e10.column > 1) {
        let t10 = this._context.viewModel.getLineContent(e10.lineNumber), n10 = t10.charAt(e10.column - 2);
        if (!Bs(n10.charCodeAt(0))) return n10;
      }
      return ``;
    }
    _getAriaLabel(e10) {
      var _a3, _b3, _c3;
      let t10 = e10.get(2);
      if (t10 === 1) {
        let e11 = (_a3 = this._keybindingService.lookupKeybinding(`editor.action.toggleScreenReaderAccessibilityMode`)) == null ? void 0 : _a3.getAriaLabel(), t11 = (_b3 = this._keybindingService.lookupKeybinding(`workbench.action.showCommands`)) == null ? void 0 : _b3.getAriaLabel(), n10 = (_c3 = this._keybindingService.lookupKeybinding(`workbench.action.openGlobalKeybindings`)) == null ? void 0 : _c3.getAriaLabel(), r10 = T(`accessibilityModeOff`, `The editor is not accessible at this time.`);
        return e11 ? T(`accessibilityOffAriaLabel`, `{0} To enable screen reader optimized mode, use {1}`, r10, e11) : t11 ? T(`accessibilityOffAriaLabelNoKb`, `{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.`, r10, t11) : n10 ? T(`accessibilityOffAriaLabelNoKbs`, `{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.`, r10, n10) : r10;
      }
      return e10.get(4);
    }
    _setAccessibilityOptions(e10) {
      this._accessibilitySupport = e10.get(2);
      let t10 = e10.get(3);
      this._accessibilitySupport === 2 && t10 === pr.accessibilityPageSize.defaultValue ? this._accessibilityPageSize = 500 : this._accessibilityPageSize = t10;
      let n10 = e10.get(146), r10 = n10.wrappingColumn;
      if (r10 !== -1 && this._accessibilitySupport !== 1) {
        let t11 = e10.get(50);
        this._textAreaWrapping = true, this._textAreaWidth = Math.round(r10 * t11.typicalHalfwidthCharacterWidth);
      } else this._textAreaWrapping = false, this._textAreaWidth = o$ ? 0 : 1;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._setAccessibilityOptions(t10), this._contentLeft = n10.contentLeft, this._contentWidth = n10.contentWidth, this._contentHeight = n10.height, this._fontInfo = t10.get(50), this._lineHeight = t10.get(67), this._emptySelectionClipboard = t10.get(37), this._copyWithSyntaxHighlighting = t10.get(25), this.textArea.setAttribute(`wrap`, this._textAreaWrapping && !this._visibleTextArea ? `on` : `off`);
      let { tabSize: r10 } = this._context.viewModel.model.getOptions();
      return this.textArea.domNode.style.tabSize = `${r10 * this._fontInfo.spaceWidth}px`, this.textArea.setAttribute(`aria-label`, this._getAriaLabel(t10)), this.textArea.setAttribute(`aria-required`, t10.get(5) ? `true` : `false`), this.textArea.setAttribute(`tabindex`, String(t10.get(125))), (e10.hasChanged(34) || e10.hasChanged(92)) && this._ensureReadOnlyAttribute(), e10.hasChanged(2) && this._textAreaInput.writeNativeTextAreaContent(`strategy changed`), true;
    }
    onCursorStateChanged(e10) {
      return this._selections = e10.selections.slice(0), this._modelSelections = e10.modelSelections.slice(0), this._textAreaInput.writeNativeTextAreaContent(`selection changed`), true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return this._scrollLeft = e10.scrollLeft, this._scrollTop = e10.scrollTop, true;
    }
    onZonesChanged(e10) {
      return true;
    }
    isFocused() {
      return this._textAreaInput.isFocused();
    }
    focusTextArea() {
      this._textAreaInput.focusTextArea();
    }
    getLastRenderData() {
      return this._lastRenderPosition;
    }
    setAriaOptions(e10) {
      e10.activeDescendant ? (this.textArea.setAttribute(`aria-haspopup`, `true`), this.textArea.setAttribute(`aria-autocomplete`, `list`), this.textArea.setAttribute(`aria-activedescendant`, e10.activeDescendant)) : (this.textArea.setAttribute(`aria-haspopup`, `false`), this.textArea.setAttribute(`aria-autocomplete`, `both`), this.textArea.removeAttribute(`aria-activedescendant`)), e10.role && this.textArea.setAttribute(`role`, e10.role);
    }
    _ensureReadOnlyAttribute() {
      let e10 = this._context.configuration.options, t10 = !Vj.enabled || e10.get(34) && e10.get(92);
      t10 ? this.textArea.setAttribute(`readonly`, `true`) : this.textArea.removeAttribute(`readonly`);
    }
    prepareRender(e10) {
      var _a3;
      this._primaryCursorPosition = new P(this._selections[0].positionLineNumber, this._selections[0].positionColumn), this._primaryCursorVisibleRange = e10.visibleRangeForPosition(this._primaryCursorPosition), (_a3 = this._visibleTextArea) == null ? void 0 : _a3.prepareRender(e10);
    }
    render(e10) {
      this._textAreaInput.writeNativeTextAreaContent(`render`), this._render();
    }
    _render() {
      if (this._visibleTextArea) {
        let e11 = this._visibleTextArea.visibleTextareaStart, t11 = this._visibleTextArea.visibleTextareaEnd, n10 = this._visibleTextArea.startPosition, r10 = this._visibleTextArea.endPosition;
        if (n10 && r10 && e11 && t11 && t11.left >= this._scrollLeft && e11.left <= this._scrollLeft + this._contentWidth) {
          let i10 = this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop, a10 = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart)), o10 = this._visibleTextArea.widthOfHiddenLineTextBefore, s10 = this._contentLeft + e11.left - this._scrollLeft, c10 = t11.left - e11.left + 1;
          if (s10 < this._contentLeft) {
            let e12 = this._contentLeft - s10;
            s10 += e12, o10 += e12, c10 -= e12;
          }
          c10 > this._contentWidth && (c10 = this._contentWidth);
          let l10 = this._context.viewModel.getViewLineData(n10.lineNumber), u10 = l10.tokens.findTokenIndexAtOffset(n10.column - 1), d10 = l10.tokens.findTokenIndexAtOffset(r10.column - 1), f10 = u10 === d10, p10 = this._visibleTextArea.definePresentation(f10 ? l10.tokens.getPresentation(u10) : null);
          this.textArea.domNode.scrollTop = a10 * this._lineHeight, this.textArea.domNode.scrollLeft = o10, this._doRender({
            lastRenderPosition: null,
            top: i10,
            left: s10,
            width: c10,
            height: this._lineHeight,
            useCover: false,
            color: (ao.getColorMap() || [])[p10.foreground],
            italic: p10.italic,
            bold: p10.bold,
            underline: p10.underline,
            strikethrough: p10.strikethrough
          });
        }
        return;
      }
      if (!this._primaryCursorVisibleRange) {
        this._renderAtTopLeft();
        return;
      }
      let e10 = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;
      if (e10 < this._contentLeft || e10 > this._contentLeft + this._contentWidth) {
        this._renderAtTopLeft();
        return;
      }
      let t10 = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;
      if (t10 < 0 || t10 > this._contentHeight) {
        this._renderAtTopLeft();
        return;
      }
      if (E || this._accessibilitySupport === 2) {
        this._doRender({
          lastRenderPosition: this._primaryCursorPosition,
          top: t10,
          left: this._textAreaWrapping ? this._contentLeft : e10,
          width: this._textAreaWidth,
          height: this._lineHeight,
          useCover: false
        }), this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;
        let n10 = this._textAreaInput.textAreaState.newlineCountBeforeSelection ?? this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));
        this.textArea.domNode.scrollTop = n10 * this._lineHeight;
        return;
      }
      this._doRender({
        lastRenderPosition: this._primaryCursorPosition,
        top: t10,
        left: this._textAreaWrapping ? this._contentLeft : e10,
        width: this._textAreaWidth,
        height: o$ ? 0 : 1,
        useCover: false
      });
    }
    _newlinecount(e10) {
      let t10 = 0, n10 = -1;
      do {
        if (n10 = e10.indexOf(`
`, n10 + 1), n10 === -1) break;
        t10++;
      } while (true);
      return t10;
    }
    _renderAtTopLeft() {
      this._doRender({
        lastRenderPosition: null,
        top: 0,
        left: 0,
        width: this._textAreaWidth,
        height: o$ ? 0 : 1,
        useCover: true
      });
    }
    _doRender(e10) {
      this._lastRenderPosition = e10.lastRenderPosition;
      let t10 = this.textArea, n10 = this.textAreaCover;
      Pf(t10, this._fontInfo), t10.setTop(e10.top), t10.setLeft(e10.left), t10.setWidth(e10.width), t10.setHeight(e10.height), t10.setColor(e10.color ? K.Format.CSS.formatHex(e10.color) : ``), t10.setFontStyle(e10.italic ? `italic` : ``), e10.bold && t10.setFontWeight(`bold`), t10.setTextDecoration(`${e10.underline ? ` underline` : ``}${e10.strikethrough ? ` line-through` : ``}`), n10.setTop(e10.useCover ? e10.top : 0), n10.setLeft(e10.useCover ? e10.left : 0), n10.setWidth(e10.useCover ? e10.width : 0), n10.setHeight(e10.useCover ? e10.height : 0);
      let r10 = this._context.configuration.options;
      r10.get(57) ? n10.setClassName(`monaco-editor-background textAreaCover ` + t$.OUTER_CLASS_NAME) : r10.get(68).renderType === 0 ? n10.setClassName(`monaco-editor-background textAreaCover`) : n10.setClassName(`monaco-editor-background textAreaCover ` + e$.CLASS_NAME);
    }
  };
  s$ = r$([
    i$(3, ME),
    i$(4, Jf)
  ], s$);
  function c$(e10, t10, n10, r10) {
    if (t10.length === 0) return 0;
    let i10 = e10.createElement(`div`);
    i10.style.position = `absolute`, i10.style.top = `-50000px`, i10.style.width = `50000px`;
    let a10 = e10.createElement(`span`);
    Pf(a10, n10), a10.style.whiteSpace = `pre`, a10.style.tabSize = `${r10 * n10.spaceWidth}px`, a10.append(t10), i10.appendChild(a10), e10.body.appendChild(i10);
    let o10 = a10.offsetWidth;
    return i10.remove(), o10;
  }
  const l$ = () => true, u$ = () => false, d$ = (e10) => e10 === ` ` || e10 === `	`;
  let f$, m$, h$, g$, _$;
  f$ = class {
    static shouldRecreate(e10) {
      return e10.hasChanged(146) || e10.hasChanged(132) || e10.hasChanged(37) || e10.hasChanged(77) || e10.hasChanged(79) || e10.hasChanged(80) || e10.hasChanged(6) || e10.hasChanged(7) || e10.hasChanged(11) || e10.hasChanged(9) || e10.hasChanged(10) || e10.hasChanged(14) || e10.hasChanged(129) || e10.hasChanged(50) || e10.hasChanged(92) || e10.hasChanged(131);
    }
    constructor(e10, t10, n10, r10) {
      this.languageConfigurationService = r10, this._cursorMoveConfigurationBrand = void 0, this._languageId = e10;
      let i10 = n10.options, a10 = i10.get(146), o10 = i10.get(50);
      this.readOnly = i10.get(92), this.tabSize = t10.tabSize, this.indentSize = t10.indentSize, this.insertSpaces = t10.insertSpaces, this.stickyTabStops = i10.get(117), this.lineHeight = o10.lineHeight, this.typicalHalfwidthCharacterWidth = o10.typicalHalfwidthCharacterWidth, this.pageSize = Math.max(1, Math.floor(a10.height / this.lineHeight) - 2), this.useTabStops = i10.get(129), this.wordSeparators = i10.get(132), this.emptySelectionClipboard = i10.get(37), this.copyWithSyntaxHighlighting = i10.get(25), this.multiCursorMergeOverlapping = i10.get(77), this.multiCursorPaste = i10.get(79), this.multiCursorLimit = i10.get(80), this.autoClosingBrackets = i10.get(6), this.autoClosingComments = i10.get(7), this.autoClosingQuotes = i10.get(11), this.autoClosingDelete = i10.get(9), this.autoClosingOvertype = i10.get(10), this.autoSurround = i10.get(14), this.autoIndent = i10.get(12), this.wordSegmenterLocales = i10.get(131), this.surroundingPairs = {}, this._electricChars = null, this.shouldAutoCloseBefore = {
        quote: this._getShouldAutoClose(e10, this.autoClosingQuotes, true),
        comment: this._getShouldAutoClose(e10, this.autoClosingComments, false),
        bracket: this._getShouldAutoClose(e10, this.autoClosingBrackets, false)
      }, this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(e10).getAutoClosingPairs();
      let s10 = this.languageConfigurationService.getLanguageConfiguration(e10).getSurroundingPairs();
      if (s10) for (let e11 of s10) this.surroundingPairs[e11.open] = e11.close;
      let c10 = this.languageConfigurationService.getLanguageConfiguration(e10).comments;
      this.blockCommentStartToken = (c10 == null ? void 0 : c10.blockCommentStartToken) ?? null;
    }
    get electricChars() {
      var _a3;
      if (!this._electricChars) {
        this._electricChars = {};
        let e10 = (_a3 = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) == null ? void 0 : _a3.getElectricCharacters();
        if (e10) for (let t10 of e10) this._electricChars[t10] = true;
      }
      return this._electricChars;
    }
    onElectricCharacter(e10, t10, n10) {
      let r10 = Th(t10, n10 - 1), i10 = this.languageConfigurationService.getLanguageConfiguration(r10.languageId).electricCharacter;
      return i10 ? i10.onElectricCharacter(e10, r10, n10 - r10.firstCharOffset) : null;
    }
    normalizeIndentation(e10) {
      return vR(e10, this.indentSize, this.insertSpaces);
    }
    _getShouldAutoClose(e10, t10, n10) {
      switch (t10) {
        case `beforeWhitespace`:
          return d$;
        case `languageDefined`:
          return this._getLanguageDefinedShouldAutoClose(e10, n10);
        case `always`:
          return l$;
        case `never`:
          return u$;
      }
    }
    _getLanguageDefinedShouldAutoClose(e10, t10) {
      let n10 = this.languageConfigurationService.getLanguageConfiguration(e10).getAutoCloseBeforeSet(t10);
      return (e11) => n10.indexOf(e11) !== -1;
    }
    visibleColumnFromColumn(e10, t10) {
      return gR.visibleColumnFromColumn(e10.getLineContent(t10.lineNumber), t10.column, this.tabSize);
    }
    columnFromVisibleColumn(e10, t10, n10) {
      let r10 = gR.columnFromVisibleColumn(e10.getLineContent(t10), n10, this.tabSize), i10 = e10.getLineMinColumn(t10);
      if (r10 < i10) return i10;
      let a10 = e10.getLineMaxColumn(t10);
      return r10 > a10 ? a10 : r10;
    }
  };
  p$ = class e10 {
    static fromModelState(e11) {
      return new m$(e11);
    }
    static fromViewState(e11) {
      return new h$(e11);
    }
    static fromModelSelection(t10) {
      let n10 = Ma.liftSelection(t10), r10 = new g$(F.fromPositions(n10.getSelectionStart()), 0, 0, n10.getPosition(), 0);
      return e10.fromModelState(r10);
    }
    static fromModelSelections(e11) {
      let t10 = [];
      for (let n10 = 0, r10 = e11.length; n10 < r10; n10++) t10[n10] = this.fromModelSelection(e11[n10]);
      return t10;
    }
    constructor(e11, t10) {
      this._cursorStateBrand = void 0, this.modelState = e11, this.viewState = t10;
    }
    equals(e11) {
      return this.viewState.equals(e11.viewState) && this.modelState.equals(e11.modelState);
    }
  };
  m$ = class {
    constructor(e10) {
      this.modelState = e10, this.viewState = null;
    }
  };
  h$ = class {
    constructor(e10) {
      this.modelState = null, this.viewState = e10;
    }
  };
  g$ = class e10 {
    constructor(t10, n10, r10, i10, a10) {
      this.selectionStart = t10, this.selectionStartKind = n10, this.selectionStartLeftoverVisibleColumns = r10, this.position = i10, this.leftoverVisibleColumns = a10, this._singleCursorStateBrand = void 0, this.selection = e10._computeSelection(this.selectionStart, this.position);
    }
    equals(e11) {
      return this.selectionStartLeftoverVisibleColumns === e11.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === e11.leftoverVisibleColumns && this.selectionStartKind === e11.selectionStartKind && this.position.equals(e11.position) && this.selectionStart.equalsRange(e11.selectionStart);
    }
    hasSelection() {
      return !this.selection.isEmpty() || !this.selectionStart.isEmpty();
    }
    move(t10, n10, r10, i10) {
      return t10 ? new e10(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new P(n10, r10), i10) : new e10(new F(n10, r10, n10, r10), 0, i10, new P(n10, r10), i10);
    }
    static _computeSelection(e11, t10) {
      return e11.isEmpty() || !t10.isBeforeOrEqual(e11.getStartPosition()) ? Ma.fromPositions(e11.getStartPosition(), t10) : Ma.fromPositions(e11.getEndPosition(), t10);
    }
  };
  _$ = class {
    constructor(e10, t10, n10) {
      this._editOperationResultBrand = void 0, this.type = e10, this.commands = t10, this.shouldPushStackElementBefore = n10.shouldPushStackElementBefore, this.shouldPushStackElementAfter = n10.shouldPushStackElementAfter;
    }
  };
  function v$(e10) {
    return e10 === `'` || e10 === `"` || e10 === "`";
  }
  let y$, S$, C$, T$, D$;
  y$ = class e10 {
    static columnSelect(e11, t10, n10, r10, i10, a10) {
      let o10 = Math.abs(i10 - n10) + 1, s10 = n10 > i10, c10 = r10 > a10, l10 = r10 < a10, u10 = [];
      for (let i11 = 0; i11 < o10; i11++) {
        let o11 = n10 + (s10 ? -i11 : i11), d10 = e11.columnFromVisibleColumn(t10, o11, r10), f10 = e11.columnFromVisibleColumn(t10, o11, a10), p10 = e11.visibleColumnFromColumn(t10, new P(o11, d10)), m10 = e11.visibleColumnFromColumn(t10, new P(o11, f10));
        l10 && (p10 > a10 || m10 < r10) || c10 && (m10 > r10 || p10 < a10) || u10.push(new g$(new F(o11, d10, o11, d10), 0, 0, new P(o11, f10), 0));
      }
      if (u10.length === 0) for (let e12 = 0; e12 < o10; e12++) {
        let r11 = n10 + (s10 ? -e12 : e12), i11 = t10.getLineMaxColumn(r11);
        u10.push(new g$(new F(r11, i11, r11, i11), 0, 0, new P(r11, i11), 0));
      }
      return {
        viewStates: u10,
        reversed: s10,
        fromLineNumber: n10,
        fromVisualColumn: r10,
        toLineNumber: i10,
        toVisualColumn: a10
      };
    }
    static columnSelectLeft(t10, n10, r10) {
      let i10 = r10.toViewVisualColumn;
      return i10 > 0 && i10--, e10.columnSelect(t10, n10, r10.fromViewLineNumber, r10.fromViewVisualColumn, r10.toViewLineNumber, i10);
    }
    static columnSelectRight(e11, t10, n10) {
      let r10 = 0, i10 = Math.min(n10.fromViewLineNumber, n10.toViewLineNumber), a10 = Math.max(n10.fromViewLineNumber, n10.toViewLineNumber);
      for (let n11 = i10; n11 <= a10; n11++) {
        let i11 = t10.getLineMaxColumn(n11), a11 = e11.visibleColumnFromColumn(t10, new P(n11, i11));
        r10 = Math.max(r10, a11);
      }
      let o10 = n10.toViewVisualColumn;
      return o10 < r10 && o10++, this.columnSelect(e11, t10, n10.fromViewLineNumber, n10.fromViewVisualColumn, n10.toViewLineNumber, o10);
    }
    static columnSelectUp(e11, t10, n10, r10) {
      let i10 = r10 ? e11.pageSize : 1, a10 = Math.max(1, n10.toViewLineNumber - i10);
      return this.columnSelect(e11, t10, n10.fromViewLineNumber, n10.fromViewVisualColumn, a10, n10.toViewVisualColumn);
    }
    static columnSelectDown(e11, t10, n10, r10) {
      let i10 = r10 ? e11.pageSize : 1, a10 = Math.min(t10.getLineCount(), n10.toViewLineNumber + i10);
      return this.columnSelect(e11, t10, n10.fromViewLineNumber, n10.fromViewVisualColumn, a10, n10.toViewVisualColumn);
    }
  };
  b$ = class {
    constructor(e10, t10, n10 = false) {
      this._range = e10, this._text = t10, this.insertsAutoWhitespace = n10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._range, this._text);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return Ma.fromPositions(r10.getEndPosition());
    }
  };
  x$ = class {
    constructor(e10, t10) {
      this._range = e10, this._text = t10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._range, this._text);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return Ma.fromRange(r10, 0);
    }
  };
  S$ = class {
    constructor(e10, t10, n10 = false) {
      this._range = e10, this._text = t10, this.insertsAutoWhitespace = n10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._range, this._text);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return Ma.fromPositions(r10.getStartPosition());
    }
  };
  C$ = class {
    constructor(e10, t10, n10, r10, i10 = false) {
      this._range = e10, this._text = t10, this._columnDeltaOffset = r10, this._lineNumberDeltaOffset = n10, this.insertsAutoWhitespace = i10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._range, this._text);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return Ma.fromPositions(r10.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));
    }
  };
  w$ = class {
    constructor(e10, t10, n10, r10 = false) {
      this._range = e10, this._text = t10, this._initialSelection = n10, this._forceMoveMarkers = r10, this._selectionId = null;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers), this._selectionId = t10.trackSelection(this._initialSelection);
    }
    computeCursorState(e10, t10) {
      return t10.getTrackedSelection(this._selectionId);
    }
  };
  T$ = class {
    constructor(e10, t10, n10) {
      this._cursorPositionBrand = void 0, this.lineNumber = e10, this.column = t10, this.leftoverVisibleColumns = n10;
    }
  };
  E$ = class e10 {
    static leftPosition(e11, t10) {
      if (t10.column > e11.getLineMinColumn(t10.lineNumber)) return t10.delta(void 0, -Js(e11.getLineContent(t10.lineNumber), t10.column - 1));
      if (t10.lineNumber > 1) {
        let n10 = t10.lineNumber - 1;
        return new P(n10, e11.getLineMaxColumn(n10));
      } else return t10;
    }
    static leftPositionAtomicSoftTabs(e11, t10, n10) {
      if (t10.column <= e11.getLineIndentColumn(t10.lineNumber)) {
        let r10 = e11.getLineMinColumn(t10.lineNumber), i10 = e11.getLineContent(t10.lineNumber), a10 = vQ.atomicPosition(i10, t10.column - 1, n10, 0);
        if (a10 !== -1 && a10 + 1 >= r10) return new P(t10.lineNumber, a10 + 1);
      }
      return this.leftPosition(e11, t10);
    }
    static left(t10, n10, r10) {
      let i10 = t10.stickyTabStops ? e10.leftPositionAtomicSoftTabs(n10, r10, t10.tabSize) : e10.leftPosition(n10, r10);
      return new T$(i10.lineNumber, i10.column, 0);
    }
    static moveLeft(t10, n10, r10, i10, a10) {
      let o10, s10;
      if (r10.hasSelection() && !i10) o10 = r10.selection.startLineNumber, s10 = r10.selection.startColumn;
      else {
        let i11 = r10.position.delta(void 0, -(a10 - 1)), c10 = n10.normalizePosition(e10.clipPositionColumn(i11, n10), 0), l10 = e10.left(t10, n10, c10);
        o10 = l10.lineNumber, s10 = l10.column;
      }
      return r10.move(i10, o10, s10, 0);
    }
    static clipPositionColumn(t10, n10) {
      return new P(t10.lineNumber, e10.clipRange(t10.column, n10.getLineMinColumn(t10.lineNumber), n10.getLineMaxColumn(t10.lineNumber)));
    }
    static clipRange(e11, t10, n10) {
      return e11 < t10 ? t10 : e11 > n10 ? n10 : e11;
    }
    static rightPosition(e11, t10, n10) {
      return n10 < e11.getLineMaxColumn(t10) ? n10 += qs(e11.getLineContent(t10), n10 - 1) : t10 < e11.getLineCount() && (t10 += 1, n10 = e11.getLineMinColumn(t10)), new P(t10, n10);
    }
    static rightPositionAtomicSoftTabs(e11, t10, n10, r10, i10) {
      if (n10 < e11.getLineIndentColumn(t10)) {
        let i11 = e11.getLineContent(t10), a10 = vQ.atomicPosition(i11, n10 - 1, r10, 1);
        if (a10 !== -1) return new P(t10, a10 + 1);
      }
      return this.rightPosition(e11, t10, n10);
    }
    static right(t10, n10, r10) {
      let i10 = t10.stickyTabStops ? e10.rightPositionAtomicSoftTabs(n10, r10.lineNumber, r10.column, t10.tabSize, t10.indentSize) : e10.rightPosition(n10, r10.lineNumber, r10.column);
      return new T$(i10.lineNumber, i10.column, 0);
    }
    static moveRight(t10, n10, r10, i10, a10) {
      let o10, s10;
      if (r10.hasSelection() && !i10) o10 = r10.selection.endLineNumber, s10 = r10.selection.endColumn;
      else {
        let i11 = r10.position.delta(void 0, a10 - 1), c10 = n10.normalizePosition(e10.clipPositionColumn(i11, n10), 1), l10 = e10.right(t10, n10, c10);
        o10 = l10.lineNumber, s10 = l10.column;
      }
      return r10.move(i10, o10, s10, 0);
    }
    static vertical(e11, t10, n10, r10, i10, a10, o10, s10) {
      let c10 = gR.visibleColumnFromColumn(t10.getLineContent(n10), r10, e11.tabSize) + i10, l10 = t10.getLineCount(), u10 = n10 === 1 && r10 === 1, d10 = n10 === l10 && r10 === t10.getLineMaxColumn(n10), f10 = a10 < n10 ? u10 : d10;
      if (n10 = a10, n10 < 1 ? (n10 = 1, r10 = o10 ? t10.getLineMinColumn(n10) : Math.min(t10.getLineMaxColumn(n10), r10)) : n10 > l10 ? (n10 = l10, r10 = o10 ? t10.getLineMaxColumn(n10) : Math.min(t10.getLineMaxColumn(n10), r10)) : r10 = e11.columnFromVisibleColumn(t10, n10, c10), i10 = f10 ? 0 : c10 - gR.visibleColumnFromColumn(t10.getLineContent(n10), r10, e11.tabSize), s10 !== void 0) {
        let e12 = new P(n10, r10), a11 = t10.normalizePosition(e12, s10);
        i10 += r10 - a11.column, n10 = a11.lineNumber, r10 = a11.column;
      }
      return new T$(n10, r10, i10);
    }
    static down(e11, t10, n10, r10, i10, a10, o10) {
      return this.vertical(e11, t10, n10, r10, i10, n10 + a10, o10, 4);
    }
    static moveDown(t10, n10, r10, i10, a10) {
      let o10, s10;
      r10.hasSelection() && !i10 ? (o10 = r10.selection.endLineNumber, s10 = r10.selection.endColumn) : (o10 = r10.position.lineNumber, s10 = r10.position.column);
      let c10 = 0, l10;
      do {
        l10 = e10.down(t10, n10, o10 + c10, s10, r10.leftoverVisibleColumns, a10, true);
        let i11 = n10.normalizePosition(new P(l10.lineNumber, l10.column), 2);
        if (i11.lineNumber > o10) break;
      } while (c10++ < 10 && o10 + c10 < n10.getLineCount());
      return r10.move(i10, l10.lineNumber, l10.column, l10.leftoverVisibleColumns);
    }
    static translateDown(t10, n10, r10) {
      let i10 = r10.selection, a10 = e10.down(t10, n10, i10.selectionStartLineNumber, i10.selectionStartColumn, r10.selectionStartLeftoverVisibleColumns, 1, false), o10 = e10.down(t10, n10, i10.positionLineNumber, i10.positionColumn, r10.leftoverVisibleColumns, 1, false);
      return new g$(new F(a10.lineNumber, a10.column, a10.lineNumber, a10.column), 0, a10.leftoverVisibleColumns, new P(o10.lineNumber, o10.column), o10.leftoverVisibleColumns);
    }
    static up(e11, t10, n10, r10, i10, a10, o10) {
      return this.vertical(e11, t10, n10, r10, i10, n10 - a10, o10, 3);
    }
    static moveUp(t10, n10, r10, i10, a10) {
      let o10, s10;
      r10.hasSelection() && !i10 ? (o10 = r10.selection.startLineNumber, s10 = r10.selection.startColumn) : (o10 = r10.position.lineNumber, s10 = r10.position.column);
      let c10 = e10.up(t10, n10, o10, s10, r10.leftoverVisibleColumns, a10, true);
      return r10.move(i10, c10.lineNumber, c10.column, c10.leftoverVisibleColumns);
    }
    static translateUp(t10, n10, r10) {
      let i10 = r10.selection, a10 = e10.up(t10, n10, i10.selectionStartLineNumber, i10.selectionStartColumn, r10.selectionStartLeftoverVisibleColumns, 1, false), o10 = e10.up(t10, n10, i10.positionLineNumber, i10.positionColumn, r10.leftoverVisibleColumns, 1, false);
      return new g$(new F(a10.lineNumber, a10.column, a10.lineNumber, a10.column), 0, a10.leftoverVisibleColumns, new P(o10.lineNumber, o10.column), o10.leftoverVisibleColumns);
    }
    static _isBlankLine(e11, t10) {
      return e11.getLineFirstNonWhitespaceColumn(t10) === 0;
    }
    static moveToPrevBlankLine(e11, t10, n10, r10) {
      let i10 = n10.position.lineNumber;
      for (; i10 > 1 && this._isBlankLine(t10, i10); ) i10--;
      for (; i10 > 1 && !this._isBlankLine(t10, i10); ) i10--;
      return n10.move(r10, i10, t10.getLineMinColumn(i10), 0);
    }
    static moveToNextBlankLine(e11, t10, n10, r10) {
      let i10 = t10.getLineCount(), a10 = n10.position.lineNumber;
      for (; a10 < i10 && this._isBlankLine(t10, a10); ) a10++;
      for (; a10 < i10 && !this._isBlankLine(t10, a10); ) a10++;
      return n10.move(r10, a10, t10.getLineMinColumn(a10), 0);
    }
    static moveToBeginningOfLine(e11, t10, n10, r10) {
      let i10 = n10.position.lineNumber, a10 = t10.getLineMinColumn(i10), o10 = t10.getLineFirstNonWhitespaceColumn(i10) || a10, s10, c10 = n10.position.column;
      return s10 = c10 === o10 ? a10 : o10, n10.move(r10, i10, s10, 0);
    }
    static moveToEndOfLine(e11, t10, n10, r10, i10) {
      let a10 = n10.position.lineNumber, o10 = t10.getLineMaxColumn(a10);
      return n10.move(r10, a10, o10, i10 ? 1073741824 - o10 : 0);
    }
    static moveToBeginningOfBuffer(e11, t10, n10, r10) {
      return n10.move(r10, 1, 1, 0);
    }
    static moveToEndOfBuffer(e11, t10, n10, r10) {
      let i10 = t10.getLineCount(), a10 = t10.getLineMaxColumn(i10);
      return n10.move(r10, i10, a10, 0);
    }
  };
  D$ = class e10 {
    static deleteRight(e11, t10, n10, r10) {
      let i10 = [], a10 = e11 !== 3;
      for (let e12 = 0, o10 = r10.length; e12 < o10; e12++) {
        let o11 = r10[e12], s10 = o11;
        if (s10.isEmpty()) {
          let e13 = o11.getPosition(), r11 = E$.right(t10, n10, e13);
          s10 = new F(r11.lineNumber, r11.column, e13.lineNumber, e13.column);
        }
        if (s10.isEmpty()) {
          i10[e12] = null;
          continue;
        }
        s10.startLineNumber !== s10.endLineNumber && (a10 = true), i10[e12] = new b$(s10, ``);
      }
      return [
        a10,
        i10
      ];
    }
    static isAutoClosingPairDelete(e11, t10, n10, r10, i10, a10, o10) {
      if (t10 === `never` && n10 === `never` || e11 === `never`) return false;
      for (let s10 = 0, c10 = a10.length; s10 < c10; s10++) {
        let c11 = a10[s10], l10 = c11.getPosition();
        if (!c11.isEmpty()) return false;
        let u10 = i10.getLineContent(l10.lineNumber);
        if (l10.column < 2 || l10.column >= u10.length + 1) return false;
        let d10 = u10.charAt(l10.column - 2), f10 = r10.get(d10);
        if (!f10) return false;
        if (v$(d10)) {
          if (n10 === `never`) return false;
        } else if (t10 === `never`) return false;
        let p10 = u10.charAt(l10.column - 1), m10 = false;
        for (let e12 of f10) e12.open === d10 && e12.close === p10 && (m10 = true);
        if (!m10) return false;
        if (e11 === `auto`) {
          let e12 = false;
          for (let t11 = 0, n11 = o10.length; t11 < n11; t11++) {
            let n12 = o10[t11];
            if (l10.lineNumber === n12.startLineNumber && l10.column === n12.startColumn) {
              e12 = true;
              break;
            }
          }
          if (!e12) return false;
        }
      }
      return true;
    }
    static _runAutoClosingPairDelete(e11, t10, n10) {
      let r10 = [];
      for (let e12 = 0, t11 = n10.length; e12 < t11; e12++) {
        let t12 = n10[e12].getPosition(), i10 = new F(t12.lineNumber, t12.column - 1, t12.lineNumber, t12.column + 1);
        r10[e12] = new b$(i10, ``);
      }
      return [
        true,
        r10
      ];
    }
    static deleteLeft(t10, n10, r10, i10, a10) {
      if (this.isAutoClosingPairDelete(n10.autoClosingDelete, n10.autoClosingBrackets, n10.autoClosingQuotes, n10.autoClosingPairs.autoClosingPairsOpenByEnd, r10, i10, a10)) return this._runAutoClosingPairDelete(n10, r10, i10);
      let o10 = [], s10 = t10 !== 2;
      for (let t11 = 0, a11 = i10.length; t11 < a11; t11++) {
        let a12 = e10.getDeleteRange(i10[t11], r10, n10);
        if (a12.isEmpty()) {
          o10[t11] = null;
          continue;
        }
        a12.startLineNumber !== a12.endLineNumber && (s10 = true), o10[t11] = new b$(a12, ``);
      }
      return [
        s10,
        o10
      ];
    }
    static getDeleteRange(t10, n10, r10) {
      if (!t10.isEmpty()) return t10;
      let i10 = t10.getPosition();
      if (r10.useTabStops && i10.column > 1) {
        let e11 = n10.getLineContent(i10.lineNumber), t11 = Es(e11), a10 = t11 === -1 ? e11.length + 1 : t11 + 1;
        if (i10.column <= a10) {
          let e12 = r10.visibleColumnFromColumn(n10, i10), t12 = gR.prevIndentTabStop(e12, r10.indentSize), a11 = r10.columnFromVisibleColumn(n10, i10.lineNumber, t12);
          return new F(i10.lineNumber, a11, i10.lineNumber, i10.column);
        }
      }
      return F.fromPositions(e10.getPositionAfterDeleteLeft(i10, n10), i10);
    }
    static getPositionAfterDeleteLeft(e11, t10) {
      if (e11.column > 1) {
        let n10 = fc(e11.column - 1, t10.getLineContent(e11.lineNumber));
        return e11.with(void 0, n10 + 1);
      } else if (e11.lineNumber > 1) {
        let n10 = e11.lineNumber - 1;
        return new P(n10, t10.getLineMaxColumn(n10));
      } else return e11;
    }
    static cut(e11, t10, n10) {
      let r10 = [], i10 = null;
      n10.sort((e12, t11) => P.compare(e12.getStartPosition(), t11.getEndPosition()));
      for (let a10 = 0, o10 = n10.length; a10 < o10; a10++) {
        let o11 = n10[a10];
        if (o11.isEmpty()) if (e11.emptySelectionClipboard) {
          let e12 = o11.getPosition(), n11, s10, c10, l10;
          e12.lineNumber < t10.getLineCount() ? (n11 = e12.lineNumber, s10 = 1, c10 = e12.lineNumber + 1, l10 = 1) : e12.lineNumber > 1 && (i10 == null ? void 0 : i10.endLineNumber) !== e12.lineNumber ? (n11 = e12.lineNumber - 1, s10 = t10.getLineMaxColumn(e12.lineNumber - 1), c10 = e12.lineNumber, l10 = t10.getLineMaxColumn(e12.lineNumber)) : (n11 = e12.lineNumber, s10 = 1, c10 = e12.lineNumber, l10 = t10.getLineMaxColumn(e12.lineNumber));
          let u10 = new F(n11, s10, c10, l10);
          i10 = u10, u10.isEmpty() ? r10[a10] = null : r10[a10] = new b$(u10, ``);
        } else r10[a10] = null;
        else r10[a10] = new b$(o11, ``);
      }
      return new _$(0, r10, {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: true
      });
    }
  };
  O$ = class e10 {
    static _createWord(e11, t10, n10, r10, i10) {
      return {
        start: r10,
        end: i10,
        wordType: t10,
        nextCharClass: n10
      };
    }
    static _createIntlWord(e11, t10) {
      return {
        start: e11.index,
        end: e11.index + e11.segment.length,
        wordType: 1,
        nextCharClass: t10
      };
    }
    static _findPreviousWordOnLine(e11, t10, n10) {
      let r10 = t10.getLineContent(n10.lineNumber);
      return this._doFindPreviousWordOnLine(r10, e11, n10);
    }
    static _doFindPreviousWordOnLine(e11, t10, n10) {
      let r10 = 0, i10 = t10.findPrevIntlWordBeforeOrAtOffset(e11, n10.column - 2);
      for (let a10 = n10.column - 2; a10 >= 0; a10--) {
        let n11 = e11.charCodeAt(a10), o10 = t10.get(n11);
        if (i10 && a10 === i10.index) return this._createIntlWord(i10, o10);
        if (o10 === 0) {
          if (r10 === 2) return this._createWord(e11, r10, o10, a10 + 1, this._findEndOfWord(e11, t10, r10, a10 + 1));
          r10 = 1;
        } else if (o10 === 2) {
          if (r10 === 1) return this._createWord(e11, r10, o10, a10 + 1, this._findEndOfWord(e11, t10, r10, a10 + 1));
          r10 = 2;
        } else if (o10 === 1 && r10 !== 0) return this._createWord(e11, r10, o10, a10 + 1, this._findEndOfWord(e11, t10, r10, a10 + 1));
      }
      return r10 === 0 ? null : this._createWord(e11, r10, 1, 0, this._findEndOfWord(e11, t10, r10, 0));
    }
    static _findEndOfWord(e11, t10, n10, r10) {
      let i10 = t10.findNextIntlWordAtOrAfterOffset(e11, r10), a10 = e11.length;
      for (let o10 = r10; o10 < a10; o10++) {
        let r11 = e11.charCodeAt(o10), a11 = t10.get(r11);
        if (i10 && o10 === i10.index + i10.segment.length || a11 === 1 || n10 === 1 && a11 === 2 || n10 === 2 && a11 === 0) return o10;
      }
      return a10;
    }
    static _findNextWordOnLine(e11, t10, n10) {
      let r10 = t10.getLineContent(n10.lineNumber);
      return this._doFindNextWordOnLine(r10, e11, n10);
    }
    static _doFindNextWordOnLine(e11, t10, n10) {
      let r10 = 0, i10 = e11.length, a10 = t10.findNextIntlWordAtOrAfterOffset(e11, n10.column - 1);
      for (let o10 = n10.column - 1; o10 < i10; o10++) {
        let n11 = e11.charCodeAt(o10), i11 = t10.get(n11);
        if (a10 && o10 === a10.index) return this._createIntlWord(a10, i11);
        if (i11 === 0) {
          if (r10 === 2) return this._createWord(e11, r10, i11, this._findStartOfWord(e11, t10, r10, o10 - 1), o10);
          r10 = 1;
        } else if (i11 === 2) {
          if (r10 === 1) return this._createWord(e11, r10, i11, this._findStartOfWord(e11, t10, r10, o10 - 1), o10);
          r10 = 2;
        } else if (i11 === 1 && r10 !== 0) return this._createWord(e11, r10, i11, this._findStartOfWord(e11, t10, r10, o10 - 1), o10);
      }
      return r10 === 0 ? null : this._createWord(e11, r10, 1, this._findStartOfWord(e11, t10, r10, i10 - 1), i10);
    }
    static _findStartOfWord(e11, t10, n10, r10) {
      let i10 = t10.findPrevIntlWordBeforeOrAtOffset(e11, r10);
      for (let a10 = r10; a10 >= 0; a10--) {
        let r11 = e11.charCodeAt(a10), o10 = t10.get(r11);
        if (i10 && a10 === i10.index) return a10;
        if (o10 === 1 || n10 === 1 && o10 === 2 || n10 === 2 && o10 === 0) return a10 + 1;
      }
      return 0;
    }
    static moveWordLeft(t10, n10, r10, i10, a10) {
      let o10 = r10.lineNumber, s10 = r10.column;
      s10 === 1 && o10 > 1 && (--o10, s10 = n10.getLineMaxColumn(o10));
      let c10 = e10._findPreviousWordOnLine(t10, n10, new P(o10, s10));
      if (i10 === 0) return new P(o10, c10 ? c10.start + 1 : 1);
      if (i10 === 1) return !a10 && c10 && c10.wordType === 2 && c10.end - c10.start === 1 && c10.nextCharClass === 0 && (c10 = e10._findPreviousWordOnLine(t10, n10, new P(o10, c10.start + 1))), new P(o10, c10 ? c10.start + 1 : 1);
      if (i10 === 3) {
        for (; c10 && c10.wordType === 2; ) c10 = e10._findPreviousWordOnLine(t10, n10, new P(o10, c10.start + 1));
        return new P(o10, c10 ? c10.start + 1 : 1);
      }
      return c10 && s10 <= c10.end + 1 && (c10 = e10._findPreviousWordOnLine(t10, n10, new P(o10, c10.start + 1))), new P(o10, c10 ? c10.end + 1 : 1);
    }
    static _moveWordPartLeft(e11, t10) {
      let n10 = t10.lineNumber, r10 = e11.getLineMaxColumn(n10);
      if (t10.column === 1) return n10 > 1 ? new P(n10 - 1, e11.getLineMaxColumn(n10 - 1)) : t10;
      let i10 = e11.getLineContent(n10);
      for (let e12 = t10.column - 1; e12 > 1; e12--) {
        let t11 = i10.charCodeAt(e12 - 2), a10 = i10.charCodeAt(e12 - 1);
        if (t11 === 95 && a10 !== 95 || t11 === 45 && a10 !== 45 || (Ps(t11) || Ns(t11)) && Fs(a10)) return new P(n10, e12);
        if (Fs(t11) && Fs(a10) && e12 + 1 < r10) {
          let t12 = i10.charCodeAt(e12);
          if (Ps(t12) || Ns(t12)) return new P(n10, e12);
        }
      }
      return new P(n10, 1);
    }
    static moveWordRight(t10, n10, r10, i10) {
      let a10 = r10.lineNumber, o10 = r10.column, s10 = false;
      o10 === n10.getLineMaxColumn(a10) && a10 < n10.getLineCount() && (s10 = true, a10 += 1, o10 = 1);
      let c10 = e10._findNextWordOnLine(t10, n10, new P(a10, o10));
      if (i10 === 2) c10 && c10.wordType === 2 && c10.end - c10.start === 1 && c10.nextCharClass === 0 && (c10 = e10._findNextWordOnLine(t10, n10, new P(a10, c10.end + 1))), o10 = c10 ? c10.end + 1 : n10.getLineMaxColumn(a10);
      else if (i10 === 3) {
        for (s10 && (o10 = 0); c10 && (c10.wordType === 2 || c10.start + 1 <= o10); ) c10 = e10._findNextWordOnLine(t10, n10, new P(a10, c10.end + 1));
        o10 = c10 ? c10.start + 1 : n10.getLineMaxColumn(a10);
      } else c10 && !s10 && o10 >= c10.start + 1 && (c10 = e10._findNextWordOnLine(t10, n10, new P(a10, c10.end + 1))), o10 = c10 ? c10.start + 1 : n10.getLineMaxColumn(a10);
      return new P(a10, o10);
    }
    static _moveWordPartRight(e11, t10) {
      let n10 = t10.lineNumber, r10 = e11.getLineMaxColumn(n10);
      if (t10.column === r10) return n10 < e11.getLineCount() ? new P(n10 + 1, 1) : t10;
      let i10 = e11.getLineContent(n10);
      for (let e12 = t10.column + 1; e12 < r10; e12++) {
        let t11 = i10.charCodeAt(e12 - 2), a10 = i10.charCodeAt(e12 - 1);
        if (t11 !== 95 && a10 === 95 || t11 !== 45 && a10 === 45 || (Ps(t11) || Ns(t11)) && Fs(a10)) return new P(n10, e12);
        if (Fs(t11) && Fs(a10) && e12 + 1 < r10) {
          let t12 = i10.charCodeAt(e12);
          if (Ps(t12) || Ns(t12)) return new P(n10, e12);
        }
      }
      return new P(n10, r10);
    }
    static _deleteWordLeftWhitespace(e11, t10) {
      let n10 = e11.getLineContent(t10.lineNumber), r10 = t10.column - 2, i10 = Os(n10, r10);
      return i10 + 1 < r10 ? new F(t10.lineNumber, i10 + 2, t10.lineNumber, t10.column) : null;
    }
    static deleteWordLeft(t10, n10) {
      let r10 = t10.wordSeparators, i10 = t10.model, a10 = t10.selection, o10 = t10.whitespaceHeuristics;
      if (!a10.isEmpty()) return a10;
      if (D$.isAutoClosingPairDelete(t10.autoClosingDelete, t10.autoClosingBrackets, t10.autoClosingQuotes, t10.autoClosingPairs.autoClosingPairsOpenByEnd, t10.model, [
        t10.selection
      ], t10.autoClosedCharacters)) {
        let e11 = t10.selection.getPosition();
        return new F(e11.lineNumber, e11.column - 1, e11.lineNumber, e11.column + 1);
      }
      let s10 = new P(a10.positionLineNumber, a10.positionColumn), c10 = s10.lineNumber, l10 = s10.column;
      if (c10 === 1 && l10 === 1) return null;
      if (o10) {
        let e11 = this._deleteWordLeftWhitespace(i10, s10);
        if (e11) return e11;
      }
      let u10 = e10._findPreviousWordOnLine(r10, i10, s10);
      return n10 === 0 ? u10 ? l10 = u10.start + 1 : l10 > 1 ? l10 = 1 : (c10--, l10 = i10.getLineMaxColumn(c10)) : (u10 && l10 <= u10.end + 1 && (u10 = e10._findPreviousWordOnLine(r10, i10, new P(c10, u10.start + 1))), u10 ? l10 = u10.end + 1 : l10 > 1 ? l10 = 1 : (c10--, l10 = i10.getLineMaxColumn(c10))), new F(c10, l10, s10.lineNumber, s10.column);
    }
    static deleteInsideWord(e11, t10, n10) {
      if (!n10.isEmpty()) return n10;
      let r10 = new P(n10.positionLineNumber, n10.positionColumn), i10 = this._deleteInsideWordWhitespace(t10, r10);
      return i10 || this._deleteInsideWordDetermineDeleteRange(e11, t10, r10);
    }
    static _charAtIsWhitespace(e11, t10) {
      let n10 = e11.charCodeAt(t10);
      return n10 === 32 || n10 === 9;
    }
    static _deleteInsideWordWhitespace(e11, t10) {
      let n10 = e11.getLineContent(t10.lineNumber), r10 = n10.length;
      if (r10 === 0) return null;
      let i10 = Math.max(t10.column - 2, 0);
      if (!this._charAtIsWhitespace(n10, i10)) return null;
      let a10 = Math.min(t10.column - 1, r10 - 1);
      if (!this._charAtIsWhitespace(n10, a10)) return null;
      for (; i10 > 0 && this._charAtIsWhitespace(n10, i10 - 1); ) i10--;
      for (; a10 + 1 < r10 && this._charAtIsWhitespace(n10, a10 + 1); ) a10++;
      return new F(t10.lineNumber, i10 + 1, t10.lineNumber, a10 + 2);
    }
    static _deleteInsideWordDetermineDeleteRange(t10, n10, r10) {
      let i10 = n10.getLineContent(r10.lineNumber), a10 = i10.length;
      if (a10 === 0) return r10.lineNumber > 1 ? new F(r10.lineNumber - 1, n10.getLineMaxColumn(r10.lineNumber - 1), r10.lineNumber, 1) : r10.lineNumber < n10.getLineCount() ? new F(r10.lineNumber, 1, r10.lineNumber + 1, 1) : new F(r10.lineNumber, 1, r10.lineNumber, 1);
      let o10 = (e11) => e11.start + 1 <= r10.column && r10.column <= e11.end + 1, s10 = (e11, t11) => (e11 = Math.min(e11, r10.column), t11 = Math.max(t11, r10.column), new F(r10.lineNumber, e11, r10.lineNumber, t11)), c10 = (e11) => {
        let t11 = e11.start + 1, n11 = e11.end + 1, r11 = false;
        for (; n11 - 1 < a10 && this._charAtIsWhitespace(i10, n11 - 1); ) r11 = true, n11++;
        if (!r11) for (; t11 > 1 && this._charAtIsWhitespace(i10, t11 - 2); ) t11--;
        return s10(t11, n11);
      }, l10 = e10._findPreviousWordOnLine(t10, n10, r10);
      if (l10 && o10(l10)) return c10(l10);
      let u10 = e10._findNextWordOnLine(t10, n10, r10);
      return u10 && o10(u10) ? c10(u10) : l10 && u10 ? s10(l10.end + 1, u10.start + 1) : l10 ? s10(l10.start + 1, l10.end + 1) : u10 ? s10(u10.start + 1, u10.end + 1) : s10(1, a10 + 1);
    }
    static _deleteWordPartLeft(t10, n10) {
      if (!n10.isEmpty()) return n10;
      let r10 = n10.getPosition(), i10 = e10._moveWordPartLeft(t10, r10);
      return new F(r10.lineNumber, r10.column, i10.lineNumber, i10.column);
    }
    static _findFirstNonWhitespaceChar(e11, t10) {
      let n10 = e11.length;
      for (let r10 = t10; r10 < n10; r10++) {
        let t11 = e11.charAt(r10);
        if (t11 !== ` ` && t11 !== `	`) return r10;
      }
      return n10;
    }
    static _deleteWordRightWhitespace(e11, t10) {
      let n10 = e11.getLineContent(t10.lineNumber), r10 = t10.column - 1, i10 = this._findFirstNonWhitespaceChar(n10, r10);
      return r10 + 1 < i10 ? new F(t10.lineNumber, t10.column, t10.lineNumber, i10 + 1) : null;
    }
    static deleteWordRight(t10, n10) {
      let r10 = t10.wordSeparators, i10 = t10.model, a10 = t10.selection, o10 = t10.whitespaceHeuristics;
      if (!a10.isEmpty()) return a10;
      let s10 = new P(a10.positionLineNumber, a10.positionColumn), c10 = s10.lineNumber, l10 = s10.column, u10 = i10.getLineCount(), d10 = i10.getLineMaxColumn(c10);
      if (c10 === u10 && l10 === d10) return null;
      if (o10) {
        let e11 = this._deleteWordRightWhitespace(i10, s10);
        if (e11) return e11;
      }
      let f10 = e10._findNextWordOnLine(r10, i10, s10);
      return n10 === 2 ? f10 ? l10 = f10.end + 1 : l10 < d10 || c10 === u10 ? l10 = d10 : (c10++, f10 = e10._findNextWordOnLine(r10, i10, new P(c10, 1)), l10 = f10 ? f10.start + 1 : i10.getLineMaxColumn(c10)) : (f10 && l10 >= f10.start + 1 && (f10 = e10._findNextWordOnLine(r10, i10, new P(c10, f10.end + 1))), f10 ? l10 = f10.start + 1 : l10 < d10 || c10 === u10 ? l10 = d10 : (c10++, f10 = e10._findNextWordOnLine(r10, i10, new P(c10, 1)), l10 = f10 ? f10.start + 1 : i10.getLineMaxColumn(c10))), new F(c10, l10, s10.lineNumber, s10.column);
    }
    static _deleteWordPartRight(t10, n10) {
      if (!n10.isEmpty()) return n10;
      let r10 = n10.getPosition(), i10 = e10._moveWordPartRight(t10, r10);
      return new F(r10.lineNumber, r10.column, i10.lineNumber, i10.column);
    }
    static _createWordAtPosition(e11, t10, n10) {
      let r10 = new F(t10, n10.start + 1, t10, n10.end + 1);
      return {
        word: e11.getValueInRange(r10),
        startColumn: r10.startColumn,
        endColumn: r10.endColumn
      };
    }
    static getWordAtPosition(t10, n10, r10, i10) {
      let a10 = X_(n10, r10), o10 = e10._findPreviousWordOnLine(a10, t10, i10);
      if (o10 && o10.wordType === 1 && o10.start <= i10.column - 1 && i10.column - 1 <= o10.end) return e10._createWordAtPosition(t10, i10.lineNumber, o10);
      let s10 = e10._findNextWordOnLine(a10, t10, i10);
      return s10 && s10.wordType === 1 && s10.start <= i10.column - 1 && i10.column - 1 <= s10.end ? e10._createWordAtPosition(t10, i10.lineNumber, s10) : null;
    }
    static word(t10, n10, r10, i10, a10) {
      let o10 = X_(t10.wordSeparators, t10.wordSegmenterLocales), s10 = e10._findPreviousWordOnLine(o10, n10, a10), c10 = e10._findNextWordOnLine(o10, n10, a10);
      if (!i10) {
        let e11, t11;
        return s10 && s10.wordType === 1 && s10.start <= a10.column - 1 && a10.column - 1 <= s10.end ? (e11 = s10.start + 1, t11 = s10.end + 1) : c10 && c10.wordType === 1 && c10.start <= a10.column - 1 && a10.column - 1 <= c10.end ? (e11 = c10.start + 1, t11 = c10.end + 1) : (e11 = s10 ? s10.end + 1 : 1, t11 = c10 ? c10.start + 1 : n10.getLineMaxColumn(a10.lineNumber)), new g$(new F(a10.lineNumber, e11, a10.lineNumber, t11), 1, 0, new P(a10.lineNumber, t11), 0);
      }
      let l10, u10;
      s10 && s10.wordType === 1 && s10.start < a10.column - 1 && a10.column - 1 < s10.end ? (l10 = s10.start + 1, u10 = s10.end + 1) : c10 && c10.wordType === 1 && c10.start < a10.column - 1 && a10.column - 1 < c10.end ? (l10 = c10.start + 1, u10 = c10.end + 1) : (l10 = a10.column, u10 = a10.column);
      let d10 = a10.lineNumber, f10;
      if (r10.selectionStart.containsPosition(a10)) f10 = r10.selectionStart.endColumn;
      else if (a10.isBeforeOrEqual(r10.selectionStart.getStartPosition())) {
        f10 = l10;
        let e11 = new P(d10, f10);
        r10.selectionStart.containsPosition(e11) && (f10 = r10.selectionStart.endColumn);
      } else {
        f10 = u10;
        let e11 = new P(d10, f10);
        r10.selectionStart.containsPosition(e11) && (f10 = r10.selectionStart.startColumn);
      }
      return r10.move(true, d10, f10, 0);
    }
  };
  k$ = class extends O$ {
    static deleteWordPartLeft(e10) {
      let t10 = A$([
        O$.deleteWordLeft(e10, 0),
        O$.deleteWordLeft(e10, 2),
        O$._deleteWordPartLeft(e10.model, e10.selection)
      ]);
      return t10.sort(F.compareRangesUsingEnds), t10[2];
    }
    static deleteWordPartRight(e10) {
      let t10 = A$([
        O$.deleteWordRight(e10, 0),
        O$.deleteWordRight(e10, 2),
        O$._deleteWordPartRight(e10.model, e10.selection)
      ]);
      return t10.sort(F.compareRangesUsingStarts), t10[0];
    }
    static moveWordPartLeft(e10, t10, n10, r10) {
      let i10 = A$([
        O$.moveWordLeft(e10, t10, n10, 0, r10),
        O$.moveWordLeft(e10, t10, n10, 2, r10),
        O$._moveWordPartLeft(t10, n10)
      ]);
      return i10.sort(P.compare), i10[2];
    }
    static moveWordPartRight(e10, t10, n10) {
      let r10 = A$([
        O$.moveWordRight(e10, t10, n10, 0),
        O$.moveWordRight(e10, t10, n10, 2),
        O$._moveWordPartRight(t10, n10)
      ]);
      return r10.sort(P.compare), r10[0];
    }
  };
  function A$(e10) {
    return e10.filter((e11) => !!e11);
  }
  let M$;
  j$ = class {
    static addCursorDown(e10, t10, n10) {
      let r10 = [], i10 = 0;
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        r10[i10++] = new p$(o11.modelState, o11.viewState), n10 ? r10[i10++] = p$.fromModelState(E$.translateDown(e10.cursorConfig, e10.model, o11.modelState)) : r10[i10++] = p$.fromViewState(E$.translateDown(e10.cursorConfig, e10, o11.viewState));
      }
      return r10;
    }
    static addCursorUp(e10, t10, n10) {
      let r10 = [], i10 = 0;
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        r10[i10++] = new p$(o11.modelState, o11.viewState), n10 ? r10[i10++] = p$.fromModelState(E$.translateUp(e10.cursorConfig, e10.model, o11.modelState)) : r10[i10++] = p$.fromViewState(E$.translateUp(e10.cursorConfig, e10, o11.viewState));
      }
      return r10;
    }
    static moveToBeginningOfLine(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10];
        r10[i10] = this._moveToLineStart(e10, a11, n10);
      }
      return r10;
    }
    static _moveToLineStart(e10, t10, n10) {
      let r10 = t10.viewState.position.column, i10 = t10.modelState.position.column, a10 = r10 === i10, o10 = t10.viewState.position.lineNumber, s10 = e10.getLineFirstNonWhitespaceColumn(o10), c10 = r10 === s10;
      return !a10 && !c10 ? this._moveToLineStartByView(e10, t10, n10) : this._moveToLineStartByModel(e10, t10, n10);
    }
    static _moveToLineStartByView(e10, t10, n10) {
      return p$.fromViewState(E$.moveToBeginningOfLine(e10.cursorConfig, e10, t10.viewState, n10));
    }
    static _moveToLineStartByModel(e10, t10, n10) {
      return p$.fromModelState(E$.moveToBeginningOfLine(e10.cursorConfig, e10.model, t10.modelState, n10));
    }
    static moveToEndOfLine(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        i10[a10] = this._moveToLineEnd(e10, o11, n10, r10);
      }
      return i10;
    }
    static _moveToLineEnd(e10, t10, n10, r10) {
      let i10 = t10.viewState.position, a10 = e10.getLineMaxColumn(i10.lineNumber), o10 = i10.column === a10, s10 = t10.modelState.position, c10 = e10.model.getLineMaxColumn(s10.lineNumber), l10 = a10 - i10.column === c10 - s10.column;
      return o10 || l10 ? this._moveToLineEndByModel(e10, t10, n10, r10) : this._moveToLineEndByView(e10, t10, n10, r10);
    }
    static _moveToLineEndByView(e10, t10, n10, r10) {
      return p$.fromViewState(E$.moveToEndOfLine(e10.cursorConfig, e10, t10.viewState, n10, r10));
    }
    static _moveToLineEndByModel(e10, t10, n10, r10) {
      return p$.fromModelState(E$.moveToEndOfLine(e10.cursorConfig, e10.model, t10.modelState, n10, r10));
    }
    static expandLineSelection(e10, t10) {
      let n10 = [];
      for (let r10 = 0, i10 = t10.length; r10 < i10; r10++) {
        let i11 = t10[r10], a10 = i11.modelState.selection.startLineNumber, o10 = e10.model.getLineCount(), s10 = i11.modelState.selection.endLineNumber, c10;
        s10 === o10 ? c10 = e10.model.getLineMaxColumn(o10) : (s10++, c10 = 1), n10[r10] = p$.fromModelState(new g$(new F(a10, 1, a10, 1), 0, 0, new P(s10, c10), 0));
      }
      return n10;
    }
    static moveToBeginningOfBuffer(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10];
        r10[i10] = p$.fromModelState(E$.moveToBeginningOfBuffer(e10.cursorConfig, e10.model, a11.modelState, n10));
      }
      return r10;
    }
    static moveToEndOfBuffer(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10];
        r10[i10] = p$.fromModelState(E$.moveToEndOfBuffer(e10.cursorConfig, e10.model, a11.modelState, n10));
      }
      return r10;
    }
    static selectAll(e10, t10) {
      let n10 = e10.model.getLineCount(), r10 = e10.model.getLineMaxColumn(n10);
      return p$.fromModelState(new g$(new F(1, 1, 1, 1), 0, 0, new P(n10, r10), 0));
    }
    static line(e10, t10, n10, r10, i10) {
      let a10 = e10.model.validatePosition(r10), o10 = i10 ? e10.coordinatesConverter.validateViewPosition(new P(i10.lineNumber, i10.column), a10) : e10.coordinatesConverter.convertModelPositionToViewPosition(a10);
      if (!n10) {
        let t11 = e10.model.getLineCount(), n11 = a10.lineNumber + 1, r11 = 1;
        return n11 > t11 && (n11 = t11, r11 = e10.model.getLineMaxColumn(n11)), p$.fromModelState(new g$(new F(a10.lineNumber, 1, n11, r11), 2, 0, new P(n11, r11), 0));
      }
      let s10 = t10.modelState.selectionStart.getStartPosition().lineNumber;
      if (a10.lineNumber < s10) return p$.fromViewState(t10.viewState.move(true, o10.lineNumber, 1, 0));
      if (a10.lineNumber > s10) {
        let n11 = e10.getLineCount(), r11 = o10.lineNumber + 1, i11 = 1;
        return r11 > n11 && (r11 = n11, i11 = e10.getLineMaxColumn(r11)), p$.fromViewState(t10.viewState.move(true, r11, i11, 0));
      } else {
        let e11 = t10.modelState.selectionStart.getEndPosition();
        return p$.fromModelState(t10.modelState.move(true, e11.lineNumber, e11.column, 0));
      }
    }
    static word(e10, t10, n10, r10) {
      let i10 = e10.model.validatePosition(r10);
      return p$.fromModelState(O$.word(e10.cursorConfig, e10.model, t10.modelState, n10, i10));
    }
    static cancelSelection(e10, t10) {
      if (!t10.modelState.hasSelection()) return new p$(t10.modelState, t10.viewState);
      let n10 = t10.viewState.position.lineNumber, r10 = t10.viewState.position.column;
      return p$.fromViewState(new g$(new F(n10, r10, n10, r10), 0, 0, new P(n10, r10), 0));
    }
    static moveTo(e10, t10, n10, r10, i10) {
      if (n10) {
        if (t10.modelState.selectionStartKind === 1) return this.word(e10, t10, n10, r10);
        if (t10.modelState.selectionStartKind === 2) return this.line(e10, t10, n10, r10, i10);
      }
      let a10 = e10.model.validatePosition(r10), o10 = i10 ? e10.coordinatesConverter.validateViewPosition(new P(i10.lineNumber, i10.column), a10) : e10.coordinatesConverter.convertModelPositionToViewPosition(a10);
      return p$.fromViewState(t10.viewState.move(n10, o10.lineNumber, o10.column, 0));
    }
    static simpleMove(e10, t10, n10, r10, i10, a10) {
      switch (n10) {
        case 0:
          return a10 === 4 ? this._moveHalfLineLeft(e10, t10, r10) : this._moveLeft(e10, t10, r10, i10);
        case 1:
          return a10 === 4 ? this._moveHalfLineRight(e10, t10, r10) : this._moveRight(e10, t10, r10, i10);
        case 2:
          return a10 === 2 ? this._moveUpByViewLines(e10, t10, r10, i10) : this._moveUpByModelLines(e10, t10, r10, i10);
        case 3:
          return a10 === 2 ? this._moveDownByViewLines(e10, t10, r10, i10) : this._moveDownByModelLines(e10, t10, r10, i10);
        case 4:
          return a10 === 2 ? t10.map((t11) => p$.fromViewState(E$.moveToPrevBlankLine(e10.cursorConfig, e10, t11.viewState, r10))) : t10.map((t11) => p$.fromModelState(E$.moveToPrevBlankLine(e10.cursorConfig, e10.model, t11.modelState, r10)));
        case 5:
          return a10 === 2 ? t10.map((t11) => p$.fromViewState(E$.moveToNextBlankLine(e10.cursorConfig, e10, t11.viewState, r10))) : t10.map((t11) => p$.fromModelState(E$.moveToNextBlankLine(e10.cursorConfig, e10.model, t11.modelState, r10)));
        case 6:
          return this._moveToViewMinColumn(e10, t10, r10);
        case 7:
          return this._moveToViewFirstNonWhitespaceColumn(e10, t10, r10);
        case 8:
          return this._moveToViewCenterColumn(e10, t10, r10);
        case 9:
          return this._moveToViewMaxColumn(e10, t10, r10);
        case 10:
          return this._moveToViewLastNonWhitespaceColumn(e10, t10, r10);
        default:
          return null;
      }
    }
    static viewportMove(e10, t10, n10, r10, i10) {
      let a10 = e10.getCompletelyVisibleViewRange(), o10 = e10.coordinatesConverter.convertViewRangeToModelRange(a10);
      switch (n10) {
        case 11: {
          let n11 = this._firstLineNumberInRange(e10.model, o10, i10), a11 = e10.model.getLineFirstNonWhitespaceColumn(n11);
          return [
            this._moveToModelPosition(e10, t10[0], r10, n11, a11)
          ];
        }
        case 13: {
          let n11 = this._lastLineNumberInRange(e10.model, o10, i10), a11 = e10.model.getLineFirstNonWhitespaceColumn(n11);
          return [
            this._moveToModelPosition(e10, t10[0], r10, n11, a11)
          ];
        }
        case 12: {
          let n11 = Math.round((o10.startLineNumber + o10.endLineNumber) / 2), i11 = e10.model.getLineFirstNonWhitespaceColumn(n11);
          return [
            this._moveToModelPosition(e10, t10[0], r10, n11, i11)
          ];
        }
        case 14: {
          let n11 = [];
          for (let i11 = 0, o11 = t10.length; i11 < o11; i11++) {
            let o12 = t10[i11];
            n11[i11] = this.findPositionInViewportIfOutside(e10, o12, a10, r10);
          }
          return n11;
        }
        default:
          return null;
      }
    }
    static findPositionInViewportIfOutside(e10, t10, n10, r10) {
      let i10 = t10.viewState.position.lineNumber;
      if (n10.startLineNumber <= i10 && i10 <= n10.endLineNumber - 1) return new p$(t10.modelState, t10.viewState);
      {
        let a10;
        a10 = i10 > n10.endLineNumber - 1 ? n10.endLineNumber - 1 : i10 < n10.startLineNumber ? n10.startLineNumber : i10;
        let o10 = E$.vertical(e10.cursorConfig, e10, i10, t10.viewState.position.column, t10.viewState.leftoverVisibleColumns, a10, false);
        return p$.fromViewState(t10.viewState.move(r10, o10.lineNumber, o10.column, o10.leftoverVisibleColumns));
      }
    }
    static _firstLineNumberInRange(e10, t10, n10) {
      let r10 = t10.startLineNumber;
      return t10.startColumn !== e10.getLineMinColumn(r10) && r10++, Math.min(t10.endLineNumber, r10 + n10 - 1);
    }
    static _lastLineNumberInRange(e10, t10, n10) {
      let r10 = t10.startLineNumber;
      return t10.startColumn !== e10.getLineMinColumn(r10) && r10++, Math.max(r10, t10.endLineNumber - n10 + 1);
    }
    static _moveLeft(e10, t10, n10, r10) {
      return t10.map((t11) => p$.fromViewState(E$.moveLeft(e10.cursorConfig, e10, t11.viewState, n10, r10)));
    }
    static _moveHalfLineLeft(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = Math.round(e10.getLineLength(o10) / 2);
        r10[i10] = p$.fromViewState(E$.moveLeft(e10.cursorConfig, e10, a11.viewState, n10, s10));
      }
      return r10;
    }
    static _moveRight(e10, t10, n10, r10) {
      return t10.map((t11) => p$.fromViewState(E$.moveRight(e10.cursorConfig, e10, t11.viewState, n10, r10)));
    }
    static _moveHalfLineRight(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = Math.round(e10.getLineLength(o10) / 2);
        r10[i10] = p$.fromViewState(E$.moveRight(e10.cursorConfig, e10, a11.viewState, n10, s10));
      }
      return r10;
    }
    static _moveDownByViewLines(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        i10[a10] = p$.fromViewState(E$.moveDown(e10.cursorConfig, e10, o11.viewState, n10, r10));
      }
      return i10;
    }
    static _moveDownByModelLines(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        i10[a10] = p$.fromModelState(E$.moveDown(e10.cursorConfig, e10.model, o11.modelState, n10, r10));
      }
      return i10;
    }
    static _moveUpByViewLines(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        i10[a10] = p$.fromViewState(E$.moveUp(e10.cursorConfig, e10, o11.viewState, n10, r10));
      }
      return i10;
    }
    static _moveUpByModelLines(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = t10.length; a10 < o10; a10++) {
        let o11 = t10[a10];
        i10[a10] = p$.fromModelState(E$.moveUp(e10.cursorConfig, e10.model, o11.modelState, n10, r10));
      }
      return i10;
    }
    static _moveToViewPosition(e10, t10, n10, r10, i10) {
      return p$.fromViewState(t10.viewState.move(n10, r10, i10, 0));
    }
    static _moveToModelPosition(e10, t10, n10, r10, i10) {
      return p$.fromModelState(t10.modelState.move(n10, r10, i10, 0));
    }
    static _moveToViewMinColumn(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = e10.getLineMinColumn(o10);
        r10[i10] = this._moveToViewPosition(e10, a11, n10, o10, s10);
      }
      return r10;
    }
    static _moveToViewFirstNonWhitespaceColumn(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = e10.getLineFirstNonWhitespaceColumn(o10);
        r10[i10] = this._moveToViewPosition(e10, a11, n10, o10, s10);
      }
      return r10;
    }
    static _moveToViewCenterColumn(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = Math.round((e10.getLineMaxColumn(o10) + e10.getLineMinColumn(o10)) / 2);
        r10[i10] = this._moveToViewPosition(e10, a11, n10, o10, s10);
      }
      return r10;
    }
    static _moveToViewMaxColumn(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = e10.getLineMaxColumn(o10);
        r10[i10] = this._moveToViewPosition(e10, a11, n10, o10, s10);
      }
      return r10;
    }
    static _moveToViewLastNonWhitespaceColumn(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = a11.viewState.position.lineNumber, s10 = e10.getLineLastNonWhitespaceColumn(o10);
        r10[i10] = this._moveToViewPosition(e10, a11, n10, o10, s10);
      }
      return r10;
    }
  };
  (function(e10) {
    let t10 = function(e11) {
      if (!ve(e11)) return false;
      let t11 = e11;
      return !(!_e(t11.to) || !Ce(t11.select) && !Se(t11.select) || !Ce(t11.by) && !_e(t11.by) || !Ce(t11.value) && !be(t11.value));
    };
    e10.metadata = {
      description: `Move cursor to a logical position in the view`,
      args: [
        {
          name: `Cursor move argument object`,
          description: `Property-value pairs that can be passed through this argument:
					* 'to': A mandatory logical position value providing where to move the cursor.
						\`\`\`
						'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',
						'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'
						'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'
						'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'
						\`\`\`
					* 'by': Unit to move. Default is computed based on 'to' value.
						\`\`\`
						'line', 'wrappedLine', 'character', 'halfLine'
						\`\`\`
					* 'value': Number of units to move. Default is '1'.
					* 'select': If 'true' makes the selection. Default is 'false'.
				`,
          constraint: t10,
          schema: {
            type: `object`,
            required: [
              `to`
            ],
            properties: {
              to: {
                type: `string`,
                enum: [
                  `left`,
                  `right`,
                  `up`,
                  `down`,
                  `prevBlankLine`,
                  `nextBlankLine`,
                  `wrappedLineStart`,
                  `wrappedLineEnd`,
                  `wrappedLineColumnCenter`,
                  `wrappedLineFirstNonWhitespaceCharacter`,
                  `wrappedLineLastNonWhitespaceCharacter`,
                  `viewPortTop`,
                  `viewPortCenter`,
                  `viewPortBottom`,
                  `viewPortIfOutside`
                ]
              },
              by: {
                type: `string`,
                enum: [
                  `line`,
                  `wrappedLine`,
                  `character`,
                  `halfLine`
                ]
              },
              value: {
                type: `number`,
                default: 1
              },
              select: {
                type: `boolean`,
                default: false
              }
            }
          }
        }
      ]
    }, e10.RawDirection = {
      Left: `left`,
      Right: `right`,
      Up: `up`,
      Down: `down`,
      PrevBlankLine: `prevBlankLine`,
      NextBlankLine: `nextBlankLine`,
      WrappedLineStart: `wrappedLineStart`,
      WrappedLineFirstNonWhitespaceCharacter: `wrappedLineFirstNonWhitespaceCharacter`,
      WrappedLineColumnCenter: `wrappedLineColumnCenter`,
      WrappedLineEnd: `wrappedLineEnd`,
      WrappedLineLastNonWhitespaceCharacter: `wrappedLineLastNonWhitespaceCharacter`,
      ViewPortTop: `viewPortTop`,
      ViewPortCenter: `viewPortCenter`,
      ViewPortBottom: `viewPortBottom`,
      ViewPortIfOutside: `viewPortIfOutside`
    }, e10.RawUnit = {
      Line: `line`,
      WrappedLine: `wrappedLine`,
      Character: `character`,
      HalfLine: `halfLine`
    };
    function n10(t11) {
      if (!t11.to) return null;
      let n11;
      switch (t11.to) {
        case e10.RawDirection.Left:
          n11 = 0;
          break;
        case e10.RawDirection.Right:
          n11 = 1;
          break;
        case e10.RawDirection.Up:
          n11 = 2;
          break;
        case e10.RawDirection.Down:
          n11 = 3;
          break;
        case e10.RawDirection.PrevBlankLine:
          n11 = 4;
          break;
        case e10.RawDirection.NextBlankLine:
          n11 = 5;
          break;
        case e10.RawDirection.WrappedLineStart:
          n11 = 6;
          break;
        case e10.RawDirection.WrappedLineFirstNonWhitespaceCharacter:
          n11 = 7;
          break;
        case e10.RawDirection.WrappedLineColumnCenter:
          n11 = 8;
          break;
        case e10.RawDirection.WrappedLineEnd:
          n11 = 9;
          break;
        case e10.RawDirection.WrappedLineLastNonWhitespaceCharacter:
          n11 = 10;
          break;
        case e10.RawDirection.ViewPortTop:
          n11 = 11;
          break;
        case e10.RawDirection.ViewPortBottom:
          n11 = 13;
          break;
        case e10.RawDirection.ViewPortCenter:
          n11 = 12;
          break;
        case e10.RawDirection.ViewPortIfOutside:
          n11 = 14;
          break;
        default:
          return null;
      }
      let r10 = 0;
      switch (t11.by) {
        case e10.RawUnit.Line:
          r10 = 1;
          break;
        case e10.RawUnit.WrappedLine:
          r10 = 2;
          break;
        case e10.RawUnit.Character:
          r10 = 3;
          break;
        case e10.RawUnit.HalfLine:
          r10 = 4;
          break;
      }
      return {
        direction: n11,
        unit: r10,
        select: !!t11.select,
        value: t11.value || 1
      };
    }
    e10.parse = n10;
  })(M$ || (M$ = {}));
  let P$, F$;
  N$ = class {
    constructor(e10, t10, n10) {
      this._indentRulesSupport = t10, this._indentationLineProcessor = new F$(e10, n10);
    }
    shouldIncrease(e10, t10) {
      let n10 = this._indentationLineProcessor.getProcessedLine(e10, t10);
      return this._indentRulesSupport.shouldIncrease(n10);
    }
    shouldDecrease(e10, t10) {
      let n10 = this._indentationLineProcessor.getProcessedLine(e10, t10);
      return this._indentRulesSupport.shouldDecrease(n10);
    }
    shouldIgnore(e10, t10) {
      let n10 = this._indentationLineProcessor.getProcessedLine(e10, t10);
      return this._indentRulesSupport.shouldIgnore(n10);
    }
    shouldIndentNextLine(e10, t10) {
      let n10 = this._indentationLineProcessor.getProcessedLine(e10, t10);
      return this._indentRulesSupport.shouldIndentNextLine(n10);
    }
  };
  P$ = class {
    constructor(e10, t10) {
      this.model = e10, this.indentationLineProcessor = new F$(e10, t10);
    }
    getProcessedTokenContextAroundRange(e10) {
      let t10 = this._getProcessedTokensBeforeRange(e10), n10 = this._getProcessedTokensAfterRange(e10), r10 = this._getProcessedPreviousLineTokens(e10);
      return {
        beforeRangeProcessedTokens: t10,
        afterRangeProcessedTokens: n10,
        previousLineProcessedTokens: r10
      };
    }
    _getProcessedTokensBeforeRange(e10) {
      this.model.tokenization.forceTokenization(e10.startLineNumber);
      let t10 = this.model.tokenization.getLineTokens(e10.startLineNumber), n10 = Th(t10, e10.startColumn - 1), r10;
      if (I$(this.model, e10.getStartPosition())) {
        let i11 = e10.startColumn - 1 - n10.firstCharOffset, a10 = n10.firstCharOffset, o10 = a10 + i11;
        r10 = t10.sliceAndInflate(a10, o10, 0);
      } else {
        let n11 = e10.startColumn - 1;
        r10 = t10.sliceAndInflate(0, n11, 0);
      }
      let i10 = this.indentationLineProcessor.getProcessedTokens(r10);
      return i10;
    }
    _getProcessedTokensAfterRange(e10) {
      let t10 = e10.isEmpty() ? e10.getStartPosition() : e10.getEndPosition();
      this.model.tokenization.forceTokenization(t10.lineNumber);
      let n10 = this.model.tokenization.getLineTokens(t10.lineNumber), r10 = Th(n10, t10.column - 1), i10 = t10.column - 1 - r10.firstCharOffset, a10 = r10.firstCharOffset + i10, o10 = r10.firstCharOffset + r10.getLineLength(), s10 = n10.sliceAndInflate(a10, o10, 0), c10 = this.indentationLineProcessor.getProcessedTokens(s10);
      return c10;
    }
    _getProcessedPreviousLineTokens(e10) {
      let t10 = (e11) => {
        this.model.tokenization.forceTokenization(e11);
        let t11 = this.model.tokenization.getLineTokens(e11), n11 = this.model.getLineMaxColumn(e11) - 1, r11 = Th(t11, n11);
        return r11;
      };
      this.model.tokenization.forceTokenization(e10.startLineNumber);
      let n10 = this.model.tokenization.getLineTokens(e10.startLineNumber), r10 = Th(n10, e10.startColumn - 1), i10 = CA.createEmpty(``, r10.languageIdCodec), a10 = e10.startLineNumber - 1, o10 = a10 === 0;
      if (o10) return i10;
      let s10 = r10.firstCharOffset === 0;
      if (!s10) return i10;
      let c10 = t10(a10), l10 = r10.languageId === c10.languageId;
      if (!l10) return i10;
      let u10 = c10.toIViewLineTokens(), d10 = this.indentationLineProcessor.getProcessedTokens(u10);
      return d10;
    }
  };
  F$ = class {
    constructor(e10, t10) {
      this.model = e10, this.languageConfigurationService = t10;
    }
    getProcessedLine(e10, t10) {
      var _a3, _b3;
      let n10 = (e11, t11) => {
        let n11 = Ds(e11), r11 = t11 + e11.substring(n11.length);
        return r11;
      };
      (_b3 = (_a3 = this.model.tokenization).forceTokenization) == null ? void 0 : _b3.call(_a3, e10);
      let r10 = this.model.tokenization.getLineTokens(e10), i10 = this.getProcessedTokens(r10).getLineContent();
      return t10 !== void 0 && (i10 = n10(i10, t10)), i10;
    }
    getProcessedTokens(e10) {
      let t10 = (e11) => e11 === 2 || e11 === 3 || e11 === 1, n10 = e10.getLanguageId(0), r10 = this.languageConfigurationService.getLanguageConfiguration(n10).bracketsNew, i10 = r10.getBracketRegExp({
        global: true
      }), a10 = [];
      e10.forEach((n11) => {
        let r11 = e10.getStandardTokenType(n11), o11 = e10.getTokenText(n11);
        t10(r11) && (o11 = o11.replace(i10, ``));
        let s10 = e10.getMetadata(n11);
        a10.push({
          text: o11,
          metadata: s10
        });
      });
      let o10 = CA.createFromTextAndMetadata(a10, e10.languageIdCodec);
      return o10;
    }
  };
  function I$(e10, t10) {
    e10.tokenization.forceTokenization(t10.lineNumber);
    let n10 = e10.tokenization.getLineTokens(t10.lineNumber), r10 = Th(n10, t10.column - 1), i10 = r10.firstCharOffset === 0, a10 = n10.getLanguageId(0) === r10.languageId, o10 = !i10 && !a10;
    return o10;
  }
  L$ = function(e10, t10, n10, r10) {
    t10.tokenization.forceTokenization(n10.startLineNumber);
    let i10 = t10.getLanguageIdAtPosition(n10.startLineNumber, n10.startColumn), a10 = r10.getLanguageConfiguration(i10);
    if (!a10) return null;
    let o10 = new P$(t10, r10), s10 = o10.getProcessedTokenContextAroundRange(n10), c10 = s10.previousLineProcessedTokens.getLineContent(), l10 = s10.beforeRangeProcessedTokens.getLineContent(), u10 = s10.afterRangeProcessedTokens.getLineContent(), d10 = a10.onEnter(e10, c10, l10, u10);
    if (!d10) return null;
    let f10 = d10.indentAction, p10 = d10.appendText, m10 = d10.removeText || 0;
    p10 ? f10 === bh.Indent && (p10 = `	` + p10) : p10 = f10 === bh.Indent || f10 === bh.IndentOutdent ? `	` : ``;
    let h10 = u_(t10, n10.startLineNumber, n10.startColumn);
    return m10 && (h10 = h10.substring(0, h10.length - m10)), {
      indentAction: f10,
      appendText: p10,
      removeText: m10,
      indentation: h10
    };
  };
  var R$ = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, z$ = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, B$;
  const V$ = /* @__PURE__ */ Object.create(null);
  function H$(e10, t10) {
    if (t10 <= 0) return ``;
    V$[e10] || (V$[e10] = [
      ``,
      e10
    ]);
    let n10 = V$[e10];
    for (let r10 = n10.length; r10 <= t10; r10++) n10[r10] = n10[r10 - 1] + e10;
    return n10[t10];
  }
  U$ = B$ = class {
    static unshiftIndent(e10, t10, n10, r10, i10) {
      let a10 = gR.visibleColumnFromColumn(e10, t10, n10);
      if (i10) {
        let e11 = H$(` `, r10), t11 = gR.prevIndentTabStop(a10, r10), n11 = t11 / r10;
        return H$(e11, n11);
      } else {
        let e11 = `	`, t11 = gR.prevRenderTabStop(a10, n10), r11 = t11 / n10;
        return H$(e11, r11);
      }
    }
    static shiftIndent(e10, t10, n10, r10, i10) {
      let a10 = gR.visibleColumnFromColumn(e10, t10, n10);
      if (i10) {
        let e11 = H$(` `, r10), t11 = gR.nextIndentTabStop(a10, r10), n11 = t11 / r10;
        return H$(e11, n11);
      } else {
        let e11 = `	`, t11 = gR.nextRenderTabStop(a10, n10), r11 = t11 / n10;
        return H$(e11, r11);
      }
    }
    constructor(e10, t10, n10) {
      this._languageConfigurationService = n10, this._opts = t10, this._selection = e10, this._selectionId = null, this._useLastEditRangeForCursorEndPosition = false, this._selectionStartColumnStaysPut = false;
    }
    _addEditOperation(e10, t10, n10) {
      this._useLastEditRangeForCursorEndPosition ? e10.addTrackedEditOperation(t10, n10) : e10.addEditOperation(t10, n10);
    }
    getEditOperations(e10, t10) {
      let n10 = this._selection.startLineNumber, r10 = this._selection.endLineNumber;
      this._selection.endColumn === 1 && n10 !== r10 && --r10;
      let { tabSize: i10, indentSize: a10, insertSpaces: o10 } = this._opts, s10 = n10 === r10;
      if (this._opts.useTabStops) {
        this._selection.isEmpty() && /^\s*$/.test(e10.getLineContent(n10)) && (this._useLastEditRangeForCursorEndPosition = true);
        let c10 = 0, l10 = 0;
        for (let u10 = n10; u10 <= r10; u10++, c10 = l10) {
          l10 = 0;
          let r11 = e10.getLineContent(u10), d10 = Es(r11);
          if (this._opts.isUnshift && (r11.length === 0 || d10 === 0) || !s10 && !this._opts.isUnshift && r11.length === 0) continue;
          if (d10 === -1 && (d10 = r11.length), u10 > 1) {
            let t11 = gR.visibleColumnFromColumn(r11, d10 + 1, i10);
            if (t11 % a10 !== 0 && e10.tokenization.isCheapToTokenize(u10 - 1)) {
              let t12 = L$(this._opts.autoIndent, e10, new F(u10 - 1, e10.getLineMaxColumn(u10 - 1), u10 - 1, e10.getLineMaxColumn(u10 - 1)), this._languageConfigurationService);
              if (t12) {
                if (l10 = c10, t12.appendText) for (let e11 = 0, n11 = t12.appendText.length; e11 < n11 && l10 < a10 && t12.appendText.charCodeAt(e11) === 32; e11++) l10++;
                t12.removeText && (l10 = Math.max(0, l10 - t12.removeText));
                for (let e11 = 0; e11 < l10 && !(d10 === 0 || r11.charCodeAt(d10 - 1) !== 32); e11++) d10--;
              }
            }
          }
          if (this._opts.isUnshift && d10 === 0) continue;
          let f10;
          f10 = this._opts.isUnshift ? B$.unshiftIndent(r11, d10 + 1, i10, a10, o10) : B$.shiftIndent(r11, d10 + 1, i10, a10, o10), this._addEditOperation(t10, new F(u10, 1, u10, d10 + 1), f10), u10 === n10 && !this._selection.isEmpty() && (this._selectionStartColumnStaysPut = this._selection.startColumn <= d10 + 1);
        }
      } else {
        !this._opts.isUnshift && this._selection.isEmpty() && e10.getLineLength(n10) === 0 && (this._useLastEditRangeForCursorEndPosition = true);
        let i11 = o10 ? H$(` `, a10) : `	`;
        for (let o11 = n10; o11 <= r10; o11++) {
          let r11 = e10.getLineContent(o11), c10 = Es(r11);
          if (!(this._opts.isUnshift && (r11.length === 0 || c10 === 0)) && !(!s10 && !this._opts.isUnshift && r11.length === 0) && (c10 === -1 && (c10 = r11.length), !(this._opts.isUnshift && c10 === 0))) if (this._opts.isUnshift) {
            c10 = Math.min(c10, a10);
            for (let e11 = 0; e11 < c10; e11++) {
              let t11 = r11.charCodeAt(e11);
              if (t11 === 9) {
                c10 = e11 + 1;
                break;
              }
            }
            this._addEditOperation(t10, new F(o11, 1, o11, c10 + 1), ``);
          } else this._addEditOperation(t10, new F(o11, 1, o11, 1), i11), o11 === n10 && !this._selection.isEmpty() && (this._selectionStartColumnStaysPut = this._selection.startColumn === 1);
        }
      }
      this._selectionId = t10.trackSelection(this._selection);
    }
    computeCursorState(e10, t10) {
      if (this._useLastEditRangeForCursorEndPosition) {
        let e11 = t10.getInverseEditOperations()[0];
        return new Ma(e11.range.endLineNumber, e11.range.endColumn, e11.range.endLineNumber, e11.range.endColumn);
      }
      let n10 = t10.getTrackedSelection(this._selectionId);
      if (this._selectionStartColumnStaysPut) {
        let e11 = this._selection.startColumn, t11 = n10.startColumn;
        return t11 <= e11 ? n10 : n10.getDirection() === 0 ? new Ma(n10.startLineNumber, e11, n10.endLineNumber, n10.endColumn) : new Ma(n10.endLineNumber, n10.endColumn, n10.startLineNumber, e11);
      }
      return n10;
    }
  };
  U$ = B$ = R$([
    z$(2, i_)
  ], U$);
  var W$ = class {
    constructor(e10, t10, n10) {
      this._range = e10, this._charBeforeSelection = t10, this._charAfterSelection = n10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(new F(this._range.startLineNumber, this._range.startColumn, this._range.startLineNumber, this._range.startColumn), this._charBeforeSelection), t10.addTrackedEditOperation(new F(this._range.endLineNumber, this._range.endColumn, this._range.endLineNumber, this._range.endColumn), this._charAfterSelection);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range, i10 = n10[1].range;
      return new Ma(r10.endLineNumber, r10.endColumn, i10.endLineNumber, i10.endColumn - this._charAfterSelection.length);
    }
  }, G$ = class {
    constructor(e10, t10, n10) {
      this._position = e10, this._text = t10, this._charAfter = n10;
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(new F(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column), this._text + this._charAfter);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return new Ma(r10.endLineNumber, r10.startColumn, r10.endLineNumber, r10.endColumn - this._charAfter.length);
    }
  };
  function K$(e10, t10, n10) {
    let r10 = e10.tokenization.getLanguageIdAtPosition(t10, 0);
    if (t10 > 1) {
      let i10, a10 = -1;
      for (i10 = t10 - 1; i10 >= 1; i10--) {
        if (e10.tokenization.getLanguageIdAtPosition(i10, 0) !== r10) return a10;
        let t11 = e10.getLineContent(i10);
        if (n10.shouldIgnore(i10) || /^\s+$/.test(t11) || t11 === ``) {
          a10 = i10;
          continue;
        }
        return i10;
      }
    }
    return -1;
  }
  function q$(e10, t10, n10, r10 = true, i10) {
    if (e10 < 4) return null;
    let a10 = i10.getLanguageConfiguration(t10.tokenization.getLanguageId()).indentRulesSupport;
    if (!a10) return null;
    let o10 = new N$(t10, a10, i10);
    if (n10 <= 1) return {
      indentation: ``,
      action: null
    };
    for (let e11 = n10 - 1; e11 > 0 && t10.getLineContent(e11) === ``; e11--) if (e11 === 1) return {
      indentation: ``,
      action: null
    };
    let s10 = K$(t10, n10, o10);
    if (s10 < 0) return null;
    if (s10 < 1) return {
      indentation: ``,
      action: null
    };
    if (o10.shouldIncrease(s10) || o10.shouldIndentNextLine(s10)) {
      let e11 = t10.getLineContent(s10);
      return {
        indentation: Ds(e11),
        action: bh.Indent,
        line: s10
      };
    } else if (o10.shouldDecrease(s10)) {
      let e11 = t10.getLineContent(s10);
      return {
        indentation: Ds(e11),
        action: null,
        line: s10
      };
    } else {
      if (s10 === 1) return {
        indentation: Ds(t10.getLineContent(s10)),
        action: null,
        line: s10
      };
      let e11 = s10 - 1, n11 = a10.getIndentMetadata(t10.getLineContent(e11));
      if (!(n11 & 3) && n11 & 4) {
        let n12 = 0;
        for (let t11 = e11 - 1; t11 > 0; t11--) if (!o10.shouldIndentNextLine(t11)) {
          n12 = t11;
          break;
        }
        return {
          indentation: Ds(t10.getLineContent(n12 + 1)),
          action: null,
          line: n12 + 1
        };
      }
      if (r10) return {
        indentation: Ds(t10.getLineContent(s10)),
        action: null,
        line: s10
      };
      for (let e12 = s10; e12 > 0; e12--) if (o10.shouldIncrease(e12)) return {
        indentation: Ds(t10.getLineContent(e12)),
        action: bh.Indent,
        line: e12
      };
      else if (o10.shouldIndentNextLine(e12)) {
        let n12 = 0;
        for (let t11 = e12 - 1; t11 > 0; t11--) if (!o10.shouldIndentNextLine(e12)) {
          n12 = t11;
          break;
        }
        return {
          indentation: Ds(t10.getLineContent(n12 + 1)),
          action: null,
          line: n12 + 1
        };
      } else if (o10.shouldDecrease(e12)) return {
        indentation: Ds(t10.getLineContent(e12)),
        action: null,
        line: e12
      };
      return {
        indentation: Ds(t10.getLineContent(1)),
        action: null,
        line: 1
      };
    }
  }
  J$ = function(e10, t10, n10, r10, i10, a10) {
    if (e10 < 4) return null;
    let o10 = a10.getLanguageConfiguration(n10);
    if (!o10) return null;
    let s10 = a10.getLanguageConfiguration(n10).indentRulesSupport;
    if (!s10) return null;
    let c10 = new N$(t10, s10, a10), l10 = q$(e10, t10, r10, void 0, a10);
    if (l10) {
      let n11 = l10.line;
      if (n11 !== void 0) {
        let a11 = true;
        for (let e11 = n11; e11 < r10 - 1; e11++) if (!/^\s*$/.test(t10.getLineContent(e11))) {
          a11 = false;
          break;
        }
        if (a11) {
          let a12 = o10.onEnter(e10, ``, t10.getLineContent(n11), ``);
          if (a12) {
            let e11 = Ds(t10.getLineContent(n11));
            return a12.removeText && (e11 = e11.substring(0, e11.length - a12.removeText)), a12.indentAction === bh.Indent || a12.indentAction === bh.IndentOutdent ? e11 = i10.shiftIndent(e11) : a12.indentAction === bh.Outdent && (e11 = i10.unshiftIndent(e11)), c10.shouldDecrease(r10) && (e11 = i10.unshiftIndent(e11)), a12.appendText && (e11 += a12.appendText), Ds(e11);
          }
        }
      }
      return c10.shouldDecrease(r10) ? l10.action === bh.Indent ? l10.indentation : i10.unshiftIndent(l10.indentation) : l10.action === bh.Indent ? i10.shiftIndent(l10.indentation) : l10.indentation;
    }
    return null;
  };
  function Y$(e10, t10, n10, r10, i10) {
    if (e10 < 4) return null;
    let a10 = t10.getLanguageIdAtPosition(n10.startLineNumber, n10.startColumn), o10 = i10.getLanguageConfiguration(a10).indentRulesSupport;
    if (!o10) return null;
    t10.tokenization.forceTokenization(n10.startLineNumber);
    let s10 = new P$(t10, i10), c10 = s10.getProcessedTokenContextAroundRange(n10), l10 = c10.afterRangeProcessedTokens, u10 = c10.beforeRangeProcessedTokens, d10 = Ds(u10.getLineContent()), f10 = Q$(t10, n10.startLineNumber, u10), p10 = I$(t10, n10.getStartPosition()), m10 = t10.getLineContent(n10.startLineNumber), h10 = Ds(m10), g10 = q$(e10, f10, n10.startLineNumber + 1, void 0, i10);
    if (!g10) {
      let e11 = p10 ? h10 : d10;
      return {
        beforeEnter: e11,
        afterEnter: e11
      };
    }
    let _10 = p10 ? h10 : g10.indentation;
    return g10.action === bh.Indent && (_10 = r10.shiftIndent(_10)), o10.shouldDecrease(l10.getLineContent()) && (_10 = r10.unshiftIndent(_10)), {
      beforeEnter: p10 ? h10 : d10,
      afterEnter: _10
    };
  }
  function X$(e10, t10, n10, r10, i10, a10) {
    let o10 = e10.autoIndent;
    if (o10 < 4) return null;
    let s10 = I$(t10, n10.getStartPosition());
    if (s10) return null;
    let c10 = t10.getLanguageIdAtPosition(n10.startLineNumber, n10.startColumn), l10 = a10.getLanguageConfiguration(c10).indentRulesSupport;
    if (!l10) return null;
    let u10 = new P$(t10, a10), d10 = u10.getProcessedTokenContextAroundRange(n10), f10 = d10.beforeRangeProcessedTokens.getLineContent(), p10 = d10.afterRangeProcessedTokens.getLineContent(), m10 = f10 + p10, h10 = f10 + r10 + p10;
    if (!l10.shouldDecrease(m10) && l10.shouldDecrease(h10)) {
      let e11 = q$(o10, t10, n10.startLineNumber, false, a10);
      if (!e11) return null;
      let r11 = e11.indentation;
      return e11.action !== bh.Indent && (r11 = i10.unshiftIndent(r11)), r11;
    }
    let g10 = n10.startLineNumber - 1;
    if (g10 > 0) {
      let s11 = t10.getLineContent(g10);
      if (l10.shouldIndentNextLine(s11) && l10.shouldIncrease(h10)) {
        let s12 = q$(o10, t10, n10.startLineNumber, false, a10), c11 = s12 == null ? void 0 : s12.indentation;
        if (c11 !== void 0) {
          let a11 = t10.getLineContent(n10.startLineNumber), o11 = Ds(a11), s13 = i10.shiftIndent(c11), l11 = s13 === o11, u11 = /^\s*$/.test(m10), d11 = e10.autoClosingPairs.autoClosingPairsOpenByEnd.get(r10), f11 = d11 && d11.length > 0, p11 = f11 && u11;
          if (l11 && p11) return c11;
        }
      }
    }
    return null;
  }
  Z$ = function(e10, t10, n10) {
    let r10 = n10.getLanguageConfiguration(e10.getLanguageId()).indentRulesSupport;
    return !r10 || t10 < 1 || t10 > e10.getLineCount() ? null : r10.getIndentMetadata(e10.getLineContent(t10));
  };
  function Q$(e10, t10, n10) {
    let r10 = {
      tokenization: {
        getLineTokens: (r11) => r11 === t10 ? n10 : e10.tokenization.getLineTokens(r11),
        getLanguageId: () => e10.getLanguageId(),
        getLanguageIdAtPosition: (t11, n11) => e10.getLanguageIdAtPosition(t11, n11)
      },
      getLineContent: (r11) => r11 === t10 ? n10.getLineContent() : e10.getLineContent(r11)
    };
    return r10;
  }
  let $$, e1, t1, n1, r1, i1, a1, s1, c1, l1, u1, d1, f1, p1;
  $$ = class {
    static getEdits(e10, t10, n10, r10, i10) {
      if (!i10 && this._isAutoIndentType(e10, t10, n10)) {
        let i11 = [];
        for (let a11 of n10) {
          let n11 = this._findActualIndentationForSelection(e10, t10, a11, r10);
          if (n11 === null) return;
          i11.push({
            selection: a11,
            indentation: n11
          });
        }
        let a10 = n1.getAutoClosingPairClose(e10, t10, n10, r10, false);
        return this._getIndentationAndAutoClosingPairEdits(e10, t10, i11, r10, a10);
      }
    }
    static _isAutoIndentType(e10, t10, n10) {
      if (e10.autoIndent < 4) return false;
      for (let e11 = 0, r10 = n10.length; e11 < r10; e11++) if (!t10.tokenization.isCheapToTokenize(n10[e11].getEndPosition().lineNumber)) return false;
      return true;
    }
    static _findActualIndentationForSelection(e10, t10, n10, r10) {
      let i10 = X$(e10, t10, n10, r10, {
        shiftIndent: (t11) => b1(e10, t11),
        unshiftIndent: (t11) => x1(e10, t11)
      }, e10.languageConfigurationService);
      if (i10 === null) return null;
      let a10 = u_(t10, n10.startLineNumber, n10.startColumn);
      return i10 === e10.normalizeIndentation(a10) ? null : i10;
    }
    static _getIndentationAndAutoClosingPairEdits(e10, t10, n10, r10, i10) {
      let a10 = n10.map(({ selection: n11, indentation: a11 }) => {
        if (i10 !== null) {
          let o11 = this._getEditFromIndentationAndSelection(e10, t10, a11, n11, r10, false);
          return new p1(o11, n11, r10, i10);
        } else {
          let i11 = this._getEditFromIndentationAndSelection(e10, t10, a11, n11, r10, true);
          return y1(i11.range, i11.text, false);
        }
      }), o10 = {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: false
      };
      return new _$(4, a10, o10);
    }
    static _getEditFromIndentationAndSelection(e10, t10, n10, r10, i10, a10 = true) {
      let o10 = r10.startLineNumber, s10 = t10.getLineFirstNonWhitespaceColumn(o10), c10 = e10.normalizeIndentation(n10);
      if (s10 !== 0) {
        let e11 = t10.getLineContent(o10);
        c10 += e11.substring(s10 - 1, r10.startColumn - 1);
      }
      c10 += a10 ? i10 : ``;
      let l10 = new F(o10, 1, r10.endLineNumber, r10.endColumn);
      return {
        range: l10,
        text: c10
      };
    }
  };
  e1 = class {
    static getEdits(e10, t10, n10, r10, i10, a10) {
      if (v1(t10, n10, r10, i10, a10)) return this._runAutoClosingOvertype(e10, r10, a10);
    }
    static _runAutoClosingOvertype(e10, t10, n10) {
      let r10 = [];
      for (let e11 = 0, i10 = t10.length; e11 < i10; e11++) {
        let i11 = t10[e11], a10 = i11.getPosition(), o10 = new F(a10.lineNumber, a10.column, a10.lineNumber, a10.column + 1);
        r10[e11] = new b$(o10, n10);
      }
      return new _$(4, r10, {
        shouldPushStackElementBefore: h1(e10, 4),
        shouldPushStackElementAfter: false
      });
    }
  };
  t1 = class {
    static getEdits(e10, t10, n10, r10, i10) {
      if (v1(e10, t10, n10, r10, i10)) {
        let e11 = n10.map((e12) => new b$(new F(e12.positionLineNumber, e12.positionColumn, e12.positionLineNumber, e12.positionColumn + 1), ``, false));
        return new _$(4, e11, {
          shouldPushStackElementBefore: true,
          shouldPushStackElementAfter: false
        });
      }
    }
  };
  n1 = class {
    static getEdits(e10, t10, n10, r10, i10, a10) {
      if (!a10) {
        let a11 = this.getAutoClosingPairClose(e10, t10, n10, r10, i10);
        if (a11 !== null) return this._runAutoClosingOpenCharType(n10, r10, i10, a11);
      }
    }
    static _runAutoClosingOpenCharType(e10, t10, n10, r10) {
      let i10 = [];
      for (let a10 = 0, o10 = e10.length; a10 < o10; a10++) {
        let o11 = e10[a10];
        i10[a10] = new f1(o11, t10, !n10, r10);
      }
      return new _$(4, i10, {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: false
      });
    }
    static getAutoClosingPairClose(e10, t10, n10, r10, i10) {
      for (let e11 of n10) if (!e11.isEmpty()) return null;
      let a10 = n10.map((e11) => {
        let t11 = e11.getPosition();
        return i10 ? {
          lineNumber: t11.lineNumber,
          beforeColumn: t11.column - r10.length,
          afterColumn: t11.column
        } : {
          lineNumber: t11.lineNumber,
          beforeColumn: t11.column,
          afterColumn: t11.column
        };
      }), o10 = this._findAutoClosingPairOpen(e10, t10, a10.map((e11) => new P(e11.lineNumber, e11.beforeColumn)), r10);
      if (!o10) return null;
      let s10, c10, l10 = v$(r10);
      if (l10) s10 = e10.autoClosingQuotes, c10 = e10.shouldAutoCloseBefore.quote;
      else {
        let t11 = e10.blockCommentStartToken ? o10.open.includes(e10.blockCommentStartToken) : false;
        t11 ? (s10 = e10.autoClosingComments, c10 = e10.shouldAutoCloseBefore.comment) : (s10 = e10.autoClosingBrackets, c10 = e10.shouldAutoCloseBefore.bracket);
      }
      if (s10 === `never`) return null;
      let u10 = this._findContainedAutoClosingPair(e10, o10), d10 = u10 ? u10.close : ``, f10 = true;
      for (let n11 of a10) {
        let { lineNumber: i11, beforeColumn: a11, afterColumn: l11 } = n11, u11 = t10.getLineContent(i11), p10 = u11.substring(0, a11 - 1), m10 = u11.substring(l11 - 1);
        if (m10.startsWith(d10) || (f10 = false), m10.length > 0) {
          let t11 = m10.charAt(0), n12 = this._isBeforeClosingBrace(e10, m10);
          if (!n12 && !c10(t11)) return null;
        }
        if (o10.open.length === 1 && (r10 === `'` || r10 === `"`) && s10 !== `always`) {
          let t11 = X_(e10.wordSeparators, []);
          if (p10.length > 0) {
            let e11 = p10.charCodeAt(p10.length - 1);
            if (t11.get(e11) === 0) return null;
          }
        }
        if (!t10.tokenization.isCheapToTokenize(i11)) return null;
        t10.tokenization.forceTokenization(i11);
        let h10 = t10.tokenization.getLineTokens(i11), g10 = Th(h10, a11 - 1);
        if (!o10.shouldAutoClose(g10, a11 - g10.firstCharOffset)) return null;
        let _10 = o10.findNeutralCharacter();
        if (_10) {
          let e11 = t10.tokenization.getTokenTypeIfInsertingCharacter(i11, a11, _10);
          if (!o10.isOK(e11)) return null;
        }
      }
      return f10 ? o10.close.substring(0, o10.close.length - d10.length) : o10.close;
    }
    static _findContainedAutoClosingPair(e10, t10) {
      if (t10.open.length <= 1) return null;
      let n10 = t10.close.charAt(t10.close.length - 1), r10 = e10.autoClosingPairs.autoClosingPairsCloseByEnd.get(n10) || [], i10 = null;
      for (let e11 of r10) e11.open !== t10.open && t10.open.includes(e11.open) && t10.close.endsWith(e11.close) && (!i10 || e11.open.length > i10.open.length) && (i10 = e11);
      return i10;
    }
    static _findAutoClosingPairOpen(e10, t10, n10, r10) {
      let i10 = e10.autoClosingPairs.autoClosingPairsOpenByEnd.get(r10);
      if (!i10) return null;
      let a10 = null;
      for (let e11 of i10) if (a10 === null || e11.open.length > a10.open.length) {
        let i11 = true;
        for (let a11 of n10) {
          let n11 = t10.getValueInRange(new F(a11.lineNumber, a11.column - e11.open.length + 1, a11.lineNumber, a11.column));
          if (n11 + r10 !== e11.open) {
            i11 = false;
            break;
          }
        }
        i11 && (a10 = e11);
      }
      return a10;
    }
    static _isBeforeClosingBrace(e10, t10) {
      let n10 = t10.charAt(0), r10 = e10.autoClosingPairs.autoClosingPairsOpenByStart.get(n10) || [], i10 = e10.autoClosingPairs.autoClosingPairsCloseByStart.get(n10) || [], a10 = r10.some((e11) => t10.startsWith(e11.open)), o10 = i10.some((e11) => t10.startsWith(e11.close));
      return !a10 && o10;
    }
  };
  r1 = class {
    static getEdits(e10, t10, n10, r10, i10) {
      if (!i10 && this._isSurroundSelectionType(e10, t10, n10, r10)) return this._runSurroundSelectionType(e10, n10, r10);
    }
    static _runSurroundSelectionType(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10], o10 = e10.surroundingPairs[n10];
        r10[i10] = new W$(a11, n10, o10);
      }
      return new _$(0, r10, {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: true
      });
    }
    static _isSurroundSelectionType(e10, t10, n10, r10) {
      if (!S1(e10, r10) || !e10.surroundingPairs.hasOwnProperty(r10)) return false;
      let i10 = v$(r10);
      for (let e11 of n10) {
        if (e11.isEmpty()) return false;
        let n11 = true;
        for (let r11 = e11.startLineNumber; r11 <= e11.endLineNumber; r11++) {
          let i11 = t10.getLineContent(r11), a10 = r11 === e11.startLineNumber ? e11.startColumn - 1 : 0, o10 = r11 === e11.endLineNumber ? e11.endColumn - 1 : i11.length, s10 = i11.substring(a10, o10);
          if (/[^ \t]/.test(s10)) {
            n11 = false;
            break;
          }
        }
        if (n11) return false;
        if (i10 && e11.startLineNumber === e11.endLineNumber && e11.startColumn + 1 === e11.endColumn) {
          let n12 = t10.getValueInRange(e11);
          if (v$(n12)) return false;
        }
      }
      return true;
    }
  };
  i1 = class {
    static getEdits(e10, t10, n10, r10, i10, a10) {
      if (!a10 && this._isTypeInterceptorElectricChar(t10, n10, r10)) {
        let a11 = this._typeInterceptorElectricChar(e10, t10, n10, r10[0], i10);
        if (a11) return a11;
      }
    }
    static _isTypeInterceptorElectricChar(e10, t10, n10) {
      return !!(n10.length === 1 && t10.tokenization.isCheapToTokenize(n10[0].getEndPosition().lineNumber));
    }
    static _typeInterceptorElectricChar(e10, t10, n10, r10, i10) {
      if (!t10.electricChars.hasOwnProperty(i10) || !r10.isEmpty()) return null;
      let a10 = r10.getPosition();
      n10.tokenization.forceTokenization(a10.lineNumber);
      let o10 = n10.tokenization.getLineTokens(a10.lineNumber), s10;
      try {
        s10 = t10.onElectricCharacter(i10, o10, a10.column);
      } catch (e11) {
        return gr(e11), null;
      }
      if (!s10) return null;
      if (s10.matchOpenBracket) {
        let r11 = (o10.getLineContent() + i10).lastIndexOf(s10.matchOpenBracket) + 1, c10 = n10.bracketPairs.findMatchingBracketUp(s10.matchOpenBracket, {
          lineNumber: a10.lineNumber,
          column: r11
        }, 500);
        if (c10) {
          if (c10.startLineNumber === a10.lineNumber) return null;
          let r12 = n10.getLineContent(c10.startLineNumber), o11 = Ds(r12), s11 = t10.normalizeIndentation(o11), l10 = n10.getLineContent(a10.lineNumber), u10 = n10.getLineFirstNonWhitespaceColumn(a10.lineNumber) || a10.column, d10 = l10.substring(u10 - 1, a10.column - 1), f10 = s11 + d10 + i10, p10 = new F(a10.lineNumber, 1, a10.lineNumber, a10.column), m10 = new b$(p10, f10);
          return new _$(m1(f10, e10), [
            m10
          ], {
            shouldPushStackElementBefore: false,
            shouldPushStackElementAfter: true
          });
        }
      }
      return null;
    }
  };
  a1 = class {
    static getEdits(e10, t10, n10) {
      let r10 = [];
      for (let e11 = 0, i11 = t10.length; e11 < i11; e11++) r10[e11] = new b$(t10[e11], n10);
      let i10 = m1(n10, e10);
      return new _$(i10, r10, {
        shouldPushStackElementBefore: h1(e10, i10),
        shouldPushStackElementAfter: false
      });
    }
  };
  o1 = class {
    static getEdits(e10, t10, n10, r10, i10) {
      if (!i10 && r10 === `
`) {
        let r11 = [];
        for (let i11 = 0, a10 = n10.length; i11 < a10; i11++) r11[i11] = this._enter(e10, t10, false, n10[i11]);
        return new _$(4, r11, {
          shouldPushStackElementBefore: true,
          shouldPushStackElementAfter: false
        });
      }
    }
    static _enter(e10, t10, n10, r10) {
      if (e10.autoIndent === 0) return y1(r10, `
`, n10);
      if (!t10.tokenization.isCheapToTokenize(r10.getStartPosition().lineNumber) || e10.autoIndent === 1) {
        let i11 = t10.getLineContent(r10.startLineNumber), a11 = Ds(i11).substring(0, r10.startColumn - 1);
        return y1(r10, `
` + e10.normalizeIndentation(a11), n10);
      }
      let i10 = L$(e10.autoIndent, t10, r10, e10.languageConfigurationService);
      if (i10) {
        if (i10.indentAction === bh.None || i10.indentAction === bh.Indent) return y1(r10, `
` + e10.normalizeIndentation(i10.indentation + i10.appendText), n10);
        if (i10.indentAction === bh.IndentOutdent) {
          let t11 = e10.normalizeIndentation(i10.indentation), a11 = e10.normalizeIndentation(i10.indentation + i10.appendText), o11 = `
` + a11 + `
` + t11;
          return n10 ? new S$(r10, o11, true) : new C$(r10, o11, -1, a11.length - t11.length, true);
        } else if (i10.indentAction === bh.Outdent) {
          let t11 = x1(e10, i10.indentation);
          return y1(r10, `
` + e10.normalizeIndentation(t11 + i10.appendText), n10);
        }
      }
      let a10 = t10.getLineContent(r10.startLineNumber), o10 = Ds(a10).substring(0, r10.startColumn - 1);
      if (e10.autoIndent >= 4) {
        let i11 = Y$(e10.autoIndent, t10, r10, {
          unshiftIndent: (t11) => x1(e10, t11),
          shiftIndent: (t11) => b1(e10, t11),
          normalizeIndentation: (t11) => e10.normalizeIndentation(t11)
        }, e10.languageConfigurationService);
        if (i11) {
          let a11 = e10.visibleColumnFromColumn(t10, r10.getEndPosition()), o11 = r10.endColumn, s10 = t10.getLineContent(r10.endLineNumber), c10 = Es(s10);
          if (r10 = c10 >= 0 ? r10.setEndPosition(r10.endLineNumber, Math.max(r10.endColumn, c10 + 1)) : r10.setEndPosition(r10.endLineNumber, t10.getLineMaxColumn(r10.endLineNumber)), n10) return new S$(r10, `
` + e10.normalizeIndentation(i11.afterEnter), true);
          {
            let t11 = 0;
            return o11 <= c10 + 1 && (e10.insertSpaces || (a11 = Math.ceil(a11 / e10.indentSize)), t11 = Math.min(a11 + 1 - e10.normalizeIndentation(i11.afterEnter).length - 1, 0)), new C$(r10, `
` + e10.normalizeIndentation(i11.afterEnter), 0, t11, true);
          }
        }
      }
      return y1(r10, `
` + e10.normalizeIndentation(o10), n10);
    }
    static lineInsertBefore(e10, t10, n10) {
      if (t10 === null || n10 === null) return [];
      let r10 = [];
      for (let i10 = 0, a10 = n10.length; i10 < a10; i10++) {
        let a11 = n10[i10].positionLineNumber;
        if (a11 === 1) r10[i10] = new S$(new F(1, 1, 1, 1), `
`);
        else {
          a11--;
          let n11 = t10.getLineMaxColumn(a11);
          r10[i10] = this._enter(e10, t10, false, new F(a11, n11, a11, n11));
        }
      }
      return r10;
    }
    static lineInsertAfter(e10, t10, n10) {
      if (t10 === null || n10 === null) return [];
      let r10 = [];
      for (let i10 = 0, a10 = n10.length; i10 < a10; i10++) {
        let a11 = n10[i10].positionLineNumber, o10 = t10.getLineMaxColumn(a11);
        r10[i10] = this._enter(e10, t10, false, new F(a11, o10, a11, o10));
      }
      return r10;
    }
    static lineBreakInsert(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = n10.length; i10 < a10; i10++) r10[i10] = this._enter(e10, t10, true, n10[i10]);
      return r10;
    }
  };
  s1 = class {
    static getEdits(e10, t10, n10, r10, i10, a10) {
      let o10 = this._distributePasteToCursors(e10, n10, r10, i10, a10);
      return o10 ? (n10 = n10.sort(F.compareRangesUsingStarts), this._distributedPaste(e10, t10, n10, o10)) : this._simplePaste(e10, t10, n10, r10, i10);
    }
    static _distributePasteToCursors(e10, t10, n10, r10, i10) {
      if (r10 || t10.length === 1) return null;
      if (i10 && i10.length === t10.length) return i10;
      if (e10.multiCursorPaste === `spread`) {
        n10.charCodeAt(n10.length - 1) === 10 && (n10 = n10.substring(0, n10.length - 1)), n10.charCodeAt(n10.length - 1) === 13 && (n10 = n10.substring(0, n10.length - 1));
        let e11 = ws(n10);
        if (e11.length === t10.length) return e11;
      }
      return null;
    }
    static _distributedPaste(e10, t10, n10, r10) {
      let i10 = [];
      for (let e11 = 0, t11 = n10.length; e11 < t11; e11++) i10[e11] = new b$(n10[e11], r10[e11]);
      return new _$(0, i10, {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: true
      });
    }
    static _simplePaste(e10, t10, n10, r10, i10) {
      let a10 = [];
      for (let e11 = 0, t11 = n10.length; e11 < t11; e11++) {
        let t12 = n10[e11], o10 = t12.getPosition();
        if (i10 && !t12.isEmpty() && (i10 = false), i10 && r10.indexOf(`
`) !== r10.length - 1 && (i10 = false), i10) {
          let n11 = new F(o10.lineNumber, 1, o10.lineNumber, 1);
          a10[e11] = new w$(n11, r10, t12, true);
        } else a10[e11] = new b$(t12, r10);
      }
      return new _$(0, a10, {
        shouldPushStackElementBefore: true,
        shouldPushStackElementAfter: true
      });
    }
  };
  c1 = class {
    static getEdits(e10, t10, n10, r10, i10, a10, o10, s10) {
      let c10 = r10.map((e11) => this._compositionType(n10, e11, i10, a10, o10, s10));
      return new _$(4, c10, {
        shouldPushStackElementBefore: h1(e10, 4),
        shouldPushStackElementAfter: false
      });
    }
    static _compositionType(e10, t10, n10, r10, i10, a10) {
      if (!t10.isEmpty()) return null;
      let o10 = t10.getPosition(), s10 = Math.max(1, o10.column - r10), c10 = Math.min(e10.getLineMaxColumn(o10.lineNumber), o10.column + i10), l10 = new F(o10.lineNumber, s10, o10.lineNumber, c10), u10 = e10.getValueInRange(l10);
      return u10 === n10 && a10 === 0 ? null : new C$(l10, n10, 0, a10);
    }
  };
  l1 = class {
    static getEdits(e10, t10, n10) {
      let r10 = [];
      for (let e11 = 0, i11 = t10.length; e11 < i11; e11++) r10[e11] = new b$(t10[e11], n10);
      let i10 = m1(n10, e10);
      return new _$(i10, r10, {
        shouldPushStackElementBefore: h1(e10, i10),
        shouldPushStackElementAfter: false
      });
    }
  };
  u1 = class {
    static getCommands(e10, t10, n10) {
      let r10 = [];
      for (let i10 = 0, a10 = n10.length; i10 < a10; i10++) {
        let a11 = n10[i10];
        if (a11.isEmpty()) {
          let n11 = t10.getLineContent(a11.startLineNumber);
          if (/^\s*$/.test(n11) && t10.tokenization.isCheapToTokenize(a11.startLineNumber)) {
            let o10 = this._goodIndentForLine(e10, t10, a11.startLineNumber);
            o10 || (o10 = `	`);
            let s10 = e10.normalizeIndentation(o10);
            if (!n11.startsWith(s10)) {
              r10[i10] = new b$(new F(a11.startLineNumber, 1, a11.startLineNumber, n11.length + 1), s10, true);
              continue;
            }
          }
          r10[i10] = this._replaceJumpToNextIndent(e10, t10, a11, true);
        } else {
          if (a11.startLineNumber === a11.endLineNumber) {
            let n11 = t10.getLineMaxColumn(a11.startLineNumber);
            if (a11.startColumn !== 1 || a11.endColumn !== n11) {
              r10[i10] = this._replaceJumpToNextIndent(e10, t10, a11, false);
              continue;
            }
          }
          r10[i10] = new U$(a11, {
            isUnshift: false,
            tabSize: e10.tabSize,
            indentSize: e10.indentSize,
            insertSpaces: e10.insertSpaces,
            useTabStops: e10.useTabStops,
            autoIndent: e10.autoIndent
          }, e10.languageConfigurationService);
        }
      }
      return r10;
    }
    static _goodIndentForLine(e10, t10, n10) {
      let r10 = null, i10 = ``, a10 = q$(e10.autoIndent, t10, n10, false, e10.languageConfigurationService);
      if (a10) r10 = a10.action, i10 = a10.indentation;
      else if (n10 > 1) {
        let r11;
        for (r11 = n10 - 1; r11 >= 1; r11--) {
          let e11 = t10.getLineContent(r11), n11 = Os(e11);
          if (n11 >= 0) break;
        }
        if (r11 < 1) return null;
        let a11 = t10.getLineMaxColumn(r11), o10 = L$(e10.autoIndent, t10, new F(r11, a11, r11, a11), e10.languageConfigurationService);
        o10 && (i10 = o10.indentation + o10.appendText);
      }
      return r10 && (r10 === bh.Indent && (i10 = b1(e10, i10)), r10 === bh.Outdent && (i10 = x1(e10, i10)), i10 = e10.normalizeIndentation(i10)), i10 || null;
    }
    static _replaceJumpToNextIndent(e10, t10, n10, r10) {
      let i10 = ``, a10 = n10.getStartPosition();
      if (e10.insertSpaces) {
        let n11 = e10.visibleColumnFromColumn(t10, a10), r11 = e10.indentSize, o10 = r11 - n11 % r11;
        for (let e11 = 0; e11 < o10; e11++) i10 += ` `;
      } else i10 = `	`;
      return new b$(n10, i10, r10);
    }
  };
  d1 = class extends C$ {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(e10, t10, n10, r10), this._openCharacter = i10, this._closeCharacter = a10, this.closeCharacterRange = null, this.enclosingRange = null;
    }
    _computeCursorStateWithRange(e10, t10, n10) {
      return this.closeCharacterRange = new F(t10.startLineNumber, t10.endColumn - this._closeCharacter.length, t10.endLineNumber, t10.endColumn), this.enclosingRange = new F(t10.startLineNumber, t10.endColumn - this._openCharacter.length - this._closeCharacter.length, t10.endLineNumber, t10.endColumn), super.computeCursorState(e10, n10);
    }
  };
  f1 = class extends d1 {
    constructor(e10, t10, n10, r10) {
      let i10 = (n10 ? t10 : ``) + r10, a10 = 0, o10 = -r10.length;
      super(e10, i10, a10, o10, t10, r10);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations(), r10 = n10[0].range;
      return this._computeCursorStateWithRange(e10, r10, t10);
    }
  };
  p1 = class extends d1 {
    constructor(e10, t10, n10, r10) {
      let i10 = n10 + r10, a10 = 0, o10 = n10.length;
      super(t10, i10, a10, o10, n10, r10), this._autoIndentationEdit = e10, this._autoClosingEdit = {
        range: t10,
        text: i10
      };
    }
    getEditOperations(e10, t10) {
      t10.addTrackedEditOperation(this._autoIndentationEdit.range, this._autoIndentationEdit.text), t10.addTrackedEditOperation(this._autoClosingEdit.range, this._autoClosingEdit.text);
    }
    computeCursorState(e10, t10) {
      let n10 = t10.getInverseEditOperations();
      if (n10.length !== 2) throw Error(`There should be two inverse edit operations!`);
      let r10 = n10[0].range, i10 = n10[1].range, a10 = r10.plusRange(i10);
      return this._computeCursorStateWithRange(e10, a10, t10);
    }
  };
  function m1(e10, t10) {
    return e10 === ` ` ? t10 === 5 || t10 === 6 ? 6 : 5 : 4;
  }
  function h1(e10, t10) {
    return _1(e10) && !_1(t10) ? true : e10 === 5 ? false : g1(e10) !== g1(t10);
  }
  function g1(e10) {
    return e10 === 6 || e10 === 5 ? `space` : e10;
  }
  function _1(e10) {
    return e10 === 4 || e10 === 5 || e10 === 6;
  }
  function v1(e10, t10, n10, r10, i10) {
    if (e10.autoClosingOvertype === `never` || !e10.autoClosingPairs.autoClosingPairsCloseSingleChar.has(i10)) return false;
    for (let a10 = 0, o10 = n10.length; a10 < o10; a10++) {
      let o11 = n10[a10];
      if (!o11.isEmpty()) return false;
      let s10 = o11.getPosition(), c10 = t10.getLineContent(s10.lineNumber), l10 = c10.charAt(s10.column - 1);
      if (l10 !== i10) return false;
      let u10 = v$(i10), d10 = s10.column > 2 ? c10.charCodeAt(s10.column - 2) : 0;
      if (d10 === 92 && u10) return false;
      if (e10.autoClosingOvertype === `auto`) {
        let e11 = false;
        for (let t11 = 0, n11 = r10.length; t11 < n11; t11++) {
          let n12 = r10[t11];
          if (s10.lineNumber === n12.startLineNumber && s10.column === n12.startColumn) {
            e11 = true;
            break;
          }
        }
        if (!e11) return false;
      }
    }
    return true;
  }
  function y1(e10, t10, n10) {
    return n10 ? new S$(e10, t10, true) : new b$(e10, t10, true);
  }
  function b1(e10, t10, n10) {
    return n10 || (n10 = 1), U$.shiftIndent(t10, t10.length + n10, e10.tabSize, e10.indentSize, e10.insertSpaces);
  }
  function x1(e10, t10, n10) {
    return n10 || (n10 = 1), U$.unshiftIndent(t10, t10.length + n10, e10.tabSize, e10.indentSize, e10.insertSpaces);
  }
  function S1(e10, t10) {
    return v$(t10) ? e10.autoSurround === `quotes` || e10.autoSurround === `languageDefined` : e10.autoSurround === `brackets` || e10.autoSurround === `languageDefined`;
  }
  let w1;
  C1 = class {
    static indent(e10, t10, n10) {
      if (t10 === null || n10 === null) return [];
      let r10 = [];
      for (let t11 = 0, i10 = n10.length; t11 < i10; t11++) r10[t11] = new U$(n10[t11], {
        isUnshift: false,
        tabSize: e10.tabSize,
        indentSize: e10.indentSize,
        insertSpaces: e10.insertSpaces,
        useTabStops: e10.useTabStops,
        autoIndent: e10.autoIndent
      }, e10.languageConfigurationService);
      return r10;
    }
    static outdent(e10, t10, n10) {
      let r10 = [];
      for (let t11 = 0, i10 = n10.length; t11 < i10; t11++) r10[t11] = new U$(n10[t11], {
        isUnshift: true,
        tabSize: e10.tabSize,
        indentSize: e10.indentSize,
        insertSpaces: e10.insertSpaces,
        useTabStops: e10.useTabStops,
        autoIndent: e10.autoIndent
      }, e10.languageConfigurationService);
      return r10;
    }
    static paste(e10, t10, n10, r10, i10, a10) {
      return s1.getEdits(e10, t10, n10, r10, i10, a10);
    }
    static tab(e10, t10, n10) {
      return u1.getCommands(e10, t10, n10);
    }
    static compositionType(e10, t10, n10, r10, i10, a10, o10, s10) {
      return c1.getEdits(e10, t10, n10, r10, i10, a10, o10, s10);
    }
    static compositionEndWithInterceptors(e10, t10, n10, r10, i10, a10) {
      if (!r10) return null;
      let o10 = null;
      for (let e11 of r10) if (o10 === null) o10 = e11.insertedText;
      else if (o10 !== e11.insertedText) return null;
      if (!o10 || o10.length !== 1) return null;
      let s10 = o10, c10 = false;
      for (let e11 of r10) if (e11.deletedText.length !== 0) {
        c10 = true;
        break;
      }
      if (c10) {
        if (!S1(t10, s10) || !t10.surroundingPairs.hasOwnProperty(s10)) return null;
        let e11 = v$(s10);
        for (let t11 of r10) if (t11.deletedSelectionStart !== 0 || t11.deletedSelectionEnd !== t11.deletedText.length || /^[ \t]+$/.test(t11.deletedText) || e11 && v$(t11.deletedText)) return null;
        let n11 = [];
        for (let e12 of i10) {
          if (!e12.isEmpty()) return null;
          n11.push(e12.getPosition());
        }
        if (n11.length !== r10.length) return null;
        let a11 = [];
        for (let e12 = 0, i11 = n11.length; e12 < i11; e12++) a11.push(new G$(n11[e12], r10[e12].deletedText, t10.surroundingPairs[s10]));
        return new _$(4, a11, {
          shouldPushStackElementBefore: true,
          shouldPushStackElementAfter: false
        });
      }
      let l10 = t1.getEdits(t10, n10, i10, a10, s10);
      if (l10 !== void 0) return l10;
      let u10 = n1.getEdits(t10, n10, i10, s10, true, false);
      return u10 === void 0 ? null : u10;
    }
    static typeWithInterceptors(e10, t10, n10, r10, i10, a10, o10) {
      let s10 = o1.getEdits(n10, r10, i10, o10, e10);
      if (s10 !== void 0) return s10;
      let c10 = $$.getEdits(n10, r10, i10, o10, e10);
      if (c10 !== void 0) return c10;
      let l10 = e1.getEdits(t10, n10, r10, i10, a10, o10);
      if (l10 !== void 0) return l10;
      let u10 = n1.getEdits(n10, r10, i10, o10, false, e10);
      if (u10 !== void 0) return u10;
      let d10 = r1.getEdits(n10, r10, i10, o10, e10);
      if (d10 !== void 0) return d10;
      let f10 = i1.getEdits(t10, n10, r10, i10, o10, e10);
      return f10 === void 0 ? a1.getEdits(t10, i10, o10) : f10;
    }
    static typeWithoutInterceptors(e10, t10, n10, r10, i10) {
      return l1.getEdits(e10, r10, i10);
    }
  };
  w1 = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.deletedText = e10, this.deletedSelectionStart = t10, this.deletedSelectionEnd = n10, this.insertedText = r10, this.insertedSelectionStart = i10, this.insertedSelectionEnd = a10;
    }
  };
  (function(e10) {
    e10.editorSimpleInput = new U(`editorSimpleInput`, false, true), e10.editorTextFocus = new U(`editorTextFocus`, false, T(`editorTextFocus`, `Whether the editor text has focus (cursor is blinking)`)), e10.focus = new U(`editorFocus`, false, T(`editorFocus`, `Whether the editor or an editor widget has focus (e.g. focus is in the find widget)`)), e10.textInputFocus = new U(`textInputFocus`, false, T(`textInputFocus`, `Whether an editor or a rich text input has focus (cursor is blinking)`)), e10.readOnly = new U(`editorReadonly`, false, T(`editorReadonly`, `Whether the editor is read-only`)), e10.inDiffEditor = new U(`inDiffEditor`, false, T(`inDiffEditor`, `Whether the context is a diff editor`)), e10.isEmbeddedDiffEditor = new U(`isEmbeddedDiffEditor`, false, T(`isEmbeddedDiffEditor`, `Whether the context is an embedded diff editor`)), e10.inMultiDiffEditor = new U(`inMultiDiffEditor`, false, T(`inMultiDiffEditor`, `Whether the context is a multi diff editor`)), e10.multiDiffEditorAllCollapsed = new U(`multiDiffEditorAllCollapsed`, void 0, T(`multiDiffEditorAllCollapsed`, `Whether all files in multi diff editor are collapsed`)), e10.hasChanges = new U(`diffEditorHasChanges`, false, T(`diffEditorHasChanges`, `Whether the diff editor has changes`)), e10.comparingMovedCode = new U(`comparingMovedCode`, false, T(`comparingMovedCode`, `Whether a moved code block is selected for comparison`)), e10.accessibleDiffViewerVisible = new U(`accessibleDiffViewerVisible`, false, T(`accessibleDiffViewerVisible`, `Whether the accessible diff viewer is visible`)), e10.diffEditorRenderSideBySideInlineBreakpointReached = new U(`diffEditorRenderSideBySideInlineBreakpointReached`, false, T(`diffEditorRenderSideBySideInlineBreakpointReached`, `Whether the diff editor render side by side inline breakpoint is reached`)), e10.diffEditorInlineMode = new U(`diffEditorInlineMode`, false, T(`diffEditorInlineMode`, `Whether inline mode is active`)), e10.diffEditorOriginalWritable = new U(`diffEditorOriginalWritable`, false, T(`diffEditorOriginalWritable`, `Whether modified is writable in the diff editor`)), e10.diffEditorModifiedWritable = new U(`diffEditorModifiedWritable`, false, T(`diffEditorModifiedWritable`, `Whether modified is writable in the diff editor`)), e10.diffEditorOriginalUri = new U(`diffEditorOriginalUri`, ``, T(`diffEditorOriginalUri`, `The uri of the original document`)), e10.diffEditorModifiedUri = new U(`diffEditorModifiedUri`, ``, T(`diffEditorModifiedUri`, `The uri of the modified document`)), e10.columnSelection = new U(`editorColumnSelection`, false, T(`editorColumnSelection`, "Whether `editor.columnSelection` is enabled")), e10.writable = e10.readOnly.toNegated(), e10.hasNonEmptySelection = new U(`editorHasSelection`, false, T(`editorHasSelection`, `Whether the editor has text selected`)), e10.hasOnlyEmptySelection = e10.hasNonEmptySelection.toNegated(), e10.hasMultipleSelections = new U(`editorHasMultipleSelections`, false, T(`editorHasMultipleSelections`, `Whether the editor has multiple selections`)), e10.hasSingleSelection = e10.hasMultipleSelections.toNegated(), e10.tabMovesFocus = new U(`editorTabMovesFocus`, false, T(`editorTabMovesFocus`, "Whether `Tab` will move focus out of the editor")), e10.tabDoesNotMoveFocus = e10.tabMovesFocus.toNegated(), e10.isInEmbeddedEditor = new U(`isInEmbeddedEditor`, false, true), e10.canUndo = new U(`canUndo`, false, true), e10.canRedo = new U(`canRedo`, false, true), e10.hoverVisible = new U(`editorHoverVisible`, false, T(`editorHoverVisible`, `Whether the editor hover is visible`)), e10.hoverFocused = new U(`editorHoverFocused`, false, T(`editorHoverFocused`, `Whether the editor hover is focused`)), e10.stickyScrollFocused = new U(`stickyScrollFocused`, false, T(`stickyScrollFocused`, `Whether the sticky scroll is focused`)), e10.stickyScrollVisible = new U(`stickyScrollVisible`, false, T(`stickyScrollVisible`, `Whether the sticky scroll is visible`)), e10.standaloneColorPickerVisible = new U(`standaloneColorPickerVisible`, false, T(`standaloneColorPickerVisible`, `Whether the standalone color picker is visible`)), e10.standaloneColorPickerFocused = new U(`standaloneColorPickerFocused`, false, T(`standaloneColorPickerFocused`, `Whether the standalone color picker is focused`)), e10.inCompositeEditor = new U(`inCompositeEditor`, void 0, T(`inCompositeEditor`, `Whether the editor is part of a larger editor (e.g. notebooks)`)), e10.notInCompositeEditor = e10.inCompositeEditor.toNegated(), e10.languageId = new U(`editorLangId`, ``, T(`editorLangId`, `The language identifier of the editor`)), e10.hasCompletionItemProvider = new U(`editorHasCompletionItemProvider`, false, T(`editorHasCompletionItemProvider`, `Whether the editor has a completion item provider`)), e10.hasCodeActionsProvider = new U(`editorHasCodeActionsProvider`, false, T(`editorHasCodeActionsProvider`, `Whether the editor has a code actions provider`)), e10.hasCodeLensProvider = new U(`editorHasCodeLensProvider`, false, T(`editorHasCodeLensProvider`, `Whether the editor has a code lens provider`)), e10.hasDefinitionProvider = new U(`editorHasDefinitionProvider`, false, T(`editorHasDefinitionProvider`, `Whether the editor has a definition provider`)), e10.hasDeclarationProvider = new U(`editorHasDeclarationProvider`, false, T(`editorHasDeclarationProvider`, `Whether the editor has a declaration provider`)), e10.hasImplementationProvider = new U(`editorHasImplementationProvider`, false, T(`editorHasImplementationProvider`, `Whether the editor has an implementation provider`)), e10.hasTypeDefinitionProvider = new U(`editorHasTypeDefinitionProvider`, false, T(`editorHasTypeDefinitionProvider`, `Whether the editor has a type definition provider`)), e10.hasHoverProvider = new U(`editorHasHoverProvider`, false, T(`editorHasHoverProvider`, `Whether the editor has a hover provider`)), e10.hasDocumentHighlightProvider = new U(`editorHasDocumentHighlightProvider`, false, T(`editorHasDocumentHighlightProvider`, `Whether the editor has a document highlight provider`)), e10.hasDocumentSymbolProvider = new U(`editorHasDocumentSymbolProvider`, false, T(`editorHasDocumentSymbolProvider`, `Whether the editor has a document symbol provider`)), e10.hasReferenceProvider = new U(`editorHasReferenceProvider`, false, T(`editorHasReferenceProvider`, `Whether the editor has a reference provider`)), e10.hasRenameProvider = new U(`editorHasRenameProvider`, false, T(`editorHasRenameProvider`, `Whether the editor has a rename provider`)), e10.hasSignatureHelpProvider = new U(`editorHasSignatureHelpProvider`, false, T(`editorHasSignatureHelpProvider`, `Whether the editor has a signature help provider`)), e10.hasInlayHintsProvider = new U(`editorHasInlayHintsProvider`, false, T(`editorHasInlayHintsProvider`, `Whether the editor has an inline hints provider`)), e10.hasDocumentFormattingProvider = new U(`editorHasDocumentFormattingProvider`, false, T(`editorHasDocumentFormattingProvider`, `Whether the editor has a document formatting provider`)), e10.hasDocumentSelectionFormattingProvider = new U(`editorHasDocumentSelectionFormattingProvider`, false, T(`editorHasDocumentSelectionFormattingProvider`, `Whether the editor has a document selection formatting provider`)), e10.hasMultipleDocumentFormattingProvider = new U(`editorHasMultipleDocumentFormattingProvider`, false, T(`editorHasMultipleDocumentFormattingProvider`, `Whether the editor has multiple document formatting providers`)), e10.hasMultipleDocumentSelectionFormattingProvider = new U(`editorHasMultipleDocumentSelectionFormattingProvider`, false, T(`editorHasMultipleDocumentSelectionFormattingProvider`, `Whether the editor has multiple document selection formatting providers`));
  })($ || ($ = {}));
  const T1 = 0;
  var E1 = class extends Pm {
    runEditorCommand(e10, t10, n10) {
      let r10 = t10._getViewModel();
      r10 && this.runCoreEditorCommand(r10, n10 || {});
    }
  }, D1;
  (function(e10) {
    let t10 = function(e11) {
      if (!ve(e11)) return false;
      let t11 = e11;
      return !(!_e(t11.to) || !Ce(t11.by) && !_e(t11.by) || !Ce(t11.value) && !be(t11.value) || !Ce(t11.revealCursor) && !Se(t11.revealCursor));
    };
    e10.metadata = {
      description: `Scroll editor in the given direction`,
      args: [
        {
          name: `Editor scroll argument object`,
          description: "Property-value pairs that can be passed through this argument:\n					* 'to': A mandatory direction value.\n						```\n						'up', 'down'\n						```\n					* 'by': Unit to move. Default is computed based on 'to' value.\n						```\n						'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n						```\n					* 'value': Number of units to move. Default is '1'.\n					* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n				",
          constraint: t10,
          schema: {
            type: `object`,
            required: [
              `to`
            ],
            properties: {
              to: {
                type: `string`,
                enum: [
                  `up`,
                  `down`
                ]
              },
              by: {
                type: `string`,
                enum: [
                  `line`,
                  `wrappedLine`,
                  `page`,
                  `halfPage`,
                  `editor`
                ]
              },
              value: {
                type: `number`,
                default: 1
              },
              revealCursor: {
                type: `boolean`
              }
            }
          }
        }
      ]
    }, e10.RawDirection = {
      Up: `up`,
      Right: `right`,
      Down: `down`,
      Left: `left`
    }, e10.RawUnit = {
      Line: `line`,
      WrappedLine: `wrappedLine`,
      Page: `page`,
      HalfPage: `halfPage`,
      Editor: `editor`,
      Column: `column`
    };
    function n10(t11) {
      let n11;
      switch (t11.to) {
        case e10.RawDirection.Up:
          n11 = 1;
          break;
        case e10.RawDirection.Right:
          n11 = 2;
          break;
        case e10.RawDirection.Down:
          n11 = 3;
          break;
        case e10.RawDirection.Left:
          n11 = 4;
          break;
        default:
          return null;
      }
      let r10;
      switch (t11.by) {
        case e10.RawUnit.Line:
          r10 = 1;
          break;
        case e10.RawUnit.WrappedLine:
          r10 = 2;
          break;
        case e10.RawUnit.Page:
          r10 = 3;
          break;
        case e10.RawUnit.HalfPage:
          r10 = 4;
          break;
        case e10.RawUnit.Editor:
          r10 = 5;
          break;
        case e10.RawUnit.Column:
          r10 = 6;
          break;
        default:
          r10 = 2;
      }
      let i10 = Math.floor(t11.value || 1), a10 = !!t11.revealCursor;
      return {
        direction: n11,
        unit: r10,
        value: i10,
        revealCursor: a10,
        select: !!t11.select
      };
    }
    e10.parse = n10;
  })(D1 || (D1 = {}));
  var O1;
  (function(e10) {
    let t10 = function(e11) {
      if (!ve(e11)) return false;
      let t11 = e11;
      return !(!be(t11.lineNumber) && !_e(t11.lineNumber) || !Ce(t11.at) && !_e(t11.at));
    };
    e10.metadata = {
      description: `Reveal the given line at the given logical position`,
      args: [
        {
          name: `Reveal line argument object`,
          description: `Property-value pairs that can be passed through this argument:
					* 'lineNumber': A mandatory line number value.
					* 'at': Logical position at which line has to be revealed.
						\`\`\`
						'top', 'center', 'bottom'
						\`\`\`
				`,
          constraint: t10,
          schema: {
            type: `object`,
            required: [
              `lineNumber`
            ],
            properties: {
              lineNumber: {
                type: [
                  `number`,
                  `string`
                ]
              },
              at: {
                type: `string`,
                enum: [
                  `top`,
                  `center`,
                  `bottom`
                ]
              }
            }
          }
        }
      ]
    }, e10.RawAtArgument = {
      Top: `top`,
      Center: `center`,
      Bottom: `bottom`
    };
  })(O1 || (O1 = {}));
  var k1 = class {
    constructor(e10) {
      e10.addImplementation(1e4, `code-editor`, (e11, t10) => {
        let n10 = e11.get(Zf).getFocusedCodeEditor();
        return n10 && n10.hasTextFocus() ? this._runEditorCommand(e11, n10, t10) : false;
      }), e10.addImplementation(1e3, `generic-dom-input-textarea`, (e11, t10) => {
        let n10 = Od();
        return n10 && [
          `input`,
          `textarea`
        ].indexOf(n10.tagName.toLowerCase()) >= 0 ? (this.runDOMCommand(n10), true) : false;
      }), e10.addImplementation(0, `generic-dom`, (e11, t10) => {
        let n10 = e11.get(Zf).getActiveCodeEditor();
        return n10 ? (n10.focus(), this._runEditorCommand(e11, n10, t10)) : false;
      });
    }
    _runEditorCommand(e10, t10, n10) {
      let r10 = this.runEditorCommand(e10, t10, n10);
      return r10 || true;
    }
  }, A1;
  (function(e10) {
    class t10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        if (!t11.position) return;
        e11.model.pushStackElement();
        let n11 = e11.setCursorStates(t11.source, 3, [
          j$.moveTo(e11, e11.getPrimaryCursorState(), this._inSelectionMode, t11.position, t11.viewPosition)
        ]);
        n11 && t11.revealType !== 2 && e11.revealAllCursors(t11.source, true, true);
      }
    }
    e10.MoveTo = W(new t10({
      id: `_moveTo`,
      inSelectionMode: false,
      precondition: void 0
    })), e10.MoveToSelect = W(new t10({
      id: `_moveToSelect`,
      inSelectionMode: true,
      precondition: void 0
    }));
    class n10 extends E1 {
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement();
        let n11 = this._getColumnSelectResult(e11, e11.getPrimaryCursorState(), e11.getCursorColumnSelectData(), t11);
        n11 !== null && (e11.setCursorStates(t11.source, 3, n11.viewStates.map((e12) => p$.fromViewState(e12))), e11.setCursorColumnSelectData({
          isReal: true,
          fromViewLineNumber: n11.fromLineNumber,
          fromViewVisualColumn: n11.fromVisualColumn,
          toViewLineNumber: n11.toLineNumber,
          toViewVisualColumn: n11.toVisualColumn
        }), n11.reversed ? e11.revealTopMostCursor(t11.source) : e11.revealBottomMostCursor(t11.source));
      }
    }
    e10.ColumnSelect = W(new class extends n10 {
      constructor() {
        super({
          id: `columnSelect`,
          precondition: void 0
        });
      }
      _getColumnSelectResult(e11, t11, n11, r11) {
        if (r11.position === void 0 || r11.viewPosition === void 0 || r11.mouseColumn === void 0) return null;
        let i11 = e11.model.validatePosition(r11.position), a11 = e11.coordinatesConverter.validateViewPosition(new P(r11.viewPosition.lineNumber, r11.viewPosition.column), i11), o11 = r11.doColumnSelect ? n11.fromViewLineNumber : a11.lineNumber, s11 = r11.doColumnSelect ? n11.fromViewVisualColumn : r11.mouseColumn - 1;
        return y$.columnSelect(e11.cursorConfig, e11, o11, s11, a11.lineNumber, r11.mouseColumn - 1);
      }
    }()), e10.CursorColumnSelectLeft = W(new class extends n10 {
      constructor() {
        super({
          id: `cursorColumnSelectLeft`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 3599,
            linux: {
              primary: 0
            }
          }
        });
      }
      _getColumnSelectResult(e11, t11, n11, r11) {
        return y$.columnSelectLeft(e11.cursorConfig, e11, n11);
      }
    }()), e10.CursorColumnSelectRight = W(new class extends n10 {
      constructor() {
        super({
          id: `cursorColumnSelectRight`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 3601,
            linux: {
              primary: 0
            }
          }
        });
      }
      _getColumnSelectResult(e11, t11, n11, r11) {
        return y$.columnSelectRight(e11.cursorConfig, e11, n11);
      }
    }());
    class r10 extends n10 {
      constructor(e11) {
        super(e11), this._isPaged = e11.isPaged;
      }
      _getColumnSelectResult(e11, t11, n11, r11) {
        return y$.columnSelectUp(e11.cursorConfig, e11, n11, this._isPaged);
      }
    }
    e10.CursorColumnSelectUp = W(new r10({
      isPaged: false,
      id: `cursorColumnSelectUp`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3600,
        linux: {
          primary: 0
        }
      }
    })), e10.CursorColumnSelectPageUp = W(new r10({
      isPaged: true,
      id: `cursorColumnSelectPageUp`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3595,
        linux: {
          primary: 0
        }
      }
    }));
    class i10 extends n10 {
      constructor(e11) {
        super(e11), this._isPaged = e11.isPaged;
      }
      _getColumnSelectResult(e11, t11, n11, r11) {
        return y$.columnSelectDown(e11.cursorConfig, e11, n11, this._isPaged);
      }
    }
    e10.CursorColumnSelectDown = W(new i10({
      isPaged: false,
      id: `cursorColumnSelectDown`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3602,
        linux: {
          primary: 0
        }
      }
    })), e10.CursorColumnSelectPageDown = W(new i10({
      isPaged: true,
      id: `cursorColumnSelectPageDown`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3596,
        linux: {
          primary: 0
        }
      }
    }));
    class a10 extends E1 {
      constructor() {
        super({
          id: `cursorMove`,
          precondition: void 0,
          metadata: M$.metadata
        });
      }
      runCoreEditorCommand(e11, t11) {
        let n11 = M$.parse(t11);
        n11 && this._runCursorMove(e11, t11.source, n11);
      }
      _runCursorMove(e11, t11, n11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11, 3, a10._move(e11, e11.getCursorStates(), n11)), e11.revealAllCursors(t11, true);
      }
      static _move(e11, t11, n11) {
        let r11 = n11.select, i11 = n11.value;
        switch (n11.direction) {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
            return j$.simpleMove(e11, t11, n11.direction, r11, i11, n11.unit);
          case 11:
          case 13:
          case 12:
          case 14:
            return j$.viewportMove(e11, t11, n11.direction, r11, i11);
          default:
            return null;
        }
      }
    }
    e10.CursorMoveImpl = a10, e10.CursorMove = W(new a10());
    class o10 extends E1 {
      constructor(e11) {
        super(e11), this._staticArgs = e11.args;
      }
      runCoreEditorCommand(e11, t11) {
        let n11 = this._staticArgs;
        this._staticArgs.value === -1 && (n11 = {
          direction: this._staticArgs.direction,
          unit: this._staticArgs.unit,
          select: this._staticArgs.select,
          value: t11.pageSize || e11.cursorConfig.pageSize
        }), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, j$.simpleMove(e11, e11.getCursorStates(), n11.direction, n11.select, n11.value, n11.unit)), e11.revealAllCursors(t11.source, true);
      }
    }
    e10.CursorLeft = W(new o10({
      args: {
        direction: 0,
        unit: 0,
        select: false,
        value: 1
      },
      id: `cursorLeft`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 15,
        mac: {
          primary: 15,
          secondary: [
            288
          ]
        }
      }
    })), e10.CursorLeftSelect = W(new o10({
      args: {
        direction: 0,
        unit: 0,
        select: true,
        value: 1
      },
      id: `cursorLeftSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1039
      }
    })), e10.CursorRight = W(new o10({
      args: {
        direction: 1,
        unit: 0,
        select: false,
        value: 1
      },
      id: `cursorRight`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 17,
        mac: {
          primary: 17,
          secondary: [
            292
          ]
        }
      }
    })), e10.CursorRightSelect = W(new o10({
      args: {
        direction: 1,
        unit: 0,
        select: true,
        value: 1
      },
      id: `cursorRightSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1041
      }
    })), e10.CursorUp = W(new o10({
      args: {
        direction: 2,
        unit: 2,
        select: false,
        value: 1
      },
      id: `cursorUp`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 16,
        mac: {
          primary: 16,
          secondary: [
            302
          ]
        }
      }
    })), e10.CursorUpSelect = W(new o10({
      args: {
        direction: 2,
        unit: 2,
        select: true,
        value: 1
      },
      id: `cursorUpSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1040,
        secondary: [
          3088
        ],
        mac: {
          primary: 1040
        },
        linux: {
          primary: 1040
        }
      }
    })), e10.CursorPageUp = W(new o10({
      args: {
        direction: 2,
        unit: 2,
        select: false,
        value: -1
      },
      id: `cursorPageUp`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 11
      }
    })), e10.CursorPageUpSelect = W(new o10({
      args: {
        direction: 2,
        unit: 2,
        select: true,
        value: -1
      },
      id: `cursorPageUpSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1035
      }
    })), e10.CursorDown = W(new o10({
      args: {
        direction: 3,
        unit: 2,
        select: false,
        value: 1
      },
      id: `cursorDown`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 18,
        mac: {
          primary: 18,
          secondary: [
            300
          ]
        }
      }
    })), e10.CursorDownSelect = W(new o10({
      args: {
        direction: 3,
        unit: 2,
        select: true,
        value: 1
      },
      id: `cursorDownSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1042,
        secondary: [
          3090
        ],
        mac: {
          primary: 1042
        },
        linux: {
          primary: 1042
        }
      }
    })), e10.CursorPageDown = W(new o10({
      args: {
        direction: 3,
        unit: 2,
        select: false,
        value: -1
      },
      id: `cursorPageDown`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 12
      }
    })), e10.CursorPageDownSelect = W(new o10({
      args: {
        direction: 3,
        unit: 2,
        select: true,
        value: -1
      },
      id: `cursorPageDownSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1036
      }
    })), e10.CreateCursor = W(new class extends E1 {
      constructor() {
        super({
          id: `createCursor`,
          precondition: void 0
        });
      }
      runCoreEditorCommand(e11, t11) {
        if (!t11.position) return;
        let n11;
        n11 = t11.wholeLine ? j$.line(e11, e11.getPrimaryCursorState(), false, t11.position, t11.viewPosition) : j$.moveTo(e11, e11.getPrimaryCursorState(), false, t11.position, t11.viewPosition);
        let r11 = e11.getCursorStates();
        if (r11.length > 1) {
          let i11 = n11.modelState ? n11.modelState.position : null, a11 = n11.viewState ? n11.viewState.position : null;
          for (let n12 = 0, o11 = r11.length; n12 < o11; n12++) {
            let o12 = r11[n12];
            if (!(i11 && !o12.modelState.selection.containsPosition(i11)) && !(a11 && !o12.viewState.selection.containsPosition(a11))) {
              r11.splice(n12, 1), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, r11);
              return;
            }
          }
        }
        r11.push(n11), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, r11);
      }
    }()), e10.LastCursorMoveToSelect = W(new class extends E1 {
      constructor() {
        super({
          id: `_lastCursorMoveToSelect`,
          precondition: void 0
        });
      }
      runCoreEditorCommand(e11, t11) {
        if (!t11.position) return;
        let n11 = e11.getLastAddedCursorIndex(), r11 = e11.getCursorStates(), i11 = r11.slice(0);
        i11[n11] = j$.moveTo(e11, r11[n11], true, t11.position, t11.viewPosition), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, i11);
      }
    }());
    class s10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, j$.moveToBeginningOfLine(e11, e11.getCursorStates(), this._inSelectionMode)), e11.revealAllCursors(t11.source, true);
      }
    }
    e10.CursorHome = W(new s10({
      inSelectionMode: false,
      id: `cursorHome`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 14,
        mac: {
          primary: 14,
          secondary: [
            2063
          ]
        }
      }
    })), e10.CursorHomeSelect = W(new s10({
      inSelectionMode: true,
      id: `cursorHomeSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1038,
        mac: {
          primary: 1038,
          secondary: [
            3087
          ]
        }
      }
    }));
    class c10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, this._exec(e11.getCursorStates())), e11.revealAllCursors(t11.source, true);
      }
      _exec(e11) {
        let t11 = [];
        for (let n11 = 0, r11 = e11.length; n11 < r11; n11++) {
          let r12 = e11[n11], i11 = r12.modelState.position.lineNumber;
          t11[n11] = p$.fromModelState(r12.modelState.move(this._inSelectionMode, i11, 1, 0));
        }
        return t11;
      }
    }
    e10.CursorLineStart = W(new c10({
      inSelectionMode: false,
      id: `cursorLineStart`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 0,
        mac: {
          primary: 287
        }
      }
    })), e10.CursorLineStartSelect = W(new c10({
      inSelectionMode: true,
      id: `cursorLineStartSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 0,
        mac: {
          primary: 1311
        }
      }
    }));
    class l10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, j$.moveToEndOfLine(e11, e11.getCursorStates(), this._inSelectionMode, t11.sticky || false)), e11.revealAllCursors(t11.source, true);
      }
    }
    e10.CursorEnd = W(new l10({
      inSelectionMode: false,
      id: `cursorEnd`,
      precondition: void 0,
      kbOpts: {
        args: {
          sticky: false
        },
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 13,
        mac: {
          primary: 13,
          secondary: [
            2065
          ]
        }
      },
      metadata: {
        description: `Go to End`,
        args: [
          {
            name: `args`,
            schema: {
              type: `object`,
              properties: {
                sticky: {
                  description: T(`stickydesc`, `Stick to the end even when going to longer lines`),
                  type: `boolean`,
                  default: false
                }
              }
            }
          }
        ]
      }
    })), e10.CursorEndSelect = W(new l10({
      inSelectionMode: true,
      id: `cursorEndSelect`,
      precondition: void 0,
      kbOpts: {
        args: {
          sticky: false
        },
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 1037,
        mac: {
          primary: 1037,
          secondary: [
            3089
          ]
        }
      },
      metadata: {
        description: `Select to End`,
        args: [
          {
            name: `args`,
            schema: {
              type: `object`,
              properties: {
                sticky: {
                  description: T(`stickydesc`, `Stick to the end even when going to longer lines`),
                  type: `boolean`,
                  default: false
                }
              }
            }
          }
        ]
      }
    }));
    class u10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, this._exec(e11, e11.getCursorStates())), e11.revealAllCursors(t11.source, true);
      }
      _exec(e11, t11) {
        let n11 = [];
        for (let r11 = 0, i11 = t11.length; r11 < i11; r11++) {
          let i12 = t11[r11], a11 = i12.modelState.position.lineNumber, o11 = e11.model.getLineMaxColumn(a11);
          n11[r11] = p$.fromModelState(i12.modelState.move(this._inSelectionMode, a11, o11, 0));
        }
        return n11;
      }
    }
    e10.CursorLineEnd = W(new u10({
      inSelectionMode: false,
      id: `cursorLineEnd`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 0,
        mac: {
          primary: 291
        }
      }
    })), e10.CursorLineEndSelect = W(new u10({
      inSelectionMode: true,
      id: `cursorLineEndSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 0,
        mac: {
          primary: 1315
        }
      }
    }));
    class d10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, j$.moveToBeginningOfBuffer(e11, e11.getCursorStates(), this._inSelectionMode)), e11.revealAllCursors(t11.source, true);
      }
    }
    e10.CursorTop = W(new d10({
      inSelectionMode: false,
      id: `cursorTop`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 2062,
        mac: {
          primary: 2064
        }
      }
    })), e10.CursorTopSelect = W(new d10({
      inSelectionMode: true,
      id: `cursorTopSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3086,
        mac: {
          primary: 3088
        }
      }
    }));
    class f10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, j$.moveToEndOfBuffer(e11, e11.getCursorStates(), this._inSelectionMode)), e11.revealAllCursors(t11.source, true);
      }
    }
    e10.CursorBottom = W(new f10({
      inSelectionMode: false,
      id: `cursorBottom`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 2061,
        mac: {
          primary: 2066
        }
      }
    })), e10.CursorBottomSelect = W(new f10({
      inSelectionMode: true,
      id: `cursorBottomSelect`,
      precondition: void 0,
      kbOpts: {
        weight: T1,
        kbExpr: $.textInputFocus,
        primary: 3085,
        mac: {
          primary: 3090
        }
      }
    }));
    class p10 extends E1 {
      constructor() {
        super({
          id: `editorScroll`,
          precondition: void 0,
          metadata: D1.metadata
        });
      }
      determineScrollMethod(e11) {
        let t11 = [
          6
        ], n11 = [
          1,
          2,
          3,
          4,
          5,
          6
        ], r11 = [
          4,
          2
        ], i11 = [
          1,
          3
        ];
        return t11.includes(e11.unit) && r11.includes(e11.direction) ? this._runHorizontalEditorScroll.bind(this) : n11.includes(e11.unit) && i11.includes(e11.direction) ? this._runVerticalEditorScroll.bind(this) : null;
      }
      runCoreEditorCommand(e11, t11) {
        let n11 = D1.parse(t11);
        if (!n11) return;
        let r11 = this.determineScrollMethod(n11);
        r11 && r11(e11, t11.source, n11);
      }
      _runVerticalEditorScroll(e11, t11, n11) {
        let r11 = this._computeDesiredScrollTop(e11, n11);
        if (n11.revealCursor) {
          let i11 = e11.getCompletelyVisibleViewRangeAtScrollTop(r11);
          e11.setCursorStates(t11, 3, [
            j$.findPositionInViewportIfOutside(e11, e11.getPrimaryCursorState(), i11, n11.select)
          ]);
        }
        e11.viewLayout.setScrollPosition({
          scrollTop: r11
        }, 0);
      }
      _computeDesiredScrollTop(e11, t11) {
        if (t11.unit === 1) {
          let n12 = e11.viewLayout.getFutureViewport(), r12 = e11.getCompletelyVisibleViewRangeAtScrollTop(n12.top), i11 = e11.coordinatesConverter.convertViewRangeToModelRange(r12), a11;
          a11 = t11.direction === 1 ? Math.max(1, i11.startLineNumber - t11.value) : Math.min(e11.model.getLineCount(), i11.startLineNumber + t11.value);
          let o11 = e11.coordinatesConverter.convertModelPositionToViewPosition(new P(a11, 1));
          return e11.viewLayout.getVerticalOffsetForLineNumber(o11.lineNumber);
        }
        if (t11.unit === 5) {
          let n12 = 0;
          return t11.direction === 3 && (n12 = e11.model.getLineCount() - e11.cursorConfig.pageSize), e11.viewLayout.getVerticalOffsetForLineNumber(n12);
        }
        let n11;
        n11 = t11.unit === 3 ? e11.cursorConfig.pageSize * t11.value : t11.unit === 4 ? Math.round(e11.cursorConfig.pageSize / 2) * t11.value : t11.value;
        let r11 = (t11.direction === 1 ? -1 : 1) * n11;
        return e11.viewLayout.getCurrentScrollTop() + r11 * e11.cursorConfig.lineHeight;
      }
      _runHorizontalEditorScroll(e11, t11, n11) {
        let r11 = this._computeDesiredScrollLeft(e11, n11);
        e11.viewLayout.setScrollPosition({
          scrollLeft: r11
        }, 0);
      }
      _computeDesiredScrollLeft(e11, t11) {
        let n11 = (t11.direction === 4 ? -1 : 1) * t11.value;
        return e11.viewLayout.getCurrentScrollLeft() + n11 * e11.cursorConfig.typicalHalfwidthCharacterWidth;
      }
    }
    e10.EditorScrollImpl = p10, e10.EditorScroll = W(new p10()), e10.ScrollLineUp = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollLineUp`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 2064,
            mac: {
              primary: 267
            }
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Up,
          by: D1.RawUnit.WrappedLine,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollPageUp = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollPageUp`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 2059,
            win: {
              primary: 523
            },
            linux: {
              primary: 523
            }
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Up,
          by: D1.RawUnit.Page,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollEditorTop = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollEditorTop`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Up,
          by: D1.RawUnit.Editor,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollLineDown = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollLineDown`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 2066,
            mac: {
              primary: 268
            }
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Down,
          by: D1.RawUnit.WrappedLine,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollPageDown = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollPageDown`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 2060,
            win: {
              primary: 524
            },
            linux: {
              primary: 524
            }
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Down,
          by: D1.RawUnit.Page,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollEditorBottom = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollEditorBottom`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Down,
          by: D1.RawUnit.Editor,
          value: 1,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollLeft = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollLeft`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Left,
          by: D1.RawUnit.Column,
          value: 2,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }()), e10.ScrollRight = W(new class extends E1 {
      constructor() {
        super({
          id: `scrollRight`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus
          }
        });
      }
      runCoreEditorCommand(t11, n11) {
        e10.EditorScroll.runCoreEditorCommand(t11, {
          to: D1.RawDirection.Right,
          by: D1.RawUnit.Column,
          value: 2,
          revealCursor: false,
          select: false,
          source: n11.source
        });
      }
    }());
    class m10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        t11.position && (e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, [
          j$.word(e11, e11.getPrimaryCursorState(), this._inSelectionMode, t11.position)
        ]), t11.revealType !== 2 && e11.revealAllCursors(t11.source, true, true));
      }
    }
    e10.WordSelect = W(new m10({
      inSelectionMode: false,
      id: `_wordSelect`,
      precondition: void 0
    })), e10.WordSelectDrag = W(new m10({
      inSelectionMode: true,
      id: `_wordSelectDrag`,
      precondition: void 0
    })), e10.LastCursorWordSelect = W(new class extends E1 {
      constructor() {
        super({
          id: `lastCursorWordSelect`,
          precondition: void 0
        });
      }
      runCoreEditorCommand(e11, t11) {
        if (!t11.position) return;
        let n11 = e11.getLastAddedCursorIndex(), r11 = e11.getCursorStates(), i11 = r11.slice(0), a11 = r11[n11];
        i11[n11] = j$.word(e11, a11, a11.modelState.hasSelection(), t11.position), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, i11);
      }
    }());
    class h10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        t11.position && (e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, [
          j$.line(e11, e11.getPrimaryCursorState(), this._inSelectionMode, t11.position, t11.viewPosition)
        ]), t11.revealType !== 2 && e11.revealAllCursors(t11.source, false, true));
      }
    }
    e10.LineSelect = W(new h10({
      inSelectionMode: false,
      id: `_lineSelect`,
      precondition: void 0
    })), e10.LineSelectDrag = W(new h10({
      inSelectionMode: true,
      id: `_lineSelectDrag`,
      precondition: void 0
    }));
    class g10 extends E1 {
      constructor(e11) {
        super(e11), this._inSelectionMode = e11.inSelectionMode;
      }
      runCoreEditorCommand(e11, t11) {
        if (!t11.position) return;
        let n11 = e11.getLastAddedCursorIndex(), r11 = e11.getCursorStates(), i11 = r11.slice(0);
        i11[n11] = j$.line(e11, r11[n11], this._inSelectionMode, t11.position, t11.viewPosition), e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, i11);
      }
    }
    e10.LastCursorLineSelect = W(new g10({
      inSelectionMode: false,
      id: `lastCursorLineSelect`,
      precondition: void 0
    })), e10.LastCursorLineSelectDrag = W(new g10({
      inSelectionMode: true,
      id: `lastCursorLineSelectDrag`,
      precondition: void 0
    })), e10.CancelSelection = W(new class extends E1 {
      constructor() {
        super({
          id: `cancelSelection`,
          precondition: $.hasNonEmptySelection,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 9,
            secondary: [
              1033
            ]
          }
        });
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, [
          j$.cancelSelection(e11, e11.getPrimaryCursorState())
        ]), e11.revealAllCursors(t11.source, true);
      }
    }()), e10.RemoveSecondaryCursors = W(new class extends E1 {
      constructor() {
        super({
          id: `removeSecondaryCursors`,
          precondition: $.hasMultipleSelections,
          kbOpts: {
            weight: T1 + 1,
            kbExpr: $.textInputFocus,
            primary: 9,
            secondary: [
              1033
            ]
          }
        });
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, [
          e11.getPrimaryCursorState()
        ]), e11.revealAllCursors(t11.source, true), YA(T(`removedCursor`, `Removed secondary cursors`));
      }
    }()), e10.RevealLine = W(new class extends E1 {
      constructor() {
        super({
          id: `revealLine`,
          precondition: void 0,
          metadata: O1.metadata
        });
      }
      runCoreEditorCommand(e11, t11) {
        let n11 = t11, r11 = n11.lineNumber || 0, i11 = typeof r11 == `number` ? r11 + 1 : parseInt(r11) + 1;
        i11 < 1 && (i11 = 1);
        let a11 = e11.model.getLineCount();
        i11 > a11 && (i11 = a11);
        let o11 = new F(i11, 1, i11, e11.model.getLineMaxColumn(i11)), s11 = 0;
        if (n11.at) switch (n11.at) {
          case O1.RawAtArgument.Top:
            s11 = 3;
            break;
          case O1.RawAtArgument.Center:
            s11 = 1;
            break;
          case O1.RawAtArgument.Bottom:
            s11 = 4;
            break;
          default:
            break;
        }
        let c11 = e11.coordinatesConverter.convertModelRangeToViewRange(o11);
        e11.revealRange(t11.source, false, c11, s11, 0);
      }
    }()), e10.SelectAll = new class extends k1 {
      constructor() {
        super(Ym);
      }
      runDOMCommand(e11) {
        Sc && (e11.focus(), e11.select()), e11.ownerDocument.execCommand(`selectAll`);
      }
      runEditorCommand(e11, t11, n11) {
        let r11 = t11._getViewModel();
        r11 && this.runCoreEditorCommand(r11, n11);
      }
      runCoreEditorCommand(e11, t11) {
        e11.model.pushStackElement(), e11.setCursorStates(`keyboard`, 3, [
          j$.selectAll(e11, e11.getPrimaryCursorState())
        ]);
      }
    }(), e10.SetSelection = W(new class extends E1 {
      constructor() {
        super({
          id: `setSelection`,
          precondition: void 0
        });
      }
      runCoreEditorCommand(e11, t11) {
        t11.selection && (e11.model.pushStackElement(), e11.setCursorStates(t11.source, 3, [
          p$.fromModelSelection(t11.selection)
        ]));
      }
    }());
  })(A1 || (A1 = {}));
  const j1 = Ep.and($.textInputFocus, $.columnSelection);
  function M1(e10, t10) {
    sm.registerKeybindingRule({
      id: e10,
      primary: t10,
      when: j1,
      weight: T1 + 1
    });
  }
  M1(A1.CursorColumnSelectLeft.id, 1039), M1(A1.CursorColumnSelectRight.id, 1041), M1(A1.CursorColumnSelectUp.id, 1040), M1(A1.CursorColumnSelectPageUp.id, 1035), M1(A1.CursorColumnSelectDown.id, 1042), M1(A1.CursorColumnSelectPageDown.id, 1036);
  function N1(e10) {
    return e10.register(), e10;
  }
  (function(e10) {
    class t10 extends Pm {
      runEditorCommand(e11, t11, n10) {
        let r10 = t11._getViewModel();
        r10 && this.runCoreEditingCommand(t11, r10, n10 || {});
      }
    }
    e10.CoreEditingCommand = t10, e10.LineBreakInsert = W(new class extends t10 {
      constructor() {
        super({
          id: `lineBreakInsert`,
          precondition: $.writable,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 0,
            mac: {
              primary: 301
            }
          }
        });
      }
      runCoreEditingCommand(e11, t11, n10) {
        e11.pushUndoStop(), e11.executeCommands(this.id, o1.lineBreakInsert(t11.cursorConfig, t11.model, t11.getCursorStates().map((e12) => e12.modelState.selection)));
      }
    }()), e10.Outdent = W(new class extends t10 {
      constructor() {
        super({
          id: `outdent`,
          precondition: $.writable,
          kbOpts: {
            weight: T1,
            kbExpr: Ep.and($.editorTextFocus, $.tabDoesNotMoveFocus),
            primary: 1026
          }
        });
      }
      runCoreEditingCommand(e11, t11, n10) {
        e11.pushUndoStop(), e11.executeCommands(this.id, C1.outdent(t11.cursorConfig, t11.model, t11.getCursorStates().map((e12) => e12.modelState.selection))), e11.pushUndoStop();
      }
    }()), e10.Tab = W(new class extends t10 {
      constructor() {
        super({
          id: `tab`,
          precondition: $.writable,
          kbOpts: {
            weight: T1,
            kbExpr: Ep.and($.editorTextFocus, $.tabDoesNotMoveFocus),
            primary: 2
          }
        });
      }
      runCoreEditingCommand(e11, t11, n10) {
        e11.pushUndoStop(), e11.executeCommands(this.id, C1.tab(t11.cursorConfig, t11.model, t11.getCursorStates().map((e12) => e12.modelState.selection))), e11.pushUndoStop();
      }
    }()), e10.DeleteLeft = W(new class extends t10 {
      constructor() {
        super({
          id: `deleteLeft`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 1,
            secondary: [
              1025
            ],
            mac: {
              primary: 1,
              secondary: [
                1025,
                294,
                257
              ]
            }
          }
        });
      }
      runCoreEditingCommand(e11, t11, n10) {
        let [r10, i10] = D$.deleteLeft(t11.getPrevEditOperationType(), t11.cursorConfig, t11.model, t11.getCursorStates().map((e12) => e12.modelState.selection), t11.getCursorAutoClosedCharacters());
        r10 && e11.pushUndoStop(), e11.executeCommands(this.id, i10), t11.setPrevEditOperationType(2);
      }
    }()), e10.DeleteRight = W(new class extends t10 {
      constructor() {
        super({
          id: `deleteRight`,
          precondition: void 0,
          kbOpts: {
            weight: T1,
            kbExpr: $.textInputFocus,
            primary: 20,
            mac: {
              primary: 20,
              secondary: [
                290,
                276
              ]
            }
          }
        });
      }
      runCoreEditingCommand(e11, t11, n10) {
        let [r10, i10] = D$.deleteRight(t11.getPrevEditOperationType(), t11.cursorConfig, t11.model, t11.getCursorStates().map((e12) => e12.modelState.selection));
        r10 && e11.pushUndoStop(), e11.executeCommands(this.id, i10), t11.setPrevEditOperationType(3);
      }
    }()), e10.Undo = new class extends k1 {
      constructor() {
        super(qm);
      }
      runDOMCommand(e11) {
        e11.ownerDocument.execCommand(`undo`);
      }
      runEditorCommand(e11, t11, n10) {
        if (!(!t11.hasModel() || t11.getOption(92) === true)) return t11.getModel().undo();
      }
    }(), e10.Redo = new class extends k1 {
      constructor() {
        super(Jm);
      }
      runDOMCommand(e11) {
        e11.ownerDocument.execCommand(`redo`);
      }
      runEditorCommand(e11, t11, n10) {
        if (!(!t11.hasModel() || t11.getOption(92) === true)) return t11.getModel().redo();
      }
    }();
  })(P1 || (P1 = {}));
  var F1 = class extends jm {
    constructor(e10, t10, n10) {
      super({
        id: e10,
        precondition: void 0,
        metadata: n10
      }), this._handlerId = t10;
    }
    runCommand(e10, t10) {
      let n10 = e10.get(Zf).getFocusedCodeEditor();
      n10 && n10.trigger(`keyboard`, this._handlerId, t10);
    }
  };
  function I1(e10, t10) {
    N1(new F1(`default:` + e10, e10)), N1(new F1(e10, e10, t10));
  }
  I1(`type`, {
    description: `Type`,
    args: [
      {
        name: `args`,
        schema: {
          type: `object`,
          required: [
            `text`
          ],
          properties: {
            text: {
              type: `string`
            }
          }
        }
      }
    ]
  }), I1(`replacePreviousChar`), I1(`compositionType`), I1(`compositionStart`), I1(`compositionEnd`), I1(`paste`), I1(`cut`);
  var L1 = class {
    constructor(e10, t10, n10, r10) {
      this.configuration = e10, this.viewModel = t10, this.userInputEvents = n10, this.commandDelegate = r10;
    }
    paste(e10, t10, n10, r10) {
      this.commandDelegate.paste(e10, t10, n10, r10);
    }
    type(e10) {
      this.commandDelegate.type(e10);
    }
    compositionType(e10, t10, n10, r10) {
      this.commandDelegate.compositionType(e10, t10, n10, r10);
    }
    compositionStart() {
      this.commandDelegate.startComposition();
    }
    compositionEnd() {
      this.commandDelegate.endComposition();
    }
    cut() {
      this.commandDelegate.cut();
    }
    setSelection(e10) {
      A1.SetSelection.runCoreEditorCommand(this.viewModel, {
        source: `keyboard`,
        selection: e10
      });
    }
    _validateViewColumn(e10) {
      let t10 = this.viewModel.getLineMinColumn(e10.lineNumber);
      return e10.column < t10 ? new P(e10.lineNumber, t10) : e10;
    }
    _hasMulticursorModifier(e10) {
      switch (this.configuration.options.get(78)) {
        case `altKey`:
          return e10.altKey;
        case `ctrlKey`:
          return e10.ctrlKey;
        case `metaKey`:
          return e10.metaKey;
        default:
          return false;
      }
    }
    _hasNonMulticursorModifier(e10) {
      switch (this.configuration.options.get(78)) {
        case `altKey`:
          return e10.ctrlKey || e10.metaKey;
        case `ctrlKey`:
          return e10.altKey || e10.metaKey;
        case `metaKey`:
          return e10.ctrlKey || e10.altKey;
        default:
          return false;
      }
    }
    dispatchMouse(e10) {
      let t10 = this.configuration.options, n10 = ht && t10.get(108), r10 = t10.get(22);
      e10.middleButton && !n10 ? this._columnSelect(e10.position, e10.mouseColumn, e10.inSelectionMode) : e10.startedOnLineNumbers ? this._hasMulticursorModifier(e10) ? e10.inSelectionMode ? this._lastCursorLineSelect(e10.position, e10.revealType) : this._createCursor(e10.position, true) : e10.inSelectionMode ? this._lineSelectDrag(e10.position, e10.revealType) : this._lineSelect(e10.position, e10.revealType) : e10.mouseDownCount >= 4 ? this._selectAll() : e10.mouseDownCount === 3 ? this._hasMulticursorModifier(e10) ? e10.inSelectionMode ? this._lastCursorLineSelectDrag(e10.position, e10.revealType) : this._lastCursorLineSelect(e10.position, e10.revealType) : e10.inSelectionMode ? this._lineSelectDrag(e10.position, e10.revealType) : this._lineSelect(e10.position, e10.revealType) : e10.mouseDownCount === 2 ? e10.onInjectedText || (this._hasMulticursorModifier(e10) ? this._lastCursorWordSelect(e10.position, e10.revealType) : e10.inSelectionMode ? this._wordSelectDrag(e10.position, e10.revealType) : this._wordSelect(e10.position, e10.revealType)) : this._hasMulticursorModifier(e10) ? this._hasNonMulticursorModifier(e10) || (e10.shiftKey ? this._columnSelect(e10.position, e10.mouseColumn, true) : e10.inSelectionMode ? this._lastCursorMoveToSelect(e10.position, e10.revealType) : this._createCursor(e10.position, false)) : e10.inSelectionMode ? e10.altKey || r10 ? this._columnSelect(e10.position, e10.mouseColumn, true) : this._moveToSelect(e10.position, e10.revealType) : this.moveTo(e10.position, e10.revealType);
    }
    _usualArgs(e10, t10) {
      return e10 = this._validateViewColumn(e10), {
        source: `mouse`,
        position: this._convertViewToModelPosition(e10),
        viewPosition: e10,
        revealType: t10
      };
    }
    moveTo(e10, t10) {
      A1.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _moveToSelect(e10, t10) {
      A1.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _columnSelect(e10, t10, n10) {
      e10 = this._validateViewColumn(e10), A1.ColumnSelect.runCoreEditorCommand(this.viewModel, {
        source: `mouse`,
        position: this._convertViewToModelPosition(e10),
        viewPosition: e10,
        mouseColumn: t10,
        doColumnSelect: n10
      });
    }
    _createCursor(e10, t10) {
      e10 = this._validateViewColumn(e10), A1.CreateCursor.runCoreEditorCommand(this.viewModel, {
        source: `mouse`,
        position: this._convertViewToModelPosition(e10),
        viewPosition: e10,
        wholeLine: t10
      });
    }
    _lastCursorMoveToSelect(e10, t10) {
      A1.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _wordSelect(e10, t10) {
      A1.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _wordSelectDrag(e10, t10) {
      A1.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _lastCursorWordSelect(e10, t10) {
      A1.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _lineSelect(e10, t10) {
      A1.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _lineSelectDrag(e10, t10) {
      A1.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _lastCursorLineSelect(e10, t10) {
      A1.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _lastCursorLineSelectDrag(e10, t10) {
      A1.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(e10, t10));
    }
    _selectAll() {
      A1.SelectAll.runCoreEditorCommand(this.viewModel, {
        source: `mouse`
      });
    }
    _convertViewToModelPosition(e10) {
      return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(e10);
    }
    emitKeyDown(e10) {
      this.userInputEvents.emitKeyDown(e10);
    }
    emitKeyUp(e10) {
      this.userInputEvents.emitKeyUp(e10);
    }
    emitContextMenu(e10) {
      this.userInputEvents.emitContextMenu(e10);
    }
    emitMouseMove(e10) {
      this.userInputEvents.emitMouseMove(e10);
    }
    emitMouseLeave(e10) {
      this.userInputEvents.emitMouseLeave(e10);
    }
    emitMouseUp(e10) {
      this.userInputEvents.emitMouseUp(e10);
    }
    emitMouseDown(e10) {
      this.userInputEvents.emitMouseDown(e10);
    }
    emitMouseDrag(e10) {
      this.userInputEvents.emitMouseDrag(e10);
    }
    emitMouseDrop(e10) {
      this.userInputEvents.emitMouseDrop(e10);
    }
    emitMouseDropCanceled() {
      this.userInputEvents.emitMouseDropCanceled();
    }
    emitMouseWheel(e10) {
      this.userInputEvents.emitMouseWheel(e10);
    }
  }, R1 = class {
    constructor(e10) {
      this._lineFactory = e10, this._set(1, []);
    }
    flush() {
      this._set(1, []);
    }
    _set(e10, t10) {
      this._lines = t10, this._rendLineNumberStart = e10;
    }
    _get() {
      return {
        rendLineNumberStart: this._rendLineNumberStart,
        lines: this._lines
      };
    }
    getStartLineNumber() {
      return this._rendLineNumberStart;
    }
    getEndLineNumber() {
      return this._rendLineNumberStart + this._lines.length - 1;
    }
    getCount() {
      return this._lines.length;
    }
    getLine(e10) {
      let t10 = e10 - this._rendLineNumberStart;
      if (t10 < 0 || t10 >= this._lines.length) throw new Dr(`Illegal value for lineNumber`);
      return this._lines[t10];
    }
    onLinesDeleted(e10, t10) {
      if (this.getCount() === 0) return null;
      let n10 = this.getStartLineNumber(), r10 = this.getEndLineNumber();
      if (t10 < n10) {
        let n11 = t10 - e10 + 1;
        return this._rendLineNumberStart -= n11, null;
      }
      if (e10 > r10) return null;
      let i10 = 0, a10 = 0;
      for (let o11 = n10; o11 <= r10; o11++) {
        let n11 = o11 - this._rendLineNumberStart;
        e10 <= o11 && o11 <= t10 && (a10 === 0 ? (i10 = n11, a10 = 1) : a10++);
      }
      if (e10 < n10) {
        let r11 = 0;
        r11 = t10 < n10 ? t10 - e10 + 1 : n10 - e10, this._rendLineNumberStart -= r11;
      }
      let o10 = this._lines.splice(i10, a10);
      return o10;
    }
    onLinesChanged(e10, t10) {
      let n10 = e10 + t10 - 1;
      if (this.getCount() === 0) return false;
      let r10 = this.getStartLineNumber(), i10 = this.getEndLineNumber(), a10 = false;
      for (let t11 = e10; t11 <= n10; t11++) t11 >= r10 && t11 <= i10 && (this._lines[t11 - this._rendLineNumberStart].onContentChanged(), a10 = true);
      return a10;
    }
    onLinesInserted(e10, t10) {
      if (this.getCount() === 0) return null;
      let n10 = t10 - e10 + 1, r10 = this.getStartLineNumber(), i10 = this.getEndLineNumber();
      if (e10 <= r10) return this._rendLineNumberStart += n10, null;
      if (e10 > i10) return null;
      if (n10 + e10 > i10) {
        let t11 = this._lines.splice(e10 - this._rendLineNumberStart, i10 - e10 + 1);
        return t11;
      }
      let a10 = [];
      for (let e11 = 0; e11 < n10; e11++) a10[e11] = this._lineFactory.createLine();
      let o10 = e10 - this._rendLineNumberStart, s10 = this._lines.slice(0, o10), c10 = this._lines.slice(o10, this._lines.length - n10), l10 = this._lines.slice(this._lines.length - n10, this._lines.length);
      return this._lines = s10.concat(a10).concat(c10), l10;
    }
    onTokensChanged(e10) {
      if (this.getCount() === 0) return false;
      let t10 = this.getStartLineNumber(), n10 = this.getEndLineNumber(), r10 = false;
      for (let i10 = 0, a10 = e10.length; i10 < a10; i10++) {
        let a11 = e10[i10];
        if (a11.toLineNumber < t10 || a11.fromLineNumber > n10) continue;
        let o10 = Math.max(t10, a11.fromLineNumber), s10 = Math.min(n10, a11.toLineNumber);
        for (let e11 = o10; e11 <= s10; e11++) {
          let t11 = e11 - this._rendLineNumberStart;
          this._lines[t11].onTokensChanged(), r10 = true;
        }
      }
      return r10;
    }
  }, z1 = class {
    constructor(e10) {
      this._lineFactory = e10, this.domNode = this._createDomNode(), this._linesCollection = new R1(this._lineFactory);
    }
    _createDomNode() {
      let e10 = Nf(document.createElement(`div`));
      return e10.setClassName(`view-layer`), e10.setPosition(`absolute`), e10.domNode.setAttribute(`role`, `presentation`), e10.domNode.setAttribute(`aria-hidden`, `true`), e10;
    }
    onConfigurationChanged(e10) {
      return !!e10.hasChanged(146);
    }
    onFlushed(e10) {
      return this._linesCollection.flush(), true;
    }
    onLinesChanged(e10) {
      return this._linesCollection.onLinesChanged(e10.fromLineNumber, e10.count);
    }
    onLinesDeleted(e10) {
      let t10 = this._linesCollection.onLinesDeleted(e10.fromLineNumber, e10.toLineNumber);
      if (t10) for (let e11 = 0, n10 = t10.length; e11 < n10; e11++) {
        let n11 = t10[e11].getDomNode();
        n11 == null ? void 0 : n11.remove();
      }
      return true;
    }
    onLinesInserted(e10) {
      let t10 = this._linesCollection.onLinesInserted(e10.fromLineNumber, e10.toLineNumber);
      if (t10) for (let e11 = 0, n10 = t10.length; e11 < n10; e11++) {
        let n11 = t10[e11].getDomNode();
        n11 == null ? void 0 : n11.remove();
      }
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onTokensChanged(e10) {
      return this._linesCollection.onTokensChanged(e10.ranges);
    }
    onZonesChanged(e10) {
      return true;
    }
    getStartLineNumber() {
      return this._linesCollection.getStartLineNumber();
    }
    getEndLineNumber() {
      return this._linesCollection.getEndLineNumber();
    }
    getVisibleLine(e10) {
      return this._linesCollection.getLine(e10);
    }
    renderLines(e10) {
      let t10 = this._linesCollection._get(), n10 = new B1(this.domNode.domNode, this._lineFactory, e10), r10 = {
        rendLineNumberStart: t10.rendLineNumberStart,
        lines: t10.lines,
        linesLength: t10.lines.length
      }, i10 = n10.render(r10, e10.startLineNumber, e10.endLineNumber, e10.relativeVerticalOffset);
      this._linesCollection._set(i10.rendLineNumberStart, i10.lines);
    }
  }, B1 = (_Xa = class {
    constructor(e10, t10, n10) {
      this._domNode = e10, this._lineFactory = t10, this._viewportData = n10;
    }
    render(e10, t10, n10, r10) {
      let i10 = {
        rendLineNumberStart: e10.rendLineNumberStart,
        lines: e10.lines.slice(0),
        linesLength: e10.linesLength
      };
      if (i10.rendLineNumberStart + i10.linesLength - 1 < t10 || n10 < i10.rendLineNumberStart) {
        i10.rendLineNumberStart = t10, i10.linesLength = n10 - t10 + 1, i10.lines = [];
        for (let e11 = t10; e11 <= n10; e11++) i10.lines[e11 - t10] = this._lineFactory.createLine();
        return this._finishRendering(i10, true, r10), i10;
      }
      if (this._renderUntouchedLines(i10, Math.max(t10 - i10.rendLineNumberStart, 0), Math.min(n10 - i10.rendLineNumberStart, i10.linesLength - 1), r10, t10), i10.rendLineNumberStart > t10) {
        let e11 = t10, a10 = Math.min(n10, i10.rendLineNumberStart - 1);
        e11 <= a10 && (this._insertLinesBefore(i10, e11, a10, r10, t10), i10.linesLength += a10 - e11 + 1);
      } else if (i10.rendLineNumberStart < t10) {
        let e11 = Math.min(i10.linesLength, t10 - i10.rendLineNumberStart);
        e11 > 0 && (this._removeLinesBefore(i10, e11), i10.linesLength -= e11);
      }
      if (i10.rendLineNumberStart = t10, i10.rendLineNumberStart + i10.linesLength - 1 < n10) {
        let e11 = i10.rendLineNumberStart + i10.linesLength, a10 = n10;
        e11 <= a10 && (this._insertLinesAfter(i10, e11, a10, r10, t10), i10.linesLength += a10 - e11 + 1);
      } else if (i10.rendLineNumberStart + i10.linesLength - 1 > n10) {
        let e11 = Math.max(0, n10 - i10.rendLineNumberStart + 1), t11 = i10.linesLength - 1, r11 = t11 - e11 + 1;
        r11 > 0 && (this._removeLinesAfter(i10, r11), i10.linesLength -= r11);
      }
      return this._finishRendering(i10, false, r10), i10;
    }
    _renderUntouchedLines(e10, t10, n10, r10, i10) {
      let a10 = e10.rendLineNumberStart, o10 = e10.lines;
      for (let e11 = t10; e11 <= n10; e11++) {
        let t11 = a10 + e11;
        o10[e11].layoutLine(t11, r10[t11 - i10], this._viewportData.lineHeight);
      }
    }
    _insertLinesBefore(e10, t10, n10, r10, i10) {
      let a10 = [], o10 = 0;
      for (let e11 = t10; e11 <= n10; e11++) a10[o10++] = this._lineFactory.createLine();
      e10.lines = a10.concat(e10.lines);
    }
    _removeLinesBefore(e10, t10) {
      for (let n10 = 0; n10 < t10; n10++) {
        let t11 = e10.lines[n10].getDomNode();
        t11 == null ? void 0 : t11.remove();
      }
      e10.lines.splice(0, t10);
    }
    _insertLinesAfter(e10, t10, n10, r10, i10) {
      let a10 = [], o10 = 0;
      for (let e11 = t10; e11 <= n10; e11++) a10[o10++] = this._lineFactory.createLine();
      e10.lines = e10.lines.concat(a10);
    }
    _removeLinesAfter(e10, t10) {
      let n10 = e10.linesLength - t10;
      for (let r10 = 0; r10 < t10; r10++) {
        let t11 = e10.lines[n10 + r10].getDomNode();
        t11 == null ? void 0 : t11.remove();
      }
      e10.lines.splice(n10, t10);
    }
    _finishRenderingNewLines(t10, n10, r10, i10) {
      _Xa._ttPolicy && (r10 = _Xa._ttPolicy.createHTML(r10));
      let a10 = this._domNode.lastChild;
      n10 || !a10 ? this._domNode.innerHTML = r10 : a10.insertAdjacentHTML(`afterend`, r10);
      let o10 = this._domNode.lastChild;
      for (let e10 = t10.linesLength - 1; e10 >= 0; e10--) {
        let n11 = t10.lines[e10];
        i10[e10] && (n11.setDomNode(o10), o10 = o10.previousSibling);
      }
    }
    _finishRenderingInvalidLines(t10, n10, r10) {
      let i10 = document.createElement(`div`);
      _Xa._ttPolicy && (n10 = _Xa._ttPolicy.createHTML(n10)), i10.innerHTML = n10;
      for (let e10 = 0; e10 < t10.linesLength; e10++) {
        let n11 = t10.lines[e10];
        if (r10[e10]) {
          let e11 = i10.firstChild, t11 = n11.getDomNode();
          t11.parentNode.replaceChild(e11, t11), n11.setDomNode(e11);
        }
      }
    }
    _finishRendering(t10, n10, r10) {
      let i10 = _Xa._sb, a10 = t10.linesLength, o10 = t10.lines, s10 = t10.rendLineNumberStart, c10 = [];
      {
        i10.reset();
        let e10 = false;
        for (let t11 = 0; t11 < a10; t11++) {
          let n11 = o10[t11];
          c10[t11] = false;
          let a11 = n11.getDomNode();
          if (a11) continue;
          let l10 = n11.renderLine(t11 + s10, r10[t11], this._viewportData.lineHeight, this._viewportData, i10);
          l10 && (c10[t11] = true, e10 = true);
        }
        e10 && this._finishRenderingNewLines(t10, n10, i10.build(), c10);
      }
      {
        i10.reset();
        let e10 = false, n11 = [];
        for (let t11 = 0; t11 < a10; t11++) {
          let a11 = o10[t11];
          if (n11[t11] = false, c10[t11]) continue;
          let l10 = a11.renderLine(t11 + s10, r10[t11], this._viewportData.lineHeight, this._viewportData, i10);
          l10 && (n11[t11] = true, e10 = true);
        }
        e10 && this._finishRenderingInvalidLines(t10, i10.build(), n11);
      }
    }
  }, _Xa._ttPolicy = lh(`editorViewLayer`, {
    createHTML: (e10) => e10
  }), _Xa._sb = new Gh(1e5), _Xa), V1 = class extends ZZ {
    constructor(e10) {
      super(e10), this._dynamicOverlays = [], this._isFocused = false, this._visibleLines = new z1({
        createLine: () => new H1(this._dynamicOverlays)
      }), this.domNode = this._visibleLines.domNode;
      let t10 = this._context.configuration.options, n10 = t10.get(50);
      Pf(this.domNode, n10), this.domNode.setClassName(`view-overlays`);
    }
    shouldRender() {
      if (super.shouldRender()) return true;
      for (let e10 = 0, t10 = this._dynamicOverlays.length; e10 < t10; e10++) {
        let t11 = this._dynamicOverlays[e10];
        if (t11.shouldRender()) return true;
      }
      return false;
    }
    dispose() {
      super.dispose();
      for (let e10 = 0, t10 = this._dynamicOverlays.length; e10 < t10; e10++) {
        let t11 = this._dynamicOverlays[e10];
        t11.dispose();
      }
      this._dynamicOverlays = [];
    }
    getDomNode() {
      return this.domNode;
    }
    addDynamicOverlay(e10) {
      this._dynamicOverlays.push(e10);
    }
    onConfigurationChanged(e10) {
      this._visibleLines.onConfigurationChanged(e10);
      let t10 = this._context.configuration.options, n10 = t10.get(50);
      return Pf(this.domNode, n10), true;
    }
    onFlushed(e10) {
      return this._visibleLines.onFlushed(e10);
    }
    onFocusChanged(e10) {
      return this._isFocused = e10.isFocused, true;
    }
    onLinesChanged(e10) {
      return this._visibleLines.onLinesChanged(e10);
    }
    onLinesDeleted(e10) {
      return this._visibleLines.onLinesDeleted(e10);
    }
    onLinesInserted(e10) {
      return this._visibleLines.onLinesInserted(e10);
    }
    onScrollChanged(e10) {
      return this._visibleLines.onScrollChanged(e10) || true;
    }
    onTokensChanged(e10) {
      return this._visibleLines.onTokensChanged(e10);
    }
    onZonesChanged(e10) {
      return this._visibleLines.onZonesChanged(e10);
    }
    prepareRender(e10) {
      let t10 = this._dynamicOverlays.filter((e11) => e11.shouldRender());
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) {
        let r11 = t10[n10];
        r11.prepareRender(e10), r11.onDidRender();
      }
    }
    render(e10) {
      this._viewOverlaysRender(e10), this.domNode.toggleClassName(`focused`, this._isFocused);
    }
    _viewOverlaysRender(e10) {
      this._visibleLines.renderLines(e10.viewportData);
    }
  }, H1 = class {
    constructor(e10) {
      this._dynamicOverlays = e10, this._domNode = null, this._renderedContent = null;
    }
    getDomNode() {
      return this._domNode ? this._domNode.domNode : null;
    }
    setDomNode(e10) {
      this._domNode = Nf(e10);
    }
    onContentChanged() {
    }
    onTokensChanged() {
    }
    renderLine(e10, t10, n10, r10, i10) {
      let a10 = ``;
      for (let t11 = 0, n11 = this._dynamicOverlays.length; t11 < n11; t11++) {
        let n12 = this._dynamicOverlays[t11];
        a10 += n12.render(r10.startLineNumber, e10);
      }
      return this._renderedContent === a10 ? false : (this._renderedContent = a10, i10.appendString(`<div style="top:`), i10.appendString(String(t10)), i10.appendString(`px;height:`), i10.appendString(String(n10)), i10.appendString(`px;">`), i10.appendString(a10), i10.appendString(`</div>`), true);
    }
    layoutLine(e10, t10, n10) {
      this._domNode && (this._domNode.setTop(t10), this._domNode.setHeight(n10));
    }
  }, U1 = class extends V1 {
    constructor(e10) {
      super(e10);
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._contentWidth = n10.contentWidth, this.domNode.setHeight(0);
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._contentWidth = n10.contentWidth, super.onConfigurationChanged(e10) || true;
    }
    onScrollChanged(e10) {
      return super.onScrollChanged(e10) || e10.scrollWidthChanged;
    }
    _viewOverlaysRender(e10) {
      super._viewOverlaysRender(e10), this.domNode.setWidth(Math.max(e10.scrollWidth, this._contentWidth));
    }
  }, W1 = class extends V1 {
    constructor(e10) {
      super(e10);
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._contentLeft = n10.contentLeft, this.domNode.setClassName(`margin-view-overlays`), this.domNode.setWidth(1), Pf(this.domNode, t10.get(50));
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      Pf(this.domNode, t10.get(50));
      let n10 = t10.get(146);
      return this._contentLeft = n10.contentLeft, super.onConfigurationChanged(e10) || true;
    }
    onScrollChanged(e10) {
      return super.onScrollChanged(e10) || e10.scrollHeightChanged;
    }
    _viewOverlaysRender(e10) {
      super._viewOverlaysRender(e10);
      let t10 = Math.min(e10.scrollHeight, 1e6);
      this.domNode.setHeight(t10), this.domNode.setWidth(this._contentLeft);
    }
  }, G1 = class e10 {
    constructor(e11) {
      this.onKeyDown = null, this.onKeyUp = null, this.onContextMenu = null, this.onMouseMove = null, this.onMouseLeave = null, this.onMouseDown = null, this.onMouseUp = null, this.onMouseDrag = null, this.onMouseDrop = null, this.onMouseDropCanceled = null, this.onMouseWheel = null, this._coordinatesConverter = e11;
    }
    emitKeyDown(e11) {
      var _a3;
      (_a3 = this.onKeyDown) == null ? void 0 : _a3.call(this, e11);
    }
    emitKeyUp(e11) {
      var _a3;
      (_a3 = this.onKeyUp) == null ? void 0 : _a3.call(this, e11);
    }
    emitContextMenu(e11) {
      var _a3;
      (_a3 = this.onContextMenu) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseMove(e11) {
      var _a3;
      (_a3 = this.onMouseMove) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseLeave(e11) {
      var _a3;
      (_a3 = this.onMouseLeave) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseDown(e11) {
      var _a3;
      (_a3 = this.onMouseDown) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseUp(e11) {
      var _a3;
      (_a3 = this.onMouseUp) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseDrag(e11) {
      var _a3;
      (_a3 = this.onMouseDrag) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseDrop(e11) {
      var _a3;
      (_a3 = this.onMouseDrop) == null ? void 0 : _a3.call(this, this._convertViewToModelMouseEvent(e11));
    }
    emitMouseDropCanceled() {
      var _a3;
      (_a3 = this.onMouseDropCanceled) == null ? void 0 : _a3.call(this);
    }
    emitMouseWheel(e11) {
      var _a3;
      (_a3 = this.onMouseWheel) == null ? void 0 : _a3.call(this, e11);
    }
    _convertViewToModelMouseEvent(e11) {
      return e11.target ? {
        event: e11.event,
        target: this._convertViewToModelMouseTarget(e11.target)
      } : e11;
    }
    _convertViewToModelMouseTarget(t10) {
      return e10.convertViewToModelMouseTarget(t10, this._coordinatesConverter);
    }
    static convertViewToModelMouseTarget(e11, t10) {
      let n10 = {
        ...e11
      };
      return n10.position && (n10.position = t10.convertViewPositionToModelPosition(n10.position)), n10.range && (n10.range = t10.convertViewRangeToModelRange(n10.range)), (n10.type === 5 || n10.type === 8) && (n10.detail = this.convertViewToModelViewZoneData(n10.detail, t10)), n10;
    }
    static convertViewToModelViewZoneData(e11, t10) {
      return {
        viewZoneId: e11.viewZoneId,
        positionBefore: e11.positionBefore ? t10.convertViewPositionToModelPosition(e11.positionBefore) : e11.positionBefore,
        positionAfter: e11.positionAfter ? t10.convertViewPositionToModelPosition(e11.positionAfter) : e11.positionAfter,
        position: t10.convertViewPositionToModelPosition(e11.position),
        afterLineNumber: t10.convertViewPositionToModelPosition(new P(e11.afterLineNumber, 1)).lineNumber
      };
    }
  }, K1 = class extends ZZ {
    constructor(e10) {
      super(e10), this.blocks = [], this.contentWidth = -1, this.contentLeft = 0, this.domNode = Nf(document.createElement(`div`)), this.domNode.setAttribute(`role`, `presentation`), this.domNode.setAttribute(`aria-hidden`, `true`), this.domNode.setClassName(`blockDecorations-container`), this.update();
    }
    update() {
      let e10 = false, t10 = this._context.configuration.options, n10 = t10.get(146), r10 = n10.contentWidth - n10.verticalScrollbarWidth;
      this.contentWidth !== r10 && (this.contentWidth = r10, e10 = true);
      let i10 = n10.contentLeft;
      return this.contentLeft !== i10 && (this.contentLeft = i10, e10 = true), e10;
    }
    dispose() {
      super.dispose();
    }
    onConfigurationChanged(e10) {
      return this.update();
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged || e10.scrollLeftChanged;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onZonesChanged(e10) {
      return true;
    }
    prepareRender(e10) {
    }
    render(e10) {
      let t10 = 0, n10 = e10.getDecorationsInViewport();
      for (let r10 of n10) {
        if (!r10.options.blockClassName) continue;
        let n11 = this.blocks[t10];
        n11 || (n11 = this.blocks[t10] = Nf(document.createElement(`div`)), this.domNode.appendChild(n11));
        let i10, a10;
        r10.options.blockIsAfterEnd ? (i10 = e10.getVerticalOffsetAfterLineNumber(r10.range.endLineNumber, false), a10 = e10.getVerticalOffsetAfterLineNumber(r10.range.endLineNumber, true)) : (i10 = e10.getVerticalOffsetForLineNumber(r10.range.startLineNumber, true), a10 = r10.range.isEmpty() && !r10.options.blockDoesNotCollapse ? e10.getVerticalOffsetForLineNumber(r10.range.startLineNumber, false) : e10.getVerticalOffsetAfterLineNumber(r10.range.endLineNumber, true));
        let [o10, s10, c10, l10] = r10.options.blockPadding ?? [
          0,
          0,
          0,
          0
        ];
        n11.setClassName(`blockDecorations-block ` + r10.options.blockClassName), n11.setLeft(this.contentLeft - l10), n11.setWidth(this.contentWidth + l10 + s10), n11.setTop(i10 - e10.scrollTop - o10), n11.setHeight(a10 - i10 + o10 + c10), t10++;
      }
      for (let e11 = t10; e11 < this.blocks.length; e11++) this.blocks[e11].domNode.remove();
      this.blocks.length = t10;
    }
  }, q1 = class extends ZZ {
    constructor(e10, t10) {
      super(e10), this._viewDomNode = t10, this._widgets = {}, this.domNode = Nf(document.createElement(`div`)), QZ.write(this.domNode, 1), this.domNode.setClassName(`contentWidgets`), this.domNode.setPosition(`absolute`), this.domNode.setTop(0), this.overflowingContentWidgetsDomNode = Nf(document.createElement(`div`)), QZ.write(this.overflowingContentWidgetsDomNode, 2), this.overflowingContentWidgetsDomNode.setClassName(`overflowingContentWidgets`);
    }
    dispose() {
      super.dispose(), this._widgets = {};
    }
    onConfigurationChanged(e10) {
      let t10 = Object.keys(this._widgets);
      for (let n10 of t10) this._widgets[n10].onConfigurationChanged(e10);
      return true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLineMappingChanged(e10) {
      return this._updateAnchorsViewPositions(), true;
    }
    onLinesChanged(e10) {
      return this._updateAnchorsViewPositions(), true;
    }
    onLinesDeleted(e10) {
      return this._updateAnchorsViewPositions(), true;
    }
    onLinesInserted(e10) {
      return this._updateAnchorsViewPositions(), true;
    }
    onScrollChanged(e10) {
      return true;
    }
    onZonesChanged(e10) {
      return true;
    }
    _updateAnchorsViewPositions() {
      let e10 = Object.keys(this._widgets);
      for (let t10 of e10) this._widgets[t10].updateAnchorViewPosition();
    }
    addWidget(e10) {
      let t10 = new J1(this._context, this._viewDomNode, e10);
      this._widgets[t10.id] = t10, t10.allowEditorOverflow ? this.overflowingContentWidgetsDomNode.appendChild(t10.domNode) : this.domNode.appendChild(t10.domNode), this.setShouldRender();
    }
    setWidgetPosition(e10, t10, n10, r10, i10) {
      let a10 = this._widgets[e10.getId()];
      a10.setPosition(t10, n10, r10, i10), this.setShouldRender();
    }
    removeWidget(e10) {
      let t10 = e10.getId();
      if (this._widgets.hasOwnProperty(t10)) {
        let e11 = this._widgets[t10];
        delete this._widgets[t10];
        let n10 = e11.domNode.domNode;
        n10.remove(), n10.removeAttribute(`monaco-visible-content-widget`), this.setShouldRender();
      }
    }
    shouldSuppressMouseDownOnWidget(e10) {
      return this._widgets.hasOwnProperty(e10) ? this._widgets[e10].suppressMouseDown : false;
    }
    onBeforeRender(e10) {
      let t10 = Object.keys(this._widgets);
      for (let n10 of t10) this._widgets[n10].onBeforeRender(e10);
    }
    prepareRender(e10) {
      let t10 = Object.keys(this._widgets);
      for (let n10 of t10) this._widgets[n10].prepareRender(e10);
    }
    render(e10) {
      let t10 = Object.keys(this._widgets);
      for (let n10 of t10) this._widgets[n10].render(e10);
    }
  }, J1 = class {
    constructor(e10, t10, n10) {
      this._primaryAnchor = new Y1(null, null), this._secondaryAnchor = new Y1(null, null), this._context = e10, this._viewDomNode = t10, this._actual = n10, this.domNode = Nf(this._actual.getDomNode()), this.id = this._actual.getId(), this.allowEditorOverflow = this._actual.allowEditorOverflow || false, this.suppressMouseDown = this._actual.suppressMouseDown || false;
      let r10 = this._context.configuration.options, i10 = r10.get(146);
      this._fixedOverflowWidgets = r10.get(42), this._contentWidth = i10.contentWidth, this._contentLeft = i10.contentLeft, this._lineHeight = r10.get(67), this._affinity = null, this._preference = [], this._cachedDomNodeOffsetWidth = -1, this._cachedDomNodeOffsetHeight = -1, this._maxWidth = this._getMaxWidth(), this._isVisible = false, this._renderData = null, this.domNode.setPosition(this._fixedOverflowWidgets && this.allowEditorOverflow ? `fixed` : `absolute`), this.domNode.setDisplay(`none`), this.domNode.setVisibility(`hidden`), this.domNode.setAttribute(`widgetId`, this.id), this.domNode.setMaxWidth(this._maxWidth);
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      if (this._lineHeight = t10.get(67), e10.hasChanged(146)) {
        let e11 = t10.get(146);
        this._contentLeft = e11.contentLeft, this._contentWidth = e11.contentWidth, this._maxWidth = this._getMaxWidth();
      }
    }
    updateAnchorViewPosition() {
      this._setPosition(this._affinity, this._primaryAnchor.modelPosition, this._secondaryAnchor.modelPosition);
    }
    _setPosition(e10, t10, n10) {
      this._affinity = e10, this._primaryAnchor = r10(t10, this._context.viewModel, this._affinity), this._secondaryAnchor = r10(n10, this._context.viewModel, this._affinity);
      function r10(e11, t11, n11) {
        if (!e11) return new Y1(null, null);
        let r11 = t11.model.validatePosition(e11);
        if (t11.coordinatesConverter.modelPositionIsVisible(r11)) {
          let i10 = t11.coordinatesConverter.convertModelPositionToViewPosition(r11, n11 ?? void 0);
          return new Y1(e11, i10);
        }
        return new Y1(e11, null);
      }
    }
    _getMaxWidth() {
      let e10 = this.domNode.domNode.ownerDocument, t10 = e10.defaultView;
      return this.allowEditorOverflow ? (t10 == null ? void 0 : t10.innerWidth) || e10.documentElement.offsetWidth || e10.body.offsetWidth : this._contentWidth;
    }
    setPosition(e10, t10, n10, r10) {
      this._setPosition(r10, e10, t10), this._preference = n10, this._primaryAnchor.viewPosition && this._preference && this._preference.length > 0 ? this.domNode.setDisplay(`block`) : this.domNode.setDisplay(`none`), this._cachedDomNodeOffsetWidth = -1, this._cachedDomNodeOffsetHeight = -1;
    }
    _layoutBoxInViewport(e10, t10, n10, r10) {
      let i10 = e10.top, a10 = i10, o10 = e10.top + e10.height, s10 = r10.viewportHeight - o10, c10 = i10 - n10, l10 = a10 >= n10, u10 = o10, d10 = s10 >= n10, f10 = e10.left;
      return f10 + t10 > r10.scrollLeft + r10.viewportWidth && (f10 = r10.scrollLeft + r10.viewportWidth - t10), f10 < r10.scrollLeft && (f10 = r10.scrollLeft), {
        fitsAbove: l10,
        aboveTop: c10,
        fitsBelow: d10,
        belowTop: u10,
        left: f10
      };
    }
    _layoutHorizontalSegmentInPage(e10, t10, n10, r10) {
      let i10 = 15, a10 = 15, o10 = Math.max(i10, t10.left - r10), s10 = Math.min(t10.left + t10.width + r10, e10.width - a10), c10 = this._viewDomNode.domNode.ownerDocument, l10 = c10.defaultView, u10 = t10.left + n10 - ((l10 == null ? void 0 : l10.scrollX) ?? 0);
      if (u10 + r10 > s10) {
        let e11 = u10 - (s10 - r10);
        u10 -= e11, n10 -= e11;
      }
      if (u10 < o10) {
        let e11 = u10 - o10;
        u10 -= e11, n10 -= e11;
      }
      return [
        n10,
        u10
      ];
    }
    _layoutBoxInPage(e10, t10, n10, r10) {
      let i10 = e10.top - n10, a10 = e10.top + e10.height, o10 = gd(this._viewDomNode.domNode), s10 = this._viewDomNode.domNode.ownerDocument, c10 = s10.defaultView, l10 = o10.top + i10 - ((c10 == null ? void 0 : c10.scrollY) ?? 0), u10 = o10.top + a10 - ((c10 == null ? void 0 : c10.scrollY) ?? 0), d10 = dd(s10.body), [f10, p10] = this._layoutHorizontalSegmentInPage(d10, o10, e10.left - r10.scrollLeft + this._contentLeft, t10), m10 = 22, h10 = 22, g10 = l10 >= m10, _10 = u10 + n10 <= d10.height - h10;
      return this._fixedOverflowWidgets ? {
        fitsAbove: g10,
        aboveTop: Math.max(l10, m10),
        fitsBelow: _10,
        belowTop: u10,
        left: p10
      } : {
        fitsAbove: g10,
        aboveTop: i10,
        fitsBelow: _10,
        belowTop: a10,
        left: f10
      };
    }
    _prepareRenderWidgetAtExactPositionOverflowing(e10) {
      return new X1(e10.top, e10.left + this._contentLeft);
    }
    _getAnchorsCoordinates(e10) {
      var _a3, _b3;
      let t10 = i10(this._primaryAnchor.viewPosition, this._affinity, this._lineHeight), n10 = ((_a3 = this._secondaryAnchor.viewPosition) == null ? void 0 : _a3.lineNumber) === ((_b3 = this._primaryAnchor.viewPosition) == null ? void 0 : _b3.lineNumber) ? this._secondaryAnchor.viewPosition : null, r10 = i10(n10, this._affinity, this._lineHeight);
      return {
        primary: t10,
        secondary: r10
      };
      function i10(t11, n11, r11) {
        if (!t11) return null;
        let i11 = e10.visibleRangeForPosition(t11);
        if (!i11) return null;
        let a10 = t11.column === 1 && n11 === 3 ? 0 : i11.left, o10 = e10.getVerticalOffsetForLineNumber(t11.lineNumber) - e10.scrollTop;
        return new Z1(o10, a10, r11);
      }
    }
    _reduceAnchorCoordinates(e10, t10, n10) {
      if (!t10) return e10;
      let r10 = this._context.configuration.options.get(50), i10 = t10.left;
      return i10 = i10 < e10.left ? Math.max(i10, e10.left - n10 + r10.typicalFullwidthCharacterWidth) : Math.min(i10, e10.left + n10 - r10.typicalFullwidthCharacterWidth), new Z1(e10.top, i10, e10.height);
    }
    _prepareRenderWidget(e10) {
      if (!this._preference || this._preference.length === 0) return null;
      let { primary: t10, secondary: n10 } = this._getAnchorsCoordinates(e10);
      if (!t10) return {
        kind: `offViewport`,
        preserveFocus: this.domNode.domNode.contains(this.domNode.domNode.ownerDocument.activeElement)
      };
      if (this._cachedDomNodeOffsetWidth === -1 || this._cachedDomNodeOffsetHeight === -1) {
        let e11 = null;
        if (typeof this._actual.beforeRender == `function` && (e11 = Q1(this._actual.beforeRender, this._actual)), e11) this._cachedDomNodeOffsetWidth = e11.width, this._cachedDomNodeOffsetHeight = e11.height;
        else {
          let e12 = this.domNode.domNode, t11 = e12.getBoundingClientRect();
          this._cachedDomNodeOffsetWidth = Math.round(t11.width), this._cachedDomNodeOffsetHeight = Math.round(t11.height);
        }
      }
      let r10 = this._reduceAnchorCoordinates(t10, n10, this._cachedDomNodeOffsetWidth), i10;
      i10 = this.allowEditorOverflow ? this._layoutBoxInPage(r10, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, e10) : this._layoutBoxInViewport(r10, this._cachedDomNodeOffsetWidth, this._cachedDomNodeOffsetHeight, e10);
      for (let e11 = 1; e11 <= 2; e11++) for (let t11 of this._preference) if (t11 === 1) {
        if (!i10) return null;
        if (e11 === 2 || i10.fitsAbove) return {
          kind: `inViewport`,
          coordinate: new X1(i10.aboveTop, i10.left),
          position: 1
        };
      } else if (t11 === 2) {
        if (!i10) return null;
        if (e11 === 2 || i10.fitsBelow) return {
          kind: `inViewport`,
          coordinate: new X1(i10.belowTop, i10.left),
          position: 2
        };
      } else if (this.allowEditorOverflow) return {
        kind: `inViewport`,
        coordinate: this._prepareRenderWidgetAtExactPositionOverflowing(new X1(r10.top, r10.left)),
        position: 0
      };
      else return {
        kind: `inViewport`,
        coordinate: new X1(r10.top, r10.left),
        position: 0
      };
      return null;
    }
    onBeforeRender(e10) {
      !this._primaryAnchor.viewPosition || !this._preference || this._primaryAnchor.viewPosition.lineNumber < e10.startLineNumber || this._primaryAnchor.viewPosition.lineNumber > e10.endLineNumber || this.domNode.setMaxWidth(this._maxWidth);
    }
    prepareRender(e10) {
      this._renderData = this._prepareRenderWidget(e10);
    }
    render(e10) {
      var _a3;
      if (!this._renderData || this._renderData.kind === `offViewport`) {
        this._isVisible && (this.domNode.removeAttribute(`monaco-visible-content-widget`), this._isVisible = false, ((_a3 = this._renderData) == null ? void 0 : _a3.kind) === `offViewport` && this._renderData.preserveFocus ? this.domNode.setTop(-1e3) : this.domNode.setVisibility(`hidden`)), typeof this._actual.afterRender == `function` && Q1(this._actual.afterRender, this._actual, null);
        return;
      }
      this.allowEditorOverflow ? (this.domNode.setTop(this._renderData.coordinate.top), this.domNode.setLeft(this._renderData.coordinate.left)) : (this.domNode.setTop(this._renderData.coordinate.top + e10.scrollTop - e10.bigNumbersDelta), this.domNode.setLeft(this._renderData.coordinate.left)), this._isVisible || (this.domNode.setVisibility(`inherit`), this.domNode.setAttribute(`monaco-visible-content-widget`, `true`), this._isVisible = true), typeof this._actual.afterRender == `function` && Q1(this._actual.afterRender, this._actual, this._renderData.position);
    }
  }, Y1 = class {
    constructor(e10, t10) {
      this.modelPosition = e10, this.viewPosition = t10;
    }
  }, X1 = class {
    constructor(e10, t10) {
      this.top = e10, this.left = t10, this._coordinateBrand = void 0;
    }
  }, Z1 = class {
    constructor(e10, t10, n10) {
      this.top = e10, this.left = t10, this.height = n10, this._anchorCoordinateBrand = void 0;
    }
  };
  function Q1(e10, t10, ...n10) {
    try {
      return e10.call(t10, ...n10);
    } catch {
      return null;
    }
  }
  var $1 = class extends $Q {
    constructor(e10) {
      super(), this._context = e10;
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._renderLineHighlight = t10.get(97), this._renderLineHighlightOnlyWhenFocus = t10.get(98), this._wordWrap = n10.isViewportWrapping, this._contentLeft = n10.contentLeft, this._contentWidth = n10.contentWidth, this._selectionIsEmpty = true, this._focused = false, this._cursorLineNumbers = [
        1
      ], this._selections = [
        new Ma(1, 1, 1, 1)
      ], this._renderData = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), super.dispose();
    }
    _readFromSelections() {
      let e10 = false, t10 = /* @__PURE__ */ new Set();
      for (let e11 of this._selections) t10.add(e11.positionLineNumber);
      let n10 = Array.from(t10);
      n10.sort((e11, t11) => e11 - t11), l(this._cursorLineNumbers, n10) || (this._cursorLineNumbers = n10, e10 = true);
      let r10 = this._selections.every((e11) => e11.isEmpty());
      return this._selectionIsEmpty !== r10 && (this._selectionIsEmpty = r10, e10 = true), e10;
    }
    onThemeChanged(e10) {
      return this._readFromSelections();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._renderLineHighlight = t10.get(97), this._renderLineHighlightOnlyWhenFocus = t10.get(98), this._wordWrap = n10.isViewportWrapping, this._contentLeft = n10.contentLeft, this._contentWidth = n10.contentWidth, true;
    }
    onCursorStateChanged(e10) {
      return this._selections = e10.selections, this._readFromSelections();
    }
    onFlushed(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollWidthChanged || e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    onFocusChanged(e10) {
      return this._renderLineHighlightOnlyWhenFocus ? (this._focused = e10.isFocused, true) : false;
    }
    prepareRender(e10) {
      if (!this._shouldRenderThis()) {
        this._renderData = null;
        return;
      }
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber, r10 = [];
      for (let e11 = t10; e11 <= n10; e11++) {
        let n11 = e11 - t10;
        r10[n11] = ``;
      }
      if (this._wordWrap) {
        let i11 = this._renderOne(e10, false);
        for (let e11 of this._cursorLineNumbers) {
          let a10 = this._context.viewModel.coordinatesConverter, o10 = a10.convertViewPositionToModelPosition(new P(e11, 1)).lineNumber, s10 = a10.convertModelPositionToViewPosition(new P(o10, 1)).lineNumber, c10 = a10.convertModelPositionToViewPosition(new P(o10, this._context.viewModel.model.getLineMaxColumn(o10))).lineNumber, l10 = Math.max(s10, t10), u10 = Math.min(c10, n10);
          for (let e12 = l10; e12 <= u10; e12++) {
            let n11 = e12 - t10;
            r10[n11] = i11;
          }
        }
      }
      let i10 = this._renderOne(e10, true);
      for (let e11 of this._cursorLineNumbers) {
        if (e11 < t10 || e11 > n10) continue;
        let a10 = e11 - t10;
        r10[a10] = i10;
      }
      this._renderData = r10;
    }
    render(e10, t10) {
      if (!this._renderData) return ``;
      let n10 = t10 - e10;
      return n10 >= this._renderData.length ? `` : this._renderData[n10];
    }
    _shouldRenderInMargin() {
      return (this._renderLineHighlight === `gutter` || this._renderLineHighlight === `all`) && (!this._renderLineHighlightOnlyWhenFocus || this._focused);
    }
    _shouldRenderInContent() {
      return (this._renderLineHighlight === `line` || this._renderLineHighlight === `all`) && this._selectionIsEmpty && (!this._renderLineHighlightOnlyWhenFocus || this._focused);
    }
  }, e0 = class extends $1 {
    _renderOne(e10, t10) {
      let n10 = `current-line` + (this._shouldRenderInMargin() ? ` current-line-both` : ``) + (t10 ? ` current-line-exact` : ``);
      return `<div class="${n10}" style="width:${Math.max(e10.scrollWidth, this._contentWidth)}px;"></div>`;
    }
    _shouldRenderThis() {
      return this._shouldRenderInContent();
    }
    _shouldRenderOther() {
      return this._shouldRenderInMargin();
    }
  }, t0 = class extends $1 {
    _renderOne(e10, t10) {
      let n10 = `current-line` + (this._shouldRenderInMargin() ? ` current-line-margin` : ``) + (this._shouldRenderOther() ? ` current-line-margin-both` : ``) + (this._shouldRenderInMargin() && t10 ? ` current-line-exact-margin` : ``);
      return `<div class="${n10}" style="width:${this._contentLeft}px"></div>`;
    }
    _shouldRenderThis() {
      return true;
    }
    _shouldRenderOther() {
      return this._shouldRenderInContent();
    }
  };
  qb((e10, t10) => {
    let n10 = e10.getColor(iL);
    if (n10 && (t10.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${n10}; }`), t10.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${n10}; border: none; }`)), !n10 || n10.isTransparent() || e10.defines(aL)) {
      let n11 = e10.getColor(aL);
      n11 && (t10.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${n11}; }`), t10.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${n11}; }`), zb(e10.type) && (t10.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`), t10.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`)));
    }
  });
  var n0 = class extends $Q {
    constructor(e10) {
      super(), this._context = e10;
      let t10 = this._context.configuration.options;
      this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth, this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      return this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth, true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged || e10.scrollWidthChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    prepareRender(e10) {
      let t10 = e10.getDecorationsInViewport(), n10 = [], r10 = 0;
      for (let e11 = 0, i11 = t10.length; e11 < i11; e11++) {
        let i12 = t10[e11];
        i12.options.className && (n10[r10++] = i12);
      }
      n10 = n10.sort((e11, t11) => {
        if (e11.options.zIndex < t11.options.zIndex) return -1;
        if (e11.options.zIndex > t11.options.zIndex) return 1;
        let n11 = e11.options.className, r11 = t11.options.className;
        return n11 < r11 ? -1 : n11 > r11 ? 1 : F.compareRangesUsingStarts(e11.range, t11.range);
      });
      let i10 = e10.visibleRange.startLineNumber, a10 = e10.visibleRange.endLineNumber, o10 = [];
      for (let e11 = i10; e11 <= a10; e11++) {
        let t11 = e11 - i10;
        o10[t11] = ``;
      }
      this._renderWholeLineDecorations(e10, n10, o10), this._renderNormalDecorations(e10, n10, o10), this._renderResult = o10;
    }
    _renderWholeLineDecorations(e10, t10, n10) {
      let r10 = e10.visibleRange.startLineNumber, i10 = e10.visibleRange.endLineNumber;
      for (let e11 = 0, a10 = t10.length; e11 < a10; e11++) {
        let a11 = t10[e11];
        if (!a11.options.isWholeLine) continue;
        let o10 = `<div class="cdr ` + a11.options.className + `" style="left:0;width:100%;"></div>`, s10 = Math.max(a11.range.startLineNumber, r10), c10 = Math.min(a11.range.endLineNumber, i10);
        for (let e12 = s10; e12 <= c10; e12++) {
          let t11 = e12 - r10;
          n10[t11] += o10;
        }
      }
    }
    _renderNormalDecorations(e10, t10, n10) {
      let r10 = e10.visibleRange.startLineNumber, i10 = null, a10 = false, o10 = null, s10 = false;
      for (let c10 = 0, l10 = t10.length; c10 < l10; c10++) {
        let l11 = t10[c10];
        if (l11.options.isWholeLine) continue;
        let u10 = l11.options.className, d10 = !!l11.options.showIfCollapsed, f10 = l11.range;
        if (d10 && f10.endColumn === 1 && f10.endLineNumber !== f10.startLineNumber && (f10 = new F(f10.startLineNumber, f10.startColumn, f10.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(f10.endLineNumber - 1))), i10 === u10 && a10 === d10 && F.areIntersectingOrTouching(o10, f10)) {
          o10 = F.plusRange(o10, f10);
          continue;
        }
        i10 !== null && this._renderNormalDecoration(e10, o10, i10, s10, a10, r10, n10), i10 = u10, a10 = d10, o10 = f10, s10 = l11.options.shouldFillLineOnLineBreak ?? false;
      }
      i10 !== null && this._renderNormalDecoration(e10, o10, i10, s10, a10, r10, n10);
    }
    _renderNormalDecoration(e10, t10, n10, r10, i10, a10, o10) {
      let s10 = e10.linesVisibleRangesForRange(t10, n10 === `findMatch`);
      if (s10) for (let e11 = 0, t11 = s10.length; e11 < t11; e11++) {
        let t12 = s10[e11];
        if (t12.outsideRenderedLine) continue;
        let c10 = t12.lineNumber - a10;
        if (i10 && t12.ranges.length === 1) {
          let e12 = t12.ranges[0];
          if (e12.width < this._typicalHalfwidthCharacterWidth) {
            let n11 = Math.round(e12.left + e12.width / 2), r11 = Math.max(0, Math.round(n11 - this._typicalHalfwidthCharacterWidth / 2));
            t12.ranges[0] = new nQ(r11, this._typicalHalfwidthCharacterWidth);
          }
        }
        for (let e12 = 0, i11 = t12.ranges.length; e12 < i11; e12++) {
          let a11 = r10 && t12.continuesOnNextLine && i11 === 1, s11 = t12.ranges[e12], l10 = `<div class="cdr ` + n10 + `" style="left:` + String(s11.left) + `px;width:` + (a11 ? `100%;` : String(s11.width) + `px;`) + `"></div>`;
          o10[c10] += l10;
        }
      }
    }
    render(e10, t10) {
      if (!this._renderResult) return ``;
      let n10 = t10 - e10;
      return n10 < 0 || n10 >= this._renderResult.length ? `` : this._renderResult[n10];
    }
  }, r0 = class extends ZZ {
    constructor(e10, t10, n10, r10) {
      super(e10);
      let i10 = this._context.configuration.options, a10 = i10.get(104), o10 = i10.get(75), s10 = i10.get(40), c10 = i10.get(107), l10 = {
        listenOnDomNode: n10.domNode,
        className: `editor-scrollable ` + Ub(e10.theme.type),
        useShadows: false,
        lazyRender: true,
        vertical: a10.vertical,
        horizontal: a10.horizontal,
        verticalHasArrows: a10.verticalHasArrows,
        horizontalHasArrows: a10.horizontalHasArrows,
        verticalScrollbarSize: a10.verticalScrollbarSize,
        verticalSliderSize: a10.verticalSliderSize,
        horizontalScrollbarSize: a10.horizontalScrollbarSize,
        horizontalSliderSize: a10.horizontalSliderSize,
        handleMouseWheel: a10.handleMouseWheel,
        alwaysConsumeMouseWheel: a10.alwaysConsumeMouseWheel,
        arrowSize: a10.arrowSize,
        mouseWheelScrollSensitivity: o10,
        fastScrollSensitivity: s10,
        scrollPredominantAxis: c10,
        scrollByPage: a10.scrollByPage
      };
      this.scrollbar = this._register(new lD(t10.domNode, l10, this._context.viewLayout.getScrollable())), QZ.write(this.scrollbar.getDomNode(), 6), this.scrollbarDomNode = Nf(this.scrollbar.getDomNode()), this.scrollbarDomNode.setPosition(`absolute`), this._setLayout();
      let u10 = (e11, t11, n11) => {
        let r11 = {};
        if (t11) {
          let t12 = e11.scrollTop;
          t12 && (r11.scrollTop = this._context.viewLayout.getCurrentScrollTop() + t12, e11.scrollTop = 0);
        }
        if (n11) {
          let t12 = e11.scrollLeft;
          t12 && (r11.scrollLeft = this._context.viewLayout.getCurrentScrollLeft() + t12, e11.scrollLeft = 0);
        }
        this._context.viewModel.viewLayout.setScrollPosition(r11, 1);
      };
      this._register(z(n10.domNode, `scroll`, (e11) => u10(n10.domNode, true, true))), this._register(z(t10.domNode, `scroll`, (e11) => u10(t10.domNode, true, false))), this._register(z(r10.domNode, `scroll`, (e11) => u10(r10.domNode, true, false))), this._register(z(this.scrollbarDomNode.domNode, `scroll`, (e11) => u10(this.scrollbarDomNode.domNode, true, false)));
    }
    dispose() {
      super.dispose();
    }
    _setLayout() {
      let e10 = this._context.configuration.options, t10 = e10.get(146);
      this.scrollbarDomNode.setLeft(t10.contentLeft);
      let n10 = e10.get(73), r10 = n10.side;
      r10 === `right` ? this.scrollbarDomNode.setWidth(t10.contentWidth + t10.minimap.minimapWidth) : this.scrollbarDomNode.setWidth(t10.contentWidth), this.scrollbarDomNode.setHeight(t10.height);
    }
    getOverviewRulerLayoutInfo() {
      return this.scrollbar.getOverviewRulerLayoutInfo();
    }
    getDomNode() {
      return this.scrollbarDomNode;
    }
    delegateVerticalScrollbarPointerDown(e10) {
      this.scrollbar.delegateVerticalScrollbarPointerDown(e10);
    }
    delegateScrollFromMouseWheelEvent(e10) {
      this.scrollbar.delegateScrollFromMouseWheelEvent(e10);
    }
    onConfigurationChanged(e10) {
      if (e10.hasChanged(104) || e10.hasChanged(75) || e10.hasChanged(40)) {
        let e11 = this._context.configuration.options, t10 = e11.get(104), n10 = e11.get(75), r10 = e11.get(40), i10 = e11.get(107), a10 = {
          vertical: t10.vertical,
          horizontal: t10.horizontal,
          verticalScrollbarSize: t10.verticalScrollbarSize,
          horizontalScrollbarSize: t10.horizontalScrollbarSize,
          scrollByPage: t10.scrollByPage,
          handleMouseWheel: t10.handleMouseWheel,
          mouseWheelScrollSensitivity: n10,
          fastScrollSensitivity: r10,
          scrollPredominantAxis: i10
        };
        this.scrollbar.updateOptions(a10);
      }
      return e10.hasChanged(146) && this._setLayout(), true;
    }
    onScrollChanged(e10) {
      return true;
    }
    onThemeChanged(e10) {
      return this.scrollbar.updateClassName(`editor-scrollable ` + Ub(this._context.theme.type)), true;
    }
    prepareRender(e10) {
    }
    render(e10) {
      this.scrollbar.renderNow();
    }
  }, i0 = class {
    constructor(e10, t10, n10, r10, i10) {
      this.startLineNumber = e10, this.endLineNumber = t10, this.className = n10, this.tooltip = r10, this._decorationToRenderBrand = void 0, this.zIndex = i10 ?? 0;
    }
  }, a0 = class {
    constructor(e10, t10, n10) {
      this.className = e10, this.zIndex = t10, this.tooltip = n10;
    }
  }, o0 = class {
    constructor() {
      this.decorations = [];
    }
    add(e10) {
      this.decorations.push(e10);
    }
    getDecorations() {
      return this.decorations;
    }
  }, s0 = class extends $Q {
    _render(e10, t10, n10) {
      let r10 = [];
      for (let n11 = e10; n11 <= t10; n11++) {
        let t11 = n11 - e10;
        r10[t11] = new o0();
      }
      if (n10.length === 0) return r10;
      n10.sort((e11, t11) => e11.className === t11.className ? e11.startLineNumber === t11.startLineNumber ? e11.endLineNumber - t11.endLineNumber : e11.startLineNumber - t11.startLineNumber : e11.className < t11.className ? -1 : 1);
      let i10 = null, a10 = 0;
      for (let o10 = 0, s10 = n10.length; o10 < s10; o10++) {
        let s11 = n10[o10], c10 = s11.className, l10 = s11.zIndex, u10 = Math.max(s11.startLineNumber, e10) - e10, d10 = Math.min(s11.endLineNumber, t10) - e10;
        i10 === c10 ? (u10 = Math.max(a10 + 1, u10), a10 = Math.max(a10, d10)) : (i10 = c10, a10 = d10);
        for (let e11 = u10; e11 <= a10; e11++) r10[e11].add(new a0(c10, l10, s11.tooltip));
      }
      return r10;
    }
  }, c0 = class extends ZZ {
    constructor(e10) {
      super(e10), this._widgets = {}, this._context = e10;
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this.domNode = Nf(document.createElement(`div`)), this.domNode.setClassName(`glyph-margin-widgets`), this.domNode.setPosition(`absolute`), this.domNode.setTop(0), this._lineHeight = t10.get(67), this._glyphMargin = t10.get(57), this._glyphMarginLeft = n10.glyphMarginLeft, this._glyphMarginWidth = n10.glyphMarginWidth, this._glyphMarginDecorationLaneCount = n10.glyphMarginDecorationLaneCount, this._managedDomNodes = [], this._decorationGlyphsToRender = [];
    }
    dispose() {
      this._managedDomNodes = [], this._decorationGlyphsToRender = [], this._widgets = {}, super.dispose();
    }
    getWidgets() {
      return Object.values(this._widgets);
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._lineHeight = t10.get(67), this._glyphMargin = t10.get(57), this._glyphMarginLeft = n10.glyphMarginLeft, this._glyphMarginWidth = n10.glyphMarginWidth, this._glyphMarginDecorationLaneCount = n10.glyphMarginDecorationLaneCount, true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    addWidget(e10) {
      let t10 = Nf(e10.getDomNode());
      this._widgets[e10.getId()] = {
        widget: e10,
        preference: e10.getPosition(),
        domNode: t10,
        renderInfo: null
      }, t10.setPosition(`absolute`), t10.setDisplay(`none`), t10.setAttribute(`widgetId`, e10.getId()), this.domNode.appendChild(t10), this.setShouldRender();
    }
    setWidgetPosition(e10, t10) {
      let n10 = this._widgets[e10.getId()];
      return n10.preference.lane === t10.lane && n10.preference.zIndex === t10.zIndex && F.equalsRange(n10.preference.range, t10.range) ? false : (n10.preference = t10, this.setShouldRender(), true);
    }
    removeWidget(e10) {
      let t10 = e10.getId();
      if (this._widgets[t10]) {
        let e11 = this._widgets[t10], n10 = e11.domNode.domNode;
        delete this._widgets[t10], n10.remove(), this.setShouldRender();
      }
    }
    _collectDecorationBasedGlyphRenderRequest(e10, t10) {
      var _a3;
      let n10 = e10.visibleRange.startLineNumber, r10 = e10.visibleRange.endLineNumber, i10 = e10.getDecorationsInViewport();
      for (let e11 of i10) {
        let i11 = e11.options.glyphMarginClassName;
        if (!i11) continue;
        let a10 = Math.max(e11.range.startLineNumber, n10), o10 = Math.min(e11.range.endLineNumber, r10), s10 = ((_a3 = e11.options.glyphMargin) == null ? void 0 : _a3.position) ?? Q_.Center, c10 = e11.options.zIndex ?? 0;
        for (let e12 = a10; e12 <= o10; e12++) {
          let n11 = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new P(e12, 0)), r11 = this._context.viewModel.glyphLanes.getLanesAtLine(n11.lineNumber).indexOf(s10);
          t10.push(new l0(e12, r11, c10, i11));
        }
      }
    }
    _collectWidgetBasedGlyphRenderRequest(e10, t10) {
      let n10 = e10.visibleRange.startLineNumber, r10 = e10.visibleRange.endLineNumber;
      for (let e11 of Object.values(this._widgets)) {
        let i10 = e11.preference.range, { startLineNumber: a10, endLineNumber: o10 } = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(F.lift(i10));
        if (!a10 || !o10 || o10 < n10 || a10 > r10) continue;
        let s10 = Math.max(a10, n10), c10 = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new P(s10, 0)), l10 = this._context.viewModel.glyphLanes.getLanesAtLine(c10.lineNumber).indexOf(e11.preference.lane);
        t10.push(new u0(s10, l10, e11.preference.zIndex, e11));
      }
    }
    _collectSortedGlyphRenderRequests(e10) {
      let t10 = [];
      return this._collectDecorationBasedGlyphRenderRequest(e10, t10), this._collectWidgetBasedGlyphRenderRequest(e10, t10), t10.sort((e11, t11) => e11.lineNumber === t11.lineNumber ? e11.laneIndex === t11.laneIndex ? e11.zIndex === t11.zIndex ? t11.type === e11.type ? e11.type === 0 && t11.type === 0 ? e11.className < t11.className ? -1 : 1 : 0 : t11.type - e11.type : t11.zIndex - e11.zIndex : e11.laneIndex - t11.laneIndex : e11.lineNumber - t11.lineNumber), t10;
    }
    prepareRender(e10) {
      if (!this._glyphMargin) {
        this._decorationGlyphsToRender = [];
        return;
      }
      for (let e11 of Object.values(this._widgets)) e11.renderInfo = null;
      let t10 = new me(this._collectSortedGlyphRenderRequests(e10)), n10 = [];
      for (; t10.length > 0; ) {
        let e11 = t10.peek();
        if (!e11) break;
        let r10 = t10.takeWhile((t11) => t11.lineNumber === e11.lineNumber && t11.laneIndex === e11.laneIndex);
        if (!r10 || r10.length === 0) break;
        let i10 = r10[0];
        if (i10.type === 0) {
          let e12 = [];
          for (let t11 of r10) {
            if (t11.zIndex !== i10.zIndex || t11.type !== i10.type) break;
            (e12.length === 0 || e12[e12.length - 1] !== t11.className) && e12.push(t11.className);
          }
          n10.push(i10.accept(e12.join(` `)));
        } else i10.widget.renderInfo = {
          lineNumber: i10.lineNumber,
          laneIndex: i10.laneIndex
        };
      }
      this._decorationGlyphsToRender = n10;
    }
    render(e10) {
      if (!this._glyphMargin) {
        for (let e11 of Object.values(this._widgets)) e11.domNode.setDisplay(`none`);
        for (; this._managedDomNodes.length > 0; ) {
          let e11 = this._managedDomNodes.pop();
          e11 == null ? void 0 : e11.domNode.remove();
        }
        return;
      }
      let t10 = Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount);
      for (let n10 of Object.values(this._widgets)) if (!n10.renderInfo) n10.domNode.setDisplay(`none`);
      else {
        let r10 = e10.viewportData.relativeVerticalOffset[n10.renderInfo.lineNumber - e10.viewportData.startLineNumber], i10 = this._glyphMarginLeft + n10.renderInfo.laneIndex * this._lineHeight;
        n10.domNode.setDisplay(`block`), n10.domNode.setTop(r10), n10.domNode.setLeft(i10), n10.domNode.setWidth(t10), n10.domNode.setHeight(this._lineHeight);
      }
      for (let n10 = 0; n10 < this._decorationGlyphsToRender.length; n10++) {
        let r10 = this._decorationGlyphsToRender[n10], i10 = e10.viewportData.relativeVerticalOffset[r10.lineNumber - e10.viewportData.startLineNumber], a10 = this._glyphMarginLeft + r10.laneIndex * this._lineHeight, o10;
        n10 < this._managedDomNodes.length ? o10 = this._managedDomNodes[n10] : (o10 = Nf(document.createElement(`div`)), this._managedDomNodes.push(o10), this.domNode.appendChild(o10)), o10.setClassName(`cgmr codicon ` + r10.combinedClassName), o10.setPosition(`absolute`), o10.setTop(i10), o10.setLeft(a10), o10.setWidth(t10), o10.setHeight(this._lineHeight);
      }
      for (; this._managedDomNodes.length > this._decorationGlyphsToRender.length; ) {
        let e11 = this._managedDomNodes.pop();
        e11 == null ? void 0 : e11.domNode.remove();
      }
    }
  }, l0 = class {
    constructor(e10, t10, n10, r10) {
      this.lineNumber = e10, this.laneIndex = t10, this.zIndex = n10, this.className = r10, this.type = 0;
    }
    accept(e10) {
      return new d0(this.lineNumber, this.laneIndex, e10);
    }
  }, u0 = class {
    constructor(e10, t10, n10, r10) {
      this.lineNumber = e10, this.laneIndex = t10, this.zIndex = n10, this.widget = r10, this.type = 1;
    }
  }, d0 = class {
    constructor(e10, t10, n10) {
      this.lineNumber = e10, this.laneIndex = t10, this.combinedClassName = n10;
    }
  }, f0 = class extends $Q {
    constructor(e10) {
      super(), this._context = e10, this._primaryPosition = null;
      let t10 = this._context.configuration.options, n10 = t10.get(147), r10 = t10.get(50);
      this._spaceWidth = r10.spaceWidth, this._maxIndentLeft = n10.wrappingColumn === -1 ? -1 : n10.wrappingColumn * r10.typicalHalfwidthCharacterWidth, this._bracketPairGuideOptions = t10.get(16), this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(147), r10 = t10.get(50);
      return this._spaceWidth = r10.spaceWidth, this._maxIndentLeft = n10.wrappingColumn === -1 ? -1 : n10.wrappingColumn * r10.typicalHalfwidthCharacterWidth, this._bracketPairGuideOptions = t10.get(16), true;
    }
    onCursorStateChanged(e10) {
      var _a3;
      let t10 = e10.selections[0], n10 = t10.getPosition();
      return ((_a3 = this._primaryPosition) == null ? void 0 : _a3.equals(n10)) ? false : (this._primaryPosition = n10, true);
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    onLanguageConfigurationChanged(e10) {
      return true;
    }
    prepareRender(e10) {
      var _a3, _b3;
      if (!this._bracketPairGuideOptions.indentation && this._bracketPairGuideOptions.bracketPairs === false) {
        this._renderResult = null;
        return;
      }
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber, r10 = e10.scrollWidth, i10 = this._primaryPosition, a10 = this.getGuidesByLine(t10, Math.min(n10 + 1, this._context.viewModel.getLineCount()), i10), o10 = [];
      for (let i11 = t10; i11 <= n10; i11++) {
        let n11 = i11 - t10, s10 = a10[n11], c10 = ``, l10 = ((_a3 = e10.visibleRangeForPosition(new P(i11, 1))) == null ? void 0 : _a3.left) ?? 0;
        for (let t11 of s10) {
          let n12 = t11.column === -1 ? l10 + (t11.visibleColumn - 1) * this._spaceWidth : e10.visibleRangeForPosition(new P(i11, t11.column)).left;
          if (n12 > r10 || this._maxIndentLeft > 0 && n12 > this._maxIndentLeft) break;
          let a11 = t11.horizontalLine ? t11.horizontalLine.top ? `horizontal-top` : `horizontal-bottom` : `vertical`, o11 = t11.horizontalLine ? (((_b3 = e10.visibleRangeForPosition(new P(i11, t11.horizontalLine.endColumn))) == null ? void 0 : _b3.left) ?? n12 + this._spaceWidth) - n12 : this._spaceWidth;
          c10 += `<div class="core-guide ${t11.className} ${a11}" style="left:${n12}px;width:${o11}px"></div>`;
        }
        o10[n11] = c10;
      }
      this._renderResult = o10;
    }
    getGuidesByLine(e10, t10, n10) {
      let r10 = this._bracketPairGuideOptions.bracketPairs === false ? null : this._context.viewModel.getBracketGuidesInRangeByLine(e10, t10, n10, {
        highlightActive: this._bracketPairGuideOptions.highlightActiveBracketPair,
        horizontalGuides: this._bracketPairGuideOptions.bracketPairsHorizontal === true ? Qz.Enabled : this._bracketPairGuideOptions.bracketPairsHorizontal === `active` ? Qz.EnabledForActive : Qz.Disabled,
        includeInactive: this._bracketPairGuideOptions.bracketPairs === true
      }), i10 = this._bracketPairGuideOptions.indentation ? this._context.viewModel.getLinesIndentGuides(e10, t10) : null, a10 = 0, o10 = 0, s10 = 0;
      if (this._bracketPairGuideOptions.highlightActiveIndentation !== false && n10) {
        let r11 = this._context.viewModel.getActiveIndentGuide(n10.lineNumber, e10, t10);
        a10 = r11.startLineNumber, o10 = r11.endLineNumber, s10 = r11.indent;
      }
      let { indentSize: c10 } = this._context.viewModel.model.getOptions(), l10 = [];
      for (let n11 = e10; n11 <= t10; n11++) {
        let t11 = [];
        l10.push(t11);
        let u10 = r10 ? r10[n11 - e10] : [], d10 = new me(u10), f10 = i10 ? i10[n11 - e10] : 0;
        for (let e11 = 1; e11 <= f10; e11++) {
          let r11 = (e11 - 1) * c10 + 1, i11 = (this._bracketPairGuideOptions.highlightActiveIndentation === `always` || u10.length === 0) && a10 <= n11 && n11 <= o10 && e11 === s10;
          t11.push(...d10.takeWhile((e12) => e12.visibleColumn < r11) || []);
          let l11 = d10.peek();
          (!l11 || l11.visibleColumn !== r11 || l11.horizontalLine) && t11.push(new $z(r11, -1, `core-guide-indent lvl-${(e11 - 1) % 30}` + (i11 ? ` indent-active` : ``), null, -1, -1));
        }
        t11.push(...d10.takeWhile((e11) => true) || []);
      }
      return l10;
    }
    render(e10, t10) {
      if (!this._renderResult) return ``;
      let n10 = t10 - e10;
      return n10 < 0 || n10 >= this._renderResult.length ? `` : this._renderResult[n10];
    }
  };
  function p0(e10) {
    if (!(e10 && e10.isTransparent())) return e10;
  }
  qb((e10, t10) => {
    let n10 = [
      {
        bracketColor: WL,
        guideColor: ZL,
        guideColorActive: rR
      },
      {
        bracketColor: GL,
        guideColor: QL,
        guideColorActive: iR
      },
      {
        bracketColor: KL,
        guideColor: $L,
        guideColorActive: aR
      },
      {
        bracketColor: qL,
        guideColor: eR,
        guideColorActive: oR
      },
      {
        bracketColor: JL,
        guideColor: tR,
        guideColorActive: sR
      },
      {
        bracketColor: YL,
        guideColor: nR,
        guideColorActive: cR
      }
    ], r10 = new nB(), i10 = [
      {
        indentColor: gL,
        indentColorActive: SL
      },
      {
        indentColor: _L,
        indentColorActive: CL
      },
      {
        indentColor: vL,
        indentColorActive: wL
      },
      {
        indentColor: yL,
        indentColorActive: TL
      },
      {
        indentColor: bL,
        indentColorActive: EL
      },
      {
        indentColor: xL,
        indentColorActive: DL
      }
    ], a10 = n10.map((t11) => {
      let n11 = e10.getColor(t11.bracketColor), r11 = e10.getColor(t11.guideColor), i11 = e10.getColor(t11.guideColorActive), a11 = p0(p0(r11) ?? (n11 == null ? void 0 : n11.transparent(0.3))), o11 = p0(p0(i11) ?? n11);
      if (!(!a11 || !o11)) return {
        guideColor: a11,
        guideColorActive: o11
      };
    }).filter(we), o10 = i10.map((t11) => {
      let n11 = e10.getColor(t11.indentColor), r11 = e10.getColor(t11.indentColorActive), i11 = p0(n11), a11 = p0(r11);
      if (!(!i11 || !a11)) return {
        indentColor: i11,
        indentColorActive: a11
      };
    }).filter(we);
    if (a10.length > 0) {
      for (let e11 = 0; e11 < 30; e11++) {
        let n11 = a10[e11 % a10.length];
        t10.addRule(`.monaco-editor .${r10.getInlineClassNameOfLevel(e11).replace(/ /g, `.`)} { --guide-color: ${n11.guideColor}; --guide-color-active: ${n11.guideColorActive}; }`);
      }
      t10.addRule(`.monaco-editor .vertical { box-shadow: 1px 0 0 0 var(--guide-color) inset; }`), t10.addRule(`.monaco-editor .horizontal-top { border-top: 1px solid var(--guide-color); }`), t10.addRule(`.monaco-editor .horizontal-bottom { border-bottom: 1px solid var(--guide-color); }`), t10.addRule(`.monaco-editor .vertical.${r10.activeClassName} { box-shadow: 1px 0 0 0 var(--guide-color-active) inset; }`), t10.addRule(`.monaco-editor .horizontal-top.${r10.activeClassName} { border-top: 1px solid var(--guide-color-active); }`), t10.addRule(`.monaco-editor .horizontal-bottom.${r10.activeClassName} { border-bottom: 1px solid var(--guide-color-active); }`);
    }
    if (o10.length > 0) {
      for (let e11 = 0; e11 < 30; e11++) {
        let n11 = o10[e11 % o10.length];
        t10.addRule(`.monaco-editor .lines-content .core-guide-indent.lvl-${e11} { --indent-color: ${n11.indentColor}; --indent-color-active: ${n11.indentColorActive}; }`);
      }
      t10.addRule(`.monaco-editor .lines-content .core-guide-indent { box-shadow: 1px 0 0 0 var(--indent-color) inset; }`), t10.addRule(`.monaco-editor .lines-content .core-guide-indent.indent-active { box-shadow: 1px 0 0 0 var(--indent-color-active) inset; }`);
    }
  });
  var m0 = class {
    get didDomLayout() {
      return this._didDomLayout;
    }
    readClientRect() {
      if (!this._clientRectRead) {
        this._clientRectRead = true;
        let e10 = this._domNode.getBoundingClientRect();
        this.markDidDomLayout(), this._clientRectDeltaLeft = e10.left, this._clientRectScale = e10.width / this._domNode.offsetWidth;
      }
    }
    get clientRectDeltaLeft() {
      return this._clientRectRead || this.readClientRect(), this._clientRectDeltaLeft;
    }
    get clientRectScale() {
      return this._clientRectRead || this.readClientRect(), this._clientRectScale;
    }
    constructor(e10, t10) {
      this._domNode = e10, this.endNode = t10, this._didDomLayout = false, this._clientRectDeltaLeft = 0, this._clientRectScale = 1, this._clientRectRead = false;
    }
    markDidDomLayout() {
      this._didDomLayout = true;
    }
  }, h0 = class {
    constructor() {
      this._currentVisibleRange = new F(1, 1, 1, 1);
    }
    getCurrentVisibleRange() {
      return this._currentVisibleRange;
    }
    setCurrentVisibleRange(e10) {
      this._currentVisibleRange = e10;
    }
  }, g0 = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.minimalReveal = e10, this.lineNumber = t10, this.startColumn = n10, this.endColumn = r10, this.startScrollTop = i10, this.stopScrollTop = a10, this.scrollType = o10, this.type = `range`, this.minLineNumber = t10, this.maxLineNumber = t10;
    }
  }, _0 = class {
    constructor(e10, t10, n10, r10, i10) {
      this.minimalReveal = e10, this.selections = t10, this.startScrollTop = n10, this.stopScrollTop = r10, this.scrollType = i10, this.type = `selections`;
      let a10 = t10[0].startLineNumber, o10 = t10[0].endLineNumber;
      for (let e11 = 1, n11 = t10.length; e11 < n11; e11++) {
        let n12 = t10[e11];
        a10 = Math.min(a10, n12.startLineNumber), o10 = Math.max(o10, n12.endLineNumber);
      }
      this.minLineNumber = a10, this.maxLineNumber = o10;
    }
  }, v0 = (_Ya = class extends ZZ {
    constructor(e10, t10) {
      super(e10);
      let n10 = this._context.configuration, r10 = this._context.configuration.options, i10 = r10.get(50), a10 = r10.get(147);
      this._lineHeight = r10.get(67), this._typicalHalfwidthCharacterWidth = i10.typicalHalfwidthCharacterWidth, this._isViewportWrapping = a10.isViewportWrapping, this._revealHorizontalRightPadding = r10.get(101), this._cursorSurroundingLines = r10.get(29), this._cursorSurroundingLinesStyle = r10.get(30), this._canUseLayerHinting = !r10.get(32), this._viewLineOptions = new lQ(n10, this._context.theme.type), this._linesContent = t10, this._textRangeRestingSpot = document.createElement(`div`), this._visibleLines = new z1({
        createLine: () => new uQ(this._viewLineOptions)
      }), this.domNode = this._visibleLines.domNode, QZ.write(this.domNode, 8), this.domNode.setClassName(`view-lines ${n$}`), Pf(this.domNode, i10), this._maxLineWidth = 0, this._asyncUpdateLineWidths = new cl(() => {
        this._updateLineWidthsSlow();
      }, 200), this._asyncCheckMonospaceFontAssumptions = new cl(() => {
        this._checkMonospaceFontAssumptions();
      }, 2e3), this._lastRenderedData = new h0(), this._horizontalRevealRequest = null, this._stickyScrollEnabled = r10.get(116).enabled, this._maxNumberStickyLines = r10.get(116).maxLineCount;
    }
    dispose() {
      this._asyncUpdateLineWidths.dispose(), this._asyncCheckMonospaceFontAssumptions.dispose(), super.dispose();
    }
    getDomNode() {
      return this.domNode;
    }
    onConfigurationChanged(e10) {
      this._visibleLines.onConfigurationChanged(e10), e10.hasChanged(147) && (this._maxLineWidth = 0);
      let t10 = this._context.configuration.options, n10 = t10.get(50), r10 = t10.get(147);
      return this._lineHeight = t10.get(67), this._typicalHalfwidthCharacterWidth = n10.typicalHalfwidthCharacterWidth, this._isViewportWrapping = r10.isViewportWrapping, this._revealHorizontalRightPadding = t10.get(101), this._cursorSurroundingLines = t10.get(29), this._cursorSurroundingLinesStyle = t10.get(30), this._canUseLayerHinting = !t10.get(32), this._stickyScrollEnabled = t10.get(116).enabled, this._maxNumberStickyLines = t10.get(116).maxLineCount, Pf(this.domNode, n10), this._onOptionsMaybeChanged(), e10.hasChanged(146) && (this._maxLineWidth = 0), true;
    }
    _onOptionsMaybeChanged() {
      let e10 = this._context.configuration, t10 = new lQ(e10, this._context.theme.type);
      if (!this._viewLineOptions.equals(t10)) {
        this._viewLineOptions = t10;
        let e11 = this._visibleLines.getStartLineNumber(), n10 = this._visibleLines.getEndLineNumber();
        for (let t11 = e11; t11 <= n10; t11++) {
          let e12 = this._visibleLines.getVisibleLine(t11);
          e12.onOptionsChanged(this._viewLineOptions);
        }
        return true;
      }
      return false;
    }
    onCursorStateChanged(e10) {
      let t10 = this._visibleLines.getStartLineNumber(), n10 = this._visibleLines.getEndLineNumber(), r10 = false;
      for (let e11 = t10; e11 <= n10; e11++) r10 = this._visibleLines.getVisibleLine(e11).onSelectionChanged() || r10;
      return r10;
    }
    onDecorationsChanged(e10) {
      {
        let e11 = this._visibleLines.getStartLineNumber(), t10 = this._visibleLines.getEndLineNumber();
        for (let n10 = e11; n10 <= t10; n10++) this._visibleLines.getVisibleLine(n10).onDecorationsChanged();
      }
      return true;
    }
    onFlushed(e10) {
      let t10 = this._visibleLines.onFlushed(e10);
      return this._maxLineWidth = 0, t10;
    }
    onLinesChanged(e10) {
      return this._visibleLines.onLinesChanged(e10);
    }
    onLinesDeleted(e10) {
      return this._visibleLines.onLinesDeleted(e10);
    }
    onLinesInserted(e10) {
      return this._visibleLines.onLinesInserted(e10);
    }
    onRevealRangeRequest(e10) {
      let t10 = this._computeScrollTopToRevealRange(this._context.viewLayout.getFutureViewport(), e10.source, e10.minimalReveal, e10.range, e10.selections, e10.verticalType);
      if (t10 === -1) return false;
      let n10 = this._context.viewLayout.validateScrollPosition({
        scrollTop: t10
      });
      e10.revealHorizontal ? e10.range && e10.range.startLineNumber !== e10.range.endLineNumber ? n10 = {
        scrollTop: n10.scrollTop,
        scrollLeft: 0
      } : e10.range ? this._horizontalRevealRequest = new g0(e10.minimalReveal, e10.range.startLineNumber, e10.range.startColumn, e10.range.endColumn, this._context.viewLayout.getCurrentScrollTop(), n10.scrollTop, e10.scrollType) : e10.selections && e10.selections.length > 0 && (this._horizontalRevealRequest = new _0(e10.minimalReveal, e10.selections, this._context.viewLayout.getCurrentScrollTop(), n10.scrollTop, e10.scrollType)) : this._horizontalRevealRequest = null;
      let r10 = Math.abs(this._context.viewLayout.getCurrentScrollTop() - n10.scrollTop), i10 = r10 <= this._lineHeight ? 1 : e10.scrollType;
      return this._context.viewModel.viewLayout.setScrollPosition(n10, i10), true;
    }
    onScrollChanged(e10) {
      if (this._horizontalRevealRequest && e10.scrollLeftChanged && (this._horizontalRevealRequest = null), this._horizontalRevealRequest && e10.scrollTopChanged) {
        let t10 = Math.min(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop), n10 = Math.max(this._horizontalRevealRequest.startScrollTop, this._horizontalRevealRequest.stopScrollTop);
        (e10.scrollTop < t10 || e10.scrollTop > n10) && (this._horizontalRevealRequest = null);
      }
      return this.domNode.setWidth(e10.scrollWidth), this._visibleLines.onScrollChanged(e10) || true;
    }
    onTokensChanged(e10) {
      return this._visibleLines.onTokensChanged(e10);
    }
    onZonesChanged(e10) {
      return this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth), this._visibleLines.onZonesChanged(e10);
    }
    onThemeChanged(e10) {
      return this._onOptionsMaybeChanged();
    }
    getPositionFromDOMInfo(e10, t10) {
      let n10 = this._getViewLineDomNode(e10);
      if (n10 === null) return null;
      let r10 = this._getLineNumberFor(n10);
      if (r10 === -1 || r10 < 1 || r10 > this._context.viewModel.getLineCount()) return null;
      if (this._context.viewModel.getLineMaxColumn(r10) === 1) return new P(r10, 1);
      let i10 = this._visibleLines.getStartLineNumber(), a10 = this._visibleLines.getEndLineNumber();
      if (r10 < i10 || r10 > a10) return null;
      let o10 = this._visibleLines.getVisibleLine(r10).getColumnOfNodeOffset(e10, t10), s10 = this._context.viewModel.getLineMinColumn(r10);
      return o10 < s10 && (o10 = s10), new P(r10, o10);
    }
    _getViewLineDomNode(e10) {
      for (; e10 && e10.nodeType === 1; ) {
        if (e10.className === uQ.CLASS_NAME) return e10;
        e10 = e10.parentElement;
      }
      return null;
    }
    _getLineNumberFor(e10) {
      let t10 = this._visibleLines.getStartLineNumber(), n10 = this._visibleLines.getEndLineNumber();
      for (let r10 = t10; r10 <= n10; r10++) {
        let t11 = this._visibleLines.getVisibleLine(r10);
        if (e10 === t11.getDomNode()) return r10;
      }
      return -1;
    }
    getLineWidth(e10) {
      let t10 = this._visibleLines.getStartLineNumber(), n10 = this._visibleLines.getEndLineNumber();
      if (e10 < t10 || e10 > n10) return -1;
      let r10 = new m0(this.domNode.domNode, this._textRangeRestingSpot), i10 = this._visibleLines.getVisibleLine(e10).getWidth(r10);
      return this._updateLineWidthsSlowIfDomDidLayout(r10), i10;
    }
    linesVisibleRangesForRange(e10, t10) {
      if (this.shouldRender()) return null;
      let n10 = e10.endLineNumber, r10 = F.intersectRanges(e10, this._lastRenderedData.getCurrentVisibleRange());
      if (!r10) return null;
      let i10 = [], a10 = 0, o10 = new m0(this.domNode.domNode, this._textRangeRestingSpot), s10 = 0;
      t10 && (s10 = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new P(r10.startLineNumber, 1)).lineNumber);
      let c10 = this._visibleLines.getStartLineNumber(), l10 = this._visibleLines.getEndLineNumber();
      for (let e11 = r10.startLineNumber; e11 <= r10.endLineNumber; e11++) {
        if (e11 < c10 || e11 > l10) continue;
        let u10 = e11 === r10.startLineNumber ? r10.startColumn : 1, d10 = e11 !== r10.endLineNumber, f10 = d10 ? this._context.viewModel.getLineMaxColumn(e11) : r10.endColumn, p10 = this._visibleLines.getVisibleLine(e11).getVisibleRangesForRange(e11, u10, f10, o10);
        if (p10) {
          if (t10 && e11 < n10) {
            let t11 = s10;
            s10 = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new P(e11 + 1, 1)).lineNumber, t11 !== s10 && (p10.ranges[p10.ranges.length - 1].width += this._typicalHalfwidthCharacterWidth);
          }
          i10[a10++] = new tQ(p10.outsideRenderedLine, e11, nQ.from(p10.ranges), d10);
        }
      }
      return this._updateLineWidthsSlowIfDomDidLayout(o10), a10 === 0 ? null : i10;
    }
    _visibleRangesForLineRange(e10, t10, n10) {
      if (this.shouldRender() || e10 < this._visibleLines.getStartLineNumber() || e10 > this._visibleLines.getEndLineNumber()) return null;
      let r10 = new m0(this.domNode.domNode, this._textRangeRestingSpot), i10 = this._visibleLines.getVisibleLine(e10).getVisibleRangesForRange(e10, t10, n10, r10);
      return this._updateLineWidthsSlowIfDomDidLayout(r10), i10;
    }
    visibleRangeForPosition(e10) {
      let t10 = this._visibleRangesForLineRange(e10.lineNumber, e10.column, e10.column);
      return t10 ? new iQ(t10.outsideRenderedLine, t10.ranges[0].left) : null;
    }
    _updateLineWidthsFast() {
      return this._updateLineWidths(true);
    }
    _updateLineWidthsSlow() {
      this._updateLineWidths(false);
    }
    _updateLineWidthsSlowIfDomDidLayout(e10) {
      e10.didDomLayout && (this._asyncUpdateLineWidths.isScheduled() || (this._asyncUpdateLineWidths.cancel(), this._updateLineWidthsSlow()));
    }
    _updateLineWidths(e10) {
      let t10 = this._visibleLines.getStartLineNumber(), n10 = this._visibleLines.getEndLineNumber(), r10 = 1, i10 = true;
      for (let a10 = t10; a10 <= n10; a10++) {
        let t11 = this._visibleLines.getVisibleLine(a10);
        if (e10 && !t11.getWidthIsFast()) {
          i10 = false;
          continue;
        }
        r10 = Math.max(r10, t11.getWidth(null));
      }
      return i10 && t10 === 1 && n10 === this._context.viewModel.getLineCount() && (this._maxLineWidth = 0), this._ensureMaxLineWidth(r10), i10;
    }
    _checkMonospaceFontAssumptions() {
      let e10 = -1, t10 = -1, n10 = this._visibleLines.getStartLineNumber(), r10 = this._visibleLines.getEndLineNumber();
      for (let i10 = n10; i10 <= r10; i10++) {
        let n11 = this._visibleLines.getVisibleLine(i10);
        if (n11.needsMonospaceFontCheck()) {
          let r11 = n11.getWidth(null);
          r11 > t10 && (t10 = r11, e10 = i10);
        }
      }
      if (e10 !== -1 && !this._visibleLines.getVisibleLine(e10).monospaceAssumptionsAreValid()) for (let e11 = n10; e11 <= r10; e11++) {
        let t11 = this._visibleLines.getVisibleLine(e11);
        t11.onMonospaceAssumptionsInvalidated();
      }
    }
    prepareRender() {
      throw Error(`Not supported`);
    }
    render() {
      throw Error(`Not supported`);
    }
    renderText(e10) {
      if (this._visibleLines.renderLines(e10), this._lastRenderedData.setCurrentVisibleRange(e10.visibleRange), this.domNode.setWidth(this._context.viewLayout.getScrollWidth()), this.domNode.setHeight(Math.min(this._context.viewLayout.getScrollHeight(), 1e6)), this._horizontalRevealRequest) {
        let t11 = this._horizontalRevealRequest;
        if (e10.startLineNumber <= t11.minLineNumber && t11.maxLineNumber <= e10.endLineNumber) {
          this._horizontalRevealRequest = null, this.onDidRender();
          let e11 = this._computeScrollLeftToReveal(t11);
          e11 && (this._isViewportWrapping || this._ensureMaxLineWidth(e11.maxHorizontalOffset), this._context.viewModel.viewLayout.setScrollPosition({
            scrollLeft: e11.scrollLeft
          }, t11.scrollType));
        }
      }
      if (this._updateLineWidthsFast() ? this._asyncUpdateLineWidths.cancel() : this._asyncUpdateLineWidths.schedule(), ht && !this._asyncCheckMonospaceFontAssumptions.isScheduled()) {
        let e11 = this._visibleLines.getStartLineNumber(), t11 = this._visibleLines.getEndLineNumber();
        for (let n10 = e11; n10 <= t11; n10++) {
          let e12 = this._visibleLines.getVisibleLine(n10);
          if (e12.needsMonospaceFontCheck()) {
            this._asyncCheckMonospaceFontAssumptions.schedule();
            break;
          }
        }
      }
      this._linesContent.setLayerHinting(this._canUseLayerHinting), this._linesContent.setContain(`strict`);
      let t10 = this._context.viewLayout.getCurrentScrollTop() - e10.bigNumbersDelta;
      this._linesContent.setTop(-t10), this._linesContent.setLeft(-this._context.viewLayout.getCurrentScrollLeft());
    }
    _ensureMaxLineWidth(e10) {
      let t10 = Math.ceil(e10);
      this._maxLineWidth < t10 && (this._maxLineWidth = t10, this._context.viewModel.viewLayout.setMaxLineWidth(this._maxLineWidth));
    }
    _computeScrollTopToRevealRange(e10, t10, n10, r10, i10, a10) {
      let o10 = e10.top, s10 = e10.height, c10 = o10 + s10, l10, u10, d10;
      if (i10 && i10.length > 0) {
        let e11 = i10[0].startLineNumber, t11 = i10[0].endLineNumber;
        for (let n11 = 1, r11 = i10.length; n11 < r11; n11++) {
          let r12 = i10[n11];
          e11 = Math.min(e11, r12.startLineNumber), t11 = Math.max(t11, r12.endLineNumber);
        }
        l10 = false, u10 = this._context.viewLayout.getVerticalOffsetForLineNumber(e11), d10 = this._context.viewLayout.getVerticalOffsetForLineNumber(t11) + this._lineHeight;
      } else if (r10) l10 = true, u10 = this._context.viewLayout.getVerticalOffsetForLineNumber(r10.startLineNumber), d10 = this._context.viewLayout.getVerticalOffsetForLineNumber(r10.endLineNumber) + this._lineHeight;
      else return -1;
      let f10 = (t10 === `mouse` || n10) && this._cursorSurroundingLinesStyle === `default`, p10 = 0, m10 = 0;
      if (f10) n10 || (p10 = this._lineHeight);
      else {
        let e11 = s10 / this._lineHeight, t11 = Math.max(this._cursorSurroundingLines, this._stickyScrollEnabled ? this._maxNumberStickyLines : 0), n11 = Math.min(e11 / 2, t11);
        p10 = n11 * this._lineHeight, m10 = Math.max(0, n11 - 1) * this._lineHeight;
      }
      n10 || (a10 === 0 || a10 === 4) && (m10 += this._lineHeight), u10 -= p10, d10 += m10;
      let h10;
      if (d10 - u10 > s10) {
        if (!l10) return -1;
        h10 = u10;
      } else if (a10 === 5 || a10 === 6) if (a10 === 6 && o10 <= u10 && d10 <= c10) h10 = o10;
      else {
        let e11 = Math.max(5 * this._lineHeight, s10 * 0.2), t11 = u10 - e11, n11 = d10 - s10;
        h10 = Math.max(n11, t11);
      }
      else if (a10 === 1 || a10 === 2) if (a10 === 2 && o10 <= u10 && d10 <= c10) h10 = o10;
      else {
        let e11 = (u10 + d10) / 2;
        h10 = Math.max(0, e11 - s10 / 2);
      }
      else h10 = this._computeMinimumScrolling(o10, c10, u10, d10, a10 === 3, a10 === 4);
      return h10;
    }
    _computeScrollLeftToReveal(t10) {
      let n10 = this._context.viewLayout.getCurrentViewport(), r10 = this._context.configuration.options.get(146), i10 = n10.left, a10 = i10 + n10.width - r10.verticalScrollbarWidth, o10 = 1073741824, s10 = 0;
      if (t10.type === `range`) {
        let e10 = this._visibleRangesForLineRange(t10.lineNumber, t10.startColumn, t10.endColumn);
        if (!e10) return null;
        for (let t11 of e10.ranges) o10 = Math.min(o10, Math.round(t11.left)), s10 = Math.max(s10, Math.round(t11.left + t11.width));
      } else for (let e10 of t10.selections) {
        if (e10.startLineNumber !== e10.endLineNumber) return null;
        let t11 = this._visibleRangesForLineRange(e10.startLineNumber, e10.startColumn, e10.endColumn);
        if (!t11) return null;
        for (let e11 of t11.ranges) o10 = Math.min(o10, Math.round(e11.left)), s10 = Math.max(s10, Math.round(e11.left + e11.width));
      }
      if (t10.minimalReveal || (o10 = Math.max(0, o10 - _Ya.HORIZONTAL_EXTRA_PX), s10 += this._revealHorizontalRightPadding), t10.type === `selections` && s10 - o10 > n10.width) return null;
      let c10 = this._computeMinimumScrolling(i10, a10, o10, s10);
      return {
        scrollLeft: c10,
        maxHorizontalOffset: s10
      };
    }
    _computeMinimumScrolling(e10, t10, n10, r10, i10, a10) {
      e10 |= 0, t10 |= 0, n10 |= 0, r10 |= 0, i10 = !!i10, a10 = !!a10;
      let o10 = t10 - e10, s10 = r10 - n10;
      if (s10 < o10) {
        if (i10) return n10;
        if (a10) return Math.max(0, r10 - o10);
        if (n10 < e10) return n10;
        if (r10 > t10) return Math.max(0, r10 - o10);
      } else return n10;
      return e10;
    }
  }, _Ya.HORIZONTAL_EXTRA_PX = 30, _Ya), y0 = class extends s0 {
    constructor(e10) {
      super(), this._context = e10;
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._decorationsLeft = n10.decorationsLeft, this._decorationsWidth = n10.decorationsWidth, this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._decorationsLeft = n10.decorationsLeft, this._decorationsWidth = n10.decorationsWidth, true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    _getDecorations(e10) {
      let t10 = e10.getDecorationsInViewport(), n10 = [], r10 = 0;
      for (let e11 = 0, i10 = t10.length; e11 < i10; e11++) {
        let i11 = t10[e11], a10 = i11.options.linesDecorationsClassName, o10 = i11.options.zIndex;
        a10 && (n10[r10++] = new i0(i11.range.startLineNumber, i11.range.endLineNumber, a10, i11.options.linesDecorationsTooltip ?? null, o10));
        let s10 = i11.options.firstLineDecorationClassName;
        s10 && (n10[r10++] = new i0(i11.range.startLineNumber, i11.range.startLineNumber, s10, i11.options.linesDecorationsTooltip ?? null, o10));
      }
      return n10;
    }
    prepareRender(e10) {
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber, r10 = this._render(t10, n10, this._getDecorations(e10)), i10 = this._decorationsLeft.toString(), a10 = this._decorationsWidth.toString(), o10 = `" style="left:` + i10 + `px;width:` + a10 + `px;"></div>`, s10 = [];
      for (let e11 = t10; e11 <= n10; e11++) {
        let n11 = e11 - t10, i11 = r10[n11].getDecorations(), a11 = ``;
        for (let e12 of i11) {
          let t11 = `<div class="cldr ` + e12.className;
          e12.tooltip !== null && (t11 += `" title="` + e12.tooltip), t11 += o10, a11 += t11;
        }
        s10[n11] = a11;
      }
      this._renderResult = s10;
    }
    render(e10, t10) {
      return this._renderResult ? this._renderResult[t10 - e10] : ``;
    }
  }, b0 = class extends s0 {
    constructor(e10) {
      super(), this._context = e10, this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      return true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    _getDecorations(e10) {
      let t10 = e10.getDecorationsInViewport(), n10 = [], r10 = 0;
      for (let e11 = 0, i10 = t10.length; e11 < i10; e11++) {
        let i11 = t10[e11], a10 = i11.options.marginClassName, o10 = i11.options.zIndex;
        a10 && (n10[r10++] = new i0(i11.range.startLineNumber, i11.range.endLineNumber, a10, null, o10));
      }
      return n10;
    }
    prepareRender(e10) {
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber, r10 = this._render(t10, n10, this._getDecorations(e10)), i10 = [];
      for (let e11 = t10; e11 <= n10; e11++) {
        let n11 = e11 - t10, a10 = r10[n11].getDecorations(), o10 = ``;
        for (let e12 of a10) o10 += `<div class="cmdr ` + e12.className + `" style=""></div>`;
        i10[n11] = o10;
      }
      this._renderResult = i10;
    }
    render(e10, t10) {
      return this._renderResult ? this._renderResult[t10 - e10] : ``;
    }
  }, x0 = (_Za = class {
    constructor(t10, n10, r10, i10) {
      this._rgba8Brand = void 0, this.r = _Za._clamp(t10), this.g = _Za._clamp(n10), this.b = _Za._clamp(r10), this.a = _Za._clamp(i10);
    }
    equals(e10) {
      return this.r === e10.r && this.g === e10.g && this.b === e10.b && this.a === e10.a;
    }
    static _clamp(e10) {
      return e10 < 0 ? 0 : e10 > 255 ? 255 : e10 | 0;
    }
  }, _Za.Empty = new _Za(0, 0, 0, 0), _Za), S0 = (__a = class extends j {
    static getInstance() {
      return this._INSTANCE || (this._INSTANCE = Ir(new __a())), this._INSTANCE;
    }
    constructor() {
      super(), this._onDidChange = new N(), this.onDidChange = this._onDidChange.event, this._updateColorMap(), this._register(ao.onDidChange((e10) => {
        e10.changedColorMap && this._updateColorMap();
      }));
    }
    _updateColorMap() {
      let e10 = ao.getColorMap();
      if (!e10) {
        this._colors = [
          x0.Empty
        ], this._backgroundIsLight = true;
        return;
      }
      this._colors = [
        x0.Empty
      ];
      for (let t11 = 1; t11 < e10.length; t11++) {
        let n10 = e10[t11].rgba;
        this._colors[t11] = new x0(n10.r, n10.g, n10.b, Math.round(n10.a * 255));
      }
      let t10 = e10[2].getRelativeLuminance();
      this._backgroundIsLight = t10 >= 0.5, this._onDidChange.fire(void 0);
    }
    getColor(e10) {
      return (e10 < 1 || e10 >= this._colors.length) && (e10 = 2), this._colors[e10];
    }
    backgroundIsLight() {
      return this._backgroundIsLight;
    }
  }, __a._INSTANCE = null, __a);
  const C0 = (() => {
    let e10 = [];
    for (let t10 = 32; t10 <= 126; t10++) e10.push(t10);
    return e10.push(65533), e10;
  })(), w0 = (e10, t10) => (e10 -= 32, e10 < 0 || e10 > 96 ? t10 <= 2 ? (e10 + 96) % 96 : 95 : e10);
  var T0 = class e10 {
    constructor(t10, n10) {
      this.scale = n10, this._minimapCharRendererBrand = void 0, this.charDataNormal = e10.soften(t10, 12 / 15), this.charDataLight = e10.soften(t10, 50 / 60);
    }
    static soften(e11, t10) {
      let n10 = new Uint8ClampedArray(e11.length);
      for (let r10 = 0, i10 = e11.length; r10 < i10; r10++) n10[r10] = w_(e11[r10] * t10);
      return n10;
    }
    renderChar(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      let d10 = 1 * this.scale, f10 = 2 * this.scale, p10 = u10 ? 1 : f10;
      if (t10 + d10 > e11.width || n10 + p10 > e11.height) {
        console.warn(`bad render request outside image data`);
        return;
      }
      let m10 = l10 ? this.charDataLight : this.charDataNormal, h10 = w0(r10, c10), g10 = e11.width * 4, _10 = o10.r, v10 = o10.g, y10 = o10.b, b10 = i10.r - _10, x10 = i10.g - v10, S10 = i10.b - y10, C10 = Math.max(a10, s10), w10 = e11.data, ee2 = h10 * d10 * f10, te2 = n10 * g10 + t10 * 4;
      for (let e12 = 0; e12 < p10; e12++) {
        let e13 = te2;
        for (let t11 = 0; t11 < d10; t11++) {
          let t12 = m10[ee2++] / 255 * (a10 / 255);
          w10[e13++] = _10 + b10 * t12, w10[e13++] = v10 + x10 * t12, w10[e13++] = y10 + S10 * t12, w10[e13++] = C10;
        }
        te2 += g10;
      }
    }
    blockRenderChar(e11, t10, n10, r10, i10, a10, o10, s10) {
      let c10 = 1 * this.scale, l10 = 2 * this.scale, u10 = s10 ? 1 : l10;
      if (t10 + c10 > e11.width || n10 + u10 > e11.height) {
        console.warn(`bad render request outside image data`);
        return;
      }
      let d10 = e11.width * 4, f10 = 0.5 * (i10 / 255), p10 = a10.r, m10 = a10.g, h10 = a10.b, g10 = r10.r - p10, _10 = r10.g - m10, v10 = r10.b - h10, y10 = p10 + g10 * f10, b10 = m10 + _10 * f10, x10 = h10 + v10 * f10, S10 = Math.max(i10, o10), C10 = e11.data, w10 = n10 * d10 + t10 * 4;
      for (let e12 = 0; e12 < u10; e12++) {
        let e13 = w10;
        for (let t11 = 0; t11 < c10; t11++) C10[e13++] = y10, C10[e13++] = b10, C10[e13++] = x10, C10[e13++] = S10;
        w10 += d10;
      }
    }
  };
  const E0 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15
  }, D0 = (e10) => {
    let t10 = new Uint8ClampedArray(e10.length / 2);
    for (let n10 = 0; n10 < e10.length; n10 += 2) t10[n10 >> 1] = E0[e10[n10]] << 4 | E0[e10[n10 + 1]] & 15;
    return t10;
  }, O0 = {
    1: Or(() => D0(`0000511D6300CF609C709645A78432005642574171487021003C451900274D35D762755E8B629C5BA856AF57BA649530C167D1512A272A3F6038604460398526BCA2A968DB6F8957C768BE5FBE2FB467CF5D8D5B795DC7625B5DFF50DE64C466DB2FC47CD860A65E9A2EB96CB54CE06DA763AB2EA26860524D3763536601005116008177A8705E53AB738E6A982F88BAA35B5F5B626D9C636B449B737E5B7B678598869A662F6B5B8542706C704C80736A607578685B70594A49715A4522E792`)),
    2: Or(() => D0(``))
  };
  var k0 = class e10 {
    static create(t10, n10) {
      if (this.lastCreated && t10 === this.lastCreated.scale && n10 === this.lastFontFamily) return this.lastCreated;
      let r10;
      return r10 = O0[t10] ? new T0(O0[t10](), t10) : e10.createFromSampleData(e10.createSampleData(n10).data, t10), this.lastFontFamily = n10, this.lastCreated = r10, r10;
    }
    static createSampleData(e11) {
      let t10 = document.createElement(`canvas`), n10 = t10.getContext(`2d`);
      t10.style.height = `16px`, t10.height = 16, t10.width = 96 * 10, t10.style.width = `960px`, n10.fillStyle = `#ffffff`, n10.font = `bold 16px ${e11}`, n10.textBaseline = `middle`;
      let r10 = 0;
      for (let e12 of C0) n10.fillText(String.fromCharCode(e12), r10, 16 / 2), r10 += 10;
      return n10.getImageData(0, 0, 96 * 10, 16);
    }
    static createFromSampleData(t10, n10) {
      let r10 = 16 * 10 * 4 * 96;
      if (t10.length !== r10) throw Error(`Unexpected source in MinimapCharRenderer`);
      let i10 = e10._downsample(t10, n10);
      return new T0(i10, n10);
    }
    static _downsampleChar(e11, t10, n10, r10, i10) {
      let a10 = 1 * i10, o10 = 2 * i10, s10 = r10, c10 = 0;
      for (let r11 = 0; r11 < o10; r11++) {
        let i11 = r11 / o10 * 16, l10 = (r11 + 1) / o10 * 16;
        for (let r12 = 0; r12 < a10; r12++) {
          let o11 = r12 / a10 * 10, u10 = (r12 + 1) / a10 * 10, d10 = 0, f10 = 0;
          for (let n11 = i11; n11 < l10; n11++) {
            let r13 = t10 + Math.floor(n11) * 3840, i12 = 1 - (n11 - Math.floor(n11));
            for (let t11 = o11; t11 < u10; t11++) {
              let n12 = 1 - (t11 - Math.floor(t11)), a11 = r13 + Math.floor(t11) * 4, o12 = n12 * i12;
              f10 += o12, d10 += e11[a11] * e11[a11 + 3] / 255 * o12;
            }
          }
          let p10 = d10 / f10;
          c10 = Math.max(c10, p10), n10[s10++] = w_(p10);
        }
      }
      return c10;
    }
    static _downsample(e11, t10) {
      let n10 = 2 * t10 * 1 * t10, r10 = n10 * 96, i10 = new Uint8ClampedArray(r10), a10 = 0, o10 = 0, s10 = 0;
      for (let r11 = 0; r11 < 96; r11++) s10 = Math.max(s10, this._downsampleChar(e11, o10, i10, a10, t10)), a10 += n10, o10 += 10 * 4;
      if (s10 > 0) {
        let e12 = 255 / s10;
        for (let t11 = 0; t11 < r10; t11++) i10[t11] *= e12;
      }
      return i10;
    }
  };
  let j0, M0;
  A0 = mt ? `"Segoe WPC", "Segoe UI", sans-serif` : E ? `-apple-system, BlinkMacSystemFont, sans-serif` : `system-ui, "Ubuntu", "Droid Sans", sans-serif`;
  j0 = 140;
  M0 = 2;
  var N0 = class e10 {
    constructor(t10, n10, r10) {
      let i10 = t10.options, a10 = i10.get(144), o10 = i10.get(146), s10 = o10.minimap, c10 = i10.get(50), l10 = i10.get(73);
      this.renderMinimap = s10.renderMinimap, this.size = l10.size, this.minimapHeightIsEditorHeight = s10.minimapHeightIsEditorHeight, this.scrollBeyondLastLine = i10.get(106), this.paddingTop = i10.get(84).top, this.paddingBottom = i10.get(84).bottom, this.showSlider = l10.showSlider, this.autohide = l10.autohide, this.pixelRatio = a10, this.typicalHalfwidthCharacterWidth = c10.typicalHalfwidthCharacterWidth, this.lineHeight = i10.get(67), this.minimapLeft = s10.minimapLeft, this.minimapWidth = s10.minimapWidth, this.minimapHeight = o10.height, this.canvasInnerWidth = s10.minimapCanvasInnerWidth, this.canvasInnerHeight = s10.minimapCanvasInnerHeight, this.canvasOuterWidth = s10.minimapCanvasOuterWidth, this.canvasOuterHeight = s10.minimapCanvasOuterHeight, this.isSampling = s10.minimapIsSampling, this.editorHeight = o10.height, this.fontScale = s10.minimapScale, this.minimapLineHeight = s10.minimapLineHeight, this.minimapCharWidth = 1 * this.fontScale, this.sectionHeaderFontFamily = A0, this.sectionHeaderFontSize = l10.sectionHeaderFontSize * a10, this.sectionHeaderLetterSpacing = l10.sectionHeaderLetterSpacing, this.sectionHeaderFontColor = e10._getSectionHeaderColor(n10, r10.getColor(1)), this.charRenderer = Or(() => k0.create(this.fontScale, c10.fontFamily)), this.defaultBackgroundColor = r10.getColor(2), this.backgroundColor = e10._getMinimapBackground(n10, this.defaultBackgroundColor), this.foregroundAlpha = e10._getMinimapForegroundOpacity(n10);
    }
    static _getMinimapBackground(e11, t10) {
      let n10 = e11.getColor(Jw);
      return n10 ? new x0(n10.rgba.r, n10.rgba.g, n10.rgba.b, Math.round(255 * n10.rgba.a)) : t10;
    }
    static _getMinimapForegroundOpacity(e11) {
      let t10 = e11.getColor(Yw);
      return t10 ? x0._clamp(Math.round(255 * t10.rgba.a)) : 255;
    }
    static _getSectionHeaderColor(e11, t10) {
      let n10 = e11.getColor(OC);
      return n10 ? new x0(n10.rgba.r, n10.rgba.g, n10.rgba.b, Math.round(255 * n10.rgba.a)) : t10;
    }
    equals(e11) {
      return this.renderMinimap === e11.renderMinimap && this.size === e11.size && this.minimapHeightIsEditorHeight === e11.minimapHeightIsEditorHeight && this.scrollBeyondLastLine === e11.scrollBeyondLastLine && this.paddingTop === e11.paddingTop && this.paddingBottom === e11.paddingBottom && this.showSlider === e11.showSlider && this.autohide === e11.autohide && this.pixelRatio === e11.pixelRatio && this.typicalHalfwidthCharacterWidth === e11.typicalHalfwidthCharacterWidth && this.lineHeight === e11.lineHeight && this.minimapLeft === e11.minimapLeft && this.minimapWidth === e11.minimapWidth && this.minimapHeight === e11.minimapHeight && this.canvasInnerWidth === e11.canvasInnerWidth && this.canvasInnerHeight === e11.canvasInnerHeight && this.canvasOuterWidth === e11.canvasOuterWidth && this.canvasOuterHeight === e11.canvasOuterHeight && this.isSampling === e11.isSampling && this.editorHeight === e11.editorHeight && this.fontScale === e11.fontScale && this.minimapLineHeight === e11.minimapLineHeight && this.minimapCharWidth === e11.minimapCharWidth && this.sectionHeaderFontSize === e11.sectionHeaderFontSize && this.sectionHeaderLetterSpacing === e11.sectionHeaderLetterSpacing && this.defaultBackgroundColor && this.defaultBackgroundColor.equals(e11.defaultBackgroundColor) && this.backgroundColor && this.backgroundColor.equals(e11.backgroundColor) && this.foregroundAlpha === e11.foregroundAlpha;
    }
  }, P0 = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10, s10, c10) {
      this.scrollTop = e11, this.scrollHeight = t10, this.sliderNeeded = n10, this._computedSliderRatio = r10, this.sliderTop = i10, this.sliderHeight = a10, this.topPaddingLineCount = o10, this.startLineNumber = s10, this.endLineNumber = c10;
    }
    getDesiredScrollTopFromDelta(e11) {
      return Math.round(this.scrollTop + e11 / this._computedSliderRatio);
    }
    getDesiredScrollTopFromTouchLocation(e11) {
      return Math.round((e11 - this.sliderHeight / 2) / this._computedSliderRatio);
    }
    intersectWithViewport(e11) {
      let t10 = Math.max(this.startLineNumber, e11.startLineNumber), n10 = Math.min(this.endLineNumber, e11.endLineNumber);
      return t10 > n10 ? null : [
        t10,
        n10
      ];
    }
    getYForLineNumber(e11, t10) {
      return +(e11 - this.startLineNumber + this.topPaddingLineCount) * t10;
    }
    static create(t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10) {
      let f10 = t10.pixelRatio, p10 = t10.minimapLineHeight, m10 = Math.floor(t10.canvasInnerHeight / p10), h10 = t10.lineHeight;
      if (t10.minimapHeightIsEditorHeight) {
        let n11 = c10 * t10.lineHeight + t10.paddingTop + t10.paddingBottom;
        t10.scrollBeyondLastLine && (n11 += Math.max(0, a10 - t10.lineHeight - t10.paddingBottom));
        let r11 = Math.max(1, Math.floor(a10 * a10 / n11)), i11 = Math.max(0, t10.minimapHeight - r11), o11 = i11 / (u10 - a10), d11 = l10 * o11, f11 = i11 > 0, p11 = Math.floor(t10.canvasInnerHeight / t10.minimapLineHeight), m11 = Math.floor(t10.paddingTop / t10.lineHeight);
        return new e10(l10, u10, f11, o11, d11, r11, m11, 1, Math.min(s10, p11));
      }
      let g10;
      if (o10 && r10 !== s10) {
        let e11 = r10 - n10 + 1;
        g10 = Math.floor(e11 * p10 / f10);
      } else {
        let e11 = a10 / h10;
        g10 = Math.floor(e11 * p10 / f10);
      }
      let _10 = Math.floor(t10.paddingTop / h10), v10 = Math.floor(t10.paddingBottom / h10);
      if (t10.scrollBeyondLastLine) {
        let e11 = a10 / h10;
        v10 = Math.max(v10, e11 - 1);
      }
      let y10;
      if (v10 > 0) {
        let e11 = a10 / h10;
        y10 = (_10 + s10 + v10 - e11 - 1) * p10 / f10;
      } else y10 = Math.max(0, (_10 + s10) * p10 / f10 - g10);
      y10 = Math.min(t10.minimapHeight - g10, y10);
      let b10 = y10 / (u10 - a10), x10 = l10 * b10;
      if (m10 >= _10 + s10 + v10) {
        let t11 = y10 > 0;
        return new e10(l10, u10, t11, b10, x10, g10, _10, 1, s10);
      } else {
        let r11;
        r11 = n10 > 1 ? n10 + _10 : Math.max(1, l10 / h10);
        let a11, o11 = Math.max(1, Math.floor(r11 - x10 * f10 / p10));
        o11 < _10 ? (a11 = _10 - o11 + 1, o11 = 1) : (a11 = 0, o11 = Math.max(1, o11 - _10)), d10 && d10.scrollHeight === u10 && (d10.scrollTop > l10 && (o11 = Math.min(o11, d10.startLineNumber), a11 = Math.max(a11, d10.topPaddingLineCount)), d10.scrollTop < l10 && (o11 = Math.max(o11, d10.startLineNumber), a11 = Math.min(a11, d10.topPaddingLineCount)));
        let c11 = Math.min(s10, o11 - a11 + m10 - 1), v11 = (l10 - i10) / h10, y11;
        return y11 = l10 >= t10.paddingTop ? (n10 - o11 + a11 + v11) * p10 / f10 : l10 / t10.paddingTop * (a11 + v11) * p10 / f10, new e10(l10, u10, true, b10, y11, g10, a11, o11, c11);
      }
    }
  }, F0 = (_$a = class {
    constructor(e10) {
      this.dy = e10;
    }
    onContentChanged() {
      this.dy = -1;
    }
    onTokensChanged() {
      this.dy = -1;
    }
  }, _$a.INVALID = new _$a(-1), _$a), I0 = class {
    constructor(e10, t10, n10) {
      this.renderedLayout = e10, this._imageData = t10, this._renderedLines = new R1({
        createLine: () => F0.INVALID
      }), this._renderedLines._set(e10.startLineNumber, n10);
    }
    linesEquals(e10) {
      if (!this.scrollEquals(e10)) return false;
      let t10 = this._renderedLines._get(), n10 = t10.lines;
      for (let e11 = 0, t11 = n10.length; e11 < t11; e11++) if (n10[e11].dy === -1) return false;
      return true;
    }
    scrollEquals(e10) {
      return this.renderedLayout.startLineNumber === e10.startLineNumber && this.renderedLayout.endLineNumber === e10.endLineNumber;
    }
    _get() {
      let e10 = this._renderedLines._get();
      return {
        imageData: this._imageData,
        rendLineNumberStart: e10.rendLineNumberStart,
        lines: e10.lines
      };
    }
    onLinesChanged(e10, t10) {
      return this._renderedLines.onLinesChanged(e10, t10);
    }
    onLinesDeleted(e10, t10) {
      this._renderedLines.onLinesDeleted(e10, t10);
    }
    onLinesInserted(e10, t10) {
      this._renderedLines.onLinesInserted(e10, t10);
    }
    onTokensChanged(e10) {
      return this._renderedLines.onTokensChanged(e10);
    }
  }, L0 = class e10 {
    constructor(t10, n10, r10, i10) {
      this._backgroundFillData = e10._createBackgroundFillData(n10, r10, i10), this._buffers = [
        t10.createImageData(n10, r10),
        t10.createImageData(n10, r10)
      ], this._lastUsedBuffer = 0;
    }
    getBuffer() {
      this._lastUsedBuffer = 1 - this._lastUsedBuffer;
      let e11 = this._buffers[this._lastUsedBuffer];
      return e11.data.set(this._backgroundFillData), e11;
    }
    static _createBackgroundFillData(e11, t10, n10) {
      let r10 = n10.r, i10 = n10.g, a10 = n10.b, o10 = n10.a, s10 = new Uint8ClampedArray(e11 * t10 * 4), c10 = 0;
      for (let n11 = 0; n11 < t10; n11++) for (let t11 = 0; t11 < e11; t11++) s10[c10] = r10, s10[c10 + 1] = i10, s10[c10 + 2] = a10, s10[c10 + 3] = o10, c10 += 4;
      return s10;
    }
  }, R0 = class e10 {
    static compute(t10, n10, r10) {
      if (t10.renderMinimap === 0 || !t10.isSampling) return [
        null,
        []
      ];
      let { minimapLineCount: i10 } = En.computeContainedMinimapLineCount({
        viewLineCount: n10,
        scrollBeyondLastLine: t10.scrollBeyondLastLine,
        paddingTop: t10.paddingTop,
        paddingBottom: t10.paddingBottom,
        height: t10.editorHeight,
        lineHeight: t10.lineHeight,
        pixelRatio: t10.pixelRatio
      }), a10 = n10 / i10, o10 = a10 / 2;
      if (!r10 || r10.minimapLines.length === 0) {
        let t11 = [];
        if (t11[0] = 1, i10 > 1) {
          for (let e11 = 0, n11 = i10 - 1; e11 < n11; e11++) t11[e11] = Math.round(e11 * a10 + o10);
          t11[i10 - 1] = n10;
        }
        return [
          new e10(a10, t11),
          []
        ];
      }
      let s10 = r10.minimapLines, c10 = s10.length, l10 = [], u10 = 0, d10 = 0, f10 = 1, p10 = 10, m10 = [], h10 = null;
      for (let e11 = 0; e11 < i10; e11++) {
        let t11 = Math.max(f10, Math.round(e11 * a10)), r11 = Math.max(t11, Math.round((e11 + 1) * a10));
        for (; u10 < c10 && s10[u10] < t11; ) {
          if (m10.length < p10) {
            let e12 = u10 + 1 + d10;
            h10 && h10.type === `deleted` && h10._oldIndex === u10 - 1 ? h10.deleteToLineNumber++ : (h10 = {
              type: `deleted`,
              _oldIndex: u10,
              deleteFromLineNumber: e12,
              deleteToLineNumber: e12
            }, m10.push(h10)), d10--;
          }
          u10++;
        }
        let g10;
        if (u10 < c10 && s10[u10] <= r11) g10 = s10[u10], u10++;
        else if (g10 = e11 === 0 ? 1 : e11 + 1 === i10 ? n10 : Math.round(e11 * a10 + o10), m10.length < p10) {
          let t12 = u10 + 1 + d10;
          h10 && h10.type === `inserted` && h10._i === e11 - 1 ? h10.insertToLineNumber++ : (h10 = {
            type: `inserted`,
            _i: e11,
            insertFromLineNumber: t12,
            insertToLineNumber: t12
          }, m10.push(h10)), d10++;
        }
        l10[e11] = g10, f10 = g10;
      }
      if (m10.length < p10) for (; u10 < c10; ) {
        let e11 = u10 + 1 + d10;
        h10 && h10.type === `deleted` && h10._oldIndex === u10 - 1 ? h10.deleteToLineNumber++ : (h10 = {
          type: `deleted`,
          _oldIndex: u10,
          deleteFromLineNumber: e11,
          deleteToLineNumber: e11
        }, m10.push(h10)), d10--, u10++;
      }
      else m10 = [
        {
          type: `flush`
        }
      ];
      return [
        new e10(a10, l10),
        m10
      ];
    }
    constructor(e11, t10) {
      this.samplingRatio = e11, this.minimapLines = t10;
    }
    modelLineToMinimapLine(e11) {
      return Math.min(this.minimapLines.length, Math.max(1, Math.round(e11 / this.samplingRatio)));
    }
    modelLineRangeToMinimapLineRange(e11, t10) {
      let n10 = this.modelLineToMinimapLine(e11) - 1;
      for (; n10 > 0 && this.minimapLines[n10 - 1] >= e11; ) n10--;
      let r10 = this.modelLineToMinimapLine(t10) - 1;
      for (; r10 + 1 < this.minimapLines.length && this.minimapLines[r10 + 1] <= t10; ) r10++;
      if (n10 === r10) {
        let r11 = this.minimapLines[n10];
        if (r11 < e11 || r11 > t10) return null;
      }
      return [
        n10 + 1,
        r10 + 1
      ];
    }
    decorationLineRangeToMinimapLineRange(e11, t10) {
      let n10 = this.modelLineToMinimapLine(e11), r10 = this.modelLineToMinimapLine(t10);
      return e11 !== t10 && r10 === n10 && (r10 === this.minimapLines.length ? n10 > 1 && n10-- : r10++), [
        n10,
        r10
      ];
    }
    onLinesDeleted(e11) {
      let t10 = e11.toLineNumber - e11.fromLineNumber + 1, n10 = this.minimapLines.length, r10 = 0;
      for (let i10 = this.minimapLines.length - 1; i10 >= 0 && !(this.minimapLines[i10] < e11.fromLineNumber); i10--) this.minimapLines[i10] <= e11.toLineNumber ? (this.minimapLines[i10] = Math.max(1, e11.fromLineNumber - 1), n10 = Math.min(n10, i10), r10 = Math.max(r10, i10)) : this.minimapLines[i10] -= t10;
      return [
        n10,
        r10
      ];
    }
    onLinesInserted(e11) {
      let t10 = e11.toLineNumber - e11.fromLineNumber + 1;
      for (let n10 = this.minimapLines.length - 1; n10 >= 0 && !(this.minimapLines[n10] < e11.fromLineNumber); n10--) this.minimapLines[n10] += t10;
    }
  }, z0 = class extends ZZ {
    constructor(e10) {
      super(e10), this._sectionHeaderCache = new G_(10, 1.5), this.tokensColorTracker = S0.getInstance(), this._selections = [], this._minimapSelections = null, this.options = new N0(this._context.configuration, this._context.theme, this.tokensColorTracker);
      let [t10] = R0.compute(this.options, this._context.viewModel.getLineCount(), null);
      this._samplingState = t10, this._shouldCheckSampling = false, this._actual = new B0(e10.theme, this);
    }
    dispose() {
      this._actual.dispose(), super.dispose();
    }
    getDomNode() {
      return this._actual.getDomNode();
    }
    _onOptionsMaybeChanged() {
      let e10 = new N0(this._context.configuration, this._context.theme, this.tokensColorTracker);
      return this.options.equals(e10) ? false : (this.options = e10, this._recreateLineSampling(), this._actual.onDidChangeOptions(), true);
    }
    onConfigurationChanged(e10) {
      return this._onOptionsMaybeChanged();
    }
    onCursorStateChanged(e10) {
      return this._selections = e10.selections, this._minimapSelections = null, this._actual.onSelectionChanged();
    }
    onDecorationsChanged(e10) {
      return e10.affectsMinimap ? this._actual.onDecorationsChanged() : false;
    }
    onFlushed(e10) {
      return this._samplingState && (this._shouldCheckSampling = true), this._actual.onFlushed();
    }
    onLinesChanged(e10) {
      if (this._samplingState) {
        let t10 = this._samplingState.modelLineRangeToMinimapLineRange(e10.fromLineNumber, e10.fromLineNumber + e10.count - 1);
        return t10 ? this._actual.onLinesChanged(t10[0], t10[1] - t10[0] + 1) : false;
      } else return this._actual.onLinesChanged(e10.fromLineNumber, e10.count);
    }
    onLinesDeleted(e10) {
      if (this._samplingState) {
        let [t10, n10] = this._samplingState.onLinesDeleted(e10);
        return t10 <= n10 && this._actual.onLinesChanged(t10 + 1, n10 - t10 + 1), this._shouldCheckSampling = true, true;
      } else return this._actual.onLinesDeleted(e10.fromLineNumber, e10.toLineNumber);
    }
    onLinesInserted(e10) {
      return this._samplingState ? (this._samplingState.onLinesInserted(e10), this._shouldCheckSampling = true, true) : this._actual.onLinesInserted(e10.fromLineNumber, e10.toLineNumber);
    }
    onScrollChanged(e10) {
      return this._actual.onScrollChanged();
    }
    onThemeChanged(e10) {
      return this._actual.onThemeChanged(), this._onOptionsMaybeChanged(), true;
    }
    onTokensChanged(e10) {
      if (this._samplingState) {
        let t10 = [];
        for (let n10 of e10.ranges) {
          let e11 = this._samplingState.modelLineRangeToMinimapLineRange(n10.fromLineNumber, n10.toLineNumber);
          e11 && t10.push({
            fromLineNumber: e11[0],
            toLineNumber: e11[1]
          });
        }
        return t10.length ? this._actual.onTokensChanged(t10) : false;
      } else return this._actual.onTokensChanged(e10.ranges);
    }
    onTokensColorsChanged(e10) {
      return this._onOptionsMaybeChanged(), this._actual.onTokensColorsChanged();
    }
    onZonesChanged(e10) {
      return this._actual.onZonesChanged();
    }
    prepareRender(e10) {
      this._shouldCheckSampling && (this._shouldCheckSampling = false, this._recreateLineSampling());
    }
    render(e10) {
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber;
      this._samplingState && (t10 = this._samplingState.modelLineToMinimapLine(t10), n10 = this._samplingState.modelLineToMinimapLine(n10));
      let r10 = {
        viewportContainsWhitespaceGaps: e10.viewportData.whitespaceViewportData.length > 0,
        scrollWidth: e10.scrollWidth,
        scrollHeight: e10.scrollHeight,
        viewportStartLineNumber: t10,
        viewportEndLineNumber: n10,
        viewportStartLineNumberVerticalOffset: e10.getVerticalOffsetForLineNumber(t10),
        scrollTop: e10.scrollTop,
        scrollLeft: e10.scrollLeft,
        viewportWidth: e10.viewportWidth,
        viewportHeight: e10.viewportHeight
      };
      this._actual.render(r10);
    }
    _recreateLineSampling() {
      this._minimapSelections = null;
      let e10 = !!this._samplingState, [t10, n10] = R0.compute(this.options, this._context.viewModel.getLineCount(), this._samplingState);
      if (this._samplingState = t10, e10 && this._samplingState) for (let e11 of n10) switch (e11.type) {
        case `deleted`:
          this._actual.onLinesDeleted(e11.deleteFromLineNumber, e11.deleteToLineNumber);
          break;
        case `inserted`:
          this._actual.onLinesInserted(e11.insertFromLineNumber, e11.insertToLineNumber);
          break;
        case `flush`:
          this._actual.onFlushed();
          break;
      }
    }
    getLineCount() {
      return this._samplingState ? this._samplingState.minimapLines.length : this._context.viewModel.getLineCount();
    }
    getRealLineCount() {
      return this._context.viewModel.getLineCount();
    }
    getLineContent(e10) {
      return this._samplingState ? this._context.viewModel.getLineContent(this._samplingState.minimapLines[e10 - 1]) : this._context.viewModel.getLineContent(e10);
    }
    getLineMaxColumn(e10) {
      return this._samplingState ? this._context.viewModel.getLineMaxColumn(this._samplingState.minimapLines[e10 - 1]) : this._context.viewModel.getLineMaxColumn(e10);
    }
    getMinimapLinesRenderingData(e10, t10, n10) {
      if (this._samplingState) {
        let r10 = [];
        for (let i10 = 0, a10 = t10 - e10 + 1; i10 < a10; i10++) n10[i10] ? r10[i10] = this._context.viewModel.getViewLineData(this._samplingState.minimapLines[e10 + i10 - 1]) : r10[i10] = null;
        return r10;
      }
      return this._context.viewModel.getMinimapLinesRenderingData(e10, t10, n10).data;
    }
    getSelections() {
      if (this._minimapSelections === null) if (this._samplingState) {
        this._minimapSelections = [];
        for (let e10 of this._selections) {
          let [t10, n10] = this._samplingState.decorationLineRangeToMinimapLineRange(e10.startLineNumber, e10.endLineNumber);
          this._minimapSelections.push(new Ma(t10, e10.startColumn, n10, e10.endColumn));
        }
      } else this._minimapSelections = this._selections;
      return this._minimapSelections;
    }
    getMinimapDecorationsInViewport(e10, t10) {
      let n10 = this._getMinimapDecorationsInViewport(e10, t10).filter((e11) => {
        var _a3;
        return !((_a3 = e11.options.minimap) == null ? void 0 : _a3.sectionHeaderStyle);
      });
      if (this._samplingState) {
        let e11 = [];
        for (let t11 of n10) {
          if (!t11.options.minimap) continue;
          let n11 = t11.range, r10 = this._samplingState.modelLineToMinimapLine(n11.startLineNumber), i10 = this._samplingState.modelLineToMinimapLine(n11.endLineNumber);
          e11.push(new LX(new F(r10, n11.startColumn, i10, n11.endColumn), t11.options));
        }
        return e11;
      }
      return n10;
    }
    getSectionHeaderDecorationsInViewport(e10, t10) {
      let n10 = this.options.minimapLineHeight, r10 = this.options.sectionHeaderFontSize, i10 = r10 / n10;
      return e10 = Math.floor(Math.max(1, e10 - i10)), this._getMinimapDecorationsInViewport(e10, t10).filter((e11) => {
        var _a3;
        return !!((_a3 = e11.options.minimap) == null ? void 0 : _a3.sectionHeaderStyle);
      });
    }
    _getMinimapDecorationsInViewport(e10, t10) {
      let n10;
      if (this._samplingState) {
        let r10 = this._samplingState.minimapLines[e10 - 1], i10 = this._samplingState.minimapLines[t10 - 1];
        n10 = new F(r10, 1, i10, this._context.viewModel.getLineMaxColumn(i10));
      } else n10 = new F(e10, 1, t10, this._context.viewModel.getLineMaxColumn(t10));
      return this._context.viewModel.getMinimapDecorationsInRange(n10);
    }
    getSectionHeaderText(e10, t10) {
      var _a3;
      let n10 = (_a3 = e10.options.minimap) == null ? void 0 : _a3.sectionHeaderText;
      if (!n10) return null;
      let r10 = this._sectionHeaderCache.get(n10);
      if (r10) return r10;
      let i10 = t10(n10);
      return this._sectionHeaderCache.set(n10, i10), i10;
    }
    getOptions() {
      return this._context.viewModel.model.getOptions();
    }
    revealLineNumber(e10) {
      this._samplingState && (e10 = this._samplingState.minimapLines[e10 - 1]), this._context.viewModel.revealRange(`mouse`, false, new F(e10, 1, e10, 1), 1, 0);
    }
    setScrollTop(e10) {
      this._context.viewModel.viewLayout.setScrollPosition({
        scrollTop: e10
      }, 1);
    }
  }, B0 = class e10 extends j {
    constructor(e11, t10) {
      super(), this._renderDecorations = false, this._gestureInProgress = false, this._theme = e11, this._model = t10, this._lastRenderData = null, this._buffers = null, this._selectionColor = this._theme.getColor(Ww), this._domNode = Nf(document.createElement(`div`)), QZ.write(this._domNode, 9), this._domNode.setClassName(this._getMinimapDomNodeClassName()), this._domNode.setPosition(`absolute`), this._domNode.setAttribute(`role`, `presentation`), this._domNode.setAttribute(`aria-hidden`, `true`), this._shadow = Nf(document.createElement(`div`)), this._shadow.setClassName(`minimap-shadow-hidden`), this._domNode.appendChild(this._shadow), this._canvas = Nf(document.createElement(`canvas`)), this._canvas.setPosition(`absolute`), this._canvas.setLeft(0), this._domNode.appendChild(this._canvas), this._decorationsCanvas = Nf(document.createElement(`canvas`)), this._decorationsCanvas.setPosition(`absolute`), this._decorationsCanvas.setClassName(`minimap-decorations-layer`), this._decorationsCanvas.setLeft(0), this._domNode.appendChild(this._decorationsCanvas), this._slider = Nf(document.createElement(`div`)), this._slider.setPosition(`absolute`), this._slider.setClassName(`minimap-slider`), this._slider.setLayerHinting(true), this._slider.setContain(`strict`), this._domNode.appendChild(this._slider), this._sliderHorizontal = Nf(document.createElement(`div`)), this._sliderHorizontal.setPosition(`absolute`), this._sliderHorizontal.setClassName(`minimap-slider-horizontal`), this._slider.appendChild(this._sliderHorizontal), this._applyLayout(), this._pointerDownListener = td(this._domNode.domNode, B.POINTER_DOWN, (e12) => {
        e12.preventDefault();
        let t11 = this._model.options.renderMinimap;
        if (t11 === 0 || !this._lastRenderData) return;
        if (this._model.options.size !== `proportional`) {
          if (e12.button === 0 && this._lastRenderData) {
            let t12 = gd(this._slider.domNode), n11 = t12.top + t12.height / 2;
            this._startSliderDragging(e12, n11, this._lastRenderData.renderedLayout);
          }
          return;
        }
        let n10 = this._model.options.minimapLineHeight, r10 = this._model.options.canvasInnerHeight / this._model.options.canvasOuterHeight * e12.offsetY, i10 = Math.floor(r10 / n10), a10 = i10 + this._lastRenderData.renderedLayout.startLineNumber - this._lastRenderData.renderedLayout.topPaddingLineCount;
        a10 = Math.min(a10, this._model.getLineCount()), this._model.revealLineNumber(a10);
      }), this._sliderPointerMoveMonitor = new NE(), this._sliderPointerDownListener = td(this._slider.domNode, B.POINTER_DOWN, (e12) => {
        e12.preventDefault(), e12.stopPropagation(), e12.button === 0 && this._lastRenderData && this._startSliderDragging(e12, e12.pageY, this._lastRenderData.renderedLayout);
      }), this._gestureDisposable = LE.addTarget(this._domNode.domNode), this._sliderTouchStartListener = z(this._domNode.domNode, IE.Start, (e12) => {
        e12.preventDefault(), e12.stopPropagation(), this._lastRenderData && (this._slider.toggleClassName(`active`, true), this._gestureInProgress = true, this.scrollDueToTouchEvent(e12));
      }, {
        passive: false
      }), this._sliderTouchMoveListener = z(this._domNode.domNode, IE.Change, (e12) => {
        e12.preventDefault(), e12.stopPropagation(), this._lastRenderData && this._gestureInProgress && this.scrollDueToTouchEvent(e12);
      }, {
        passive: false
      }), this._sliderTouchEndListener = td(this._domNode.domNode, IE.End, (e12) => {
        e12.preventDefault(), e12.stopPropagation(), this._gestureInProgress = false, this._slider.toggleClassName(`active`, false);
      });
    }
    _startSliderDragging(e11, t10, n10) {
      if (!e11.target || !(e11.target instanceof Element)) return;
      let r10 = e11.pageX;
      this._slider.toggleClassName(`active`, true);
      let i10 = (e12, i11) => {
        let a10 = gd(this._domNode.domNode), o10 = Math.min(Math.abs(i11 - r10), Math.abs(i11 - a10.left), Math.abs(i11 - a10.left - a10.width));
        if (mt && o10 > j0) {
          this._model.setScrollTop(n10.scrollTop);
          return;
        }
        let s10 = e12 - t10;
        this._model.setScrollTop(n10.getDesiredScrollTopFromDelta(s10));
      };
      e11.pageY !== t10 && i10(e11.pageY, r10), this._sliderPointerMoveMonitor.startMonitoring(e11.target, e11.pointerId, e11.buttons, (e12) => i10(e12.pageY, e12.pageX), () => {
        this._slider.toggleClassName(`active`, false);
      });
    }
    scrollDueToTouchEvent(e11) {
      let t10 = this._domNode.domNode.getBoundingClientRect().top, n10 = this._lastRenderData.renderedLayout.getDesiredScrollTopFromTouchLocation(e11.pageY - t10);
      this._model.setScrollTop(n10);
    }
    dispose() {
      this._pointerDownListener.dispose(), this._sliderPointerMoveMonitor.dispose(), this._sliderPointerDownListener.dispose(), this._gestureDisposable.dispose(), this._sliderTouchStartListener.dispose(), this._sliderTouchMoveListener.dispose(), this._sliderTouchEndListener.dispose(), super.dispose();
    }
    _getMinimapDomNodeClassName() {
      let e11 = [
        `minimap`
      ];
      return this._model.options.showSlider === `always` ? e11.push(`slider-always`) : e11.push(`slider-mouseover`), this._model.options.autohide && e11.push(`autohide`), e11.join(` `);
    }
    getDomNode() {
      return this._domNode;
    }
    _applyLayout() {
      this._domNode.setLeft(this._model.options.minimapLeft), this._domNode.setWidth(this._model.options.minimapWidth), this._domNode.setHeight(this._model.options.minimapHeight), this._shadow.setHeight(this._model.options.minimapHeight), this._canvas.setWidth(this._model.options.canvasOuterWidth), this._canvas.setHeight(this._model.options.canvasOuterHeight), this._canvas.domNode.width = this._model.options.canvasInnerWidth, this._canvas.domNode.height = this._model.options.canvasInnerHeight, this._decorationsCanvas.setWidth(this._model.options.canvasOuterWidth), this._decorationsCanvas.setHeight(this._model.options.canvasOuterHeight), this._decorationsCanvas.domNode.width = this._model.options.canvasInnerWidth, this._decorationsCanvas.domNode.height = this._model.options.canvasInnerHeight, this._slider.setWidth(this._model.options.minimapWidth);
    }
    _getBuffer() {
      return this._buffers || this._model.options.canvasInnerWidth > 0 && this._model.options.canvasInnerHeight > 0 && (this._buffers = new L0(this._canvas.domNode.getContext(`2d`), this._model.options.canvasInnerWidth, this._model.options.canvasInnerHeight, this._model.options.backgroundColor)), this._buffers ? this._buffers.getBuffer() : null;
    }
    onDidChangeOptions() {
      this._lastRenderData = null, this._buffers = null, this._applyLayout(), this._domNode.setClassName(this._getMinimapDomNodeClassName());
    }
    onSelectionChanged() {
      return this._renderDecorations = true, true;
    }
    onDecorationsChanged() {
      return this._renderDecorations = true, true;
    }
    onFlushed() {
      return this._lastRenderData = null, true;
    }
    onLinesChanged(e11, t10) {
      return this._lastRenderData ? this._lastRenderData.onLinesChanged(e11, t10) : false;
    }
    onLinesDeleted(e11, t10) {
      var _a3;
      return (_a3 = this._lastRenderData) == null ? void 0 : _a3.onLinesDeleted(e11, t10), true;
    }
    onLinesInserted(e11, t10) {
      var _a3;
      return (_a3 = this._lastRenderData) == null ? void 0 : _a3.onLinesInserted(e11, t10), true;
    }
    onScrollChanged() {
      return this._renderDecorations = true, true;
    }
    onThemeChanged() {
      return this._selectionColor = this._theme.getColor(Ww), this._renderDecorations = true, true;
    }
    onTokensChanged(e11) {
      return this._lastRenderData ? this._lastRenderData.onTokensChanged(e11) : false;
    }
    onTokensColorsChanged() {
      return this._lastRenderData = null, this._buffers = null, true;
    }
    onZonesChanged() {
      return this._lastRenderData = null, true;
    }
    render(e11) {
      let t10 = this._model.options.renderMinimap;
      if (t10 === 0) {
        this._shadow.setClassName(`minimap-shadow-hidden`), this._sliderHorizontal.setWidth(0), this._sliderHorizontal.setHeight(0);
        return;
      }
      e11.scrollLeft + e11.viewportWidth >= e11.scrollWidth ? this._shadow.setClassName(`minimap-shadow-hidden`) : this._shadow.setClassName(`minimap-shadow-visible`);
      let n10 = P0.create(this._model.options, e11.viewportStartLineNumber, e11.viewportEndLineNumber, e11.viewportStartLineNumberVerticalOffset, e11.viewportHeight, e11.viewportContainsWhitespaceGaps, this._model.getLineCount(), this._model.getRealLineCount(), e11.scrollTop, e11.scrollHeight, this._lastRenderData ? this._lastRenderData.renderedLayout : null);
      this._slider.setDisplay(n10.sliderNeeded ? `block` : `none`), this._slider.setTop(n10.sliderTop), this._slider.setHeight(n10.sliderHeight), this._sliderHorizontal.setLeft(0), this._sliderHorizontal.setWidth(this._model.options.minimapWidth), this._sliderHorizontal.setTop(0), this._sliderHorizontal.setHeight(n10.sliderHeight), this.renderDecorations(n10), this._lastRenderData = this.renderLines(n10);
    }
    renderDecorations(e11) {
      if (this._renderDecorations) {
        this._renderDecorations = false;
        let t10 = this._model.getSelections();
        t10.sort(F.compareRangesUsingStarts);
        let n10 = this._model.getMinimapDecorationsInViewport(e11.startLineNumber, e11.endLineNumber);
        n10.sort((e12, t11) => (e12.options.zIndex || 0) - (t11.options.zIndex || 0));
        let { canvasInnerWidth: r10, canvasInnerHeight: i10 } = this._model.options, a10 = this._model.options.minimapLineHeight, o10 = this._model.options.minimapCharWidth, s10 = this._model.getOptions().tabSize, c10 = this._decorationsCanvas.domNode.getContext(`2d`);
        c10.clearRect(0, 0, r10, i10);
        let l10 = new V0(e11.startLineNumber, e11.endLineNumber, false);
        this._renderSelectionLineHighlights(c10, t10, l10, e11, a10), this._renderDecorationsLineHighlights(c10, n10, l10, e11, a10);
        let u10 = new V0(e11.startLineNumber, e11.endLineNumber, null);
        this._renderSelectionsHighlights(c10, t10, u10, e11, a10, s10, o10, r10), this._renderDecorationsHighlights(c10, n10, u10, e11, a10, s10, o10, r10), this._renderSectionHeaders(e11);
      }
    }
    _renderSelectionLineHighlights(e11, t10, n10, r10, i10) {
      if (!this._selectionColor || this._selectionColor.isTransparent()) return;
      e11.fillStyle = this._selectionColor.transparent(0.5).toString();
      let a10 = 0, o10 = 0;
      for (let s10 of t10) {
        let t11 = r10.intersectWithViewport(s10);
        if (!t11) continue;
        let [c10, l10] = t11;
        for (let e12 = c10; e12 <= l10; e12++) n10.set(e12, true);
        let u10 = r10.getYForLineNumber(c10, i10), d10 = r10.getYForLineNumber(l10, i10);
        o10 >= u10 ? o10 = d10 : (o10 > a10 && e11.fillRect(Kt, a10, e11.canvas.width, o10 - a10), a10 = u10, o10 = d10);
      }
      o10 > a10 && e11.fillRect(Kt, a10, e11.canvas.width, o10 - a10);
    }
    _renderDecorationsLineHighlights(e11, t10, n10, r10, i10) {
      let a10 = /* @__PURE__ */ new Map();
      for (let o10 = t10.length - 1; o10 >= 0; o10--) {
        let s10 = t10[o10], c10 = s10.options.minimap;
        if (!c10 || c10.position !== 1) continue;
        let l10 = r10.intersectWithViewport(s10.range);
        if (!l10) continue;
        let [u10, d10] = l10, f10 = c10.getColor(this._theme.value);
        if (!f10 || f10.isTransparent()) continue;
        let p10 = a10.get(f10.toString());
        p10 || (p10 = f10.transparent(0.5).toString(), a10.set(f10.toString(), p10)), e11.fillStyle = p10;
        for (let t11 = u10; t11 <= d10; t11++) {
          if (n10.has(t11)) continue;
          n10.set(t11, true);
          let a11 = r10.getYForLineNumber(u10, i10);
          e11.fillRect(Kt, a11, e11.canvas.width, i10);
        }
      }
    }
    _renderSelectionsHighlights(e11, t10, n10, r10, i10, a10, o10, s10) {
      if (!(!this._selectionColor || this._selectionColor.isTransparent())) for (let c10 of t10) {
        let t11 = r10.intersectWithViewport(c10);
        if (!t11) continue;
        let [l10, u10] = t11;
        for (let t12 = l10; t12 <= u10; t12++) this.renderDecorationOnLine(e11, n10, c10, this._selectionColor, r10, t12, i10, i10, a10, o10, s10);
      }
    }
    _renderDecorationsHighlights(e11, t10, n10, r10, i10, a10, o10, s10) {
      for (let c10 of t10) {
        let t11 = c10.options.minimap;
        if (!t11) continue;
        let l10 = r10.intersectWithViewport(c10.range);
        if (!l10) continue;
        let [u10, d10] = l10, f10 = t11.getColor(this._theme.value);
        if (!f10 || f10.isTransparent()) continue;
        for (let l11 = u10; l11 <= d10; l11++) switch (t11.position) {
          case 1:
            this.renderDecorationOnLine(e11, n10, c10.range, f10, r10, l11, i10, i10, a10, o10, s10);
            continue;
          case 2: {
            let t12 = r10.getYForLineNumber(l11, i10), n11 = 2;
            this.renderDecoration(e11, f10, n11, t12, M0, i10);
            continue;
          }
        }
      }
    }
    renderDecorationOnLine(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      let d10 = i10.getYForLineNumber(a10, s10);
      if (d10 + o10 < 0 || d10 > this._model.options.canvasInnerHeight) return;
      let { startLineNumber: f10, endLineNumber: p10 } = n10, m10 = f10 === a10 ? n10.startColumn : 1, h10 = p10 === a10 ? n10.endColumn : this._model.getLineMaxColumn(a10), g10 = this.getXOffsetForPosition(t10, a10, m10, c10, l10, u10), _10 = this.getXOffsetForPosition(t10, a10, h10, c10, l10, u10);
      this.renderDecoration(e11, r10, g10, d10, _10 - g10, o10);
    }
    getXOffsetForPosition(e11, t10, n10, r10, i10, a10) {
      if (n10 === 1) return Kt;
      let o10 = (n10 - 1) * i10;
      if (o10 >= a10) return a10;
      let s10 = e11.get(t10);
      if (!s10) {
        let n11 = this._model.getLineContent(t10);
        s10 = [
          Kt
        ];
        let o11 = Kt;
        for (let e12 = 1; e12 < n11.length + 1; e12++) {
          let t11 = n11.charCodeAt(e12 - 1), c10 = t11 === 9 ? r10 * i10 : rc(t11) ? 2 * i10 : i10, l10 = o11 + c10;
          if (l10 >= a10) {
            s10[e12] = a10;
            break;
          }
          s10[e12] = l10, o11 = l10;
        }
        e11.set(t10, s10);
      }
      return n10 - 1 < s10.length ? s10[n10 - 1] : a10;
    }
    renderDecoration(e11, t10, n10, r10, i10, a10) {
      e11.fillStyle = t10 && t10.toString() || ``, e11.fillRect(n10, r10, i10, a10);
    }
    _renderSectionHeaders(t10) {
      var _a3;
      let n10 = this._model.options.minimapLineHeight, r10 = this._model.options.sectionHeaderFontSize, i10 = this._model.options.sectionHeaderLetterSpacing, a10 = r10 * 1.5, { canvasInnerWidth: o10 } = this._model.options, s10 = this._model.options.backgroundColor, c10 = `rgb(${s10.r} ${s10.g} ${s10.b} / .7)`, l10 = this._model.options.sectionHeaderFontColor, u10 = `rgb(${l10.r} ${l10.g} ${l10.b})`, d10 = u10, f10 = this._decorationsCanvas.domNode.getContext(`2d`);
      f10.letterSpacing = i10 + `px`, f10.font = `500 ` + r10 + `px ` + this._model.options.sectionHeaderFontFamily, f10.strokeStyle = d10, f10.lineWidth = 0.2;
      let p10 = this._model.getSectionHeaderDecorationsInViewport(t10.startLineNumber, t10.endLineNumber);
      p10.sort((e11, t11) => e11.range.startLineNumber - t11.range.startLineNumber);
      let m10 = e10._fitSectionHeader.bind(null, f10, o10 - Kt);
      for (let i11 of p10) {
        let s11 = t10.getYForLineNumber(i11.range.startLineNumber, n10) + r10, l11 = s11 - r10, d11 = l11 + 2, p11 = this._model.getSectionHeaderText(i11, m10);
        e10._renderSectionLabel(f10, p11, ((_a3 = i11.options.minimap) == null ? void 0 : _a3.sectionHeaderStyle) === 2, c10, u10, o10, l11, a10, s11, d11);
      }
    }
    static _fitSectionHeader(e11, t10, n10) {
      if (!n10) return n10;
      let r10 = `\u2026`, i10 = e11.measureText(n10).width, a10 = e11.measureText(r10).width;
      if (i10 <= t10 || i10 <= a10) return n10;
      let o10 = n10.length, s10 = i10 / n10.length, c10 = Math.floor((t10 - a10) / s10) - 1, l10 = Math.ceil(c10 / 2);
      for (; l10 > 0 && /\s/.test(n10[l10 - 1]); ) --l10;
      return n10.substring(0, l10) + r10 + n10.substring(o10 - (c10 - l10));
    }
    static _renderSectionLabel(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      t10 && (e11.fillStyle = r10, e11.fillRect(0, o10, a10, s10), e11.fillStyle = i10, e11.fillText(t10, Kt, c10)), n10 && (e11.beginPath(), e11.moveTo(0, l10), e11.lineTo(a10, l10), e11.closePath(), e11.stroke());
    }
    renderLines(t10) {
      let n10 = t10.startLineNumber, r10 = t10.endLineNumber, i10 = this._model.options.minimapLineHeight;
      if (this._lastRenderData && this._lastRenderData.linesEquals(t10)) {
        let e11 = this._lastRenderData._get();
        return new I0(t10, e11.imageData, e11.lines);
      }
      let a10 = this._getBuffer();
      if (!a10) return null;
      let [o10, s10, c10] = e10._renderUntouchedLines(a10, t10.topPaddingLineCount, n10, r10, i10, this._lastRenderData), l10 = this._model.getMinimapLinesRenderingData(n10, r10, c10), u10 = this._model.getOptions().tabSize, d10 = this._model.options.defaultBackgroundColor, f10 = this._model.options.backgroundColor, p10 = this._model.options.foregroundAlpha, m10 = this._model.tokensColorTracker, h10 = m10.backgroundIsLight(), g10 = this._model.options.renderMinimap, _10 = this._model.options.charRenderer(), v10 = this._model.options.fontScale, y10 = this._model.options.minimapCharWidth, b10 = g10 === 1 ? 2 : 3, x10 = b10 * v10, S10 = i10 > x10 ? Math.floor((i10 - x10) / 2) : 0, C10 = f10.a / 255, w10 = new x0(Math.round((f10.r - d10.r) * C10 + d10.r), Math.round((f10.g - d10.g) * C10 + d10.g), Math.round((f10.b - d10.b) * C10 + d10.b), 255), ee2 = t10.topPaddingLineCount * i10, te2 = [];
      for (let t11 = 0, o11 = r10 - n10 + 1; t11 < o11; t11++) c10[t11] && e10._renderLine(a10, w10, f10.a, h10, g10, y10, m10, p10, _10, ee2, S10, u10, l10[t11], v10, i10), te2[t11] = new F0(ee2), ee2 += i10;
      let ne2 = o10 === -1 ? 0 : o10, re2 = s10 === -1 ? a10.height : s10, ie2 = re2 - ne2, ae2 = this._canvas.domNode.getContext(`2d`);
      return ae2.putImageData(a10, 0, 0, 0, ne2, a10.width, ie2), new I0(t10, a10, te2);
    }
    static _renderUntouchedLines(e11, t10, n10, r10, i10, a10) {
      let o10 = [];
      if (!a10) {
        for (let e12 = 0, t11 = r10 - n10 + 1; e12 < t11; e12++) o10[e12] = true;
        return [
          -1,
          -1,
          o10
        ];
      }
      let s10 = a10._get(), c10 = s10.imageData.data, l10 = s10.rendLineNumberStart, u10 = s10.lines, d10 = u10.length, f10 = e11.width, p10 = e11.data, m10 = (r10 - n10 + 1) * i10 * f10 * 4, h10 = -1, g10 = -1, _10 = -1, v10 = -1, y10 = -1, b10 = -1, x10 = t10 * i10;
      for (let e12 = n10; e12 <= r10; e12++) {
        let t11 = e12 - n10, r11 = e12 - l10, a11 = r11 >= 0 && r11 < d10 ? u10[r11].dy : -1;
        if (a11 === -1) {
          o10[t11] = true, x10 += i10;
          continue;
        }
        let s11 = a11 * f10 * 4, S11 = (a11 + i10) * f10 * 4, C11 = x10 * f10 * 4, w10 = (x10 + i10) * f10 * 4;
        v10 === s11 && b10 === C11 ? (v10 = S11, b10 = w10) : (_10 !== -1 && (p10.set(c10.subarray(_10, v10), y10), h10 === -1 && _10 === 0 && _10 === y10 && (h10 = v10), g10 === -1 && v10 === m10 && _10 === y10 && (g10 = _10)), _10 = s11, v10 = S11, y10 = C11, b10 = w10), o10[t11] = false, x10 += i10;
      }
      _10 !== -1 && (p10.set(c10.subarray(_10, v10), y10), h10 === -1 && _10 === 0 && _10 === y10 && (h10 = v10), g10 === -1 && v10 === m10 && _10 === y10 && (g10 = _10));
      let S10 = h10 === -1 ? -1 : h10 / (f10 * 4), C10 = g10 === -1 ? -1 : g10 / (f10 * 4);
      return [
        S10,
        C10,
        o10
      ];
    }
    static _renderLine(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10, p10, m10) {
      let h10 = f10.content, g10 = f10.tokens, _10 = e11.width - a10, v10 = m10 === 1, y10 = Kt, b10 = 0, x10 = 0;
      for (let f11 = 0, m11 = g10.getCount(); f11 < m11; f11++) {
        let m12 = g10.getEndOffset(f11), S10 = g10.getForeground(f11), C10 = o10.getColor(S10);
        for (; b10 < m12; b10++) {
          if (y10 > _10) return;
          let o11 = h10.charCodeAt(b10);
          if (o11 === 9) {
            let e12 = d10 - (b10 + x10) % d10;
            x10 += e12 - 1, y10 += e12 * a10;
          } else if (o11 === 32) y10 += a10;
          else {
            let d11 = rc(o11) ? 2 : 1;
            for (let f12 = 0; f12 < d11; f12++) if (i10 === 2 ? c10.blockRenderChar(e11, y10, l10 + u10, C10, s10, t10, n10, v10) : c10.renderChar(e11, y10, l10 + u10, o11, C10, s10, t10, n10, p10, r10, v10), y10 += a10, y10 > _10) return;
          }
        }
      }
    }
  }, V0 = class {
    constructor(e10, t10, n10) {
      this._startLineNumber = e10, this._endLineNumber = t10, this._defaultValue = n10, this._values = [];
      for (let e11 = 0, t11 = this._endLineNumber - this._startLineNumber + 1; e11 < t11; e11++) this._values[e11] = n10;
    }
    has(e10) {
      return this.get(e10) !== this._defaultValue;
    }
    set(e10, t10) {
      e10 < this._startLineNumber || e10 > this._endLineNumber || (this._values[e10 - this._startLineNumber] = t10);
    }
    get(e10) {
      return e10 < this._startLineNumber || e10 > this._endLineNumber ? this._defaultValue : this._values[e10 - this._startLineNumber];
    }
  }, H0 = class extends ZZ {
    constructor(e10, t10) {
      super(e10), this._viewDomNode = t10;
      let n10 = this._context.configuration.options, r10 = n10.get(146);
      this._widgets = {}, this._verticalScrollbarWidth = r10.verticalScrollbarWidth, this._minimapWidth = r10.minimap.minimapWidth, this._horizontalScrollbarHeight = r10.horizontalScrollbarHeight, this._editorHeight = r10.height, this._editorWidth = r10.width, this._viewDomNodeRect = {
        top: 0,
        left: 0,
        width: 0,
        height: 0
      }, this._domNode = Nf(document.createElement(`div`)), QZ.write(this._domNode, 4), this._domNode.setClassName(`overlayWidgets`), this.overflowingOverlayWidgetsDomNode = Nf(document.createElement(`div`)), QZ.write(this.overflowingOverlayWidgetsDomNode, 5), this.overflowingOverlayWidgetsDomNode.setClassName(`overflowingOverlayWidgets`);
    }
    dispose() {
      super.dispose(), this._widgets = {};
    }
    getDomNode() {
      return this._domNode;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._verticalScrollbarWidth = n10.verticalScrollbarWidth, this._minimapWidth = n10.minimap.minimapWidth, this._horizontalScrollbarHeight = n10.horizontalScrollbarHeight, this._editorHeight = n10.height, this._editorWidth = n10.width, true;
    }
    addWidget(e10) {
      let t10 = Nf(e10.getDomNode());
      this._widgets[e10.getId()] = {
        widget: e10,
        preference: null,
        domNode: t10
      }, t10.setPosition(`absolute`), t10.setAttribute(`widgetId`, e10.getId()), e10.allowEditorOverflow ? this.overflowingOverlayWidgetsDomNode.appendChild(t10) : this._domNode.appendChild(t10), this.setShouldRender(), this._updateMaxMinWidth();
    }
    setWidgetPosition(e10, t10) {
      let n10 = this._widgets[e10.getId()], r10 = t10 ? t10.preference : null, i10 = t10 == null ? void 0 : t10.stackOridinal;
      return n10.preference === r10 && n10.stack === i10 ? (this._updateMaxMinWidth(), false) : (n10.preference = r10, n10.stack = i10, this.setShouldRender(), this._updateMaxMinWidth(), true);
    }
    removeWidget(e10) {
      let t10 = e10.getId();
      if (this._widgets.hasOwnProperty(t10)) {
        let e11 = this._widgets[t10], n10 = e11.domNode.domNode;
        delete this._widgets[t10], n10.remove(), this.setShouldRender(), this._updateMaxMinWidth();
      }
    }
    _updateMaxMinWidth() {
      var _a3, _b3;
      let e10 = 0, t10 = Object.keys(this._widgets);
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) {
        let r11 = t10[n10], i10 = this._widgets[r11], a10 = (_b3 = (_a3 = i10.widget).getMinContentWidthInPx) == null ? void 0 : _b3.call(_a3);
        a10 !== void 0 && (e10 = Math.max(e10, a10));
      }
      this._context.viewLayout.setOverlayWidgetsMinWidth(e10);
    }
    _renderWidget(e10, t10) {
      let n10 = e10.domNode;
      if (e10.preference === null) {
        n10.setTop(``);
        return;
      }
      let r10 = 2 * this._verticalScrollbarWidth + this._minimapWidth;
      if (e10.preference === 0 || e10.preference === 1) {
        if (e10.preference === 1) {
          let e11 = n10.domNode.clientHeight;
          n10.setTop(this._editorHeight - e11 - 2 * this._horizontalScrollbarHeight);
        } else n10.setTop(0);
        e10.stack === void 0 ? n10.setRight(r10) : (n10.setTop(t10[e10.preference]), t10[e10.preference] += n10.domNode.clientWidth);
      } else if (e10.preference === 2) n10.domNode.style.right = `50%`, e10.stack === void 0 ? n10.setTop(0) : (n10.setTop(t10[2]), t10[2] += n10.domNode.clientHeight);
      else {
        let { top: t11, left: r11 } = e10.preference, i10 = this._context.configuration.options.get(42);
        if (i10 && e10.widget.allowEditorOverflow) {
          let e11 = this._viewDomNodeRect;
          n10.setTop(t11 + e11.top), n10.setLeft(r11 + e11.left), n10.setPosition(`fixed`);
        } else n10.setTop(t11), n10.setLeft(r11), n10.setPosition(`absolute`);
      }
    }
    prepareRender(e10) {
      this._viewDomNodeRect = gd(this._viewDomNode.domNode);
    }
    render(e10) {
      this._domNode.setWidth(this._editorWidth);
      let t10 = Object.keys(this._widgets), n10 = Array.from({
        length: 3
      }, () => 0);
      t10.sort((e11, t11) => (this._widgets[e11].stack || 0) - (this._widgets[t11].stack || 0));
      for (let e11 = 0, r10 = t10.length; e11 < r10; e11++) {
        let r11 = t10[e11];
        this._renderWidget(this._widgets[r11], n10);
      }
    }
  }, U0 = class {
    constructor(e10, t10) {
      let n10 = e10.options;
      this.lineHeight = n10.get(67), this.pixelRatio = n10.get(144), this.overviewRulerLanes = n10.get(83), this.renderBorder = n10.get(82);
      let r10 = t10.getColor(FL);
      this.borderColor = r10 ? r10.toString() : null, this.hideCursor = n10.get(59);
      let i10 = t10.getColor(oL);
      this.cursorColorSingle = i10 ? i10.transparent(0.7).toString() : null;
      let a10 = t10.getColor(cL);
      this.cursorColorPrimary = a10 ? a10.transparent(0.7).toString() : null;
      let o10 = t10.getColor(uL);
      this.cursorColorSecondary = o10 ? o10.transparent(0.7).toString() : null, this.themeType = t10.type;
      let s10 = n10.get(73), c10 = s10.enabled, l10 = s10.side, u10 = t10.getColor(IL), d10 = ao.getDefaultBackground();
      u10 ? this.backgroundColor = u10 : c10 && l10 === `right` ? this.backgroundColor = d10 : this.backgroundColor = null;
      let f10 = n10.get(146), p10 = f10.overviewRuler;
      this.top = p10.top, this.right = p10.right, this.domWidth = p10.width, this.domHeight = p10.height, this.overviewRulerLanes === 0 ? (this.canvasWidth = 0, this.canvasHeight = 0) : (this.canvasWidth = this.domWidth * this.pixelRatio | 0, this.canvasHeight = this.domHeight * this.pixelRatio | 0);
      let [m10, h10] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);
      this.x = m10, this.w = h10;
    }
    _initLanes(e10, t10, n10) {
      let r10 = t10 - e10;
      if (n10 >= 3) {
        let t11 = Math.floor(r10 / 3), n11 = Math.floor(r10 / 3), i10 = r10 - t11 - n11, a10 = e10, o10 = a10 + t11, s10 = a10 + t11 + i10;
        return [
          [
            0,
            a10,
            o10,
            a10,
            s10,
            a10,
            o10,
            a10
          ],
          [
            0,
            t11,
            i10,
            t11 + i10,
            n11,
            t11 + i10 + n11,
            i10 + n11,
            t11 + i10 + n11
          ]
        ];
      } else if (n10 === 2) {
        let t11 = Math.floor(r10 / 2), n11 = r10 - t11, i10 = e10, a10 = i10 + t11;
        return [
          [
            0,
            i10,
            i10,
            i10,
            a10,
            i10,
            i10,
            i10
          ],
          [
            0,
            t11,
            t11,
            t11,
            n11,
            t11 + n11,
            t11 + n11,
            t11 + n11
          ]
        ];
      } else {
        let t11 = e10, n11 = r10;
        return [
          [
            0,
            t11,
            t11,
            t11,
            t11,
            t11,
            t11,
            t11
          ],
          [
            0,
            n11,
            n11,
            n11,
            n11,
            n11,
            n11,
            n11
          ]
        ];
      }
    }
    equals(e10) {
      return this.lineHeight === e10.lineHeight && this.pixelRatio === e10.pixelRatio && this.overviewRulerLanes === e10.overviewRulerLanes && this.renderBorder === e10.renderBorder && this.borderColor === e10.borderColor && this.hideCursor === e10.hideCursor && this.cursorColorSingle === e10.cursorColorSingle && this.cursorColorPrimary === e10.cursorColorPrimary && this.cursorColorSecondary === e10.cursorColorSecondary && this.themeType === e10.themeType && K.equals(this.backgroundColor, e10.backgroundColor) && this.top === e10.top && this.right === e10.right && this.domWidth === e10.domWidth && this.domHeight === e10.domHeight && this.canvasWidth === e10.canvasWidth && this.canvasHeight === e10.canvasHeight;
    }
  }, W0 = class extends ZZ {
    constructor(e10) {
      super(e10), this._actualShouldRender = 0, this._renderedDecorations = [], this._renderedCursorPositions = [], this._domNode = Nf(document.createElement(`canvas`)), this._domNode.setClassName(`decorationsOverviewRuler`), this._domNode.setPosition(`absolute`), this._domNode.setLayerHinting(true), this._domNode.setContain(`strict`), this._domNode.setAttribute(`aria-hidden`, `true`), this._updateSettings(false), this._tokensColorTrackerListener = ao.onDidChange((e11) => {
        e11.changedColorMap && this._updateSettings(true);
      }), this._cursorPositions = [
        {
          position: new P(1, 1),
          color: this._settings.cursorColorSingle
        }
      ];
    }
    dispose() {
      super.dispose(), this._tokensColorTrackerListener.dispose();
    }
    _updateSettings(e10) {
      let t10 = new U0(this._context.configuration, this._context.theme);
      return this._settings && this._settings.equals(t10) ? false : (this._settings = t10, this._domNode.setTop(this._settings.top), this._domNode.setRight(this._settings.right), this._domNode.setWidth(this._settings.domWidth), this._domNode.setHeight(this._settings.domHeight), this._domNode.domNode.width = this._settings.canvasWidth, this._domNode.domNode.height = this._settings.canvasHeight, e10 && this._render(), true);
    }
    _markRenderingIsNeeded() {
      return this._actualShouldRender = 2, true;
    }
    _markRenderingIsMaybeNeeded() {
      return this._actualShouldRender = 1, true;
    }
    onConfigurationChanged(e10) {
      return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;
    }
    onCursorStateChanged(e10) {
      this._cursorPositions = [];
      for (let t10 = 0, n10 = e10.selections.length; t10 < n10; t10++) {
        let r10 = this._settings.cursorColorSingle;
        n10 > 1 && (r10 = t10 === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary), this._cursorPositions.push({
          position: e10.selections[t10].getPosition(),
          color: r10
        });
      }
      return this._cursorPositions.sort((e11, t10) => P.compare(e11.position, t10.position)), this._markRenderingIsMaybeNeeded();
    }
    onDecorationsChanged(e10) {
      return e10.affectsOverviewRuler ? this._markRenderingIsMaybeNeeded() : false;
    }
    onFlushed(e10) {
      return this._markRenderingIsNeeded();
    }
    onScrollChanged(e10) {
      return e10.scrollHeightChanged ? this._markRenderingIsNeeded() : false;
    }
    onZonesChanged(e10) {
      return this._markRenderingIsNeeded();
    }
    onThemeChanged(e10) {
      return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;
    }
    getDomNode() {
      return this._domNode.domNode;
    }
    prepareRender(e10) {
    }
    render(e10) {
      this._render(), this._actualShouldRender = 0;
    }
    _render() {
      let e10 = this._settings.backgroundColor;
      if (this._settings.overviewRulerLanes === 0) {
        this._domNode.setBackgroundColor(e10 ? K.Format.CSS.formatHexA(e10) : ``), this._domNode.setDisplay(`none`);
        return;
      }
      let t10 = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);
      if (t10.sort(RX.compareByRenderingProps), this._actualShouldRender === 1 && !RX.equalsArr(this._renderedDecorations, t10) && (this._actualShouldRender = 2), this._actualShouldRender === 1 && !l(this._renderedCursorPositions, this._cursorPositions, (e11, t11) => e11.position.lineNumber === t11.position.lineNumber && e11.color === t11.color) && (this._actualShouldRender = 2), this._actualShouldRender === 1) return;
      this._renderedDecorations = t10, this._renderedCursorPositions = this._cursorPositions, this._domNode.setDisplay(`block`);
      let n10 = this._settings.canvasWidth, r10 = this._settings.canvasHeight, i10 = this._settings.lineHeight, a10 = this._context.viewLayout, o10 = this._context.viewLayout.getScrollHeight(), s10 = r10 / o10, c10 = 6 * this._settings.pixelRatio | 0, u10 = c10 / 2 | 0, d10 = this._domNode.domNode.getContext(`2d`);
      e10 ? e10.isOpaque() ? (d10.fillStyle = K.Format.CSS.formatHexA(e10), d10.fillRect(0, 0, n10, r10)) : (d10.clearRect(0, 0, n10, r10), d10.fillStyle = K.Format.CSS.formatHexA(e10), d10.fillRect(0, 0, n10, r10)) : d10.clearRect(0, 0, n10, r10);
      let f10 = this._settings.x, p10 = this._settings.w;
      for (let e11 of t10) {
        let t11 = e11.color, n11 = e11.data;
        d10.fillStyle = t11;
        let o11 = 0, l10 = 0, m10 = 0;
        for (let e12 = 0, t12 = n11.length / 3; e12 < t12; e12++) {
          let t13 = n11[3 * e12], h10 = n11[3 * e12 + 1], g10 = n11[3 * e12 + 2], _10 = a10.getVerticalOffsetForLineNumber(h10) * s10 | 0, v10 = (a10.getVerticalOffsetForLineNumber(g10) + i10) * s10 | 0, y10 = v10 - _10;
          if (y10 < c10) {
            let e13 = (_10 + v10) / 2 | 0;
            e13 < u10 ? e13 = u10 : e13 + u10 > r10 && (e13 = r10 - u10), _10 = e13 - u10, v10 = e13 + u10;
          }
          _10 > m10 + 1 || t13 !== o11 ? (e12 !== 0 && d10.fillRect(f10[o11], l10, p10[o11], m10 - l10), o11 = t13, l10 = _10, m10 = v10) : v10 > m10 && (m10 = v10);
        }
        d10.fillRect(f10[o11], l10, p10[o11], m10 - l10);
      }
      if (!this._settings.hideCursor) {
        let e11 = 2 * this._settings.pixelRatio | 0, t11 = e11 / 2 | 0, n11 = this._settings.x[7], i11 = this._settings.w[7], o11 = -100, c11 = -100, l10 = null;
        for (let u11 = 0, f11 = this._cursorPositions.length; u11 < f11; u11++) {
          let f12 = this._cursorPositions[u11].color;
          if (!f12) continue;
          let p11 = this._cursorPositions[u11].position, m10 = a10.getVerticalOffsetForLineNumber(p11.lineNumber) * s10 | 0;
          m10 < t11 ? m10 = t11 : m10 + t11 > r10 && (m10 = r10 - t11);
          let h10 = m10 - t11, g10 = h10 + e11;
          h10 > c11 + 1 || f12 !== l10 ? (u11 !== 0 && l10 && d10.fillRect(n11, o11, i11, c11 - o11), o11 = h10, c11 = g10) : g10 > c11 && (c11 = g10), l10 = f12, d10.fillStyle = f12;
        }
        l10 && d10.fillRect(n11, o11, i11, c11 - o11);
      }
      this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0 && (d10.beginPath(), d10.lineWidth = 1, d10.strokeStyle = this._settings.borderColor, d10.moveTo(0, 0), d10.lineTo(0, r10), d10.moveTo(1, 0), d10.lineTo(n10, 0), d10.stroke());
    }
  }, G0 = class {
    constructor(e10, t10, n10) {
      this._colorZoneBrand = void 0, this.from = e10 | 0, this.to = t10 | 0, this.colorId = n10 | 0;
    }
    static compare(e10, t10) {
      return e10.colorId === t10.colorId ? e10.from === t10.from ? e10.to - t10.to : e10.from - t10.from : e10.colorId - t10.colorId;
    }
  }, K0 = class {
    constructor(e10, t10, n10, r10) {
      this._overviewRulerZoneBrand = void 0, this.startLineNumber = e10, this.endLineNumber = t10, this.heightInLines = n10, this.color = r10, this._colorZone = null;
    }
    static compare(e10, t10) {
      return e10.color === t10.color ? e10.startLineNumber === t10.startLineNumber ? e10.heightInLines === t10.heightInLines ? e10.endLineNumber - t10.endLineNumber : e10.heightInLines - t10.heightInLines : e10.startLineNumber - t10.startLineNumber : e10.color < t10.color ? -1 : 1;
    }
    setColorZone(e10) {
      this._colorZone = e10;
    }
    getColorZones() {
      return this._colorZone;
    }
  }, q0 = class {
    constructor(e10) {
      this._getVerticalOffsetForLine = e10, this._zones = [], this._colorZonesInvalid = false, this._lineHeight = 0, this._domWidth = 0, this._domHeight = 0, this._outerHeight = 0, this._pixelRatio = 1, this._lastAssignedId = 0, this._color2Id = /* @__PURE__ */ Object.create(null), this._id2Color = [];
    }
    getId2Color() {
      return this._id2Color;
    }
    setZones(e10) {
      this._zones = e10, this._zones.sort(K0.compare);
    }
    setLineHeight(e10) {
      return this._lineHeight === e10 ? false : (this._lineHeight = e10, this._colorZonesInvalid = true, true);
    }
    setPixelRatio(e10) {
      this._pixelRatio = e10, this._colorZonesInvalid = true;
    }
    getDOMWidth() {
      return this._domWidth;
    }
    getCanvasWidth() {
      return this._domWidth * this._pixelRatio;
    }
    setDOMWidth(e10) {
      return this._domWidth === e10 ? false : (this._domWidth = e10, this._colorZonesInvalid = true, true);
    }
    getDOMHeight() {
      return this._domHeight;
    }
    getCanvasHeight() {
      return this._domHeight * this._pixelRatio;
    }
    setDOMHeight(e10) {
      return this._domHeight === e10 ? false : (this._domHeight = e10, this._colorZonesInvalid = true, true);
    }
    getOuterHeight() {
      return this._outerHeight;
    }
    setOuterHeight(e10) {
      return this._outerHeight === e10 ? false : (this._outerHeight = e10, this._colorZonesInvalid = true, true);
    }
    resolveColorZones() {
      let e10 = this._colorZonesInvalid, t10 = Math.floor(this._lineHeight), n10 = Math.floor(this.getCanvasHeight()), r10 = Math.floor(this._outerHeight), i10 = n10 / r10, a10 = Math.floor(4 * this._pixelRatio / 2), o10 = [];
      for (let r11 = 0, s10 = this._zones.length; r11 < s10; r11++) {
        let s11 = this._zones[r11];
        if (!e10) {
          let e11 = s11.getColorZones();
          if (e11) {
            o10.push(e11);
            continue;
          }
        }
        let c10 = this._getVerticalOffsetForLine(s11.startLineNumber), l10 = s11.heightInLines === 0 ? this._getVerticalOffsetForLine(s11.endLineNumber) + t10 : c10 + s11.heightInLines * t10, u10 = Math.floor(i10 * c10), d10 = Math.floor(i10 * l10), f10 = Math.floor((u10 + d10) / 2), p10 = d10 - f10;
        p10 < a10 && (p10 = a10), f10 - p10 < 0 && (f10 = p10), f10 + p10 > n10 && (f10 = n10 - p10);
        let m10 = s11.color, h10 = this._color2Id[m10];
        h10 || (h10 = ++this._lastAssignedId, this._color2Id[m10] = h10, this._id2Color[h10] = m10);
        let g10 = new G0(f10 - p10, f10 + p10, h10);
        s11.setColorZone(g10), o10.push(g10);
      }
      return this._colorZonesInvalid = false, o10.sort(G0.compare), o10;
    }
  }, J0 = class extends XZ {
    constructor(e10, t10) {
      super(), this._context = e10;
      let n10 = this._context.configuration.options;
      this._domNode = Nf(document.createElement(`canvas`)), this._domNode.setClassName(t10), this._domNode.setPosition(`absolute`), this._domNode.setLayerHinting(true), this._domNode.setContain(`strict`), this._zoneManager = new q0((e11) => this._context.viewLayout.getVerticalOffsetForLineNumber(e11)), this._zoneManager.setDOMWidth(0), this._zoneManager.setDOMHeight(0), this._zoneManager.setOuterHeight(this._context.viewLayout.getScrollHeight()), this._zoneManager.setLineHeight(n10.get(67)), this._zoneManager.setPixelRatio(n10.get(144)), this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      return e10.hasChanged(67) && (this._zoneManager.setLineHeight(t10.get(67)), this._render()), e10.hasChanged(144) && (this._zoneManager.setPixelRatio(t10.get(144)), this._domNode.setWidth(this._zoneManager.getDOMWidth()), this._domNode.setHeight(this._zoneManager.getDOMHeight()), this._domNode.domNode.width = this._zoneManager.getCanvasWidth(), this._domNode.domNode.height = this._zoneManager.getCanvasHeight(), this._render()), true;
    }
    onFlushed(e10) {
      return this._render(), true;
    }
    onScrollChanged(e10) {
      return e10.scrollHeightChanged && (this._zoneManager.setOuterHeight(e10.scrollHeight), this._render()), true;
    }
    onZonesChanged(e10) {
      return this._render(), true;
    }
    getDomNode() {
      return this._domNode.domNode;
    }
    setLayout(e10) {
      this._domNode.setTop(e10.top), this._domNode.setRight(e10.right);
      let t10 = false;
      t10 = this._zoneManager.setDOMWidth(e10.width) || t10, t10 = this._zoneManager.setDOMHeight(e10.height) || t10, t10 && (this._domNode.setWidth(this._zoneManager.getDOMWidth()), this._domNode.setHeight(this._zoneManager.getDOMHeight()), this._domNode.domNode.width = this._zoneManager.getCanvasWidth(), this._domNode.domNode.height = this._zoneManager.getCanvasHeight(), this._render());
    }
    setZones(e10) {
      this._zoneManager.setZones(e10), this._render();
    }
    _render() {
      if (this._zoneManager.getOuterHeight() === 0) return false;
      let e10 = this._zoneManager.getCanvasWidth(), t10 = this._zoneManager.getCanvasHeight(), n10 = this._zoneManager.resolveColorZones(), r10 = this._zoneManager.getId2Color(), i10 = this._domNode.domNode.getContext(`2d`);
      return i10.clearRect(0, 0, e10, t10), n10.length > 0 && this._renderOneLane(i10, n10, r10, e10), true;
    }
    _renderOneLane(e10, t10, n10, r10) {
      let i10 = 0, a10 = 0, o10 = 0;
      for (let s10 of t10) {
        let t11 = s10.colorId, c10 = s10.from, l10 = s10.to;
        t11 === i10 ? o10 >= c10 ? o10 = Math.max(o10, l10) : (e10.fillRect(0, a10, r10, o10 - a10), a10 = c10, o10 = l10) : (e10.fillRect(0, a10, r10, o10 - a10), i10 = t11, e10.fillStyle = n10[i10], a10 = c10, o10 = l10);
      }
      e10.fillRect(0, a10, r10, o10 - a10);
    }
  }, Y0 = class extends ZZ {
    constructor(e10) {
      super(e10), this.domNode = Nf(document.createElement(`div`)), this.domNode.setAttribute(`role`, `presentation`), this.domNode.setAttribute(`aria-hidden`, `true`), this.domNode.setClassName(`view-rulers`), this._renderedRulers = [];
      let t10 = this._context.configuration.options;
      this._rulers = t10.get(103), this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth;
    }
    dispose() {
      super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      return this._rulers = t10.get(103), this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth, true;
    }
    onScrollChanged(e10) {
      return e10.scrollHeightChanged;
    }
    prepareRender(e10) {
    }
    _ensureRulersCount() {
      let e10 = this._renderedRulers.length, t10 = this._rulers.length;
      if (e10 === t10) return;
      if (e10 < t10) {
        let { tabSize: n11 } = this._context.viewModel.model.getOptions(), r10 = n11, i10 = t10 - e10;
        for (; i10 > 0; ) {
          let e11 = Nf(document.createElement(`div`));
          e11.setClassName(`view-ruler`), e11.setWidth(r10), this.domNode.appendChild(e11), this._renderedRulers.push(e11), i10--;
        }
        return;
      }
      let n10 = e10 - t10;
      for (; n10 > 0; ) {
        let e11 = this._renderedRulers.pop();
        this.domNode.removeChild(e11), n10--;
      }
    }
    render(e10) {
      this._ensureRulersCount();
      for (let t10 = 0, n10 = this._rulers.length; t10 < n10; t10++) {
        let n11 = this._renderedRulers[t10], r10 = this._rulers[t10];
        n11.setBoxShadow(r10.color ? `1px 0 0 0 ${r10.color} inset` : ``), n11.setHeight(Math.min(e10.scrollHeight, 1e6)), n11.setLeft(r10.column * this._typicalHalfwidthCharacterWidth);
      }
    }
  }, X0 = class extends ZZ {
    constructor(e10) {
      super(e10), this._scrollTop = 0, this._width = 0, this._updateWidth(), this._shouldShow = false;
      let t10 = this._context.configuration.options, n10 = t10.get(104);
      this._useShadows = n10.useShadows, this._domNode = Nf(document.createElement(`div`)), this._domNode.setAttribute(`role`, `presentation`), this._domNode.setAttribute(`aria-hidden`, `true`);
    }
    dispose() {
      super.dispose();
    }
    _updateShouldShow() {
      let e10 = this._useShadows && this._scrollTop > 0;
      return this._shouldShow === e10 ? false : (this._shouldShow = e10, true);
    }
    getDomNode() {
      return this._domNode;
    }
    _updateWidth() {
      let e10 = this._context.configuration.options, t10 = e10.get(146);
      t10.minimap.renderMinimap === 0 || t10.minimap.minimapWidth > 0 && t10.minimap.minimapLeft === 0 ? this._width = t10.width : this._width = t10.width - t10.verticalScrollbarWidth;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(104);
      return this._useShadows = n10.useShadows, this._updateWidth(), this._updateShouldShow(), true;
    }
    onScrollChanged(e10) {
      return this._scrollTop = e10.scrollTop, this._updateShouldShow();
    }
    prepareRender(e10) {
    }
    render(e10) {
      this._domNode.setWidth(this._width), this._domNode.setClassName(this._shouldShow ? `scroll-decoration` : ``);
    }
  }, Z0 = class {
    constructor(e10) {
      this.left = e10.left, this.width = e10.width, this.startStyle = null, this.endStyle = null;
    }
  }, Q0 = class {
    constructor(e10, t10) {
      this.lineNumber = e10, this.ranges = t10;
    }
  };
  function $0(e10) {
    return new Z0(e10);
  }
  function e2(e10) {
    return new Q0(e10.lineNumber, e10.ranges.map($0));
  }
  var t2 = (_ab = class extends $Q {
    constructor(e10) {
      super(), this._previousFrameVisibleRangesWithStyle = [], this._context = e10;
      let t10 = this._context.configuration.options;
      this._roundedSelection = t10.get(102), this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth, this._selections = [], this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      return this._roundedSelection = t10.get(102), this._typicalHalfwidthCharacterWidth = t10.get(50).typicalHalfwidthCharacterWidth, true;
    }
    onCursorStateChanged(e10) {
      return this._selections = e10.selections.slice(0), true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    _visibleRangesHaveGaps(e10) {
      for (let t10 = 0, n10 = e10.length; t10 < n10; t10++) {
        let n11 = e10[t10];
        if (n11.ranges.length > 1) return true;
      }
      return false;
    }
    _enrichVisibleRangesWithStyle(e10, t10, n10) {
      let r10 = this._typicalHalfwidthCharacterWidth / 4, i10 = null, a10 = null;
      if (n10 && n10.length > 0 && t10.length > 0) {
        let r11 = t10[0].lineNumber;
        if (r11 === e10.startLineNumber) for (let e11 = 0; !i10 && e11 < n10.length; e11++) n10[e11].lineNumber === r11 && (i10 = n10[e11].ranges[0]);
        let o10 = t10[t10.length - 1].lineNumber;
        if (o10 === e10.endLineNumber) for (let e11 = n10.length - 1; !a10 && e11 >= 0; e11--) n10[e11].lineNumber === o10 && (a10 = n10[e11].ranges[0]);
        i10 && !i10.startStyle && (i10 = null), a10 && !a10.startStyle && (a10 = null);
      }
      for (let e11 = 0, n11 = t10.length; e11 < n11; e11++) {
        let o10 = t10[e11].ranges[0], s10 = o10.left, c10 = o10.left + o10.width, l10 = {
          top: 0,
          bottom: 0
        }, u10 = {
          top: 0,
          bottom: 0
        };
        if (e11 > 0) {
          let n12 = t10[e11 - 1].ranges[0].left, i11 = t10[e11 - 1].ranges[0].left + t10[e11 - 1].ranges[0].width;
          n2(s10 - n12) < r10 ? l10.top = 2 : s10 > n12 && (l10.top = 1), n2(c10 - i11) < r10 ? u10.top = 2 : n12 < c10 && c10 < i11 && (u10.top = 1);
        } else i10 && (l10.top = i10.startStyle.top, u10.top = i10.endStyle.top);
        if (e11 + 1 < n11) {
          let n12 = t10[e11 + 1].ranges[0].left, i11 = t10[e11 + 1].ranges[0].left + t10[e11 + 1].ranges[0].width;
          n2(s10 - n12) < r10 ? l10.bottom = 2 : n12 < s10 && s10 < i11 && (l10.bottom = 1), n2(c10 - i11) < r10 ? u10.bottom = 2 : c10 < i11 && (u10.bottom = 1);
        } else a10 && (l10.bottom = a10.startStyle.bottom, u10.bottom = a10.endStyle.bottom);
        o10.startStyle = l10, o10.endStyle = u10;
      }
    }
    _getVisibleRangesWithStyle(e10, t10, n10) {
      let r10 = t10.linesVisibleRangesForRange(e10, true) || [], i10 = r10.map(e2), a10 = this._visibleRangesHaveGaps(i10);
      return !a10 && this._roundedSelection && this._enrichVisibleRangesWithStyle(t10.visibleRange, i10, n10), i10;
    }
    _createSelectionPiece(e10, t10, n10, r10, i10) {
      return `<div class="cslr ` + n10 + `" style="top:` + e10.toString() + `px;bottom:` + t10.toString() + `px;left:` + r10.toString() + `px;width:` + i10.toString() + `px;"></div>`;
    }
    _actualRenderOneSelection(t10, n10, r10, i10) {
      if (i10.length === 0) return;
      let a10 = !!i10[0].ranges[0].startStyle, o10 = i10[0].lineNumber, s10 = i10[i10.length - 1].lineNumber;
      for (let c10 = 0, l10 = i10.length; c10 < l10; c10++) {
        let l11 = i10[c10], u10 = l11.lineNumber, d10 = u10 - n10, f10 = r10 && u10 === o10 ? 1 : 0, p10 = r10 && u10 !== o10 && u10 === s10 ? 1 : 0, m10 = ``, h10 = ``;
        for (let t11 = 0, n11 = l11.ranges.length; t11 < n11; t11++) {
          let n12 = l11.ranges[t11];
          if (a10) {
            let t12 = n12.startStyle, r12 = n12.endStyle;
            if (t12.top === 1 || t12.bottom === 1) {
              m10 += this._createSelectionPiece(f10, p10, _ab.SELECTION_CLASS_NAME, n12.left - _ab.ROUNDED_PIECE_WIDTH, _ab.ROUNDED_PIECE_WIDTH);
              let r13 = _ab.EDITOR_BACKGROUND_CLASS_NAME;
              t12.top === 1 && (r13 += ` ` + _ab.SELECTION_TOP_RIGHT), t12.bottom === 1 && (r13 += ` ` + _ab.SELECTION_BOTTOM_RIGHT), m10 += this._createSelectionPiece(f10, p10, r13, n12.left - _ab.ROUNDED_PIECE_WIDTH, _ab.ROUNDED_PIECE_WIDTH);
            }
            if (r12.top === 1 || r12.bottom === 1) {
              m10 += this._createSelectionPiece(f10, p10, _ab.SELECTION_CLASS_NAME, n12.left + n12.width, _ab.ROUNDED_PIECE_WIDTH);
              let t13 = _ab.EDITOR_BACKGROUND_CLASS_NAME;
              r12.top === 1 && (t13 += ` ` + _ab.SELECTION_TOP_LEFT), r12.bottom === 1 && (t13 += ` ` + _ab.SELECTION_BOTTOM_LEFT), m10 += this._createSelectionPiece(f10, p10, t13, n12.left + n12.width, _ab.ROUNDED_PIECE_WIDTH);
            }
          }
          let r11 = _ab.SELECTION_CLASS_NAME;
          if (a10) {
            let t12 = n12.startStyle, i11 = n12.endStyle;
            t12.top === 0 && (r11 += ` ` + _ab.SELECTION_TOP_LEFT), t12.bottom === 0 && (r11 += ` ` + _ab.SELECTION_BOTTOM_LEFT), i11.top === 0 && (r11 += ` ` + _ab.SELECTION_TOP_RIGHT), i11.bottom === 0 && (r11 += ` ` + _ab.SELECTION_BOTTOM_RIGHT);
          }
          h10 += this._createSelectionPiece(f10, p10, r11, n12.left, n12.width);
        }
        t10[d10][0] += m10, t10[d10][1] += h10;
      }
    }
    prepareRender(e10) {
      let t10 = [], n10 = e10.visibleRange.startLineNumber, r10 = e10.visibleRange.endLineNumber;
      for (let e11 = n10; e11 <= r10; e11++) {
        let r11 = e11 - n10;
        t10[r11] = [
          ``,
          ``
        ];
      }
      let i10 = [];
      for (let r11 = 0, a10 = this._selections.length; r11 < a10; r11++) {
        let a11 = this._selections[r11];
        if (a11.isEmpty()) {
          i10[r11] = null;
          continue;
        }
        let o10 = this._getVisibleRangesWithStyle(a11, e10, this._previousFrameVisibleRangesWithStyle[r11]);
        i10[r11] = o10, this._actualRenderOneSelection(t10, n10, this._selections.length > 1, o10);
      }
      this._previousFrameVisibleRangesWithStyle = i10, this._renderResult = t10.map(([e11, t11]) => e11 + t11);
    }
    render(e10, t10) {
      if (!this._renderResult) return ``;
      let n10 = t10 - e10;
      return n10 < 0 || n10 >= this._renderResult.length ? `` : this._renderResult[n10];
    }
  }, _ab.SELECTION_CLASS_NAME = `selected-text`, _ab.SELECTION_TOP_LEFT = `top-left-radius`, _ab.SELECTION_BOTTOM_LEFT = `bottom-left-radius`, _ab.SELECTION_TOP_RIGHT = `top-right-radius`, _ab.SELECTION_BOTTOM_RIGHT = `bottom-right-radius`, _ab.EDITOR_BACKGROUND_CLASS_NAME = `monaco-editor-background`, _ab.ROUNDED_PIECE_WIDTH = 10, _ab);
  qb((e10, t10) => {
    let n10 = e10.getColor(HC);
    n10 && !n10.isTransparent() && t10.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${n10}; }`);
  });
  function n2(e10) {
    return e10 < 0 ? -e10 : e10;
  }
  var r2 = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.top = e10, this.left = t10, this.paddingLeft = n10, this.width = r10, this.height = i10, this.textContent = a10, this.textContentClassName = o10;
    }
  }, i2;
  (function(e10) {
    e10[e10.Single = 0] = `Single`, e10[e10.MultiPrimary = 1] = `MultiPrimary`, e10[e10.MultiSecondary = 2] = `MultiSecondary`;
  })(i2 || (i2 = {}));
  var a2 = class {
    constructor(e10, t10) {
      this._context = e10;
      let n10 = this._context.configuration.options, r10 = n10.get(50);
      this._cursorStyle = n10.get(28), this._lineHeight = n10.get(67), this._typicalHalfwidthCharacterWidth = r10.typicalHalfwidthCharacterWidth, this._lineCursorWidth = Math.min(n10.get(31), this._typicalHalfwidthCharacterWidth), this._isVisible = true, this._domNode = Nf(document.createElement(`div`)), this._domNode.setClassName(`cursor ${n$}`), this._domNode.setHeight(this._lineHeight), this._domNode.setTop(0), this._domNode.setLeft(0), Pf(this._domNode, r10), this._domNode.setDisplay(`none`), this._position = new P(1, 1), this._pluralityClass = ``, this.setPlurality(t10), this._lastRenderedContent = ``, this._renderData = null;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return this._position;
    }
    setPlurality(e10) {
      switch (e10) {
        default:
        case i2.Single:
          this._pluralityClass = ``;
          break;
        case i2.MultiPrimary:
          this._pluralityClass = `cursor-primary`;
          break;
        case i2.MultiSecondary:
          this._pluralityClass = `cursor-secondary`;
          break;
      }
    }
    show() {
      this._isVisible || (this._domNode.setVisibility(`inherit`), this._isVisible = true);
    }
    hide() {
      this._isVisible && (this._domNode.setVisibility(`hidden`), this._isVisible = false);
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(50);
      return this._cursorStyle = t10.get(28), this._lineHeight = t10.get(67), this._typicalHalfwidthCharacterWidth = n10.typicalHalfwidthCharacterWidth, this._lineCursorWidth = Math.min(t10.get(31), this._typicalHalfwidthCharacterWidth), Pf(this._domNode, n10), true;
    }
    onCursorPositionChanged(e10, t10) {
      return t10 ? this._domNode.domNode.style.transitionProperty = `none` : this._domNode.domNode.style.transitionProperty = ``, this._position = e10, true;
    }
    _getGraphemeAwarePosition() {
      let { lineNumber: e10, column: t10 } = this._position, n10 = this._context.viewModel.getLineContent(e10), [r10, i10] = Ys(n10, t10 - 1);
      return [
        new P(e10, r10 + 1),
        n10.substring(r10, i10)
      ];
    }
    _prepareRender(e10) {
      let t10 = ``, n10 = ``, [r10, i10] = this._getGraphemeAwarePosition();
      if (this._cursorStyle === mn.Line || this._cursorStyle === mn.LineThin) {
        let a11 = e10.visibleRangeForPosition(r10);
        if (!a11 || a11.outsideRenderedLine) return null;
        let o11 = R(this._domNode.domNode), s11;
        this._cursorStyle === mn.Line ? (s11 = pf(o11, this._lineCursorWidth > 0 ? this._lineCursorWidth : 2), s11 > 2 && (t10 = i10, n10 = this._getTokenClassName(r10))) : s11 = pf(o11, 1);
        let c11 = a11.left, l11 = 0;
        s11 >= 2 && c11 >= 1 && (l11 = 1, c11 -= l11);
        let u11 = e10.getVerticalOffsetForLineNumber(r10.lineNumber) - e10.bigNumbersDelta;
        return new r2(u11, c11, l11, s11, this._lineHeight, t10, n10);
      }
      let a10 = e10.linesVisibleRangesForRange(new F(r10.lineNumber, r10.column, r10.lineNumber, r10.column + i10.length), false);
      if (!a10 || a10.length === 0) return null;
      let o10 = a10[0];
      if (o10.outsideRenderedLine || o10.ranges.length === 0) return null;
      let s10 = o10.ranges[0], c10 = i10 === `	` || s10.width < 1 ? this._typicalHalfwidthCharacterWidth : s10.width;
      this._cursorStyle === mn.Block && (t10 = i10, n10 = this._getTokenClassName(r10));
      let l10 = e10.getVerticalOffsetForLineNumber(r10.lineNumber) - e10.bigNumbersDelta, u10 = this._lineHeight;
      return (this._cursorStyle === mn.Underline || this._cursorStyle === mn.UnderlineThin) && (l10 += this._lineHeight - 2, u10 = 2), new r2(l10, s10.left, 0, c10, u10, t10, n10);
    }
    _getTokenClassName(e10) {
      let t10 = this._context.viewModel.getViewLineData(e10.lineNumber), n10 = t10.tokens.findTokenIndexAtOffset(e10.column - 1);
      return t10.tokens.getClassName(n10);
    }
    prepareRender(e10) {
      this._renderData = this._prepareRender(e10);
    }
    render(e10) {
      return this._renderData ? (this._lastRenderedContent !== this._renderData.textContent && (this._lastRenderedContent = this._renderData.textContent, this._domNode.domNode.textContent = this._lastRenderedContent), this._domNode.setClassName(`cursor ${this._pluralityClass} ${n$} ${this._renderData.textContentClassName}`), this._domNode.setDisplay(`block`), this._domNode.setTop(this._renderData.top), this._domNode.setLeft(this._renderData.left), this._domNode.setPaddingLeft(this._renderData.paddingLeft), this._domNode.setWidth(this._renderData.width), this._domNode.setLineHeight(this._renderData.height), this._domNode.setHeight(this._renderData.height), {
        domNode: this._domNode.domNode,
        position: this._position,
        contentLeft: this._renderData.left,
        height: this._renderData.height,
        width: 2
      }) : (this._domNode.setDisplay(`none`), null);
    }
  }, o2 = (_bb = class extends ZZ {
    constructor(e10) {
      super(e10);
      let t10 = this._context.configuration.options;
      this._readOnly = t10.get(92), this._cursorBlinking = t10.get(26), this._cursorStyle = t10.get(28), this._cursorSmoothCaretAnimation = t10.get(27), this._selectionIsEmpty = true, this._isComposingInput = false, this._isVisible = false, this._primaryCursor = new a2(this._context, i2.Single), this._secondaryCursors = [], this._renderData = [], this._domNode = Nf(document.createElement(`div`)), this._domNode.setAttribute(`role`, `presentation`), this._domNode.setAttribute(`aria-hidden`, `true`), this._updateDomClassName(), this._domNode.appendChild(this._primaryCursor.getDomNode()), this._startCursorBlinkAnimation = new ol(), this._cursorFlatBlinkInterval = new cd(), this._blinkingEnabled = false, this._editorHasFocus = false, this._updateBlinking();
    }
    dispose() {
      super.dispose(), this._startCursorBlinkAnimation.dispose(), this._cursorFlatBlinkInterval.dispose();
    }
    getDomNode() {
      return this._domNode;
    }
    onCompositionStart(e10) {
      return this._isComposingInput = true, this._updateBlinking(), true;
    }
    onCompositionEnd(e10) {
      return this._isComposingInput = false, this._updateBlinking(), true;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options;
      this._readOnly = t10.get(92), this._cursorBlinking = t10.get(26), this._cursorStyle = t10.get(28), this._cursorSmoothCaretAnimation = t10.get(27), this._updateBlinking(), this._updateDomClassName(), this._primaryCursor.onConfigurationChanged(e10);
      for (let t11 = 0, n10 = this._secondaryCursors.length; t11 < n10; t11++) this._secondaryCursors[t11].onConfigurationChanged(e10);
      return true;
    }
    _onCursorPositionChanged(e10, t10, n10) {
      let r10 = this._secondaryCursors.length !== t10.length || this._cursorSmoothCaretAnimation === `explicit` && n10 !== 3;
      if (this._primaryCursor.setPlurality(t10.length ? i2.MultiPrimary : i2.Single), this._primaryCursor.onCursorPositionChanged(e10, r10), this._updateBlinking(), this._secondaryCursors.length < t10.length) {
        let e11 = t10.length - this._secondaryCursors.length;
        for (let t11 = 0; t11 < e11; t11++) {
          let e12 = new a2(this._context, i2.MultiSecondary);
          this._domNode.domNode.insertBefore(e12.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling), this._secondaryCursors.push(e12);
        }
      } else if (this._secondaryCursors.length > t10.length) {
        let e11 = this._secondaryCursors.length - t10.length;
        for (let t11 = 0; t11 < e11; t11++) this._domNode.removeChild(this._secondaryCursors[0].getDomNode()), this._secondaryCursors.splice(0, 1);
      }
      for (let e11 = 0; e11 < t10.length; e11++) this._secondaryCursors[e11].onCursorPositionChanged(t10[e11], r10);
    }
    onCursorStateChanged(e10) {
      let t10 = [];
      for (let n11 = 0, r10 = e10.selections.length; n11 < r10; n11++) t10[n11] = e10.selections[n11].getPosition();
      this._onCursorPositionChanged(t10[0], t10.slice(1), e10.reason);
      let n10 = e10.selections[0].isEmpty();
      return this._selectionIsEmpty !== n10 && (this._selectionIsEmpty = n10, this._updateDomClassName()), true;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onFocusChanged(e10) {
      return this._editorHasFocus = e10.isFocused, this._updateBlinking(), false;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return true;
    }
    onTokensChanged(e10) {
      let t10 = (t11) => {
        for (let n10 = 0, r10 = e10.ranges.length; n10 < r10; n10++) if (e10.ranges[n10].fromLineNumber <= t11.lineNumber && t11.lineNumber <= e10.ranges[n10].toLineNumber) return true;
        return false;
      };
      if (t10(this._primaryCursor.getPosition())) return true;
      for (let e11 of this._secondaryCursors) if (t10(e11.getPosition())) return true;
      return false;
    }
    onZonesChanged(e10) {
      return true;
    }
    _getCursorBlinking() {
      return this._isComposingInput || !this._editorHasFocus ? 0 : this._readOnly ? 5 : this._cursorBlinking;
    }
    _updateBlinking() {
      this._startCursorBlinkAnimation.cancel(), this._cursorFlatBlinkInterval.cancel();
      let t10 = this._getCursorBlinking(), n10 = t10 === 0, r10 = t10 === 5;
      n10 ? this._hide() : this._show(), this._blinkingEnabled = false, this._updateDomClassName(), !n10 && !r10 && (t10 === 1 ? this._cursorFlatBlinkInterval.cancelAndSet(() => {
        this._isVisible ? this._hide() : this._show();
      }, _bb.BLINK_INTERVAL, R(this._domNode.domNode)) : this._startCursorBlinkAnimation.setIfNotSet(() => {
        this._blinkingEnabled = true, this._updateDomClassName();
      }, _bb.BLINK_INTERVAL));
    }
    _updateDomClassName() {
      this._domNode.setClassName(this._getClassName());
    }
    _getClassName() {
      let e10 = `cursors-layer`;
      switch (this._selectionIsEmpty || (e10 += ` has-selection`), this._cursorStyle) {
        case mn.Line:
          e10 += ` cursor-line-style`;
          break;
        case mn.Block:
          e10 += ` cursor-block-style`;
          break;
        case mn.Underline:
          e10 += ` cursor-underline-style`;
          break;
        case mn.LineThin:
          e10 += ` cursor-line-thin-style`;
          break;
        case mn.BlockOutline:
          e10 += ` cursor-block-outline-style`;
          break;
        case mn.UnderlineThin:
          e10 += ` cursor-underline-thin-style`;
          break;
        default:
          e10 += ` cursor-line-style`;
      }
      if (this._blinkingEnabled) switch (this._getCursorBlinking()) {
        case 1:
          e10 += ` cursor-blink`;
          break;
        case 2:
          e10 += ` cursor-smooth`;
          break;
        case 3:
          e10 += ` cursor-phase`;
          break;
        case 4:
          e10 += ` cursor-expand`;
          break;
        case 5:
          e10 += ` cursor-solid`;
          break;
        default:
          e10 += ` cursor-solid`;
      }
      else e10 += ` cursor-solid`;
      return (this._cursorSmoothCaretAnimation === `on` || this._cursorSmoothCaretAnimation === `explicit`) && (e10 += ` cursor-smooth-caret-animation`), e10;
    }
    _show() {
      this._primaryCursor.show();
      for (let e10 = 0, t10 = this._secondaryCursors.length; e10 < t10; e10++) this._secondaryCursors[e10].show();
      this._isVisible = true;
    }
    _hide() {
      this._primaryCursor.hide();
      for (let e10 = 0, t10 = this._secondaryCursors.length; e10 < t10; e10++) this._secondaryCursors[e10].hide();
      this._isVisible = false;
    }
    prepareRender(e10) {
      this._primaryCursor.prepareRender(e10);
      for (let t10 = 0, n10 = this._secondaryCursors.length; t10 < n10; t10++) this._secondaryCursors[t10].prepareRender(e10);
    }
    render(e10) {
      let t10 = [], n10 = 0, r10 = this._primaryCursor.render(e10);
      r10 && (t10[n10++] = r10);
      for (let r11 = 0, i10 = this._secondaryCursors.length; r11 < i10; r11++) {
        let i11 = this._secondaryCursors[r11].render(e10);
        i11 && (t10[n10++] = i11);
      }
      this._renderData = t10;
    }
    getLastRenderData() {
      return this._renderData;
    }
  }, _bb.BLINK_INTERVAL = 500, _bb);
  qb((e10, t10) => {
    let n10 = [
      {
        class: `.cursor`,
        foreground: oL,
        background: sL
      },
      {
        class: `.cursor-primary`,
        foreground: cL,
        background: lL
      },
      {
        class: `.cursor-secondary`,
        foreground: uL,
        background: dL
      }
    ];
    for (let r10 of n10) {
      let n11 = e10.getColor(r10.foreground);
      if (n11) {
        let i10 = e10.getColor(r10.background);
        i10 || (i10 = n11.opposite()), t10.addRule(`.monaco-editor .cursors-layer ${r10.class} { background-color: ${n11}; border-color: ${n11}; color: ${i10}; }`), zb(e10.type) && t10.addRule(`.monaco-editor .cursors-layer.has-selection ${r10.class} { border-left: 1px solid ${i10}; border-right: 1px solid ${i10}; }`);
      }
    }
  });
  const s2 = () => {
    throw Error(`Invalid change accessor`);
  };
  var c2 = class extends ZZ {
    constructor(e10) {
      super(e10);
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      this._lineHeight = t10.get(67), this._contentWidth = n10.contentWidth, this._contentLeft = n10.contentLeft, this.domNode = Nf(document.createElement(`div`)), this.domNode.setClassName(`view-zones`), this.domNode.setPosition(`absolute`), this.domNode.setAttribute(`role`, `presentation`), this.domNode.setAttribute(`aria-hidden`, `true`), this.marginDomNode = Nf(document.createElement(`div`)), this.marginDomNode.setClassName(`margin-view-zones`), this.marginDomNode.setPosition(`absolute`), this.marginDomNode.setAttribute(`role`, `presentation`), this.marginDomNode.setAttribute(`aria-hidden`, `true`), this._zones = {};
    }
    dispose() {
      super.dispose(), this._zones = {};
    }
    _recomputeWhitespacesProps() {
      let e10 = this._context.viewLayout.getWhitespaces(), t10 = /* @__PURE__ */ new Map();
      for (let n11 of e10) t10.set(n11.id, n11);
      let n10 = false;
      return this._context.viewModel.changeWhitespace((e11) => {
        let r10 = Object.keys(this._zones);
        for (let i10 = 0, a10 = r10.length; i10 < a10; i10++) {
          let a11 = r10[i10], o10 = this._zones[a11], s10 = this._computeWhitespaceProps(o10.delegate);
          o10.isInHiddenArea = s10.isInHiddenArea;
          let c10 = t10.get(a11);
          c10 && (c10.afterLineNumber !== s10.afterViewLineNumber || c10.height !== s10.heightInPx) && (e11.changeOneWhitespace(a11, s10.afterViewLineNumber, s10.heightInPx), this._safeCallOnComputedHeight(o10.delegate, s10.heightInPx), n10 = true);
        }
      }), n10;
    }
    onConfigurationChanged(e10) {
      let t10 = this._context.configuration.options, n10 = t10.get(146);
      return this._lineHeight = t10.get(67), this._contentWidth = n10.contentWidth, this._contentLeft = n10.contentLeft, e10.hasChanged(67) && this._recomputeWhitespacesProps(), true;
    }
    onLineMappingChanged(e10) {
      return this._recomputeWhitespacesProps();
    }
    onLinesDeleted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged || e10.scrollWidthChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    _getZoneOrdinal(e10) {
      return e10.ordinal ?? e10.afterColumn ?? 1e4;
    }
    _computeWhitespaceProps(e10) {
      if (e10.afterLineNumber === 0) return {
        isInHiddenArea: false,
        afterViewLineNumber: 0,
        heightInPx: this._heightInPixels(e10),
        minWidthInPx: this._minWidthInPixels(e10)
      };
      let t10;
      if (e10.afterColumn !== void 0) t10 = this._context.viewModel.model.validatePosition({
        lineNumber: e10.afterLineNumber,
        column: e10.afterColumn
      });
      else {
        let n11 = this._context.viewModel.model.validatePosition({
          lineNumber: e10.afterLineNumber,
          column: 1
        }).lineNumber;
        t10 = new P(n11, this._context.viewModel.model.getLineMaxColumn(n11));
      }
      let n10;
      n10 = t10.column === this._context.viewModel.model.getLineMaxColumn(t10.lineNumber) ? this._context.viewModel.model.validatePosition({
        lineNumber: t10.lineNumber + 1,
        column: 1
      }) : this._context.viewModel.model.validatePosition({
        lineNumber: t10.lineNumber,
        column: t10.column + 1
      });
      let r10 = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(t10, e10.afterColumnAffinity, true), i10 = e10.showInHiddenAreas || this._context.viewModel.coordinatesConverter.modelPositionIsVisible(n10);
      return {
        isInHiddenArea: !i10,
        afterViewLineNumber: r10.lineNumber,
        heightInPx: i10 ? this._heightInPixels(e10) : 0,
        minWidthInPx: this._minWidthInPixels(e10)
      };
    }
    changeViewZones(e10) {
      let t10 = false;
      return this._context.viewModel.changeWhitespace((n10) => {
        let r10 = {
          addZone: (e11) => (t10 = true, this._addZone(n10, e11)),
          removeZone: (e11) => {
            e11 && (t10 = this._removeZone(n10, e11) || t10);
          },
          layoutZone: (e11) => {
            e11 && (t10 = this._layoutZone(n10, e11) || t10);
          }
        };
        l2(e10, r10), r10.addZone = s2, r10.removeZone = s2, r10.layoutZone = s2;
      }), t10;
    }
    _addZone(e10, t10) {
      let n10 = this._computeWhitespaceProps(t10), r10 = e10.insertWhitespace(n10.afterViewLineNumber, this._getZoneOrdinal(t10), n10.heightInPx, n10.minWidthInPx), i10 = {
        whitespaceId: r10,
        delegate: t10,
        isInHiddenArea: n10.isInHiddenArea,
        isVisible: false,
        domNode: Nf(t10.domNode),
        marginDomNode: t10.marginDomNode ? Nf(t10.marginDomNode) : null
      };
      return this._safeCallOnComputedHeight(i10.delegate, n10.heightInPx), i10.domNode.setPosition(`absolute`), i10.domNode.domNode.style.width = `100%`, i10.domNode.setDisplay(`none`), i10.domNode.setAttribute(`monaco-view-zone`, i10.whitespaceId), this.domNode.appendChild(i10.domNode), i10.marginDomNode && (i10.marginDomNode.setPosition(`absolute`), i10.marginDomNode.domNode.style.width = `100%`, i10.marginDomNode.setDisplay(`none`), i10.marginDomNode.setAttribute(`monaco-view-zone`, i10.whitespaceId), this.marginDomNode.appendChild(i10.marginDomNode)), this._zones[i10.whitespaceId] = i10, this.setShouldRender(), i10.whitespaceId;
    }
    _removeZone(e10, t10) {
      if (this._zones.hasOwnProperty(t10)) {
        let n10 = this._zones[t10];
        return delete this._zones[t10], e10.removeWhitespace(n10.whitespaceId), n10.domNode.removeAttribute(`monaco-visible-view-zone`), n10.domNode.removeAttribute(`monaco-view-zone`), n10.domNode.domNode.remove(), n10.marginDomNode && (n10.marginDomNode.removeAttribute(`monaco-visible-view-zone`), n10.marginDomNode.removeAttribute(`monaco-view-zone`), n10.marginDomNode.domNode.remove()), this.setShouldRender(), true;
      }
      return false;
    }
    _layoutZone(e10, t10) {
      if (this._zones.hasOwnProperty(t10)) {
        let n10 = this._zones[t10], r10 = this._computeWhitespaceProps(n10.delegate);
        return n10.isInHiddenArea = r10.isInHiddenArea, e10.changeOneWhitespace(n10.whitespaceId, r10.afterViewLineNumber, r10.heightInPx), this._safeCallOnComputedHeight(n10.delegate, r10.heightInPx), this.setShouldRender(), true;
      }
      return false;
    }
    shouldSuppressMouseDownOnViewZone(e10) {
      if (this._zones.hasOwnProperty(e10)) {
        let t10 = this._zones[e10];
        return !!t10.delegate.suppressMouseDown;
      }
      return false;
    }
    _heightInPixels(e10) {
      return typeof e10.heightInPx == `number` ? e10.heightInPx : typeof e10.heightInLines == `number` ? this._lineHeight * e10.heightInLines : this._lineHeight;
    }
    _minWidthInPixels(e10) {
      return typeof e10.minWidthInPx == `number` ? e10.minWidthInPx : 0;
    }
    _safeCallOnComputedHeight(e10, t10) {
      if (typeof e10.onComputedHeight == `function`) try {
        e10.onComputedHeight(t10);
      } catch (e11) {
        gr(e11);
      }
    }
    _safeCallOnDomNodeTop(e10, t10) {
      if (typeof e10.onDomNodeTop == `function`) try {
        e10.onDomNodeTop(t10);
      } catch (e11) {
        gr(e11);
      }
    }
    prepareRender(e10) {
    }
    render(e10) {
      let t10 = e10.viewportData.whitespaceViewportData, n10 = {}, r10 = false;
      for (let e11 of t10) {
        if (this._zones[e11.id].isInHiddenArea) continue;
        n10[e11.id] = e11, r10 = true;
      }
      let i10 = Object.keys(this._zones);
      for (let t11 = 0, r11 = i10.length; t11 < r11; t11++) {
        let r12 = i10[t11], a10 = this._zones[r12], o10 = 0, s10 = 0, c10 = `none`;
        n10.hasOwnProperty(r12) ? (o10 = n10[r12].verticalOffset - e10.bigNumbersDelta, s10 = n10[r12].height, c10 = `block`, a10.isVisible || (a10.domNode.setAttribute(`monaco-visible-view-zone`, `true`), a10.isVisible = true), this._safeCallOnDomNodeTop(a10.delegate, e10.getScrolledTopFromAbsoluteTop(n10[r12].verticalOffset))) : (a10.isVisible && (a10.domNode.removeAttribute(`monaco-visible-view-zone`), a10.isVisible = false), this._safeCallOnDomNodeTop(a10.delegate, e10.getScrolledTopFromAbsoluteTop(-1e6))), a10.domNode.setTop(o10), a10.domNode.setHeight(s10), a10.domNode.setDisplay(c10), a10.marginDomNode && (a10.marginDomNode.setTop(o10), a10.marginDomNode.setHeight(s10), a10.marginDomNode.setDisplay(c10));
      }
      r10 && (this.domNode.setWidth(Math.max(e10.scrollWidth, this._contentWidth)), this.marginDomNode.setWidth(this._contentLeft));
    }
  };
  function l2(e10, t10) {
    try {
      return e10(t10);
    } catch (e11) {
      gr(e11);
    }
  }
  var u2 = class extends $Q {
    constructor(e10) {
      super(), this._context = e10, this._options = new d2(this._context.configuration), this._selection = [], this._renderResult = null, this._context.addEventHandler(this);
    }
    dispose() {
      this._context.removeEventHandler(this), this._renderResult = null, super.dispose();
    }
    onConfigurationChanged(e10) {
      let t10 = new d2(this._context.configuration);
      return this._options.equals(t10) ? e10.hasChanged(146) : (this._options = t10, true);
    }
    onCursorStateChanged(e10) {
      return this._selection = e10.selections, this._options.renderWhitespace === `selection`;
    }
    onDecorationsChanged(e10) {
      return true;
    }
    onFlushed(e10) {
      return true;
    }
    onLinesChanged(e10) {
      return true;
    }
    onLinesDeleted(e10) {
      return true;
    }
    onLinesInserted(e10) {
      return true;
    }
    onScrollChanged(e10) {
      return e10.scrollTopChanged;
    }
    onZonesChanged(e10) {
      return true;
    }
    prepareRender(e10) {
      if (this._options.renderWhitespace === `none`) {
        this._renderResult = null;
        return;
      }
      let t10 = e10.visibleRange.startLineNumber, n10 = e10.visibleRange.endLineNumber, r10 = n10 - t10 + 1, i10 = Array(r10);
      for (let e11 = 0; e11 < r10; e11++) i10[e11] = true;
      let a10 = this._context.viewModel.getMinimapLinesRenderingData(e10.viewportData.startLineNumber, e10.viewportData.endLineNumber, i10);
      this._renderResult = [];
      for (let t11 = e10.viewportData.startLineNumber; t11 <= e10.viewportData.endLineNumber; t11++) {
        let n11 = t11 - e10.viewportData.startLineNumber, r11 = a10.data[n11], i11 = null;
        if (this._options.renderWhitespace === `selection`) {
          let e11 = this._selection;
          for (let n12 of e11) {
            if (n12.endLineNumber < t11 || n12.startLineNumber > t11) continue;
            let e12 = n12.startLineNumber === t11 ? n12.startColumn : r11.minColumn, a11 = n12.endLineNumber === t11 ? n12.endColumn : r11.maxColumn;
            e12 < a11 && (i11 || (i11 = []), i11.push(new fX(e12 - 1, a11 - 1)));
          }
        }
        this._renderResult[n11] = this._applyRenderWhitespace(e10, t11, i11, r11);
      }
    }
    _applyRenderWhitespace(e10, t10, n10, r10) {
      if (this._options.renderWhitespace === `selection` && !n10 || this._options.renderWhitespace === `trailing` && r10.continuesWithWrappedLine) return ``;
      let i10 = this._context.theme.getColor(fL), a10 = this._options.renderWithSVG, o10 = r10.content, s10 = this._options.stopRenderingLineAfter === -1 ? o10.length : Math.min(this._options.stopRenderingLineAfter, o10.length), c10 = r10.continuesWithWrappedLine, l10 = r10.minColumn - 1, u10 = this._options.renderWhitespace === `boundary`, d10 = this._options.renderWhitespace === `trailing`, f10 = this._options.lineHeight, p10 = this._options.middotWidth, m10 = this._options.wsmiddotWidth, h10 = this._options.spaceWidth, g10 = Math.abs(m10 - h10), _10 = Math.abs(p10 - h10), v10 = g10 < _10 ? 11825 : 183, y10 = this._options.canUseHalfwidthRightwardsArrow, b10 = ``, x10 = false, S10 = Es(o10), C10;
      S10 === -1 ? (x10 = true, S10 = s10, C10 = s10) : C10 = Os(o10);
      let w10 = 0, ee2 = n10 && n10[w10], te2 = 0;
      for (let r11 = l10; r11 < s10; r11++) {
        let i11 = o10.charCodeAt(r11);
        if (ee2 && r11 >= ee2.endOffset && (w10++, ee2 = n10 && n10[w10]), i11 !== 9 && i11 !== 32 || d10 && !x10 && r11 <= C10) continue;
        if (u10 && r11 >= S10 && r11 <= C10 && i11 === 32) {
          let e11 = r11 - 1 >= 0 ? o10.charCodeAt(r11 - 1) : 0, t11 = r11 + 1 < s10 ? o10.charCodeAt(r11 + 1) : 0;
          if (e11 !== 32 && t11 !== 32) continue;
        }
        if (u10 && c10 && r11 === s10 - 1) {
          let e11 = r11 - 1 >= 0 ? o10.charCodeAt(r11 - 1) : 0, t11 = i11 === 32 && e11 !== 32 && e11 !== 9;
          if (t11) continue;
        }
        if (n10 && (!ee2 || ee2.startOffset > r11 || ee2.endOffset <= r11)) continue;
        let l11 = e10.visibleRangeForPosition(new P(t10, r11 + 1));
        l11 && (a10 ? (te2 = Math.max(te2, l11.left), i11 === 9 ? b10 += this._renderArrow(f10, h10, l11.left) : b10 += `<circle cx="${(l11.left + h10 / 2).toFixed(2)}" cy="${(f10 / 2).toFixed(2)}" r="${(h10 / 7).toFixed(2)}" />`) : i11 === 9 ? b10 += `<div class="mwh" style="left:${l11.left}px;height:${f10}px;">${y10 ? `\uFFEB` : `\u2192`}</div>` : b10 += `<div class="mwh" style="left:${l11.left}px;height:${f10}px;">${String.fromCharCode(v10)}</div>`);
      }
      return a10 ? (te2 = Math.round(te2 + h10), `<svg style="bottom:0;position:absolute;width:${te2}px;height:${f10}px" viewBox="0 0 ${te2} ${f10}" xmlns="http://www.w3.org/2000/svg" fill="${i10}">` + b10 + `</svg>`) : b10;
    }
    _renderArrow(e10, t10, n10) {
      let r10 = t10 / 7, i10 = t10, a10 = e10 / 2, o10 = n10, s10 = {
        x: 0,
        y: r10 / 2
      }, c10 = {
        x: 100 / 125 * i10,
        y: s10.y
      }, l10 = {
        x: c10.x - 0.2 * c10.x,
        y: c10.y + 0.2 * c10.x
      }, u10 = {
        x: l10.x + 0.1 * c10.x,
        y: l10.y + 0.1 * c10.x
      }, d10 = {
        x: u10.x + 0.35 * c10.x,
        y: u10.y - 0.35 * c10.x
      }, f10 = {
        x: d10.x,
        y: -d10.y
      }, p10 = {
        x: u10.x,
        y: -u10.y
      }, m10 = {
        x: l10.x,
        y: -l10.y
      }, h10 = {
        x: c10.x,
        y: -c10.y
      }, g10 = {
        x: s10.x,
        y: -s10.y
      }, _10 = [
        s10,
        c10,
        l10,
        u10,
        d10,
        f10,
        p10,
        m10,
        h10,
        g10
      ], v10 = _10.map((e11) => `${(o10 + e11.x).toFixed(2)} ${(a10 + e11.y).toFixed(2)}`).join(` L `);
      return `<path d="M ${v10}" />`;
    }
    render(e10, t10) {
      if (!this._renderResult) return ``;
      let n10 = t10 - e10;
      return n10 < 0 || n10 >= this._renderResult.length ? `` : this._renderResult[n10];
    }
  }, d2 = class {
    constructor(e10) {
      let t10 = e10.options, n10 = t10.get(50), r10 = t10.get(38);
      r10 === `off` ? (this.renderWhitespace = `none`, this.renderWithSVG = false) : r10 === `svg` ? (this.renderWhitespace = t10.get(100), this.renderWithSVG = true) : (this.renderWhitespace = t10.get(100), this.renderWithSVG = false), this.spaceWidth = n10.spaceWidth, this.middotWidth = n10.middotWidth, this.wsmiddotWidth = n10.wsmiddotWidth, this.canUseHalfwidthRightwardsArrow = n10.canUseHalfwidthRightwardsArrow, this.lineHeight = t10.get(67), this.stopRenderingLineAfter = t10.get(118);
    }
    equals(e10) {
      return this.renderWhitespace === e10.renderWhitespace && this.renderWithSVG === e10.renderWithSVG && this.spaceWidth === e10.spaceWidth && this.middotWidth === e10.middotWidth && this.wsmiddotWidth === e10.wsmiddotWidth && this.canUseHalfwidthRightwardsArrow === e10.canUseHalfwidthRightwardsArrow && this.lineHeight === e10.lineHeight && this.stopRenderingLineAfter === e10.stopRenderingLineAfter;
    }
  }, f2 = class {
    constructor(e10, t10, n10, r10) {
      this.selections = e10, this.startLineNumber = t10.startLineNumber | 0, this.endLineNumber = t10.endLineNumber | 0, this.relativeVerticalOffset = t10.relativeVerticalOffset, this.bigNumbersDelta = t10.bigNumbersDelta | 0, this.lineHeight = t10.lineHeight | 0, this.whitespaceViewportData = n10, this._model = r10, this.visibleRange = new F(t10.startLineNumber, this._model.getLineMinColumn(t10.startLineNumber), t10.endLineNumber, this._model.getLineMaxColumn(t10.endLineNumber));
    }
    getViewLineRenderingData(e10) {
      return this._model.getViewportViewLineRenderingData(this.visibleRange, e10);
    }
    getDecorationsInViewport() {
      return this._model.getDecorationsInViewport(this.visibleRange);
    }
  }, p2 = class {
    get type() {
      return this._theme.type;
    }
    get value() {
      return this._theme;
    }
    constructor(e10) {
      this._theme = e10;
    }
    update(e10) {
      this._theme = e10;
    }
    getColor(e10) {
      return this._theme.getColor(e10);
    }
  }, m2 = class {
    constructor(e10, t10, n10) {
      this.configuration = e10, this.theme = new p2(t10), this.viewModel = n10, this.viewLayout = n10.viewLayout;
    }
    addEventHandler(e10) {
      this.viewModel.addViewEventHandler(e10);
    }
    removeEventHandler(e10) {
      this.viewModel.removeViewEventHandler(e10);
    }
  }, h2 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, g2 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let _2 = class extends XZ {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(), this._instantiationService = o10, this._shouldRecomputeGlyphMarginLanes = false, this._selections = [
        new Ma(1, 1, 1, 1)
      ], this._renderAnimationFrame = null;
      let s10 = new L1(t10, r10, i10, e10);
      this._context = new m2(t10, n10, r10), this._context.addEventHandler(this), this._viewParts = [], this._textAreaHandler = this._instantiationService.createInstance(s$, this._context, s10, this._createTextAreaHandlerHelper()), this._viewParts.push(this._textAreaHandler), this._linesContent = Nf(document.createElement(`div`)), this._linesContent.setClassName(`lines-content monaco-editor-background`), this._linesContent.setPosition(`absolute`), this.domNode = Nf(document.createElement(`div`)), this.domNode.setClassName(this._getEditorClassName()), this.domNode.setAttribute(`role`, `code`), this._overflowGuardContainer = Nf(document.createElement(`div`)), QZ.write(this._overflowGuardContainer, 3), this._overflowGuardContainer.setClassName(`overflow-guard`), this._scrollbar = new r0(this._context, this._linesContent, this.domNode, this._overflowGuardContainer), this._viewParts.push(this._scrollbar), this._viewLines = new v0(this._context, this._linesContent), this._viewZones = new c2(this._context), this._viewParts.push(this._viewZones);
      let c10 = new W0(this._context);
      this._viewParts.push(c10);
      let l10 = new X0(this._context);
      this._viewParts.push(l10);
      let u10 = new U1(this._context);
      this._viewParts.push(u10), u10.addDynamicOverlay(new e0(this._context)), u10.addDynamicOverlay(new t2(this._context)), u10.addDynamicOverlay(new f0(this._context)), u10.addDynamicOverlay(new n0(this._context)), u10.addDynamicOverlay(new u2(this._context));
      let d10 = new W1(this._context);
      this._viewParts.push(d10), d10.addDynamicOverlay(new t0(this._context)), d10.addDynamicOverlay(new b0(this._context)), d10.addDynamicOverlay(new y0(this._context)), d10.addDynamicOverlay(new e$(this._context)), this._glyphMarginWidgets = new c0(this._context), this._viewParts.push(this._glyphMarginWidgets);
      let f10 = new t$(this._context);
      f10.getDomNode().appendChild(this._viewZones.marginDomNode), f10.getDomNode().appendChild(d10.getDomNode()), f10.getDomNode().appendChild(this._glyphMarginWidgets.domNode), this._viewParts.push(f10), this._contentWidgets = new q1(this._context, this.domNode), this._viewParts.push(this._contentWidgets), this._viewCursors = new o2(this._context), this._viewParts.push(this._viewCursors), this._overlayWidgets = new H0(this._context, this.domNode), this._viewParts.push(this._overlayWidgets);
      let p10 = new Y0(this._context);
      this._viewParts.push(p10);
      let m10 = new K1(this._context);
      this._viewParts.push(m10);
      let h10 = new z0(this._context);
      if (this._viewParts.push(h10), c10) {
        let e11 = this._scrollbar.getOverviewRulerLayoutInfo();
        e11.parent.insertBefore(c10.getDomNode(), e11.insertBefore);
      }
      this._linesContent.appendChild(u10.getDomNode()), this._linesContent.appendChild(p10.domNode), this._linesContent.appendChild(this._viewZones.domNode), this._linesContent.appendChild(this._viewLines.getDomNode()), this._linesContent.appendChild(this._contentWidgets.domNode), this._linesContent.appendChild(this._viewCursors.getDomNode()), this._overflowGuardContainer.appendChild(f10.getDomNode()), this._overflowGuardContainer.appendChild(this._scrollbar.getDomNode()), this._overflowGuardContainer.appendChild(l10.getDomNode()), this._overflowGuardContainer.appendChild(this._textAreaHandler.textArea), this._overflowGuardContainer.appendChild(this._textAreaHandler.textAreaCover), this._overflowGuardContainer.appendChild(this._overlayWidgets.getDomNode()), this._overflowGuardContainer.appendChild(h10.getDomNode()), this._overflowGuardContainer.appendChild(m10.domNode), this.domNode.appendChild(this._overflowGuardContainer), a10 ? (a10.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode.domNode), a10.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode.domNode)) : (this.domNode.appendChild(this._contentWidgets.overflowingContentWidgetsDomNode), this.domNode.appendChild(this._overlayWidgets.overflowingOverlayWidgetsDomNode)), this._applyLayout(), this._pointerHandler = this._register(new QQ(this._context, s10, this._createPointerHandlerHelper()));
    }
    _computeGlyphMarginLanes() {
      let e10 = this._context.viewModel.model, t10 = this._context.viewModel.glyphLanes, n10 = [], r10 = 0;
      n10 = n10.concat(e10.getAllMarginDecorations().map((e11) => {
        var _a3, _b3;
        let t11 = ((_a3 = e11.options.glyphMargin) == null ? void 0 : _a3.position) ?? Q_.Center;
        return r10 = Math.max(r10, e11.range.endLineNumber), {
          range: e11.range,
          lane: t11,
          persist: (_b3 = e11.options.glyphMargin) == null ? void 0 : _b3.persistLane
        };
      })), n10 = n10.concat(this._glyphMarginWidgets.getWidgets().map((t11) => {
        let n11 = e10.validateRange(t11.preference.range);
        return r10 = Math.max(r10, n11.endLineNumber), {
          range: n11,
          lane: t11.preference.lane
        };
      })), n10.sort((e11, t11) => F.compareRangesUsingStarts(e11.range, t11.range)), t10.reset(r10);
      for (let e11 of n10) t10.push(e11.lane, e11.range, e11.persist);
      return t10;
    }
    _createPointerHandlerHelper() {
      return {
        viewDomNode: this.domNode.domNode,
        linesContentDomNode: this._linesContent.domNode,
        viewLinesDomNode: this._viewLines.getDomNode().domNode,
        focusTextArea: () => {
          this.focus();
        },
        dispatchTextAreaEvent: (e10) => {
          this._textAreaHandler.textArea.domNode.dispatchEvent(e10);
        },
        getLastRenderData: () => {
          let e10 = this._viewCursors.getLastRenderData() || [], t10 = this._textAreaHandler.getLastRenderData();
          return new SQ(e10, t10);
        },
        renderNow: () => {
          this.render(true, false);
        },
        shouldSuppressMouseDownOnViewZone: (e10) => this._viewZones.shouldSuppressMouseDownOnViewZone(e10),
        shouldSuppressMouseDownOnWidget: (e10) => this._contentWidgets.shouldSuppressMouseDownOnWidget(e10),
        getPositionFromDOMInfo: (e10, t10) => (this._flushAccumulatedAndRenderNow(), this._viewLines.getPositionFromDOMInfo(e10, t10)),
        visibleRangeForPosition: (e10, t10) => (this._flushAccumulatedAndRenderNow(), this._viewLines.visibleRangeForPosition(new P(e10, t10))),
        getLineWidth: (e10) => (this._flushAccumulatedAndRenderNow(), this._viewLines.getLineWidth(e10))
      };
    }
    _createTextAreaHandlerHelper() {
      return {
        visibleRangeForPosition: (e10) => (this._flushAccumulatedAndRenderNow(), this._viewLines.visibleRangeForPosition(e10))
      };
    }
    _applyLayout() {
      let e10 = this._context.configuration.options, t10 = e10.get(146);
      this.domNode.setWidth(t10.width), this.domNode.setHeight(t10.height), this._overflowGuardContainer.setWidth(t10.width), this._overflowGuardContainer.setHeight(t10.height), this._linesContent.setWidth(16777216), this._linesContent.setHeight(16777216);
    }
    _getEditorClassName() {
      let e10 = this._textAreaHandler.isFocused() ? ` focused` : ``;
      return this._context.configuration.options.get(143) + ` ` + Ub(this._context.theme.type) + e10;
    }
    handleEvents(e10) {
      super.handleEvents(e10), this._scheduleRender();
    }
    onConfigurationChanged(e10) {
      return this.domNode.setClassName(this._getEditorClassName()), this._applyLayout(), false;
    }
    onCursorStateChanged(e10) {
      return this._selections = e10.selections, false;
    }
    onDecorationsChanged(e10) {
      return e10.affectsGlyphMargin && (this._shouldRecomputeGlyphMarginLanes = true), false;
    }
    onFocusChanged(e10) {
      return this.domNode.setClassName(this._getEditorClassName()), false;
    }
    onThemeChanged(e10) {
      return this._context.theme.update(e10.theme), this.domNode.setClassName(this._getEditorClassName()), false;
    }
    dispose() {
      this._renderAnimationFrame !== null && (this._renderAnimationFrame.dispose(), this._renderAnimationFrame = null), this._contentWidgets.overflowingContentWidgetsDomNode.domNode.remove(), this._context.removeEventHandler(this), this._viewLines.dispose();
      for (let e10 of this._viewParts) e10.dispose();
      super.dispose();
    }
    _scheduleRender() {
      var _a3;
      if (this._store.isDisposed) throw new Dr();
      if (this._renderAnimationFrame === null) {
        let e10 = this._createCoordinatedRendering();
        this._renderAnimationFrame = y2.INSTANCE.scheduleCoordinatedRendering({
          window: R((_a3 = this.domNode) == null ? void 0 : _a3.domNode),
          prepareRenderText: () => {
            if (this._store.isDisposed) throw new Dr();
            try {
              return e10.prepareRenderText();
            } finally {
              this._renderAnimationFrame = null;
            }
          },
          renderText: () => {
            if (this._store.isDisposed) throw new Dr();
            return e10.renderText();
          },
          prepareRender: (t10, n10) => {
            if (this._store.isDisposed) throw new Dr();
            return e10.prepareRender(t10, n10);
          },
          render: (t10, n10) => {
            if (this._store.isDisposed) throw new Dr();
            return e10.render(t10, n10);
          }
        });
      }
    }
    _flushAccumulatedAndRenderNow() {
      let e10 = this._createCoordinatedRendering();
      v2(() => e10.prepareRenderText());
      let t10 = v2(() => e10.renderText());
      if (t10) {
        let [n10, r10] = t10;
        v2(() => e10.prepareRender(n10, r10)), v2(() => e10.render(n10, r10));
      }
    }
    _getViewPartsToRender() {
      let e10 = [], t10 = 0;
      for (let n10 of this._viewParts) n10.shouldRender() && (e10[t10++] = n10);
      return e10;
    }
    _createCoordinatedRendering() {
      return {
        prepareRenderText: () => {
          if (this._shouldRecomputeGlyphMarginLanes) {
            this._shouldRecomputeGlyphMarginLanes = false;
            let e10 = this._computeGlyphMarginLanes();
            this._context.configuration.setGlyphMarginDecorationLaneCount(e10.requiredLanes);
          }
          IZ.onRenderStart();
        },
        renderText: () => {
          if (!this.domNode.domNode.isConnected) return null;
          let e10 = this._getViewPartsToRender();
          if (!this._viewLines.shouldRender() && e10.length === 0) return null;
          let t10 = this._context.viewLayout.getLinesViewportData();
          this._context.viewModel.setViewport(t10.startLineNumber, t10.endLineNumber, t10.centeredLineNumber);
          let n10 = new f2(this._selections, t10, this._context.viewLayout.getWhitespaceViewportData(), this._context.viewModel);
          return this._contentWidgets.shouldRender() && this._contentWidgets.onBeforeRender(n10), this._viewLines.shouldRender() && (this._viewLines.renderText(n10), this._viewLines.onDidRender(), e10 = this._getViewPartsToRender()), [
            e10,
            new eQ(this._context.viewLayout, n10, this._viewLines)
          ];
        },
        prepareRender: (e10, t10) => {
          for (let n10 of e10) n10.prepareRender(t10);
        },
        render: (e10, t10) => {
          for (let n10 of e10) n10.render(t10), n10.onDidRender();
        }
      };
    }
    delegateVerticalScrollbarPointerDown(e10) {
      this._scrollbar.delegateVerticalScrollbarPointerDown(e10);
    }
    delegateScrollFromMouseWheelEvent(e10) {
      this._scrollbar.delegateScrollFromMouseWheelEvent(e10);
    }
    restoreState(e10) {
      this._context.viewModel.viewLayout.setScrollPosition({
        scrollTop: e10.scrollTop,
        scrollLeft: e10.scrollLeft
      }, 1), this._context.viewModel.visibleLinesStabilized();
    }
    getOffsetForColumn(e10, t10) {
      let n10 = this._context.viewModel.model.validatePosition({
        lineNumber: e10,
        column: t10
      }), r10 = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(n10);
      this._flushAccumulatedAndRenderNow();
      let i10 = this._viewLines.visibleRangeForPosition(new P(r10.lineNumber, r10.column));
      return i10 ? i10.left : -1;
    }
    getTargetAtClientPoint(e10, t10) {
      let n10 = this._pointerHandler.getTargetAtClientPoint(e10, t10);
      return n10 ? G1.convertViewToModelMouseTarget(n10, this._context.viewModel.coordinatesConverter) : null;
    }
    createOverviewRuler(e10) {
      return new J0(this._context, e10);
    }
    change(e10) {
      this._viewZones.changeViewZones(e10), this._scheduleRender();
    }
    render(e10, t10) {
      if (t10) {
        this._viewLines.forceShouldRender();
        for (let e11 of this._viewParts) e11.forceShouldRender();
      }
      e10 ? this._flushAccumulatedAndRenderNow() : this._scheduleRender();
    }
    writeScreenReaderContent(e10) {
      this._textAreaHandler.writeScreenReaderContent(e10);
    }
    focus() {
      this._textAreaHandler.focusTextArea();
    }
    isFocused() {
      return this._textAreaHandler.isFocused();
    }
    setAriaOptions(e10) {
      this._textAreaHandler.setAriaOptions(e10);
    }
    addContentWidget(e10) {
      this._contentWidgets.addWidget(e10.widget), this.layoutContentWidget(e10), this._scheduleRender();
    }
    layoutContentWidget(e10) {
      var _a3, _b3, _c3, _d3;
      this._contentWidgets.setWidgetPosition(e10.widget, ((_a3 = e10.position) == null ? void 0 : _a3.position) ?? null, ((_b3 = e10.position) == null ? void 0 : _b3.secondaryPosition) ?? null, ((_c3 = e10.position) == null ? void 0 : _c3.preference) ?? null, ((_d3 = e10.position) == null ? void 0 : _d3.positionAffinity) ?? null), this._scheduleRender();
    }
    removeContentWidget(e10) {
      this._contentWidgets.removeWidget(e10.widget), this._scheduleRender();
    }
    addOverlayWidget(e10) {
      this._overlayWidgets.addWidget(e10.widget), this.layoutOverlayWidget(e10), this._scheduleRender();
    }
    layoutOverlayWidget(e10) {
      let t10 = this._overlayWidgets.setWidgetPosition(e10.widget, e10.position);
      t10 && this._scheduleRender();
    }
    removeOverlayWidget(e10) {
      this._overlayWidgets.removeWidget(e10.widget), this._scheduleRender();
    }
    addGlyphMarginWidget(e10) {
      this._glyphMarginWidgets.addWidget(e10.widget), this._shouldRecomputeGlyphMarginLanes = true, this._scheduleRender();
    }
    layoutGlyphMarginWidget(e10) {
      let t10 = e10.position, n10 = this._glyphMarginWidgets.setWidgetPosition(e10.widget, t10);
      n10 && (this._shouldRecomputeGlyphMarginLanes = true, this._scheduleRender());
    }
    removeGlyphMarginWidget(e10) {
      this._glyphMarginWidgets.removeWidget(e10.widget), this._shouldRecomputeGlyphMarginLanes = true, this._scheduleRender();
    }
  };
  _2 = h2([
    g2(6, Jf)
  ], _2);
  function v2(e10) {
    try {
      return e10();
    } catch (e11) {
      return gr(e11), null;
    }
  }
  var y2 = (_cb = class {
    constructor() {
      this._coordinatedRenderings = [], this._animationFrameRunners = /* @__PURE__ */ new Map();
    }
    scheduleCoordinatedRendering(e10) {
      return this._coordinatedRenderings.push(e10), this._scheduleRender(e10.window), {
        dispose: () => {
          let t10 = this._coordinatedRenderings.indexOf(e10);
          if (t10 !== -1 && (this._coordinatedRenderings.splice(t10, 1), this._coordinatedRenderings.length === 0)) {
            for (let [e11, t11] of this._animationFrameRunners) t11.dispose();
            this._animationFrameRunners.clear();
          }
        }
      };
    }
    _scheduleRender(e10) {
      if (!this._animationFrameRunners.has(e10)) {
        let t10 = () => {
          this._animationFrameRunners.delete(e10), this._onRenderScheduled();
        };
        this._animationFrameRunners.set(e10, od(e10, t10, 100));
      }
    }
    _onRenderScheduled() {
      let e10 = this._coordinatedRenderings.slice(0);
      this._coordinatedRenderings = [];
      for (let t11 of e10) v2(() => t11.prepareRenderText());
      let t10 = [];
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10];
        t10[n10] = v2(() => r11.renderText());
      }
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10], i10 = t10[n10];
        if (!i10) continue;
        let [a10, o10] = i10;
        v2(() => r11.prepareRender(a10, o10));
      }
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10], i10 = t10[n10];
        if (!i10) continue;
        let [a10, o10] = i10;
        v2(() => r11.render(a10, o10));
      }
    }
  }, _cb.INSTANCE = new _cb(), _cb), b2 = class {
    constructor(e10, t10, n10, r10, i10) {
      this.injectionOffsets = e10, this.injectionOptions = t10, this.breakOffsets = n10, this.breakOffsetsVisibleColumn = r10, this.wrappedTextIndentLength = i10;
    }
    getOutputLineCount() {
      return this.breakOffsets.length;
    }
    getMinOutputOffset(e10) {
      return e10 > 0 ? this.wrappedTextIndentLength : 0;
    }
    getLineLength(e10) {
      let t10 = e10 > 0 ? this.breakOffsets[e10 - 1] : 0, n10 = this.breakOffsets[e10], r10 = n10 - t10;
      return e10 > 0 && (r10 += this.wrappedTextIndentLength), r10;
    }
    getMaxOutputOffset(e10) {
      return this.getLineLength(e10);
    }
    translateToInputOffset(e10, t10) {
      e10 > 0 && (t10 = Math.max(0, t10 - this.wrappedTextIndentLength));
      let n10 = e10 === 0 ? t10 : this.breakOffsets[e10 - 1] + t10, r10 = n10;
      if (this.injectionOffsets !== null) for (let e11 = 0; e11 < this.injectionOffsets.length && r10 > this.injectionOffsets[e11]; e11++) r10 < this.injectionOffsets[e11] + this.injectionOptions[e11].content.length ? r10 = this.injectionOffsets[e11] : r10 -= this.injectionOptions[e11].content.length;
      return r10;
    }
    translateToOutputPosition(e10, t10 = 2) {
      let n10 = e10;
      if (this.injectionOffsets !== null) for (let r10 = 0; r10 < this.injectionOffsets.length && !(e10 < this.injectionOffsets[r10] || t10 !== 1 && e10 === this.injectionOffsets[r10]); r10++) n10 += this.injectionOptions[r10].content.length;
      return this.offsetInInputWithInjectionsToOutputPosition(n10, t10);
    }
    offsetInInputWithInjectionsToOutputPosition(e10, t10 = 2) {
      let n10 = 0, r10 = this.breakOffsets.length - 1, i10 = 0, a10 = 0;
      for (; n10 <= r10; ) {
        i10 = n10 + (r10 - n10) / 2 | 0;
        let o11 = this.breakOffsets[i10];
        if (a10 = i10 > 0 ? this.breakOffsets[i10 - 1] : 0, t10 === 0) if (e10 <= a10) r10 = i10 - 1;
        else if (e10 > o11) n10 = i10 + 1;
        else break;
        else if (e10 < a10) r10 = i10 - 1;
        else if (e10 >= o11) n10 = i10 + 1;
        else break;
      }
      let o10 = e10 - a10;
      return i10 > 0 && (o10 += this.wrappedTextIndentLength), new C2(i10, o10);
    }
    normalizeOutputPosition(e10, t10, n10) {
      if (this.injectionOffsets !== null) {
        let r10 = this.outputPositionToOffsetInInputWithInjections(e10, t10), i10 = this.normalizeOffsetInInputWithInjectionsAroundInjections(r10, n10);
        if (i10 !== r10) return this.offsetInInputWithInjectionsToOutputPosition(i10, n10);
      }
      if (n10 === 0) {
        if (e10 > 0 && t10 === this.getMinOutputOffset(e10)) return new C2(e10 - 1, this.getMaxOutputOffset(e10 - 1));
      } else if (n10 === 1) {
        let n11 = this.getOutputLineCount() - 1;
        if (e10 < n11 && t10 === this.getMaxOutputOffset(e10)) return new C2(e10 + 1, this.getMinOutputOffset(e10 + 1));
      }
      return new C2(e10, t10);
    }
    outputPositionToOffsetInInputWithInjections(e10, t10) {
      e10 > 0 && (t10 = Math.max(0, t10 - this.wrappedTextIndentLength));
      let n10 = (e10 > 0 ? this.breakOffsets[e10 - 1] : 0) + t10;
      return n10;
    }
    normalizeOffsetInInputWithInjectionsAroundInjections(e10, t10) {
      let n10 = this.getInjectedTextAtOffset(e10);
      if (!n10) return e10;
      if (t10 === 2) {
        if (e10 === n10.offsetInInputWithInjections + n10.length && x2(this.injectionOptions[n10.injectedTextIndex].cursorStops)) return n10.offsetInInputWithInjections + n10.length;
        {
          let e11 = n10.offsetInInputWithInjections;
          if (S2(this.injectionOptions[n10.injectedTextIndex].cursorStops)) return e11;
          let t11 = n10.injectedTextIndex - 1;
          for (; t11 >= 0 && this.injectionOffsets[t11] === this.injectionOffsets[n10.injectedTextIndex] && !(x2(this.injectionOptions[t11].cursorStops) || (e11 -= this.injectionOptions[t11].content.length, S2(this.injectionOptions[t11].cursorStops))); ) t11--;
          return e11;
        }
      } else if (t10 === 1 || t10 === 4) {
        let e11 = n10.offsetInInputWithInjections + n10.length, t11 = n10.injectedTextIndex;
        for (; t11 + 1 < this.injectionOffsets.length && this.injectionOffsets[t11 + 1] === this.injectionOffsets[t11]; ) e11 += this.injectionOptions[t11 + 1].content.length, t11++;
        return e11;
      } else if (t10 === 0 || t10 === 3) {
        let e11 = n10.offsetInInputWithInjections, t11 = n10.injectedTextIndex;
        for (; t11 - 1 >= 0 && this.injectionOffsets[t11 - 1] === this.injectionOffsets[t11]; ) e11 -= this.injectionOptions[t11 - 1].content.length, t11--;
        return e11;
      }
      em(t10);
    }
    getInjectedText(e10, t10) {
      let n10 = this.outputPositionToOffsetInInputWithInjections(e10, t10), r10 = this.getInjectedTextAtOffset(n10);
      return r10 ? {
        options: this.injectionOptions[r10.injectedTextIndex]
      } : null;
    }
    getInjectedTextAtOffset(e10) {
      let t10 = this.injectionOffsets, n10 = this.injectionOptions;
      if (t10 !== null) {
        let r10 = 0;
        for (let i10 = 0; i10 < t10.length; i10++) {
          let a10 = n10[i10].content.length, o10 = t10[i10] + r10, s10 = t10[i10] + r10 + a10;
          if (o10 > e10) break;
          if (e10 <= s10) return {
            injectedTextIndex: i10,
            offsetInInputWithInjections: o10,
            length: a10
          };
          r10 += a10;
        }
      }
    }
  };
  function x2(e10) {
    return e10 == null ? true : e10 === $_.Right || e10 === $_.Both;
  }
  function S2(e10) {
    return e10 == null ? true : e10 === $_.Left || e10 === $_.Both;
  }
  var C2 = class {
    constructor(e10, t10) {
      this.outputLineIndex = e10, this.outputOffset = t10;
    }
    toString() {
      return `${this.outputLineIndex}:${this.outputOffset}`;
    }
    toPosition(e10) {
      return new P(e10 + this.outputLineIndex, this.outputOffset + 1);
    }
  };
  const w2 = lh(`domLineBreaksComputer`, {
    createHTML: (e10) => e10
  });
  var T2 = class e10 {
    static create(t10) {
      return new e10(new WeakRef(t10));
    }
    constructor(e11) {
      this.targetWindow = e11;
    }
    createLineBreaksComputer(e11, t10, n10, r10, i10) {
      let a10 = [], o10 = [];
      return {
        addRequest: (e12, t11, n11) => {
          a10.push(e12), o10.push(t11);
        },
        finalize: () => E2(De(this.targetWindow.deref()), a10, e11, t10, n10, r10, i10, o10)
      };
    }
  };
  function E2(e10, t10, n10, r10, i10, a10, o10, s10) {
    function c10(e11) {
      let n11 = s10[e11];
      if (n11) {
        let r11 = BV.applyInjectedText(t10[e11], n11), i11 = n11.map((e12) => e12.options), a11 = n11.map((e12) => e12.column - 1);
        return new b2(a11, i11, [
          r11.length
        ], [], 0);
      } else return null;
    }
    if (i10 === -1) {
      let e11 = [];
      for (let n11 = 0, r11 = t10.length; n11 < r11; n11++) e11[n11] = c10(n11);
      return e11;
    }
    let l10 = Math.round(i10 * n10.typicalHalfwidthCharacterWidth), u10 = a10 === 3 ? 2 : a10 === 2 ? 1 : 0, d10 = Math.round(r10 * u10), f10 = Math.ceil(n10.spaceWidth * d10), p10 = document.createElement(`div`);
    Pf(p10, n10);
    let m10 = new Gh(1e4), h10 = [], g10 = [], _10 = [], v10 = [], y10 = [];
    for (let e11 = 0; e11 < t10.length; e11++) {
      let i11 = BV.applyInjectedText(t10[e11], s10[e11]), o11 = 0, c11 = 0, u11 = l10;
      if (a10 !== 0) if (o11 = Es(i11), o11 === -1) o11 = 0;
      else {
        for (let e13 = 0; e13 < o11; e13++) {
          let t11 = i11.charCodeAt(e13) === 9 ? r10 - c11 % r10 : 1;
          c11 += t11;
        }
        let e12 = Math.ceil(n10.spaceWidth * c11);
        e12 + n10.typicalFullwidthCharacterWidth > l10 ? (o11 = 0, c11 = 0) : u11 = l10 - e12;
      }
      let d11 = i11.substr(o11), p11 = D2(d11, c11, r10, u11, m10, f10);
      h10[e11] = o11, g10[e11] = c11, _10[e11] = d11, v10[e11] = p11[0], y10[e11] = p11[1];
    }
    let b10 = m10.build(), x10 = (w2 == null ? void 0 : w2.createHTML(b10)) ?? b10;
    p10.innerHTML = x10, p10.style.position = `absolute`, p10.style.top = `10000`, o10 === `keepAll` ? (p10.style.wordBreak = `keep-all`, p10.style.overflowWrap = `anywhere`) : (p10.style.wordBreak = `inherit`, p10.style.overflowWrap = `break-word`), e10.document.body.appendChild(p10);
    let S10 = document.createRange(), C10 = Array.prototype.slice.call(p10.children, 0), w10 = [];
    for (let e11 = 0; e11 < t10.length; e11++) {
      let t11 = C10[e11], n11 = O2(S10, t11, _10[e11], v10[e11]);
      if (n11 === null) {
        w10[e11] = c10(e11);
        continue;
      }
      let r11 = h10[e11], i11 = g10[e11] + d10, a11 = y10[e11], o11 = [];
      for (let e12 = 0, t12 = n11.length; e12 < t12; e12++) o11[e12] = a11[n11[e12]];
      if (r11 !== 0) for (let e12 = 0, t12 = n11.length; e12 < t12; e12++) n11[e12] += r11;
      let l11, u11, f11 = s10[e11];
      f11 ? (l11 = f11.map((e12) => e12.options), u11 = f11.map((e12) => e12.column - 1)) : (l11 = null, u11 = null), w10[e11] = new b2(u11, l11, n11, o11, i11);
    }
    return p10.remove(), w10;
  }
  function D2(e10, t10, n10, r10, i10, a10) {
    if (a10 !== 0) {
      let e11 = String(a10);
      i10.appendString(`<div style="text-indent: -`), i10.appendString(e11), i10.appendString(`px; padding-left: `), i10.appendString(e11), i10.appendString(`px; box-sizing: border-box; width:`);
    } else i10.appendString(`<div style="width:`);
    i10.appendString(String(r10)), i10.appendString(`px;">`);
    let o10 = e10.length, s10 = t10, c10 = 0, l10 = [], u10 = [], d10 = 0 < o10 ? e10.charCodeAt(0) : 0;
    i10.appendString(`<span>`);
    for (let t11 = 0; t11 < o10; t11++) {
      t11 !== 0 && t11 % 16384 == 0 && i10.appendString(`</span><span>`), l10[t11] = c10, u10[t11] = s10;
      let r11 = d10;
      d10 = t11 + 1 < o10 ? e10.charCodeAt(t11 + 1) : 0;
      let a11 = 1, f10 = 1;
      switch (r11) {
        case 9:
          a11 = n10 - s10 % n10, f10 = a11;
          for (let e11 = 1; e11 <= a11; e11++) e11 < a11 ? i10.appendCharCode(160) : i10.appendASCIICharCode(32);
          break;
        case 32:
          d10 === 32 ? i10.appendCharCode(160) : i10.appendASCIICharCode(32);
          break;
        case 60:
          i10.appendString(`&lt;`);
          break;
        case 62:
          i10.appendString(`&gt;`);
          break;
        case 38:
          i10.appendString(`&amp;`);
          break;
        case 0:
          i10.appendString(`&#00;`);
          break;
        case 65279:
        case 8232:
        case 8233:
        case 133:
          i10.appendCharCode(65533);
          break;
        default:
          rc(r11) && f10++, r11 < 32 ? i10.appendCharCode(9216 + r11) : i10.appendCharCode(r11);
      }
      c10 += a11, s10 += f10;
    }
    return i10.appendString(`</span>`), l10[e10.length] = c10, u10[e10.length] = s10, i10.appendString(`</div>`), [
      l10,
      u10
    ];
  }
  function O2(e10, t10, n10, r10) {
    if (n10.length <= 1) return null;
    let i10 = Array.prototype.slice.call(t10.children, 0), a10 = [];
    try {
      k2(e10, i10, r10, 0, null, n10.length - 1, null, a10);
    } catch (e11) {
      return console.log(e11), null;
    }
    return a10.length === 0 ? null : (a10.push(n10.length), a10);
  }
  function k2(e10, t10, n10, r10, i10, a10, o10, s10) {
    if (r10 === a10 || (i10 || (i10 = A2(e10, t10, n10[r10], n10[r10 + 1])), o10 || (o10 = A2(e10, t10, n10[a10], n10[a10 + 1])), Math.abs(i10[0].top - o10[0].top) <= 0.1)) return;
    if (r10 + 1 === a10) {
      s10.push(a10);
      return;
    }
    let c10 = r10 + (a10 - r10) / 2 | 0, l10 = A2(e10, t10, n10[c10], n10[c10 + 1]);
    k2(e10, t10, n10, r10, i10, c10, l10, s10), k2(e10, t10, n10, c10, l10, a10, o10, s10);
  }
  function A2(e10, t10, n10, r10) {
    return e10.setStart(t10[n10 / 16384 | 0].firstChild, n10 % 16384), e10.setEnd(t10[r10 / 16384 | 0].firstChild, r10 % 16384), e10.getClientRects();
  }
  var j2 = class extends j {
    constructor() {
      super(), this._editor = null, this._instantiationService = null, this._instances = this._register(new Ur()), this._pending = /* @__PURE__ */ new Map(), this._finishedInstantiation = [], this._finishedInstantiation[0] = false, this._finishedInstantiation[1] = false, this._finishedInstantiation[2] = false, this._finishedInstantiation[3] = false;
    }
    initialize(e10, t10, n10) {
      this._editor = e10, this._instantiationService = n10;
      for (let e11 of t10) {
        if (this._pending.has(e11.id)) {
          gr(Error(`Cannot have two contributions with the same id ${e11.id}`));
          continue;
        }
        this._pending.set(e11.id, e11);
      }
      this._instantiateSome(0), this._register(id(R(this._editor.getDomNode()), () => {
        this._instantiateSome(1);
      })), this._register(id(R(this._editor.getDomNode()), () => {
        this._instantiateSome(2);
      })), this._register(id(R(this._editor.getDomNode()), () => {
        this._instantiateSome(3);
      }, 5e3));
    }
    saveViewState() {
      let e10 = {};
      for (let [t10, n10] of this._instances) typeof n10.saveViewState == `function` && (e10[t10] = n10.saveViewState());
      return e10;
    }
    restoreViewState(e10) {
      for (let [t10, n10] of this._instances) typeof n10.restoreViewState == `function` && n10.restoreViewState(e10[t10]);
    }
    get(e10) {
      return this._instantiateById(e10), this._instances.get(e10) || null;
    }
    onBeforeInteractionEvent() {
      this._instantiateSome(2);
    }
    onAfterModelAttached() {
      var _a3;
      return id(R((_a3 = this._editor) == null ? void 0 : _a3.getDomNode()), () => {
        this._instantiateSome(1);
      }, 50);
    }
    _instantiateSome(e10) {
      if (this._finishedInstantiation[e10]) return;
      this._finishedInstantiation[e10] = true;
      let t10 = this._findPendingContributionsByInstantiation(e10);
      for (let e11 of t10) this._instantiateById(e11.id);
    }
    _findPendingContributionsByInstantiation(e10) {
      let t10 = [];
      for (let [, n10] of this._pending) n10.instantiation === e10 && t10.push(n10);
      return t10;
    }
    _instantiateById(e10) {
      let t10 = this._pending.get(e10);
      if (t10) {
        if (this._pending.delete(e10), !this._instantiationService || !this._editor) throw Error(`Cannot instantiate contributions before being initialized!`);
        try {
          let e11 = this._instantiationService.createInstance(t10.ctor, this._editor);
          this._instances.set(t10.id, e11), typeof e11.restoreViewState == `function` && t10.instantiation !== 0 && console.warn(`Editor contribution '${t10.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`);
        } catch (e11) {
          gr(e11);
        }
      }
    }
  }, M2 = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.id = e10, this.label = t10, this.alias = n10, this.metadata = r10, this._precondition = i10, this._run = a10, this._contextKeyService = o10;
    }
    isSupported() {
      return this._contextKeyService.contextMatchesRules(this._precondition);
    }
    run(e10) {
      return this.isSupported() ? this._run(e10) : Promise.resolve(void 0);
    }
  }, N2 = class e10 {
    static create(t10) {
      return new e10(t10.get(135), t10.get(134));
    }
    constructor(e11, t10) {
      this.classifier = new P2(e11, t10);
    }
    createLineBreaksComputer(e11, t10, n10, r10, i10) {
      let a10 = [], o10 = [], s10 = [];
      return {
        addRequest: (e12, t11, n11) => {
          a10.push(e12), o10.push(t11), s10.push(n11);
        },
        finalize: () => {
          let c10 = e11.typicalFullwidthCharacterWidth / e11.typicalHalfwidthCharacterWidth, l10 = [];
          for (let e12 = 0, u10 = a10.length; e12 < u10; e12++) {
            let u11 = o10[e12], d10 = s10[e12];
            d10 && !d10.injectionOptions && !u11 ? l10[e12] = L2(this.classifier, d10, a10[e12], t10, n10, c10, r10, i10) : l10[e12] = R2(this.classifier, a10[e12], u11, t10, n10, c10, r10, i10);
          }
          return F2.length = 0, I2.length = 0, l10;
        }
      };
    }
  }, P2 = class extends E_ {
    constructor(e10, t10) {
      super(0);
      for (let t11 = 0; t11 < e10.length; t11++) this.set(e10.charCodeAt(t11), 1);
      for (let e11 = 0; e11 < t10.length; e11++) this.set(t10.charCodeAt(e11), 2);
    }
    get(e10) {
      return e10 >= 0 && e10 < 256 ? this._asciiMap[e10] : e10 >= 12352 && e10 <= 12543 || e10 >= 13312 && e10 <= 19903 || e10 >= 19968 && e10 <= 40959 ? 3 : this._map.get(e10) || this._defaultValue;
    }
  };
  let F2 = [], I2 = [];
  function L2(e10, t10, n10, r10, i10, a10, o10, s10) {
    if (i10 === -1) return null;
    let c10 = n10.length;
    if (c10 <= 1) return null;
    let l10 = s10 === `keepAll`, u10 = t10.breakOffsets, d10 = t10.breakOffsetsVisibleColumn, f10 = H2(n10, r10, i10, a10, o10), p10 = i10 - f10, m10 = F2, h10 = I2, g10 = 0, _10 = 0, v10 = 0, y10 = i10, b10 = u10.length, x10 = 0;
    if (x10 >= 0) {
      let e11 = Math.abs(d10[x10] - y10);
      for (; x10 + 1 < b10; ) {
        let t11 = Math.abs(d10[x10 + 1] - y10);
        if (t11 >= e11) break;
        e11 = t11, x10++;
      }
    }
    for (; x10 < b10; ) {
      let t11 = x10 < 0 ? 0 : u10[x10], i11 = x10 < 0 ? 0 : d10[x10];
      _10 > t11 && (t11 = _10, i11 = v10);
      let o11 = 0, s11 = 0, f11 = 0, S10 = 0;
      if (i11 <= y10) {
        let v11 = i11, b11 = t11 === 0 ? 0 : n10.charCodeAt(t11 - 1), x11 = t11 === 0 ? 0 : e10.get(b11), C11 = true;
        for (let i12 = t11; i12 < c10; i12++) {
          let t12 = i12, c11 = n10.charCodeAt(i12), u11, d11;
          if (Bs(c11) ? (i12++, u11 = 0, d11 = 2) : (u11 = e10.get(c11), d11 = z2(c11, v11, r10, a10)), t12 > _10 && V2(b11, x11, c11, u11, l10) && (o11 = t12, s11 = v11), v11 += d11, v11 > y10) {
            t12 > _10 ? (f11 = t12, S10 = v11 - d11) : (f11 = i12 + 1, S10 = v11), v11 - s11 > p10 && (o11 = 0), C11 = false;
            break;
          }
          b11 = c11, x11 = u11;
        }
        if (C11) {
          g10 > 0 && (m10[g10] = u10[u10.length - 1], h10[g10] = d10[u10.length - 1], g10++);
          break;
        }
      }
      if (o11 === 0) {
        let c11 = i11, u11 = n10.charCodeAt(t11), d11 = e10.get(u11), m11 = false;
        for (let r11 = t11 - 1; r11 >= _10; r11--) {
          let t12 = r11 + 1, i12 = n10.charCodeAt(r11);
          if (i12 === 9) {
            m11 = true;
            break;
          }
          let h11, g11;
          if (Vs(i12) ? (r11--, h11 = 0, g11 = 2) : (h11 = e10.get(i12), g11 = rc(i12) ? a10 : 1), c11 <= y10) {
            if (f11 === 0 && (f11 = t12, S10 = c11), c11 <= y10 - p10) break;
            if (V2(i12, h11, u11, d11, l10)) {
              o11 = t12, s11 = c11;
              break;
            }
          }
          c11 -= g11, u11 = i12, d11 = h11;
        }
        if (o11 !== 0) {
          let e11 = p10 - (S10 - s11);
          if (e11 <= r10) {
            let t12 = n10.charCodeAt(f11), i12;
            i12 = Bs(t12) ? 2 : z2(t12, S10, r10, a10), e11 - i12 < 0 && (o11 = 0);
          }
        }
        if (m11) {
          x10--;
          continue;
        }
      }
      if (o11 === 0 && (o11 = f11, s11 = S10), o11 <= _10) {
        let e11 = n10.charCodeAt(_10);
        Bs(e11) ? (o11 = _10 + 2, s11 = v10 + 2) : (o11 = _10 + 1, s11 = v10 + z2(e11, v10, r10, a10));
      }
      for (_10 = o11, m10[g10] = o11, v10 = s11, h10[g10] = s11, g10++, y10 = s11 + p10; x10 < 0 || x10 < b10 && d10[x10] < s11; ) x10++;
      let C10 = Math.abs(d10[x10] - y10);
      for (; x10 + 1 < b10; ) {
        let e11 = Math.abs(d10[x10 + 1] - y10);
        if (e11 >= C10) break;
        C10 = e11, x10++;
      }
    }
    return g10 === 0 ? null : (m10.length = g10, h10.length = g10, F2 = t10.breakOffsets, I2 = t10.breakOffsetsVisibleColumn, t10.breakOffsets = m10, t10.breakOffsetsVisibleColumn = h10, t10.wrappedTextIndentLength = f10, t10);
  }
  function R2(e10, t10, n10, r10, i10, a10, o10, s10) {
    let c10 = BV.applyInjectedText(t10, n10), l10, u10;
    if (n10 && n10.length > 0 ? (l10 = n10.map((e11) => e11.options), u10 = n10.map((e11) => e11.column - 1)) : (l10 = null, u10 = null), i10 === -1) return l10 ? new b2(u10, l10, [
      c10.length
    ], [], 0) : null;
    let d10 = c10.length;
    if (d10 <= 1) return l10 ? new b2(u10, l10, [
      c10.length
    ], [], 0) : null;
    let f10 = s10 === `keepAll`, p10 = H2(c10, r10, i10, a10, o10), m10 = i10 - p10, h10 = [], g10 = [], _10 = 0, v10 = 0, y10 = 0, b10 = i10, x10 = c10.charCodeAt(0), S10 = e10.get(x10), C10 = z2(x10, 0, r10, a10), w10 = 1;
    Bs(x10) && (C10 += 1, x10 = c10.charCodeAt(1), S10 = e10.get(x10), w10++);
    for (let t11 = w10; t11 < d10; t11++) {
      let n11 = t11, i11 = c10.charCodeAt(t11), o11, s11;
      Bs(i11) ? (t11++, o11 = 0, s11 = 2) : (o11 = e10.get(i11), s11 = z2(i11, C10, r10, a10)), V2(x10, S10, i11, o11, f10) && (v10 = n11, y10 = C10), C10 += s11, C10 > b10 && ((v10 === 0 || C10 - y10 > m10) && (v10 = n11, y10 = C10 - s11), h10[_10] = v10, g10[_10] = y10, _10++, b10 = y10 + m10, v10 = 0), x10 = i11, S10 = o11;
    }
    return _10 === 0 && (!n10 || n10.length === 0) ? null : (h10[_10] = d10, g10[_10] = C10, new b2(u10, l10, h10, g10, p10));
  }
  function z2(e10, t10, n10, r10) {
    return e10 === 9 ? n10 - t10 % n10 : rc(e10) || e10 < 32 ? r10 : 1;
  }
  function B2(e10, t10) {
    return t10 - e10 % t10;
  }
  function V2(e10, t10, n10, r10, i10) {
    return n10 !== 32 && (t10 === 2 && r10 !== 2 || t10 !== 1 && r10 === 1 || !i10 && t10 === 3 && r10 !== 2 || !i10 && r10 === 3 && t10 !== 1);
  }
  function H2(e10, t10, n10, r10, i10) {
    let a10 = 0;
    if (i10 !== 0) {
      let o10 = Es(e10);
      if (o10 !== -1) {
        for (let n11 = 0; n11 < o10; n11++) {
          let r11 = e10.charCodeAt(n11) === 9 ? B2(a10, t10) : 1;
          a10 += r11;
        }
        let s10 = i10 === 3 ? 2 : i10 === 2 ? 1 : 0;
        for (let e11 = 0; e11 < s10; e11++) {
          let e12 = B2(a10, t10);
          a10 += e12;
        }
        a10 + r10 > n10 && (a10 = 0);
      }
    }
    return a10;
  }
  var U2 = class e10 {
    constructor(e11) {
      this._selTrackedRange = null, this._trackSelection = true, this._setState(e11, new g$(new F(1, 1, 1, 1), 0, 0, new P(1, 1), 0), new g$(new F(1, 1, 1, 1), 0, 0, new P(1, 1), 0));
    }
    dispose(e11) {
      this._removeTrackedRange(e11);
    }
    startTrackingSelection(e11) {
      this._trackSelection = true, this._updateTrackedRange(e11);
    }
    stopTrackingSelection(e11) {
      this._trackSelection = false, this._removeTrackedRange(e11);
    }
    _updateTrackedRange(e11) {
      this._trackSelection && (this._selTrackedRange = e11.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0));
    }
    _removeTrackedRange(e11) {
      this._selTrackedRange = e11.model._setTrackedRange(this._selTrackedRange, null, 0);
    }
    asCursorState() {
      return new p$(this.modelState, this.viewState);
    }
    readSelectionFromMarkers(e11) {
      let t10 = e11.model._getTrackedRange(this._selTrackedRange);
      return this.modelState.selection.isEmpty() && !t10.isEmpty() ? Ma.fromRange(t10.collapseToEnd(), this.modelState.selection.getDirection()) : Ma.fromRange(t10, this.modelState.selection.getDirection());
    }
    ensureValidState(e11) {
      this._setState(e11, this.modelState, this.viewState);
    }
    setState(e11, t10, n10) {
      this._setState(e11, t10, n10);
    }
    static _validatePositionWithCache(e11, t10, n10, r10) {
      return t10.equals(n10) ? r10 : e11.normalizePosition(t10, 2);
    }
    static _validateViewState(e11, t10) {
      let n10 = t10.position, r10 = t10.selectionStart.getStartPosition(), i10 = t10.selectionStart.getEndPosition(), a10 = e11.normalizePosition(n10, 2), o10 = this._validatePositionWithCache(e11, r10, n10, a10), s10 = this._validatePositionWithCache(e11, i10, r10, o10);
      return n10.equals(a10) && r10.equals(o10) && i10.equals(s10) ? t10 : new g$(F.fromPositions(o10, s10), t10.selectionStartKind, t10.selectionStartLeftoverVisibleColumns + r10.column - o10.column, a10, t10.leftoverVisibleColumns + n10.column - a10.column);
    }
    _setState(t10, n10, r10) {
      if (r10 && (r10 = e10._validateViewState(t10.viewModel, r10)), n10) {
        let e11 = t10.model.validateRange(n10.selectionStart), r11 = n10.selectionStart.equalsRange(e11) ? n10.selectionStartLeftoverVisibleColumns : 0, i10 = t10.model.validatePosition(n10.position), a10 = n10.position.equals(i10) ? n10.leftoverVisibleColumns : 0;
        n10 = new g$(e11, n10.selectionStartKind, r11, i10, a10);
      } else {
        if (!r10) return;
        let e11 = t10.model.validateRange(t10.coordinatesConverter.convertViewRangeToModelRange(r10.selectionStart)), i10 = t10.model.validatePosition(t10.coordinatesConverter.convertViewPositionToModelPosition(r10.position));
        n10 = new g$(e11, r10.selectionStartKind, r10.selectionStartLeftoverVisibleColumns, i10, r10.leftoverVisibleColumns);
      }
      if (r10) {
        let e11 = t10.coordinatesConverter.validateViewRange(r10.selectionStart, n10.selectionStart), i10 = t10.coordinatesConverter.validateViewPosition(r10.position, n10.position);
        r10 = new g$(e11, n10.selectionStartKind, n10.selectionStartLeftoverVisibleColumns, i10, n10.leftoverVisibleColumns);
      } else {
        let e11 = t10.coordinatesConverter.convertModelPositionToViewPosition(new P(n10.selectionStart.startLineNumber, n10.selectionStart.startColumn)), i10 = t10.coordinatesConverter.convertModelPositionToViewPosition(new P(n10.selectionStart.endLineNumber, n10.selectionStart.endColumn)), a10 = new F(e11.lineNumber, e11.column, i10.lineNumber, i10.column), o10 = t10.coordinatesConverter.convertModelPositionToViewPosition(n10.position);
        r10 = new g$(a10, n10.selectionStartKind, n10.selectionStartLeftoverVisibleColumns, o10, n10.leftoverVisibleColumns);
      }
      this.modelState = n10, this.viewState = r10, this._updateTrackedRange(t10);
    }
  }, W2 = class {
    constructor(e10) {
      this.context = e10, this.cursors = [
        new U2(e10)
      ], this.lastAddedCursorIndex = 0;
    }
    dispose() {
      for (let e10 of this.cursors) e10.dispose(this.context);
    }
    startTrackingSelections() {
      for (let e10 of this.cursors) e10.startTrackingSelection(this.context);
    }
    stopTrackingSelections() {
      for (let e10 of this.cursors) e10.stopTrackingSelection(this.context);
    }
    updateContext(e10) {
      this.context = e10;
    }
    ensureValidState() {
      for (let e10 of this.cursors) e10.ensureValidState(this.context);
    }
    readSelectionFromMarkers() {
      return this.cursors.map((e10) => e10.readSelectionFromMarkers(this.context));
    }
    getAll() {
      return this.cursors.map((e10) => e10.asCursorState());
    }
    getViewPositions() {
      return this.cursors.map((e10) => e10.viewState.position);
    }
    getTopMostViewPosition() {
      return Pv(this.cursors, le((e10) => e10.viewState.position, P.compare)).viewState.position;
    }
    getBottomMostViewPosition() {
      return Nv(this.cursors, le((e10) => e10.viewState.position, P.compare)).viewState.position;
    }
    getSelections() {
      return this.cursors.map((e10) => e10.modelState.selection);
    }
    getViewSelections() {
      return this.cursors.map((e10) => e10.viewState.selection);
    }
    setSelections(e10) {
      this.setStates(p$.fromModelSelections(e10));
    }
    getPrimaryCursor() {
      return this.cursors[0].asCursorState();
    }
    setStates(e10) {
      e10 !== null && (this.cursors[0].setState(this.context, e10[0].modelState, e10[0].viewState), this._setSecondaryStates(e10.slice(1)));
    }
    _setSecondaryStates(e10) {
      let t10 = this.cursors.length - 1, n10 = e10.length;
      if (t10 < n10) {
        let e11 = n10 - t10;
        for (let t11 = 0; t11 < e11; t11++) this._addSecondaryCursor();
      } else if (t10 > n10) {
        let e11 = t10 - n10;
        for (let t11 = 0; t11 < e11; t11++) this._removeSecondaryCursor(this.cursors.length - 2);
      }
      for (let t11 = 0; t11 < n10; t11++) this.cursors[t11 + 1].setState(this.context, e10[t11].modelState, e10[t11].viewState);
    }
    killSecondaryCursors() {
      this._setSecondaryStates([]);
    }
    _addSecondaryCursor() {
      this.cursors.push(new U2(this.context)), this.lastAddedCursorIndex = this.cursors.length - 1;
    }
    getLastAddedCursorIndex() {
      return this.cursors.length === 1 || this.lastAddedCursorIndex === 0 ? 0 : this.lastAddedCursorIndex;
    }
    _removeSecondaryCursor(e10) {
      this.lastAddedCursorIndex >= e10 + 1 && this.lastAddedCursorIndex--, this.cursors[e10 + 1].dispose(this.context), this.cursors.splice(e10 + 1, 1);
    }
    normalize() {
      if (this.cursors.length === 1) return;
      let e10 = this.cursors.slice(0), t10 = [];
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) t10.push({
        index: n10,
        selection: e10[n10].modelState.selection
      });
      t10.sort(le((e11) => e11.selection, F.compareRangesUsingStarts));
      for (let n10 = 0; n10 < t10.length - 1; n10++) {
        let r10 = t10[n10], i10 = t10[n10 + 1], a10 = r10.selection, o10 = i10.selection;
        if (!this.context.cursorConfig.multiCursorMergeOverlapping) continue;
        let s10;
        if (s10 = o10.isEmpty() || a10.isEmpty() ? o10.getStartPosition().isBeforeOrEqual(a10.getEndPosition()) : o10.getStartPosition().isBefore(a10.getEndPosition()), s10) {
          let a11 = r10.index < i10.index ? n10 : n10 + 1, o11 = r10.index < i10.index ? n10 + 1 : n10, s11 = t10[o11].index, c10 = t10[a11].index, l10 = t10[o11].selection, u10 = t10[a11].selection;
          if (!l10.equalsSelection(u10)) {
            let n11 = l10.plusRange(u10), r11 = l10.selectionStartLineNumber === l10.startLineNumber && l10.selectionStartColumn === l10.startColumn, i11 = u10.selectionStartLineNumber === u10.startLineNumber && u10.selectionStartColumn === u10.startColumn, o12;
            s11 === this.lastAddedCursorIndex ? (o12 = r11, this.lastAddedCursorIndex = c10) : o12 = i11;
            let d10;
            d10 = o12 ? new Ma(n11.startLineNumber, n11.startColumn, n11.endLineNumber, n11.endColumn) : new Ma(n11.endLineNumber, n11.endColumn, n11.startLineNumber, n11.startColumn), t10[a11].selection = d10;
            let f10 = p$.fromModelSelection(d10);
            e10[c10].setState(this.context, f10.modelState, f10.viewState);
          }
          for (let e11 of t10) e11.index > s11 && e11.index--;
          e10.splice(s11, 1), t10.splice(o11, 1), this._removeSecondaryCursor(s11 - 1), n10--;
        }
      }
    }
  }, G2 = class {
    constructor(e10, t10, n10, r10) {
      this._cursorContextBrand = void 0, this.model = e10, this.viewModel = t10, this.coordinatesConverter = n10, this.cursorConfig = r10;
    }
  }, K2 = class {
    constructor() {
      this.type = 0;
    }
  }, q2 = class {
    constructor() {
      this.type = 1;
    }
  }, J2 = class {
    constructor(e10) {
      this.type = 2, this._source = e10;
    }
    hasChanged(e10) {
      return this._source.hasChanged(e10);
    }
  }, Y2 = class {
    constructor(e10, t10, n10) {
      this.selections = e10, this.modelSelections = t10, this.reason = n10, this.type = 3;
    }
  }, X2 = class {
    constructor(e10) {
      this.type = 4, e10 ? (this.affectsMinimap = e10.affectsMinimap, this.affectsOverviewRuler = e10.affectsOverviewRuler, this.affectsGlyphMargin = e10.affectsGlyphMargin, this.affectsLineNumber = e10.affectsLineNumber) : (this.affectsMinimap = true, this.affectsOverviewRuler = true, this.affectsGlyphMargin = true, this.affectsLineNumber = true);
    }
  }, Z2 = class {
    constructor() {
      this.type = 5;
    }
  }, Q2 = class {
    constructor(e10) {
      this.type = 6, this.isFocused = e10;
    }
  }, $2 = class {
    constructor() {
      this.type = 7;
    }
  }, e4 = class {
    constructor() {
      this.type = 8;
    }
  }, t4 = class {
    constructor(e10, t10) {
      this.fromLineNumber = e10, this.count = t10, this.type = 9;
    }
  }, n4 = class {
    constructor(e10, t10) {
      this.type = 10, this.fromLineNumber = e10, this.toLineNumber = t10;
    }
  }, r4 = class {
    constructor(e10, t10) {
      this.type = 11, this.fromLineNumber = e10, this.toLineNumber = t10;
    }
  }, i4 = class {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      this.source = e10, this.minimalReveal = t10, this.range = n10, this.selections = r10, this.verticalType = i10, this.revealHorizontal = a10, this.scrollType = o10, this.type = 12;
    }
  }, a4 = class {
    constructor(e10) {
      this.type = 13, this.scrollWidth = e10.scrollWidth, this.scrollLeft = e10.scrollLeft, this.scrollHeight = e10.scrollHeight, this.scrollTop = e10.scrollTop, this.scrollWidthChanged = e10.scrollWidthChanged, this.scrollLeftChanged = e10.scrollLeftChanged, this.scrollHeightChanged = e10.scrollHeightChanged, this.scrollTopChanged = e10.scrollTopChanged;
    }
  }, o4 = class {
    constructor(e10) {
      this.theme = e10, this.type = 14;
    }
  }, s4 = class {
    constructor(e10) {
      this.type = 15, this.ranges = e10;
    }
  }, c4 = class {
    constructor() {
      this.type = 16;
    }
  }, l4 = class {
    constructor() {
      this.type = 17;
    }
  }, u4 = class extends j {
    constructor() {
      super(), this._onEvent = this._register(new N()), this.onEvent = this._onEvent.event, this._eventHandlers = [], this._viewEventQueue = null, this._isConsumingViewEventQueue = false, this._collector = null, this._collectorCnt = 0, this._outgoingEvents = [];
    }
    emitOutgoingEvent(e10) {
      this._addOutgoingEvent(e10), this._emitOutgoingEvents();
    }
    _addOutgoingEvent(e10) {
      for (let t10 = 0, n10 = this._outgoingEvents.length; t10 < n10; t10++) {
        let n11 = this._outgoingEvents[t10].kind === e10.kind ? this._outgoingEvents[t10].attemptToMerge(e10) : null;
        if (n11) {
          this._outgoingEvents[t10] = n11;
          return;
        }
      }
      this._outgoingEvents.push(e10);
    }
    _emitOutgoingEvents() {
      for (; this._outgoingEvents.length > 0; ) {
        if (this._collector || this._isConsumingViewEventQueue) return;
        let e10 = this._outgoingEvents.shift();
        e10.isNoOp() || this._onEvent.fire(e10);
      }
    }
    addViewEventHandler(e10) {
      for (let t10 = 0, n10 = this._eventHandlers.length; t10 < n10; t10++) this._eventHandlers[t10] === e10 && console.warn(`Detected duplicate listener in ViewEventDispatcher`, e10);
      this._eventHandlers.push(e10);
    }
    removeViewEventHandler(e10) {
      for (let t10 = 0; t10 < this._eventHandlers.length; t10++) if (this._eventHandlers[t10] === e10) {
        this._eventHandlers.splice(t10, 1);
        break;
      }
    }
    beginEmitViewEvents() {
      return this._collectorCnt++, this._collectorCnt === 1 && (this._collector = new d4()), this._collector;
    }
    endEmitViewEvents() {
      if (this._collectorCnt--, this._collectorCnt === 0) {
        let e10 = this._collector.outgoingEvents, t10 = this._collector.viewEvents;
        this._collector = null;
        for (let t11 of e10) this._addOutgoingEvent(t11);
        t10.length > 0 && this._emitMany(t10);
      }
      this._emitOutgoingEvents();
    }
    emitSingleViewEvent(e10) {
      try {
        let t10 = this.beginEmitViewEvents();
        t10.emitViewEvent(e10);
      } finally {
        this.endEmitViewEvents();
      }
    }
    _emitMany(e10) {
      this._viewEventQueue ? this._viewEventQueue = this._viewEventQueue.concat(e10) : this._viewEventQueue = e10, this._isConsumingViewEventQueue || this._consumeViewEventQueue();
    }
    _consumeViewEventQueue() {
      try {
        this._isConsumingViewEventQueue = true, this._doConsumeQueue();
      } finally {
        this._isConsumingViewEventQueue = false;
      }
    }
    _doConsumeQueue() {
      for (; this._viewEventQueue; ) {
        let e10 = this._viewEventQueue;
        this._viewEventQueue = null;
        let t10 = this._eventHandlers.slice(0);
        for (let n10 of t10) n10.handleEvents(e10);
      }
    }
  }, d4 = class {
    constructor() {
      this.viewEvents = [], this.outgoingEvents = [];
    }
    emitViewEvent(e10) {
      this.viewEvents.push(e10);
    }
    emitOutgoingEvent(e10) {
      this.outgoingEvents.push(e10);
    }
  }, f4 = class e10 {
    constructor(e11, t10, n10, r10) {
      this.kind = 0, this._oldContentWidth = e11, this._oldContentHeight = t10, this.contentWidth = n10, this.contentHeight = r10, this.contentWidthChanged = this._oldContentWidth !== this.contentWidth, this.contentHeightChanged = this._oldContentHeight !== this.contentHeight;
    }
    isNoOp() {
      return !this.contentWidthChanged && !this.contentHeightChanged;
    }
    attemptToMerge(t10) {
      return t10.kind === this.kind ? new e10(this._oldContentWidth, this._oldContentHeight, t10.contentWidth, t10.contentHeight) : null;
    }
  }, p4 = class e10 {
    constructor(e11, t10) {
      this.kind = 1, this.oldHasFocus = e11, this.hasFocus = t10;
    }
    isNoOp() {
      return this.oldHasFocus === this.hasFocus;
    }
    attemptToMerge(t10) {
      return t10.kind === this.kind ? new e10(this.oldHasFocus, t10.hasFocus) : null;
    }
  }, m4 = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10, s10) {
      this.kind = 2, this._oldScrollWidth = e11, this._oldScrollLeft = t10, this._oldScrollHeight = n10, this._oldScrollTop = r10, this.scrollWidth = i10, this.scrollLeft = a10, this.scrollHeight = o10, this.scrollTop = s10, this.scrollWidthChanged = this._oldScrollWidth !== this.scrollWidth, this.scrollLeftChanged = this._oldScrollLeft !== this.scrollLeft, this.scrollHeightChanged = this._oldScrollHeight !== this.scrollHeight, this.scrollTopChanged = this._oldScrollTop !== this.scrollTop;
    }
    isNoOp() {
      return !this.scrollWidthChanged && !this.scrollLeftChanged && !this.scrollHeightChanged && !this.scrollTopChanged;
    }
    attemptToMerge(t10) {
      return t10.kind === this.kind ? new e10(this._oldScrollWidth, this._oldScrollLeft, this._oldScrollHeight, this._oldScrollTop, t10.scrollWidth, t10.scrollLeft, t10.scrollHeight, t10.scrollTop) : null;
    }
  }, h4 = class {
    constructor() {
      this.kind = 3;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return e10.kind === this.kind ? this : null;
    }
  }, g4 = class {
    constructor() {
      this.kind = 4;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return e10.kind === this.kind ? this : null;
    }
  }, _4 = class e10 {
    constructor(e11, t10, n10, r10, i10, a10, o10) {
      this.kind = 6, this.oldSelections = e11, this.selections = t10, this.oldModelVersionId = n10, this.modelVersionId = r10, this.source = i10, this.reason = a10, this.reachedMaxCursorCount = o10;
    }
    static _selectionsAreEqual(e11, t10) {
      if (!e11 && !t10) return true;
      if (!e11 || !t10) return false;
      let n10 = e11.length, r10 = t10.length;
      if (n10 !== r10) return false;
      for (let r11 = 0; r11 < n10; r11++) if (!e11[r11].equalsSelection(t10[r11])) return false;
      return true;
    }
    isNoOp() {
      return e10._selectionsAreEqual(this.oldSelections, this.selections) && this.oldModelVersionId === this.modelVersionId;
    }
    attemptToMerge(t10) {
      return t10.kind === this.kind ? new e10(this.oldSelections, t10.selections, this.oldModelVersionId, t10.modelVersionId, t10.source, t10.reason, this.reachedMaxCursorCount || t10.reachedMaxCursorCount) : null;
    }
  }, v4 = class {
    constructor() {
      this.kind = 5;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return e10.kind === this.kind ? this : null;
    }
  }, y4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 7;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, b4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 8;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, x4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 9;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, S4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 10;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, C4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 11;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, w4 = class {
    constructor(e10) {
      this.event = e10, this.kind = 12;
    }
    isNoOp() {
      return false;
    }
    attemptToMerge(e10) {
      return null;
    }
  }, T4 = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._model = e10, this._knownModelVersionId = this._model.getVersionId(), this._viewModel = t10, this._coordinatesConverter = n10, this.context = new G2(this._model, this._viewModel, this._coordinatesConverter, r10), this._cursors = new W2(this.context), this._hasFocus = false, this._isHandling = false, this._compositionState = null, this._columnSelectData = null, this._autoClosedActions = [], this._prevEditOperationType = 0;
    }
    dispose() {
      this._cursors.dispose(), this._autoClosedActions = Rr(this._autoClosedActions), super.dispose();
    }
    updateConfiguration(e10) {
      this.context = new G2(this._model, this._viewModel, this._coordinatesConverter, e10), this._cursors.updateContext(this.context);
    }
    onLineMappingChanged(e10) {
      this._knownModelVersionId === this._model.getVersionId() && this.setStates(e10, `viewModel`, 0, this.getCursorStates());
    }
    setHasFocus(e10) {
      this._hasFocus = e10;
    }
    _validateAutoClosedActions() {
      if (this._autoClosedActions.length > 0) {
        let e10 = this._cursors.getSelections();
        for (let t10 = 0; t10 < this._autoClosedActions.length; t10++) {
          let n10 = this._autoClosedActions[t10];
          n10.isValid(e10) || (n10.dispose(), this._autoClosedActions.splice(t10, 1), t10--);
        }
      }
    }
    getPrimaryCursorState() {
      return this._cursors.getPrimaryCursor();
    }
    getLastAddedCursorIndex() {
      return this._cursors.getLastAddedCursorIndex();
    }
    getCursorStates() {
      return this._cursors.getAll();
    }
    setStates(e10, t10, n10, r10) {
      let i10 = false, a10 = this.context.cursorConfig.multiCursorLimit;
      r10 !== null && r10.length > a10 && (r10 = r10.slice(0, a10), i10 = true);
      let o10 = E4.from(this._model, this);
      return this._cursors.setStates(r10), this._cursors.normalize(), this._columnSelectData = null, this._validateAutoClosedActions(), this._emitStateChangedIfNecessary(e10, t10, n10, o10, i10);
    }
    setCursorColumnSelectData(e10) {
      this._columnSelectData = e10;
    }
    revealAll(e10, t10, n10, r10, i10, a10) {
      let o10 = this._cursors.getViewPositions(), s10 = null, c10 = null;
      o10.length > 1 ? c10 = this._cursors.getViewSelections() : s10 = F.fromPositions(o10[0], o10[0]), e10.emitViewEvent(new i4(t10, n10, s10, c10, r10, i10, a10));
    }
    revealPrimary(e10, t10, n10, r10, i10, a10) {
      let o10 = this._cursors.getPrimaryCursor(), s10 = [
        o10.viewState.selection
      ];
      e10.emitViewEvent(new i4(t10, n10, null, s10, r10, i10, a10));
    }
    saveState() {
      let e10 = [], t10 = this._cursors.getSelections();
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) {
        let r11 = t10[n10];
        e10.push({
          inSelectionMode: !r11.isEmpty(),
          selectionStart: {
            lineNumber: r11.selectionStartLineNumber,
            column: r11.selectionStartColumn
          },
          position: {
            lineNumber: r11.positionLineNumber,
            column: r11.positionColumn
          }
        });
      }
      return e10;
    }
    restoreState(e10, t10) {
      let n10 = [];
      for (let e11 = 0, r10 = t10.length; e11 < r10; e11++) {
        let r11 = t10[e11], i10 = 1, a10 = 1;
        r11.position && r11.position.lineNumber && (i10 = r11.position.lineNumber), r11.position && r11.position.column && (a10 = r11.position.column);
        let o10 = i10, s10 = a10;
        r11.selectionStart && r11.selectionStart.lineNumber && (o10 = r11.selectionStart.lineNumber), r11.selectionStart && r11.selectionStart.column && (s10 = r11.selectionStart.column), n10.push({
          selectionStartLineNumber: o10,
          selectionStartColumn: s10,
          positionLineNumber: i10,
          positionColumn: a10
        });
      }
      this.setStates(e10, `restoreState`, 0, p$.fromModelSelections(n10)), this.revealAll(e10, `restoreState`, false, 0, true, 1);
    }
    onModelContentChanged(e10, t10) {
      if (t10 instanceof KV) {
        if (this._isHandling) return;
        this._isHandling = true;
        try {
          this.setStates(e10, `modelChange`, 0, this.getCursorStates());
        } finally {
          this._isHandling = false;
        }
      } else {
        let n10 = t10.rawContentChangedEvent;
        if (this._knownModelVersionId = n10.versionId, this._isHandling) return;
        let r10 = n10.containsEvent(1);
        if (this._prevEditOperationType = 0, r10) this._cursors.dispose(), this._cursors = new W2(this.context), this._validateAutoClosedActions(), this._emitStateChangedIfNecessary(e10, `model`, 1, null, false);
        else if (this._hasFocus && n10.resultingSelection && n10.resultingSelection.length > 0) {
          let t11 = p$.fromModelSelections(n10.resultingSelection);
          this.setStates(e10, `modelChange`, n10.isUndoing ? 5 : n10.isRedoing ? 6 : 2, t11) && this.revealAll(e10, `modelChange`, false, 0, true, 0);
        } else {
          let t11 = this._cursors.readSelectionFromMarkers();
          this.setStates(e10, `modelChange`, 2, p$.fromModelSelections(t11));
        }
      }
    }
    getSelection() {
      return this._cursors.getPrimaryCursor().modelState.selection;
    }
    getTopMostViewPosition() {
      return this._cursors.getTopMostViewPosition();
    }
    getBottomMostViewPosition() {
      return this._cursors.getBottomMostViewPosition();
    }
    getCursorColumnSelectData() {
      if (this._columnSelectData) return this._columnSelectData;
      let e10 = this._cursors.getPrimaryCursor(), t10 = e10.viewState.selectionStart.getStartPosition(), n10 = e10.viewState.position;
      return {
        isReal: false,
        fromViewLineNumber: t10.lineNumber,
        fromViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, t10),
        toViewLineNumber: n10.lineNumber,
        toViewVisualColumn: this.context.cursorConfig.visibleColumnFromColumn(this._viewModel, n10)
      };
    }
    getSelections() {
      return this._cursors.getSelections();
    }
    setSelections(e10, t10, n10, r10) {
      this.setStates(e10, t10, r10, p$.fromModelSelections(n10));
    }
    getPrevEditOperationType() {
      return this._prevEditOperationType;
    }
    setPrevEditOperationType(e10) {
      this._prevEditOperationType = e10;
    }
    _pushAutoClosedAction(e10, t10) {
      let n10 = [], r10 = [];
      for (let i11 = 0, a11 = e10.length; i11 < a11; i11++) n10.push({
        range: e10[i11],
        options: {
          description: `auto-closed-character`,
          inlineClassName: `auto-closed-character`,
          stickiness: 1
        }
      }), r10.push({
        range: t10[i11],
        options: {
          description: `auto-closed-enclosing`,
          stickiness: 1
        }
      });
      let i10 = this._model.deltaDecorations([], n10), a10 = this._model.deltaDecorations([], r10);
      this._autoClosedActions.push(new D4(this._model, i10, a10));
    }
    _executeEditOperation(e10) {
      if (!e10) return;
      e10.shouldPushStackElementBefore && this._model.pushStackElement();
      let t10 = O4.executeCommands(this._model, this._cursors.getSelections(), e10.commands);
      if (t10) {
        this._interpretCommandResult(t10);
        let n10 = [], r10 = [];
        for (let t11 = 0; t11 < e10.commands.length; t11++) {
          let i10 = e10.commands[t11];
          i10 instanceof d1 && i10.enclosingRange && i10.closeCharacterRange && (n10.push(i10.closeCharacterRange), r10.push(i10.enclosingRange));
        }
        n10.length > 0 && this._pushAutoClosedAction(n10, r10), this._prevEditOperationType = e10.type;
      }
      e10.shouldPushStackElementAfter && this._model.pushStackElement();
    }
    _interpretCommandResult(e10) {
      (!e10 || e10.length === 0) && (e10 = this._cursors.readSelectionFromMarkers()), this._columnSelectData = null, this._cursors.setSelections(e10), this._cursors.normalize();
    }
    _emitStateChangedIfNecessary(e10, t10, n10, r10, i10) {
      let a10 = E4.from(this._model, this);
      if (a10.equals(r10)) return false;
      let o10 = this._cursors.getSelections(), s10 = this._cursors.getViewSelections();
      if (e10.emitViewEvent(new Y2(s10, o10, n10)), !r10 || r10.cursorState.length !== a10.cursorState.length || a10.cursorState.some((e11, t11) => !e11.modelState.equals(r10.cursorState[t11].modelState))) {
        let s11 = r10 ? r10.cursorState.map((e11) => e11.modelState.selection) : null, c10 = r10 ? r10.modelVersionId : 0;
        e10.emitOutgoingEvent(new _4(s11, o10, c10, a10.modelVersionId, t10 || `keyboard`, n10, i10));
      }
      return true;
    }
    _findAutoClosingPairs(e10) {
      if (!e10.length) return null;
      let t10 = [];
      for (let n10 = 0, r10 = e10.length; n10 < r10; n10++) {
        let r11 = e10[n10];
        if (!r11.text || r11.text.indexOf(`
`) >= 0) return null;
        let i10 = r11.text.match(/([)\]}>'"`])([^)\]}>'"`]*)$/);
        if (!i10) return null;
        let a10 = i10[1], o10 = this.context.cursorConfig.autoClosingPairs.autoClosingPairsCloseSingleChar.get(a10);
        if (!o10 || o10.length !== 1) return null;
        let s10 = o10[0].open, c10 = r11.text.length - i10[2].length - 1, l10 = r11.text.lastIndexOf(s10, c10 - 1);
        if (l10 === -1) return null;
        t10.push([
          l10,
          c10
        ]);
      }
      return t10;
    }
    executeEdits(e10, t10, n10, r10) {
      let i10 = null;
      t10 === `snippet` && (i10 = this._findAutoClosingPairs(n10)), i10 && (n10[0]._isTracked = true);
      let a10 = [], o10 = [], s10 = this._model.pushEditOperations(this.getSelections(), n10, (e11) => {
        if (i10) for (let t12 = 0, n11 = i10.length; t12 < n11; t12++) {
          let [n12, r11] = i10[t12], s11 = e11[t12], c10 = s11.range.startLineNumber, l10 = s11.range.startColumn - 1 + n12, u10 = s11.range.startColumn - 1 + r11;
          a10.push(new F(c10, u10 + 1, c10, u10 + 2)), o10.push(new F(c10, l10 + 1, c10, u10 + 2));
        }
        let t11 = r10(e11);
        return t11 && (this._isHandling = true), t11;
      });
      s10 && (this._isHandling = false, this.setSelections(e10, t10, s10, 0)), a10.length > 0 && this._pushAutoClosedAction(a10, o10);
    }
    _executeEdit(e10, t10, n10, r10 = 0) {
      if (this.context.cursorConfig.readOnly) return;
      let i10 = E4.from(this._model, this);
      this._cursors.stopTrackingSelections(), this._isHandling = true;
      try {
        this._cursors.ensureValidState(), e10();
      } catch (e11) {
        gr(e11);
      }
      this._isHandling = false, this._cursors.startTrackingSelections(), this._validateAutoClosedActions(), this._emitStateChangedIfNecessary(t10, n10, r10, i10, false) && this.revealAll(t10, n10, false, 0, true, 0);
    }
    getAutoClosedCharacters() {
      return D4.getAllAutoClosedCharacters(this._autoClosedActions);
    }
    startComposition(e10) {
      this._compositionState = new A4(this._model, this.getSelections());
    }
    endComposition(e10, t10) {
      let n10 = this._compositionState ? this._compositionState.deduceOutcome(this._model, this.getSelections()) : null;
      this._compositionState = null, this._executeEdit(() => {
        t10 === `keyboard` && this._executeEditOperation(C1.compositionEndWithInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, n10, this.getSelections(), this.getAutoClosedCharacters()));
      }, e10, t10);
    }
    type(e10, t10, n10) {
      this._executeEdit(() => {
        if (n10 === `keyboard`) {
          let e11 = t10.length, n11 = 0;
          for (; n11 < e11; ) {
            let e12 = qs(t10, n11), r10 = t10.substr(n11, e12);
            this._executeEditOperation(C1.typeWithInterceptors(!!this._compositionState, this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), this.getAutoClosedCharacters(), r10)), n11 += e12;
          }
        } else this._executeEditOperation(C1.typeWithoutInterceptors(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), t10));
      }, e10, n10);
    }
    compositionType(e10, t10, n10, r10, i10, a10) {
      if (t10.length === 0 && n10 === 0 && r10 === 0) {
        if (i10 !== 0) {
          let t11 = this.getSelections().map((e11) => {
            let t12 = e11.getPosition();
            return new Ma(t12.lineNumber, t12.column + i10, t12.lineNumber, t12.column + i10);
          });
          this.setSelections(e10, a10, t11, 0);
        }
        return;
      }
      this._executeEdit(() => {
        this._executeEditOperation(C1.compositionType(this._prevEditOperationType, this.context.cursorConfig, this._model, this.getSelections(), t10, n10, r10, i10));
      }, e10, a10);
    }
    paste(e10, t10, n10, r10, i10) {
      this._executeEdit(() => {
        this._executeEditOperation(C1.paste(this.context.cursorConfig, this._model, this.getSelections(), t10, n10, r10 || []));
      }, e10, i10, 4);
    }
    cut(e10, t10) {
      this._executeEdit(() => {
        this._executeEditOperation(D$.cut(this.context.cursorConfig, this._model, this.getSelections()));
      }, e10, t10);
    }
    executeCommand(e10, t10, n10) {
      this._executeEdit(() => {
        this._cursors.killSecondaryCursors(), this._executeEditOperation(new _$(0, [
          t10
        ], {
          shouldPushStackElementBefore: false,
          shouldPushStackElementAfter: false
        }));
      }, e10, n10);
    }
    executeCommands(e10, t10, n10) {
      this._executeEdit(() => {
        this._executeEditOperation(new _$(0, t10, {
          shouldPushStackElementBefore: false,
          shouldPushStackElementAfter: false
        }));
      }, e10, n10);
    }
  }, E4 = class e10 {
    static from(t10, n10) {
      return new e10(t10.getVersionId(), n10.getCursorStates());
    }
    constructor(e11, t10) {
      this.modelVersionId = e11, this.cursorState = t10;
    }
    equals(e11) {
      if (!e11 || this.modelVersionId !== e11.modelVersionId || this.cursorState.length !== e11.cursorState.length) return false;
      for (let t10 = 0, n10 = this.cursorState.length; t10 < n10; t10++) if (!this.cursorState[t10].equals(e11.cursorState[t10])) return false;
      return true;
    }
  }, D4 = class {
    static getAllAutoClosedCharacters(e10) {
      let t10 = [];
      for (let n10 of e10) t10 = t10.concat(n10.getAutoClosedCharactersRanges());
      return t10;
    }
    constructor(e10, t10, n10) {
      this._model = e10, this._autoClosedCharactersDecorations = t10, this._autoClosedEnclosingDecorations = n10;
    }
    dispose() {
      this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []), this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);
    }
    getAutoClosedCharactersRanges() {
      let e10 = [];
      for (let t10 = 0; t10 < this._autoClosedCharactersDecorations.length; t10++) {
        let n10 = this._model.getDecorationRange(this._autoClosedCharactersDecorations[t10]);
        n10 && e10.push(n10);
      }
      return e10;
    }
    isValid(e10) {
      let t10 = [];
      for (let e11 = 0; e11 < this._autoClosedEnclosingDecorations.length; e11++) {
        let n10 = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[e11]);
        if (n10 && (t10.push(n10), n10.startLineNumber !== n10.endLineNumber)) return false;
      }
      t10.sort(F.compareRangesUsingStarts), e10.sort(F.compareRangesUsingStarts);
      for (let n10 = 0; n10 < e10.length; n10++) if (n10 >= t10.length || !t10[n10].strictContainsRange(e10[n10])) return false;
      return true;
    }
  }, O4 = class {
    static executeCommands(e10, t10, n10) {
      let r10 = {
        model: e10,
        selectionsBefore: t10,
        trackedRanges: [],
        trackedRangesDirection: []
      }, i10 = this._innerExecuteCommands(r10, n10);
      for (let e11 = 0, t11 = r10.trackedRanges.length; e11 < t11; e11++) r10.model._setTrackedRange(r10.trackedRanges[e11], null, 0);
      return i10;
    }
    static _innerExecuteCommands(e10, t10) {
      if (this._arrayIsEmpty(t10)) return null;
      let n10 = this._getEditOperations(e10, t10);
      if (n10.operations.length === 0) return null;
      let r10 = n10.operations, i10 = this._getLoserCursorMap(r10);
      if (i10.hasOwnProperty(`0`)) return console.warn(`Ignoring commands`), null;
      let a10 = [];
      for (let e11 = 0, t11 = r10.length; e11 < t11; e11++) i10.hasOwnProperty(r10[e11].identifier.major.toString()) || a10.push(r10[e11]);
      n10.hadTrackedEditOperation && a10.length > 0 && (a10[0]._isTracked = true);
      let o10 = e10.model.pushEditOperations(e10.selectionsBefore, a10, (n11) => {
        let r11 = [];
        for (let t11 = 0; t11 < e10.selectionsBefore.length; t11++) r11[t11] = [];
        for (let e11 of n11) {
          if (!e11.identifier) continue;
          r11[e11.identifier.major].push(e11);
        }
        let i11 = (e11, t11) => e11.identifier.minor - t11.identifier.minor, a11 = [];
        for (let n12 = 0; n12 < e10.selectionsBefore.length; n12++) r11[n12].length > 0 ? (r11[n12].sort(i11), a11[n12] = t10[n12].computeCursorState(e10.model, {
          getInverseEditOperations: () => r11[n12],
          getTrackedSelection: (t11) => {
            let n13 = parseInt(t11, 10), r12 = e10.model._getTrackedRange(e10.trackedRanges[n13]);
            return e10.trackedRangesDirection[n13] === 0 ? new Ma(r12.startLineNumber, r12.startColumn, r12.endLineNumber, r12.endColumn) : new Ma(r12.endLineNumber, r12.endColumn, r12.startLineNumber, r12.startColumn);
          }
        })) : a11[n12] = e10.selectionsBefore[n12];
        return a11;
      });
      o10 || (o10 = e10.selectionsBefore);
      let s10 = [];
      for (let e11 in i10) i10.hasOwnProperty(e11) && s10.push(parseInt(e11, 10));
      s10.sort((e11, t11) => t11 - e11);
      for (let e11 of s10) o10.splice(e11, 1);
      return o10;
    }
    static _arrayIsEmpty(e10) {
      for (let t10 = 0, n10 = e10.length; t10 < n10; t10++) if (e10[t10]) return false;
      return true;
    }
    static _getEditOperations(e10, t10) {
      let n10 = [], r10 = false;
      for (let i10 = 0, a10 = t10.length; i10 < a10; i10++) {
        let a11 = t10[i10];
        if (a11) {
          let t11 = this._getEditOperationsFromCommand(e10, i10, a11);
          n10 = n10.concat(t11.operations), r10 || (r10 = t11.hadTrackedEditOperation);
        }
      }
      return {
        operations: n10,
        hadTrackedEditOperation: r10
      };
    }
    static _getEditOperationsFromCommand(e10, t10, n10) {
      let r10 = [], i10 = 0, a10 = (e11, a11, o11 = false) => {
        F.isEmpty(e11) && a11 === `` || r10.push({
          identifier: {
            major: t10,
            minor: i10++
          },
          range: e11,
          text: a11,
          forceMoveMarkers: o11,
          isAutoWhitespaceEdit: n10.insertsAutoWhitespace
        });
      }, o10 = false, s10 = (e11, t11, n11) => {
        o10 = true, a10(e11, t11, n11);
      }, c10 = (t11, n11) => {
        let r11 = Ma.liftSelection(t11), i11;
        if (r11.isEmpty()) if (typeof n11 == `boolean`) i11 = n11 ? 2 : 3;
        else {
          let t12 = e10.model.getLineMaxColumn(r11.startLineNumber);
          i11 = r11.startColumn === t12 ? 2 : 3;
        }
        else i11 = 1;
        let a11 = e10.trackedRanges.length, o11 = e10.model._setTrackedRange(null, r11, i11);
        return e10.trackedRanges[a11] = o11, e10.trackedRangesDirection[a11] = r11.getDirection(), a11.toString();
      }, l10 = {
        addEditOperation: a10,
        addTrackedEditOperation: s10,
        trackSelection: c10
      };
      try {
        n10.getEditOperations(e10.model, l10);
      } catch (e11) {
        return gr(e11), {
          operations: [],
          hadTrackedEditOperation: false
        };
      }
      return {
        operations: r10,
        hadTrackedEditOperation: o10
      };
    }
    static _getLoserCursorMap(e10) {
      e10 = e10.slice(0), e10.sort((e11, t11) => -F.compareRangesUsingEnds(e11.range, t11.range));
      let t10 = {};
      for (let n10 = 1; n10 < e10.length; n10++) {
        let r10 = e10[n10 - 1], i10 = e10[n10];
        if (F.getStartPosition(r10.range).isBefore(F.getEndPosition(i10.range))) {
          let a10;
          a10 = r10.identifier.major > i10.identifier.major ? r10.identifier.major : i10.identifier.major, t10[a10.toString()] = true;
          for (let t11 = 0; t11 < e10.length; t11++) e10[t11].identifier.major === a10 && (e10.splice(t11, 1), t11 < n10 && n10--, t11--);
          n10 > 0 && n10--;
        }
      }
      return t10;
    }
  }, k4 = class {
    constructor(e10, t10, n10) {
      this.text = e10, this.startSelection = t10, this.endSelection = n10;
    }
  }, A4 = class e10 {
    static _capture(e11, t10) {
      let n10 = [];
      for (let r10 of t10) {
        if (r10.startLineNumber !== r10.endLineNumber) return null;
        n10.push(new k4(e11.getLineContent(r10.startLineNumber), r10.startColumn - 1, r10.endColumn - 1));
      }
      return n10;
    }
    constructor(t10, n10) {
      this._original = e10._capture(t10, n10);
    }
    deduceOutcome(t10, n10) {
      if (!this._original) return null;
      let r10 = e10._capture(t10, n10);
      if (!r10 || this._original.length !== r10.length) return null;
      let i10 = [];
      for (let t11 = 0, n11 = this._original.length; t11 < n11; t11++) i10.push(e10._deduceOutcome(this._original[t11], r10[t11]));
      return i10;
    }
    static _deduceOutcome(e11, t10) {
      let n10 = Math.min(e11.startSelection, t10.startSelection, Rs(e11.text, t10.text)), r10 = Math.min(e11.text.length - e11.endSelection, t10.text.length - t10.endSelection, zs(e11.text, t10.text)), i10 = e11.text.substring(n10, e11.text.length - r10), a10 = t10.text.substring(n10, t10.text.length - r10);
      return new w1(i10, e11.startSelection - n10, e11.endSelection - n10, a10, t10.startSelection - n10, t10.endSelection - n10);
    }
  }, j4 = class {
    constructor() {
      this._hasPending = false, this._inserts = [], this._changes = [], this._removes = [];
    }
    insert(e10) {
      this._hasPending = true, this._inserts.push(e10);
    }
    change(e10) {
      this._hasPending = true, this._changes.push(e10);
    }
    remove(e10) {
      this._hasPending = true, this._removes.push(e10);
    }
    mustCommit() {
      return this._hasPending;
    }
    commit(e10) {
      if (!this._hasPending) return;
      let t10 = this._inserts, n10 = this._changes, r10 = this._removes;
      this._hasPending = false, this._inserts = [], this._changes = [], this._removes = [], e10._commitPendingChanges(t10, n10, r10);
    }
  }, M4 = class {
    constructor(e10, t10, n10, r10, i10) {
      this.id = e10, this.afterLineNumber = t10, this.ordinal = n10, this.height = r10, this.minWidth = i10, this.prefixSum = 0;
    }
  }, N4 = (_db = class {
    constructor(t10, n10, r10, i10) {
      this._instanceId = cc(++_db.INSTANCE_COUNT), this._pendingChanges = new j4(), this._lastWhitespaceId = 0, this._arr = [], this._prefixSumValidIndex = -1, this._minWidth = -1, this._lineCount = t10, this._lineHeight = n10, this._paddingTop = r10, this._paddingBottom = i10;
    }
    static findInsertionIndex(e10, t10, n10) {
      let r10 = 0, i10 = e10.length;
      for (; r10 < i10; ) {
        let a10 = r10 + i10 >>> 1;
        t10 === e10[a10].afterLineNumber ? n10 < e10[a10].ordinal ? i10 = a10 : r10 = a10 + 1 : t10 < e10[a10].afterLineNumber ? i10 = a10 : r10 = a10 + 1;
      }
      return r10;
    }
    setLineHeight(e10) {
      this._checkPendingChanges(), this._lineHeight = e10;
    }
    setPadding(e10, t10) {
      this._paddingTop = e10, this._paddingBottom = t10;
    }
    onFlushed(e10) {
      this._checkPendingChanges(), this._lineCount = e10;
    }
    changeWhitespace(e10) {
      let t10 = false;
      try {
        let n10 = {
          insertWhitespace: (e11, n11, r10, i10) => {
            t10 = true, e11 |= 0, n11 |= 0, r10 |= 0, i10 |= 0;
            let a10 = this._instanceId + ++this._lastWhitespaceId;
            return this._pendingChanges.insert(new M4(a10, e11, n11, r10, i10)), a10;
          },
          changeOneWhitespace: (e11, n11, r10) => {
            t10 = true, n11 |= 0, r10 |= 0, this._pendingChanges.change({
              id: e11,
              newAfterLineNumber: n11,
              newHeight: r10
            });
          },
          removeWhitespace: (e11) => {
            t10 = true, this._pendingChanges.remove({
              id: e11
            });
          }
        };
        e10(n10);
      } finally {
        this._pendingChanges.commit(this);
      }
      return t10;
    }
    _commitPendingChanges(e10, t10, n10) {
      if ((e10.length > 0 || n10.length > 0) && (this._minWidth = -1), e10.length + t10.length + n10.length <= 1) {
        for (let t11 of e10) this._insertWhitespace(t11);
        for (let e11 of t10) this._changeOneWhitespace(e11.id, e11.newAfterLineNumber, e11.newHeight);
        for (let e11 of n10) {
          let t11 = this._findWhitespaceIndex(e11.id);
          if (t11 === -1) continue;
          this._removeWhitespace(t11);
        }
        return;
      }
      let r10 = /* @__PURE__ */ new Set();
      for (let e11 of n10) r10.add(e11.id);
      let i10 = /* @__PURE__ */ new Map();
      for (let e11 of t10) i10.set(e11.id, e11);
      let a10 = (e11) => {
        let t11 = [];
        for (let n11 of e11) {
          if (r10.has(n11.id)) continue;
          if (i10.has(n11.id)) {
            let e12 = i10.get(n11.id);
            n11.afterLineNumber = e12.newAfterLineNumber, n11.height = e12.newHeight;
          }
          t11.push(n11);
        }
        return t11;
      }, o10 = a10(this._arr).concat(a10(e10));
      o10.sort((e11, t11) => e11.afterLineNumber === t11.afterLineNumber ? e11.ordinal - t11.ordinal : e11.afterLineNumber - t11.afterLineNumber), this._arr = o10, this._prefixSumValidIndex = -1;
    }
    _checkPendingChanges() {
      this._pendingChanges.mustCommit() && this._pendingChanges.commit(this);
    }
    _insertWhitespace(t10) {
      let n10 = _db.findInsertionIndex(this._arr, t10.afterLineNumber, t10.ordinal);
      this._arr.splice(n10, 0, t10), this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, n10 - 1);
    }
    _findWhitespaceIndex(e10) {
      let t10 = this._arr;
      for (let n10 = 0, r10 = t10.length; n10 < r10; n10++) if (t10[n10].id === e10) return n10;
      return -1;
    }
    _changeOneWhitespace(e10, t10, n10) {
      let r10 = this._findWhitespaceIndex(e10);
      if (r10 !== -1 && (this._arr[r10].height !== n10 && (this._arr[r10].height = n10, this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, r10 - 1)), this._arr[r10].afterLineNumber !== t10)) {
        let e11 = this._arr[r10];
        this._removeWhitespace(r10), e11.afterLineNumber = t10, this._insertWhitespace(e11);
      }
    }
    _removeWhitespace(e10) {
      this._arr.splice(e10, 1), this._prefixSumValidIndex = Math.min(this._prefixSumValidIndex, e10 - 1);
    }
    onLinesDeleted(e10, t10) {
      this._checkPendingChanges(), e10 |= 0, t10 |= 0, this._lineCount -= t10 - e10 + 1;
      for (let n10 = 0, r10 = this._arr.length; n10 < r10; n10++) {
        let r11 = this._arr[n10].afterLineNumber;
        e10 <= r11 && r11 <= t10 ? this._arr[n10].afterLineNumber = e10 - 1 : r11 > t10 && (this._arr[n10].afterLineNumber -= t10 - e10 + 1);
      }
    }
    onLinesInserted(e10, t10) {
      this._checkPendingChanges(), e10 |= 0, t10 |= 0, this._lineCount += t10 - e10 + 1;
      for (let n10 = 0, r10 = this._arr.length; n10 < r10; n10++) {
        let r11 = this._arr[n10].afterLineNumber;
        e10 <= r11 && (this._arr[n10].afterLineNumber += t10 - e10 + 1);
      }
    }
    getWhitespacesTotalHeight() {
      return this._checkPendingChanges(), this._arr.length === 0 ? 0 : this.getWhitespacesAccumulatedHeight(this._arr.length - 1);
    }
    getWhitespacesAccumulatedHeight(e10) {
      this._checkPendingChanges(), e10 |= 0;
      let t10 = Math.max(0, this._prefixSumValidIndex + 1);
      t10 === 0 && (this._arr[0].prefixSum = this._arr[0].height, t10++);
      for (let n10 = t10; n10 <= e10; n10++) this._arr[n10].prefixSum = this._arr[n10 - 1].prefixSum + this._arr[n10].height;
      return this._prefixSumValidIndex = Math.max(this._prefixSumValidIndex, e10), this._arr[e10].prefixSum;
    }
    getLinesTotalHeight() {
      this._checkPendingChanges();
      let e10 = this._lineHeight * this._lineCount, t10 = this.getWhitespacesTotalHeight();
      return e10 + t10 + this._paddingTop + this._paddingBottom;
    }
    getWhitespaceAccumulatedHeightBeforeLineNumber(e10) {
      this._checkPendingChanges(), e10 |= 0;
      let t10 = this._findLastWhitespaceBeforeLineNumber(e10);
      return t10 === -1 ? 0 : this.getWhitespacesAccumulatedHeight(t10);
    }
    _findLastWhitespaceBeforeLineNumber(e10) {
      e10 |= 0;
      let t10 = this._arr, n10 = 0, r10 = t10.length - 1;
      for (; n10 <= r10; ) {
        let i10 = r10 - n10 | 0, a10 = i10 / 2 | 0, o10 = n10 + a10 | 0;
        if (t10[o10].afterLineNumber < e10) {
          if (o10 + 1 >= t10.length || t10[o10 + 1].afterLineNumber >= e10) return o10;
          n10 = o10 + 1 | 0;
        } else r10 = o10 - 1 | 0;
      }
      return -1;
    }
    _findFirstWhitespaceAfterLineNumber(e10) {
      e10 |= 0;
      let t10 = this._findLastWhitespaceBeforeLineNumber(e10), n10 = t10 + 1;
      return n10 < this._arr.length ? n10 : -1;
    }
    getFirstWhitespaceIndexAfterLineNumber(e10) {
      return this._checkPendingChanges(), e10 |= 0, this._findFirstWhitespaceAfterLineNumber(e10);
    }
    getVerticalOffsetForLineNumber(e10, t10 = false) {
      this._checkPendingChanges(), e10 |= 0;
      let n10;
      n10 = e10 > 1 ? this._lineHeight * (e10 - 1) : 0;
      let r10 = this.getWhitespaceAccumulatedHeightBeforeLineNumber(e10 - (t10 ? 1 : 0));
      return n10 + r10 + this._paddingTop;
    }
    getVerticalOffsetAfterLineNumber(e10, t10 = false) {
      this._checkPendingChanges(), e10 |= 0;
      let n10 = this._lineHeight * e10, r10 = this.getWhitespaceAccumulatedHeightBeforeLineNumber(e10 + (t10 ? 1 : 0));
      return n10 + r10 + this._paddingTop;
    }
    getWhitespaceMinWidth() {
      if (this._checkPendingChanges(), this._minWidth === -1) {
        let e10 = 0;
        for (let t10 = 0, n10 = this._arr.length; t10 < n10; t10++) e10 = Math.max(e10, this._arr[t10].minWidth);
        this._minWidth = e10;
      }
      return this._minWidth;
    }
    isAfterLines(e10) {
      this._checkPendingChanges();
      let t10 = this.getLinesTotalHeight();
      return e10 > t10;
    }
    isInTopPadding(e10) {
      return this._paddingTop === 0 ? false : (this._checkPendingChanges(), e10 < this._paddingTop);
    }
    isInBottomPadding(e10) {
      if (this._paddingBottom === 0) return false;
      this._checkPendingChanges();
      let t10 = this.getLinesTotalHeight();
      return e10 >= t10 - this._paddingBottom;
    }
    getLineNumberAtOrAfterVerticalOffset(e10) {
      if (this._checkPendingChanges(), e10 |= 0, e10 < 0) return 1;
      let t10 = this._lineCount | 0, n10 = this._lineHeight, r10 = 1, i10 = t10;
      for (; r10 < i10; ) {
        let t11 = (r10 + i10) / 2 | 0, a10 = this.getVerticalOffsetForLineNumber(t11) | 0;
        if (e10 >= a10 + n10) r10 = t11 + 1;
        else if (e10 >= a10) return t11;
        else i10 = t11;
      }
      return r10 > t10 ? t10 : r10;
    }
    getLinesViewportData(e10, t10) {
      this._checkPendingChanges(), e10 |= 0, t10 |= 0;
      let n10 = this._lineHeight, r10 = this.getLineNumberAtOrAfterVerticalOffset(e10) | 0, i10 = this.getVerticalOffsetForLineNumber(r10) | 0, a10 = this._lineCount | 0, o10 = this.getFirstWhitespaceIndexAfterLineNumber(r10) | 0, s10 = this.getWhitespacesCount() | 0, c10, l10;
      o10 === -1 ? (o10 = s10, l10 = a10 + 1, c10 = 0) : (l10 = this.getAfterLineNumberForWhitespaceIndex(o10) | 0, c10 = this.getHeightForWhitespaceIndex(o10) | 0);
      let u10 = i10, d10 = u10, f10 = 5e5, p10 = 0;
      i10 >= f10 && (p10 = Math.floor(i10 / f10) * f10, p10 = Math.floor(p10 / n10) * n10, d10 -= p10);
      let m10 = [], h10 = e10 + (t10 - e10) / 2, g10 = -1;
      for (let e11 = r10; e11 <= a10; e11++) {
        if (g10 === -1) {
          let t11 = u10, r11 = u10 + n10;
          (t11 <= h10 && h10 < r11 || t11 > h10) && (g10 = e11);
        }
        for (u10 += n10, m10[e11 - r10] = d10, d10 += n10; l10 === e11; ) d10 += c10, u10 += c10, o10++, o10 >= s10 ? l10 = a10 + 1 : (l10 = this.getAfterLineNumberForWhitespaceIndex(o10) | 0, c10 = this.getHeightForWhitespaceIndex(o10) | 0);
        if (u10 >= t10) {
          a10 = e11;
          break;
        }
      }
      g10 === -1 && (g10 = a10);
      let _10 = this.getVerticalOffsetForLineNumber(a10) | 0, v10 = r10, y10 = a10;
      return v10 < y10 && i10 < e10 && v10++, v10 < y10 && _10 + n10 > t10 && y10--, {
        bigNumbersDelta: p10,
        startLineNumber: r10,
        endLineNumber: a10,
        relativeVerticalOffset: m10,
        centeredLineNumber: g10,
        completelyVisibleStartLineNumber: v10,
        completelyVisibleEndLineNumber: y10,
        lineHeight: this._lineHeight
      };
    }
    getVerticalOffsetForWhitespaceIndex(e10) {
      this._checkPendingChanges(), e10 |= 0;
      let t10 = this.getAfterLineNumberForWhitespaceIndex(e10), n10;
      n10 = t10 >= 1 ? this._lineHeight * t10 : 0;
      let r10;
      return r10 = e10 > 0 ? this.getWhitespacesAccumulatedHeight(e10 - 1) : 0, n10 + r10 + this._paddingTop;
    }
    getWhitespaceIndexAtOrAfterVerticallOffset(e10) {
      this._checkPendingChanges(), e10 |= 0;
      let t10 = 0, n10 = this.getWhitespacesCount() - 1;
      if (n10 < 0) return -1;
      let r10 = this.getVerticalOffsetForWhitespaceIndex(n10), i10 = this.getHeightForWhitespaceIndex(n10);
      if (e10 >= r10 + i10) return -1;
      for (; t10 < n10; ) {
        let r11 = Math.floor((t10 + n10) / 2), i11 = this.getVerticalOffsetForWhitespaceIndex(r11), a10 = this.getHeightForWhitespaceIndex(r11);
        if (e10 >= i11 + a10) t10 = r11 + 1;
        else if (e10 >= i11) return r11;
        else n10 = r11;
      }
      return t10;
    }
    getWhitespaceAtVerticalOffset(e10) {
      this._checkPendingChanges(), e10 |= 0;
      let t10 = this.getWhitespaceIndexAtOrAfterVerticallOffset(e10);
      if (t10 < 0 || t10 >= this.getWhitespacesCount()) return null;
      let n10 = this.getVerticalOffsetForWhitespaceIndex(t10);
      if (n10 > e10) return null;
      let r10 = this.getHeightForWhitespaceIndex(t10), i10 = this.getIdForWhitespaceIndex(t10), a10 = this.getAfterLineNumberForWhitespaceIndex(t10);
      return {
        id: i10,
        afterLineNumber: a10,
        verticalOffset: n10,
        height: r10
      };
    }
    getWhitespaceViewportData(e10, t10) {
      this._checkPendingChanges(), e10 |= 0, t10 |= 0;
      let n10 = this.getWhitespaceIndexAtOrAfterVerticallOffset(e10), r10 = this.getWhitespacesCount() - 1;
      if (n10 < 0) return [];
      let i10 = [];
      for (let e11 = n10; e11 <= r10; e11++) {
        let n11 = this.getVerticalOffsetForWhitespaceIndex(e11), r11 = this.getHeightForWhitespaceIndex(e11);
        if (n11 >= t10) break;
        i10.push({
          id: this.getIdForWhitespaceIndex(e11),
          afterLineNumber: this.getAfterLineNumberForWhitespaceIndex(e11),
          verticalOffset: n11,
          height: r11
        });
      }
      return i10;
    }
    getWhitespaces() {
      return this._checkPendingChanges(), this._arr.slice(0);
    }
    getWhitespacesCount() {
      return this._checkPendingChanges(), this._arr.length;
    }
    getIdForWhitespaceIndex(e10) {
      return this._checkPendingChanges(), e10 |= 0, this._arr[e10].id;
    }
    getAfterLineNumberForWhitespaceIndex(e10) {
      return this._checkPendingChanges(), e10 |= 0, this._arr[e10].afterLineNumber;
    }
    getHeightForWhitespaceIndex(e10) {
      return this._checkPendingChanges(), e10 |= 0, this._arr[e10].height;
    }
  }, _db.INSTANCE_COUNT = 0, _db);
  const P4 = 125;
  var F4 = class {
    constructor(e10, t10, n10, r10) {
      e10 |= 0, t10 |= 0, n10 |= 0, r10 |= 0, e10 < 0 && (e10 = 0), t10 < 0 && (t10 = 0), n10 < 0 && (n10 = 0), r10 < 0 && (r10 = 0), this.width = e10, this.contentWidth = t10, this.scrollWidth = Math.max(e10, t10), this.height = n10, this.contentHeight = r10, this.scrollHeight = Math.max(n10, r10);
    }
    equals(e10) {
      return this.width === e10.width && this.contentWidth === e10.contentWidth && this.height === e10.height && this.contentHeight === e10.contentHeight;
    }
  }, I4 = class extends j {
    constructor(e10, t10) {
      super(), this._onDidContentSizeChange = this._register(new N()), this.onDidContentSizeChange = this._onDidContentSizeChange.event, this._dimensions = new F4(0, 0, 0, 0), this._scrollable = this._register(new YE({
        forceIntegerValues: true,
        smoothScrollDuration: e10,
        scheduleAtNextAnimationFrame: t10
      })), this.onDidScroll = this._scrollable.onScroll;
    }
    getScrollable() {
      return this._scrollable;
    }
    setSmoothScrollDuration(e10) {
      this._scrollable.setSmoothScrollDuration(e10);
    }
    validateScrollPosition(e10) {
      return this._scrollable.validateScrollPosition(e10);
    }
    getScrollDimensions() {
      return this._dimensions;
    }
    setScrollDimensions(e10) {
      if (this._dimensions.equals(e10)) return;
      let t10 = this._dimensions;
      this._dimensions = e10, this._scrollable.setScrollDimensions({
        width: e10.width,
        scrollWidth: e10.scrollWidth,
        height: e10.height,
        scrollHeight: e10.scrollHeight
      }, true);
      let n10 = t10.contentWidth !== e10.contentWidth, r10 = t10.contentHeight !== e10.contentHeight;
      (n10 || r10) && this._onDidContentSizeChange.fire(new f4(t10.contentWidth, t10.contentHeight, e10.contentWidth, e10.contentHeight));
    }
    getFutureScrollPosition() {
      return this._scrollable.getFutureScrollPosition();
    }
    getCurrentScrollPosition() {
      return this._scrollable.getCurrentScrollPosition();
    }
    setScrollPositionNow(e10) {
      this._scrollable.setScrollPositionNow(e10);
    }
    setScrollPositionSmooth(e10) {
      this._scrollable.setScrollPositionSmooth(e10);
    }
    hasPendingScrollAnimation() {
      return this._scrollable.hasPendingScrollAnimation();
    }
  }, L4 = class extends j {
    constructor(e10, t10, n10) {
      super(), this._configuration = e10;
      let r10 = this._configuration.options, i10 = r10.get(146), a10 = r10.get(84);
      this._linesLayout = new N4(t10, r10.get(67), a10.top, a10.bottom), this._maxLineWidth = 0, this._overlayWidgetsMinWidth = 0, this._scrollable = this._register(new I4(0, n10)), this._configureSmoothScrollDuration(), this._scrollable.setScrollDimensions(new F4(i10.contentWidth, 0, i10.height, 0)), this.onDidScroll = this._scrollable.onDidScroll, this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange, this._updateHeight();
    }
    dispose() {
      super.dispose();
    }
    getScrollable() {
      return this._scrollable.getScrollable();
    }
    onHeightMaybeChanged() {
      this._updateHeight();
    }
    _configureSmoothScrollDuration() {
      this._scrollable.setSmoothScrollDuration(this._configuration.options.get(115) ? P4 : 0);
    }
    onConfigurationChanged(e10) {
      let t10 = this._configuration.options;
      if (e10.hasChanged(67) && this._linesLayout.setLineHeight(t10.get(67)), e10.hasChanged(84)) {
        let e11 = t10.get(84);
        this._linesLayout.setPadding(e11.top, e11.bottom);
      }
      if (e10.hasChanged(146)) {
        let e11 = t10.get(146), n10 = e11.contentWidth, r10 = e11.height, i10 = this._scrollable.getScrollDimensions(), a10 = i10.contentWidth;
        this._scrollable.setScrollDimensions(new F4(n10, i10.contentWidth, r10, this._getContentHeight(n10, r10, a10)));
      } else this._updateHeight();
      e10.hasChanged(115) && this._configureSmoothScrollDuration();
    }
    onFlushed(e10) {
      this._linesLayout.onFlushed(e10);
    }
    onLinesDeleted(e10, t10) {
      this._linesLayout.onLinesDeleted(e10, t10);
    }
    onLinesInserted(e10, t10) {
      this._linesLayout.onLinesInserted(e10, t10);
    }
    _getHorizontalScrollbarHeight(e10, t10) {
      let n10 = this._configuration.options, r10 = n10.get(104);
      return r10.horizontal === 2 || e10 >= t10 ? 0 : r10.horizontalScrollbarSize;
    }
    _getContentHeight(e10, t10, n10) {
      let r10 = this._configuration.options, i10 = this._linesLayout.getLinesTotalHeight();
      return r10.get(106) ? i10 += Math.max(0, t10 - r10.get(67) - r10.get(84).bottom) : r10.get(104).ignoreHorizontalScrollbarInContentHeight || (i10 += this._getHorizontalScrollbarHeight(e10, n10)), i10;
    }
    _updateHeight() {
      let e10 = this._scrollable.getScrollDimensions(), t10 = e10.width, n10 = e10.height, r10 = e10.contentWidth;
      this._scrollable.setScrollDimensions(new F4(t10, e10.contentWidth, n10, this._getContentHeight(t10, n10, r10)));
    }
    getCurrentViewport() {
      let e10 = this._scrollable.getScrollDimensions(), t10 = this._scrollable.getCurrentScrollPosition();
      return new jX(t10.scrollTop, t10.scrollLeft, e10.width, e10.height);
    }
    getFutureViewport() {
      let e10 = this._scrollable.getScrollDimensions(), t10 = this._scrollable.getFutureScrollPosition();
      return new jX(t10.scrollTop, t10.scrollLeft, e10.width, e10.height);
    }
    _computeContentWidth() {
      let e10 = this._configuration.options, t10 = this._maxLineWidth, n10 = e10.get(147), r10 = e10.get(50), i10 = e10.get(146);
      if (n10.isViewportWrapping) {
        let n11 = e10.get(73);
        return t10 > i10.contentWidth + r10.typicalHalfwidthCharacterWidth && n11.enabled && n11.side === `right` ? t10 + i10.verticalScrollbarWidth : t10;
      } else {
        let n11 = e10.get(105) * r10.typicalHalfwidthCharacterWidth, a10 = this._linesLayout.getWhitespaceMinWidth();
        return Math.max(t10 + n11 + i10.verticalScrollbarWidth, a10, this._overlayWidgetsMinWidth);
      }
    }
    setMaxLineWidth(e10) {
      this._maxLineWidth = e10, this._updateContentWidth();
    }
    setOverlayWidgetsMinWidth(e10) {
      this._overlayWidgetsMinWidth = e10, this._updateContentWidth();
    }
    _updateContentWidth() {
      let e10 = this._scrollable.getScrollDimensions();
      this._scrollable.setScrollDimensions(new F4(e10.width, this._computeContentWidth(), e10.height, e10.contentHeight)), this._updateHeight();
    }
    saveState() {
      let e10 = this._scrollable.getFutureScrollPosition(), t10 = e10.scrollTop, n10 = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(t10), r10 = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(n10);
      return {
        scrollTop: t10,
        scrollTopWithoutViewZones: t10 - r10,
        scrollLeft: e10.scrollLeft
      };
    }
    changeWhitespace(e10) {
      let t10 = this._linesLayout.changeWhitespace(e10);
      return t10 && this.onHeightMaybeChanged(), t10;
    }
    getVerticalOffsetForLineNumber(e10, t10 = false) {
      return this._linesLayout.getVerticalOffsetForLineNumber(e10, t10);
    }
    getVerticalOffsetAfterLineNumber(e10, t10 = false) {
      return this._linesLayout.getVerticalOffsetAfterLineNumber(e10, t10);
    }
    isAfterLines(e10) {
      return this._linesLayout.isAfterLines(e10);
    }
    isInTopPadding(e10) {
      return this._linesLayout.isInTopPadding(e10);
    }
    isInBottomPadding(e10) {
      return this._linesLayout.isInBottomPadding(e10);
    }
    getLineNumberAtVerticalOffset(e10) {
      return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(e10);
    }
    getWhitespaceAtVerticalOffset(e10) {
      return this._linesLayout.getWhitespaceAtVerticalOffset(e10);
    }
    getLinesViewportData() {
      let e10 = this.getCurrentViewport();
      return this._linesLayout.getLinesViewportData(e10.top, e10.top + e10.height);
    }
    getLinesViewportDataAtScrollTop(e10) {
      let t10 = this._scrollable.getScrollDimensions();
      return e10 + t10.height > t10.scrollHeight && (e10 = t10.scrollHeight - t10.height), e10 < 0 && (e10 = 0), this._linesLayout.getLinesViewportData(e10, e10 + t10.height);
    }
    getWhitespaceViewportData() {
      let e10 = this.getCurrentViewport();
      return this._linesLayout.getWhitespaceViewportData(e10.top, e10.top + e10.height);
    }
    getWhitespaces() {
      return this._linesLayout.getWhitespaces();
    }
    getContentWidth() {
      let e10 = this._scrollable.getScrollDimensions();
      return e10.contentWidth;
    }
    getScrollWidth() {
      let e10 = this._scrollable.getScrollDimensions();
      return e10.scrollWidth;
    }
    getContentHeight() {
      let e10 = this._scrollable.getScrollDimensions();
      return e10.contentHeight;
    }
    getScrollHeight() {
      let e10 = this._scrollable.getScrollDimensions();
      return e10.scrollHeight;
    }
    getCurrentScrollLeft() {
      let e10 = this._scrollable.getCurrentScrollPosition();
      return e10.scrollLeft;
    }
    getCurrentScrollTop() {
      let e10 = this._scrollable.getCurrentScrollPosition();
      return e10.scrollTop;
    }
    validateScrollPosition(e10) {
      return this._scrollable.validateScrollPosition(e10);
    }
    setScrollPosition(e10, t10) {
      t10 === 1 ? this._scrollable.setScrollPositionNow(e10) : this._scrollable.setScrollPositionSmooth(e10);
    }
    hasPendingScrollAnimation() {
      return this._scrollable.hasPendingScrollAnimation();
    }
    deltaScrollNow(e10, t10) {
      let n10 = this._scrollable.getCurrentScrollPosition();
      this._scrollable.setScrollPositionNow({
        scrollLeft: n10.scrollLeft + e10,
        scrollTop: n10.scrollTop + t10
      });
    }
  }, R4 = class {
    constructor(e10, t10, n10, r10, i10) {
      this.editorId = e10, this.model = t10, this.configuration = n10, this._linesCollection = r10, this._coordinatesConverter = i10, this._decorationsCache = /* @__PURE__ */ Object.create(null), this._cachedModelDecorationsResolver = null, this._cachedModelDecorationsResolverViewRange = null;
    }
    _clearCachedModelDecorationsResolver() {
      this._cachedModelDecorationsResolver = null, this._cachedModelDecorationsResolverViewRange = null;
    }
    dispose() {
      this._decorationsCache = /* @__PURE__ */ Object.create(null), this._clearCachedModelDecorationsResolver();
    }
    reset() {
      this._decorationsCache = /* @__PURE__ */ Object.create(null), this._clearCachedModelDecorationsResolver();
    }
    onModelDecorationsChanged() {
      this._decorationsCache = /* @__PURE__ */ Object.create(null), this._clearCachedModelDecorationsResolver();
    }
    onLineMappingChanged() {
      this._decorationsCache = /* @__PURE__ */ Object.create(null), this._clearCachedModelDecorationsResolver();
    }
    _getOrCreateViewModelDecoration(e10) {
      let t10 = e10.id, n10 = this._decorationsCache[t10];
      if (!n10) {
        let r10 = e10.range, i10 = e10.options, a10;
        if (i10.isWholeLine) {
          let e11 = this._coordinatesConverter.convertModelPositionToViewPosition(new P(r10.startLineNumber, 1), 0, false, true), t11 = this._coordinatesConverter.convertModelPositionToViewPosition(new P(r10.endLineNumber, this.model.getLineMaxColumn(r10.endLineNumber)), 1);
          a10 = new F(e11.lineNumber, e11.column, t11.lineNumber, t11.column);
        } else a10 = this._coordinatesConverter.convertModelRangeToViewRange(r10, 1);
        n10 = new LX(a10, i10), this._decorationsCache[t10] = n10;
      }
      return n10;
    }
    getMinimapDecorationsInRange(e10) {
      return this._getDecorationsInRange(e10, true, false).decorations;
    }
    getDecorationsViewportData(e10) {
      let t10 = this._cachedModelDecorationsResolver !== null;
      return t10 && (t10 = e10.equalsRange(this._cachedModelDecorationsResolverViewRange)), t10 || (this._cachedModelDecorationsResolver = this._getDecorationsInRange(e10, false, false), this._cachedModelDecorationsResolverViewRange = e10), this._cachedModelDecorationsResolver;
    }
    getInlineDecorationsOnLine(e10, t10 = false, n10 = false) {
      let r10 = new F(e10, this._linesCollection.getViewLineMinColumn(e10), e10, this._linesCollection.getViewLineMaxColumn(e10));
      return this._getDecorationsInRange(r10, t10, n10).inlineDecorations[0];
    }
    _getDecorationsInRange(e10, t10, n10) {
      let r10 = this._linesCollection.getDecorationsInRange(e10, this.editorId, Hn(this.configuration.options), t10, n10), i10 = e10.startLineNumber, a10 = e10.endLineNumber, o10 = [], s10 = 0, c10 = [];
      for (let e11 = i10; e11 <= a10; e11++) c10[e11 - i10] = [];
      for (let e11 = 0, t11 = r10.length; e11 < t11; e11++) {
        let t12 = r10[e11], n11 = t12.options;
        if (!z4(this.model, t12)) continue;
        let l10 = this._getOrCreateViewModelDecoration(t12), u10 = l10.range;
        if (o10[s10++] = l10, n11.inlineClassName) {
          let e12 = new FX(u10, n11.inlineClassName, n11.inlineClassNameAffectsLetterSpacing ? 3 : 0), t13 = Math.max(i10, u10.startLineNumber), r11 = Math.min(a10, u10.endLineNumber);
          for (let n12 = t13; n12 <= r11; n12++) c10[n12 - i10].push(e12);
        }
        if (n11.beforeContentClassName && i10 <= u10.startLineNumber && u10.startLineNumber <= a10) {
          let e12 = new FX(new F(u10.startLineNumber, u10.startColumn, u10.startLineNumber, u10.startColumn), n11.beforeContentClassName, 1);
          c10[u10.startLineNumber - i10].push(e12);
        }
        if (n11.afterContentClassName && i10 <= u10.endLineNumber && u10.endLineNumber <= a10) {
          let e12 = new FX(new F(u10.endLineNumber, u10.endColumn, u10.endLineNumber, u10.endColumn), n11.afterContentClassName, 2);
          c10[u10.endLineNumber - i10].push(e12);
        }
      }
      return {
        decorations: o10,
        inlineDecorations: c10
      };
    }
  };
  z4 = function(e10, t10) {
    return !(t10.options.hideInCommentTokens && B4(e10, t10) || t10.options.hideInStringTokens && V4(e10, t10));
  };
  B4 = function(e10, t10) {
    return H4(e10, t10.range, (e11) => e11 === 1);
  };
  V4 = function(e10, t10) {
    return H4(e10, t10.range, (e11) => e11 === 2);
  };
  function H4(e10, t10, n10) {
    for (let r10 = t10.startLineNumber; r10 <= t10.endLineNumber; r10++) {
      let i10 = e10.tokenization.getLineTokens(r10), a10 = r10 === t10.startLineNumber, o10 = r10 === t10.endLineNumber, s10 = a10 ? i10.findTokenIndexAtOffset(t10.startColumn - 1) : 0;
      for (; s10 < i10.getCount(); ) {
        if (o10) {
          let e12 = i10.getStartOffset(s10);
          if (e12 > t10.endColumn - 1) break;
        }
        let e11 = n10(i10.getStandardTokenType(s10));
        if (!e11) return false;
        s10++;
      }
    }
    return true;
  }
  function U4(e10, t10) {
    return e10 === null ? t10 ? G4.INSTANCE : K4.INSTANCE : new W4(e10, t10);
  }
  var W4 = class {
    constructor(e10, t10) {
      this._projectionData = e10, this._isVisible = t10;
    }
    isVisible() {
      return this._isVisible;
    }
    setVisible(e10) {
      return this._isVisible = e10, this;
    }
    getProjectionData() {
      return this._projectionData;
    }
    getViewLineCount() {
      return this._isVisible ? this._projectionData.getOutputLineCount() : 0;
    }
    getViewLineContent(e10, t10, n10) {
      this._assertVisible();
      let r10 = n10 > 0 ? this._projectionData.breakOffsets[n10 - 1] : 0, i10 = this._projectionData.breakOffsets[n10], a10;
      if (this._projectionData.injectionOffsets !== null) {
        let n11 = this._projectionData.injectionOffsets.map((e11, t11) => new BV(0, 0, e11 + 1, this._projectionData.injectionOptions[t11], 0)), o10 = BV.applyInjectedText(e10.getLineContent(t10), n11);
        a10 = o10.substring(r10, i10);
      } else a10 = e10.getValueInRange({
        startLineNumber: t10,
        startColumn: r10 + 1,
        endLineNumber: t10,
        endColumn: i10 + 1
      });
      return n10 > 0 && (a10 = J4(this._projectionData.wrappedTextIndentLength) + a10), a10;
    }
    getViewLineLength(e10, t10, n10) {
      return this._assertVisible(), this._projectionData.getLineLength(n10);
    }
    getViewLineMinColumn(e10, t10, n10) {
      return this._assertVisible(), this._projectionData.getMinOutputOffset(n10) + 1;
    }
    getViewLineMaxColumn(e10, t10, n10) {
      return this._assertVisible(), this._projectionData.getMaxOutputOffset(n10) + 1;
    }
    getViewLineData(e10, t10, n10) {
      let r10 = [];
      return this.getViewLinesData(e10, t10, n10, 1, 0, [
        true
      ], r10), r10[0];
    }
    getViewLinesData(e10, t10, n10, r10, i10, a10, o10) {
      this._assertVisible();
      let s10 = this._projectionData, c10 = s10.injectionOffsets, l10 = s10.injectionOptions, u10 = null;
      if (c10) {
        u10 = [];
        let e11 = 0, t11 = 0;
        for (let n11 = 0; n11 < s10.getOutputLineCount(); n11++) {
          let r11 = [];
          u10[n11] = r11;
          let i11 = n11 > 0 ? s10.breakOffsets[n11 - 1] : 0, a11 = s10.breakOffsets[n11];
          for (; t11 < c10.length; ) {
            let o11 = l10[t11].content.length, u11 = c10[t11] + e11, d11 = u11 + o11;
            if (u11 > a11) break;
            if (i11 < d11) {
              let e12 = l10[t11];
              if (e12.inlineClassName) {
                let t12 = n11 > 0 ? s10.wrappedTextIndentLength : 0, o12 = t12 + Math.max(u11 - i11, 0), c11 = t12 + Math.min(d11 - i11, a11 - i11);
                o12 !== c11 && r11.push(new IX(o12, c11, e12.inlineClassName, e12.inlineClassNameAffectsLetterSpacing));
              }
            }
            if (d11 <= a11) e11 += o11, t11++;
            else break;
          }
        }
      }
      let d10;
      d10 = c10 ? e10.tokenization.getLineTokens(t10).withInserted(c10.map((e11, t11) => ({
        offset: e11,
        text: l10[t11].content,
        tokenMetadata: CA.defaultTokenMetadata
      }))) : e10.tokenization.getLineTokens(t10);
      for (let e11 = n10; e11 < n10 + r10; e11++) {
        let t11 = i10 + e11 - n10;
        if (!a10[t11]) {
          o10[t11] = null;
          continue;
        }
        o10[t11] = this._getViewLineData(d10, u10 ? u10[e11] : null, e11);
      }
    }
    _getViewLineData(e10, t10, n10) {
      this._assertVisible();
      let r10 = this._projectionData, i10 = n10 > 0 ? r10.wrappedTextIndentLength : 0, a10 = n10 > 0 ? r10.breakOffsets[n10 - 1] : 0, o10 = r10.breakOffsets[n10], s10 = e10.sliceAndInflate(a10, o10, i10), c10 = s10.getLineContent();
      n10 > 0 && (c10 = J4(r10.wrappedTextIndentLength) + c10);
      let l10 = this._projectionData.getMinOutputOffset(n10) + 1, u10 = c10.length + 1, d10 = n10 + 1 < this.getViewLineCount(), f10 = n10 === 0 ? 0 : r10.breakOffsetsVisibleColumn[n10 - 1];
      return new NX(c10, d10, l10, u10, f10, s10, t10);
    }
    getModelColumnOfViewPosition(e10, t10) {
      return this._assertVisible(), this._projectionData.translateToInputOffset(e10, t10 - 1) + 1;
    }
    getViewPositionOfModelPosition(e10, t10, n10 = 2) {
      this._assertVisible();
      let r10 = this._projectionData.translateToOutputPosition(t10 - 1, n10);
      return r10.toPosition(e10);
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      this._assertVisible();
      let n10 = this._projectionData.translateToOutputPosition(t10 - 1);
      return e10 + n10.outputLineIndex;
    }
    normalizePosition(e10, t10, n10) {
      let r10 = t10.lineNumber - e10, i10 = this._projectionData.normalizeOutputPosition(e10, t10.column - 1, n10), a10 = i10.toPosition(r10);
      return a10;
    }
    getInjectedTextAt(e10, t10) {
      return this._projectionData.getInjectedText(e10, t10 - 1);
    }
    _assertVisible() {
      if (!this._isVisible) throw Error(`Not supported`);
    }
  }, G4 = (_eb = class {
    constructor() {
    }
    isVisible() {
      return true;
    }
    setVisible(e10) {
      return e10 ? this : K4.INSTANCE;
    }
    getProjectionData() {
      return null;
    }
    getViewLineCount() {
      return 1;
    }
    getViewLineContent(e10, t10, n10) {
      return e10.getLineContent(t10);
    }
    getViewLineLength(e10, t10, n10) {
      return e10.getLineLength(t10);
    }
    getViewLineMinColumn(e10, t10, n10) {
      return e10.getLineMinColumn(t10);
    }
    getViewLineMaxColumn(e10, t10, n10) {
      return e10.getLineMaxColumn(t10);
    }
    getViewLineData(e10, t10, n10) {
      let r10 = e10.tokenization.getLineTokens(t10), i10 = r10.getLineContent();
      return new NX(i10, false, 1, i10.length + 1, 0, r10.inflate(), null);
    }
    getViewLinesData(e10, t10, n10, r10, i10, a10, o10) {
      if (!a10[i10]) {
        o10[i10] = null;
        return;
      }
      o10[i10] = this.getViewLineData(e10, t10, 0);
    }
    getModelColumnOfViewPosition(e10, t10) {
      return t10;
    }
    getViewPositionOfModelPosition(e10, t10) {
      return new P(e10, t10);
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      return e10;
    }
    normalizePosition(e10, t10, n10) {
      return t10;
    }
    getInjectedTextAt(e10, t10) {
      return null;
    }
  }, _eb.INSTANCE = new _eb(), _eb), K4 = (_fb = class {
    constructor() {
    }
    isVisible() {
      return false;
    }
    setVisible(e10) {
      return e10 ? G4.INSTANCE : this;
    }
    getProjectionData() {
      return null;
    }
    getViewLineCount() {
      return 0;
    }
    getViewLineContent(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getViewLineLength(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getViewLineMinColumn(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getViewLineMaxColumn(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getViewLineData(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getViewLinesData(e10, t10, n10, r10, i10, a10, o10) {
      throw Error(`Not supported`);
    }
    getModelColumnOfViewPosition(e10, t10) {
      throw Error(`Not supported`);
    }
    getViewPositionOfModelPosition(e10, t10) {
      throw Error(`Not supported`);
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      throw Error(`Not supported`);
    }
    normalizePosition(e10, t10, n10) {
      throw Error(`Not supported`);
    }
    getInjectedTextAt(e10, t10) {
      throw Error(`Not supported`);
    }
  }, _fb.INSTANCE = new _fb(), _fb);
  const q4 = [
    ``
  ];
  function J4(e10) {
    if (e10 >= q4.length) for (let t10 = 1; t10 <= e10; t10++) q4[t10] = Y4(t10);
    return q4[e10];
  }
  function Y4(e10) {
    return Array(e10 + 1).join(` `);
  }
  var X4 = class {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      this._editorId = e10, this.model = t10, this._validModelVersionId = -1, this._domLineBreaksComputerFactory = n10, this._monospaceLineBreaksComputerFactory = r10, this.fontInfo = i10, this.tabSize = a10, this.wrappingStrategy = o10, this.wrappingColumn = s10, this.wrappingIndent = c10, this.wordBreak = l10, this._constructLines(true, null);
    }
    dispose() {
      this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);
    }
    createCoordinatesConverter() {
      return new e3(this);
    }
    _constructLines(e10, t10) {
      this.modelLineProjections = [], e10 && (this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []));
      let n10 = this.model.getLinesContent(), r10 = this.model.getInjectedTextDecorations(this._editorId), i10 = n10.length, a10 = this.createLineBreaksComputer(), o10 = new me(BV.fromDecorations(r10));
      for (let e11 = 0; e11 < i10; e11++) {
        let r11 = o10.takeWhile((t11) => t11.lineNumber === e11 + 1);
        a10.addRequest(n10[e11], r11, t10 ? t10[e11] : null);
      }
      let s10 = a10.finalize(), c10 = [], l10 = this.hiddenAreasDecorationIds.map((e11) => this.model.getDecorationRange(e11)).sort(F.compareRangesUsingStarts), u10 = 1, d10 = 0, f10 = -1, p10 = f10 + 1 < l10.length ? d10 + 1 : i10 + 2;
      for (let e11 = 0; e11 < i10; e11++) {
        let t11 = e11 + 1;
        t11 === p10 && (f10++, u10 = l10[f10].startLineNumber, d10 = l10[f10].endLineNumber, p10 = f10 + 1 < l10.length ? d10 + 1 : i10 + 2);
        let n11 = t11 >= u10 && t11 <= d10, r11 = U4(s10[e11], !n11);
        c10[e11] = r11.getViewLineCount(), this.modelLineProjections[e11] = r11;
      }
      this._validModelVersionId = this.model.getVersionId(), this.projectedModelLineLineCounts = new gb(c10);
    }
    getHiddenAreas() {
      return this.hiddenAreasDecorationIds.map((e10) => this.model.getDecorationRange(e10));
    }
    setHiddenAreas(e10) {
      let t10 = e10.map((e11) => this.model.validateRange(e11)), n10 = Z4(t10), r10 = this.hiddenAreasDecorationIds.map((e11) => this.model.getDecorationRange(e11)).sort(F.compareRangesUsingStarts);
      if (n10.length === r10.length) {
        let e11 = false;
        for (let t11 = 0; t11 < n10.length; t11++) if (!n10[t11].equalsRange(r10[t11])) {
          e11 = true;
          break;
        }
        if (!e11) return false;
      }
      let i10 = n10.map((e11) => ({
        range: e11,
        options: _H.EMPTY
      }));
      this.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, i10);
      let a10 = n10, o10 = 1, s10 = 0, c10 = -1, l10 = c10 + 1 < a10.length ? s10 + 1 : this.modelLineProjections.length + 2, u10 = false;
      for (let e11 = 0; e11 < this.modelLineProjections.length; e11++) {
        let t11 = e11 + 1;
        t11 === l10 && (c10++, o10 = a10[c10].startLineNumber, s10 = a10[c10].endLineNumber, l10 = c10 + 1 < a10.length ? s10 + 1 : this.modelLineProjections.length + 2);
        let n11 = false;
        if (t11 >= o10 && t11 <= s10 ? this.modelLineProjections[e11].isVisible() && (this.modelLineProjections[e11] = this.modelLineProjections[e11].setVisible(false), n11 = true) : (u10 = true, this.modelLineProjections[e11].isVisible() || (this.modelLineProjections[e11] = this.modelLineProjections[e11].setVisible(true), n11 = true)), n11) {
          let t12 = this.modelLineProjections[e11].getViewLineCount();
          this.projectedModelLineLineCounts.setValue(e11, t12);
        }
      }
      return u10 || this.setHiddenAreas([]), true;
    }
    modelPositionIsVisible(e10, t10) {
      return e10 < 1 || e10 > this.modelLineProjections.length ? false : this.modelLineProjections[e10 - 1].isVisible();
    }
    getModelLineViewLineCount(e10) {
      return e10 < 1 || e10 > this.modelLineProjections.length ? 1 : this.modelLineProjections[e10 - 1].getViewLineCount();
    }
    setTabSize(e10) {
      return this.tabSize === e10 ? false : (this.tabSize = e10, this._constructLines(false, null), true);
    }
    setWrappingSettings(e10, t10, n10, r10, i10) {
      let a10 = this.fontInfo.equals(e10), o10 = this.wrappingStrategy === t10, s10 = this.wrappingColumn === n10, c10 = this.wrappingIndent === r10, l10 = this.wordBreak === i10;
      if (a10 && o10 && s10 && c10 && l10) return false;
      let u10 = a10 && o10 && !s10 && c10 && l10;
      this.fontInfo = e10, this.wrappingStrategy = t10, this.wrappingColumn = n10, this.wrappingIndent = r10, this.wordBreak = i10;
      let d10 = null;
      if (u10) {
        d10 = [];
        for (let e11 = 0, t11 = this.modelLineProjections.length; e11 < t11; e11++) d10[e11] = this.modelLineProjections[e11].getProjectionData();
      }
      return this._constructLines(false, d10), true;
    }
    createLineBreaksComputer() {
      let e10 = this.wrappingStrategy === `advanced` ? this._domLineBreaksComputerFactory : this._monospaceLineBreaksComputerFactory;
      return e10.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);
    }
    onModelFlushed() {
      this._constructLines(true, null);
    }
    onModelLinesDeleted(e10, t10, n10) {
      if (!e10 || e10 <= this._validModelVersionId) return null;
      let r10 = t10 === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(t10 - 1) + 1, i10 = this.projectedModelLineLineCounts.getPrefixSum(n10);
      return this.modelLineProjections.splice(t10 - 1, n10 - t10 + 1), this.projectedModelLineLineCounts.removeValues(t10 - 1, n10 - t10 + 1), new n4(r10, i10);
    }
    onModelLinesInserted(e10, t10, n10, r10) {
      if (!e10 || e10 <= this._validModelVersionId) return null;
      let i10 = t10 > 2 && !this.modelLineProjections[t10 - 2].isVisible(), a10 = t10 === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(t10 - 1) + 1, o10 = 0, s10 = [], c10 = [];
      for (let e11 = 0, t11 = r10.length; e11 < t11; e11++) {
        let t12 = U4(r10[e11], !i10);
        s10.push(t12);
        let n11 = t12.getViewLineCount();
        o10 += n11, c10[e11] = n11;
      }
      return this.modelLineProjections = this.modelLineProjections.slice(0, t10 - 1).concat(s10).concat(this.modelLineProjections.slice(t10 - 1)), this.projectedModelLineLineCounts.insertValues(t10 - 1, c10), new r4(a10, a10 + o10 - 1);
    }
    onModelLineChanged(e10, t10, n10) {
      if (e10 !== null && e10 <= this._validModelVersionId) return [
        false,
        null,
        null,
        null
      ];
      let r10 = t10 - 1, i10 = this.modelLineProjections[r10].getViewLineCount(), a10 = this.modelLineProjections[r10].isVisible(), o10 = U4(n10, a10);
      this.modelLineProjections[r10] = o10;
      let s10 = this.modelLineProjections[r10].getViewLineCount(), c10 = false, l10 = 0, u10 = -1, d10 = 0, f10 = -1, p10 = 0, m10 = -1;
      i10 > s10 ? (l10 = this.projectedModelLineLineCounts.getPrefixSum(t10 - 1) + 1, u10 = l10 + s10 - 1, p10 = u10 + 1, m10 = p10 + (i10 - s10) - 1, c10 = true) : i10 < s10 ? (l10 = this.projectedModelLineLineCounts.getPrefixSum(t10 - 1) + 1, u10 = l10 + i10 - 1, d10 = u10 + 1, f10 = d10 + (s10 - i10) - 1, c10 = true) : (l10 = this.projectedModelLineLineCounts.getPrefixSum(t10 - 1) + 1, u10 = l10 + s10 - 1), this.projectedModelLineLineCounts.setValue(r10, s10);
      let h10 = l10 <= u10 ? new t4(l10, u10 - l10 + 1) : null, g10 = d10 <= f10 ? new r4(d10, f10) : null, _10 = p10 <= m10 ? new n4(p10, m10) : null;
      return [
        c10,
        h10,
        g10,
        _10
      ];
    }
    acceptVersionId(e10) {
      this._validModelVersionId = e10, this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible() && this.setHiddenAreas([]);
    }
    getViewLineCount() {
      return this.projectedModelLineLineCounts.getTotalSum();
    }
    _toValidViewLineNumber(e10) {
      if (e10 < 1) return 1;
      let t10 = this.getViewLineCount();
      return e10 > t10 ? t10 : e10 | 0;
    }
    getActiveIndentGuide(e10, t10, n10) {
      e10 = this._toValidViewLineNumber(e10), t10 = this._toValidViewLineNumber(t10), n10 = this._toValidViewLineNumber(n10);
      let r10 = this.convertViewPositionToModelPosition(e10, this.getViewLineMinColumn(e10)), i10 = this.convertViewPositionToModelPosition(t10, this.getViewLineMinColumn(t10)), a10 = this.convertViewPositionToModelPosition(n10, this.getViewLineMinColumn(n10)), o10 = this.model.guides.getActiveIndentGuide(r10.lineNumber, i10.lineNumber, a10.lineNumber), s10 = this.convertModelPositionToViewPosition(o10.startLineNumber, 1), c10 = this.convertModelPositionToViewPosition(o10.endLineNumber, this.model.getLineMaxColumn(o10.endLineNumber));
      return {
        startLineNumber: s10.lineNumber,
        endLineNumber: c10.lineNumber,
        indent: o10.indent
      };
    }
    getViewLineInfo(e10) {
      e10 = this._toValidViewLineNumber(e10);
      let t10 = this.projectedModelLineLineCounts.getIndexOf(e10 - 1), n10 = t10.index, r10 = t10.remainder;
      return new Q4(n10 + 1, r10);
    }
    getMinColumnOfViewLine(e10) {
      return this.modelLineProjections[e10.modelLineNumber - 1].getViewLineMinColumn(this.model, e10.modelLineNumber, e10.modelLineWrappedLineIdx);
    }
    getMaxColumnOfViewLine(e10) {
      return this.modelLineProjections[e10.modelLineNumber - 1].getViewLineMaxColumn(this.model, e10.modelLineNumber, e10.modelLineWrappedLineIdx);
    }
    getModelStartPositionOfViewLine(e10) {
      let t10 = this.modelLineProjections[e10.modelLineNumber - 1], n10 = t10.getViewLineMinColumn(this.model, e10.modelLineNumber, e10.modelLineWrappedLineIdx), r10 = t10.getModelColumnOfViewPosition(e10.modelLineWrappedLineIdx, n10);
      return new P(e10.modelLineNumber, r10);
    }
    getModelEndPositionOfViewLine(e10) {
      let t10 = this.modelLineProjections[e10.modelLineNumber - 1], n10 = t10.getViewLineMaxColumn(this.model, e10.modelLineNumber, e10.modelLineWrappedLineIdx), r10 = t10.getModelColumnOfViewPosition(e10.modelLineWrappedLineIdx, n10);
      return new P(e10.modelLineNumber, r10);
    }
    getViewLineInfosGroupedByModelRanges(e10, t10) {
      let n10 = this.getViewLineInfo(e10), r10 = this.getViewLineInfo(t10), i10 = [], a10 = this.getModelStartPositionOfViewLine(n10), o10 = [];
      for (let e11 = n10.modelLineNumber; e11 <= r10.modelLineNumber; e11++) {
        let t11 = this.modelLineProjections[e11 - 1];
        if (t11.isVisible()) {
          let i11 = e11 === n10.modelLineNumber ? n10.modelLineWrappedLineIdx : 0, a11 = e11 === r10.modelLineNumber ? r10.modelLineWrappedLineIdx + 1 : t11.getViewLineCount();
          for (let t12 = i11; t12 < a11; t12++) o10.push(new Q4(e11, t12));
        }
        if (!t11.isVisible() && a10) {
          let t12 = new P(e11 - 1, this.model.getLineMaxColumn(e11 - 1) + 1), n11 = F.fromPositions(a10, t12);
          i10.push(new $4(n11, o10)), o10 = [], a10 = null;
        } else t11.isVisible() && !a10 && (a10 = new P(e11, 1));
      }
      if (a10) {
        let e11 = F.fromPositions(a10, this.getModelEndPositionOfViewLine(r10));
        i10.push(new $4(e11, o10));
      }
      return i10;
    }
    getViewLinesBracketGuides(e10, t10, n10, r10) {
      let i10 = n10 ? this.convertViewPositionToModelPosition(n10.lineNumber, n10.column) : null, a10 = [];
      for (let n11 of this.getViewLineInfosGroupedByModelRanges(e10, t10)) {
        let e11 = n11.modelRange.startLineNumber, t11 = this.model.guides.getLinesBracketGuides(e11, n11.modelRange.endLineNumber, i10, r10);
        for (let r11 of n11.viewLines) {
          let n12 = t11[r11.modelLineNumber - e11], i11 = n12.map((e12) => {
            if (e12.forWrappedLinesAfterColumn !== -1) {
              let t13 = this.modelLineProjections[r11.modelLineNumber - 1].getViewPositionOfModelPosition(0, e12.forWrappedLinesAfterColumn);
              if (t13.lineNumber >= r11.modelLineWrappedLineIdx) return;
            }
            if (e12.forWrappedLinesBeforeOrAtColumn !== -1) {
              let t13 = this.modelLineProjections[r11.modelLineNumber - 1].getViewPositionOfModelPosition(0, e12.forWrappedLinesBeforeOrAtColumn);
              if (t13.lineNumber < r11.modelLineWrappedLineIdx) return;
            }
            if (!e12.horizontalLine) return e12;
            let t12 = -1;
            if (e12.column !== -1) {
              let n14 = this.modelLineProjections[r11.modelLineNumber - 1].getViewPositionOfModelPosition(0, e12.column);
              if (n14.lineNumber === r11.modelLineWrappedLineIdx) t12 = n14.column;
              else if (n14.lineNumber < r11.modelLineWrappedLineIdx) t12 = this.getMinColumnOfViewLine(r11);
              else if (n14.lineNumber > r11.modelLineWrappedLineIdx) return;
            }
            let n13 = this.convertModelPositionToViewPosition(r11.modelLineNumber, e12.horizontalLine.endColumn), i12 = this.modelLineProjections[r11.modelLineNumber - 1].getViewPositionOfModelPosition(0, e12.horizontalLine.endColumn);
            return i12.lineNumber === r11.modelLineWrappedLineIdx ? new $z(e12.visibleColumn, t12, e12.className, new eB(e12.horizontalLine.top, n13.column), -1, -1) : i12.lineNumber < r11.modelLineWrappedLineIdx ? void 0 : e12.visibleColumn === -1 ? new $z(e12.visibleColumn, t12, e12.className, new eB(e12.horizontalLine.top, this.getMaxColumnOfViewLine(r11)), -1, -1) : void 0;
          });
          a10.push(i11.filter((e12) => !!e12));
        }
      }
      return a10;
    }
    getViewLinesIndentGuides(e10, t10) {
      e10 = this._toValidViewLineNumber(e10), t10 = this._toValidViewLineNumber(t10);
      let n10 = this.convertViewPositionToModelPosition(e10, this.getViewLineMinColumn(e10)), r10 = this.convertViewPositionToModelPosition(t10, this.getViewLineMaxColumn(t10)), i10 = [], a10 = [], o10 = [], s10 = n10.lineNumber - 1, c10 = r10.lineNumber - 1, l10 = null;
      for (let e11 = s10; e11 <= c10; e11++) {
        let t11 = this.modelLineProjections[e11];
        if (t11.isVisible()) {
          let r11 = t11.getViewLineNumberOfModelPosition(0, e11 === s10 ? n10.column : 1), i11 = t11.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(e11 + 1)), c11 = i11 - r11 + 1, u11 = 0;
          c11 > 1 && t11.getViewLineMinColumn(this.model, e11 + 1, i11) === 1 && (u11 = r11 === 0 ? 1 : 2), a10.push(c11), o10.push(u11), l10 === null && (l10 = new P(e11 + 1, 0));
        } else l10 !== null && (i10 = i10.concat(this.model.guides.getLinesIndentGuides(l10.lineNumber, e11)), l10 = null);
      }
      l10 !== null && (i10 = i10.concat(this.model.guides.getLinesIndentGuides(l10.lineNumber, r10.lineNumber)), l10 = null);
      let u10 = t10 - e10 + 1, d10 = Array(u10), f10 = 0;
      for (let e11 = 0, t11 = i10.length; e11 < t11; e11++) {
        let t12 = i10[e11], n11 = Math.min(u10 - f10, a10[e11]), r11 = o10[e11], s11;
        s11 = r11 === 2 ? 0 : r11 === 1 ? 1 : n11;
        for (let e12 = 0; e12 < n11; e12++) e12 === s11 && (t12 = 0), d10[f10++] = t12;
      }
      return d10;
    }
    getViewLineContent(e10) {
      let t10 = this.getViewLineInfo(e10);
      return this.modelLineProjections[t10.modelLineNumber - 1].getViewLineContent(this.model, t10.modelLineNumber, t10.modelLineWrappedLineIdx);
    }
    getViewLineLength(e10) {
      let t10 = this.getViewLineInfo(e10);
      return this.modelLineProjections[t10.modelLineNumber - 1].getViewLineLength(this.model, t10.modelLineNumber, t10.modelLineWrappedLineIdx);
    }
    getViewLineMinColumn(e10) {
      let t10 = this.getViewLineInfo(e10);
      return this.modelLineProjections[t10.modelLineNumber - 1].getViewLineMinColumn(this.model, t10.modelLineNumber, t10.modelLineWrappedLineIdx);
    }
    getViewLineMaxColumn(e10) {
      let t10 = this.getViewLineInfo(e10);
      return this.modelLineProjections[t10.modelLineNumber - 1].getViewLineMaxColumn(this.model, t10.modelLineNumber, t10.modelLineWrappedLineIdx);
    }
    getViewLineData(e10) {
      let t10 = this.getViewLineInfo(e10);
      return this.modelLineProjections[t10.modelLineNumber - 1].getViewLineData(this.model, t10.modelLineNumber, t10.modelLineWrappedLineIdx);
    }
    getViewLinesData(e10, t10, n10) {
      e10 = this._toValidViewLineNumber(e10), t10 = this._toValidViewLineNumber(t10);
      let r10 = this.projectedModelLineLineCounts.getIndexOf(e10 - 1), i10 = e10, a10 = r10.index, o10 = r10.remainder, s10 = [];
      for (let r11 = a10, c10 = this.model.getLineCount(); r11 < c10; r11++) {
        let c11 = this.modelLineProjections[r11];
        if (!c11.isVisible()) continue;
        let l10 = r11 === a10 ? o10 : 0, u10 = c11.getViewLineCount() - l10, d10 = false;
        if (i10 + u10 > t10 && (d10 = true, u10 = t10 - i10 + 1), c11.getViewLinesData(this.model, r11 + 1, l10, u10, i10 - e10, n10, s10), i10 += u10, d10) break;
      }
      return s10;
    }
    validateViewPosition(e10, t10, n10) {
      e10 = this._toValidViewLineNumber(e10);
      let r10 = this.projectedModelLineLineCounts.getIndexOf(e10 - 1), i10 = r10.index, a10 = r10.remainder, o10 = this.modelLineProjections[i10], s10 = o10.getViewLineMinColumn(this.model, i10 + 1, a10), c10 = o10.getViewLineMaxColumn(this.model, i10 + 1, a10);
      t10 < s10 && (t10 = s10), t10 > c10 && (t10 = c10);
      let l10 = o10.getModelColumnOfViewPosition(a10, t10), u10 = this.model.validatePosition(new P(i10 + 1, l10));
      return u10.equals(n10) ? new P(e10, t10) : this.convertModelPositionToViewPosition(n10.lineNumber, n10.column);
    }
    validateViewRange(e10, t10) {
      let n10 = this.validateViewPosition(e10.startLineNumber, e10.startColumn, t10.getStartPosition()), r10 = this.validateViewPosition(e10.endLineNumber, e10.endColumn, t10.getEndPosition());
      return new F(n10.lineNumber, n10.column, r10.lineNumber, r10.column);
    }
    convertViewPositionToModelPosition(e10, t10) {
      let n10 = this.getViewLineInfo(e10), r10 = this.modelLineProjections[n10.modelLineNumber - 1].getModelColumnOfViewPosition(n10.modelLineWrappedLineIdx, t10);
      return this.model.validatePosition(new P(n10.modelLineNumber, r10));
    }
    convertViewRangeToModelRange(e10) {
      let t10 = this.convertViewPositionToModelPosition(e10.startLineNumber, e10.startColumn), n10 = this.convertViewPositionToModelPosition(e10.endLineNumber, e10.endColumn);
      return new F(t10.lineNumber, t10.column, n10.lineNumber, n10.column);
    }
    convertModelPositionToViewPosition(e10, t10, n10 = 2, r10 = false, i10 = false) {
      let a10 = this.model.validatePosition(new P(e10, t10)), o10 = a10.lineNumber, s10 = a10.column, c10 = o10 - 1, l10 = false;
      if (i10) for (; c10 < this.modelLineProjections.length && !this.modelLineProjections[c10].isVisible(); ) c10++, l10 = true;
      else for (; c10 > 0 && !this.modelLineProjections[c10].isVisible(); ) c10--, l10 = true;
      if (c10 === 0 && !this.modelLineProjections[c10].isVisible()) return new P(r10 ? 0 : 1, 1);
      let u10 = 1 + this.projectedModelLineLineCounts.getPrefixSum(c10), d10;
      return d10 = l10 ? i10 ? this.modelLineProjections[c10].getViewPositionOfModelPosition(u10, 1, n10) : this.modelLineProjections[c10].getViewPositionOfModelPosition(u10, this.model.getLineMaxColumn(c10 + 1), n10) : this.modelLineProjections[o10 - 1].getViewPositionOfModelPosition(u10, s10, n10), d10;
    }
    convertModelRangeToViewRange(e10, t10 = 0) {
      if (e10.isEmpty()) {
        let n10 = this.convertModelPositionToViewPosition(e10.startLineNumber, e10.startColumn, t10);
        return F.fromPositions(n10);
      } else {
        let t11 = this.convertModelPositionToViewPosition(e10.startLineNumber, e10.startColumn, 1), n10 = this.convertModelPositionToViewPosition(e10.endLineNumber, e10.endColumn, 0);
        return new F(t11.lineNumber, t11.column, n10.lineNumber, n10.column);
      }
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      let n10 = e10 - 1;
      if (this.modelLineProjections[n10].isVisible()) {
        let e11 = 1 + this.projectedModelLineLineCounts.getPrefixSum(n10);
        return this.modelLineProjections[n10].getViewLineNumberOfModelPosition(e11, t10);
      }
      for (; n10 > 0 && !this.modelLineProjections[n10].isVisible(); ) n10--;
      if (n10 === 0 && !this.modelLineProjections[n10].isVisible()) return 1;
      let r10 = 1 + this.projectedModelLineLineCounts.getPrefixSum(n10);
      return this.modelLineProjections[n10].getViewLineNumberOfModelPosition(r10, this.model.getLineMaxColumn(n10 + 1));
    }
    getDecorationsInRange(e10, t10, n10, r10, i10) {
      let a10 = this.convertViewPositionToModelPosition(e10.startLineNumber, e10.startColumn), o10 = this.convertViewPositionToModelPosition(e10.endLineNumber, e10.endColumn);
      if (o10.lineNumber - a10.lineNumber <= e10.endLineNumber - e10.startLineNumber) return this.model.getDecorationsInRange(new F(a10.lineNumber, 1, o10.lineNumber, o10.column), t10, n10, r10, i10);
      let s10 = [], c10 = a10.lineNumber - 1, l10 = o10.lineNumber - 1, u10 = null;
      for (let e11 = c10; e11 <= l10; e11++) {
        let i11 = this.modelLineProjections[e11];
        if (i11.isVisible()) u10 === null && (u10 = new P(e11 + 1, e11 === c10 ? a10.column : 1));
        else if (u10 !== null) {
          let i12 = this.model.getLineMaxColumn(e11);
          s10 = s10.concat(this.model.getDecorationsInRange(new F(u10.lineNumber, u10.column, e11, i12), t10, n10, r10)), u10 = null;
        }
      }
      u10 !== null && (s10 = s10.concat(this.model.getDecorationsInRange(new F(u10.lineNumber, u10.column, o10.lineNumber, o10.column), t10, n10, r10)), u10 = null), s10.sort((e11, t11) => {
        let n11 = F.compareRangesUsingStarts(e11.range, t11.range);
        return n11 === 0 ? e11.id < t11.id ? -1 : e11.id > t11.id ? 1 : 0 : n11;
      });
      let d10 = [], f10 = 0, p10 = null;
      for (let e11 of s10) {
        let t11 = e11.id;
        if (p10 === t11) continue;
        p10 = t11, d10[f10++] = e11;
      }
      return d10;
    }
    getInjectedTextAt(e10) {
      let t10 = this.getViewLineInfo(e10.lineNumber);
      return this.modelLineProjections[t10.modelLineNumber - 1].getInjectedTextAt(t10.modelLineWrappedLineIdx, e10.column);
    }
    normalizePosition(e10, t10) {
      let n10 = this.getViewLineInfo(e10.lineNumber);
      return this.modelLineProjections[n10.modelLineNumber - 1].normalizePosition(n10.modelLineWrappedLineIdx, e10, t10);
    }
    getLineIndentColumn(e10) {
      let t10 = this.getViewLineInfo(e10);
      return t10.modelLineWrappedLineIdx === 0 ? this.model.getLineIndentColumn(t10.modelLineNumber) : 0;
    }
  };
  function Z4(e10) {
    if (e10.length === 0) return [];
    let t10 = e10.slice();
    t10.sort(F.compareRangesUsingStarts);
    let n10 = [], r10 = t10[0].startLineNumber, i10 = t10[0].endLineNumber;
    for (let e11 = 1, a10 = t10.length; e11 < a10; e11++) {
      let a11 = t10[e11];
      a11.startLineNumber > i10 + 1 ? (n10.push(new F(r10, 1, i10, 1)), r10 = a11.startLineNumber, i10 = a11.endLineNumber) : a11.endLineNumber > i10 && (i10 = a11.endLineNumber);
    }
    return n10.push(new F(r10, 1, i10, 1)), n10;
  }
  var Q4 = class {
    constructor(e10, t10) {
      this.modelLineNumber = e10, this.modelLineWrappedLineIdx = t10;
    }
  }, $4 = class {
    constructor(e10, t10) {
      this.modelRange = e10, this.viewLines = t10;
    }
  }, e3 = class {
    constructor(e10) {
      this._lines = e10;
    }
    convertViewPositionToModelPosition(e10) {
      return this._lines.convertViewPositionToModelPosition(e10.lineNumber, e10.column);
    }
    convertViewRangeToModelRange(e10) {
      return this._lines.convertViewRangeToModelRange(e10);
    }
    validateViewPosition(e10, t10) {
      return this._lines.validateViewPosition(e10.lineNumber, e10.column, t10);
    }
    validateViewRange(e10, t10) {
      return this._lines.validateViewRange(e10, t10);
    }
    convertModelPositionToViewPosition(e10, t10, n10, r10) {
      return this._lines.convertModelPositionToViewPosition(e10.lineNumber, e10.column, t10, n10, r10);
    }
    convertModelRangeToViewRange(e10, t10) {
      return this._lines.convertModelRangeToViewRange(e10, t10);
    }
    modelPositionIsVisible(e10) {
      return this._lines.modelPositionIsVisible(e10.lineNumber, e10.column);
    }
    getModelLineViewLineCount(e10) {
      return this._lines.getModelLineViewLineCount(e10);
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      return this._lines.getViewLineNumberOfModelPosition(e10, t10);
    }
  }, t3 = class {
    constructor(e10) {
      this.model = e10;
    }
    dispose() {
    }
    createCoordinatesConverter() {
      return new n3(this);
    }
    getHiddenAreas() {
      return [];
    }
    setHiddenAreas(e10) {
      return false;
    }
    setTabSize(e10) {
      return false;
    }
    setWrappingSettings(e10, t10, n10, r10) {
      return false;
    }
    createLineBreaksComputer() {
      let e10 = [];
      return {
        addRequest: (t10, n10, r10) => {
          e10.push(null);
        },
        finalize: () => e10
      };
    }
    onModelFlushed() {
    }
    onModelLinesDeleted(e10, t10, n10) {
      return new n4(t10, n10);
    }
    onModelLinesInserted(e10, t10, n10, r10) {
      return new r4(t10, n10);
    }
    onModelLineChanged(e10, t10, n10) {
      return [
        false,
        new t4(t10, 1),
        null,
        null
      ];
    }
    acceptVersionId(e10) {
    }
    getViewLineCount() {
      return this.model.getLineCount();
    }
    getActiveIndentGuide(e10, t10, n10) {
      return {
        startLineNumber: e10,
        endLineNumber: e10,
        indent: 0
      };
    }
    getViewLinesBracketGuides(e10, t10, n10) {
      return Array(t10 - e10 + 1).fill([]);
    }
    getViewLinesIndentGuides(e10, t10) {
      let n10 = t10 - e10 + 1, r10 = Array(n10);
      for (let e11 = 0; e11 < n10; e11++) r10[e11] = 0;
      return r10;
    }
    getViewLineContent(e10) {
      return this.model.getLineContent(e10);
    }
    getViewLineLength(e10) {
      return this.model.getLineLength(e10);
    }
    getViewLineMinColumn(e10) {
      return this.model.getLineMinColumn(e10);
    }
    getViewLineMaxColumn(e10) {
      return this.model.getLineMaxColumn(e10);
    }
    getViewLineData(e10) {
      let t10 = this.model.tokenization.getLineTokens(e10), n10 = t10.getLineContent();
      return new NX(n10, false, 1, n10.length + 1, 0, t10.inflate(), null);
    }
    getViewLinesData(e10, t10, n10) {
      let r10 = this.model.getLineCount();
      e10 = Math.min(Math.max(1, e10), r10), t10 = Math.min(Math.max(1, t10), r10);
      let i10 = [];
      for (let r11 = e10; r11 <= t10; r11++) {
        let t11 = r11 - e10;
        i10[t11] = n10[t11] ? this.getViewLineData(r11) : null;
      }
      return i10;
    }
    getDecorationsInRange(e10, t10, n10, r10, i10) {
      return this.model.getDecorationsInRange(e10, t10, n10, r10, i10);
    }
    normalizePosition(e10, t10) {
      return this.model.normalizePosition(e10, t10);
    }
    getLineIndentColumn(e10) {
      return this.model.getLineIndentColumn(e10);
    }
    getInjectedTextAt(e10) {
      return null;
    }
  }, n3 = class {
    constructor(e10) {
      this._lines = e10;
    }
    _validPosition(e10) {
      return this._lines.model.validatePosition(e10);
    }
    _validRange(e10) {
      return this._lines.model.validateRange(e10);
    }
    convertViewPositionToModelPosition(e10) {
      return this._validPosition(e10);
    }
    convertViewRangeToModelRange(e10) {
      return this._validRange(e10);
    }
    validateViewPosition(e10, t10) {
      return this._validPosition(t10);
    }
    validateViewRange(e10, t10) {
      return this._validRange(t10);
    }
    convertModelPositionToViewPosition(e10) {
      return this._validPosition(e10);
    }
    convertModelRangeToViewRange(e10) {
      return this._validRange(e10);
    }
    modelPositionIsVisible(e10) {
      let t10 = this._lines.model.getLineCount();
      return !(e10.lineNumber < 1 || e10.lineNumber > t10);
    }
    getModelLineViewLineCount(e10) {
      return 1;
    }
    getViewLineNumberOfModelPosition(e10, t10) {
      return e10;
    }
  };
  const r3 = Q_.Right;
  var i3 = class {
    constructor(e10) {
      this.persist = 0, this._requiredLanes = 1, this.lanes = new Uint8Array(Math.ceil((e10 + 1) * r3 / 8));
    }
    reset(e10) {
      let t10 = Math.ceil((e10 + 1) * r3 / 8);
      this.lanes.length < t10 ? this.lanes = new Uint8Array(t10) : this.lanes.fill(0), this._requiredLanes = 1;
    }
    get requiredLanes() {
      return this._requiredLanes;
    }
    push(e10, t10, n10) {
      n10 && (this.persist |= 1 << e10 - 1);
      for (let n11 = t10.startLineNumber; n11 <= t10.endLineNumber; n11++) {
        let t11 = r3 * n11 + (e10 - 1);
        this.lanes[t11 >>> 3] |= 1 << t11 % 8, this._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(n11));
      }
    }
    getLanesAtLine(e10) {
      let t10 = [], n10 = r3 * e10;
      for (let e11 = 0; e11 < r3; e11++) (this.persist & 1 << e11 || this.lanes[n10 >>> 3] & 1 << n10 % 8) && t10.push(e11 + 1), n10++;
      return t10.length ? t10 : [
        Q_.Center
      ];
    }
    countAtLine(e10) {
      let t10 = r3 * e10, n10 = 0;
      for (let e11 = 0; e11 < r3; e11++) (this.persist & 1 << e11 || this.lanes[t10 >>> 3] & 1 << t10 % 8) && n10++, t10++;
      return n10;
    }
  };
  const a3 = true;
  var o3 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      if (super(), this.languageConfigurationService = o10, this._themeService = s10, this._attachedView = c10, this._transactionalTarget = l10, this.hiddenAreasModel = new l3(), this.previousHiddenAreas = [], this._editorId = e10, this._configuration = t10, this.model = n10, this._eventDispatcher = new u4(), this.onEvent = this._eventDispatcher.onEvent, this.cursorConfig = new f$(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService), this._updateConfigurationViewLineCount = this._register(new cl(() => this._updateConfigurationViewLineCountNow(), 0)), this._hasFocus = false, this._viewportStart = s3.create(this.model), this.glyphLanes = new i3(0), a3 && this.model.isTooLargeForTokenization()) this._lines = new t3(this.model);
      else {
        let e11 = this._configuration.options, t11 = e11.get(50), n11 = e11.get(140), a11 = e11.get(147), o11 = e11.get(139), s11 = e11.get(130);
        this._lines = new X4(this._editorId, this.model, r10, i10, t11, this.model.getOptions().tabSize, n11, a11.wrappingColumn, o11, s11);
      }
      this.coordinatesConverter = this._lines.createCoordinatesConverter(), this._cursor = this._register(new T4(n10, this, this.coordinatesConverter, this.cursorConfig)), this.viewLayout = this._register(new L4(this._configuration, this.getLineCount(), a10)), this._register(this.viewLayout.onDidScroll((e11) => {
        e11.scrollTopChanged && this._handleVisibleLinesChanged(), e11.scrollTopChanged && this._viewportStart.invalidate(), this._eventDispatcher.emitSingleViewEvent(new a4(e11)), this._eventDispatcher.emitOutgoingEvent(new m4(e11.oldScrollWidth, e11.oldScrollLeft, e11.oldScrollHeight, e11.oldScrollTop, e11.scrollWidth, e11.scrollLeft, e11.scrollHeight, e11.scrollTop));
      })), this._register(this.viewLayout.onDidContentSizeChange((e11) => {
        this._eventDispatcher.emitOutgoingEvent(e11);
      })), this._decorations = new R4(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter), this._registerModelEvents(), this._register(this._configuration.onDidChangeFast((e11) => {
        try {
          let t11 = this._eventDispatcher.beginEmitViewEvents();
          this._onConfigurationChanged(t11, e11);
        } finally {
          this._eventDispatcher.endEmitViewEvents();
        }
      })), this._register(S0.getInstance().onDidChange(() => {
        this._eventDispatcher.emitSingleViewEvent(new c4());
      })), this._register(this._themeService.onDidColorThemeChange((e11) => {
        this._invalidateDecorationsColorCache(), this._eventDispatcher.emitSingleViewEvent(new o4(e11));
      })), this._updateConfigurationViewLineCountNow();
    }
    dispose() {
      super.dispose(), this._decorations.dispose(), this._lines.dispose(), this._viewportStart.dispose(), this._eventDispatcher.dispose();
    }
    createLineBreaksComputer() {
      return this._lines.createLineBreaksComputer();
    }
    addViewEventHandler(e10) {
      this._eventDispatcher.addViewEventHandler(e10);
    }
    removeViewEventHandler(e10) {
      this._eventDispatcher.removeViewEventHandler(e10);
    }
    _updateConfigurationViewLineCountNow() {
      this._configuration.setViewLineCount(this._lines.getViewLineCount());
    }
    getModelVisibleRanges() {
      let e10 = this.viewLayout.getLinesViewportData(), t10 = new F(e10.startLineNumber, this.getLineMinColumn(e10.startLineNumber), e10.endLineNumber, this.getLineMaxColumn(e10.endLineNumber)), n10 = this._toModelVisibleRanges(t10);
      return n10;
    }
    visibleLinesStabilized() {
      let e10 = this.getModelVisibleRanges();
      this._attachedView.setVisibleLines(e10, true);
    }
    _handleVisibleLinesChanged() {
      let e10 = this.getModelVisibleRanges();
      this._attachedView.setVisibleLines(e10, false);
    }
    setHasFocus(e10) {
      this._hasFocus = e10, this._cursor.setHasFocus(e10), this._eventDispatcher.emitSingleViewEvent(new Q2(e10)), this._eventDispatcher.emitOutgoingEvent(new p4(!e10, e10));
    }
    onCompositionStart() {
      this._eventDispatcher.emitSingleViewEvent(new K2());
    }
    onCompositionEnd() {
      this._eventDispatcher.emitSingleViewEvent(new q2());
    }
    _captureStableViewport() {
      if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {
        let e10 = new P(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber)), t10 = this.coordinatesConverter.convertViewPositionToModelPosition(e10);
        return new f3(t10, this._viewportStart.startLineDelta);
      }
      return new f3(null, 0);
    }
    _onConfigurationChanged(e10, t10) {
      let n10 = this._captureStableViewport(), r10 = this._configuration.options, i10 = r10.get(50), a10 = r10.get(140), o10 = r10.get(147), s10 = r10.get(139), c10 = r10.get(130);
      this._lines.setWrappingSettings(i10, a10, o10.wrappingColumn, s10, c10) && (e10.emitViewEvent(new Z2()), e10.emitViewEvent(new e4()), e10.emitViewEvent(new X2(null)), this._cursor.onLineMappingChanged(e10), this._decorations.onLineMappingChanged(), this.viewLayout.onFlushed(this.getLineCount()), this._updateConfigurationViewLineCount.schedule()), t10.hasChanged(92) && (this._decorations.reset(), e10.emitViewEvent(new X2(null))), t10.hasChanged(99) && (this._decorations.reset(), e10.emitViewEvent(new X2(null))), e10.emitViewEvent(new J2(t10)), this.viewLayout.onConfigurationChanged(t10), n10.recoverViewportStart(this.coordinatesConverter, this.viewLayout), f$.shouldRecreate(t10) && (this.cursorConfig = new f$(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService), this._cursor.updateConfiguration(this.cursorConfig));
    }
    _registerModelEvents() {
      this._register(this.model.onDidChangeContentOrInjectedText((e10) => {
        try {
          let t11 = this._eventDispatcher.beginEmitViewEvents(), n10 = false, r10 = false, i10 = e10 instanceof qV ? e10.rawContentChangedEvent.changes : e10.changes, a10 = e10 instanceof qV ? e10.rawContentChangedEvent.versionId : null, o10 = this._lines.createLineBreaksComputer();
          for (let e11 of i10) switch (e11.changeType) {
            case 4:
              for (let t12 = 0; t12 < e11.detail.length; t12++) {
                let n11 = e11.detail[t12], r11 = e11.injectedTexts[t12];
                r11 && (r11 = r11.filter((e12) => !e12.ownerId || e12.ownerId === this._editorId)), o10.addRequest(n11, r11, null);
              }
              break;
            case 2: {
              let t12 = null;
              e11.injectedText && (t12 = e11.injectedText.filter((e12) => !e12.ownerId || e12.ownerId === this._editorId)), o10.addRequest(e11.detail, t12, null);
              break;
            }
          }
          let s10 = o10.finalize(), c10 = new me(s10);
          for (let e11 of i10) switch (e11.changeType) {
            case 1:
              this._lines.onModelFlushed(), t11.emitViewEvent(new Z2()), this._decorations.reset(), this.viewLayout.onFlushed(this.getLineCount()), n10 = true;
              break;
            case 3: {
              let r11 = this._lines.onModelLinesDeleted(a10, e11.fromLineNumber, e11.toLineNumber);
              r11 !== null && (t11.emitViewEvent(r11), this.viewLayout.onLinesDeleted(r11.fromLineNumber, r11.toLineNumber)), n10 = true;
              break;
            }
            case 4: {
              let r11 = c10.takeCount(e11.detail.length), i11 = this._lines.onModelLinesInserted(a10, e11.fromLineNumber, e11.toLineNumber, r11);
              i11 !== null && (t11.emitViewEvent(i11), this.viewLayout.onLinesInserted(i11.fromLineNumber, i11.toLineNumber)), n10 = true;
              break;
            }
            case 2: {
              let n11 = c10.dequeue(), [i11, o11, s11, l10] = this._lines.onModelLineChanged(a10, e11.lineNumber, n11);
              r10 = i11, o11 && t11.emitViewEvent(o11), s11 && (t11.emitViewEvent(s11), this.viewLayout.onLinesInserted(s11.fromLineNumber, s11.toLineNumber)), l10 && (t11.emitViewEvent(l10), this.viewLayout.onLinesDeleted(l10.fromLineNumber, l10.toLineNumber));
              break;
            }
            case 5:
              break;
          }
          a10 !== null && this._lines.acceptVersionId(a10), this.viewLayout.onHeightMaybeChanged(), !n10 && r10 && (t11.emitViewEvent(new e4()), t11.emitViewEvent(new X2(null)), this._cursor.onLineMappingChanged(t11), this._decorations.onLineMappingChanged());
        } finally {
          this._eventDispatcher.endEmitViewEvents();
        }
        let t10 = this._viewportStart.isValid;
        if (this._viewportStart.invalidate(), this._configuration.setModelLineCount(this.model.getLineCount()), this._updateConfigurationViewLineCountNow(), !this._hasFocus && this.model.getAttachedEditorCount() >= 2 && t10) {
          let e11 = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);
          if (e11) {
            let t11 = this.coordinatesConverter.convertModelPositionToViewPosition(e11.getStartPosition()), n10 = this.viewLayout.getVerticalOffsetForLineNumber(t11.lineNumber);
            this.viewLayout.setScrollPosition({
              scrollTop: n10 + this._viewportStart.startLineDelta
            }, 1);
          }
        }
        try {
          let t11 = this._eventDispatcher.beginEmitViewEvents();
          e10 instanceof qV && t11.emitOutgoingEvent(new S4(e10.contentChangedEvent)), this._cursor.onModelContentChanged(t11, e10);
        } finally {
          this._eventDispatcher.endEmitViewEvents();
        }
        this._handleVisibleLinesChanged();
      })), this._register(this.model.onDidChangeTokens((e10) => {
        let t10 = [];
        for (let n10 = 0, r10 = e10.ranges.length; n10 < r10; n10++) {
          let r11 = e10.ranges[n10], i10 = this.coordinatesConverter.convertModelPositionToViewPosition(new P(r11.fromLineNumber, 1)).lineNumber, a10 = this.coordinatesConverter.convertModelPositionToViewPosition(new P(r11.toLineNumber, this.model.getLineMaxColumn(r11.toLineNumber))).lineNumber;
          t10[n10] = {
            fromLineNumber: i10,
            toLineNumber: a10
          };
        }
        this._eventDispatcher.emitSingleViewEvent(new s4(t10)), this._eventDispatcher.emitOutgoingEvent(new w4(e10));
      })), this._register(this.model.onDidChangeLanguageConfiguration((e10) => {
        this._eventDispatcher.emitSingleViewEvent(new $2()), this.cursorConfig = new f$(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService), this._cursor.updateConfiguration(this.cursorConfig), this._eventDispatcher.emitOutgoingEvent(new x4(e10));
      })), this._register(this.model.onDidChangeLanguage((e10) => {
        this.cursorConfig = new f$(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService), this._cursor.updateConfiguration(this.cursorConfig), this._eventDispatcher.emitOutgoingEvent(new b4(e10));
      })), this._register(this.model.onDidChangeOptions((e10) => {
        if (this._lines.setTabSize(this.model.getOptions().tabSize)) {
          try {
            let e11 = this._eventDispatcher.beginEmitViewEvents();
            e11.emitViewEvent(new Z2()), e11.emitViewEvent(new e4()), e11.emitViewEvent(new X2(null)), this._cursor.onLineMappingChanged(e11), this._decorations.onLineMappingChanged(), this.viewLayout.onFlushed(this.getLineCount());
          } finally {
            this._eventDispatcher.endEmitViewEvents();
          }
          this._updateConfigurationViewLineCount.schedule();
        }
        this.cursorConfig = new f$(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService), this._cursor.updateConfiguration(this.cursorConfig), this._eventDispatcher.emitOutgoingEvent(new C4(e10));
      })), this._register(this.model.onDidChangeDecorations((e10) => {
        this._decorations.onModelDecorationsChanged(), this._eventDispatcher.emitSingleViewEvent(new X2(e10)), this._eventDispatcher.emitOutgoingEvent(new y4(e10));
      }));
    }
    setHiddenAreas(e10, t10) {
      var _a3;
      this.hiddenAreasModel.setHiddenAreas(t10, e10);
      let n10 = this.hiddenAreasModel.getMergedRanges();
      if (n10 === this.previousHiddenAreas) return;
      this.previousHiddenAreas = n10;
      let r10 = this._captureStableViewport(), i10 = false;
      try {
        let e11 = this._eventDispatcher.beginEmitViewEvents();
        i10 = this._lines.setHiddenAreas(n10), i10 && (e11.emitViewEvent(new Z2()), e11.emitViewEvent(new e4()), e11.emitViewEvent(new X2(null)), this._cursor.onLineMappingChanged(e11), this._decorations.onLineMappingChanged(), this.viewLayout.onFlushed(this.getLineCount()), this.viewLayout.onHeightMaybeChanged());
        let t11 = (_a3 = r10.viewportStartModelPosition) == null ? void 0 : _a3.lineNumber, a10 = t11 && n10.some((e12) => e12.startLineNumber <= t11 && t11 <= e12.endLineNumber);
        a10 || r10.recoverViewportStart(this.coordinatesConverter, this.viewLayout);
      } finally {
        this._eventDispatcher.endEmitViewEvents();
      }
      this._updateConfigurationViewLineCount.schedule(), i10 && this._eventDispatcher.emitOutgoingEvent(new g4());
    }
    getVisibleRangesPlusViewportAboveBelow() {
      let e10 = this._configuration.options.get(146), t10 = this._configuration.options.get(67), n10 = Math.max(20, Math.round(e10.height / t10)), r10 = this.viewLayout.getLinesViewportData(), i10 = Math.max(1, r10.completelyVisibleStartLineNumber - n10), a10 = Math.min(this.getLineCount(), r10.completelyVisibleEndLineNumber + n10);
      return this._toModelVisibleRanges(new F(i10, this.getLineMinColumn(i10), a10, this.getLineMaxColumn(a10)));
    }
    getVisibleRanges() {
      let e10 = this.getCompletelyVisibleViewRange();
      return this._toModelVisibleRanges(e10);
    }
    getHiddenAreas() {
      return this._lines.getHiddenAreas();
    }
    _toModelVisibleRanges(e10) {
      let t10 = this.coordinatesConverter.convertViewRangeToModelRange(e10), n10 = this._lines.getHiddenAreas();
      if (n10.length === 0) return [
        t10
      ];
      let r10 = [], i10 = 0, a10 = t10.startLineNumber, o10 = t10.startColumn, s10 = t10.endLineNumber, c10 = t10.endColumn;
      for (let e11 = 0, t11 = n10.length; e11 < t11; e11++) {
        let t12 = n10[e11].startLineNumber, c11 = n10[e11].endLineNumber;
        c11 < a10 || t12 > s10 || (a10 < t12 && (r10[i10++] = new F(a10, o10, t12 - 1, this.model.getLineMaxColumn(t12 - 1))), a10 = c11 + 1, o10 = 1);
      }
      return (a10 < s10 || a10 === s10 && o10 < c10) && (r10[i10++] = new F(a10, o10, s10, c10)), r10;
    }
    getCompletelyVisibleViewRange() {
      let e10 = this.viewLayout.getLinesViewportData(), t10 = e10.completelyVisibleStartLineNumber, n10 = e10.completelyVisibleEndLineNumber;
      return new F(t10, this.getLineMinColumn(t10), n10, this.getLineMaxColumn(n10));
    }
    getCompletelyVisibleViewRangeAtScrollTop(e10) {
      let t10 = this.viewLayout.getLinesViewportDataAtScrollTop(e10), n10 = t10.completelyVisibleStartLineNumber, r10 = t10.completelyVisibleEndLineNumber;
      return new F(n10, this.getLineMinColumn(n10), r10, this.getLineMaxColumn(r10));
    }
    saveState() {
      let e10 = this.viewLayout.saveState(), t10 = e10.scrollTop, n10 = this.viewLayout.getLineNumberAtVerticalOffset(t10), r10 = this.coordinatesConverter.convertViewPositionToModelPosition(new P(n10, this.getLineMinColumn(n10))), i10 = this.viewLayout.getVerticalOffsetForLineNumber(n10) - t10;
      return {
        scrollLeft: e10.scrollLeft,
        firstPosition: r10,
        firstPositionDeltaTop: i10
      };
    }
    reduceRestoreState(e10) {
      if (e10.firstPosition === void 0) return this._reduceRestoreStateCompatibility(e10);
      let t10 = this.model.validatePosition(e10.firstPosition), n10 = this.coordinatesConverter.convertModelPositionToViewPosition(t10), r10 = this.viewLayout.getVerticalOffsetForLineNumber(n10.lineNumber) - e10.firstPositionDeltaTop;
      return {
        scrollLeft: e10.scrollLeft,
        scrollTop: r10
      };
    }
    _reduceRestoreStateCompatibility(e10) {
      return {
        scrollLeft: e10.scrollLeft,
        scrollTop: e10.scrollTopWithoutViewZones
      };
    }
    getTabSize() {
      return this.model.getOptions().tabSize;
    }
    getLineCount() {
      return this._lines.getViewLineCount();
    }
    setViewport(e10, t10, n10) {
      this._viewportStart.update(this, e10);
    }
    getActiveIndentGuide(e10, t10, n10) {
      return this._lines.getActiveIndentGuide(e10, t10, n10);
    }
    getLinesIndentGuides(e10, t10) {
      return this._lines.getViewLinesIndentGuides(e10, t10);
    }
    getBracketGuidesInRangeByLine(e10, t10, n10, r10) {
      return this._lines.getViewLinesBracketGuides(e10, t10, n10, r10);
    }
    getLineContent(e10) {
      return this._lines.getViewLineContent(e10);
    }
    getLineLength(e10) {
      return this._lines.getViewLineLength(e10);
    }
    getLineMinColumn(e10) {
      return this._lines.getViewLineMinColumn(e10);
    }
    getLineMaxColumn(e10) {
      return this._lines.getViewLineMaxColumn(e10);
    }
    getLineFirstNonWhitespaceColumn(e10) {
      let t10 = Es(this.getLineContent(e10));
      return t10 === -1 ? 0 : t10 + 1;
    }
    getLineLastNonWhitespaceColumn(e10) {
      let t10 = Os(this.getLineContent(e10));
      return t10 === -1 ? 0 : t10 + 2;
    }
    getMinimapDecorationsInRange(e10) {
      return this._decorations.getMinimapDecorationsInRange(e10);
    }
    getDecorationsInViewport(e10) {
      return this._decorations.getDecorationsViewportData(e10).decorations;
    }
    getInjectedTextAt(e10) {
      return this._lines.getInjectedTextAt(e10);
    }
    getViewportViewLineRenderingData(e10, t10) {
      let n10 = this._decorations.getDecorationsViewportData(e10).inlineDecorations, r10 = n10[t10 - e10.startLineNumber];
      return this._getViewLineRenderingData(t10, r10);
    }
    getViewLineRenderingData(e10) {
      let t10 = this._decorations.getInlineDecorationsOnLine(e10);
      return this._getViewLineRenderingData(e10, t10);
    }
    _getViewLineRenderingData(e10, t10) {
      let n10 = this.model.mightContainRTL(), r10 = this.model.mightContainNonBasicASCII(), i10 = this.getTabSize(), a10 = this._lines.getViewLineData(e10);
      return a10.inlineDecorations && (t10 = [
        ...t10,
        ...a10.inlineDecorations.map((t11) => t11.toInlineDecoration(e10))
      ]), new PX(a10.minColumn, a10.maxColumn, a10.content, a10.continuesWithWrappedLine, n10, r10, a10.tokens, t10, i10, a10.startVisibleColumn);
    }
    getViewLineData(e10) {
      return this._lines.getViewLineData(e10);
    }
    getMinimapLinesRenderingData(e10, t10, n10) {
      let r10 = this._lines.getViewLinesData(e10, t10, n10);
      return new MX(this.getTabSize(), r10);
    }
    getAllOverviewRulerDecorations(e10) {
      let t10 = this.model.getOverviewRulerDecorations(this._editorId, Hn(this._configuration.options)), n10 = new c3();
      for (let r10 of t10) {
        let t11 = r10.options, i10 = t11.overviewRuler;
        if (!i10) continue;
        let a10 = i10.position;
        if (a10 === 0) continue;
        let o10 = i10.getColor(e10.value), s10 = this.coordinatesConverter.getViewLineNumberOfModelPosition(r10.range.startLineNumber, r10.range.startColumn), c10 = this.coordinatesConverter.getViewLineNumberOfModelPosition(r10.range.endLineNumber, r10.range.endColumn);
        n10.accept(o10, t11.zIndex, s10, c10, a10);
      }
      return n10.asArray;
    }
    _invalidateDecorationsColorCache() {
      let e10 = this.model.getOverviewRulerDecorations();
      for (let t10 of e10) {
        let e11 = t10.options.overviewRuler;
        e11 == null ? void 0 : e11.invalidateCachedColor();
        let n10 = t10.options.minimap;
        n10 == null ? void 0 : n10.invalidateCachedColor();
      }
    }
    getValueInRange(e10, t10) {
      let n10 = this.coordinatesConverter.convertViewRangeToModelRange(e10);
      return this.model.getValueInRange(n10, t10);
    }
    getValueLengthInRange(e10, t10) {
      let n10 = this.coordinatesConverter.convertViewRangeToModelRange(e10);
      return this.model.getValueLengthInRange(n10, t10);
    }
    modifyPosition(e10, t10) {
      let n10 = this.coordinatesConverter.convertViewPositionToModelPosition(e10), r10 = this.model.modifyPosition(n10, t10);
      return this.coordinatesConverter.convertModelPositionToViewPosition(r10);
    }
    deduceModelPositionRelativeToViewPosition(e10, t10, n10) {
      let r10 = this.coordinatesConverter.convertViewPositionToModelPosition(e10);
      this.model.getEOL().length === 2 && (t10 < 0 ? t10 -= n10 : t10 += n10);
      let i10 = this.model.getOffsetAt(r10), a10 = i10 + t10;
      return this.model.getPositionAt(a10);
    }
    getPlainTextToCopy(e10, t10, n10) {
      let r10 = n10 ? `\r
` : this.model.getEOL();
      e10 = e10.slice(0), e10.sort(F.compareRangesUsingStarts);
      let i10 = false, a10 = false;
      for (let t11 of e10) t11.isEmpty() ? i10 = true : a10 = true;
      if (!a10) {
        if (!t10) return ``;
        let n11 = e10.map((e11) => e11.startLineNumber), i11 = ``;
        for (let e11 = 0; e11 < n11.length; e11++) e11 > 0 && n11[e11 - 1] === n11[e11] || (i11 += this.model.getLineContent(n11[e11]) + r10);
        return i11;
      }
      if (i10 && t10) {
        let t11 = [], r11 = 0;
        for (let i11 of e10) {
          let e11 = i11.startLineNumber;
          i11.isEmpty() ? e11 !== r11 && t11.push(this.model.getLineContent(e11)) : t11.push(this.model.getValueInRange(i11, n10 ? 2 : 0)), r11 = e11;
        }
        return t11.length === 1 ? t11[0] : t11;
      }
      let o10 = [];
      for (let t11 of e10) t11.isEmpty() || o10.push(this.model.getValueInRange(t11, n10 ? 2 : 0));
      return o10.length === 1 ? o10[0] : o10;
    }
    getRichTextToCopy(e10, t10) {
      let n10 = this.model.getLanguageId();
      if (n10 === Jg || e10.length !== 1) return null;
      let r10 = e10[0];
      if (r10.isEmpty()) {
        if (!t10) return null;
        let e11 = r10.startLineNumber;
        r10 = new F(e11, this.model.getLineMinColumn(e11), e11, this.model.getLineMaxColumn(e11));
      }
      let i10 = this._configuration.options.get(50), a10 = this._getColorMap(), o10 = /[:;\\\/<>]/.test(i10.fontFamily), s10 = o10 || i10.fontFamily === dr.fontFamily, c10;
      if (s10) c10 = dr.fontFamily;
      else {
        c10 = i10.fontFamily, c10 = c10.replace(/"/g, `'`);
        let e11 = /[,']/.test(c10);
        if (!e11) {
          let e12 = /[+ ]/.test(c10);
          e12 && (c10 = `'${c10}'`);
        }
        c10 = `${c10}, ${dr.fontFamily}`;
      }
      return {
        mode: n10,
        html: `<div style="color: ${a10[1]};background-color: ${a10[2]};font-family: ${c10};font-weight: ${i10.fontWeight};font-size: ${i10.fontSize}px;line-height: ${i10.lineHeight}px;white-space: pre;">` + this._getHTMLToCopy(r10, a10) + `</div>`
      };
    }
    _getHTMLToCopy(e10, t10) {
      let n10 = e10.startLineNumber, r10 = e10.startColumn, i10 = e10.endLineNumber, a10 = e10.endColumn, o10 = this.getTabSize(), s10 = ``;
      for (let e11 = n10; e11 <= i10; e11++) {
        let c10 = this.model.tokenization.getLineTokens(e11), l10 = c10.getLineContent(), u10 = e11 === n10 ? r10 - 1 : 0, d10 = e11 === i10 ? a10 - 1 : l10.length;
        l10 === `` ? s10 += `<br>` : s10 += jA(l10, c10.inflate(), t10, u10, d10, o10, mt);
      }
      return s10;
    }
    _getColorMap() {
      let e10 = ao.getColorMap(), t10 = [
        `#000000`
      ];
      if (e10) for (let n10 = 1, r10 = e10.length; n10 < r10; n10++) t10[n10] = K.Format.CSS.formatHex(e10[n10]);
      return t10;
    }
    getPrimaryCursorState() {
      return this._cursor.getPrimaryCursorState();
    }
    getLastAddedCursorIndex() {
      return this._cursor.getLastAddedCursorIndex();
    }
    getCursorStates() {
      return this._cursor.getCursorStates();
    }
    setCursorStates(e10, t10, n10) {
      return this._withViewEventsCollector((r10) => this._cursor.setStates(r10, e10, t10, n10));
    }
    getCursorColumnSelectData() {
      return this._cursor.getCursorColumnSelectData();
    }
    getCursorAutoClosedCharacters() {
      return this._cursor.getAutoClosedCharacters();
    }
    setCursorColumnSelectData(e10) {
      this._cursor.setCursorColumnSelectData(e10);
    }
    getPrevEditOperationType() {
      return this._cursor.getPrevEditOperationType();
    }
    setPrevEditOperationType(e10) {
      this._cursor.setPrevEditOperationType(e10);
    }
    getSelection() {
      return this._cursor.getSelection();
    }
    getSelections() {
      return this._cursor.getSelections();
    }
    getPosition() {
      return this._cursor.getPrimaryCursorState().modelState.position;
    }
    setSelections(e10, t10, n10 = 0) {
      this._withViewEventsCollector((r10) => this._cursor.setSelections(r10, e10, t10, n10));
    }
    saveCursorState() {
      return this._cursor.saveState();
    }
    restoreCursorState(e10) {
      this._withViewEventsCollector((t10) => this._cursor.restoreState(t10, e10));
    }
    _executeCursorEdit(e10) {
      if (this._cursor.context.cursorConfig.readOnly) {
        this._eventDispatcher.emitOutgoingEvent(new v4());
        return;
      }
      this._withViewEventsCollector(e10);
    }
    executeEdits(e10, t10, n10) {
      this._executeCursorEdit((r10) => this._cursor.executeEdits(r10, e10, t10, n10));
    }
    startComposition() {
      this._executeCursorEdit((e10) => this._cursor.startComposition(e10));
    }
    endComposition(e10) {
      this._executeCursorEdit((t10) => this._cursor.endComposition(t10, e10));
    }
    type(e10, t10) {
      this._executeCursorEdit((n10) => this._cursor.type(n10, e10, t10));
    }
    compositionType(e10, t10, n10, r10, i10) {
      this._executeCursorEdit((a10) => this._cursor.compositionType(a10, e10, t10, n10, r10, i10));
    }
    paste(e10, t10, n10, r10) {
      this._executeCursorEdit((i10) => this._cursor.paste(i10, e10, t10, n10, r10));
    }
    cut(e10) {
      this._executeCursorEdit((t10) => this._cursor.cut(t10, e10));
    }
    executeCommand(e10, t10) {
      this._executeCursorEdit((n10) => this._cursor.executeCommand(n10, e10, t10));
    }
    executeCommands(e10, t10) {
      this._executeCursorEdit((n10) => this._cursor.executeCommands(n10, e10, t10));
    }
    revealAllCursors(e10, t10, n10 = false) {
      this._withViewEventsCollector((r10) => this._cursor.revealAll(r10, e10, n10, 0, t10, 0));
    }
    revealPrimaryCursor(e10, t10, n10 = false) {
      this._withViewEventsCollector((r10) => this._cursor.revealPrimary(r10, e10, n10, 0, t10, 0));
    }
    revealTopMostCursor(e10) {
      let t10 = this._cursor.getTopMostViewPosition(), n10 = new F(t10.lineNumber, t10.column, t10.lineNumber, t10.column);
      this._withViewEventsCollector((t11) => t11.emitViewEvent(new i4(e10, false, n10, null, 0, true, 0)));
    }
    revealBottomMostCursor(e10) {
      let t10 = this._cursor.getBottomMostViewPosition(), n10 = new F(t10.lineNumber, t10.column, t10.lineNumber, t10.column);
      this._withViewEventsCollector((t11) => t11.emitViewEvent(new i4(e10, false, n10, null, 0, true, 0)));
    }
    revealRange(e10, t10, n10, r10, i10) {
      this._withViewEventsCollector((a10) => a10.emitViewEvent(new i4(e10, false, n10, null, r10, t10, i10)));
    }
    changeWhitespace(e10) {
      let t10 = this.viewLayout.changeWhitespace(e10);
      t10 && (this._eventDispatcher.emitSingleViewEvent(new l4()), this._eventDispatcher.emitOutgoingEvent(new h4()));
    }
    _withViewEventsCollector(e10) {
      return this._transactionalTarget.batchChanges(() => {
        try {
          let t10 = this._eventDispatcher.beginEmitViewEvents();
          return e10(t10);
        } finally {
          this._eventDispatcher.endEmitViewEvents();
        }
      });
    }
    batchEvents(e10) {
      this._withViewEventsCollector(() => {
        e10();
      });
    }
    normalizePosition(e10, t10) {
      return this._lines.normalizePosition(e10, t10);
    }
    getLineIndentColumn(e10) {
      return this._lines.getLineIndentColumn(e10);
    }
  }, s3 = class e10 {
    static create(t10) {
      let n10 = t10._setTrackedRange(null, new F(1, 1, 1, 1), 1);
      return new e10(t10, 1, false, n10, 0);
    }
    get viewLineNumber() {
      return this._viewLineNumber;
    }
    get isValid() {
      return this._isValid;
    }
    get modelTrackedRange() {
      return this._modelTrackedRange;
    }
    get startLineDelta() {
      return this._startLineDelta;
    }
    constructor(e11, t10, n10, r10, i10) {
      this._model = e11, this._viewLineNumber = t10, this._isValid = n10, this._modelTrackedRange = r10, this._startLineDelta = i10;
    }
    dispose() {
      this._model._setTrackedRange(this._modelTrackedRange, null, 1);
    }
    update(e11, t10) {
      let n10 = e11.coordinatesConverter.convertViewPositionToModelPosition(new P(t10, e11.getLineMinColumn(t10))), r10 = e11.model._setTrackedRange(this._modelTrackedRange, new F(n10.lineNumber, n10.column, n10.lineNumber, n10.column), 1), i10 = e11.viewLayout.getVerticalOffsetForLineNumber(t10), a10 = e11.viewLayout.getCurrentScrollTop();
      this._viewLineNumber = t10, this._isValid = true, this._modelTrackedRange = r10, this._startLineDelta = a10 - i10;
    }
    invalidate() {
      this._isValid = false;
    }
  }, c3 = class {
    constructor() {
      this._asMap = /* @__PURE__ */ Object.create(null), this.asArray = [];
    }
    accept(e10, t10, n10, r10, i10) {
      let a10 = this._asMap[e10];
      if (a10) {
        let e11 = a10.data, t11 = e11[e11.length - 3], o10 = e11[e11.length - 1];
        if (t11 === i10 && o10 + 1 >= n10) {
          r10 > o10 && (e11[e11.length - 1] = r10);
          return;
        }
        e11.push(i10, n10, r10);
      } else {
        let a11 = new RX(e10, t10, [
          i10,
          n10,
          r10
        ]);
        this._asMap[e10] = a11, this.asArray.push(a11);
      }
    }
  }, l3 = class {
    constructor() {
      this.hiddenAreas = /* @__PURE__ */ new Map(), this.shouldRecompute = false, this.ranges = [];
    }
    setHiddenAreas(e10, t10) {
      let n10 = this.hiddenAreas.get(e10);
      n10 && d3(n10, t10) || (this.hiddenAreas.set(e10, t10), this.shouldRecompute = true);
    }
    getMergedRanges() {
      if (!this.shouldRecompute) return this.ranges;
      this.shouldRecompute = false;
      let e10 = Array.from(this.hiddenAreas.values()).reduce((e11, t10) => u3(e11, t10), []);
      return d3(this.ranges, e10) || (this.ranges = e10), this.ranges;
    }
  };
  function u3(e10, t10) {
    let n10 = [], r10 = 0, i10 = 0;
    for (; r10 < e10.length && i10 < t10.length; ) {
      let a10 = e10[r10], o10 = t10[i10];
      if (a10.endLineNumber < o10.startLineNumber - 1) n10.push(e10[r10++]);
      else if (o10.endLineNumber < a10.startLineNumber - 1) n10.push(t10[i10++]);
      else {
        let e11 = Math.min(a10.startLineNumber, o10.startLineNumber), t11 = Math.max(a10.endLineNumber, o10.endLineNumber);
        n10.push(new F(e11, 1, t11, 1)), r10++, i10++;
      }
    }
    for (; r10 < e10.length; ) n10.push(e10[r10++]);
    for (; i10 < t10.length; ) n10.push(t10[i10++]);
    return n10;
  }
  function d3(e10, t10) {
    if (e10.length !== t10.length) return false;
    for (let n10 = 0; n10 < e10.length; n10++) if (!e10[n10].equalsRange(t10[n10])) return false;
    return true;
  }
  var f3 = class {
    constructor(e10, t10) {
      this.viewportStartModelPosition = e10, this.startLineDelta = t10;
    }
    recoverViewportStart(e10, t10) {
      if (!this.viewportStartModelPosition) return;
      let n10 = e10.convertModelPositionToViewPosition(this.viewportStartModelPosition), r10 = t10.getVerticalOffsetForLineNumber(n10.lineNumber);
      t10.setScrollPosition({
        scrollTop: r10 + this.startLineDelta
      }, 1);
    }
  }, p3 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, m3 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, h3;
  g3 = (_gb = class extends j {
    get isSimpleWidget() {
      return this._configuration.isSimpleWidget;
    }
    get contextMenuId() {
      return this._configuration.contextMenuId;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10) {
      super(), this.languageConfigurationService = u10, this._deliveryQueue = ai(), this._contributions = this._register(new j2()), this._onDidDispose = this._register(new N()), this.onDidDispose = this._onDidDispose.event, this._onDidChangeModelContent = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelContent = this._onDidChangeModelContent.event, this._onDidChangeModelLanguage = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelLanguage = this._onDidChangeModelLanguage.event, this._onDidChangeModelLanguageConfiguration = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelLanguageConfiguration = this._onDidChangeModelLanguageConfiguration.event, this._onDidChangeModelOptions = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelOptions = this._onDidChangeModelOptions.event, this._onDidChangeModelDecorations = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelDecorations = this._onDidChangeModelDecorations.event, this._onDidChangeModelTokens = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModelTokens = this._onDidChangeModelTokens.event, this._onDidChangeConfiguration = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeConfiguration = this._onDidChangeConfiguration.event, this._onWillChangeModel = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onWillChangeModel = this._onWillChangeModel.event, this._onDidChangeModel = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeModel = this._onDidChangeModel.event, this._onDidChangeCursorPosition = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeCursorPosition = this._onDidChangeCursorPosition.event, this._onDidChangeCursorSelection = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeCursorSelection = this._onDidChangeCursorSelection.event, this._onDidAttemptReadOnlyEdit = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDidAttemptReadOnlyEdit = this._onDidAttemptReadOnlyEdit.event, this._onDidLayoutChange = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidLayoutChange = this._onDidLayoutChange.event, this._editorTextFocus = this._register(new y3({
        deliveryQueue: this._deliveryQueue
      })), this.onDidFocusEditorText = this._editorTextFocus.onDidChangeToTrue, this.onDidBlurEditorText = this._editorTextFocus.onDidChangeToFalse, this._editorWidgetFocus = this._register(new y3({
        deliveryQueue: this._deliveryQueue
      })), this.onDidFocusEditorWidget = this._editorWidgetFocus.onDidChangeToTrue, this.onDidBlurEditorWidget = this._editorWidgetFocus.onDidChangeToFalse, this._onWillType = this._register(new b3(this._contributions, this._deliveryQueue)), this.onWillType = this._onWillType.event, this._onDidType = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDidType = this._onDidType.event, this._onDidCompositionStart = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDidCompositionStart = this._onDidCompositionStart.event, this._onDidCompositionEnd = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDidCompositionEnd = this._onDidCompositionEnd.event, this._onDidPaste = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDidPaste = this._onDidPaste.event, this._onMouseUp = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseUp = this._onMouseUp.event, this._onMouseDown = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseDown = this._onMouseDown.event, this._onMouseDrag = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseDrag = this._onMouseDrag.event, this._onMouseDrop = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseDrop = this._onMouseDrop.event, this._onMouseDropCanceled = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseDropCanceled = this._onMouseDropCanceled.event, this._onDropIntoEditor = this._register(new b3(this._contributions, this._deliveryQueue)), this.onDropIntoEditor = this._onDropIntoEditor.event, this._onContextMenu = this._register(new b3(this._contributions, this._deliveryQueue)), this.onContextMenu = this._onContextMenu.event, this._onMouseMove = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseMove = this._onMouseMove.event, this._onMouseLeave = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseLeave = this._onMouseLeave.event, this._onMouseWheel = this._register(new b3(this._contributions, this._deliveryQueue)), this.onMouseWheel = this._onMouseWheel.event, this._onKeyUp = this._register(new b3(this._contributions, this._deliveryQueue)), this.onKeyUp = this._onKeyUp.event, this._onKeyDown = this._register(new b3(this._contributions, this._deliveryQueue)), this.onKeyDown = this._onKeyDown.event, this._onDidContentSizeChange = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidContentSizeChange = this._onDidContentSizeChange.event, this._onDidScrollChange = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidScrollChange = this._onDidScrollChange.event, this._onDidChangeViewZones = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeViewZones = this._onDidChangeViewZones.event, this._onDidChangeHiddenAreas = this._register(new N({
        deliveryQueue: this._deliveryQueue
      })), this.onDidChangeHiddenAreas = this._onDidChangeHiddenAreas.event, this._updateCounter = 0, this._onBeginUpdate = this._register(new N()), this.onBeginUpdate = this._onBeginUpdate.event, this._onEndUpdate = this._register(new N()), this.onEndUpdate = this._onEndUpdate.event, this._actions = /* @__PURE__ */ new Map(), this._bannerDomNode = null, this._dropIntoEditorDecorations = this.createDecorationsCollection(), i10.willCreateCodeEditor();
      let f10 = {
        ...t10
      };
      this._domElement = e10, this._overflowWidgetsDomNode = f10.overflowWidgetsDomNode, delete f10.overflowWidgetsDomNode, this._id = ++_3, this._decorationTypeKeysToIds = {}, this._decorationTypeSubtypes = {}, this._telemetryData = n10.telemetryData, this._configuration = this._register(this._createConfiguration(n10.isSimpleWidget || false, n10.contextMenuId ?? (n10.isSimpleWidget ? hm.SimpleEditorContext : hm.EditorContext), f10, l10)), this._register(this._configuration.onDidChange((e11) => {
        this._onDidChangeConfiguration.fire(e11);
        let t11 = this._configuration.options;
        if (e11.hasChanged(146)) {
          let e12 = t11.get(146);
          this._onDidLayoutChange.fire(e12);
        }
      })), this._contextKeyService = this._register(o10.createScoped(this._domElement)), this._notificationService = c10, this._codeEditorService = i10, this._commandService = a10, this._themeService = s10, this._register(new x3(this, this._contextKeyService)), this._register(new S3(this, this._contextKeyService, d10)), this._instantiationService = this._register(r10.createChild(new uY([
        qp,
        this._contextKeyService
      ]))), this._modelData = null, this._focusTracker = new C3(e10, this._overflowWidgetsDomNode), this._register(this._focusTracker.onChange(() => {
        this._editorWidgetFocus.setValue(this._focusTracker.hasFocus());
      })), this._contentWidgets = {}, this._overlayWidgets = {}, this._glyphMarginWidgets = {};
      let p10;
      p10 = Array.isArray(n10.contributions) ? n10.contributions : Um.getEditorContributions(), this._contributions.initialize(this, p10, this._instantiationService);
      for (let e11 of Um.getEditorActions()) {
        if (this._actions.has(e11.id)) {
          gr(Error(`Cannot have two actions with the same id ${e11.id}`));
          continue;
        }
        let t11 = new M2(e11.id, e11.label, e11.alias, e11.metadata, e11.precondition ?? void 0, (t12) => this._instantiationService.invokeFunction((n11) => Promise.resolve(e11.runEditorCommand(n11, this, t12))), this._contextKeyService);
        this._actions.set(t11.id, t11);
      }
      let m10 = () => !this._configuration.options.get(92) && this._configuration.options.get(36).enabled;
      this._register(new Sf(this._domElement, {
        onDragOver: (e11) => {
          if (!m10()) return;
          let t11 = this.getTargetAtClientPoint(e11.clientX, e11.clientY);
          (t11 == null ? void 0 : t11.position) && this.showDropIndicatorAt(t11.position);
        },
        onDrop: async (e11) => {
          if (!m10() || (this.removeDropIndicator(), !e11.dataTransfer)) return;
          let t11 = this.getTargetAtClientPoint(e11.clientX, e11.clientY);
          (t11 == null ? void 0 : t11.position) && this._onDropIntoEditor.fire({
            position: t11.position,
            event: e11
          });
        },
        onDragLeave: () => {
          this.removeDropIndicator();
        },
        onDragEnd: () => {
          this.removeDropIndicator();
        }
      })), this._codeEditorService.addCodeEditor(this);
    }
    writeScreenReaderContent(e10) {
      var _a3;
      (_a3 = this._modelData) == null ? void 0 : _a3.view.writeScreenReaderContent(e10);
    }
    _createConfiguration(e10, t10, n10, r10) {
      return new kZ(e10, t10, n10, this._domElement, r10);
    }
    getId() {
      return this.getEditorType() + `:` + this._id;
    }
    getEditorType() {
      return oX.ICodeEditor;
    }
    dispose() {
      this._codeEditorService.removeCodeEditor(this), this._focusTracker.dispose(), this._actions.clear(), this._contentWidgets = {}, this._overlayWidgets = {}, this._removeDecorationTypes(), this._postDetachModelCleanup(this._detachModel()), this._onDidDispose.fire(), super.dispose();
    }
    invokeWithinContext(e10) {
      return this._instantiationService.invokeFunction(e10);
    }
    updateOptions(e10) {
      this._configuration.updateOptions(e10 || {});
    }
    getOptions() {
      return this._configuration.options;
    }
    getOption(e10) {
      return this._configuration.options.get(e10);
    }
    getRawOptions() {
      return this._configuration.getRawOptions();
    }
    getOverflowWidgetsDomNode() {
      return this._overflowWidgetsDomNode;
    }
    getConfiguredWordAtPosition(e10) {
      return this._modelData ? O$.getWordAtPosition(this._modelData.model, this._configuration.options.get(132), this._configuration.options.get(131), e10) : null;
    }
    getValue(e10 = null) {
      if (!this._modelData) return ``;
      let t10 = !!(e10 && e10.preserveBOM), n10 = 0;
      return e10 && e10.lineEnding && e10.lineEnding === `
` ? n10 = 1 : e10 && e10.lineEnding && e10.lineEnding === `\r
` && (n10 = 2), this._modelData.model.getValue(n10, t10);
    }
    setValue(e10) {
      try {
        if (this._beginUpdate(), !this._modelData) return;
        this._modelData.model.setValue(e10);
      } finally {
        this._endUpdate();
      }
    }
    getModel() {
      return this._modelData ? this._modelData.model : null;
    }
    setModel(e10 = null) {
      var _a3;
      try {
        this._beginUpdate();
        let t10 = e10;
        if (this._modelData === null && t10 === null || this._modelData && this._modelData.model === t10) return;
        let n10 = {
          oldModelUrl: ((_a3 = this._modelData) == null ? void 0 : _a3.model.uri) || null,
          newModelUrl: (t10 == null ? void 0 : t10.uri) || null
        };
        this._onWillChangeModel.fire(n10);
        let r10 = this.hasTextFocus(), i10 = this._detachModel();
        this._attachModel(t10), r10 && this.hasModel() && this.focus(), this._removeDecorationTypes(), this._onDidChangeModel.fire(n10), this._postDetachModelCleanup(i10), this._contributionsDisposable = this._contributions.onAfterModelAttached();
      } finally {
        this._endUpdate();
      }
    }
    _removeDecorationTypes() {
      if (this._decorationTypeKeysToIds = {}, this._decorationTypeSubtypes) {
        for (let e10 in this._decorationTypeSubtypes) {
          let t10 = this._decorationTypeSubtypes[e10];
          for (let n10 in t10) this._removeDecorationType(e10 + `-` + n10);
        }
        this._decorationTypeSubtypes = {};
      }
    }
    getVisibleRanges() {
      return this._modelData ? this._modelData.viewModel.getVisibleRanges() : [];
    }
    getVisibleRangesPlusViewportAboveBelow() {
      return this._modelData ? this._modelData.viewModel.getVisibleRangesPlusViewportAboveBelow() : [];
    }
    getWhitespaces() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getWhitespaces() : [];
    }
    static _getVerticalOffsetAfterPosition(e10, t10, n10, r10) {
      let i10 = e10.model.validatePosition({
        lineNumber: t10,
        column: n10
      }), a10 = e10.viewModel.coordinatesConverter.convertModelPositionToViewPosition(i10);
      return e10.viewModel.viewLayout.getVerticalOffsetAfterLineNumber(a10.lineNumber, r10);
    }
    getTopForLineNumber(e10, t10 = false) {
      return this._modelData ? h3._getVerticalOffsetForPosition(this._modelData, e10, 1, t10) : -1;
    }
    getTopForPosition(e10, t10) {
      return this._modelData ? h3._getVerticalOffsetForPosition(this._modelData, e10, t10, false) : -1;
    }
    static _getVerticalOffsetForPosition(e10, t10, n10, r10 = false) {
      let i10 = e10.model.validatePosition({
        lineNumber: t10,
        column: n10
      }), a10 = e10.viewModel.coordinatesConverter.convertModelPositionToViewPosition(i10);
      return e10.viewModel.viewLayout.getVerticalOffsetForLineNumber(a10.lineNumber, r10);
    }
    getBottomForLineNumber(e10, t10 = false) {
      if (!this._modelData) return -1;
      let n10 = this._modelData.model.getLineMaxColumn(e10);
      return h3._getVerticalOffsetAfterPosition(this._modelData, e10, n10, t10);
    }
    setHiddenAreas(e10, t10) {
      var _a3;
      (_a3 = this._modelData) == null ? void 0 : _a3.viewModel.setHiddenAreas(e10.map((e11) => F.lift(e11)), t10);
    }
    getVisibleColumnFromPosition(e10) {
      if (!this._modelData) return e10.column;
      let t10 = this._modelData.model.validatePosition(e10), n10 = this._modelData.model.getOptions().tabSize;
      return gR.visibleColumnFromColumn(this._modelData.model.getLineContent(t10.lineNumber), t10.column, n10) + 1;
    }
    getPosition() {
      return this._modelData ? this._modelData.viewModel.getPosition() : null;
    }
    setPosition(e10, t10 = `api`) {
      if (this._modelData) {
        if (!P.isIPosition(e10)) throw Error(`Invalid arguments`);
        this._modelData.viewModel.setSelections(t10, [
          {
            selectionStartLineNumber: e10.lineNumber,
            selectionStartColumn: e10.column,
            positionLineNumber: e10.lineNumber,
            positionColumn: e10.column
          }
        ]);
      }
    }
    _sendRevealRange(e10, t10, n10, r10) {
      if (!this._modelData) return;
      if (!F.isIRange(e10)) throw Error(`Invalid arguments`);
      let i10 = this._modelData.model.validateRange(e10), a10 = this._modelData.viewModel.coordinatesConverter.convertModelRangeToViewRange(i10);
      this._modelData.viewModel.revealRange(`api`, n10, a10, t10, r10);
    }
    revealLine(e10, t10 = 0) {
      this._revealLine(e10, 0, t10);
    }
    revealLineInCenter(e10, t10 = 0) {
      this._revealLine(e10, 1, t10);
    }
    revealLineInCenterIfOutsideViewport(e10, t10 = 0) {
      this._revealLine(e10, 2, t10);
    }
    revealLineNearTop(e10, t10 = 0) {
      this._revealLine(e10, 5, t10);
    }
    _revealLine(e10, t10, n10) {
      if (typeof e10 != `number`) throw Error(`Invalid arguments`);
      this._sendRevealRange(new F(e10, 1, e10, 1), t10, false, n10);
    }
    revealPosition(e10, t10 = 0) {
      this._revealPosition(e10, 0, true, t10);
    }
    revealPositionInCenter(e10, t10 = 0) {
      this._revealPosition(e10, 1, true, t10);
    }
    revealPositionInCenterIfOutsideViewport(e10, t10 = 0) {
      this._revealPosition(e10, 2, true, t10);
    }
    revealPositionNearTop(e10, t10 = 0) {
      this._revealPosition(e10, 5, true, t10);
    }
    _revealPosition(e10, t10, n10, r10) {
      if (!P.isIPosition(e10)) throw Error(`Invalid arguments`);
      this._sendRevealRange(new F(e10.lineNumber, e10.column, e10.lineNumber, e10.column), t10, n10, r10);
    }
    getSelection() {
      return this._modelData ? this._modelData.viewModel.getSelection() : null;
    }
    getSelections() {
      return this._modelData ? this._modelData.viewModel.getSelections() : null;
    }
    setSelection(e10, t10 = `api`) {
      let n10 = Ma.isISelection(e10), r10 = F.isIRange(e10);
      if (!n10 && !r10) throw Error(`Invalid arguments`);
      if (n10) this._setSelectionImpl(e10, t10);
      else if (r10) {
        let n11 = {
          selectionStartLineNumber: e10.startLineNumber,
          selectionStartColumn: e10.startColumn,
          positionLineNumber: e10.endLineNumber,
          positionColumn: e10.endColumn
        };
        this._setSelectionImpl(n11, t10);
      }
    }
    _setSelectionImpl(e10, t10) {
      if (!this._modelData) return;
      let n10 = new Ma(e10.selectionStartLineNumber, e10.selectionStartColumn, e10.positionLineNumber, e10.positionColumn);
      this._modelData.viewModel.setSelections(t10, [
        n10
      ]);
    }
    revealLines(e10, t10, n10 = 0) {
      this._revealLines(e10, t10, 0, n10);
    }
    revealLinesInCenter(e10, t10, n10 = 0) {
      this._revealLines(e10, t10, 1, n10);
    }
    revealLinesInCenterIfOutsideViewport(e10, t10, n10 = 0) {
      this._revealLines(e10, t10, 2, n10);
    }
    revealLinesNearTop(e10, t10, n10 = 0) {
      this._revealLines(e10, t10, 5, n10);
    }
    _revealLines(e10, t10, n10, r10) {
      if (typeof e10 != `number` || typeof t10 != `number`) throw Error(`Invalid arguments`);
      this._sendRevealRange(new F(e10, 1, t10, 1), n10, false, r10);
    }
    revealRange(e10, t10 = 0, n10 = false, r10 = true) {
      this._revealRange(e10, n10 ? 1 : 0, r10, t10);
    }
    revealRangeInCenter(e10, t10 = 0) {
      this._revealRange(e10, 1, true, t10);
    }
    revealRangeInCenterIfOutsideViewport(e10, t10 = 0) {
      this._revealRange(e10, 2, true, t10);
    }
    revealRangeNearTop(e10, t10 = 0) {
      this._revealRange(e10, 5, true, t10);
    }
    revealRangeNearTopIfOutsideViewport(e10, t10 = 0) {
      this._revealRange(e10, 6, true, t10);
    }
    revealRangeAtTop(e10, t10 = 0) {
      this._revealRange(e10, 3, true, t10);
    }
    _revealRange(e10, t10, n10, r10) {
      if (!F.isIRange(e10)) throw Error(`Invalid arguments`);
      this._sendRevealRange(F.lift(e10), t10, n10, r10);
    }
    setSelections(e10, t10 = `api`, n10 = 0) {
      if (this._modelData) {
        if (!e10 || e10.length === 0) throw Error(`Invalid arguments`);
        for (let t11 = 0, n11 = e10.length; t11 < n11; t11++) if (!Ma.isISelection(e10[t11])) throw Error(`Invalid arguments`);
        this._modelData.viewModel.setSelections(t10, e10, n10);
      }
    }
    getContentWidth() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getContentWidth() : -1;
    }
    getScrollWidth() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getScrollWidth() : -1;
    }
    getScrollLeft() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getCurrentScrollLeft() : -1;
    }
    getContentHeight() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getContentHeight() : -1;
    }
    getScrollHeight() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getScrollHeight() : -1;
    }
    getScrollTop() {
      return this._modelData ? this._modelData.viewModel.viewLayout.getCurrentScrollTop() : -1;
    }
    setScrollLeft(e10, t10 = 1) {
      if (this._modelData) {
        if (typeof e10 != `number`) throw Error(`Invalid arguments`);
        this._modelData.viewModel.viewLayout.setScrollPosition({
          scrollLeft: e10
        }, t10);
      }
    }
    setScrollTop(e10, t10 = 1) {
      if (this._modelData) {
        if (typeof e10 != `number`) throw Error(`Invalid arguments`);
        this._modelData.viewModel.viewLayout.setScrollPosition({
          scrollTop: e10
        }, t10);
      }
    }
    setScrollPosition(e10, t10 = 1) {
      this._modelData && this._modelData.viewModel.viewLayout.setScrollPosition(e10, t10);
    }
    hasPendingScrollAnimation() {
      return this._modelData ? this._modelData.viewModel.viewLayout.hasPendingScrollAnimation() : false;
    }
    saveViewState() {
      if (!this._modelData) return null;
      let e10 = this._contributions.saveViewState(), t10 = this._modelData.viewModel.saveCursorState(), n10 = this._modelData.viewModel.saveState();
      return {
        cursorState: t10,
        viewState: n10,
        contributionsState: e10
      };
    }
    restoreViewState(e10) {
      if (!this._modelData || !this._modelData.hasRealView) return;
      let t10 = e10;
      if (t10 && t10.cursorState && t10.viewState) {
        let e11 = t10.cursorState;
        Array.isArray(e11) ? e11.length > 0 && this._modelData.viewModel.restoreCursorState(e11) : this._modelData.viewModel.restoreCursorState([
          e11
        ]), this._contributions.restoreViewState(t10.contributionsState || {});
        let n10 = this._modelData.viewModel.reduceRestoreState(t10.viewState);
        this._modelData.view.restoreState(n10);
      }
    }
    handleInitialized() {
      var _a3;
      (_a3 = this._getViewModel()) == null ? void 0 : _a3.visibleLinesStabilized();
    }
    getContribution(e10) {
      return this._contributions.get(e10);
    }
    getActions() {
      return Array.from(this._actions.values());
    }
    getSupportedActions() {
      let e10 = this.getActions();
      return e10 = e10.filter((e11) => e11.isSupported()), e10;
    }
    getAction(e10) {
      return this._actions.get(e10) || null;
    }
    trigger(e10, t10, n10) {
      n10 || (n10 = {});
      try {
        switch (this._beginUpdate(), t10) {
          case `compositionStart`:
            this._startComposition();
            return;
          case `compositionEnd`:
            this._endComposition(e10);
            return;
          case `type`: {
            let t11 = n10;
            this._type(e10, t11.text || ``);
            return;
          }
          case `replacePreviousChar`: {
            let t11 = n10;
            this._compositionType(e10, t11.text || ``, t11.replaceCharCnt || 0, 0, 0);
            return;
          }
          case `compositionType`: {
            let t11 = n10;
            this._compositionType(e10, t11.text || ``, t11.replacePrevCharCnt || 0, t11.replaceNextCharCnt || 0, t11.positionDelta || 0);
            return;
          }
          case `paste`: {
            let t11 = n10;
            this._paste(e10, t11.text || ``, t11.pasteOnNewLine || false, t11.multicursorText || null, t11.mode || null, t11.clipboardEvent);
            return;
          }
          case `cut`:
            this._cut(e10);
            return;
        }
        let r10 = this.getAction(t10);
        if (r10) {
          Promise.resolve(r10.run(n10)).then(void 0, gr);
          return;
        }
        if (!this._modelData || this._triggerEditorCommand(e10, t10, n10)) return;
        this._triggerCommand(t10, n10);
      } finally {
        this._endUpdate();
      }
    }
    _triggerCommand(e10, t10) {
      this._commandService.executeCommand(e10, t10);
    }
    _startComposition() {
      this._modelData && (this._modelData.viewModel.startComposition(), this._onDidCompositionStart.fire());
    }
    _endComposition(e10) {
      this._modelData && (this._modelData.viewModel.endComposition(e10), this._onDidCompositionEnd.fire());
    }
    _type(e10, t10) {
      !this._modelData || t10.length === 0 || (e10 === `keyboard` && this._onWillType.fire(t10), this._modelData.viewModel.type(t10, e10), e10 === `keyboard` && this._onDidType.fire(t10));
    }
    _compositionType(e10, t10, n10, r10, i10) {
      this._modelData && this._modelData.viewModel.compositionType(t10, n10, r10, i10, e10);
    }
    _paste(e10, t10, n10, r10, i10, a10) {
      if (!this._modelData) return;
      let o10 = this._modelData.viewModel, s10 = o10.getSelection().getStartPosition();
      o10.paste(t10, n10, r10, e10);
      let c10 = o10.getSelection().getStartPosition();
      e10 === `keyboard` && this._onDidPaste.fire({
        clipboardEvent: a10,
        range: new F(s10.lineNumber, s10.column, c10.lineNumber, c10.column),
        languageId: i10
      });
    }
    _cut(e10) {
      this._modelData && this._modelData.viewModel.cut(e10);
    }
    _triggerEditorCommand(e10, t10, n10) {
      let r10 = Um.getEditorCommand(t10);
      return r10 ? (n10 || (n10 = {}), n10.source = e10, this._instantiationService.invokeFunction((e11) => {
        Promise.resolve(r10.runEditorCommand(e11, this, n10)).then(void 0, gr);
      }), true) : false;
    }
    _getViewModel() {
      return this._modelData ? this._modelData.viewModel : null;
    }
    pushUndoStop() {
      return !this._modelData || this._configuration.options.get(92) ? false : (this._modelData.model.pushStackElement(), true);
    }
    popUndoStop() {
      return !this._modelData || this._configuration.options.get(92) ? false : (this._modelData.model.popStackElement(), true);
    }
    executeEdits(e10, t10, n10) {
      if (!this._modelData || this._configuration.options.get(92)) return false;
      let r10;
      return r10 = n10 ? Array.isArray(n10) ? () => n10 : n10 : () => null, this._modelData.viewModel.executeEdits(e10, t10, r10), true;
    }
    executeCommand(e10, t10) {
      this._modelData && this._modelData.viewModel.executeCommand(t10, e10);
    }
    executeCommands(e10, t10) {
      this._modelData && this._modelData.viewModel.executeCommands(t10, e10);
    }
    createDecorationsCollection(e10) {
      return new w3(this, e10);
    }
    changeDecorations(e10) {
      return this._modelData ? this._modelData.model.changeDecorations(e10, this._id) : null;
    }
    getLineDecorations(e10) {
      return this._modelData ? this._modelData.model.getLineDecorations(e10, this._id, Hn(this._configuration.options)) : null;
    }
    getDecorationsInRange(e10) {
      return this._modelData ? this._modelData.model.getDecorationsInRange(e10, this._id, Hn(this._configuration.options)) : null;
    }
    deltaDecorations(e10, t10) {
      return this._modelData ? e10.length === 0 && t10.length === 0 ? e10 : this._modelData.model.deltaDecorations(e10, t10, this._id) : [];
    }
    removeDecorations(e10) {
      !this._modelData || e10.length === 0 || this._modelData.model.changeDecorations((t10) => {
        t10.deltaDecorations(e10, []);
      });
    }
    removeDecorationsByType(e10) {
      let t10 = this._decorationTypeKeysToIds[e10];
      t10 && this.changeDecorations((e11) => e11.deltaDecorations(t10, [])), this._decorationTypeKeysToIds.hasOwnProperty(e10) && delete this._decorationTypeKeysToIds[e10], this._decorationTypeSubtypes.hasOwnProperty(e10) && delete this._decorationTypeSubtypes[e10];
    }
    getLayoutInfo() {
      let e10 = this._configuration.options, t10 = e10.get(146);
      return t10;
    }
    createOverviewRuler(e10) {
      return !this._modelData || !this._modelData.hasRealView ? null : this._modelData.view.createOverviewRuler(e10);
    }
    getContainerDomNode() {
      return this._domElement;
    }
    getDomNode() {
      return !this._modelData || !this._modelData.hasRealView ? null : this._modelData.view.domNode.domNode;
    }
    delegateVerticalScrollbarPointerDown(e10) {
      !this._modelData || !this._modelData.hasRealView || this._modelData.view.delegateVerticalScrollbarPointerDown(e10);
    }
    delegateScrollFromMouseWheelEvent(e10) {
      !this._modelData || !this._modelData.hasRealView || this._modelData.view.delegateScrollFromMouseWheelEvent(e10);
    }
    layout(e10, t10 = false) {
      this._configuration.observeContainer(e10), t10 || this.render();
    }
    focus() {
      !this._modelData || !this._modelData.hasRealView || this._modelData.view.focus();
    }
    hasTextFocus() {
      return !this._modelData || !this._modelData.hasRealView ? false : this._modelData.view.isFocused();
    }
    hasWidgetFocus() {
      return this._focusTracker && this._focusTracker.hasFocus();
    }
    addContentWidget(e10) {
      let t10 = {
        widget: e10,
        position: e10.getPosition()
      };
      this._contentWidgets.hasOwnProperty(e10.getId()) && console.warn(`Overwriting a content widget with the same id:` + e10.getId()), this._contentWidgets[e10.getId()] = t10, this._modelData && this._modelData.hasRealView && this._modelData.view.addContentWidget(t10);
    }
    layoutContentWidget(e10) {
      let t10 = e10.getId();
      if (this._contentWidgets.hasOwnProperty(t10)) {
        let n10 = this._contentWidgets[t10];
        n10.position = e10.getPosition(), this._modelData && this._modelData.hasRealView && this._modelData.view.layoutContentWidget(n10);
      }
    }
    removeContentWidget(e10) {
      let t10 = e10.getId();
      if (this._contentWidgets.hasOwnProperty(t10)) {
        let e11 = this._contentWidgets[t10];
        delete this._contentWidgets[t10], this._modelData && this._modelData.hasRealView && this._modelData.view.removeContentWidget(e11);
      }
    }
    addOverlayWidget(e10) {
      let t10 = {
        widget: e10,
        position: e10.getPosition()
      };
      this._overlayWidgets.hasOwnProperty(e10.getId()) && console.warn(`Overwriting an overlay widget with the same id.`), this._overlayWidgets[e10.getId()] = t10, this._modelData && this._modelData.hasRealView && this._modelData.view.addOverlayWidget(t10);
    }
    layoutOverlayWidget(e10) {
      let t10 = e10.getId();
      if (this._overlayWidgets.hasOwnProperty(t10)) {
        let n10 = this._overlayWidgets[t10];
        n10.position = e10.getPosition(), this._modelData && this._modelData.hasRealView && this._modelData.view.layoutOverlayWidget(n10);
      }
    }
    removeOverlayWidget(e10) {
      let t10 = e10.getId();
      if (this._overlayWidgets.hasOwnProperty(t10)) {
        let e11 = this._overlayWidgets[t10];
        delete this._overlayWidgets[t10], this._modelData && this._modelData.hasRealView && this._modelData.view.removeOverlayWidget(e11);
      }
    }
    addGlyphMarginWidget(e10) {
      let t10 = {
        widget: e10,
        position: e10.getPosition()
      };
      this._glyphMarginWidgets.hasOwnProperty(e10.getId()) && console.warn(`Overwriting a glyph margin widget with the same id.`), this._glyphMarginWidgets[e10.getId()] = t10, this._modelData && this._modelData.hasRealView && this._modelData.view.addGlyphMarginWidget(t10);
    }
    layoutGlyphMarginWidget(e10) {
      let t10 = e10.getId();
      if (this._glyphMarginWidgets.hasOwnProperty(t10)) {
        let n10 = this._glyphMarginWidgets[t10];
        n10.position = e10.getPosition(), this._modelData && this._modelData.hasRealView && this._modelData.view.layoutGlyphMarginWidget(n10);
      }
    }
    removeGlyphMarginWidget(e10) {
      let t10 = e10.getId();
      if (this._glyphMarginWidgets.hasOwnProperty(t10)) {
        let e11 = this._glyphMarginWidgets[t10];
        delete this._glyphMarginWidgets[t10], this._modelData && this._modelData.hasRealView && this._modelData.view.removeGlyphMarginWidget(e11);
      }
    }
    changeViewZones(e10) {
      !this._modelData || !this._modelData.hasRealView || this._modelData.view.change(e10);
    }
    getTargetAtClientPoint(e10, t10) {
      return !this._modelData || !this._modelData.hasRealView ? null : this._modelData.view.getTargetAtClientPoint(e10, t10);
    }
    getScrolledVisiblePosition(e10) {
      if (!this._modelData || !this._modelData.hasRealView) return null;
      let t10 = this._modelData.model.validatePosition(e10), n10 = this._configuration.options, r10 = n10.get(146), i10 = h3._getVerticalOffsetForPosition(this._modelData, t10.lineNumber, t10.column) - this.getScrollTop(), a10 = this._modelData.view.getOffsetForColumn(t10.lineNumber, t10.column) + r10.glyphMarginWidth + r10.lineNumbersWidth + r10.decorationsWidth - this.getScrollLeft();
      return {
        top: i10,
        left: a10,
        height: n10.get(67)
      };
    }
    getOffsetForColumn(e10, t10) {
      return !this._modelData || !this._modelData.hasRealView ? -1 : this._modelData.view.getOffsetForColumn(e10, t10);
    }
    render(e10 = false) {
      !this._modelData || !this._modelData.hasRealView || this._modelData.viewModel.batchEvents(() => {
        this._modelData.view.render(true, e10);
      });
    }
    setAriaOptions(e10) {
      !this._modelData || !this._modelData.hasRealView || this._modelData.view.setAriaOptions(e10);
    }
    applyFontInfo(e10) {
      Pf(e10, this._configuration.options.get(50));
    }
    setBanner(e10, t10) {
      this._bannerDomNode && this._domElement.contains(this._bannerDomNode) && this._bannerDomNode.remove(), this._bannerDomNode = e10, this._configuration.setReservedHeight(e10 ? t10 : 0), this._bannerDomNode && this._domElement.prepend(this._bannerDomNode);
    }
    _attachModel(e10) {
      if (!e10) {
        this._modelData = null;
        return;
      }
      let t10 = [];
      this._domElement.setAttribute(`data-mode-id`, e10.getLanguageId()), this._configuration.setIsDominatedByLongLines(e10.isDominatedByLongLines()), this._configuration.setModelLineCount(e10.getLineCount());
      let n10 = e10.onBeforeAttached(), r10 = new o3(this._id, this._configuration, e10, T2.create(R(this._domElement)), N2.create(this._configuration.options), (e11) => sd(R(this._domElement), e11), this.languageConfigurationService, this._themeService, n10, {
        batchChanges: (e11) => {
          try {
            return this._beginUpdate(), e11();
          } finally {
            this._endUpdate();
          }
        }
      });
      t10.push(e10.onWillDispose(() => this.setModel(null))), t10.push(r10.onEvent((t11) => {
        switch (t11.kind) {
          case 0:
            this._onDidContentSizeChange.fire(t11);
            break;
          case 1:
            this._editorTextFocus.setValue(t11.hasFocus);
            break;
          case 2:
            this._onDidScrollChange.fire(t11);
            break;
          case 3:
            this._onDidChangeViewZones.fire();
            break;
          case 4:
            this._onDidChangeHiddenAreas.fire();
            break;
          case 5:
            this._onDidAttemptReadOnlyEdit.fire();
            break;
          case 6: {
            if (t11.reachedMaxCursorCount) {
              let e12 = this.getOption(80), t12 = T(`cursors.maximum`, `The number of cursors has been limited to {0}. Consider using [find and replace](https://code.visualstudio.com/docs/editor/codebasics#_find-and-replace) for larger changes or increase the editor multi cursor limit setting.`, e12);
              this._notificationService.prompt(lx.Warning, t12, [
                {
                  label: `Find and Replace`,
                  run: () => {
                    this._commandService.executeCommand(`editor.action.startFindReplaceAction`);
                  }
                },
                {
                  label: T(`goToSetting`, `Increase Multi Cursor Limit`),
                  run: () => {
                    this._commandService.executeCommand(`workbench.action.openSettings2`, {
                      query: `editor.multiCursorLimit`
                    });
                  }
                }
              ]);
            }
            let e11 = [];
            for (let n12 = 0, r12 = t11.selections.length; n12 < r12; n12++) e11[n12] = t11.selections[n12].getPosition();
            let n11 = {
              position: e11[0],
              secondaryPositions: e11.slice(1),
              reason: t11.reason,
              source: t11.source
            };
            this._onDidChangeCursorPosition.fire(n11);
            let r11 = {
              selection: t11.selections[0],
              secondarySelections: t11.selections.slice(1),
              modelVersionId: t11.modelVersionId,
              oldSelections: t11.oldSelections,
              oldModelVersionId: t11.oldModelVersionId,
              source: t11.source,
              reason: t11.reason
            };
            this._onDidChangeCursorSelection.fire(r11);
            break;
          }
          case 7:
            this._onDidChangeModelDecorations.fire(t11.event);
            break;
          case 8:
            this._domElement.setAttribute(`data-mode-id`, e10.getLanguageId()), this._onDidChangeModelLanguage.fire(t11.event);
            break;
          case 9:
            this._onDidChangeModelLanguageConfiguration.fire(t11.event);
            break;
          case 10:
            this._onDidChangeModelContent.fire(t11.event);
            break;
          case 11:
            this._onDidChangeModelOptions.fire(t11.event);
            break;
          case 12:
            this._onDidChangeModelTokens.fire(t11.event);
            break;
        }
      }));
      let [i10, a10] = this._createView(r10);
      if (a10) {
        this._domElement.appendChild(i10.domNode.domNode);
        let t11 = Object.keys(this._contentWidgets);
        for (let e11 = 0, n11 = t11.length; e11 < n11; e11++) {
          let n12 = t11[e11];
          i10.addContentWidget(this._contentWidgets[n12]);
        }
        t11 = Object.keys(this._overlayWidgets);
        for (let e11 = 0, n11 = t11.length; e11 < n11; e11++) {
          let n12 = t11[e11];
          i10.addOverlayWidget(this._overlayWidgets[n12]);
        }
        t11 = Object.keys(this._glyphMarginWidgets);
        for (let e11 = 0, n11 = t11.length; e11 < n11; e11++) {
          let n12 = t11[e11];
          i10.addGlyphMarginWidget(this._glyphMarginWidgets[n12]);
        }
        i10.render(false, true), i10.domNode.domNode.setAttribute(`data-uri`, e10.uri.toString());
      }
      this._modelData = new v3(e10, r10, i10, a10, t10, n10);
    }
    _createView(e10) {
      let t10;
      t10 = this.isSimpleWidget ? {
        paste: (e11, t11, n11, r11) => {
          this._paste(`keyboard`, e11, t11, n11, r11);
        },
        type: (e11) => {
          this._type(`keyboard`, e11);
        },
        compositionType: (e11, t11, n11, r11) => {
          this._compositionType(`keyboard`, e11, t11, n11, r11);
        },
        startComposition: () => {
          this._startComposition();
        },
        endComposition: () => {
          this._endComposition(`keyboard`);
        },
        cut: () => {
          this._cut(`keyboard`);
        }
      } : {
        paste: (e11, t11, n11, r11) => {
          let i10 = {
            text: e11,
            pasteOnNewLine: t11,
            multicursorText: n11,
            mode: r11
          };
          this._commandService.executeCommand(`paste`, i10);
        },
        type: (e11) => {
          let t11 = {
            text: e11
          };
          this._commandService.executeCommand(`type`, t11);
        },
        compositionType: (e11, t11, n11, r11) => {
          if (n11 || r11) {
            let i10 = {
              text: e11,
              replacePrevCharCnt: t11,
              replaceNextCharCnt: n11,
              positionDelta: r11
            };
            this._commandService.executeCommand(`compositionType`, i10);
          } else {
            let n12 = {
              text: e11,
              replaceCharCnt: t11
            };
            this._commandService.executeCommand(`replacePreviousChar`, n12);
          }
        },
        startComposition: () => {
          this._commandService.executeCommand(`compositionStart`, {});
        },
        endComposition: () => {
          this._commandService.executeCommand(`compositionEnd`, {});
        },
        cut: () => {
          this._commandService.executeCommand(`cut`, {});
        }
      };
      let n10 = new G1(e10.coordinatesConverter);
      n10.onKeyDown = (e11) => this._onKeyDown.fire(e11), n10.onKeyUp = (e11) => this._onKeyUp.fire(e11), n10.onContextMenu = (e11) => this._onContextMenu.fire(e11), n10.onMouseMove = (e11) => this._onMouseMove.fire(e11), n10.onMouseLeave = (e11) => this._onMouseLeave.fire(e11), n10.onMouseDown = (e11) => this._onMouseDown.fire(e11), n10.onMouseUp = (e11) => this._onMouseUp.fire(e11), n10.onMouseDrag = (e11) => this._onMouseDrag.fire(e11), n10.onMouseDrop = (e11) => this._onMouseDrop.fire(e11), n10.onMouseDropCanceled = (e11) => this._onMouseDropCanceled.fire(e11), n10.onMouseWheel = (e11) => this._onMouseWheel.fire(e11);
      let r10 = new _2(t10, this._configuration, this._themeService.getColorTheme(), e10, n10, this._overflowWidgetsDomNode, this._instantiationService);
      return [
        r10,
        true
      ];
    }
    _postDetachModelCleanup(e10) {
      e10 == null ? void 0 : e10.removeAllDecorationsWithOwnerId(this._id);
    }
    _detachModel() {
      var _a3;
      if ((_a3 = this._contributionsDisposable) == null ? void 0 : _a3.dispose(), this._contributionsDisposable = void 0, !this._modelData) return null;
      let e10 = this._modelData.model, t10 = this._modelData.hasRealView ? this._modelData.view.domNode.domNode : null;
      return this._modelData.dispose(), this._modelData = null, this._domElement.removeAttribute(`data-mode-id`), t10 && this._domElement.contains(t10) && t10.remove(), this._bannerDomNode && this._domElement.contains(this._bannerDomNode) && this._bannerDomNode.remove(), e10;
    }
    _removeDecorationType(e10) {
      this._codeEditorService.removeDecorationType(e10);
    }
    hasModel() {
      return this._modelData !== null;
    }
    showDropIndicatorAt(e10) {
      let t10 = [
        {
          range: new F(e10.lineNumber, e10.column, e10.lineNumber, e10.column),
          options: h3.dropIntoEditorDecorationOptions
        }
      ];
      this._dropIntoEditorDecorations.set(t10), this.revealPosition(e10, 1);
    }
    removeDropIndicator() {
      this._dropIntoEditorDecorations.clear();
    }
    setContextValue(e10, t10) {
      this._contextKeyService.createKey(e10, t10);
    }
    _beginUpdate() {
      this._updateCounter++, this._updateCounter === 1 && this._onBeginUpdate.fire();
    }
    _endUpdate() {
      this._updateCounter--, this._updateCounter === 0 && this._onEndUpdate.fire();
    }
  }, h3 = _gb, _gb.dropIntoEditorDecorationOptions = _H.register({
    description: `workbench-dnd-target`,
    className: `dnd-target`
  }), _gb);
  g3 = h3 = p3([
    m3(3, Jf),
    m3(4, Zf),
    m3(5, cp),
    m3(6, qp),
    m3(7, Vb),
    m3(8, ux),
    m3(9, zA),
    m3(10, i_),
    m3(11, Ob)
  ], g3);
  let _3 = 0;
  var v3 = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.model = e10, this.viewModel = t10, this.view = n10, this.hasRealView = r10, this.listenersToRemove = i10, this.attachedView = a10;
    }
    dispose() {
      Rr(this.listenersToRemove), this.model.onBeforeDetached(this.attachedView), this.hasRealView && this.view.dispose(), this.viewModel.dispose();
    }
  }, y3 = class extends j {
    constructor(e10) {
      super(), this._emitterOptions = e10, this._onDidChangeToTrue = this._register(new N(this._emitterOptions)), this.onDidChangeToTrue = this._onDidChangeToTrue.event, this._onDidChangeToFalse = this._register(new N(this._emitterOptions)), this.onDidChangeToFalse = this._onDidChangeToFalse.event, this._value = 0;
    }
    setValue(e10) {
      let t10 = e10 ? 2 : 1;
      this._value !== t10 && (this._value = t10, this._value === 2 ? this._onDidChangeToTrue.fire() : this._value === 1 && this._onDidChangeToFalse.fire());
    }
  }, b3 = class extends N {
    constructor(e10, t10) {
      super({
        deliveryQueue: t10
      }), this._contributions = e10;
    }
    fire(e10) {
      this._contributions.onBeforeInteractionEvent(), super.fire(e10);
    }
  }, x3 = class extends j {
    constructor(e10, t10) {
      super(), this._editor = e10, t10.createKey(`editorId`, e10.getId()), this._editorSimpleInput = $.editorSimpleInput.bindTo(t10), this._editorFocus = $.focus.bindTo(t10), this._textInputFocus = $.textInputFocus.bindTo(t10), this._editorTextFocus = $.editorTextFocus.bindTo(t10), this._tabMovesFocus = $.tabMovesFocus.bindTo(t10), this._editorReadonly = $.readOnly.bindTo(t10), this._inDiffEditor = $.inDiffEditor.bindTo(t10), this._editorColumnSelection = $.columnSelection.bindTo(t10), this._hasMultipleSelections = $.hasMultipleSelections.bindTo(t10), this._hasNonEmptySelection = $.hasNonEmptySelection.bindTo(t10), this._canUndo = $.canUndo.bindTo(t10), this._canRedo = $.canRedo.bindTo(t10), this._register(this._editor.onDidChangeConfiguration(() => this._updateFromConfig())), this._register(this._editor.onDidChangeCursorSelection(() => this._updateFromSelection())), this._register(this._editor.onDidFocusEditorWidget(() => this._updateFromFocus())), this._register(this._editor.onDidBlurEditorWidget(() => this._updateFromFocus())), this._register(this._editor.onDidFocusEditorText(() => this._updateFromFocus())), this._register(this._editor.onDidBlurEditorText(() => this._updateFromFocus())), this._register(this._editor.onDidChangeModel(() => this._updateFromModel())), this._register(this._editor.onDidChangeConfiguration(() => this._updateFromModel())), this._register(EZ.onDidChangeTabFocus((e11) => this._tabMovesFocus.set(e11))), this._updateFromConfig(), this._updateFromSelection(), this._updateFromFocus(), this._updateFromModel(), this._editorSimpleInput.set(this._editor.isSimpleWidget);
    }
    _updateFromConfig() {
      let e10 = this._editor.getOptions();
      this._tabMovesFocus.set(EZ.getTabFocusMode()), this._editorReadonly.set(e10.get(92)), this._inDiffEditor.set(e10.get(61)), this._editorColumnSelection.set(e10.get(22));
    }
    _updateFromSelection() {
      let e10 = this._editor.getSelections();
      e10 ? (this._hasMultipleSelections.set(e10.length > 1), this._hasNonEmptySelection.set(e10.some((e11) => !e11.isEmpty()))) : (this._hasMultipleSelections.reset(), this._hasNonEmptySelection.reset());
    }
    _updateFromFocus() {
      this._editorFocus.set(this._editor.hasWidgetFocus() && !this._editor.isSimpleWidget), this._editorTextFocus.set(this._editor.hasTextFocus() && !this._editor.isSimpleWidget), this._textInputFocus.set(this._editor.hasTextFocus());
    }
    _updateFromModel() {
      let e10 = this._editor.getModel();
      this._canUndo.set(!!(e10 && e10.canUndo())), this._canRedo.set(!!(e10 && e10.canRedo()));
    }
  }, S3 = class extends j {
    constructor(e10, t10, n10) {
      super(), this._editor = e10, this._contextKeyService = t10, this._languageFeaturesService = n10, this._langId = $.languageId.bindTo(t10), this._hasCompletionItemProvider = $.hasCompletionItemProvider.bindTo(t10), this._hasCodeActionsProvider = $.hasCodeActionsProvider.bindTo(t10), this._hasCodeLensProvider = $.hasCodeLensProvider.bindTo(t10), this._hasDefinitionProvider = $.hasDefinitionProvider.bindTo(t10), this._hasDeclarationProvider = $.hasDeclarationProvider.bindTo(t10), this._hasImplementationProvider = $.hasImplementationProvider.bindTo(t10), this._hasTypeDefinitionProvider = $.hasTypeDefinitionProvider.bindTo(t10), this._hasHoverProvider = $.hasHoverProvider.bindTo(t10), this._hasDocumentHighlightProvider = $.hasDocumentHighlightProvider.bindTo(t10), this._hasDocumentSymbolProvider = $.hasDocumentSymbolProvider.bindTo(t10), this._hasReferenceProvider = $.hasReferenceProvider.bindTo(t10), this._hasRenameProvider = $.hasRenameProvider.bindTo(t10), this._hasSignatureHelpProvider = $.hasSignatureHelpProvider.bindTo(t10), this._hasInlayHintsProvider = $.hasInlayHintsProvider.bindTo(t10), this._hasDocumentFormattingProvider = $.hasDocumentFormattingProvider.bindTo(t10), this._hasDocumentSelectionFormattingProvider = $.hasDocumentSelectionFormattingProvider.bindTo(t10), this._hasMultipleDocumentFormattingProvider = $.hasMultipleDocumentFormattingProvider.bindTo(t10), this._hasMultipleDocumentSelectionFormattingProvider = $.hasMultipleDocumentSelectionFormattingProvider.bindTo(t10), this._isInEmbeddedEditor = $.isInEmbeddedEditor.bindTo(t10);
      let r10 = () => this._update();
      this._register(e10.onDidChangeModel(r10)), this._register(e10.onDidChangeModelLanguage(r10)), this._register(n10.completionProvider.onDidChange(r10)), this._register(n10.codeActionProvider.onDidChange(r10)), this._register(n10.codeLensProvider.onDidChange(r10)), this._register(n10.definitionProvider.onDidChange(r10)), this._register(n10.declarationProvider.onDidChange(r10)), this._register(n10.implementationProvider.onDidChange(r10)), this._register(n10.typeDefinitionProvider.onDidChange(r10)), this._register(n10.hoverProvider.onDidChange(r10)), this._register(n10.documentHighlightProvider.onDidChange(r10)), this._register(n10.documentSymbolProvider.onDidChange(r10)), this._register(n10.referenceProvider.onDidChange(r10)), this._register(n10.renameProvider.onDidChange(r10)), this._register(n10.documentFormattingEditProvider.onDidChange(r10)), this._register(n10.documentRangeFormattingEditProvider.onDidChange(r10)), this._register(n10.signatureHelpProvider.onDidChange(r10)), this._register(n10.inlayHintsProvider.onDidChange(r10)), r10();
    }
    dispose() {
      super.dispose();
    }
    reset() {
      this._contextKeyService.bufferChangeEvents(() => {
        this._langId.reset(), this._hasCompletionItemProvider.reset(), this._hasCodeActionsProvider.reset(), this._hasCodeLensProvider.reset(), this._hasDefinitionProvider.reset(), this._hasDeclarationProvider.reset(), this._hasImplementationProvider.reset(), this._hasTypeDefinitionProvider.reset(), this._hasHoverProvider.reset(), this._hasDocumentHighlightProvider.reset(), this._hasDocumentSymbolProvider.reset(), this._hasReferenceProvider.reset(), this._hasRenameProvider.reset(), this._hasDocumentFormattingProvider.reset(), this._hasDocumentSelectionFormattingProvider.reset(), this._hasSignatureHelpProvider.reset(), this._isInEmbeddedEditor.reset();
      });
    }
    _update() {
      let e10 = this._editor.getModel();
      if (!e10) {
        this.reset();
        return;
      }
      this._contextKeyService.bufferChangeEvents(() => {
        this._langId.set(e10.getLanguageId()), this._hasCompletionItemProvider.set(this._languageFeaturesService.completionProvider.has(e10)), this._hasCodeActionsProvider.set(this._languageFeaturesService.codeActionProvider.has(e10)), this._hasCodeLensProvider.set(this._languageFeaturesService.codeLensProvider.has(e10)), this._hasDefinitionProvider.set(this._languageFeaturesService.definitionProvider.has(e10)), this._hasDeclarationProvider.set(this._languageFeaturesService.declarationProvider.has(e10)), this._hasImplementationProvider.set(this._languageFeaturesService.implementationProvider.has(e10)), this._hasTypeDefinitionProvider.set(this._languageFeaturesService.typeDefinitionProvider.has(e10)), this._hasHoverProvider.set(this._languageFeaturesService.hoverProvider.has(e10)), this._hasDocumentHighlightProvider.set(this._languageFeaturesService.documentHighlightProvider.has(e10)), this._hasDocumentSymbolProvider.set(this._languageFeaturesService.documentSymbolProvider.has(e10)), this._hasReferenceProvider.set(this._languageFeaturesService.referenceProvider.has(e10)), this._hasRenameProvider.set(this._languageFeaturesService.renameProvider.has(e10)), this._hasSignatureHelpProvider.set(this._languageFeaturesService.signatureHelpProvider.has(e10)), this._hasInlayHintsProvider.set(this._languageFeaturesService.inlayHintsProvider.has(e10)), this._hasDocumentFormattingProvider.set(this._languageFeaturesService.documentFormattingEditProvider.has(e10) || this._languageFeaturesService.documentRangeFormattingEditProvider.has(e10)), this._hasDocumentSelectionFormattingProvider.set(this._languageFeaturesService.documentRangeFormattingEditProvider.has(e10)), this._hasMultipleDocumentFormattingProvider.set(this._languageFeaturesService.documentFormattingEditProvider.all(e10).length + this._languageFeaturesService.documentRangeFormattingEditProvider.all(e10).length > 1), this._hasMultipleDocumentSelectionFormattingProvider.set(this._languageFeaturesService.documentRangeFormattingEditProvider.all(e10).length > 1), this._isInEmbeddedEditor.set(e10.uri.scheme === Su.walkThroughSnippet || e10.uri.scheme === Su.vscodeChatCodeBlock);
      });
    }
  }, C3 = class extends j {
    constructor(e10, t10) {
      super(), this._onChange = this._register(new N()), this.onChange = this._onChange.event, this._hadFocus = void 0, this._hasDomElementFocus = false, this._domFocusTracker = this._register(tf(e10)), this._overflowWidgetsDomNodeHasFocus = false, this._register(this._domFocusTracker.onDidFocus(() => {
        this._hasDomElementFocus = true, this._update();
      })), this._register(this._domFocusTracker.onDidBlur(() => {
        this._hasDomElementFocus = false, this._update();
      })), t10 && (this._overflowWidgetsDomNode = this._register(tf(t10)), this._register(this._overflowWidgetsDomNode.onDidFocus(() => {
        this._overflowWidgetsDomNodeHasFocus = true, this._update();
      })), this._register(this._overflowWidgetsDomNode.onDidBlur(() => {
        this._overflowWidgetsDomNodeHasFocus = false, this._update();
      })));
    }
    _update() {
      let e10 = this._hasDomElementFocus || this._overflowWidgetsDomNodeHasFocus;
      this._hadFocus !== e10 && (this._hadFocus = e10, this._onChange.fire(void 0));
    }
    hasFocus() {
      return this._hadFocus ?? false;
    }
  }, w3 = class {
    get length() {
      return this._decorationIds.length;
    }
    constructor(e10, t10) {
      this._editor = e10, this._decorationIds = [], this._isChangingDecorations = false, Array.isArray(t10) && t10.length > 0 && this.set(t10);
    }
    onDidChange(e10, t10, n10) {
      return this._editor.onDidChangeModelDecorations((n11) => {
        this._isChangingDecorations || e10.call(t10, n11);
      }, n10);
    }
    getRange(e10) {
      return !this._editor.hasModel() || e10 >= this._decorationIds.length ? null : this._editor.getModel().getDecorationRange(this._decorationIds[e10]);
    }
    getRanges() {
      if (!this._editor.hasModel()) return [];
      let e10 = this._editor.getModel(), t10 = [];
      for (let n10 of this._decorationIds) {
        let r10 = e10.getDecorationRange(n10);
        r10 && t10.push(r10);
      }
      return t10;
    }
    has(e10) {
      return this._decorationIds.includes(e10.id);
    }
    clear() {
      this._decorationIds.length !== 0 && this.set([]);
    }
    set(e10) {
      try {
        this._isChangingDecorations = true, this._editor.changeDecorations((t10) => {
          this._decorationIds = t10.deltaDecorations(this._decorationIds, e10);
        });
      } finally {
        this._isChangingDecorations = false;
      }
      return this._decorationIds;
    }
    append(e10) {
      let t10 = [];
      try {
        this._isChangingDecorations = true, this._editor.changeDecorations((n10) => {
          t10 = n10.deltaDecorations([], e10), this._decorationIds = this._decorationIds.concat(t10);
        });
      } finally {
        this._isChangingDecorations = false;
      }
      return t10;
    }
  };
  const T3 = encodeURIComponent(`<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 6 3' enable-background='new 0 0 6 3' height='3' width='6'><g fill='`), E3 = encodeURIComponent(`'><polygon points='5.5,0 2.5,3 1.1,3 4.1,0'/><polygon points='4,0 6,2 6,0.6 5.4,0'/><polygon points='0,2 1,3 2.4,3 0,0.6'/></g></svg>`);
  function D3(e10) {
    return T3 + encodeURIComponent(e10.toString()) + E3;
  }
  const O3 = encodeURIComponent(`<svg xmlns="http://www.w3.org/2000/svg" height="3" width="12"><g fill="`), k3 = encodeURIComponent(`"><circle cx="1" cy="1" r="1"/><circle cx="5" cy="1" r="1"/><circle cx="9" cy="1" r="1"/></g></svg>`);
  function A3(e10) {
    return O3 + encodeURIComponent(e10.toString()) + k3;
  }
  qb((e10, t10) => {
    let n10 = e10.getColor(MC);
    n10 && t10.addRule(`.monaco-editor .squiggly-error { background: url("data:image/svg+xml,${D3(n10)}") repeat-x bottom left; }`);
    let r10 = e10.getColor(FC);
    r10 && t10.addRule(`.monaco-editor .squiggly-warning { background: url("data:image/svg+xml,${D3(r10)}") repeat-x bottom left; }`);
    let i10 = e10.getColor(LC);
    i10 && t10.addRule(`.monaco-editor .squiggly-info { background: url("data:image/svg+xml,${D3(i10)}") repeat-x bottom left; }`);
    let a10 = e10.getColor(zC);
    a10 && t10.addRule(`.monaco-editor .squiggly-hint { background: url("data:image/svg+xml,${A3(a10)}") no-repeat bottom left; }`);
    let o10 = e10.getColor(LL);
    o10 && t10.addRule(`.monaco-editor.showUnused .squiggly-inline-unnecessary { opacity: ${o10.rgba.a}; }`);
  });
  j3 = class e10 {
    static capture(t10) {
      if (t10.getScrollTop() === 0 || t10.hasPendingScrollAnimation()) return new e10(t10.getScrollTop(), t10.getContentHeight(), null, 0, null);
      let n10 = null, r10 = 0, i10 = t10.getVisibleRanges();
      if (i10.length > 0) {
        n10 = i10[0].getStartPosition();
        let e11 = t10.getTopForPosition(n10.lineNumber, n10.column);
        r10 = t10.getScrollTop() - e11;
      }
      return new e10(t10.getScrollTop(), t10.getContentHeight(), n10, r10, t10.getPosition());
    }
    constructor(e11, t10, n10, r10, i10) {
      this._initialScrollTop = e11, this._initialContentHeight = t10, this._visiblePosition = n10, this._visiblePositionScrollDelta = r10, this._cursorPosition = i10;
    }
    restore(e11) {
      if (!(this._initialContentHeight === e11.getContentHeight() && this._initialScrollTop === e11.getScrollTop()) && this._visiblePosition) {
        let t10 = e11.getTopForPosition(this._visiblePosition.lineNumber, this._visiblePosition.column);
        e11.setScrollTop(t10 + this._visiblePositionScrollDelta);
      }
    }
    restoreRelativeVerticalPositionOfCursor(e11) {
      if (this._initialContentHeight === e11.getContentHeight() && this._initialScrollTop === e11.getScrollTop()) return;
      let t10 = e11.getPosition();
      if (!this._cursorPosition || !t10) return;
      let n10 = e11.getTopForLineNumber(t10.lineNumber) - e11.getTopForLineNumber(this._cursorPosition.lineNumber);
      e11.setScrollTop(e11.getScrollTop() + n10, 1);
    }
  };
  function M3(e10, t10, n10, r10) {
    if (e10.length === 0) return t10;
    if (t10.length === 0) return e10;
    let i10 = [], a10 = 0, o10 = 0;
    for (; a10 < e10.length && o10 < t10.length; ) {
      let s10 = e10[a10], c10 = t10[o10], l10 = n10(s10), u10 = n10(c10);
      l10 < u10 ? (i10.push(s10), a10++) : l10 > u10 ? (i10.push(c10), o10++) : (i10.push(r10(s10, c10)), a10++, o10++);
    }
    for (; a10 < e10.length; ) i10.push(e10[a10]), a10++;
    for (; o10 < t10.length; ) i10.push(t10[o10]), o10++;
    return i10;
  }
  function N3(e10, t10) {
    let n10 = new A(), r10 = e10.createDecorationsCollection();
    return n10.add($N({
      debugName: () => `Apply decorations from ${t10.debugName}`
    }, (e11) => {
      let n11 = t10.read(e11);
      r10.set(n11);
    })), n10.add({
      dispose: () => {
        r10.clear();
      }
    }), n10;
  }
  P3 = function(e10, t10) {
    return e10.appendChild(t10), k(() => {
      t10.remove();
    });
  };
  function F3(e10, t10) {
    return e10.prepend(t10), k(() => {
      t10.remove();
    });
  }
  var I3 = class extends j {
    get width() {
      return this._width;
    }
    get height() {
      return this._height;
    }
    get automaticLayout() {
      return this._automaticLayout;
    }
    constructor(e10, t10) {
      super(), this._automaticLayout = false, this.elementSizeObserver = this._register(new yZ(e10, t10)), this._width = VN(this, this.elementSizeObserver.getWidth()), this._height = VN(this, this.elementSizeObserver.getHeight()), this._register(this.elementSizeObserver.onDidChange((e11) => FN((e12) => {
        this._width.set(this.elementSizeObserver.getWidth(), e12), this._height.set(this.elementSizeObserver.getHeight(), e12);
      })));
    }
    observe(e10) {
      this.elementSizeObserver.observe(e10);
    }
    setAutomaticLayout(e10) {
      this._automaticLayout = e10, e10 ? this.elementSizeObserver.startObserving() : this.elementSizeObserver.stopObserving();
    }
  };
  function L3(e10, t10, n10) {
    let r10 = t10.get(), i10 = r10, a10 = r10, o10 = VN(`animatedValue`, r10), s10 = -1, c10 = 300, l10;
    n10.add(eP({
      createEmptyChangeSummary: () => ({
        animate: false
      }),
      handleChange: (e11, n11) => (e11.didChange(t10) && (n11.animate = n11.animate || e11.change), true)
    }, (n11, o11) => {
      l10 !== void 0 && (e10.cancelAnimationFrame(l10), l10 = void 0), i10 = a10, r10 = t10.read(n11), s10 = Date.now() - (o11.animate ? 0 : c10), u10();
    }));
    function u10() {
      let t11 = Date.now() - s10;
      a10 = Math.floor(R3(t11, i10, r10 - i10, c10)), t11 < c10 ? l10 = e10.requestAnimationFrame(u10) : a10 = r10, o10.set(a10, void 0);
    }
    return o10;
  }
  function R3(e10, t10, n10, r10) {
    return e10 === r10 ? t10 + n10 : n10 * (-(2 ** (-10 * e10 / r10)) + 1) + t10;
  }
  var z3 = class extends j {
    constructor(e10, t10, n10) {
      super(), this._register(new V3(e10, n10)), this._register(H3(n10, {
        height: t10.actualHeight,
        top: t10.actualTop
      }));
    }
  }, B3 = class {
    get afterLineNumber() {
      return this._afterLineNumber.get();
    }
    constructor(e10, t10) {
      this._afterLineNumber = e10, this.heightInPx = t10, this.domNode = document.createElement(`div`), this._actualTop = VN(this, void 0), this._actualHeight = VN(this, void 0), this.actualTop = this._actualTop, this.actualHeight = this._actualHeight, this.showInHiddenAreas = true, this.onChange = this._afterLineNumber, this.onDomNodeTop = (e11) => {
        this._actualTop.set(e11, void 0);
      }, this.onComputedHeight = (e11) => {
        this._actualHeight.set(e11, void 0);
      };
    }
  }, V3 = (_hb = class {
    constructor(t10, n10) {
      this._editor = t10, this._domElement = n10, this._overlayWidgetId = `managedOverlayWidget-${_hb._counter++}`, this._overlayWidget = {
        getId: () => this._overlayWidgetId,
        getDomNode: () => this._domElement,
        getPosition: () => null
      }, this._editor.addOverlayWidget(this._overlayWidget);
    }
    dispose() {
      this._editor.removeOverlayWidget(this._overlayWidget);
    }
  }, _hb._counter = 0, _hb);
  H3 = function(e10, t10) {
    return QN((n10) => {
      for (let [r10, i10] of Object.entries(t10)) i10 && typeof i10 == `object` && `read` in i10 && (i10 = i10.read(n10)), typeof i10 == `number` && (i10 = `${i10}px`), r10 = r10.replace(/[A-Z]/g, (e11) => `-` + e11.toLowerCase()), e10.style[r10] = i10;
    });
  };
  function U3(e10, t10, n10, r10) {
    let i10 = new A(), a10 = [];
    return i10.add(nP((i11, o10) => {
      let s10 = t10.read(i11), c10 = /* @__PURE__ */ new Map(), l10 = /* @__PURE__ */ new Map();
      n10 && n10(true), e10.changeViewZones((e11) => {
        for (let t11 of a10) e11.removeZone(t11), r10 == null ? void 0 : r10.delete(t11);
        a10.length = 0;
        for (let t11 of s10) {
          let n11 = e11.addZone(t11);
          t11.setZoneId && t11.setZoneId(n11), a10.push(n11), r10 == null ? void 0 : r10.add(n11), c10.set(t11, n11);
        }
      }), n10 && n10(false), o10.add(eP({
        createEmptyChangeSummary() {
          return {
            zoneIds: []
          };
        },
        handleChange(e11, t11) {
          let n11 = l10.get(e11.changedObservable);
          return n11 !== void 0 && t11.zoneIds.push(n11), true;
        }
      }, (t11, r11) => {
        for (let e11 of s10) e11.onChange && (l10.set(e11.onChange, c10.get(e11)), e11.onChange.read(t11));
        n10 && n10(true), e10.changeViewZones((e11) => {
          for (let t12 of r11.zoneIds) e11.layoutZone(t12);
        }), n10 && n10(false);
      }));
    })), i10.add({
      dispose() {
        n10 && n10(true), e10.changeViewZones((e11) => {
          for (let t11 of a10) e11.removeZone(t11);
        }), r10 == null ? void 0 : r10.clear(), n10 && n10(false);
      }
    }), i10;
  }
  W3 = class extends gi {
    dispose() {
      super.dispose(true);
    }
  };
  function G3(e10, t10) {
    let n10 = Tv(t10, (t11) => t11.original.startLineNumber <= e10.lineNumber);
    if (!n10) return F.fromPositions(e10);
    if (n10.original.endLineNumberExclusive <= e10.lineNumber) {
      let t11 = e10.lineNumber - n10.original.endLineNumberExclusive + n10.modified.endLineNumberExclusive;
      return F.fromPositions(new P(t11, e10.column));
    }
    if (!n10.innerChanges) return F.fromPositions(new P(n10.modified.startLineNumber, 1));
    let r10 = Tv(n10.innerChanges, (t11) => t11.originalRange.getStartPosition().isBeforeOrEqual(e10));
    if (!r10) {
      let t11 = e10.lineNumber - n10.original.startLineNumber + n10.modified.startLineNumber;
      return F.fromPositions(new P(t11, e10.column));
    }
    if (r10.originalRange.containsPosition(e10)) return r10.modifiedRange;
    {
      let t11 = K3(r10.originalRange.getEndPosition(), e10);
      return F.fromPositions(t11.addToPosition(r10.modifiedRange.getEndPosition()));
    }
  }
  function K3(e10, t10) {
    return e10.lineNumber === t10.lineNumber ? new Rv(0, t10.column - e10.column) : new Rv(t10.lineNumber - e10.lineNumber, t10.column - 1);
  }
  function q3(e10, t10) {
    let n10;
    return e10.filter((e11) => {
      let r10 = t10(e11, n10);
      return n10 = e11, r10;
    });
  }
  var J3 = class {
    static create(e10, t10 = void 0) {
      return new Y3(e10, e10, t10);
    }
    static createWithDisposable(e10, t10, n10 = void 0) {
      let r10 = new A();
      return r10.add(t10), r10.add(e10), new Y3(e10, r10, n10);
    }
  }, Y3 = class extends J3 {
    constructor(e10, t10, n10) {
      super(), this.object = e10, this._disposable = t10, this._debugOwner = n10, this._refCount = 1, this._isDisposed = false, this._owners = [], n10 && this._addOwner(n10);
    }
    _addOwner(e10) {
      e10 && this._owners.push(e10);
    }
    createNewRef(e10) {
      return this._refCount++, e10 && this._addOwner(e10), new X3(this, e10);
    }
    dispose() {
      this._isDisposed || (this._isDisposed = true, this._decreaseRefCount(this._debugOwner));
    }
    _decreaseRefCount(e10) {
      if (this._refCount--, this._refCount === 0 && this._disposable.dispose(), e10) {
        let t10 = this._owners.indexOf(e10);
        t10 !== -1 && this._owners.splice(t10, 1);
      }
    }
  }, X3 = class extends J3 {
    constructor(e10, t10) {
      super(), this._base = e10, this._debugOwner = t10, this._isDisposed = false;
    }
    get object() {
      return this._base.object;
    }
    createNewRef(e10) {
      return this._base.createNewRef(e10);
    }
    dispose() {
      this._isDisposed || (this._isDisposed = true, this._base._decreaseRefCount(this._debugOwner));
    }
  }, Z3 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, Q3 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const $3 = iJ(`diff-review-insert`, L.add, T(`accessibleDiffViewerInsertIcon`, `Icon for 'Insert' in accessible diff viewer.`)), e6 = iJ(`diff-review-remove`, L.remove, T(`accessibleDiffViewerRemoveIcon`, `Icon for 'Remove' in accessible diff viewer.`)), t6 = iJ(`diff-review-close`, L.close, T(`accessibleDiffViewerCloseIcon`, `Icon for 'Close' in accessible diff viewer.`));
  let n6 = (_ib = class extends j {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      super(), this._parentNode = e10, this._visible = t10, this._setVisible = n10, this._canClose = r10, this._width = i10, this._height = a10, this._diffs = o10, this._models = s10, this._instantiationService = c10, this._state = JN(this, (e11, t11) => {
        let n11 = this._visible.read(e11);
        if (this._parentNode.style.visibility = n11 ? `visible` : `hidden`, !n11) return null;
        let r11 = t11.add(this._instantiationService.createInstance(r6, this._diffs, this._models, this._setVisible, this._canClose)), i11 = t11.add(this._instantiationService.createInstance(f6, this._parentNode, r11, this._width, this._height, this._models));
        return {
          model: r11,
          view: i11
        };
      }).recomputeInitiallyAndOnChange(this._store);
    }
    next() {
      FN((e10) => {
        let t10 = this._visible.get();
        this._setVisible(true, e10), t10 && this._state.get().model.nextGroup(e10);
      });
    }
    prev() {
      FN((e10) => {
        this._setVisible(true, e10), this._state.get().model.previousGroup(e10);
      });
    }
    close() {
      FN((e10) => {
        this._setVisible(false, e10);
      });
    }
  }, _ib._ttPolicy = lh(`diffReview`, {
    createHTML: (e10) => e10
  }), _ib);
  n6 = Z3([
    Q3(8, Jf)
  ], n6);
  let r6 = class extends j {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._diffs = e10, this._models = t10, this._setVisible = n10, this.canClose = r10, this._accessibilitySignalService = i10, this._groups = VN(this, []), this._currentGroupIdx = VN(this, 0), this._currentElementIdx = VN(this, 0), this.groups = this._groups, this.currentGroup = this._currentGroupIdx.map((e11, t11) => this._groups.read(t11)[e11]), this.currentGroupIndex = this._currentGroupIdx, this.currentElement = this._currentElementIdx.map((e11, t11) => {
        var _a3;
        return (_a3 = this.currentGroup.read(t11)) == null ? void 0 : _a3.lines[e11];
      }), this._register(QN((e11) => {
        let t11 = this._diffs.read(e11);
        if (!t11) {
          this._groups.set([], void 0);
          return;
        }
        let n11 = a6(t11, this._models.getOriginalModel().getLineCount(), this._models.getModifiedModel().getLineCount());
        FN((e12) => {
          let t12 = this._models.getModifiedPosition();
          if (t12) {
            let r11 = n11.findIndex((e13) => (t12 == null ? void 0 : t12.lineNumber) < e13.range.modified.endLineNumberExclusive);
            r11 !== -1 && this._currentGroupIdx.set(r11, e12);
          }
          this._groups.set(n11, e12);
        });
      })), this._register(QN((e11) => {
        let t11 = this.currentElement.read(e11);
        (t11 == null ? void 0 : t11.type) === o6.Deleted ? this._accessibilitySignalService.playSignal(CY.diffLineDeleted, {
          source: `accessibleDiffViewer.currentElementChanged`
        }) : (t11 == null ? void 0 : t11.type) === o6.Added && this._accessibilitySignalService.playSignal(CY.diffLineInserted, {
          source: `accessibleDiffViewer.currentElementChanged`
        });
      })), this._register(QN((e11) => {
        let t11 = this.currentElement.read(e11);
        if (t11 && t11.type !== o6.Header) {
          let e12 = t11.modifiedLineNumber ?? t11.diff.modified.startLineNumber;
          this._models.modifiedSetSelection(F.fromPositions(new P(e12, 1)));
        }
      }));
    }
    _goToGroupDelta(e10, t10) {
      let n10 = this.groups.get();
      !n10 || n10.length <= 1 || zN(t10, (t11) => {
        this._currentGroupIdx.set(Cv.ofLength(n10.length).clipCyclic(this._currentGroupIdx.get() + e10), t11), this._currentElementIdx.set(0, t11);
      });
    }
    nextGroup(e10) {
      this._goToGroupDelta(1, e10);
    }
    previousGroup(e10) {
      this._goToGroupDelta(-1, e10);
    }
    _goToLineDelta(e10) {
      let t10 = this.currentGroup.get();
      !t10 || t10.lines.length <= 1 || FN((n10) => {
        this._currentElementIdx.set(Cv.ofLength(t10.lines.length).clip(this._currentElementIdx.get() + e10), n10);
      });
    }
    goToNextLine() {
      this._goToLineDelta(1);
    }
    goToPreviousLine() {
      this._goToLineDelta(-1);
    }
    goToLine(e10) {
      let t10 = this.currentGroup.get();
      if (!t10) return;
      let n10 = t10.lines.indexOf(e10);
      n10 !== -1 && FN((e11) => {
        this._currentElementIdx.set(n10, e11);
      });
    }
    revealCurrentElementInEditor() {
      if (!this.canClose.get()) return;
      this._setVisible(false, void 0);
      let e10 = this.currentElement.get();
      e10 && (e10.type === o6.Deleted ? this._models.originalReveal(F.fromPositions(new P(e10.originalLineNumber, 1))) : this._models.modifiedReveal(e10.type === o6.Header ? void 0 : F.fromPositions(new P(e10.modifiedLineNumber, 1))));
    }
    close() {
      this.canClose.get() && (this._setVisible(false, void 0), this._models.modifiedFocus());
    }
  };
  r6 = Z3([
    Q3(4, bY)
  ], r6);
  const i6 = 3;
  function a6(e10, t10, n10) {
    let r10 = [];
    for (let i10 of h(e10, (e11, t11) => t11.modified.startLineNumber - e11.modified.endLineNumberExclusive < 2 * i6)) {
      let e11 = [];
      e11.push(new c6());
      let a10 = new G(Math.max(1, i10[0].original.startLineNumber - i6), Math.min(i10[i10.length - 1].original.endLineNumberExclusive + i6, t10 + 1)), o10 = new G(Math.max(1, i10[0].modified.startLineNumber - i6), Math.min(i10[i10.length - 1].modified.endLineNumberExclusive + i6, n10 + 1));
      g(i10, (t11, n11) => {
        let r11 = new G(t11 ? t11.original.endLineNumberExclusive : a10.startLineNumber, n11 ? n11.original.startLineNumber : a10.endLineNumberExclusive), i11 = new G(t11 ? t11.modified.endLineNumberExclusive : o10.startLineNumber, n11 ? n11.modified.startLineNumber : o10.endLineNumberExclusive);
        r11.forEach((t12) => {
          e11.push(new d6(t12, i11.startLineNumber + (t12 - r11.startLineNumber)));
        }), n11 && (n11.original.forEach((t12) => {
          e11.push(new l6(n11, t12));
        }), n11.modified.forEach((t12) => {
          e11.push(new u6(n11, t12));
        }));
      });
      let s10 = i10[0].modified.join(i10[i10.length - 1].modified), c10 = i10[0].original.join(i10[i10.length - 1].original);
      r10.push(new s6(new Gv(s10, c10), e11));
    }
    return r10;
  }
  var o6;
  (function(e10) {
    e10[e10.Header = 0] = `Header`, e10[e10.Unchanged = 1] = `Unchanged`, e10[e10.Deleted = 2] = `Deleted`, e10[e10.Added = 3] = `Added`;
  })(o6 || (o6 = {}));
  var s6 = class {
    constructor(e10, t10) {
      this.range = e10, this.lines = t10;
    }
  }, c6 = class {
    constructor() {
      this.type = o6.Header;
    }
  }, l6 = class {
    constructor(e10, t10) {
      this.diff = e10, this.originalLineNumber = t10, this.type = o6.Deleted, this.modifiedLineNumber = void 0;
    }
  }, u6 = class {
    constructor(e10, t10) {
      this.diff = e10, this.modifiedLineNumber = t10, this.type = o6.Added, this.originalLineNumber = void 0;
    }
  }, d6 = class {
    constructor(e10, t10) {
      this.originalLineNumber = e10, this.modifiedLineNumber = t10, this.type = o6.Unchanged;
    }
  };
  let f6 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._element = e10, this._model = t10, this._width = n10, this._height = r10, this._models = i10, this._languageService = a10, this.domNode = this._element, this.domNode.className = `monaco-component diff-review monaco-editor-background`;
      let o10 = document.createElement(`div`);
      o10.className = `diff-review-actions`, this._actionBar = this._register(new jI(o10)), this._register(QN((e11) => {
        this._actionBar.clear(), this._model.canClose.read(e11) && this._actionBar.push(new ep(`diffreview.close`, T(`label.close`, `Close`), `close-diff-review ` + sp.asClassName(t6), true, async () => t10.close()), {
          label: false,
          icon: true
        });
      })), this._content = document.createElement(`div`), this._content.className = `diff-review-content`, this._content.setAttribute(`role`, `code`), this._scrollbar = this._register(new uD(this._content, {})), af(this.domNode, this._scrollbar.getDomNode(), o10), this._register(QN((e11) => {
        this._height.read(e11), this._width.read(e11), this._scrollbar.scanDomNode();
      })), this._register(k(() => {
        af(this.domNode);
      })), this._register(H3(this.domNode, {
        width: this._width,
        height: this._height
      })), this._register(H3(this._content, {
        width: this._width,
        height: this._height
      })), this._register(nP((e11, t11) => {
        this._model.currentGroup.read(e11), this._render(t11);
      })), this._register(td(this.domNode, `keydown`, (e11) => {
        (e11.equals(18) || e11.equals(2066) || e11.equals(530)) && (e11.preventDefault(), this._model.goToNextLine()), (e11.equals(16) || e11.equals(2064) || e11.equals(528)) && (e11.preventDefault(), this._model.goToPreviousLine()), (e11.equals(9) || e11.equals(2057) || e11.equals(521) || e11.equals(1033)) && (e11.preventDefault(), this._model.close()), (e11.equals(10) || e11.equals(3)) && (e11.preventDefault(), this._model.revealCurrentElementInEditor());
      }));
    }
    _render(e10) {
      let t10 = this._models.getOriginalOptions(), n10 = this._models.getModifiedOptions(), r10 = document.createElement(`div`);
      r10.className = `diff-review-table`, r10.setAttribute(`role`, `list`), r10.setAttribute(`aria-label`, T(`ariaLabel`, `Accessible Diff Viewer. Use arrow up and down to navigate.`)), Pf(r10, n10.get(50)), af(this._content, r10);
      let i10 = this._models.getOriginalModel(), a10 = this._models.getModifiedModel();
      if (!i10 || !a10) return;
      let o10 = i10.getOptions(), s10 = a10.getOptions(), c10 = n10.get(67), l10 = this._model.currentGroup.get();
      for (let u10 of (l10 == null ? void 0 : l10.lines) || []) {
        if (!l10) break;
        let d10;
        if (u10.type === o6.Header) {
          let e11 = document.createElement(`div`);
          e11.className = `diff-review-row`, e11.setAttribute(`role`, `listitem`);
          let t11 = l10.range, n11 = this._model.currentGroupIndex.get(), r11 = this._model.groups.get().length, i11 = (e12) => e12 === 0 ? T(`no_lines_changed`, `no lines changed`) : e12 === 1 ? T(`one_line_changed`, `1 line changed`) : T(`more_lines_changed`, `{0} lines changed`, e12), a11 = i11(t11.original.length), o11 = i11(t11.modified.length);
          e11.setAttribute(`aria-label`, T({
            key: `header`,
            comment: [
              `This is the ARIA label for a git diff header.`,
              `A git diff header looks like this: @@ -154,12 +159,39 @@.`,
              `That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.`,
              `Variables 0 and 1 refer to the diff index out of total number of diffs.`,
              `Variables 2 and 4 will be numbers (a line number).`,
              `Variables 3 and 5 will be "no lines changed", "1 line changed" or "X lines changed", localized separately.`
            ]
          }, `Difference {0} of {1}: original line {2}, {3}, modified line {4}, {5}`, n11 + 1, r11, t11.original.startLineNumber, a11, t11.modified.startLineNumber, o11));
          let s11 = document.createElement(`div`);
          s11.className = `diff-review-cell diff-review-summary`, s11.appendChild(document.createTextNode(`${n11 + 1}/${r11}: @@ -${t11.original.startLineNumber},${t11.original.length} +${t11.modified.startLineNumber},${t11.modified.length} @@`)), e11.appendChild(s11), d10 = e11;
        } else d10 = this._createRow(u10, c10, this._width.get(), t10, i10, o10, n10, a10, s10);
        r10.appendChild(d10);
        let f10 = Y((e11) => this._model.currentElement.read(e11) === u10);
        e10.add(QN((e11) => {
          let t11 = f10.read(e11);
          d10.tabIndex = t11 ? 0 : -1, t11 && d10.focus();
        })), e10.add(z(d10, `focus`, () => {
          this._model.goToLine(u10);
        }));
      }
      this._scrollbar.scanDomNode();
    }
    _createRow(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      let l10 = r10.get(146), u10 = l10.glyphMarginWidth + l10.lineNumbersWidth, d10 = o10.get(146), f10 = 10 + d10.glyphMarginWidth + d10.lineNumbersWidth, p10 = `diff-review-row`, m10 = ``, h10 = `diff-review-spacer`, g10 = null;
      switch (e10.type) {
        case o6.Added:
          p10 = `diff-review-row line-insert`, m10 = ` char-insert`, g10 = $3;
          break;
        case o6.Deleted:
          p10 = `diff-review-row line-delete`, m10 = ` char-delete`, g10 = e6;
          break;
      }
      let _10 = document.createElement(`div`);
      _10.style.minWidth = n10 + `px`, _10.className = p10, _10.setAttribute(`role`, `listitem`), _10.ariaLevel = ``;
      let v10 = document.createElement(`div`);
      v10.className = `diff-review-cell`, v10.style.height = `${t10}px`, _10.appendChild(v10);
      let y10 = document.createElement(`span`);
      y10.style.width = u10 + `px`, y10.style.minWidth = u10 + `px`, y10.className = `diff-review-line-number` + m10, e10.originalLineNumber === void 0 ? y10.innerText = `\xA0` : y10.appendChild(document.createTextNode(String(e10.originalLineNumber))), v10.appendChild(y10);
      let b10 = document.createElement(`span`);
      b10.style.width = f10 + `px`, b10.style.minWidth = f10 + `px`, b10.style.paddingRight = `10px`, b10.className = `diff-review-line-number` + m10, e10.modifiedLineNumber === void 0 ? b10.innerText = `\xA0` : b10.appendChild(document.createTextNode(String(e10.modifiedLineNumber))), v10.appendChild(b10);
      let x10 = document.createElement(`span`);
      if (x10.className = h10, g10) {
        let e11 = document.createElement(`span`);
        e11.className = sp.asClassName(g10), e11.innerText = `\xA0\xA0`, x10.appendChild(e11);
      } else x10.innerText = `\xA0\xA0`;
      v10.appendChild(x10);
      let S10;
      if (e10.modifiedLineNumber !== void 0) {
        let t11 = this._getLineHtml(s10, o10, c10.tabSize, e10.modifiedLineNumber, this._languageService.languageIdCodec);
        n6._ttPolicy && (t11 = n6._ttPolicy.createHTML(t11)), v10.insertAdjacentHTML(`beforeend`, t11), S10 = s10.getLineContent(e10.modifiedLineNumber);
      } else {
        let t11 = this._getLineHtml(i10, r10, a10.tabSize, e10.originalLineNumber, this._languageService.languageIdCodec);
        n6._ttPolicy && (t11 = n6._ttPolicy.createHTML(t11)), v10.insertAdjacentHTML(`beforeend`, t11), S10 = i10.getLineContent(e10.originalLineNumber);
      }
      S10.length === 0 && (S10 = T(`blankLine`, `blank`));
      let C10 = ``;
      switch (e10.type) {
        case o6.Unchanged:
          C10 = e10.originalLineNumber === e10.modifiedLineNumber ? T({
            key: `unchangedLine`,
            comment: [
              `The placeholders are contents of the line and should not be translated.`
            ]
          }, `{0} unchanged line {1}`, S10, e10.originalLineNumber) : T(`equalLine`, `{0} original line {1} modified line {2}`, S10, e10.originalLineNumber, e10.modifiedLineNumber);
          break;
        case o6.Added:
          C10 = T(`insertLine`, `+ {0} modified line {1}`, S10, e10.modifiedLineNumber);
          break;
        case o6.Deleted:
          C10 = T(`deleteLine`, `- {0} original line {1}`, S10, e10.originalLineNumber);
          break;
      }
      return _10.setAttribute(`aria-label`, C10), _10;
    }
    _getLineHtml(e10, t10, n10, r10, i10) {
      let a10 = e10.getLineContent(r10), o10 = t10.get(50), s10 = CA.createEmpty(a10, i10), c10 = PX.isBasicASCII(a10, e10.mightContainNonBasicASCII()), l10 = PX.containsRTL(a10, c10, e10.mightContainRTL()), u10 = yX(new pX(o10.isMonospace && !t10.get(33), o10.canUseHalfwidthRightwardsArrow, a10, false, c10, l10, 0, s10, [], n10, 0, o10.spaceWidth, o10.middotWidth, o10.wsmiddotWidth, t10.get(118), t10.get(100), t10.get(95), t10.get(51) !== yn.OFF, null));
      return u10.html;
    }
  };
  f6 = Z3([
    Q3(5, _g)
  ], f6);
  var p6 = class {
    constructor(e10) {
      this.editors = e10;
    }
    getOriginalModel() {
      return this.editors.original.getModel();
    }
    getOriginalOptions() {
      return this.editors.original.getOptions();
    }
    originalReveal(e10) {
      this.editors.original.revealRange(e10), this.editors.original.setSelection(e10), this.editors.original.focus();
    }
    getModifiedModel() {
      return this.editors.modified.getModel();
    }
    getModifiedOptions() {
      return this.editors.modified.getOptions();
    }
    modifiedReveal(e10) {
      e10 && (this.editors.modified.revealRange(e10), this.editors.modified.setSelection(e10)), this.editors.modified.focus();
    }
    modifiedSetSelection(e10) {
      this.editors.modified.setSelection(e10);
    }
    modifiedFocus() {
      this.editors.modified.focus();
    }
    getModifiedPosition() {
      return this.editors.modified.getPosition() ?? void 0;
    }
  };
  let Sne, Cne, wne, m6, h6, v6, y6;
  Sne = J(`diffEditor.move.border`, `#8b8b8b9c`, T(`diffEditor.move.border`, `The border color for text that got moved in the diff editor.`));
  Cne = J(`diffEditor.moveActive.border`, `#FFA500`, T(`diffEditor.moveActive.border`, `The active border color for text that got moved in the diff editor.`));
  wne = J(`diffEditor.unchangedRegionShadow`, {
    dark: `#000000`,
    light: `#737373BF`,
    hcDark: `#000000`,
    hcLight: `#737373BF`
  }, T(`diffEditor.unchangedRegionShadow`, `The color of the shadow around unchanged region widgets.`));
  m6 = iJ(`diff-insert`, L.add, T(`diffInsertIcon`, `Line decoration for inserts in the diff editor.`));
  h6 = iJ(`diff-remove`, L.remove, T(`diffRemoveIcon`, `Line decoration for removals in the diff editor.`));
  g6 = _H.register({
    className: `line-insert`,
    description: `line-insert`,
    isWholeLine: true,
    linesDecorationsClassName: `insert-sign ` + sp.asClassName(m6),
    marginClassName: `gutter-insert`
  });
  _6 = _H.register({
    className: `line-delete`,
    description: `line-delete`,
    isWholeLine: true,
    linesDecorationsClassName: `delete-sign ` + sp.asClassName(h6),
    marginClassName: `gutter-delete`
  });
  v6 = _H.register({
    className: `line-insert`,
    description: `line-insert`,
    isWholeLine: true,
    marginClassName: `gutter-insert`
  });
  y6 = _H.register({
    className: `line-delete`,
    description: `line-delete`,
    isWholeLine: true,
    marginClassName: `gutter-delete`
  });
  b6 = _H.register({
    className: `char-insert`,
    description: `char-insert`,
    shouldFillLineOnLineBreak: true
  });
  x6 = _H.register({
    className: `char-insert`,
    description: `char-insert`,
    isWholeLine: true
  });
  S6 = _H.register({
    className: `char-insert diff-range-empty`,
    description: `char-insert diff-range-empty`
  });
  C6 = _H.register({
    className: `char-delete`,
    description: `char-delete`,
    shouldFillLineOnLineBreak: true
  });
  w6 = _H.register({
    className: `char-delete`,
    description: `char-delete`,
    isWholeLine: true
  });
  T6 = _H.register({
    className: `char-delete diff-range-empty`,
    description: `char-delete diff-range-empty`
  });
  var E6 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, D6 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, O6;
  k6 = Xf(`diffProviderFactoryService`);
  let A6 = class {
    constructor(e10) {
      this.instantiationService = e10;
    }
    createDiffProvider(e10) {
      return this.instantiationService.createInstance(j6, e10);
    }
  };
  A6 = E6([
    D6(0, Jf)
  ], A6), bg(k6, A6, 1);
  let j6 = (_jb = class {
    constructor(e10, t10, n10) {
      this.editorWorkerService = t10, this.telemetryService = n10, this.onDidChangeEventEmitter = new N(), this.onDidChange = this.onDidChangeEventEmitter.event, this.diffAlgorithm = `advanced`, this.diffAlgorithmOnDidChangeSubscription = void 0, this.setOptions(e10);
    }
    dispose() {
      var _a3;
      (_a3 = this.diffAlgorithmOnDidChangeSubscription) == null ? void 0 : _a3.dispose();
    }
    async computeDiff(e10, t10, n10, r10) {
      if (typeof this.diffAlgorithm != `string`) return this.diffAlgorithm.computeDiff(e10, t10, n10, r10);
      if (e10.isDisposed() || t10.isDisposed()) return {
        changes: [],
        identical: true,
        quitEarly: false,
        moves: []
      };
      if (e10.getLineCount() === 1 && e10.getLineMaxColumn(1) === 1) return t10.getLineCount() === 1 && t10.getLineMaxColumn(1) === 1 ? {
        changes: [],
        identical: true,
        quitEarly: false,
        moves: []
      } : {
        changes: [
          new Jv(new G(1, 2), new G(1, t10.getLineCount() + 1), [
            new Yv(e10.getFullModelRange(), t10.getFullModelRange())
          ])
        ],
        identical: false,
        quitEarly: false,
        moves: []
      };
      let i10 = JSON.stringify([
        e10.uri.toString(),
        t10.uri.toString()
      ]), a10 = JSON.stringify([
        e10.id,
        t10.id,
        e10.getAlternativeVersionId(),
        t10.getAlternativeVersionId(),
        JSON.stringify(n10)
      ]), o10 = O6.diffCache.get(i10);
      if (o10 && o10.context === a10) return o10.result;
      let s10 = Gr.create(), c10 = await this.editorWorkerService.computeDiff(e10.uri, t10.uri, n10, this.diffAlgorithm), l10 = s10.elapsed();
      if (this.telemetryService.publicLog2(`diffEditor.computeDiff`, {
        timeMs: l10,
        timedOut: (c10 == null ? void 0 : c10.quitEarly) ?? true,
        detectedMoves: n10.computeMoves ? (c10 == null ? void 0 : c10.moves.length) ?? 0 : -1
      }), r10.isCancellationRequested) return {
        changes: [],
        identical: false,
        quitEarly: true,
        moves: []
      };
      if (!c10) throw Error(`no diff result available`);
      return O6.diffCache.size > 10 && O6.diffCache.delete(O6.diffCache.keys().next().value), O6.diffCache.set(i10, {
        result: c10,
        context: a10
      }), c10;
    }
    setOptions(e10) {
      var _a3;
      let t10 = false;
      e10.diffAlgorithm && this.diffAlgorithm !== e10.diffAlgorithm && ((_a3 = this.diffAlgorithmOnDidChangeSubscription) == null ? void 0 : _a3.dispose(), this.diffAlgorithmOnDidChangeSubscription = void 0, this.diffAlgorithm = e10.diffAlgorithm, typeof e10.diffAlgorithm != `string` && (this.diffAlgorithmOnDidChangeSubscription = e10.diffAlgorithm.onDidChange(() => this.onDidChangeEventEmitter.fire())), t10 = true), t10 && this.onDidChangeEventEmitter.fire();
    }
  }, O6 = _jb, _jb.diffCache = /* @__PURE__ */ new Map(), _jb);
  j6 = O6 = E6([
    D6(1, eL),
    D6(2, Cm)
  ], j6);
  M6 = function() {
    return Pi && !!Pi.VSCODE_DEV;
  };
  function N6(e10) {
    if (M6()) {
      let t10 = P6();
      return t10.add(e10), {
        dispose() {
          t10.delete(e10);
        }
      };
    } else return {
      dispose() {
      }
    };
  }
  function P6() {
    F6 || (F6 = /* @__PURE__ */ new Set());
    let e10 = globalThis;
    return e10.$hotReload_applyNewExports || (e10.$hotReload_applyNewExports = (e11) => {
      let t10 = {
        config: {
          mode: void 0
        },
        ...e11
      }, n10 = [];
      for (let e12 of F6) {
        let r10 = e12(t10);
        r10 && n10.push(r10);
      }
      if (n10.length > 0) return (e12) => {
        let t11 = false;
        for (let r10 of n10) r10(e12) && (t11 = true);
        return t11;
      };
    }), F6;
  }
  let F6;
  M6() && N6(({ oldExports: e10, newSrc: t10, config: n10 }) => {
    if (n10.mode === `patch-prototype`) return (t11) => {
      var _a3, _b3;
      for (let n11 in t11) {
        let r10 = t11[n11];
        if (console.log(`[hot-reload] Patching prototype methods of '${n11}'`, {
          exportedItem: r10
        }), typeof r10 == `function` && r10.prototype) {
          let i10 = e10[n11];
          if (i10) {
            for (let e11 of Object.getOwnPropertyNames(r10.prototype)) {
              let t12 = Object.getOwnPropertyDescriptor(r10.prototype, e11), a10 = Object.getOwnPropertyDescriptor(i10.prototype, e11);
              ((_a3 = t12 == null ? void 0 : t12.value) == null ? void 0 : _a3.toString()) !== ((_b3 = a10 == null ? void 0 : a10.value) == null ? void 0 : _b3.toString()) && console.log(`[hot-reload] Patching prototype method '${n11}.${e11}'`), Object.defineProperty(i10.prototype, e11, t12);
            }
            t11[n11] = i10;
          }
        }
      }
      return true;
    };
  });
  I6 = function(e10, t10) {
    return L6([
      e10
    ], t10), e10;
  };
  function L6(e10, t10) {
    if (M6()) {
      let n10 = lP(`reload`, (t11) => N6(({ oldExports: n11 }) => {
        if ([
          ...Object.values(n11)
        ].some((t12) => e10.includes(t12))) return (e11) => (t11(void 0), true);
      }));
      n10.read(t10);
    }
  }
  var R6 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, z6 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let B6 = class extends j {
    setActiveMovedText(e10) {
      this._activeMovedText.set(e10, void 0);
    }
    constructor(e10, t10, n10) {
      super(), this.model = e10, this._options = t10, this._diffProviderFactoryService = n10, this._isDiffUpToDate = VN(this, false), this.isDiffUpToDate = this._isDiffUpToDate, this._diff = VN(this, void 0), this.diff = this._diff, this._unchangedRegions = VN(this, void 0), this.unchangedRegions = Y(this, (e11) => {
        var _a3;
        return this._options.hideUnchangedRegions.read(e11) ? ((_a3 = this._unchangedRegions.read(e11)) == null ? void 0 : _a3.regions) ?? [] : (FN((e12) => {
          var _a4;
          for (let t11 of ((_a4 = this._unchangedRegions.get()) == null ? void 0 : _a4.regions) || []) t11.collapseAll(e12);
        }), []);
      }), this.movedTextToCompare = VN(this, void 0), this._activeMovedText = VN(this, void 0), this._hoveredMovedText = VN(this, void 0), this.activeMovedText = Y(this, (e11) => this.movedTextToCompare.read(e11) ?? this._hoveredMovedText.read(e11) ?? this._activeMovedText.read(e11)), this._cancellationTokenSource = new gi(), this._diffProvider = Y(this, (e11) => {
        let t11 = this._diffProviderFactoryService.createDiffProvider({
          diffAlgorithm: this._options.diffAlgorithm.read(e11)
        }), n11 = lP(`onDidChange`, t11.onDidChange);
        return {
          diffProvider: t11,
          onChangeSignal: n11
        };
      }), this._register(k(() => this._cancellationTokenSource.cancel()));
      let r10 = dP(`contentChangedSignal`), i10 = this._register(new cl(() => r10.trigger(void 0), 200));
      this._register(QN((t11) => {
        let n11 = this._unchangedRegions.read(t11);
        if (!n11 || n11.regions.some((e11) => e11.isDragged.read(t11))) return;
        let r11 = n11.originalDecorationIds.map((t12) => e10.original.getDecorationRange(t12)).map((e11) => e11 ? G.fromRangeInclusive(e11) : void 0), i11 = n11.modifiedDecorationIds.map((t12) => e10.modified.getDecorationRange(t12)).map((e11) => e11 ? G.fromRangeInclusive(e11) : void 0), a11 = n11.regions.map((e11, n12) => !r11[n12] || !i11[n12] ? void 0 : new G6(r11[n12].startLineNumber, i11[n12].startLineNumber, r11[n12].length, e11.visibleLineCountTop.read(t11), e11.visibleLineCountBottom.read(t11))).filter(we), o10 = [], s10 = false;
        for (let e11 of h(a11, (e12, n12) => e12.getHiddenModifiedRange(t11).endLineNumberExclusive === n12.getHiddenModifiedRange(t11).startLineNumber)) if (e11.length > 1) {
          s10 = true;
          let t12 = e11.reduce((e12, t13) => e12 + t13.lineCount, 0), n12 = new G6(e11[0].originalLineNumber, e11[0].modifiedLineNumber, t12, e11[0].visibleLineCountTop.get(), e11[e11.length - 1].visibleLineCountBottom.get());
          o10.push(n12);
        } else o10.push(e11[0]);
        if (s10) {
          let t12 = e10.original.deltaDecorations(n11.originalDecorationIds, o10.map((e11) => ({
            range: e11.originalUnchangedRange.toInclusiveRange(),
            options: {
              description: `unchanged`
            }
          }))), r12 = e10.modified.deltaDecorations(n11.modifiedDecorationIds, o10.map((e11) => ({
            range: e11.modifiedUnchangedRange.toInclusiveRange(),
            options: {
              description: `unchanged`
            }
          })));
          FN((e11) => {
            this._unchangedRegions.set({
              regions: o10,
              originalDecorationIds: t12,
              modifiedDecorationIds: r12
            }, e11);
          });
        }
      }));
      let a10 = (t11, n11, r11) => {
        let i11 = G6.fromDiffs(t11.changes, e10.original.getLineCount(), e10.modified.getLineCount(), this._options.hideUnchangedRegionsMinimumLineCount.read(r11), this._options.hideUnchangedRegionsContextLineCount.read(r11)), a11, o10 = this._unchangedRegions.get();
        if (o10) {
          let t12 = o10.originalDecorationIds.map((t13) => e10.original.getDecorationRange(t13)).map((e11) => e11 ? G.fromRangeInclusive(e11) : void 0), n12 = o10.modifiedDecorationIds.map((t13) => e10.modified.getDecorationRange(t13)).map((e11) => e11 ? G.fromRangeInclusive(e11) : void 0), i12 = q3(o10.regions.map((e11, r12) => {
            if (!t12[r12] || !n12[r12]) return;
            let i13 = t12[r12].length;
            return new G6(t12[r12].startLineNumber, n12[r12].startLineNumber, i13, Math.min(e11.visibleLineCountTop.get(), i13), Math.min(e11.visibleLineCountBottom.get(), i13 - e11.visibleLineCountTop.get()));
          }).filter(we), (e11, t13) => !t13 || e11.modifiedLineNumber >= t13.modifiedLineNumber + t13.lineCount && e11.originalLineNumber >= t13.originalLineNumber + t13.lineCount), s11 = i12.map((e11) => new Gv(e11.getHiddenOriginalRange(r11), e11.getHiddenModifiedRange(r11)));
          s11 = Gv.clip(s11, G.ofLength(1, e10.original.getLineCount()), G.ofLength(1, e10.modified.getLineCount())), a11 = Gv.inverse(s11, e10.original.getLineCount(), e10.modified.getLineCount());
        }
        let s10 = [];
        if (a11) for (let e11 of i11) {
          let t12 = a11.filter((t13) => t13.original.intersectsStrict(e11.originalUnchangedRange) && t13.modified.intersectsStrict(e11.modifiedUnchangedRange));
          s10.push(...e11.setVisibleRanges(t12, n11));
        }
        else s10.push(...i11);
        let c10 = e10.original.deltaDecorations((o10 == null ? void 0 : o10.originalDecorationIds) || [], s10.map((e11) => ({
          range: e11.originalUnchangedRange.toInclusiveRange(),
          options: {
            description: `unchanged`
          }
        }))), l10 = e10.modified.deltaDecorations((o10 == null ? void 0 : o10.modifiedDecorationIds) || [], s10.map((e11) => ({
          range: e11.modifiedUnchangedRange.toInclusiveRange(),
          options: {
            description: `unchanged`
          }
        })));
        this._unchangedRegions.set({
          regions: s10,
          originalDecorationIds: c10,
          modifiedDecorationIds: l10
        }, n11);
      };
      this._register(e10.modified.onDidChangeContent((t11) => {
        let n11 = this._diff.get();
        if (n11) {
          let n12 = BR.fromModelContentChanges(t11.changes), r11 = q6(this._lastDiff, n12, e10.original, e10.modified);
          r11 && (this._lastDiff = r11, FN((e11) => {
            this._diff.set(U6.fromDiffResult(this._lastDiff), e11), a10(r11, e11);
            let t12 = this.movedTextToCompare.get();
            this.movedTextToCompare.set(t12 ? this._lastDiff.moves.find((e12) => e12.lineRangeMapping.modified.intersect(t12.lineRangeMapping.modified)) : void 0, e11);
          }));
        }
        this._isDiffUpToDate.set(false, void 0), i10.schedule();
      })), this._register(e10.original.onDidChangeContent((t11) => {
        let n11 = this._diff.get();
        if (n11) {
          let n12 = BR.fromModelContentChanges(t11.changes), r11 = K6(this._lastDiff, n12, e10.original, e10.modified);
          r11 && (this._lastDiff = r11, FN((e11) => {
            this._diff.set(U6.fromDiffResult(this._lastDiff), e11), a10(r11, e11);
            let t12 = this.movedTextToCompare.get();
            this.movedTextToCompare.set(t12 ? this._lastDiff.moves.find((e12) => e12.lineRangeMapping.modified.intersect(t12.lineRangeMapping.modified)) : void 0, e11);
          }));
        }
        this._isDiffUpToDate.set(false, void 0), i10.schedule();
      })), this._register(nP(async (t11, n11) => {
        this._options.hideUnchangedRegionsMinimumLineCount.read(t11), this._options.hideUnchangedRegionsContextLineCount.read(t11), i10.cancel(), r10.read(t11);
        let o10 = this._diffProvider.read(t11);
        o10.onChangeSignal.read(t11), I6(Wy, t11), I6(Ny, t11), this._isDiffUpToDate.set(false, void 0);
        let s10 = [];
        n11.add(e10.original.onDidChangeContent((e11) => {
          let t12 = BR.fromModelContentChanges(e11.changes);
          s10 = Cz(s10, t12);
        }));
        let c10 = [];
        n11.add(e10.modified.onDidChangeContent((e11) => {
          let t12 = BR.fromModelContentChanges(e11.changes);
          c10 = Cz(c10, t12);
        }));
        let l10 = await o10.diffProvider.computeDiff(e10.original, e10.modified, {
          ignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(t11),
          maxComputationTimeMs: this._options.maxComputationTimeMs.read(t11),
          computeMoves: this._options.showMoves.read(t11)
        }, this._cancellationTokenSource.token);
        this._cancellationTokenSource.token.isCancellationRequested || e10.original.isDisposed() || e10.modified.isDisposed() || (l10 = V6(l10, e10.original, e10.modified), l10 = K6(l10, s10, e10.original, e10.modified) ?? l10, l10 = q6(l10, c10, e10.original, e10.modified) ?? l10, FN((e11) => {
          a10(l10, e11), this._lastDiff = l10;
          let t12 = U6.fromDiffResult(l10);
          this._diff.set(t12, e11), this._isDiffUpToDate.set(true, e11);
          let n12 = this.movedTextToCompare.get();
          this.movedTextToCompare.set(n12 ? this._lastDiff.moves.find((e12) => e12.lineRangeMapping.modified.intersect(n12.lineRangeMapping.modified)) : void 0, e11);
        }));
      }));
    }
    ensureModifiedLineIsVisible(e10, t10, n10) {
      var _a3, _b3;
      if (((_a3 = this.diff.get()) == null ? void 0 : _a3.mappings.length) === 0) return;
      let r10 = ((_b3 = this._unchangedRegions.get()) == null ? void 0 : _b3.regions) || [];
      for (let i10 of r10) if (i10.getHiddenModifiedRange(void 0).contains(e10)) {
        i10.showModifiedLine(e10, t10, n10);
        return;
      }
    }
    ensureOriginalLineIsVisible(e10, t10, n10) {
      var _a3, _b3;
      if (((_a3 = this.diff.get()) == null ? void 0 : _a3.mappings.length) === 0) return;
      let r10 = ((_b3 = this._unchangedRegions.get()) == null ? void 0 : _b3.regions) || [];
      for (let i10 of r10) if (i10.getHiddenOriginalRange(void 0).contains(e10)) {
        i10.showOriginalLine(e10, t10, n10);
        return;
      }
    }
    async waitForDiff() {
      await SP(this.isDiffUpToDate, (e10) => e10);
    }
    serializeState() {
      let e10 = this._unchangedRegions.get();
      return {
        collapsedRegions: e10 == null ? void 0 : e10.regions.map((e11) => ({
          range: e11.getHiddenModifiedRange(void 0).serialize()
        }))
      };
    }
    restoreSerializedState(e10) {
      var _a3;
      let t10 = (_a3 = e10.collapsedRegions) == null ? void 0 : _a3.map((e11) => G.deserialize(e11.range)), n10 = this._unchangedRegions.get();
      !n10 || !t10 || FN((e11) => {
        for (let r10 of n10.regions) for (let n11 of t10) if (r10.modifiedUnchangedRange.intersect(n11)) {
          r10.setHiddenModifiedRange(n11, e11);
          break;
        }
      });
    }
  };
  B6 = R6([
    z6(2, k6)
  ], B6);
  function V6(e10, t10, n10) {
    return {
      changes: e10.changes.map((e11) => new Jv(e11.original, e11.modified, e11.innerChanges ? e11.innerChanges.map((e12) => H6(e12, t10, n10)) : void 0)),
      moves: e10.moves,
      identical: e10.identical,
      quitEarly: e10.quitEarly
    };
  }
  function H6(e10, t10, n10) {
    let r10 = e10.originalRange, i10 = e10.modifiedRange;
    return r10.startColumn === 1 && i10.startColumn === 1 && (r10.endColumn !== 1 || i10.endColumn !== 1) && r10.endColumn === t10.getLineMaxColumn(r10.endLineNumber) && i10.endColumn === n10.getLineMaxColumn(i10.endLineNumber) && r10.endLineNumber < t10.getLineCount() && i10.endLineNumber < n10.getLineCount() && (r10 = r10.setEndPosition(r10.endLineNumber + 1, 1), i10 = i10.setEndPosition(i10.endLineNumber + 1, 1)), new Yv(r10, i10);
  }
  var U6 = class e10 {
    static fromDiffResult(t10) {
      return new e10(t10.changes.map((e11) => new W6(e11)), t10.moves || [], t10.identical, t10.quitEarly);
    }
    constructor(e11, t10, n10, r10) {
      this.mappings = e11, this.movedTexts = t10, this.identical = n10, this.quitEarly = r10;
    }
  }, W6 = class {
    constructor(e10) {
      this.lineRangeMapping = e10;
    }
  }, G6 = class e10 {
    static fromDiffs(t10, n10, r10, i10, a10) {
      let o10 = Jv.inverse(t10, n10, r10), s10 = [];
      for (let t11 of o10) {
        let o11 = t11.original.startLineNumber, c10 = t11.modified.startLineNumber, l10 = t11.original.length, u10 = o11 === 1 && c10 === 1, d10 = o11 + l10 === n10 + 1 && c10 + l10 === r10 + 1;
        (u10 || d10) && l10 >= a10 + i10 ? (u10 && !d10 && (l10 -= a10), d10 && !u10 && (o11 += a10, c10 += a10, l10 -= a10), s10.push(new e10(o11, c10, l10, 0, 0))) : l10 >= a10 * 2 + i10 && (o11 += a10, c10 += a10, l10 -= a10 * 2, s10.push(new e10(o11, c10, l10, 0, 0)));
      }
      return s10;
    }
    get originalUnchangedRange() {
      return G.ofLength(this.originalLineNumber, this.lineCount);
    }
    get modifiedUnchangedRange() {
      return G.ofLength(this.modifiedLineNumber, this.lineCount);
    }
    constructor(e11, t10, n10, r10, i10) {
      this.originalLineNumber = e11, this.modifiedLineNumber = t10, this.lineCount = n10, this._visibleLineCountTop = VN(this, 0), this.visibleLineCountTop = this._visibleLineCountTop, this._visibleLineCountBottom = VN(this, 0), this.visibleLineCountBottom = this._visibleLineCountBottom, this._shouldHideControls = Y(this, (e12) => this.visibleLineCountTop.read(e12) + this.visibleLineCountBottom.read(e12) === this.lineCount && !this.isDragged.read(e12)), this.isDragged = VN(this, void 0);
      let a10 = Math.max(Math.min(r10, this.lineCount), 0), o10 = Math.max(Math.min(i10, this.lineCount - r10), 0);
      tm(r10 === a10), tm(i10 === o10), this._visibleLineCountTop.set(a10, void 0), this._visibleLineCountBottom.set(o10, void 0);
    }
    setVisibleRanges(t10, n10) {
      let r10 = [], i10 = new Lv(t10.map((e11) => e11.modified)).subtractFrom(this.modifiedUnchangedRange), a10 = this.originalLineNumber, o10 = this.modifiedLineNumber, s10 = this.modifiedLineNumber + this.lineCount;
      if (i10.ranges.length === 0) this.showAll(n10), r10.push(this);
      else {
        let t11 = 0;
        for (let c10 of i10.ranges) {
          let l10 = t11 === i10.ranges.length - 1;
          t11++;
          let u10 = (l10 ? s10 : c10.endLineNumberExclusive) - o10, d10 = new e10(a10, o10, u10, 0, 0);
          d10.setHiddenModifiedRange(c10, n10), r10.push(d10), a10 = d10.originalUnchangedRange.endLineNumberExclusive, o10 = d10.modifiedUnchangedRange.endLineNumberExclusive;
        }
      }
      return r10;
    }
    shouldHideControls(e11) {
      return this._shouldHideControls.read(e11);
    }
    getHiddenOriginalRange(e11) {
      return G.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(e11), this.lineCount - this._visibleLineCountTop.read(e11) - this._visibleLineCountBottom.read(e11));
    }
    getHiddenModifiedRange(e11) {
      return G.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(e11), this.lineCount - this._visibleLineCountTop.read(e11) - this._visibleLineCountBottom.read(e11));
    }
    setHiddenModifiedRange(e11, t10) {
      let n10 = e11.startLineNumber - this.modifiedLineNumber, r10 = this.modifiedLineNumber + this.lineCount - e11.endLineNumberExclusive;
      this.setState(n10, r10, t10);
    }
    getMaxVisibleLineCountTop() {
      return this.lineCount - this._visibleLineCountBottom.get();
    }
    getMaxVisibleLineCountBottom() {
      return this.lineCount - this._visibleLineCountTop.get();
    }
    showMoreAbove(e11 = 10, t10) {
      let n10 = this.getMaxVisibleLineCountTop();
      this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + e11, n10), t10);
    }
    showMoreBelow(e11 = 10, t10) {
      let n10 = this.lineCount - this._visibleLineCountTop.get();
      this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + e11, n10), t10);
    }
    showAll(e11) {
      this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), e11);
    }
    showModifiedLine(e11, t10, n10) {
      let r10 = e11 + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get()), i10 = this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount - e11;
      t10 === 0 && r10 < i10 || t10 === 1 ? this._visibleLineCountTop.set(this._visibleLineCountTop.get() + r10, n10) : this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + i10, n10);
    }
    showOriginalLine(e11, t10, n10) {
      let r10 = e11 - this.originalLineNumber, i10 = this.originalLineNumber + this.lineCount - e11;
      t10 === 0 && r10 < i10 || t10 === 1 ? this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + i10 - r10, this.getMaxVisibleLineCountTop()), n10) : this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + r10 - i10, this.getMaxVisibleLineCountBottom()), n10);
    }
    collapseAll(e11) {
      this._visibleLineCountTop.set(0, e11), this._visibleLineCountBottom.set(0, e11);
    }
    setState(e11, t10, n10) {
      e11 = Math.max(Math.min(e11, this.lineCount), 0), t10 = Math.max(Math.min(t10, this.lineCount - e11), 0), this._visibleLineCountTop.set(e11, n10), this._visibleLineCountBottom.set(t10, n10);
    }
  };
  function K6(e10, t10, n10, r10) {
  }
  function q6(e10, t10, n10, r10) {
  }
  var J6 = class extends j {
    get visibility() {
      return this._visibility;
    }
    set visibility(e10) {
      this._visibility !== e10 && (this._visibility = e10, this._diffActions.style.visibility = e10 ? `visible` : `hidden`);
    }
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      super(), this._getViewZoneId = e10, this._marginDomNode = t10, this._modifiedEditor = n10, this._diff = r10, this._editor = i10, this._viewLineCounts = a10, this._originalTextModel = o10, this._contextMenuService = s10, this._clipboardService = c10, this._visibility = false, this._marginDomNode.style.zIndex = `10`, this._diffActions = document.createElement(`div`), this._diffActions.className = sp.asClassName(L.lightBulb) + ` lightbulb-glyph`, this._diffActions.style.position = `absolute`;
      let l10 = this._modifiedEditor.getOption(67);
      this._diffActions.style.right = `0px`, this._diffActions.style.visibility = `hidden`, this._diffActions.style.height = `${l10}px`, this._diffActions.style.lineHeight = `${l10}px`, this._marginDomNode.appendChild(this._diffActions);
      let u10 = 0, d10 = n10.getOption(128) && !bt, f10 = (e11, t11) => {
        this._contextMenuService.showContextMenu({
          domForShadowRoot: d10 ? n10.getDomNode() ?? void 0 : void 0,
          getAnchor: () => ({
            x: e11,
            y: t11
          }),
          getActions: () => {
            let e12 = [], t12 = r10.modified.isEmpty;
            e12.push(new ep(`diff.clipboard.copyDeletedContent`, t12 ? r10.original.length > 1 ? T(`diff.clipboard.copyDeletedLinesContent.label`, `Copy deleted lines`) : T(`diff.clipboard.copyDeletedLinesContent.single.label`, `Copy deleted line`) : r10.original.length > 1 ? T(`diff.clipboard.copyChangedLinesContent.label`, `Copy changed lines`) : T(`diff.clipboard.copyChangedLinesContent.single.label`, `Copy changed line`), void 0, true, async () => {
              let e13 = this._originalTextModel.getValueInRange(r10.original.toExclusiveRange());
              await this._clipboardService.writeText(e13);
            })), r10.original.length > 1 && e12.push(new ep(`diff.clipboard.copyDeletedLineContent`, t12 ? T(`diff.clipboard.copyDeletedLineContent.label`, `Copy deleted line ({0})`, r10.original.startLineNumber + u10) : T(`diff.clipboard.copyChangedLineContent.label`, `Copy changed line ({0})`, r10.original.startLineNumber + u10), void 0, true, async () => {
              let e13 = this._originalTextModel.getLineContent(r10.original.startLineNumber + u10);
              if (e13 === ``) {
                let t13 = this._originalTextModel.getEndOfLineSequence();
                e13 = t13 === 0 ? `
` : `\r
`;
              }
              await this._clipboardService.writeText(e13);
            }));
            let i11 = n10.getOption(92);
            return i11 || e12.push(new ep(`diff.inline.revertChange`, T(`diff.inline.revertChange.label`, `Revert this change`), void 0, true, async () => {
              this._editor.revert(this._diff);
            })), e12;
          },
          autoSelectFirstItem: true
        });
      };
      this._register(td(this._diffActions, `mousedown`, (e11) => {
        if (!e11.leftButton) return;
        let { top: t11, height: n11 } = gd(this._diffActions), r11 = Math.floor(l10 / 3);
        e11.preventDefault(), f10(e11.posx, t11 + n11 + r11);
      })), this._register(n10.onMouseMove((e11) => {
        (e11.target.type === 8 || e11.target.type === 5) && e11.target.detail.viewZoneId === this._getViewZoneId() ? (u10 = this._updateLightBulbPosition(this._marginDomNode, e11.event.browserEvent.y, l10), this.visibility = true) : this.visibility = false;
      })), this._register(n10.onMouseDown((e11) => {
        if (e11.event.leftButton && (e11.target.type === 8 || e11.target.type === 5)) {
          let t11 = e11.target.detail.viewZoneId;
          t11 === this._getViewZoneId() && (e11.event.preventDefault(), u10 = this._updateLightBulbPosition(this._marginDomNode, e11.event.browserEvent.y, l10), f10(e11.event.posx, e11.event.posy + l10));
        }
      }));
    }
    _updateLightBulbPosition(e10, t10, n10) {
      let { top: r10 } = gd(e10), i10 = t10 - r10, a10 = Math.floor(i10 / n10), o10 = a10 * n10;
      if (this._diffActions.style.top = `${o10}px`, this._viewLineCounts) {
        let e11 = 0;
        for (let t11 = 0; t11 < this._viewLineCounts.length; t11++) if (e11 += this._viewLineCounts[t11], a10 < e11) return t11;
      }
      return a10;
    }
  };
  const Y6 = lh(`diffEditorWidget`, {
    createHTML: (e10) => e10
  });
  function X6(e10, t10, n10, r10) {
    Pf(r10, t10.fontInfo);
    let i10 = n10.length > 0, a10 = new Gh(1e4), o10 = 0, s10 = 0, c10 = [];
    for (let r11 = 0; r11 < e10.lineTokens.length; r11++) {
      let l11 = r11 + 1, u11 = e10.lineTokens[r11], d11 = e10.lineBreakData[r11], f10 = sX.filter(n10, l11, 1, 2 ** 53 - 1);
      if (d11) {
        let n11 = 0;
        for (let r12 of d11.breakOffsets) {
          let c11 = u11.sliceAndInflate(n11, r12, 0);
          o10 = Math.max(o10, $6(s10, c11, sX.extractWrapped(f10, n11, r12), i10, e10.mightContainNonBasicASCII, e10.mightContainRTL, t10, a10)), s10++, n11 = r12;
        }
        c10.push(d11.breakOffsets.length);
      } else c10.push(1), o10 = Math.max(o10, $6(s10, u11, f10, i10, e10.mightContainNonBasicASCII, e10.mightContainRTL, t10, a10)), s10++;
    }
    o10 += t10.scrollBeyondLastColumn;
    let l10 = a10.build(), u10 = Y6 ? Y6.createHTML(l10) : l10;
    r10.innerHTML = u10;
    let d10 = o10 * t10.typicalHalfwidthCharacterWidth;
    return {
      heightInLines: s10,
      minWidthInPx: d10,
      viewLineCounts: c10
    };
  }
  var Z6 = class {
    constructor(e10, t10, n10, r10) {
      this.lineTokens = e10, this.lineBreakData = t10, this.mightContainNonBasicASCII = n10, this.mightContainRTL = r10;
    }
  }, Q6 = class e10 {
    static fromEditor(t10) {
      var _a3;
      let n10 = t10.getOptions(), r10 = n10.get(50), i10 = n10.get(146);
      return new e10(((_a3 = t10.getModel()) == null ? void 0 : _a3.getOptions().tabSize) || 0, r10, n10.get(33), r10.typicalHalfwidthCharacterWidth, n10.get(105), n10.get(67), i10.decorationsWidth, n10.get(118), n10.get(100), n10.get(95), n10.get(51));
    }
    constructor(e11, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10) {
      this.tabSize = e11, this.fontInfo = t10, this.disableMonospaceOptimizations = n10, this.typicalHalfwidthCharacterWidth = r10, this.scrollBeyondLastColumn = i10, this.lineHeight = a10, this.lineDecorationsWidth = o10, this.stopRenderingLineAfter = s10, this.renderWhitespace = c10, this.renderControlCharacters = l10, this.fontLigatures = u10;
    }
  };
  function $6(e10, t10, n10, r10, i10, a10, o10, s10) {
    s10.appendString(`<div class="view-line`), r10 || s10.appendString(` char-delete`), s10.appendString(`" style="top:`), s10.appendString(String(e10 * o10.lineHeight)), s10.appendString(`px;width:1000000px;">`);
    let c10 = t10.getLineContent(), l10 = PX.isBasicASCII(c10, i10), u10 = PX.containsRTL(c10, l10, a10), d10 = _X(new pX(o10.fontInfo.isMonospace && !o10.disableMonospaceOptimizations, o10.fontInfo.canUseHalfwidthRightwardsArrow, c10, false, l10, u10, 0, t10, n10, o10.tabSize, 0, o10.fontInfo.spaceWidth, o10.fontInfo.middotWidth, o10.fontInfo.wsmiddotWidth, o10.stopRenderingLineAfter, o10.renderWhitespace, o10.renderControlCharacters, o10.fontLigatures !== yn.OFF, null), s10);
    return s10.appendString(`</div>`), d10.characterMapping.getHorizontalOffset(d10.characterMapping.length);
  }
  var e8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, t8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let n8 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10) {
      super(), this._targetWindow = e10, this._editors = t10, this._diffModel = n10, this._options = r10, this._diffEditorWidget = i10, this._canIgnoreViewZoneUpdateEvent = a10, this._origViewZonesToIgnore = o10, this._modViewZonesToIgnore = s10, this._clipboardService = c10, this._contextMenuService = l10, this._originalTopPadding = VN(this, 0), this._originalScrollOffset = VN(this, 0), this._originalScrollOffsetAnimated = L3(this._targetWindow, this._originalScrollOffset, this._store), this._modifiedTopPadding = VN(this, 0), this._modifiedScrollOffset = VN(this, 0), this._modifiedScrollOffsetAnimated = L3(this._targetWindow, this._modifiedScrollOffset, this._store);
      let u10 = VN(`invalidateAlignmentsState`, 0), d10 = this._register(new cl(() => {
        u10.set(u10.get() + 1, void 0);
      }, 0));
      this._register(this._editors.original.onDidChangeViewZones((e11) => {
        this._canIgnoreViewZoneUpdateEvent() || d10.schedule();
      })), this._register(this._editors.modified.onDidChangeViewZones((e11) => {
        this._canIgnoreViewZoneUpdateEvent() || d10.schedule();
      })), this._register(this._editors.original.onDidChangeConfiguration((e11) => {
        (e11.hasChanged(147) || e11.hasChanged(67)) && d10.schedule();
      })), this._register(this._editors.modified.onDidChangeConfiguration((e11) => {
        (e11.hasChanged(147) || e11.hasChanged(67)) && d10.schedule();
      }));
      let f10 = this._diffModel.map((e11) => e11 ? oP(this, e11.model.original.onDidChangeTokens, () => e11.model.original.tokenization.backgroundTokenizationState === 2) : void 0).map((e11, t11) => e11 == null ? void 0 : e11.read(t11)), p10 = Y((e11) => {
        let t11 = this._diffModel.read(e11), n11 = t11 == null ? void 0 : t11.diff.read(e11);
        if (!t11 || !n11) return null;
        u10.read(e11);
        let r11 = this._options.renderSideBySide.read(e11), i11 = r11;
        return r8(this._editors.original, this._editors.modified, n11.mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, i11);
      }), m10 = Y((e11) => {
        var _a3;
        let t11 = (_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.movedTextToCompare.read(e11);
        if (!t11) return null;
        u10.read(e11);
        let n11 = t11.changes.map((e12) => new W6(e12));
        return r8(this._editors.original, this._editors.modified, n11, this._origViewZonesToIgnore, this._modViewZonesToIgnore, true);
      });
      function h10() {
        let e11 = document.createElement(`div`);
        return e11.className = `diagonal-fill`, e11;
      }
      let g10 = this._register(new A());
      this.viewZones = JN(this, (e11, t11) => {
        var _a3, _b3, _c3, _d3;
        g10.clear();
        let n11 = p10.read(e11) || [], r11 = [], a11 = [], o11 = this._modifiedTopPadding.read(e11);
        o11 > 0 && a11.push({
          afterLineNumber: 0,
          domNode: document.createElement(`div`),
          heightInPx: o11,
          showInHiddenAreas: true,
          suppressMouseDown: true
        });
        let s11 = this._originalTopPadding.read(e11);
        s11 > 0 && r11.push({
          afterLineNumber: 0,
          domNode: document.createElement(`div`),
          heightInPx: s11,
          showInHiddenAreas: true,
          suppressMouseDown: true
        });
        let c11 = this._options.renderSideBySide.read(e11), l11 = c11 ? void 0 : (_a3 = this._editors.modified._getViewModel()) == null ? void 0 : _a3.createLineBreaksComputer();
        if (l11) {
          let e12 = this._editors.original.getModel();
          for (let t12 of n11) if (t12.diff) for (let n12 = t12.originalRange.startLineNumber; n12 < t12.originalRange.endLineNumberExclusive; n12++) {
            if (n12 > e12.getLineCount()) return {
              orig: r11,
              mod: a11
            };
            l11 == null ? void 0 : l11.addRequest(e12.getLineContent(n12), null, null);
          }
        }
        let u11 = (l11 == null ? void 0 : l11.finalize()) ?? [], d11 = 0, _11 = this._editors.modified.getOption(67), v10 = (_b3 = this._diffModel.read(e11)) == null ? void 0 : _b3.movedTextToCompare.read(e11), y10 = ((_c3 = this._editors.original.getModel()) == null ? void 0 : _c3.mightContainNonBasicASCII()) ?? false, b10 = ((_d3 = this._editors.original.getModel()) == null ? void 0 : _d3.mightContainRTL()) ?? false, x10 = Q6.fromEditor(this._editors.modified);
        for (let o12 of n11) if (o12.diff && !c11 && (!this._options.useTrueInlineDiffRendering.read(e11) || !a8(o12.diff))) {
          if (!o12.originalRange.isEmpty) {
            f10.read(e11);
            let t13 = document.createElement(`div`);
            t13.classList.add(`view-lines`, `line-delete`, `monaco-mouse-cursor-text`);
            let n12 = this._editors.original.getModel();
            if (o12.originalRange.endLineNumberExclusive - 1 > n12.getLineCount()) return {
              orig: r11,
              mod: a11
            };
            let i11 = new Z6(o12.originalRange.mapToLineArray((e12) => n12.tokenization.getLineTokens(e12)), o12.originalRange.mapToLineArray((e12) => u11[d11++]), y10, b10), s12 = [];
            for (let e12 of o12.diff.innerChanges || []) s12.push(new FX(e12.originalRange.delta(-(o12.diff.original.startLineNumber - 1)), C6.className, 0));
            let c12 = X6(i11, x10, s12, t13), l12 = document.createElement(`div`);
            if (l12.className = `inline-deleted-margin-view-zone`, Pf(l12, x10.fontInfo), this._options.renderIndicators.read(e11)) for (let e12 = 0; e12 < c12.heightInLines; e12++) {
              let t14 = document.createElement(`div`);
              t14.className = `delete-sign ${sp.asClassName(h6)}`, t14.setAttribute(`style`, `position:absolute;top:${e12 * _11}px;width:${x10.lineDecorationsWidth}px;height:${_11}px;right:0;`), l12.appendChild(t14);
            }
            let p11;
            g10.add(new J6(() => De(p11), l12, this._editors.modified, o12.diff, this._diffEditorWidget, c12.viewLineCounts, this._editors.original.getModel(), this._contextMenuService, this._clipboardService));
            for (let e12 = 0; e12 < c12.viewLineCounts.length; e12++) {
              let t14 = c12.viewLineCounts[e12];
              t14 > 1 && r11.push({
                afterLineNumber: o12.originalRange.startLineNumber + e12,
                domNode: h10(),
                heightInPx: (t14 - 1) * _11,
                showInHiddenAreas: true,
                suppressMouseDown: true
              });
            }
            a11.push({
              afterLineNumber: o12.modifiedRange.startLineNumber - 1,
              domNode: t13,
              heightInPx: c12.heightInLines * _11,
              minWidthInPx: c12.minWidthInPx,
              marginDomNode: l12,
              setZoneId(e12) {
                p11 = e12;
              },
              showInHiddenAreas: true,
              suppressMouseDown: true
            });
          }
          let t12 = document.createElement(`div`);
          t12.className = `gutter-delete`, r11.push({
            afterLineNumber: o12.originalRange.endLineNumberExclusive - 1,
            domNode: h10(),
            heightInPx: o12.modifiedHeightInPx,
            marginDomNode: t12,
            showInHiddenAreas: true,
            suppressMouseDown: true
          });
        } else {
          let n12 = o12.modifiedHeightInPx - o12.originalHeightInPx;
          if (n12 > 0) {
            if (v10 == null ? void 0 : v10.lineRangeMapping.original.delta(-1).deltaLength(2).contains(o12.originalRange.endLineNumberExclusive - 1)) continue;
            r11.push({
              afterLineNumber: o12.originalRange.endLineNumberExclusive - 1,
              domNode: h10(),
              heightInPx: n12,
              showInHiddenAreas: true,
              suppressMouseDown: true
            });
          } else {
            let r12 = function() {
              let e12 = document.createElement(`div`);
              return e12.className = `arrow-revert-change ` + sp.asClassName(L.arrowRight), t11.add(z(e12, `mousedown`, (e13) => e13.stopPropagation())), t11.add(z(e12, `click`, (e13) => {
                e13.stopPropagation(), i10.revert(o12.diff);
              })), H(`div`, {}, e12);
            };
            if (v10 == null ? void 0 : v10.lineRangeMapping.modified.delta(-1).deltaLength(2).contains(o12.modifiedRange.endLineNumberExclusive - 1)) continue;
            let s12;
            o12.diff && o12.diff.modified.isEmpty && this._options.shouldRenderOldRevertArrows.read(e11) && (s12 = r12()), a11.push({
              afterLineNumber: o12.modifiedRange.endLineNumberExclusive - 1,
              domNode: h10(),
              heightInPx: -n12,
              marginDomNode: s12,
              showInHiddenAreas: true,
              suppressMouseDown: true
            });
          }
        }
        for (let t12 of m10.read(e11) ?? []) {
          if (!(v10 == null ? void 0 : v10.lineRangeMapping.original.intersect(t12.originalRange)) || !(v10 == null ? void 0 : v10.lineRangeMapping.modified.intersect(t12.modifiedRange))) continue;
          let e12 = t12.modifiedHeightInPx - t12.originalHeightInPx;
          e12 > 0 ? r11.push({
            afterLineNumber: t12.originalRange.endLineNumberExclusive - 1,
            domNode: h10(),
            heightInPx: e12,
            showInHiddenAreas: true,
            suppressMouseDown: true
          }) : a11.push({
            afterLineNumber: t12.modifiedRange.endLineNumberExclusive - 1,
            domNode: h10(),
            heightInPx: -e12,
            showInHiddenAreas: true,
            suppressMouseDown: true
          });
        }
        return {
          orig: r11,
          mod: a11
        };
      });
      let _10 = false;
      this._register(this._editors.original.onDidScrollChange((e11) => {
        e11.scrollLeftChanged && !_10 && (_10 = true, this._editors.modified.setScrollLeft(e11.scrollLeft), _10 = false);
      })), this._register(this._editors.modified.onDidScrollChange((e11) => {
        e11.scrollLeftChanged && !_10 && (_10 = true, this._editors.original.setScrollLeft(e11.scrollLeft), _10 = false);
      })), this._originalScrollTop = oP(this._editors.original.onDidScrollChange, () => this._editors.original.getScrollTop()), this._modifiedScrollTop = oP(this._editors.modified.onDidScrollChange, () => this._editors.modified.getScrollTop()), this._register(QN((e11) => {
        let t11 = this._originalScrollTop.read(e11) - (this._originalScrollOffsetAnimated.get() - this._modifiedScrollOffsetAnimated.read(e11)) - (this._originalTopPadding.get() - this._modifiedTopPadding.read(e11));
        t11 !== this._editors.modified.getScrollTop() && this._editors.modified.setScrollTop(t11, 1);
      })), this._register(QN((e11) => {
        let t11 = this._modifiedScrollTop.read(e11) - (this._modifiedScrollOffsetAnimated.get() - this._originalScrollOffsetAnimated.read(e11)) - (this._modifiedTopPadding.get() - this._originalTopPadding.read(e11));
        t11 !== this._editors.original.getScrollTop() && this._editors.original.setScrollTop(t11, 1);
      })), this._register(QN((e11) => {
        var _a3;
        let t11 = (_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.movedTextToCompare.read(e11), n11 = 0;
        if (t11) {
          let e12 = this._editors.original.getTopForLineNumber(t11.lineRangeMapping.original.startLineNumber, true) - this._originalTopPadding.get(), r11 = this._editors.modified.getTopForLineNumber(t11.lineRangeMapping.modified.startLineNumber, true) - this._modifiedTopPadding.get();
          n11 = r11 - e12;
        }
        n11 > 0 ? (this._modifiedTopPadding.set(0, void 0), this._originalTopPadding.set(n11, void 0)) : n11 < 0 ? (this._modifiedTopPadding.set(-n11, void 0), this._originalTopPadding.set(0, void 0)) : setTimeout(() => {
          this._modifiedTopPadding.set(0, void 0), this._originalTopPadding.set(0, void 0);
        }, 400), this._editors.modified.hasTextFocus() ? this._originalScrollOffset.set(this._modifiedScrollOffset.get() - n11, void 0, true) : this._modifiedScrollOffset.set(this._originalScrollOffset.get() + n11, void 0, true);
      }));
    }
  };
  n8 = e8([
    t8(8, WJ),
    t8(9, jE)
  ], n8);
  function r8(e10, t10, n10, r10, i10, a10) {
    let o10 = new me(i8(e10, r10)), s10 = new me(i8(t10, i10)), c10 = e10.getOption(67), l10 = t10.getOption(67), u10 = [], d10 = 0, f10 = 0;
    function p10(e11, t11) {
      for (; ; ) {
        let n11 = o10.peek(), r11 = s10.peek();
        if (n11 && n11.lineNumber >= e11 && (n11 = void 0), r11 && r11.lineNumber >= t11 && (r11 = void 0), !n11 && !r11) break;
        let i11 = n11 ? n11.lineNumber - d10 : Number.MAX_VALUE, a11 = r11 ? r11.lineNumber - f10 : Number.MAX_VALUE;
        i11 < a11 ? (o10.dequeue(), r11 = {
          lineNumber: n11.lineNumber - d10 + f10,
          heightInPx: 0
        }) : i11 > a11 ? (s10.dequeue(), n11 = {
          lineNumber: r11.lineNumber - f10 + d10,
          heightInPx: 0
        }) : (o10.dequeue(), s10.dequeue()), u10.push({
          originalRange: G.ofLength(n11.lineNumber, 1),
          modifiedRange: G.ofLength(r11.lineNumber, 1),
          originalHeightInPx: c10 + n11.heightInPx,
          modifiedHeightInPx: l10 + r11.heightInPx,
          diff: void 0
        });
      }
    }
    for (let t11 of n10) {
      let h10 = function(e11, n12, a11 = false) {
        var _a3, _b3;
        if (e11 < m10 || n12 < i11) return;
        if (r11) r11 = false;
        else if (!a11 && (e11 === m10 || n12 === i11)) return;
        let d11 = new G(m10, e11), f11 = new G(i11, n12);
        if (d11.isEmpty && f11.isEmpty) return;
        let p11 = ((_a3 = o10.takeWhile((t12) => t12.lineNumber < e11)) == null ? void 0 : _a3.reduce((e12, t12) => e12 + t12.heightInPx, 0)) ?? 0, h11 = ((_b3 = s10.takeWhile((e12) => e12.lineNumber < n12)) == null ? void 0 : _b3.reduce((e12, t12) => e12 + t12.heightInPx, 0)) ?? 0;
        u10.push({
          originalRange: d11,
          modifiedRange: f11,
          originalHeightInPx: d11.length * c10 + p11,
          modifiedHeightInPx: f11.length * l10 + h11,
          diff: t11.lineRangeMapping
        }), m10 = e11, i11 = n12;
      };
      let n11 = t11.lineRangeMapping;
      p10(n11.original.startLineNumber, n11.modified.startLineNumber);
      let r11 = true, i11 = n11.modified.startLineNumber, m10 = n11.original.startLineNumber;
      if (a10) for (let t12 of n11.innerChanges || []) {
        t12.originalRange.startColumn > 1 && t12.modifiedRange.startColumn > 1 && h10(t12.originalRange.startLineNumber, t12.modifiedRange.startLineNumber);
        let n12 = e10.getModel(), r12 = t12.originalRange.endLineNumber <= n12.getLineCount() ? n12.getLineMaxColumn(t12.originalRange.endLineNumber) : 2 ** 53 - 1;
        t12.originalRange.endColumn < r12 && h10(t12.originalRange.endLineNumber, t12.modifiedRange.endLineNumber);
      }
      h10(n11.original.endLineNumberExclusive, n11.modified.endLineNumberExclusive, true), d10 = n11.original.endLineNumberExclusive, f10 = n11.modified.endLineNumberExclusive;
    }
    return p10(Number.MAX_VALUE, Number.MAX_VALUE), u10;
  }
  function i8(e10, t10) {
    let n10 = [], r10 = [], i10 = e10.getOption(147).wrappingColumn !== -1, a10 = e10._getViewModel().coordinatesConverter, o10 = e10.getOption(67);
    if (i10) for (let t11 = 1; t11 <= e10.getModel().getLineCount(); t11++) {
      let e11 = a10.getModelLineViewLineCount(t11);
      e11 > 1 && r10.push({
        lineNumber: t11,
        heightInPx: o10 * (e11 - 1)
      });
    }
    for (let r11 of e10.getWhitespaces()) {
      if (t10.has(r11.id)) continue;
      let e11 = r11.afterLineNumber === 0 ? 0 : a10.convertViewPositionToModelPosition(new P(r11.afterLineNumber, 1)).lineNumber;
      n10.push({
        lineNumber: e11,
        heightInPx: r11.height
      });
    }
    let s10 = M3(n10, r10, (e11) => e11.lineNumber, (e11, t11) => ({
      lineNumber: e11.lineNumber,
      heightInPx: e11.heightInPx + t11.heightInPx
    }));
    return s10;
  }
  function a8(e10) {
    return e10.innerChanges ? e10.innerChanges.every((e11) => o8(e11.modifiedRange) && o8(e11.originalRange) || e11.originalRange.equalsRange(new F(1, 1, 1, 1))) : false;
  }
  function o8(e10) {
    return e10.startLineNumber === e10.endLineNumber;
  }
  var s8 = (_kb = class extends j {
    constructor(t10, n10, r10, i10, a10) {
      super(), this._rootElement = t10, this._diffModel = n10, this._originalEditorLayoutInfo = r10, this._modifiedEditorLayoutInfo = i10, this._editors = a10, this._originalScrollTop = oP(this, this._editors.original.onDidScrollChange, () => this._editors.original.getScrollTop()), this._modifiedScrollTop = oP(this, this._editors.modified.onDidScrollChange, () => this._editors.modified.getScrollTop()), this._viewZonesChanged = lP(`onDidChangeViewZones`, this._editors.modified.onDidChangeViewZones), this.width = VN(this, 0), this._modifiedViewZonesChangedSignal = lP(`modified.onDidChangeViewZones`, this._editors.modified.onDidChangeViewZones), this._originalViewZonesChangedSignal = lP(`original.onDidChangeViewZones`, this._editors.original.onDidChangeViewZones), this._state = JN(this, (t11, n11) => {
        var _a3;
        this._element.replaceChildren();
        let r11 = this._diffModel.read(t11), i11 = (_a3 = r11 == null ? void 0 : r11.diff.read(t11)) == null ? void 0 : _a3.movedTexts;
        if (!i11 || i11.length === 0) {
          this.width.set(0, void 0);
          return;
        }
        this._viewZonesChanged.read(t11);
        let a11 = this._originalEditorLayoutInfo.read(t11), o11 = this._modifiedEditorLayoutInfo.read(t11);
        if (!a11 || !o11) {
          this.width.set(0, void 0);
          return;
        }
        this._modifiedViewZonesChangedSignal.read(t11), this._originalViewZonesChangedSignal.read(t11);
        let s11 = i11.map((e10) => {
          function n12(e11, t12) {
            let n13 = t12.getTopForLineNumber(e11.startLineNumber, true), r13 = t12.getTopForLineNumber(e11.endLineNumberExclusive, true);
            return (n13 + r13) / 2;
          }
          let r12 = n12(e10.lineRangeMapping.original, this._editors.original), i12 = this._originalScrollTop.read(t11), a12 = n12(e10.lineRangeMapping.modified, this._editors.modified), o12 = this._modifiedScrollTop.read(t11), s12 = r12 - i12, c12 = a12 - o12, l12 = Math.min(r12, a12), u11 = Math.max(r12, a12);
          return {
            range: new Cv(l12, u11),
            from: s12,
            to: c12,
            fromWithoutScroll: r12,
            toWithoutScroll: a12,
            move: e10
          };
        });
        s11.sort(ue(le((e10) => e10.fromWithoutScroll > e10.toWithoutScroll, fe), le((e10) => e10.fromWithoutScroll > e10.toWithoutScroll ? e10.fromWithoutScroll : -e10.toWithoutScroll, de)));
        let c11 = c8.compute(s11.map((e10) => e10.range)), l11 = 10, u10 = a11.verticalScrollbarWidth, d10 = (c11.getTrackCount() - 1) * 10 + l11 * 2, f10 = u10 + d10 + (o11.contentLeft - _kb.movedCodeBlockPadding), p10 = 0;
        for (let e10 of s11) {
          let t12 = c11.getTrack(p10), i12 = u10 + l11 + t12 * 10, a12 = 15, s12 = 15, d11 = f10, m10 = o11.glyphMarginWidth + o11.lineNumbersWidth, h10 = 18, g10 = document.createElementNS(`http://www.w3.org/2000/svg`, `rect`);
          g10.classList.add(`arrow-rectangle`), g10.setAttribute(`x`, `${d11 - m10}`), g10.setAttribute(`y`, `${e10.to - h10 / 2}`), g10.setAttribute(`width`, `${m10}`), g10.setAttribute(`height`, `${h10}`), this._element.appendChild(g10);
          let _10 = document.createElementNS(`http://www.w3.org/2000/svg`, `g`), v10 = document.createElementNS(`http://www.w3.org/2000/svg`, `path`);
          v10.setAttribute(`d`, `M 0 ${e10.from} L ${i12} ${e10.from} L ${i12} ${e10.to} L ${d11 - s12} ${e10.to}`), v10.setAttribute(`fill`, `none`), _10.appendChild(v10);
          let y10 = document.createElementNS(`http://www.w3.org/2000/svg`, `polygon`);
          y10.classList.add(`arrow`), n11.add(QN((t13) => {
            v10.classList.toggle(`currentMove`, e10.move === r11.activeMovedText.read(t13)), y10.classList.toggle(`currentMove`, e10.move === r11.activeMovedText.read(t13));
          })), y10.setAttribute(`points`, `${d11 - s12},${e10.to - a12 / 2} ${d11},${e10.to} ${d11 - s12},${e10.to + a12 / 2}`), _10.appendChild(y10), this._element.appendChild(_10), p10++;
        }
        this.width.set(d10, void 0);
      }), this._element = document.createElementNS(`http://www.w3.org/2000/svg`, `svg`), this._element.setAttribute(`class`, `moved-blocks-lines`), this._rootElement.appendChild(this._element), this._register(k(() => this._element.remove())), this._register(QN((t11) => {
        let n11 = this._originalEditorLayoutInfo.read(t11), r11 = this._modifiedEditorLayoutInfo.read(t11);
        !n11 || !r11 || (this._element.style.left = `${n11.width - n11.verticalScrollbarWidth}px`, this._element.style.height = `${n11.height}px`, this._element.style.width = `${n11.verticalScrollbarWidth + n11.contentLeft - _kb.movedCodeBlockPadding + this.width.read(t11)}px`);
      })), this._register(mP(this._state));
      let o10 = Y((e10) => {
        let t11 = this._diffModel.read(e10), n11 = t11 == null ? void 0 : t11.diff.read(e10);
        return n11 ? n11.movedTexts.map((e11) => ({
          move: e11,
          original: new B3(iP(e11.lineRangeMapping.original.startLineNumber - 1), 18),
          modified: new B3(iP(e11.lineRangeMapping.modified.startLineNumber - 1), 18)
        })) : [];
      });
      this._register(U3(this._editors.original, o10.map((e10) => e10.map((e11) => e11.original)))), this._register(U3(this._editors.modified, o10.map((e10) => e10.map((e11) => e11.modified)))), this._register(nP((e10, t11) => {
        let n11 = o10.read(e10);
        for (let e11 of n11) t11.add(new l8(this._editors.original, e11.original, e11.move, `original`, this._diffModel.get())), t11.add(new l8(this._editors.modified, e11.modified, e11.move, `modified`, this._diffModel.get()));
      }));
      let s10 = lP(`original.onDidFocusEditorWidget`, (e10) => this._editors.original.onDidFocusEditorWidget(() => setTimeout(() => e10(void 0), 0))), c10 = lP(`modified.onDidFocusEditorWidget`, (e10) => this._editors.modified.onDidFocusEditorWidget(() => setTimeout(() => e10(void 0), 0))), l10 = `modified`;
      this._register(eP({
        createEmptyChangeSummary: () => void 0,
        handleChange: (e10, t11) => (e10.didChange(s10) && (l10 = `original`), e10.didChange(c10) && (l10 = `modified`), true)
      }, (e10) => {
        s10.read(e10), c10.read(e10);
        let t11 = this._diffModel.read(e10);
        if (!t11) return;
        let n11 = t11.diff.read(e10), r11;
        if (n11 && l10 === `original`) {
          let t12 = this._editors.originalCursor.read(e10);
          t12 && (r11 = n11.movedTexts.find((e11) => e11.lineRangeMapping.original.contains(t12.lineNumber)));
        }
        if (n11 && l10 === `modified`) {
          let t12 = this._editors.modifiedCursor.read(e10);
          t12 && (r11 = n11.movedTexts.find((e11) => e11.lineRangeMapping.modified.contains(t12.lineNumber)));
        }
        r11 !== t11.movedTextToCompare.get() && t11.movedTextToCompare.set(void 0, void 0), t11.setActiveMovedText(r11);
      }));
    }
  }, _kb.movedCodeBlockPadding = 4, _kb), c8 = class e10 {
    static compute(t10) {
      let n10 = [], r10 = [];
      for (let e11 of t10) {
        let t11 = n10.findIndex((t12) => !t12.intersectsStrict(e11));
        if (t11 === -1) {
          let r11 = 6;
          n10.length >= r11 ? t11 = Fv(n10, le((t12) => t12.intersectWithRangeLength(e11), de)) : (t11 = n10.length, n10.push(new wv()));
        }
        n10[t11].addRange(e11), r10.push(t11);
      }
      return new e10(n10.length, r10);
    }
    constructor(e11, t10) {
      this._trackCount = e11, this.trackPerLineIdx = t10;
    }
    getTrack(e11) {
      return this.trackPerLineIdx[e11];
    }
    getTrackCount() {
      return this._trackCount;
    }
  }, l8 = class extends z3 {
    constructor(e10, t10, n10, r10, i10) {
      let a10 = wf(`div.diff-hidden-lines-widget`);
      super(e10, t10, a10.root), this._editor = e10, this._move = n10, this._kind = r10, this._diffModel = i10, this._nodes = wf(`div.diff-moved-code-block`, {
        style: {
          marginRight: `4px`
        }
      }, [
        wf(`div.text-content@textContent`),
        wf(`div.action-bar@actionBar`)
      ]), a10.root.appendChild(this._nodes.root);
      let o10 = oP(this._editor.onDidLayoutChange, () => this._editor.getLayoutInfo());
      this._register(H3(this._nodes.root, {
        paddingRight: o10.map((e11) => e11.verticalScrollbarWidth)
      }));
      let s10;
      s10 = n10.changes.length > 0 ? this._kind === `original` ? T(`codeMovedToWithChanges`, `Code moved with changes to line {0}-{1}`, this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : T(`codeMovedFromWithChanges`, `Code moved with changes from line {0}-{1}`, this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1) : this._kind === `original` ? T(`codeMovedTo`, `Code moved to line {0}-{1}`, this._move.lineRangeMapping.modified.startLineNumber, this._move.lineRangeMapping.modified.endLineNumberExclusive - 1) : T(`codeMovedFrom`, `Code moved from line {0}-{1}`, this._move.lineRangeMapping.original.startLineNumber, this._move.lineRangeMapping.original.endLineNumberExclusive - 1);
      let c10 = this._register(new jI(this._nodes.actionBar, {
        highlightToggledItems: true
      })), l10 = new ep(``, s10, ``, false);
      c10.push(l10, {
        icon: false,
        label: true
      });
      let u10 = new ep(``, `Compare`, sp.asClassName(L.compareChanges), true, () => {
        this._editor.focus(), this._diffModel.movedTextToCompare.set(this._diffModel.movedTextToCompare.get() === n10 ? void 0 : this._move, void 0);
      });
      this._register(QN((e11) => {
        let t11 = this._diffModel.movedTextToCompare.read(e11) === n10;
        u10.checked = t11;
      })), c10.push(u10, {
        icon: false,
        label: true
      });
    }
  }, u8 = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._editors = e10, this._diffModel = t10, this._options = n10, this._decorations = Y(this, (e11) => {
        let t11 = this._diffModel.read(e11), n11 = t11 == null ? void 0 : t11.diff.read(e11);
        if (!n11) return null;
        let r11 = this._diffModel.read(e11).movedTextToCompare.read(e11), i10 = this._options.renderIndicators.read(e11), a10 = this._options.showEmptyDecorations.read(e11), o10 = [], s10 = [];
        if (!r11) for (let r12 of n11.mappings) if (r12.lineRangeMapping.original.isEmpty || o10.push({
          range: r12.lineRangeMapping.original.toInclusiveRange(),
          options: i10 ? _6 : y6
        }), r12.lineRangeMapping.modified.isEmpty || s10.push({
          range: r12.lineRangeMapping.modified.toInclusiveRange(),
          options: i10 ? g6 : v6
        }), r12.lineRangeMapping.modified.isEmpty || r12.lineRangeMapping.original.isEmpty) r12.lineRangeMapping.original.isEmpty || o10.push({
          range: r12.lineRangeMapping.original.toInclusiveRange(),
          options: w6
        }), r12.lineRangeMapping.modified.isEmpty || s10.push({
          range: r12.lineRangeMapping.modified.toInclusiveRange(),
          options: x6
        });
        else {
          let n12 = this._options.useTrueInlineDiffRendering.read(e11) && a8(r12.lineRangeMapping);
          for (let e12 of r12.lineRangeMapping.innerChanges || []) if (r12.lineRangeMapping.original.contains(e12.originalRange.startLineNumber) && o10.push({
            range: e12.originalRange,
            options: e12.originalRange.isEmpty() && a10 ? T6 : C6
          }), r12.lineRangeMapping.modified.contains(e12.modifiedRange.startLineNumber) && s10.push({
            range: e12.modifiedRange,
            options: e12.modifiedRange.isEmpty() && a10 && !n12 ? S6 : b6
          }), n12) {
            let n13 = t11.model.original.getValueInRange(e12.originalRange);
            s10.push({
              range: e12.modifiedRange,
              options: {
                description: `deleted-text`,
                before: {
                  content: n13,
                  inlineClassName: `inline-deleted-text`
                },
                zIndex: 1e5,
                showIfCollapsed: true
              }
            });
          }
        }
        if (r11) for (let e12 of r11.changes) {
          let t12 = e12.original.toInclusiveRange();
          t12 && o10.push({
            range: t12,
            options: i10 ? _6 : y6
          });
          let n12 = e12.modified.toInclusiveRange();
          n12 && s10.push({
            range: n12,
            options: i10 ? g6 : v6
          });
          for (let t13 of e12.innerChanges || []) o10.push({
            range: t13.originalRange,
            options: C6
          }), s10.push({
            range: t13.modifiedRange,
            options: b6
          });
        }
        let c10 = this._diffModel.read(e11).activeMovedText.read(e11);
        for (let e12 of n11.movedTexts) o10.push({
          range: e12.lineRangeMapping.original.toInclusiveRange(),
          options: {
            description: `moved`,
            blockClassName: `movedOriginal` + (e12 === c10 ? ` currentMove` : ``),
            blockPadding: [
              s8.movedCodeBlockPadding,
              0,
              s8.movedCodeBlockPadding,
              s8.movedCodeBlockPadding
            ]
          }
        }), s10.push({
          range: e12.lineRangeMapping.modified.toInclusiveRange(),
          options: {
            description: `moved`,
            blockClassName: `movedModified` + (e12 === c10 ? ` currentMove` : ``),
            blockPadding: [
              4,
              0,
              4,
              4
            ]
          }
        });
        return {
          originalDecorations: o10,
          modifiedDecorations: s10
        };
      }), this._register(N3(this._editors.original, this._decorations.map((e11) => (e11 == null ? void 0 : e11.originalDecorations) || []))), this._register(N3(this._editors.modified, this._decorations.map((e11) => (e11 == null ? void 0 : e11.modifiedDecorations) || [])));
    }
  }, d8 = class {
    resetSash() {
      this._sashRatio.set(void 0, void 0);
    }
    constructor(e10, t10) {
      this._options = e10, this.dimensions = t10, this.sashLeft = GN(this, (e11) => {
        let t11 = this._sashRatio.read(e11) ?? this._options.splitViewDefaultRatio.read(e11);
        return this._computeSashLeft(t11, e11);
      }, (e11, t11) => {
        let n10 = this.dimensions.width.get();
        this._sashRatio.set(e11 / n10, t11);
      }), this._sashRatio = VN(this, void 0);
    }
    _computeSashLeft(e10, t10) {
      let n10 = this.dimensions.width.read(t10), r10 = Math.floor(this._options.splitViewDefaultRatio.read(t10) * n10), i10 = this._options.enableSplitViewResizing.read(t10) ? Math.floor(e10 * n10) : r10, a10 = 100;
      return n10 <= a10 * 2 ? r10 : i10 < a10 ? a10 : i10 > n10 - a10 ? n10 - a10 : i10;
    }
  }, f8 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._domNode = e10, this._dimensions = t10, this._enabled = n10, this._boundarySashes = r10, this.sashLeft = i10, this._resetSash = a10, this._sash = this._register(new eW(this._domNode, {
        getVerticalSashTop: (e11) => 0,
        getVerticalSashLeft: (e11) => this.sashLeft.get(),
        getVerticalSashHeight: (e11) => this._dimensions.height.get()
      }, {
        orientation: 0
      })), this._startSashPosition = void 0, this._register(this._sash.onDidStart(() => {
        this._startSashPosition = this.sashLeft.get();
      })), this._register(this._sash.onDidChange((e11) => {
        this.sashLeft.set(this._startSashPosition + (e11.currentX - e11.startX), void 0);
      })), this._register(this._sash.onDidEnd(() => this._sash.layout())), this._register(this._sash.onDidReset(() => this._resetSash())), this._register(QN((e11) => {
        let t11 = this._boundarySashes.read(e11);
        t11 && (this._sash.orthogonalEndSash = t11.bottom);
      })), this._register(QN((e11) => {
        let t11 = this._enabled.read(e11);
        this._sash.state = t11 ? 3 : 0, this.sashLeft.read(e11), this._dimensions.height.read(e11), this._sash.layout();
      }));
    }
  }, p8 = class extends j {
    constructor(e10, t10, n10) {
      super(), this._editor = e10, this._domNode = t10, this.itemProvider = n10, this.scrollTop = oP(this, this._editor.onDidScrollChange, (e11) => this._editor.getScrollTop()), this.isScrollTopZero = this.scrollTop.map((e11) => e11 === 0), this.modelAttached = oP(this, this._editor.onDidChangeModel, (e11) => this._editor.hasModel()), this.editorOnDidChangeViewZones = lP(`onDidChangeViewZones`, this._editor.onDidChangeViewZones), this.editorOnDidContentSizeChange = lP(`onDidContentSizeChange`, this._editor.onDidContentSizeChange), this.domNodeSizeChanged = dP(`domNodeSizeChanged`), this.views = /* @__PURE__ */ new Map(), this._domNode.className = `gutter monaco-editor`;
      let r10 = this._domNode.appendChild(wf(`div.scroll-decoration`, {
        role: `presentation`,
        ariaHidden: `true`,
        style: {
          width: `100%`
        }
      }).root), i10 = new ResizeObserver(() => {
        FN((e11) => {
          this.domNodeSizeChanged.trigger(e11);
        });
      });
      i10.observe(this._domNode), this._register(k(() => i10.disconnect())), this._register(QN((e11) => {
        r10.className = this.isScrollTopZero.read(e11) ? `` : `scroll-decoration`;
      })), this._register(QN((e11) => this.render(e11)));
    }
    dispose() {
      super.dispose(), af(this._domNode);
    }
    render(e10) {
      if (!this.modelAttached.read(e10)) return;
      this.domNodeSizeChanged.read(e10), this.editorOnDidChangeViewZones.read(e10), this.editorOnDidContentSizeChange.read(e10);
      let t10 = this.scrollTop.read(e10), n10 = this._editor.getVisibleRanges(), r10 = new Set(this.views.keys()), i10 = Cv.ofStartAndLength(0, this._domNode.clientHeight);
      if (!i10.isEmpty) for (let a10 of n10) {
        let n11 = new G(a10.startLineNumber, a10.endLineNumber + 1), o10 = this.itemProvider.getIntersectingGutterItems(n11, e10);
        FN((e11) => {
          for (let a11 of o10) {
            if (!a11.range.intersect(n11)) continue;
            r10.delete(a11.id);
            let o11 = this.views.get(a11.id);
            if (o11) o11.item.set(a11, e11);
            else {
              let e12 = document.createElement(`div`);
              this._domNode.appendChild(e12);
              let t11 = VN(`item`, a11), n12 = this.itemProvider.createView(t11, e12);
              o11 = new m8(t11, n12, e12), this.views.set(a11.id, o11);
            }
            let s10 = a11.range.startLineNumber <= this._editor.getModel().getLineCount() ? this._editor.getTopForLineNumber(a11.range.startLineNumber, true) - t10 : this._editor.getBottomForLineNumber(a11.range.startLineNumber - 1, false) - t10, c10 = a11.range.endLineNumberExclusive === 1 ? Math.max(s10, this._editor.getTopForLineNumber(a11.range.startLineNumber, false) - t10) : Math.max(s10, this._editor.getBottomForLineNumber(a11.range.endLineNumberExclusive - 1, true) - t10), l10 = c10 - s10;
            o11.domNode.style.top = `${s10}px`, o11.domNode.style.height = `${l10}px`, o11.gutterItemView.layout(Cv.ofStartAndLength(s10, l10), i10);
          }
        });
      }
      for (let e11 of r10) {
        let t11 = this.views.get(e11);
        t11.gutterItemView.dispose(), t11.domNode.remove(), this.views.delete(e11);
      }
    }
  }, m8 = class {
    constructor(e10, t10, n10) {
      this.item = e10, this.gutterItemView = t10, this.domNode = n10;
    }
  }, h8 = class extends tp {
    constructor(e10) {
      super(), this._getContext = e10;
    }
    runAction(e10, t10) {
      let n10 = this._getContext();
      return super.runAction(e10, n10);
    }
  }, g8 = class extends Uv {
    constructor(e10) {
      super(), this._textModel = e10;
    }
    getValueOfRange(e10) {
      return this._textModel.getValueInRange(e10);
    }
    get length() {
      let e10 = this._textModel.getLineCount(), t10 = this._textModel.getLineLength(e10);
      return new Rv(e10 - 1, t10);
    }
  }, _8 = class extends j {
    constructor(e10, t10, n10 = {
      orientation: 0
    }) {
      super(), this.submenuActionViewItems = [], this.hasSecondaryActions = false, this._onDidChangeDropdownVisibility = this._register(new ui()), this.onDidChangeDropdownVisibility = this._onDidChangeDropdownVisibility.event, this.disposables = this._register(new A()), n10.hoverDelegate = n10.hoverDelegate ?? this._register(FP()), this.options = n10, this.toggleMenuAction = this._register(new v8(() => {
        var _a3;
        return (_a3 = this.toggleMenuActionViewItem) == null ? void 0 : _a3.show();
      }, n10.toggleMenuTitle)), this.element = document.createElement(`div`), this.element.className = `monaco-toolbar`, e10.appendChild(this.element), this.actionBar = this._register(new jI(this.element, {
        orientation: n10.orientation,
        ariaLabel: n10.ariaLabel,
        actionRunner: n10.actionRunner,
        allowContextMenu: n10.allowContextMenu,
        highlightToggledItems: n10.highlightToggledItems,
        hoverDelegate: n10.hoverDelegate,
        actionViewItemProvider: (e11, r10) => {
          if (e11.id === v8.ID) return this.toggleMenuActionViewItem = new JF(e11, e11.menuActions, t10, {
            actionViewItemProvider: this.options.actionViewItemProvider,
            actionRunner: this.actionRunner,
            keybindingProvider: this.options.getKeyBinding,
            classNames: sp.asClassNameArray(n10.moreIcon ?? L.toolBarMore),
            anchorAlignmentProvider: this.options.anchorAlignmentProvider,
            menuAsChild: !!this.options.renderDropdownAsChildElement,
            skipTelemetry: this.options.skipTelemetry,
            isMenu: true,
            hoverDelegate: this.options.hoverDelegate
          }), this.toggleMenuActionViewItem.setActionContext(this.actionBar.context), this.disposables.add(this._onDidChangeDropdownVisibility.add(this.toggleMenuActionViewItem.onDidChangeVisibility)), this.toggleMenuActionViewItem;
          if (n10.actionViewItemProvider) {
            let t11 = n10.actionViewItemProvider(e11, r10);
            if (t11) return t11;
          }
          if (e11 instanceof rp) {
            let n11 = new JF(e11, e11.actions, t10, {
              actionViewItemProvider: this.options.actionViewItemProvider,
              actionRunner: this.actionRunner,
              keybindingProvider: this.options.getKeyBinding,
              classNames: e11.class,
              anchorAlignmentProvider: this.options.anchorAlignmentProvider,
              menuAsChild: !!this.options.renderDropdownAsChildElement,
              skipTelemetry: this.options.skipTelemetry,
              hoverDelegate: this.options.hoverDelegate
            });
            return n11.setActionContext(this.actionBar.context), this.submenuActionViewItems.push(n11), this.disposables.add(this._onDidChangeDropdownVisibility.add(n11.onDidChangeVisibility)), n11;
          }
        }
      }));
    }
    set actionRunner(e10) {
      this.actionBar.actionRunner = e10;
    }
    get actionRunner() {
      return this.actionBar.actionRunner;
    }
    getElement() {
      return this.element;
    }
    getItemAction(e10) {
      return this.actionBar.getAction(e10);
    }
    setActions(e10, t10) {
      this.clear();
      let n10 = e10 ? e10.slice(0) : [];
      this.hasSecondaryActions = !!(t10 && t10.length > 0), this.hasSecondaryActions && t10 && (this.toggleMenuAction.menuActions = t10.slice(0), n10.push(this.toggleMenuAction)), n10.forEach((e11) => {
        this.actionBar.push(e11, {
          icon: this.options.icon ?? true,
          label: this.options.label ?? false,
          keybinding: this.getKeybindingLabel(e11)
        });
      });
    }
    getKeybindingLabel(e10) {
      var _a3, _b3;
      let t10 = (_b3 = (_a3 = this.options).getKeyBinding) == null ? void 0 : _b3.call(_a3, e10);
      return (t10 == null ? void 0 : t10.getLabel()) ?? void 0;
    }
    clear() {
      this.submenuActionViewItems = [], this.disposables.clear(), this.actionBar.clear();
    }
    dispose() {
      this.clear(), this.disposables.dispose(), super.dispose();
    }
  }, v8 = (_lb = class extends ep {
    constructor(t10, n10) {
      n10 || (n10 = T(`moreActions`, `More Actions...`)), super(_lb.ID, n10, void 0, true), this._menuActions = [], this.toggleDropdownMenu = t10;
    }
    async run() {
      this.toggleDropdownMenu();
    }
    get menuActions() {
      return this._menuActions;
    }
    set menuActions(e10) {
      this._menuActions = e10;
    }
  }, _lb.ID = `toolbar.toggle.more`, _lb), y8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, b8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  x8 = class extends _8 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      super(e10, i10, {
        getKeyBinding: (e11) => a10.lookupKeybinding(e11.id) ?? void 0,
        ...t10,
        allowContextMenu: true,
        skipTelemetry: typeof (t10 == null ? void 0 : t10.telemetrySource) == `string`
      }), this._options = t10, this._menuService = n10, this._contextKeyService = r10, this._contextMenuService = i10, this._keybindingService = a10, this._commandService = o10, this._sessionDisposables = this._store.add(new A());
      let c10 = t10 == null ? void 0 : t10.telemetrySource;
      c10 && this._store.add(this.actionBar.onDidRun((e11) => s10.publicLog2(`workbenchActionExecuted`, {
        id: e11.action.id,
        from: c10
      })));
    }
    setActions(e10, t10 = [], n10) {
      var _a3, _b3, _c3;
      this._sessionDisposables.clear();
      let r10 = e10.slice(), i10 = t10.slice(), a10 = [], o10 = 0, s10 = [], c10 = false;
      if (((_a3 = this._options) == null ? void 0 : _a3.hiddenItemStrategy) !== -1) for (let e11 = 0; e11 < r10.length; e11++) {
        let t11 = r10[e11];
        !(t11 instanceof bm) && !(t11 instanceof ym) || t11.hideActions && (a10.push(t11.hideActions.toggle), t11.hideActions.toggle.checked && o10++, t11.hideActions.isHidden && (c10 = true, r10[e11] = void 0, ((_b3 = this._options) == null ? void 0 : _b3.hiddenItemStrategy) !== 0 && (s10[e11] = t11)));
      }
      if (((_c3 = this._options) == null ? void 0 : _c3.overflowBehavior) !== void 0) {
        let e11 = uR(new Set(this._options.overflowBehavior.exempted), It.map(r10, (e12) => e12 == null ? void 0 : e12.id)), t11 = this._options.overflowBehavior.maxItems - e11.size, n11 = 0;
        for (let i11 = 0; i11 < r10.length; i11++) {
          let a11 = r10[i11];
          a11 && (n11++, !e11.has(a11.id) && n11 >= t11 && (r10[i11] = void 0, s10[i11] = a11));
        }
      }
      y(r10), y(s10), super.setActions(r10, np.join(s10, i10)), (a10.length > 0 || r10.length > 0) && this._sessionDisposables.add(z(this.getElement(), `contextmenu`, (e11) => {
        var _a4, _b4, _c4, _d3, _e3;
        let t11 = new Kc(R(this.getElement()), e11), r11 = this.getItemAction(t11.target);
        if (!r11) return;
        t11.preventDefault(), t11.stopPropagation();
        let i11 = [];
        if (r11 instanceof bm && r11.menuKeybinding) i11.push(r11.menuKeybinding);
        else if (!(r11 instanceof ym || r11 instanceof v8)) {
          let e12 = !!this._keybindingService.lookupKeybinding(r11.id);
          i11.push(RJ(this._commandService, this._keybindingService, r11.id, void 0, e12));
        }
        if (a10.length > 0) {
          let e12 = false;
          if (o10 === 1 && ((_a4 = this._options) == null ? void 0 : _a4.hiddenItemStrategy) === 0) {
            e12 = true;
            for (let e13 = 0; e13 < a10.length; e13++) if (a10[e13].checked) {
              a10[e13] = ap({
                id: r11.id,
                label: r11.label,
                checked: true,
                enabled: false,
                run() {
                }
              });
              break;
            }
          }
          if (!e12 && (r11 instanceof bm || r11 instanceof ym)) {
            if (!r11.hideActions) return;
            i11.push(r11.hideActions.hide);
          } else i11.push(ap({
            id: `label`,
            label: T(`hide`, `Hide`),
            enabled: false,
            run() {
            }
          }));
        }
        let s11 = np.join(i11, a10);
        ((_b4 = this._options) == null ? void 0 : _b4.resetMenu) && !n10 && (n10 = [
          this._options.resetMenu
        ]), c10 && n10 && (s11.push(new np()), s11.push(ap({
          id: `resetThisMenu`,
          label: T(`resetThisMenu`, `Reset Menu`),
          run: () => this._menuService.resetHiddenStates(n10)
        }))), s11.length !== 0 && this._contextMenuService.showContextMenu({
          getAnchor: () => t11,
          getActions: () => s11,
          menuId: (_c4 = this._options) == null ? void 0 : _c4.contextMenu,
          menuActionOptions: {
            renderShortTitle: true,
            ...(_d3 = this._options) == null ? void 0 : _d3.menuOptions
          },
          skipTelemetry: typeof ((_e3 = this._options) == null ? void 0 : _e3.telemetrySource) == `string`,
          contextKeyService: this._contextKeyService
        });
      }));
    }
  };
  x8 = y8([
    b8(2, gm),
    b8(3, qp),
    b8(4, jE),
    b8(5, ME),
    b8(6, cp),
    b8(7, Cm)
  ], x8);
  let S8 = class extends x8 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      super(e10, {
        resetMenu: t10,
        ...n10
      }, r10, i10, a10, o10, s10, c10), this._onDidChangeMenuItems = this._store.add(new N()), this.onDidChangeMenuItems = this._onDidChangeMenuItems.event;
      let l10 = this._store.add(r10.createMenu(t10, i10, {
        emitEventsForSubmenuChanges: true
      })), u10 = () => {
        var _a3, _b3, _c3;
        let t11 = [], r11 = [];
        CI(l10, n10 == null ? void 0 : n10.menuOptions, {
          primary: t11,
          secondary: r11
        }, (_a3 = n10 == null ? void 0 : n10.toolbarOptions) == null ? void 0 : _a3.primaryGroup, (_b3 = n10 == null ? void 0 : n10.toolbarOptions) == null ? void 0 : _b3.shouldInlineSubmenu, (_c3 = n10 == null ? void 0 : n10.toolbarOptions) == null ? void 0 : _c3.useSeparatorsInPrimaryActions), e10.classList.toggle(`has-no-actions`, t11.length === 0 && r11.length === 0), super.setActions(t11, r11);
      };
      this._store.add(l10.onDidChange(() => {
        u10(), this._onDidChangeMenuItems.fire(this);
      })), u10();
    }
    setActions() {
      throw new Dr(`This toolbar is populated from a menu.`);
    }
  };
  S8 = y8([
    b8(3, gm),
    b8(4, qp),
    b8(5, jE),
    b8(6, ME),
    b8(7, cp),
    b8(8, Cm)
  ], S8);
  var C8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, w8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  const T8 = [], E8 = 35;
  let D8 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10) {
      super(), this._diffModel = t10, this._editors = n10, this._options = r10, this._sashLayout = i10, this._boundarySashes = a10, this._instantiationService = o10, this._contextKeyService = s10, this._menuService = c10, this._menu = this._register(this._menuService.createMenu(hm.DiffEditorHunkToolbar, this._contextKeyService)), this._actions = oP(this, this._menu.onDidChange, () => this._menu.getActions()), this._hasActions = this._actions.map((e11) => e11.length > 0), this._showSash = Y(this, (e11) => this._options.renderSideBySide.read(e11) && this._hasActions.read(e11)), this.width = Y(this, (e11) => this._hasActions.read(e11) ? E8 : 0), this.elements = wf(`div.gutter@gutter`, {
        style: {
          position: `absolute`,
          height: `100%`,
          width: E8 + `px`
        }
      }, []), this._currentDiff = Y(this, (e11) => {
        var _a3;
        let t11 = this._diffModel.read(e11);
        if (!t11) return;
        let n11 = (_a3 = t11.diff.read(e11)) == null ? void 0 : _a3.mappings, r11 = this._editors.modifiedCursor.read(e11);
        if (r11) return n11 == null ? void 0 : n11.find((e12) => e12.lineRangeMapping.modified.contains(r11.lineNumber));
      }), this._selectedDiffs = Y(this, (e11) => {
        let t11 = this._diffModel.read(e11), n11 = t11 == null ? void 0 : t11.diff.read(e11);
        if (!n11) return T8;
        let r11 = this._editors.modifiedSelections.read(e11);
        if (r11.every((e12) => e12.isEmpty())) return T8;
        let i11 = new Lv(r11.map((e12) => G.fromRangeInclusive(e12))), a11 = n11.mappings.filter((e12) => e12.lineRangeMapping.innerChanges && i11.intersects(e12.lineRangeMapping.modified)), o11 = a11.map((e12) => ({
          mapping: e12,
          rangeMappings: e12.lineRangeMapping.innerChanges.filter((e13) => r11.some((t12) => F.areIntersecting(e13.modifiedRange, t12)))
        }));
        return o11.length === 0 || o11.every((e12) => e12.rangeMappings.length === 0) ? T8 : o11;
      }), this._register(F3(e10, this.elements.root)), this._register(z(this.elements.root, `click`, () => {
        this._editors.modified.focus();
      })), this._register(H3(this.elements.root, {
        display: this._hasActions.map((e11) => e11 ? `block` : `none`)
      })), YN(this, (t11) => {
        let n11 = this._showSash.read(t11);
        return n11 ? new f8(e10, this._sashLayout.dimensions, this._options.enableSplitViewResizing, this._boundarySashes, GN(this, (e11) => this._sashLayout.sashLeft.read(e11) - E8, (e11, t12) => this._sashLayout.sashLeft.set(e11 + E8, t12)), () => this._sashLayout.resetSash()) : void 0;
      }).recomputeInitiallyAndOnChange(this._store), this._register(new p8(this._editors.modified, this.elements.root, {
        getIntersectingGutterItems: (e11, t11) => {
          let n11 = this._diffModel.read(t11);
          if (!n11) return [];
          let r11 = n11.diff.read(t11);
          if (!r11) return [];
          let i11 = this._selectedDiffs.read(t11);
          if (i11.length > 0) {
            let e12 = Jv.fromRangeMappings(i11.flatMap((e13) => e13.rangeMappings));
            return [
              new O8(e12, true, hm.DiffEditorSelectionToolbar, void 0, n11.model.original.uri, n11.model.modified.uri)
            ];
          }
          let a11 = this._currentDiff.read(t11);
          return r11.mappings.map((e12) => new O8(e12.lineRangeMapping.withInnerChangesFromLineRanges(), e12.lineRangeMapping === (a11 == null ? void 0 : a11.lineRangeMapping), hm.DiffEditorHunkToolbar, void 0, n11.model.original.uri, n11.model.modified.uri));
        },
        createView: (e11, t11) => this._instantiationService.createInstance(k8, e11, t11, this)
      })), this._register(z(this.elements.gutter, B.MOUSE_WHEEL, (e11) => {
        this._editors.modified.getOption(104).handleMouseWheel && this._editors.modified.delegateScrollFromMouseWheelEvent(e11);
      }, {
        passive: false
      }));
    }
    computeStagedValue(e10) {
      let t10 = e10.innerChanges ?? [], n10 = new g8(this._editors.modifiedModel.get()), r10 = new g8(this._editors.original.getModel()), i10 = new Bv(t10.map((e11) => e11.toTextEdit(n10))), a10 = i10.apply(r10);
      return a10;
    }
    layout(e10) {
      this.elements.gutter.style.left = e10 + `px`;
    }
  };
  D8 = C8([
    w8(6, Jf),
    w8(7, qp),
    w8(8, gm)
  ], D8);
  var O8 = class {
    constructor(e10, t10, n10, r10, i10, a10) {
      this.mapping = e10, this.showAlways = t10, this.menuId = n10, this.rangeOverride = r10, this.originalUri = i10, this.modifiedUri = a10;
    }
    get id() {
      return this.mapping.modified.toString();
    }
    get range() {
      return this.rangeOverride ?? this.mapping.modified;
    }
  };
  let k8 = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._item = e10, this._elements = wf(`div.gutterItem`, {
        style: {
          height: `20px`,
          width: `34px`
        }
      }, [
        wf(`div.background@background`, {}, []),
        wf(`div.buttons@buttons`, {}, [])
      ]), this._showAlways = this._item.map(this, (e11) => e11.showAlways), this._menuId = this._item.map(this, (e11) => e11.menuId), this._isSmall = VN(this, false), this._lastItemRange = void 0, this._lastViewRange = void 0;
      let i10 = this._register(r10.createInstance(kE, `element`, true, {
        position: {
          hoverPosition: 1
        }
      }));
      this._register(P3(t10, this._elements.root)), this._register(QN((e11) => {
        let t11 = this._showAlways.read(e11);
        this._elements.root.classList.toggle(`noTransition`, true), this._elements.root.classList.toggle(`showAlways`, t11), setTimeout(() => {
          this._elements.root.classList.toggle(`noTransition`, false);
        }, 0);
      })), this._register(nP((e11, t11) => {
        this._elements.buttons.replaceChildren();
        let a10 = t11.add(r10.createInstance(S8, this._elements.buttons, this._menuId.read(e11), {
          orientation: 1,
          hoverDelegate: i10,
          toolbarOptions: {
            primaryGroup: (e12) => e12.startsWith(`primary`)
          },
          overflowBehavior: {
            maxItems: this._isSmall.read(e11) ? 1 : 3
          },
          hiddenItemStrategy: 0,
          actionRunner: new h8(() => {
            let e12 = this._item.get(), t12 = e12.mapping;
            return {
              mapping: t12,
              originalWithModifiedChanges: n10.computeStagedValue(t12),
              originalUri: e12.originalUri,
              modifiedUri: e12.modifiedUri
            };
          }),
          menuOptions: {
            shouldForwardArgs: true
          }
        }));
        t11.add(a10.onDidChangeMenuItems(() => {
          this._lastItemRange && this.layout(this._lastItemRange, this._lastViewRange);
        }));
      }));
    }
    layout(e10, t10) {
      this._lastItemRange = e10, this._lastViewRange = t10;
      let n10 = this._elements.buttons.clientHeight;
      this._isSmall.set(this._item.get().mapping.original.startLineNumber === 1 && e10.length < 30, void 0), n10 = this._elements.buttons.clientHeight;
      let r10 = e10.length / 2 - n10 / 2, i10 = n10, a10 = e10.start + r10, o10 = Cv.tryCreate(i10, t10.endExclusive - i10 - n10), s10 = Cv.tryCreate(e10.start + i10, e10.endExclusive - n10 - i10);
      s10 && o10 && s10.start < s10.endExclusive && (a10 = o10.clip(a10), a10 = s10.clip(a10)), this._elements.buttons.style.top = `${a10 - e10.start}px`;
    }
  };
  k8 = C8([
    w8(3, Jf)
  ], k8);
  A8 = function(e10) {
    return j8.get(e10);
  };
  var j8 = (_mb = class extends j {
    static get(t10) {
      let n10 = _mb._map.get(t10);
      if (!n10) {
        n10 = new _mb(t10), _mb._map.set(t10, n10);
        let r10 = t10.onDidDispose(() => {
          let n11 = _mb._map.get(t10);
          n11 && (_mb._map.delete(t10), n11.dispose(), r10.dispose());
        });
      }
      return n10;
    }
    _beginUpdate() {
      this._updateCounter++, this._updateCounter === 1 && (this._currentTransaction = new BN(() => {
      }));
    }
    _endUpdate() {
      if (this._updateCounter--, this._updateCounter === 0) {
        let e10 = this._currentTransaction;
        this._currentTransaction = void 0, e10.finish();
      }
    }
    constructor(e10) {
      var _a3;
      super(), this.editor = e10, this._updateCounter = 0, this._currentTransaction = void 0, this._model = VN(this, this.editor.getModel()), this.model = this._model, this.isReadonly = oP(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(92)), this._versionId = wP({
        owner: this,
        lazy: true
      }, ((_a3 = this.editor.getModel()) == null ? void 0 : _a3.getVersionId()) ?? null), this.versionId = this._versionId, this._selections = wP({
        owner: this,
        equalsFn: tN($M(Ma.selectionsEqual)),
        lazy: true
      }, this.editor.getSelections() ?? null), this.selections = this._selections, this.isFocused = oP(this, (e11) => {
        let t10 = this.editor.onDidFocusEditorWidget(e11), n10 = this.editor.onDidBlurEditorWidget(e11);
        return {
          dispose() {
            t10.dispose(), n10.dispose();
          }
        };
      }, () => this.editor.hasWidgetFocus()), this.value = GN(this, (e11) => {
        var _a4;
        return this.versionId.read(e11), ((_a4 = this.model.read(e11)) == null ? void 0 : _a4.getValue()) ?? ``;
      }, (e11, t10) => {
        let n10 = this.model.get();
        n10 !== null && e11 !== n10.getValue() && n10.setValue(e11);
      }), this.valueIsEmpty = Y(this, (e11) => {
        var _a4;
        return this.versionId.read(e11), ((_a4 = this.editor.getModel()) == null ? void 0 : _a4.getValueLength()) === 0;
      }), this.cursorSelection = KN({
        owner: this,
        equalsFn: tN(Ma.selectionsEqual)
      }, (e11) => {
        var _a4;
        return ((_a4 = this.selections.read(e11)) == null ? void 0 : _a4[0]) ?? null;
      }), this.onDidType = dP(this), this.scrollTop = oP(this.editor.onDidScrollChange, () => this.editor.getScrollTop()), this.scrollLeft = oP(this.editor.onDidScrollChange, () => this.editor.getScrollLeft()), this.layoutInfo = oP(this.editor.onDidLayoutChange, () => this.editor.getLayoutInfo()), this.layoutInfoContentLeft = this.layoutInfo.map((e11) => e11.contentLeft), this.layoutInfoDecorationsLeft = this.layoutInfo.map((e11) => e11.decorationsLeft), this.contentWidth = oP(this.editor.onDidContentSizeChange, () => this.editor.getContentWidth()), this._overlayWidgetCounter = 0, this._register(this.editor.onBeginUpdate(() => this._beginUpdate())), this._register(this.editor.onEndUpdate(() => this._endUpdate())), this._register(this.editor.onDidChangeModel(() => {
        this._beginUpdate();
        try {
          this._model.set(this.editor.getModel(), this._currentTransaction), this._forceUpdate();
        } finally {
          this._endUpdate();
        }
      })), this._register(this.editor.onDidType((e11) => {
        this._beginUpdate();
        try {
          this._forceUpdate(), this.onDidType.trigger(this._currentTransaction, e11);
        } finally {
          this._endUpdate();
        }
      })), this._register(this.editor.onDidChangeModelContent((e11) => {
        var _a4;
        this._beginUpdate();
        try {
          this._versionId.set(((_a4 = this.editor.getModel()) == null ? void 0 : _a4.getVersionId()) ?? null, this._currentTransaction, e11), this._forceUpdate();
        } finally {
          this._endUpdate();
        }
      })), this._register(this.editor.onDidChangeCursorSelection((e11) => {
        this._beginUpdate();
        try {
          this._selections.set(this.editor.getSelections(), this._currentTransaction, e11), this._forceUpdate();
        } finally {
          this._endUpdate();
        }
      }));
    }
    forceUpdate(e10) {
      this._beginUpdate();
      try {
        return this._forceUpdate(), e10 ? e10(this._currentTransaction) : void 0;
      } finally {
        this._endUpdate();
      }
    }
    _forceUpdate() {
      var _a3;
      this._beginUpdate();
      try {
        this._model.set(this.editor.getModel(), this._currentTransaction), this._versionId.set(((_a3 = this.editor.getModel()) == null ? void 0 : _a3.getVersionId()) ?? null, this._currentTransaction, void 0), this._selections.set(this.editor.getSelections(), this._currentTransaction, void 0);
      } finally {
        this._endUpdate();
      }
    }
    getOption(e10) {
      return oP(this, (t10) => this.editor.onDidChangeConfiguration((n10) => {
        n10.hasChanged(e10) && t10(void 0);
      }), () => this.editor.getOption(e10));
    }
    setDecorations(e10) {
      let t10 = new A(), n10 = this.editor.createDecorationsCollection();
      return t10.add($N({
        owner: this,
        debugName: () => `Apply decorations from ${e10.debugName}`
      }, (t11) => {
        let r10 = e10.read(t11);
        n10.set(r10);
      })), t10.add({
        dispose: () => {
          n10.clear();
        }
      }), t10;
    }
    createOverlayWidget(e10) {
      let t10 = `observableOverlayWidget` + this._overlayWidgetCounter++, n10 = {
        getDomNode: () => e10.domNode,
        getPosition: () => e10.position.get(),
        getId: () => t10,
        allowEditorOverflow: e10.allowEditorOverflow,
        getMinContentWidthInPx: () => e10.minContentWidthInPx.get()
      };
      this.editor.addOverlayWidget(n10);
      let r10 = QN((t11) => {
        e10.position.read(t11), e10.minContentWidthInPx.read(t11), this.editor.layoutOverlayWidget(n10);
      });
      return k(() => {
        r10.dispose(), this.editor.removeOverlayWidget(n10);
      });
    }
  }, _mb._map = /* @__PURE__ */ new Map(), _mb);
  M8 = function(e10, t10) {
    return tP({
      createEmptyChangeSummary: () => ({
        deltas: [],
        didChange: false
      }),
      handleChange: (t11, n10) => {
        if (t11.didChange(e10)) {
          let e11 = t11.change;
          e11 !== void 0 && n10.deltas.push(e11), n10.didChange = true;
        }
        return true;
      }
    }, (n10, r10) => {
      let i10 = e10.read(n10);
      r10.didChange && t10(i10, r10.deltas);
    });
  };
  N8 = function(e10, t10) {
    let n10 = new A(), r10 = M8(e10, (e11, r11) => {
      n10.clear(), t10(e11, r11, n10);
    });
    return {
      dispose() {
        r10.dispose(), n10.dispose();
      }
    };
  };
  var P8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, F8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, I8;
  L8 = (_nb = class extends j {
    static setBreadcrumbsSourceFactory(e10) {
      this._breadcrumbsSourceFactory.set(e10, void 0);
    }
    get isUpdatingHiddenAreas() {
      return this._isUpdatingHiddenAreas;
    }
    constructor(e10, t10, n10, r10) {
      super(), this._editors = e10, this._diffModel = t10, this._options = n10, this._instantiationService = r10, this._modifiedOutlineSource = YN(this, (e11) => {
        let t11 = this._editors.modifiedModel.read(e11), n11 = I8._breadcrumbsSourceFactory.read(e11);
        return !t11 || !n11 ? void 0 : n11(t11, this._instantiationService);
      }), this._isUpdatingHiddenAreas = false, this._register(this._editors.original.onDidChangeCursorPosition((e11) => {
        if (e11.reason === 1) return;
        let t11 = this._diffModel.get();
        FN((e12) => {
          for (let n11 of this._editors.original.getSelections() || []) t11 == null ? void 0 : t11.ensureOriginalLineIsVisible(n11.getStartPosition().lineNumber, 0, e12), t11 == null ? void 0 : t11.ensureOriginalLineIsVisible(n11.getEndPosition().lineNumber, 0, e12);
        });
      })), this._register(this._editors.modified.onDidChangeCursorPosition((e11) => {
        if (e11.reason === 1) return;
        let t11 = this._diffModel.get();
        FN((e12) => {
          for (let n11 of this._editors.modified.getSelections() || []) t11 == null ? void 0 : t11.ensureModifiedLineIsVisible(n11.getStartPosition().lineNumber, 0, e12), t11 == null ? void 0 : t11.ensureModifiedLineIsVisible(n11.getEndPosition().lineNumber, 0, e12);
        });
      }));
      let i10 = this._diffModel.map((e11, t11) => {
        var _a3;
        let n11 = (e11 == null ? void 0 : e11.unchangedRegions.read(t11)) ?? [];
        return n11.length === 1 && n11[0].modifiedLineNumber === 1 && n11[0].lineCount === ((_a3 = this._editors.modifiedModel.read(t11)) == null ? void 0 : _a3.getLineCount()) ? [] : n11;
      });
      this.viewZones = JN(this, (e11, t11) => {
        let n11 = this._modifiedOutlineSource.read(e11);
        if (!n11) return {
          origViewZones: [],
          modViewZones: []
        };
        let r11 = [], a11 = [], o11 = this._options.renderSideBySide.read(e11), s10 = this._options.compactMode.read(e11), c10 = i10.read(e11);
        for (let i11 = 0; i11 < c10.length; i11++) {
          let l10 = c10[i11];
          if (!l10.shouldHideControls(e11) && !(s10 && (i11 === 0 || i11 === c10.length - 1))) if (s10) {
            {
              let e12 = Y(this, (e13) => l10.getHiddenOriginalRange(e13).startLineNumber - 1), n12 = new B3(e12, 12);
              r11.push(n12), t11.add(new R8(this._editors.original, n12, l10, !o11));
            }
            {
              let e12 = Y(this, (e13) => l10.getHiddenModifiedRange(e13).startLineNumber - 1), n12 = new B3(e12, 12);
              a11.push(n12), t11.add(new R8(this._editors.modified, n12, l10));
            }
          } else {
            {
              let e12 = Y(this, (e13) => l10.getHiddenOriginalRange(e13).startLineNumber - 1), i12 = new B3(e12, 24);
              r11.push(i12), t11.add(new z8(this._editors.original, i12, l10, l10.originalUnchangedRange, !o11, n11, (e13) => this._diffModel.get().ensureModifiedLineIsVisible(e13, 2, void 0), this._options));
            }
            {
              let e12 = Y(this, (e13) => l10.getHiddenModifiedRange(e13).startLineNumber - 1), r12 = new B3(e12, 24);
              a11.push(r12), t11.add(new z8(this._editors.modified, r12, l10, l10.modifiedUnchangedRange, false, n11, (e13) => this._diffModel.get().ensureModifiedLineIsVisible(e13, 2, void 0), this._options));
            }
          }
        }
        return {
          origViewZones: r11,
          modViewZones: a11
        };
      });
      let a10 = {
        description: `unchanged lines`,
        className: `diff-unchanged-lines`,
        isWholeLine: true
      }, o10 = {
        description: `Fold Unchanged`,
        glyphMarginHoverMessage: new vk(void 0, {
          isTrusted: true,
          supportThemeIcons: true
        }).appendMarkdown(T(`foldUnchanged`, `Fold Unchanged Region`)),
        glyphMarginClassName: `fold-unchanged ` + sp.asClassName(L.fold),
        zIndex: 10001
      };
      this._register(N3(this._editors.original, Y(this, (e11) => {
        let t11 = i10.read(e11), n11 = t11.map((e12) => ({
          range: e12.originalUnchangedRange.toInclusiveRange(),
          options: a10
        }));
        for (let r11 of t11) r11.shouldHideControls(e11) && n11.push({
          range: F.fromPositions(new P(r11.originalLineNumber, 1)),
          options: o10
        });
        return n11;
      }))), this._register(N3(this._editors.modified, Y(this, (e11) => {
        let t11 = i10.read(e11), n11 = t11.map((e12) => ({
          range: e12.modifiedUnchangedRange.toInclusiveRange(),
          options: a10
        }));
        for (let r11 of t11) r11.shouldHideControls(e11) && n11.push({
          range: G.ofLength(r11.modifiedLineNumber, 1).toInclusiveRange(),
          options: o10
        });
        return n11;
      }))), this._register(QN((e11) => {
        let t11 = i10.read(e11);
        this._isUpdatingHiddenAreas = true;
        try {
          this._editors.original.setHiddenAreas(t11.map((t12) => t12.getHiddenOriginalRange(e11).toInclusiveRange()).filter(we)), this._editors.modified.setHiddenAreas(t11.map((t12) => t12.getHiddenModifiedRange(e11).toInclusiveRange()).filter(we));
        } finally {
          this._isUpdatingHiddenAreas = false;
        }
      })), this._register(this._editors.modified.onMouseUp((e11) => {
        var _a3;
        if (!e11.event.rightButton && e11.target.position && ((_a3 = e11.target.element) == null ? void 0 : _a3.className.includes(`fold-unchanged`))) {
          let t11 = e11.target.position.lineNumber, n11 = this._diffModel.get();
          if (!n11) return;
          let r11 = n11.unchangedRegions.get().find((e12) => e12.modifiedUnchangedRange.includes(t11));
          if (!r11) return;
          r11.collapseAll(void 0), e11.event.stopPropagation(), e11.event.preventDefault();
        }
      })), this._register(this._editors.original.onMouseUp((e11) => {
        var _a3;
        if (!e11.event.rightButton && e11.target.position && ((_a3 = e11.target.element) == null ? void 0 : _a3.className.includes(`fold-unchanged`))) {
          let t11 = e11.target.position.lineNumber, n11 = this._diffModel.get();
          if (!n11) return;
          let r11 = n11.unchangedRegions.get().find((e12) => e12.originalUnchangedRange.includes(t11));
          if (!r11) return;
          r11.collapseAll(void 0), e11.event.stopPropagation(), e11.event.preventDefault();
        }
      }));
    }
  }, I8 = _nb, _nb._breadcrumbsSourceFactory = VN(I8, () => ({
    dispose() {
    },
    getBreadcrumbItems(e10, t10) {
      return [];
    }
  })), _nb);
  L8 = I8 = P8([
    F8(3, Jf)
  ], L8);
  var R8 = class extends z3 {
    constructor(e10, t10, n10, r10 = false) {
      let i10 = wf(`div.diff-hidden-lines-widget`);
      super(e10, t10, i10.root), this._unchangedRegion = n10, this._hide = r10, this._nodes = wf(`div.diff-hidden-lines-compact`, [
        wf(`div.line-left`, []),
        wf(`div.text@text`, []),
        wf(`div.line-right`, [])
      ]), i10.root.appendChild(this._nodes.root), this._hide && this._nodes.root.replaceChildren(), this._register(QN((e11) => {
        if (!this._hide) {
          let t11 = this._unchangedRegion.getHiddenModifiedRange(e11).length, n11 = T(`hiddenLines`, `{0} hidden lines`, t11);
          this._nodes.text.innerText = n11;
        }
      }));
    }
  }, z8 = class extends z3 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      let c10 = wf(`div.diff-hidden-lines-widget`);
      super(e10, t10, c10.root), this._editor = e10, this._unchangedRegion = n10, this._unchangedRegionRange = r10, this._hide = i10, this._modifiedOutlineSource = a10, this._revealModifiedHiddenLine = o10, this._options = s10, this._nodes = wf(`div.diff-hidden-lines`, [
        wf(`div.top@top`, {
          title: T(`diff.hiddenLines.top`, `Click or drag to show more above`)
        }),
        wf(`div.center@content`, {
          style: {
            display: `flex`
          }
        }, [
          wf(`div@first`, {
            style: {
              display: `flex`,
              justifyContent: `center`,
              alignItems: `center`,
              flexShrink: `0`
            }
          }, [
            H(`a`, {
              title: T(`showUnchangedRegion`, `Show Unchanged Region`),
              role: `button`,
              onclick: () => {
                this._unchangedRegion.showAll(void 0);
              }
            }, ...AD(`$(unfold)`))
          ]),
          wf(`div@others`, {
            style: {
              display: `flex`,
              justifyContent: `center`,
              alignItems: `center`
            }
          })
        ]),
        wf(`div.bottom@bottom`, {
          title: T(`diff.bottom`, `Click or drag to show more below`),
          role: `button`
        })
      ]), c10.root.appendChild(this._nodes.root), this._hide ? af(this._nodes.first) : this._register(H3(this._nodes.first, {
        width: A8(this._editor).layoutInfoContentLeft
      })), this._register(QN((e11) => {
        let t11 = this._unchangedRegion.visibleLineCountTop.read(e11) + this._unchangedRegion.visibleLineCountBottom.read(e11) === this._unchangedRegion.lineCount;
        this._nodes.bottom.classList.toggle(`canMoveTop`, !t11), this._nodes.bottom.classList.toggle(`canMoveBottom`, this._unchangedRegion.visibleLineCountBottom.read(e11) > 0), this._nodes.top.classList.toggle(`canMoveTop`, this._unchangedRegion.visibleLineCountTop.read(e11) > 0), this._nodes.top.classList.toggle(`canMoveBottom`, !t11);
        let n11 = this._unchangedRegion.isDragged.read(e11), r11 = this._editor.getDomNode();
        r11 && (r11.classList.toggle(`draggingUnchangedRegion`, !!n11), n11 === `top` ? (r11.classList.toggle(`canMoveTop`, this._unchangedRegion.visibleLineCountTop.read(e11) > 0), r11.classList.toggle(`canMoveBottom`, !t11)) : n11 === `bottom` ? (r11.classList.toggle(`canMoveTop`, !t11), r11.classList.toggle(`canMoveBottom`, this._unchangedRegion.visibleLineCountBottom.read(e11) > 0)) : (r11.classList.toggle(`canMoveTop`, false), r11.classList.toggle(`canMoveBottom`, false)));
      }));
      let l10 = this._editor;
      this._register(z(this._nodes.top, `mousedown`, (e11) => {
        if (e11.button !== 0) return;
        this._nodes.top.classList.toggle(`dragging`, true), this._nodes.root.classList.toggle(`dragging`, true), e11.preventDefault();
        let t11 = e11.clientY, n11 = false, r11 = this._unchangedRegion.visibleLineCountTop.get();
        this._unchangedRegion.isDragged.set(`top`, void 0);
        let i11 = R(this._nodes.top), a11 = z(i11, `mousemove`, (e12) => {
          let i12 = e12.clientY, a12 = i12 - t11;
          n11 || (n11 = Math.abs(a12) > 2);
          let o12 = Math.round(a12 / l10.getOption(67)), s11 = Math.max(0, Math.min(r11 + o12, this._unchangedRegion.getMaxVisibleLineCountTop()));
          this._unchangedRegion.visibleLineCountTop.set(s11, void 0);
        }), o11 = z(i11, `mouseup`, (e12) => {
          n11 || this._unchangedRegion.showMoreAbove(this._options.hideUnchangedRegionsRevealLineCount.get(), void 0), this._nodes.top.classList.toggle(`dragging`, false), this._nodes.root.classList.toggle(`dragging`, false), this._unchangedRegion.isDragged.set(void 0, void 0), a11.dispose(), o11.dispose();
        });
      })), this._register(z(this._nodes.bottom, `mousedown`, (e11) => {
        if (e11.button !== 0) return;
        this._nodes.bottom.classList.toggle(`dragging`, true), this._nodes.root.classList.toggle(`dragging`, true), e11.preventDefault();
        let t11 = e11.clientY, n11 = false, r11 = this._unchangedRegion.visibleLineCountBottom.get();
        this._unchangedRegion.isDragged.set(`bottom`, void 0);
        let i11 = R(this._nodes.bottom), a11 = z(i11, `mousemove`, (e12) => {
          let i12 = e12.clientY, a12 = i12 - t11;
          n11 || (n11 = Math.abs(a12) > 2);
          let o12 = Math.round(a12 / l10.getOption(67)), s11 = Math.max(0, Math.min(r11 - o12, this._unchangedRegion.getMaxVisibleLineCountBottom())), c11 = this._unchangedRegionRange.endLineNumberExclusive > l10.getModel().getLineCount() ? l10.getContentHeight() : l10.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);
          this._unchangedRegion.visibleLineCountBottom.set(s11, void 0);
          let u10 = this._unchangedRegionRange.endLineNumberExclusive > l10.getModel().getLineCount() ? l10.getContentHeight() : l10.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);
          l10.setScrollTop(l10.getScrollTop() + (u10 - c11));
        }), o11 = z(i11, `mouseup`, (e12) => {
          if (this._unchangedRegion.isDragged.set(void 0, void 0), !n11) {
            let e13 = l10.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);
            this._unchangedRegion.showMoreBelow(this._options.hideUnchangedRegionsRevealLineCount.get(), void 0);
            let t12 = l10.getTopForLineNumber(this._unchangedRegionRange.endLineNumberExclusive);
            l10.setScrollTop(l10.getScrollTop() + (t12 - e13));
          }
          this._nodes.bottom.classList.toggle(`dragging`, false), this._nodes.root.classList.toggle(`dragging`, false), a11.dispose(), o11.dispose();
        });
      })), this._register(QN((e11) => {
        let t11 = [];
        if (!this._hide) {
          let r11 = n10.getHiddenModifiedRange(e11).length, i11 = T(`hiddenLines`, `{0} hidden lines`, r11), a11 = H(`span`, {
            title: T(`diff.hiddenLines.expandAll`, `Double click to unfold`)
          }, i11);
          a11.addEventListener(`dblclick`, (e12) => {
            e12.button === 0 && (e12.preventDefault(), this._unchangedRegion.showAll(void 0));
          }), t11.push(a11);
          let o11 = this._unchangedRegion.getHiddenModifiedRange(e11), s11 = this._modifiedOutlineSource.getBreadcrumbItems(o11, e11);
          if (s11.length > 0) {
            t11.push(H(`span`, void 0, `\xA0\xA0|\xA0\xA0`));
            for (let e12 = 0; e12 < s11.length; e12++) {
              let n11 = s11[e12], r12 = Qa.toIcon(n11.kind), i12 = wf(`div.breadcrumb-item`, {
                style: {
                  display: `flex`,
                  alignItems: `center`
                }
              }, [
                jD(r12),
                `\xA0`,
                n11.name,
                ...e12 === s11.length - 1 ? [] : [
                  jD(L.chevronRight)
                ]
              ]).root;
              t11.push(i12), i12.onclick = () => {
                this._revealModifiedHiddenLine(n11.startLineNumber);
              };
            }
          }
        }
        af(this._nodes.others, ...t11);
      }));
    }
  }, B8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, V8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, H8;
  let U8 = (_ob = class extends j {
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(), this._editors = e10, this._rootElement = t10, this._diffModel = n10, this._rootWidth = r10, this._rootHeight = i10, this._modifiedEditorLayoutInfo = a10, this._themeService = o10, this.width = H8.ENTIRE_DIFF_OVERVIEW_WIDTH;
      let s10 = oP(this._themeService.onDidColorThemeChange, () => this._themeService.getColorTheme()), c10 = Y((e11) => {
        let t11 = s10.read(e11), n11 = t11.getColor(vw) || (t11.getColor(fw) || uw).transparent(2), r11 = t11.getColor(yw) || (t11.getColor(pw) || dw).transparent(2);
        return {
          insertColor: n11,
          removeColor: r11
        };
      }), l10 = Nf(document.createElement(`div`));
      l10.setClassName(`diffViewport`), l10.setPosition(`absolute`);
      let u10 = wf(`div.diffOverview`, {
        style: {
          position: `absolute`,
          top: `0px`,
          width: H8.ENTIRE_DIFF_OVERVIEW_WIDTH + `px`
        }
      }).root;
      this._register(P3(u10, l10.domNode)), this._register(td(u10, B.POINTER_DOWN, (e11) => {
        this._editors.modified.delegateVerticalScrollbarPointerDown(e11);
      })), this._register(z(u10, B.MOUSE_WHEEL, (e11) => {
        this._editors.modified.delegateScrollFromMouseWheelEvent(e11);
      }, {
        passive: false
      })), this._register(P3(this._rootElement, u10)), this._register(nP((e11, t11) => {
        let n11 = this._diffModel.read(e11), r11 = this._editors.original.createOverviewRuler(`original diffOverviewRuler`);
        r11 && (t11.add(r11), t11.add(P3(u10, r11.getDomNode())));
        let i11 = this._editors.modified.createOverviewRuler(`modified diffOverviewRuler`);
        if (i11 && (t11.add(i11), t11.add(P3(u10, i11.getDomNode()))), !r11 || !i11) return;
        let a11 = lP(`viewZoneChanged`, this._editors.original.onDidChangeViewZones), o11 = lP(`viewZoneChanged`, this._editors.modified.onDidChangeViewZones), s11 = lP(`hiddenRangesChanged`, this._editors.original.onDidChangeHiddenAreas), d10 = lP(`hiddenRangesChanged`, this._editors.modified.onDidChangeHiddenAreas);
        t11.add(QN((e12) => {
          var _a3;
          a11.read(e12), o11.read(e12), s11.read(e12), d10.read(e12);
          let t12 = c10.read(e12), l11 = (_a3 = n11 == null ? void 0 : n11.diff.read(e12)) == null ? void 0 : _a3.mappings;
          function u11(e13, t13, n12) {
            let r12 = n12._getViewModel();
            return r12 ? e13.filter((e14) => e14.length > 0).map((e14) => {
              let n13 = r12.coordinatesConverter.convertModelPositionToViewPosition(new P(e14.startLineNumber, 1)), i12 = r12.coordinatesConverter.convertModelPositionToViewPosition(new P(e14.endLineNumberExclusive, 1)), a12 = i12.lineNumber - n13.lineNumber;
              return new K0(n13.lineNumber, i12.lineNumber, a12, t13.toString());
            }) : [];
          }
          let f10 = u11((l11 || []).map((e13) => e13.lineRangeMapping.original), t12.removeColor, this._editors.original), p10 = u11((l11 || []).map((e13) => e13.lineRangeMapping.modified), t12.insertColor, this._editors.modified);
          r11 == null ? void 0 : r11.setZones(f10), i11 == null ? void 0 : i11.setZones(p10);
        })), t11.add(QN((e12) => {
          let t12 = this._rootHeight.read(e12), n12 = this._rootWidth.read(e12), a12 = this._modifiedEditorLayoutInfo.read(e12);
          if (a12) {
            let n13 = H8.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * H8.ONE_OVERVIEW_WIDTH;
            r11.setLayout({
              top: 0,
              height: t12,
              right: n13 + H8.ONE_OVERVIEW_WIDTH,
              width: H8.ONE_OVERVIEW_WIDTH
            }), i11.setLayout({
              top: 0,
              height: t12,
              right: 0,
              width: H8.ONE_OVERVIEW_WIDTH
            });
            let o12 = this._editors.modifiedScrollTop.read(e12), s12 = this._editors.modifiedScrollHeight.read(e12), c11 = this._editors.modified.getOption(104), u11 = new GE(c11.verticalHasArrows ? c11.arrowSize : 0, c11.verticalScrollbarSize, 0, a12.height, s12, o12);
            l10.setTop(u11.getSliderPosition()), l10.setHeight(u11.getSliderSize());
          } else l10.setTop(0), l10.setHeight(0);
          u10.style.height = t12 + `px`, u10.style.left = n12 - H8.ENTIRE_DIFF_OVERVIEW_WIDTH + `px`, l10.setWidth(H8.ENTIRE_DIFF_OVERVIEW_WIDTH);
        }));
      }));
    }
  }, H8 = _ob, _ob.ONE_OVERVIEW_WIDTH = 15, _ob.ENTIRE_DIFF_OVERVIEW_WIDTH = _ob.ONE_OVERVIEW_WIDTH * 2, _ob);
  U8 = H8 = B8([
    V8(6, Vb)
  ], U8);
  const W8 = [];
  var G8 = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this._editors = e10, this._diffModel = t10, this._options = n10, this._widget = r10, this._selectedDiffs = Y(this, (e11) => {
        let t11 = this._diffModel.read(e11), n11 = t11 == null ? void 0 : t11.diff.read(e11);
        if (!n11) return W8;
        let r11 = this._editors.modifiedSelections.read(e11);
        if (r11.every((e12) => e12.isEmpty())) return W8;
        let i10 = new Lv(r11.map((e12) => G.fromRangeInclusive(e12))), a10 = n11.mappings.filter((e12) => e12.lineRangeMapping.innerChanges && i10.intersects(e12.lineRangeMapping.modified)), o10 = a10.map((e12) => ({
          mapping: e12,
          rangeMappings: e12.lineRangeMapping.innerChanges.filter((e13) => r11.some((t12) => F.areIntersecting(e13.modifiedRange, t12)))
        }));
        return o10.length === 0 || o10.every((e12) => e12.rangeMappings.length === 0) ? W8 : o10;
      }), this._register(nP((e11, t11) => {
        if (!this._options.shouldRenderOldRevertArrows.read(e11)) return;
        let n11 = this._diffModel.read(e11), r11 = n11 == null ? void 0 : n11.diff.read(e11);
        if (!n11 || !r11 || n11.movedTextToCompare.read(e11)) return;
        let i10 = [], a10 = this._selectedDiffs.read(e11), o10 = new Set(a10.map((e12) => e12.mapping));
        if (a10.length > 0) {
          let n12 = this._editors.modifiedSelections.read(e11), r12 = t11.add(new K8(n12[n12.length - 1].positionLineNumber, this._widget, a10.flatMap((e12) => e12.rangeMappings), true));
          this._editors.modified.addGlyphMarginWidget(r12), i10.push(r12);
        }
        for (let e12 of r11.mappings) {
          if (o10.has(e12)) continue;
          if (!e12.lineRangeMapping.modified.isEmpty && e12.lineRangeMapping.innerChanges) {
            let n12 = t11.add(new K8(e12.lineRangeMapping.modified.startLineNumber, this._widget, e12.lineRangeMapping, false));
            this._editors.modified.addGlyphMarginWidget(n12), i10.push(n12);
          }
        }
        t11.add(k(() => {
          for (let e12 of i10) this._editors.modified.removeGlyphMarginWidget(e12);
        }));
      }));
    }
  }, K8 = (_pb = class extends j {
    getId() {
      return this._id;
    }
    constructor(t10, n10, r10, i10) {
      super(), this._lineNumber = t10, this._widget = n10, this._diffs = r10, this._revertSelection = i10, this._id = `revertButton${_pb.counter++}`, this._domNode = wf(`div.revertButton`, {
        title: this._revertSelection ? T(`revertSelectedChanges`, `Revert Selected Changes`) : T(`revertChange`, `Revert Change`)
      }, [
        jD(L.arrowRight)
      ]).root, this._register(z(this._domNode, B.MOUSE_DOWN, (e10) => {
        e10.button !== 2 && (e10.stopPropagation(), e10.preventDefault());
      })), this._register(z(this._domNode, B.MOUSE_UP, (e10) => {
        e10.stopPropagation(), e10.preventDefault();
      })), this._register(z(this._domNode, B.CLICK, (e10) => {
        this._diffs instanceof Gv ? this._widget.revert(this._diffs) : this._widget.revertRangeMappings(this._diffs), e10.stopPropagation(), e10.preventDefault();
      }));
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return {
        lane: Q_.Right,
        range: {
          startColumn: 1,
          startLineNumber: this._lineNumber,
          endColumn: 1,
          endLineNumber: this._lineNumber
        },
        zIndex: 10001
      };
    }
  }, _pb.counter = 0, _pb);
  q8 = function(e10, t10, n10) {
    return sP({
      debugName: () => `Configuration Key "${e10}"`
    }, (t11) => n10.onDidChangeConfiguration((n11) => {
      n11.affectsConfiguration(e10) && t11(n11);
    }), () => n10.getValue(e10) ?? t10);
  };
  J8 = function(e10, t10, n10) {
    let r10 = e10.bindTo(t10);
    return $N({
      debugName: () => `Set Context Key "${e10.key}"`
    }, (e11) => {
      r10.set(n10(e11));
    });
  };
  var Y8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, X8 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let Z8 = class extends j {
    get onDidContentSizeChange() {
      return this._onDidContentSizeChange.event;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10) {
      super(), this.originalEditorElement = e10, this.modifiedEditorElement = t10, this._options = n10, this._argCodeEditorWidgetOptions = r10, this._createInnerEditor = i10, this._instantiationService = a10, this._keybindingService = o10, this.original = this._register(this._createLeftHandSideEditor(this._options.editorOptions.get(), this._argCodeEditorWidgetOptions.originalEditor || {})), this.modified = this._register(this._createRightHandSideEditor(this._options.editorOptions.get(), this._argCodeEditorWidgetOptions.modifiedEditor || {})), this._onDidContentSizeChange = this._register(new N()), this.modifiedScrollTop = oP(this, this.modified.onDidScrollChange, () => this.modified.getScrollTop()), this.modifiedScrollHeight = oP(this, this.modified.onDidScrollChange, () => this.modified.getScrollHeight()), this.modifiedObs = A8(this.modified), this.originalObs = A8(this.original), this.modifiedModel = this.modifiedObs.model, this.modifiedSelections = oP(this, this.modified.onDidChangeCursorSelection, () => this.modified.getSelections() ?? []), this.modifiedCursor = KN({
        owner: this,
        equalsFn: P.equals
      }, (e11) => {
        var _a3;
        return ((_a3 = this.modifiedSelections.read(e11)[0]) == null ? void 0 : _a3.getPosition()) ?? new P(1, 1);
      }), this.originalCursor = oP(this, this.original.onDidChangeCursorPosition, () => this.original.getPosition() ?? new P(1, 1)), this._argCodeEditorWidgetOptions = null, this._register(eP({
        createEmptyChangeSummary: () => ({}),
        handleChange: (e11, t11) => (e11.didChange(n10.editorOptions) && Object.assign(t11, e11.change.changedOptions), true)
      }, (e11, t11) => {
        n10.editorOptions.read(e11), this._options.renderSideBySide.read(e11), this.modified.updateOptions(this._adjustOptionsForRightHandSide(e11, t11)), this.original.updateOptions(this._adjustOptionsForLeftHandSide(e11, t11));
      }));
    }
    _createLeftHandSideEditor(e10, t10) {
      let n10 = this._adjustOptionsForLeftHandSide(void 0, e10), r10 = this._constructInnerEditor(this._instantiationService, this.originalEditorElement, n10, t10);
      return r10.setContextValue(`isInDiffLeftEditor`, true), r10;
    }
    _createRightHandSideEditor(e10, t10) {
      let n10 = this._adjustOptionsForRightHandSide(void 0, e10), r10 = this._constructInnerEditor(this._instantiationService, this.modifiedEditorElement, n10, t10);
      return r10.setContextValue(`isInDiffRightEditor`, true), r10;
    }
    _constructInnerEditor(e10, t10, n10, r10) {
      let i10 = this._createInnerEditor(e10, t10, n10, r10);
      return this._register(i10.onDidContentSizeChange((e11) => {
        let t11 = this.original.getContentWidth() + this.modified.getContentWidth() + U8.ENTIRE_DIFF_OVERVIEW_WIDTH, n11 = Math.max(this.modified.getContentHeight(), this.original.getContentHeight());
        this._onDidContentSizeChange.fire({
          contentHeight: n11,
          contentWidth: t11,
          contentHeightChanged: e11.contentHeightChanged,
          contentWidthChanged: e11.contentWidthChanged
        });
      })), i10;
    }
    _adjustOptionsForLeftHandSide(e10, t10) {
      let n10 = this._adjustOptionsForSubEditor(t10);
      return this._options.renderSideBySide.get() ? (n10.unicodeHighlight = this._options.editorOptions.get().unicodeHighlight || {}, n10.wordWrapOverride1 = this._options.diffWordWrap.get()) : (n10.wordWrapOverride1 = `off`, n10.wordWrapOverride2 = `off`, n10.stickyScroll = {
        enabled: false
      }, n10.unicodeHighlight = {
        nonBasicASCII: false,
        ambiguousCharacters: false,
        invisibleCharacters: false
      }), n10.glyphMargin = this._options.renderSideBySide.get(), t10.originalAriaLabel && (n10.ariaLabel = t10.originalAriaLabel), n10.ariaLabel = this._updateAriaLabel(n10.ariaLabel), n10.readOnly = !this._options.originalEditable.get(), n10.dropIntoEditor = {
        enabled: !n10.readOnly
      }, n10.extraEditorClassName = `original-in-monaco-diff-editor`, n10;
    }
    _adjustOptionsForRightHandSide(e10, t10) {
      let n10 = this._adjustOptionsForSubEditor(t10);
      return t10.modifiedAriaLabel && (n10.ariaLabel = t10.modifiedAriaLabel), n10.ariaLabel = this._updateAriaLabel(n10.ariaLabel), n10.wordWrapOverride1 = this._options.diffWordWrap.get(), n10.revealHorizontalRightPadding = pr.revealHorizontalRightPadding.defaultValue + U8.ENTIRE_DIFF_OVERVIEW_WIDTH, n10.scrollbar.verticalHasArrows = false, n10.extraEditorClassName = `modified-in-monaco-diff-editor`, n10;
    }
    _adjustOptionsForSubEditor(e10) {
      let t10 = {
        ...e10,
        dimension: {
          height: 0,
          width: 0
        }
      };
      return t10.inDiffEditor = true, t10.automaticLayout = false, t10.scrollbar = {
        ...t10.scrollbar || {}
      }, t10.folding = false, t10.codeLens = this._options.diffCodeLens.get(), t10.fixedOverflowWidgets = true, t10.minimap = {
        ...t10.minimap || {}
      }, t10.minimap.enabled = false, this._options.hideUnchangedRegions.get() ? t10.stickyScroll = {
        enabled: false
      } : t10.stickyScroll = this._options.editorOptions.get().stickyScroll, t10;
    }
    _updateAriaLabel(e10) {
      var _a3;
      e10 || (e10 = ``);
      let t10 = T(`diff-aria-navigation-tip`, ` use {0} to open the accessibility help.`, (_a3 = this._keybindingService.lookupKeybinding(`editor.action.accessibilityHelp`)) == null ? void 0 : _a3.getAriaLabel());
      return this._options.accessibilityVerbose.get() ? e10 + t10 : e10 ? e10.replaceAll(t10, ``) : ``;
    }
  };
  Z8 = Y8([
    X8(5, Jf),
    X8(6, ME)
  ], Z8);
  var Q8 = (_qb = class extends j {
    constructor() {
      super(...arguments), this._id = ++_qb.idCounter, this._onDidDispose = this._register(new N()), this.onDidDispose = this._onDidDispose.event;
    }
    getId() {
      return this.getEditorType() + `:v2:` + this._id;
    }
    getVisibleColumnFromPosition(e10) {
      return this._targetEditor.getVisibleColumnFromPosition(e10);
    }
    getPosition() {
      return this._targetEditor.getPosition();
    }
    setPosition(e10, t10 = `api`) {
      this._targetEditor.setPosition(e10, t10);
    }
    revealLine(e10, t10 = 0) {
      this._targetEditor.revealLine(e10, t10);
    }
    revealLineInCenter(e10, t10 = 0) {
      this._targetEditor.revealLineInCenter(e10, t10);
    }
    revealLineInCenterIfOutsideViewport(e10, t10 = 0) {
      this._targetEditor.revealLineInCenterIfOutsideViewport(e10, t10);
    }
    revealLineNearTop(e10, t10 = 0) {
      this._targetEditor.revealLineNearTop(e10, t10);
    }
    revealPosition(e10, t10 = 0) {
      this._targetEditor.revealPosition(e10, t10);
    }
    revealPositionInCenter(e10, t10 = 0) {
      this._targetEditor.revealPositionInCenter(e10, t10);
    }
    revealPositionInCenterIfOutsideViewport(e10, t10 = 0) {
      this._targetEditor.revealPositionInCenterIfOutsideViewport(e10, t10);
    }
    revealPositionNearTop(e10, t10 = 0) {
      this._targetEditor.revealPositionNearTop(e10, t10);
    }
    getSelection() {
      return this._targetEditor.getSelection();
    }
    getSelections() {
      return this._targetEditor.getSelections();
    }
    setSelection(e10, t10 = `api`) {
      this._targetEditor.setSelection(e10, t10);
    }
    setSelections(e10, t10 = `api`) {
      this._targetEditor.setSelections(e10, t10);
    }
    revealLines(e10, t10, n10 = 0) {
      this._targetEditor.revealLines(e10, t10, n10);
    }
    revealLinesInCenter(e10, t10, n10 = 0) {
      this._targetEditor.revealLinesInCenter(e10, t10, n10);
    }
    revealLinesInCenterIfOutsideViewport(e10, t10, n10 = 0) {
      this._targetEditor.revealLinesInCenterIfOutsideViewport(e10, t10, n10);
    }
    revealLinesNearTop(e10, t10, n10 = 0) {
      this._targetEditor.revealLinesNearTop(e10, t10, n10);
    }
    revealRange(e10, t10 = 0, n10 = false, r10 = true) {
      this._targetEditor.revealRange(e10, t10, n10, r10);
    }
    revealRangeInCenter(e10, t10 = 0) {
      this._targetEditor.revealRangeInCenter(e10, t10);
    }
    revealRangeInCenterIfOutsideViewport(e10, t10 = 0) {
      this._targetEditor.revealRangeInCenterIfOutsideViewport(e10, t10);
    }
    revealRangeNearTop(e10, t10 = 0) {
      this._targetEditor.revealRangeNearTop(e10, t10);
    }
    revealRangeNearTopIfOutsideViewport(e10, t10 = 0) {
      this._targetEditor.revealRangeNearTopIfOutsideViewport(e10, t10);
    }
    revealRangeAtTop(e10, t10 = 0) {
      this._targetEditor.revealRangeAtTop(e10, t10);
    }
    getSupportedActions() {
      return this._targetEditor.getSupportedActions();
    }
    focus() {
      this._targetEditor.focus();
    }
    trigger(e10, t10, n10) {
      this._targetEditor.trigger(e10, t10, n10);
    }
    createDecorationsCollection(e10) {
      return this._targetEditor.createDecorationsCollection(e10);
    }
    changeDecorations(e10) {
      return this._targetEditor.changeDecorations(e10);
    }
  }, _qb.idCounter = 0, _qb), $8 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, e5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let t5 = class {
    get editorOptions() {
      return this._options;
    }
    constructor(e10, t10) {
      this._accessibilityService = t10, this._diffEditorWidth = VN(this, 0), this._screenReaderMode = oP(this, this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized()), this.couldShowInlineViewBecauseOfSize = Y(this, (e11) => this._options.read(e11).renderSideBySide && this._diffEditorWidth.read(e11) <= this._options.read(e11).renderSideBySideInlineBreakpoint), this.renderOverviewRuler = Y(this, (e11) => this._options.read(e11).renderOverviewRuler), this.renderSideBySide = Y(this, (e11) => this.compactMode.read(e11) && this.shouldRenderInlineViewInSmartMode.read(e11) ? false : this._options.read(e11).renderSideBySide && !(this._options.read(e11).useInlineViewWhenSpaceIsLimited && this.couldShowInlineViewBecauseOfSize.read(e11) && !this._screenReaderMode.read(e11))), this.readOnly = Y(this, (e11) => this._options.read(e11).readOnly), this.shouldRenderOldRevertArrows = Y(this, (e11) => !(!this._options.read(e11).renderMarginRevertIcon || !this.renderSideBySide.read(e11) || this.readOnly.read(e11) || this.shouldRenderGutterMenu.read(e11))), this.shouldRenderGutterMenu = Y(this, (e11) => this._options.read(e11).renderGutterMenu), this.renderIndicators = Y(this, (e11) => this._options.read(e11).renderIndicators), this.enableSplitViewResizing = Y(this, (e11) => this._options.read(e11).enableSplitViewResizing), this.splitViewDefaultRatio = Y(this, (e11) => this._options.read(e11).splitViewDefaultRatio), this.ignoreTrimWhitespace = Y(this, (e11) => this._options.read(e11).ignoreTrimWhitespace), this.maxComputationTimeMs = Y(this, (e11) => this._options.read(e11).maxComputationTime), this.showMoves = Y(this, (e11) => this._options.read(e11).experimental.showMoves && this.renderSideBySide.read(e11)), this.isInEmbeddedEditor = Y(this, (e11) => this._options.read(e11).isInEmbeddedEditor), this.diffWordWrap = Y(this, (e11) => this._options.read(e11).diffWordWrap), this.originalEditable = Y(this, (e11) => this._options.read(e11).originalEditable), this.diffCodeLens = Y(this, (e11) => this._options.read(e11).diffCodeLens), this.accessibilityVerbose = Y(this, (e11) => this._options.read(e11).accessibilityVerbose), this.diffAlgorithm = Y(this, (e11) => this._options.read(e11).diffAlgorithm), this.showEmptyDecorations = Y(this, (e11) => this._options.read(e11).experimental.showEmptyDecorations), this.onlyShowAccessibleDiffViewer = Y(this, (e11) => this._options.read(e11).onlyShowAccessibleDiffViewer), this.compactMode = Y(this, (e11) => this._options.read(e11).compactMode), this.trueInlineDiffRenderingEnabled = Y(this, (e11) => this._options.read(e11).experimental.useTrueInlineView), this.useTrueInlineDiffRendering = Y(this, (e11) => !this.renderSideBySide.read(e11) && this.trueInlineDiffRenderingEnabled.read(e11)), this.hideUnchangedRegions = Y(this, (e11) => this._options.read(e11).hideUnchangedRegions.enabled), this.hideUnchangedRegionsRevealLineCount = Y(this, (e11) => this._options.read(e11).hideUnchangedRegions.revealLineCount), this.hideUnchangedRegionsContextLineCount = Y(this, (e11) => this._options.read(e11).hideUnchangedRegions.contextLineCount), this.hideUnchangedRegionsMinimumLineCount = Y(this, (e11) => this._options.read(e11).hideUnchangedRegions.minimumLineCount), this._model = VN(this, void 0), this.shouldRenderInlineViewInSmartMode = this._model.map(this, (e11) => yP(this, (t11) => {
        let n11 = e11 == null ? void 0 : e11.diff.read(t11);
        return n11 ? n5(n11, this.trueInlineDiffRenderingEnabled.read(t11)) : void 0;
      })).flatten().map(this, (e11) => !!e11), this.inlineViewHideOriginalLineNumbers = this.compactMode;
      let n10 = {
        ...e10,
        ...a5(e10, wj)
      };
      this._options = VN(this, n10);
    }
    updateOptions(e10) {
      let t10 = a5(e10, this._options.get()), n10 = {
        ...this._options.get(),
        ...e10,
        ...t10
      };
      this._options.set(n10, void 0, {
        changedOptions: e10
      });
    }
    setWidth(e10) {
      this._diffEditorWidth.set(e10, void 0);
    }
    setModel(e10) {
      this._model.set(e10, void 0);
    }
  };
  t5 = $8([
    e5(1, zA)
  ], t5);
  function n5(e10, t10) {
    return e10.mappings.every((e11) => r5(e11.lineRangeMapping) || i5(e11.lineRangeMapping) || t10 && a8(e11.lineRangeMapping));
  }
  function r5(e10) {
    return e10.original.length === 0;
  }
  function i5(e10) {
    return e10.modified.length === 0;
  }
  function a5(e10, t10) {
    var _a3, _b3, _c3, _d3, _e3, _f3, _g3, _h3;
    return {
      enableSplitViewResizing: D(e10.enableSplitViewResizing, t10.enableSplitViewResizing),
      splitViewDefaultRatio: rn(e10.splitViewDefaultRatio, 0.5, 0.1, 0.9),
      renderSideBySide: D(e10.renderSideBySide, t10.renderSideBySide),
      renderMarginRevertIcon: D(e10.renderMarginRevertIcon, t10.renderMarginRevertIcon),
      maxComputationTime: tn(e10.maxComputationTime, t10.maxComputationTime, 0, 1073741824),
      maxFileSize: tn(e10.maxFileSize, t10.maxFileSize, 0, 1073741824),
      ignoreTrimWhitespace: D(e10.ignoreTrimWhitespace, t10.ignoreTrimWhitespace),
      renderIndicators: D(e10.renderIndicators, t10.renderIndicators),
      originalEditable: D(e10.originalEditable, t10.originalEditable),
      diffCodeLens: D(e10.diffCodeLens, t10.diffCodeLens),
      renderOverviewRuler: D(e10.renderOverviewRuler, t10.renderOverviewRuler),
      diffWordWrap: sn(e10.diffWordWrap, t10.diffWordWrap, [
        `off`,
        `on`,
        `inherit`
      ]),
      diffAlgorithm: sn(e10.diffAlgorithm, t10.diffAlgorithm, [
        `legacy`,
        `advanced`
      ], {
        smart: `legacy`,
        experimental: `advanced`
      }),
      accessibilityVerbose: D(e10.accessibilityVerbose, t10.accessibilityVerbose),
      experimental: {
        showMoves: D((_a3 = e10.experimental) == null ? void 0 : _a3.showMoves, t10.experimental.showMoves),
        showEmptyDecorations: D((_b3 = e10.experimental) == null ? void 0 : _b3.showEmptyDecorations, t10.experimental.showEmptyDecorations),
        useTrueInlineView: D((_c3 = e10.experimental) == null ? void 0 : _c3.useTrueInlineView, t10.experimental.useTrueInlineView)
      },
      hideUnchangedRegions: {
        enabled: D(((_d3 = e10.hideUnchangedRegions) == null ? void 0 : _d3.enabled) ?? ((_e3 = e10.experimental) == null ? void 0 : _e3.collapseUnchangedRegions), t10.hideUnchangedRegions.enabled),
        contextLineCount: tn((_f3 = e10.hideUnchangedRegions) == null ? void 0 : _f3.contextLineCount, t10.hideUnchangedRegions.contextLineCount, 0, 1073741824),
        minimumLineCount: tn((_g3 = e10.hideUnchangedRegions) == null ? void 0 : _g3.minimumLineCount, t10.hideUnchangedRegions.minimumLineCount, 0, 1073741824),
        revealLineCount: tn((_h3 = e10.hideUnchangedRegions) == null ? void 0 : _h3.revealLineCount, t10.hideUnchangedRegions.revealLineCount, 0, 1073741824)
      },
      isInEmbeddedEditor: D(e10.isInEmbeddedEditor, t10.isInEmbeddedEditor),
      onlyShowAccessibleDiffViewer: D(e10.onlyShowAccessibleDiffViewer, t10.onlyShowAccessibleDiffViewer),
      renderSideBySideInlineBreakpoint: tn(e10.renderSideBySideInlineBreakpoint, t10.renderSideBySideInlineBreakpoint, 0, 1073741824),
      useInlineViewWhenSpaceIsLimited: D(e10.useInlineViewWhenSpaceIsLimited, t10.useInlineViewWhenSpaceIsLimited),
      renderGutterMenu: D(e10.renderGutterMenu, t10.renderGutterMenu),
      compactMode: D(e10.compactMode, t10.compactMode)
    };
  }
  var o5 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, s5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  c5 = class extends Q8 {
    get onDidContentSizeChange() {
      return this._editors.onDidContentSizeChange;
    }
    constructor(e10, t10, n10, r10, i10, a10, o10, s10) {
      super(), this._domElement = e10, this._parentContextKeyService = r10, this._parentInstantiationService = i10, this._accessibilitySignalService = o10, this._editorProgressService = s10, this.elements = wf(`div.monaco-diff-editor.side-by-side`, {
        style: {
          position: `relative`,
          height: `100%`
        }
      }, [
        wf(`div.editor.original@original`, {
          style: {
            position: `absolute`,
            height: `100%`
          }
        }),
        wf(`div.editor.modified@modified`, {
          style: {
            position: `absolute`,
            height: `100%`
          }
        }),
        wf(`div.accessibleDiffViewer@accessibleDiffViewer`, {
          style: {
            position: `absolute`,
            height: `100%`
          }
        })
      ]), this._diffModelSrc = this._register(UN(this, void 0)), this._diffModel = Y(this, (e11) => {
        var _a3;
        return (_a3 = this._diffModelSrc.read(e11)) == null ? void 0 : _a3.object;
      }), this.onDidChangeModel = M.fromObservableLight(this._diffModel), this._contextKeyService = this._register(this._parentContextKeyService.createScoped(this._domElement)), this._instantiationService = this._register(this._parentInstantiationService.createChild(new uY([
        qp,
        this._contextKeyService
      ]))), this._boundarySashes = VN(this, void 0), this._accessibleDiffViewerShouldBeVisible = VN(this, false), this._accessibleDiffViewerVisible = Y(this, (e11) => this._options.onlyShowAccessibleDiffViewer.read(e11) ? true : this._accessibleDiffViewerShouldBeVisible.read(e11)), this._movedBlocksLinesPart = VN(this, void 0), this._layoutInfo = Y(this, (e11) => {
        var _a3, _b3;
        let t11 = this._rootSizeObserver.width.read(e11), n11 = this._rootSizeObserver.height.read(e11);
        this._rootSizeObserver.automaticLayout ? this.elements.root.style.height = `100%` : this.elements.root.style.height = n11 + `px`;
        let r11 = this._sash.read(e11), i11 = this._gutter.read(e11), a11 = (i11 == null ? void 0 : i11.width.read(e11)) ?? 0, o11 = ((_a3 = this._overviewRulerPart.read(e11)) == null ? void 0 : _a3.width) ?? 0, s11, c11, l11, u11, d11, f11 = !!r11;
        if (f11) {
          let n12 = r11.sashLeft.read(e11), i12 = ((_b3 = this._movedBlocksLinesPart.read(e11)) == null ? void 0 : _b3.width.read(e11)) ?? 0;
          s11 = 0, c11 = n12 - a11 - i12, d11 = n12 - a11, l11 = n12, u11 = t11 - l11 - o11;
        } else {
          d11 = 0;
          let n12 = this._options.inlineViewHideOriginalLineNumbers.read(e11);
          s11 = a11, c11 = n12 ? 0 : Math.max(5, this._editors.originalObs.layoutInfoDecorationsLeft.read(e11)), l11 = a11 + c11, u11 = t11 - l11 - o11;
        }
        return this.elements.original.style.left = s11 + `px`, this.elements.original.style.width = c11 + `px`, this._editors.original.layout({
          width: c11,
          height: n11
        }, true), i11 == null ? void 0 : i11.layout(d11), this.elements.modified.style.left = l11 + `px`, this.elements.modified.style.width = u11 + `px`, this._editors.modified.layout({
          width: u11,
          height: n11
        }, true), {
          modifiedEditor: this._editors.modified.getLayoutInfo(),
          originalEditor: this._editors.original.getLayoutInfo()
        };
      }), this._diffValue = this._diffModel.map((e11, t11) => e11 == null ? void 0 : e11.diff.read(t11)), this.onDidUpdateDiff = M.fromObservableLight(this._diffValue), a10.willCreateDiffEditor(), this._contextKeyService.createKey(`isInDiffEditor`, true), this._domElement.appendChild(this.elements.root), this._register(k(() => this.elements.root.remove())), this._rootSizeObserver = this._register(new I3(this.elements.root, t10.dimension)), this._rootSizeObserver.setAutomaticLayout(t10.automaticLayout ?? false), this._options = this._instantiationService.createInstance(t5, t10), this._register(QN((e11) => {
        this._options.setWidth(this._rootSizeObserver.width.read(e11));
      })), this._contextKeyService.createKey($.isEmbeddedDiffEditor.key, false), this._register(J8($.isEmbeddedDiffEditor, this._contextKeyService, (e11) => this._options.isInEmbeddedEditor.read(e11))), this._register(J8($.comparingMovedCode, this._contextKeyService, (e11) => {
        var _a3;
        return !!((_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.movedTextToCompare.read(e11));
      })), this._register(J8($.diffEditorRenderSideBySideInlineBreakpointReached, this._contextKeyService, (e11) => this._options.couldShowInlineViewBecauseOfSize.read(e11))), this._register(J8($.diffEditorInlineMode, this._contextKeyService, (e11) => !this._options.renderSideBySide.read(e11))), this._register(J8($.hasChanges, this._contextKeyService, (e11) => {
        var _a3, _b3;
        return (((_b3 = (_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.diff.read(e11)) == null ? void 0 : _b3.mappings.length) ?? 0) > 0;
      })), this._editors = this._register(this._instantiationService.createInstance(Z8, this.elements.original, this.elements.modified, this._options, n10, (e11, t11, n11, r11) => this._createInnerEditor(e11, t11, n11, r11))), this._register(J8($.diffEditorOriginalWritable, this._contextKeyService, (e11) => this._options.originalEditable.read(e11))), this._register(J8($.diffEditorModifiedWritable, this._contextKeyService, (e11) => !this._options.readOnly.read(e11))), this._register(J8($.diffEditorOriginalUri, this._contextKeyService, (e11) => {
        var _a3;
        return ((_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.model.original.uri.toString()) ?? ``;
      })), this._register(J8($.diffEditorModifiedUri, this._contextKeyService, (e11) => {
        var _a3;
        return ((_a3 = this._diffModel.read(e11)) == null ? void 0 : _a3.model.modified.uri.toString()) ?? ``;
      })), this._overviewRulerPart = YN(this, (e11) => this._options.renderOverviewRuler.read(e11) ? this._instantiationService.createInstance(I6(U8, e11), this._editors, this.elements.root, this._diffModel, this._rootSizeObserver.width, this._rootSizeObserver.height, this._layoutInfo.map((e12) => e12.modifiedEditor)) : void 0).recomputeInitiallyAndOnChange(this._store);
      let c10 = {
        height: this._rootSizeObserver.height,
        width: this._rootSizeObserver.width.map((e11, t11) => {
          var _a3;
          return e11 - (((_a3 = this._overviewRulerPart.read(t11)) == null ? void 0 : _a3.width) ?? 0);
        })
      };
      this._sashLayout = new d8(this._options, c10), this._sash = YN(this, (e11) => {
        let t11 = this._options.renderSideBySide.read(e11);
        return this.elements.root.classList.toggle(`side-by-side`, t11), t11 ? new f8(this.elements.root, c10, this._options.enableSplitViewResizing, this._boundarySashes, this._sashLayout.sashLeft, () => this._sashLayout.resetSash()) : void 0;
      }).recomputeInitiallyAndOnChange(this._store);
      let l10 = YN(this, (e11) => this._instantiationService.createInstance(I6(L8, e11), this._editors, this._diffModel, this._options)).recomputeInitiallyAndOnChange(this._store);
      YN(this, (e11) => this._instantiationService.createInstance(I6(u8, e11), this._editors, this._diffModel, this._options, this)).recomputeInitiallyAndOnChange(this._store);
      let u10 = /* @__PURE__ */ new Set(), d10 = /* @__PURE__ */ new Set(), f10 = false, p10 = YN(this, (e11) => this._instantiationService.createInstance(I6(n8, e11), R(this._domElement), this._editors, this._diffModel, this._options, this, () => f10 || l10.get().isUpdatingHiddenAreas, u10, d10)).recomputeInitiallyAndOnChange(this._store), m10 = Y(this, (e11) => {
        let t11 = p10.read(e11).viewZones.read(e11).orig, n11 = l10.read(e11).viewZones.read(e11).origViewZones;
        return t11.concat(n11);
      }), h10 = Y(this, (e11) => {
        let t11 = p10.read(e11).viewZones.read(e11).mod, n11 = l10.read(e11).viewZones.read(e11).modViewZones;
        return t11.concat(n11);
      });
      this._register(U3(this._editors.original, m10, (e11) => {
        f10 = e11;
      }, u10));
      let g10;
      this._register(U3(this._editors.modified, h10, (e11) => {
        f10 = e11, f10 ? g10 = j3.capture(this._editors.modified) : (g10 == null ? void 0 : g10.restore(this._editors.modified), g10 = void 0);
      }, d10)), this._accessibleDiffViewer = YN(this, (e11) => this._instantiationService.createInstance(I6(n6, e11), this.elements.accessibleDiffViewer, this._accessibleDiffViewerVisible, (e12, t11) => this._accessibleDiffViewerShouldBeVisible.set(e12, t11), this._options.onlyShowAccessibleDiffViewer.map((e12) => !e12), this._rootSizeObserver.width, this._rootSizeObserver.height, this._diffModel.map((e12, t11) => {
        var _a3;
        return (_a3 = e12 == null ? void 0 : e12.diff.read(t11)) == null ? void 0 : _a3.mappings.map((e13) => e13.lineRangeMapping);
      }), new p6(this._editors))).recomputeInitiallyAndOnChange(this._store);
      let _10 = this._accessibleDiffViewerVisible.map((e11) => e11 ? `hidden` : `visible`);
      this._register(H3(this.elements.modified, {
        visibility: _10
      })), this._register(H3(this.elements.original, {
        visibility: _10
      })), this._createDiffEditorContributions(), a10.addDiffEditor(this), this._gutter = YN(this, (e11) => this._options.shouldRenderGutterMenu.read(e11) ? this._instantiationService.createInstance(I6(D8, e11), this.elements.root, this._diffModel, this._editors, this._options, this._sashLayout, this._boundarySashes) : void 0), this._register(mP(this._layoutInfo)), YN(this, (e11) => new (I6(s8, e11))(this.elements.root, this._diffModel, this._layoutInfo.map((e12) => e12.originalEditor), this._layoutInfo.map((e12) => e12.modifiedEditor), this._editors)).recomputeInitiallyAndOnChange(this._store, (e11) => {
        this._movedBlocksLinesPart.set(e11, void 0);
      }), this._register(M.runAndSubscribe(this._editors.modified.onDidChangeCursorPosition, (e11) => this._handleCursorPositionChange(e11, true))), this._register(M.runAndSubscribe(this._editors.original.onDidChangeCursorPosition, (e11) => this._handleCursorPositionChange(e11, false)));
      let v10 = this._diffModel.map(this, (e11, t11) => {
        if (e11) return e11.diff.read(t11) === void 0 && !e11.isDiffUpToDate.read(t11);
      });
      this._register(nP((e11, t11) => {
        if (v10.read(e11) === true) {
          let e12 = this._editorProgressService.show(true, 1e3);
          t11.add(k(() => e12.done()));
        }
      })), this._register(nP((e11, t11) => {
        t11.add(new (I6(G8, e11))(this._editors, this._diffModel, this._options, this));
      })), this._register(nP((e11, t11) => {
        let n11 = this._diffModel.read(e11);
        if (n11) for (let e12 of [
          n11.model.original,
          n11.model.modified
        ]) t11.add(e12.onWillDispose((e13) => {
          gr(new Dr(`TextModel got disposed before DiffEditorWidget model got reset`)), this.setModel(null);
        }));
      })), this._register(QN((e11) => {
        this._options.setModel(this._diffModel.read(e11));
      }));
    }
    _createInnerEditor(e10, t10, n10, r10) {
      let i10 = e10.createInstance(g3, t10, n10, r10);
      return i10;
    }
    _createDiffEditorContributions() {
      let e10 = Um.getDiffEditorContributions();
      for (let t10 of e10) try {
        this._register(this._instantiationService.createInstance(t10.ctor, this));
      } catch (e11) {
        gr(e11);
      }
    }
    get _targetEditor() {
      return this._editors.modified;
    }
    getEditorType() {
      return oX.IDiffEditor;
    }
    layout(e10) {
      this._rootSizeObserver.observe(e10);
    }
    hasTextFocus() {
      return this._editors.original.hasTextFocus() || this._editors.modified.hasTextFocus();
    }
    saveViewState() {
      var _a3;
      let e10 = this._editors.original.saveViewState(), t10 = this._editors.modified.saveViewState();
      return {
        original: e10,
        modified: t10,
        modelState: (_a3 = this._diffModel.get()) == null ? void 0 : _a3.serializeState()
      };
    }
    restoreViewState(e10) {
      var _a3;
      if (e10 && e10.original && e10.modified) {
        let t10 = e10;
        this._editors.original.restoreViewState(t10.original), this._editors.modified.restoreViewState(t10.modified), t10.modelState && ((_a3 = this._diffModel.get()) == null ? void 0 : _a3.restoreSerializedState(t10.modelState));
      }
    }
    handleInitialized() {
      this._editors.original.handleInitialized(), this._editors.modified.handleInitialized();
    }
    createViewModel(e10) {
      return this._instantiationService.createInstance(B6, e10, this._options);
    }
    getModel() {
      var _a3;
      return ((_a3 = this._diffModel.get()) == null ? void 0 : _a3.model) ?? null;
    }
    setModel(e10) {
      let t10 = e10 ? `model` in e10 ? J3.create(e10).createNewRef(this) : J3.create(this.createViewModel(e10), this) : null;
      this.setDiffModel(t10);
    }
    setDiffModel(e10, t10) {
      let n10 = this._diffModel.get();
      !e10 && n10 && this._accessibleDiffViewer.get().close(), this._diffModel.get() !== (e10 == null ? void 0 : e10.object) && zN(t10, (t11) => {
        var _a3;
        let n11 = e10 == null ? void 0 : e10.object;
        oP.batchEventsGlobally(t11, () => {
          this._editors.original.setModel(n11 ? n11.model.original : null), this._editors.modified.setModel(n11 ? n11.model.modified : null);
        });
        let r10 = (_a3 = this._diffModelSrc.get()) == null ? void 0 : _a3.createNewRef(this);
        this._diffModelSrc.set(e10 == null ? void 0 : e10.createNewRef(this), t11), setTimeout(() => {
          r10 == null ? void 0 : r10.dispose();
        }, 0);
      });
    }
    updateOptions(e10) {
      this._options.updateOptions(e10);
    }
    getContainerDomNode() {
      return this._domElement;
    }
    getOriginalEditor() {
      return this._editors.original;
    }
    getModifiedEditor() {
      return this._editors.modified;
    }
    getLineChanges() {
      var _a3;
      let e10 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.diff.get();
      return e10 ? l5(e10) : null;
    }
    revert(e10) {
      let t10 = this._diffModel.get();
      !t10 || !t10.isDiffUpToDate.get() || this._editors.modified.executeEdits(`diffEditor`, [
        {
          range: e10.modified.toExclusiveRange(),
          text: t10.model.original.getValueInRange(e10.original.toExclusiveRange())
        }
      ]);
    }
    revertRangeMappings(e10) {
      let t10 = this._diffModel.get();
      if (!t10 || !t10.isDiffUpToDate.get()) return;
      let n10 = e10.map((e11) => ({
        range: e11.modifiedRange,
        text: t10.model.original.getValueInRange(e11.originalRange)
      }));
      this._editors.modified.executeEdits(`diffEditor`, n10);
    }
    _goTo(e10) {
      this._editors.modified.setPosition(new P(e10.lineRangeMapping.modified.startLineNumber, 1)), this._editors.modified.revealRangeInCenter(e10.lineRangeMapping.modified.toExclusiveRange());
    }
    goToDiff(e10) {
      var _a3, _b3;
      let t10 = (_b3 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.diff.get()) == null ? void 0 : _b3.mappings;
      if (!t10 || t10.length === 0) return;
      let n10 = this._editors.modified.getPosition().lineNumber, r10;
      r10 = e10 === `next` ? t10.find((e11) => e11.lineRangeMapping.modified.startLineNumber > n10) ?? t10[0] : Tv(t10, (e11) => e11.lineRangeMapping.modified.startLineNumber < n10) ?? t10[t10.length - 1], this._goTo(r10), r10.lineRangeMapping.modified.isEmpty ? this._accessibilitySignalService.playSignal(CY.diffLineDeleted, {
        source: `diffEditor.goToDiff`
      }) : r10.lineRangeMapping.original.isEmpty ? this._accessibilitySignalService.playSignal(CY.diffLineInserted, {
        source: `diffEditor.goToDiff`
      }) : r10 && this._accessibilitySignalService.playSignal(CY.diffLineModified, {
        source: `diffEditor.goToDiff`
      });
    }
    revealFirstDiff() {
      let e10 = this._diffModel.get();
      e10 && this.waitForDiff().then(() => {
        var _a3;
        let t10 = (_a3 = e10.diff.get()) == null ? void 0 : _a3.mappings;
        !t10 || t10.length === 0 || this._goTo(t10[0]);
      });
    }
    accessibleDiffViewerNext() {
      this._accessibleDiffViewer.get().next();
    }
    accessibleDiffViewerPrev() {
      this._accessibleDiffViewer.get().prev();
    }
    async waitForDiff() {
      let e10 = this._diffModel.get();
      e10 && await e10.waitForDiff();
    }
    mapToOtherSide() {
      var _a3, _b3;
      let e10 = this._editors.modified.hasWidgetFocus(), t10 = e10 ? this._editors.modified : this._editors.original, n10 = e10 ? this._editors.original : this._editors.modified, r10, i10 = t10.getSelection();
      if (i10) {
        let t11 = (_b3 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.diff.get()) == null ? void 0 : _b3.mappings.map((t12) => e10 ? t12.lineRangeMapping.flip() : t12.lineRangeMapping);
        if (t11) {
          let e11 = G3(i10.getStartPosition(), t11), n11 = G3(i10.getEndPosition(), t11);
          r10 = F.plusRange(e11, n11);
        }
      }
      return {
        destination: n10,
        destinationSelection: r10
      };
    }
    switchSide() {
      let { destination: e10, destinationSelection: t10 } = this.mapToOtherSide();
      e10.focus(), t10 && e10.setSelection(t10);
    }
    exitCompareMove() {
      let e10 = this._diffModel.get();
      e10 && e10.movedTextToCompare.set(void 0, void 0);
    }
    collapseAllUnchangedRegions() {
      var _a3;
      let e10 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.unchangedRegions.get();
      e10 && FN((t10) => {
        for (let n10 of e10) n10.collapseAll(t10);
      });
    }
    showAllUnchangedRegions() {
      var _a3;
      let e10 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.unchangedRegions.get();
      e10 && FN((t10) => {
        for (let n10 of e10) n10.showAll(t10);
      });
    }
    _handleCursorPositionChange(e10, t10) {
      var _a3, _b3;
      if ((e10 == null ? void 0 : e10.reason) === 3) {
        let n10 = (_b3 = (_a3 = this._diffModel.get()) == null ? void 0 : _a3.diff.get()) == null ? void 0 : _b3.mappings.find((n11) => t10 ? n11.lineRangeMapping.modified.contains(e10.position.lineNumber) : n11.lineRangeMapping.original.contains(e10.position.lineNumber));
        (n10 == null ? void 0 : n10.lineRangeMapping.modified.isEmpty) ? this._accessibilitySignalService.playSignal(CY.diffLineDeleted, {
          source: `diffEditor.cursorPositionChanged`
        }) : (n10 == null ? void 0 : n10.lineRangeMapping.original.isEmpty) ? this._accessibilitySignalService.playSignal(CY.diffLineInserted, {
          source: `diffEditor.cursorPositionChanged`
        }) : n10 && this._accessibilitySignalService.playSignal(CY.diffLineModified, {
          source: `diffEditor.cursorPositionChanged`
        });
      }
    }
  };
  c5 = o5([
    s5(3, qp),
    s5(4, Jf),
    s5(5, Zf),
    s5(6, bY),
    s5(7, uM)
  ], c5);
  function l5(e10) {
    return e10.mappings.map((e11) => {
      let t10 = e11.lineRangeMapping, n10, r10, i10, a10, o10 = t10.innerChanges;
      return t10.original.isEmpty ? (n10 = t10.original.startLineNumber - 1, r10 = 0, o10 = void 0) : (n10 = t10.original.startLineNumber, r10 = t10.original.endLineNumberExclusive - 1), t10.modified.isEmpty ? (i10 = t10.modified.startLineNumber - 1, a10 = 0, o10 = void 0) : (i10 = t10.modified.startLineNumber, a10 = t10.modified.endLineNumberExclusive - 1), {
        originalStartLineNumber: n10,
        originalEndLineNumber: r10,
        modifiedStartLineNumber: i10,
        modifiedEndLineNumber: a10,
        charChanges: o10 == null ? void 0 : o10.map((e12) => ({
          originalStartLineNumber: e12.originalRange.startLineNumber,
          originalStartColumn: e12.originalRange.startColumn,
          originalEndLineNumber: e12.originalRange.endLineNumber,
          originalEndColumn: e12.originalRange.endColumn,
          modifiedStartLineNumber: e12.modifiedRange.startLineNumber,
          modifiedStartColumn: e12.modifiedRange.startColumn,
          modifiedEndLineNumber: e12.modifiedRange.endLineNumber,
          modifiedEndColumn: e12.modifiedRange.endColumn
        }))
      };
    });
  }
  var u5 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, d5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let f5 = 0, p5 = false;
  function m5(e10) {
    if (!e10) {
      if (p5) return;
      p5 = true;
    }
    qA(e10 || os.document.body);
  }
  let h5 = class extends g3 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10) {
      let p10 = {
        ...t10
      };
      p10.ariaLabel = p10.ariaLabel || NM.editorViewAccessibleLabel, super(e10, p10, {}, n10, r10, i10, a10, c10, l10, u10, d10, f10), s10 instanceof zY ? this._standaloneKeybindingService = s10 : this._standaloneKeybindingService = null, m5(p10.ariaContainerElement), NP((e11, t11) => n10.createInstance(kE, e11, t11, {})), LP(o10);
    }
    addCommand(e10, t10, n10) {
      if (!this._standaloneKeybindingService) return console.warn(`Cannot add command because the editor is configured with an unrecognized KeybindingService`), null;
      let r10 = `DYNAMIC_` + ++f5, i10 = Ep.deserialize(n10);
      return this._standaloneKeybindingService.addDynamicKeybinding(r10, e10, t10, i10), r10;
    }
    createContextKey(e10, t10) {
      return this._contextKeyService.createKey(e10, t10);
    }
    addAction(e10) {
      if (typeof e10.id != `string` || typeof e10.label != `string` || typeof e10.run != `function`) throw Error("Invalid action descriptor, `id`, `label` and `run` are required properties!");
      if (!this._standaloneKeybindingService) return console.warn(`Cannot add keybinding because the editor is configured with an unrecognized KeybindingService`), j.None;
      let t10 = e10.id, n10 = e10.label, r10 = Ep.and(Ep.equals(`editorId`, this.getId()), Ep.deserialize(e10.precondition)), i10 = e10.keybindings, a10 = Ep.and(r10, Ep.deserialize(e10.keybindingContext)), o10 = e10.contextMenuGroupId || null, s10 = e10.contextMenuOrder || 0, c10 = (t11, ...n11) => Promise.resolve(e10.run(this, ...n11)), l10 = new A(), u10 = this.getId() + `:` + t10;
      if (l10.add(lp.registerCommand(u10, c10)), o10) {
        let e11 = {
          command: {
            id: u10,
            title: n10
          },
          when: r10,
          group: o10,
          order: s10
        };
        l10.add(vm.appendMenuItem(hm.EditorContext, e11));
      }
      if (Array.isArray(i10)) for (let e11 of i10) l10.add(this._standaloneKeybindingService.addDynamicKeybinding(u10, e11, c10, a10));
      let d10 = new M2(u10, n10, n10, void 0, r10, (...t11) => Promise.resolve(e10.run(this, ...t11)), this._contextKeyService);
      return this._actions.set(t10, d10), l10.add(k(() => {
        this._actions.delete(t10);
      })), l10;
    }
    _triggerCommand(e10, t10) {
      if (this._codeEditorService instanceof ex) try {
        this._codeEditorService.setActiveCodeEditor(this), super._triggerCommand(e10, t10);
      } finally {
        this._codeEditorService.setActiveCodeEditor(null);
      }
      else super._triggerCommand(e10, t10);
    }
  };
  h5 = u5([
    d5(2, Jf),
    d5(3, Zf),
    d5(4, cp),
    d5(5, qp),
    d5(6, OE),
    d5(7, ME),
    d5(8, Vb),
    d5(9, ux),
    d5(10, zA),
    d5(11, i_),
    d5(12, Ob)
  ], h5);
  let g5 = class extends h5 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10, f10, p10, m10, h10) {
      let g10 = {
        ...t10
      };
      qY(u10, g10, false);
      let _10 = c10.registerEditorContainer(e10);
      typeof g10.theme == `string` && c10.setTheme(g10.theme), g10.autoDetectHighContrast !== void 0 && c10.setAutoDetectHighContrast(!!g10.autoDetectHighContrast);
      let v10 = g10.model;
      delete g10.model, super(e10, g10, n10, r10, i10, a10, o10, s10, c10, l10, d10, m10, h10), this._configurationService = u10, this._standaloneThemeService = c10, this._register(_10);
      let y10;
      if (v10 === void 0) {
        let e11 = p10.getLanguageIdByMimeType(g10.language) || g10.language || Jg;
        y10 = v5(f10, p10, g10.value || ``, e11, void 0), this._ownsModel = true;
      } else y10 = v10, this._ownsModel = false;
      if (this._attachModel(y10), y10) {
        let e11 = {
          oldModelUrl: null,
          newModelUrl: y10.uri
        };
        this._onDidChangeModel.fire(e11);
      }
    }
    dispose() {
      super.dispose();
    }
    updateOptions(e10) {
      qY(this._configurationService, e10, false), typeof e10.theme == `string` && this._standaloneThemeService.setTheme(e10.theme), e10.autoDetectHighContrast !== void 0 && this._standaloneThemeService.setAutoDetectHighContrast(!!e10.autoDetectHighContrast), super.updateOptions(e10);
    }
    _postDetachModelCleanup(e10) {
      super._postDetachModelCleanup(e10), e10 && this._ownsModel && (e10.dispose(), this._ownsModel = false);
    }
  };
  g5 = u5([
    d5(2, Jf),
    d5(3, Zf),
    d5(4, cp),
    d5(5, qp),
    d5(6, OE),
    d5(7, ME),
    d5(8, wJ),
    d5(9, ux),
    d5(10, ug),
    d5(11, zA),
    d5(12, Qf),
    d5(13, _g),
    d5(14, i_),
    d5(15, Ob)
  ], g5);
  let _5 = class extends c5 {
    constructor(e10, t10, n10, r10, i10, a10, o10, s10, c10, l10, u10, d10) {
      let f10 = {
        ...t10
      };
      qY(s10, f10, true);
      let p10 = a10.registerEditorContainer(e10);
      typeof f10.theme == `string` && a10.setTheme(f10.theme), f10.autoDetectHighContrast !== void 0 && a10.setAutoDetectHighContrast(!!f10.autoDetectHighContrast), super(e10, f10, {}, r10, n10, i10, d10, l10), this._configurationService = s10, this._standaloneThemeService = a10, this._register(p10);
    }
    dispose() {
      super.dispose();
    }
    updateOptions(e10) {
      qY(this._configurationService, e10, true), typeof e10.theme == `string` && this._standaloneThemeService.setTheme(e10.theme), e10.autoDetectHighContrast !== void 0 && this._standaloneThemeService.setAutoDetectHighContrast(!!e10.autoDetectHighContrast), super.updateOptions(e10);
    }
    _createInnerEditor(e10, t10, n10) {
      return e10.createInstance(h5, t10, n10);
    }
    getOriginalEditor() {
      return super.getOriginalEditor();
    }
    getModifiedEditor() {
      return super.getModifiedEditor();
    }
    addCommand(e10, t10, n10) {
      return this.getModifiedEditor().addCommand(e10, t10, n10);
    }
    createContextKey(e10, t10) {
      return this.getModifiedEditor().createContextKey(e10, t10);
    }
    addAction(e10) {
      return this.getModifiedEditor().addAction(e10);
    }
  };
  _5 = u5([
    d5(2, Jf),
    d5(3, qp),
    d5(4, Zf),
    d5(5, wJ),
    d5(6, ux),
    d5(7, ug),
    d5(8, jE),
    d5(9, uM),
    d5(10, WJ),
    d5(11, bY)
  ], _5);
  function v5(e10, t10, n10, r10, i10) {
    if (n10 || (n10 = ``), !r10) {
      let r11 = n10.indexOf(`
`), a10 = n10;
      return r11 !== -1 && (a10 = n10.substring(0, r11)), y5(e10, n10, t10.createByFilepathOrFirstLine(i10 || null, a10), i10);
    }
    return y5(e10, n10, t10.createById(r10), i10);
  }
  function y5(e10, t10, n10, r10) {
    return e10.createModel(t10, n10, r10);
  }
  var b5 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, x5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  }, S5 = class {
    constructor(e10, t10) {
      this.viewModel = e10, this.deltaScrollVertical = t10;
    }
    getId() {
      return this.viewModel;
    }
  };
  let C5 = class extends j {
    constructor(e10, t10, n10, r10, i10) {
      super(), this._container = e10, this._overflowWidgetsDomNode = t10, this._workbenchUIElementFactory = n10, this._instantiationService = r10, this._viewModel = VN(this, void 0), this._collapsed = Y(this, (e11) => {
        var _a3;
        return (_a3 = this._viewModel.read(e11)) == null ? void 0 : _a3.collapsed.read(e11);
      }), this._editorContentHeight = VN(this, 500), this.contentHeight = Y(this, (e11) => {
        let t11 = this._collapsed.read(e11) ? 0 : this._editorContentHeight.read(e11);
        return t11 + this._outerEditorHeight;
      }), this._modifiedContentWidth = VN(this, 0), this._modifiedWidth = VN(this, 0), this._originalContentWidth = VN(this, 0), this._originalWidth = VN(this, 0), this.maxScroll = Y(this, (e11) => {
        let t11 = this._modifiedContentWidth.read(e11) - this._modifiedWidth.read(e11), n11 = this._originalContentWidth.read(e11) - this._originalWidth.read(e11);
        return t11 > n11 ? {
          maxScroll: t11,
          width: this._modifiedWidth.read(e11)
        } : {
          maxScroll: n11,
          width: this._originalWidth.read(e11)
        };
      }), this._elements = wf(`div.multiDiffEntry`, [
        wf(`div.header@header`, [
          wf(`div.header-content`, [
            wf(`div.collapse-button@collapseButton`),
            wf(`div.file-path`, [
              wf(`div.title.modified.show-file-icons@primaryPath`, []),
              wf(`div.status.deleted@status`, [
                `R`
              ]),
              wf(`div.title.original.show-file-icons@secondaryPath`, [])
            ]),
            wf(`div.actions@actions`)
          ])
        ]),
        wf(`div.editorParent`, [
          wf(`div.editorContainer@editor`)
        ])
      ]), this.editor = this._register(this._instantiationService.createInstance(c5, this._elements.editor, {
        overflowWidgetsDomNode: this._overflowWidgetsDomNode
      }, {})), this.isModifedFocused = A8(this.editor.getModifiedEditor()).isFocused, this.isOriginalFocused = A8(this.editor.getOriginalEditor()).isFocused, this.isFocused = Y(this, (e11) => this.isModifedFocused.read(e11) || this.isOriginalFocused.read(e11)), this._resourceLabel = this._workbenchUIElementFactory.createResourceLabel ? this._register(this._workbenchUIElementFactory.createResourceLabel(this._elements.primaryPath)) : void 0, this._resourceLabel2 = this._workbenchUIElementFactory.createResourceLabel ? this._register(this._workbenchUIElementFactory.createResourceLabel(this._elements.secondaryPath)) : void 0, this._dataStore = this._register(new A()), this._headerHeight = 40, this._lastScrollTop = -1, this._isSettingScrollTop = false;
      let a10 = new gU(this._elements.collapseButton, {});
      this._register(QN((e11) => {
        a10.element.className = ``, a10.icon = this._collapsed.read(e11) ? L.chevronRight : L.chevronDown;
      })), this._register(a10.onDidClick(() => {
        var _a3;
        (_a3 = this._viewModel.get()) == null ? void 0 : _a3.collapsed.set(!this._collapsed.get(), void 0);
      })), this._register(QN((e11) => {
        this._elements.editor.style.display = this._collapsed.read(e11) ? `none` : `block`;
      })), this._register(this.editor.getModifiedEditor().onDidLayoutChange((e11) => {
        let t11 = this.editor.getModifiedEditor().getLayoutInfo().contentWidth;
        this._modifiedWidth.set(t11, void 0);
      })), this._register(this.editor.getOriginalEditor().onDidLayoutChange((e11) => {
        let t11 = this.editor.getOriginalEditor().getLayoutInfo().contentWidth;
        this._originalWidth.set(t11, void 0);
      })), this._register(this.editor.onDidContentSizeChange((e11) => {
        LN((t11) => {
          this._editorContentHeight.set(e11.contentHeight, t11), this._modifiedContentWidth.set(this.editor.getModifiedEditor().getContentWidth(), t11), this._originalContentWidth.set(this.editor.getOriginalEditor().getContentWidth(), t11);
        });
      })), this._register(this.editor.getOriginalEditor().onDidScrollChange((e11) => {
        if (this._isSettingScrollTop || !e11.scrollTopChanged || !this._data) return;
        let t11 = e11.scrollTop - this._lastScrollTop;
        this._data.deltaScrollVertical(t11);
      })), this._register(QN((e11) => {
        var _a3;
        let t11 = (_a3 = this._viewModel.read(e11)) == null ? void 0 : _a3.isActive.read(e11);
        this._elements.root.classList.toggle(`active`, t11);
      })), this._container.appendChild(this._elements.root), this._outerEditorHeight = this._headerHeight, this._contextKeyService = this._register(i10.createScoped(this._elements.actions));
      let o10 = this._register(this._instantiationService.createChild(new uY([
        qp,
        this._contextKeyService
      ])));
      this._register(o10.createInstance(S8, this._elements.actions, hm.MultiDiffEditorFileToolbar, {
        actionRunner: this._register(new h8(() => {
          var _a3;
          return (_a3 = this._viewModel.get()) == null ? void 0 : _a3.modifiedUri;
        })),
        menuOptions: {
          shouldForwardArgs: true
        },
        toolbarOptions: {
          primaryGroup: (e11) => e11.startsWith(`navigation`)
        },
        actionViewItemProvider: (e11, t11) => AI(o10, e11, t11)
      }));
    }
    setScrollLeft(e10) {
      this._modifiedContentWidth.get() - this._modifiedWidth.get() > this._originalContentWidth.get() - this._originalWidth.get() ? this.editor.getModifiedEditor().setScrollLeft(e10) : this.editor.getOriginalEditor().setScrollLeft(e10);
    }
    setData(e10) {
      this._data = e10;
      function t10(e11) {
        return {
          ...e11,
          scrollBeyondLastLine: false,
          hideUnchangedRegions: {
            enabled: true
          },
          scrollbar: {
            vertical: `hidden`,
            horizontal: `hidden`,
            handleMouseWheel: false,
            useShadows: false
          },
          renderOverviewRuler: false,
          fixedOverflowWidgets: true,
          overviewRulerBorder: false
        };
      }
      if (!e10) {
        LN((e11) => {
          this._viewModel.set(void 0, e11), this.editor.setDiffModel(null, e11), this._dataStore.clear();
        });
        return;
      }
      let n10 = e10.viewModel.documentDiffItem;
      if (LN((r10) => {
        var _a3, _b3;
        (_a3 = this._resourceLabel) == null ? void 0 : _a3.setUri(e10.viewModel.modifiedUri ?? e10.viewModel.originalUri, {
          strikethrough: e10.viewModel.modifiedUri === void 0
        });
        let i10 = false, a10 = false, o10 = false, s10 = ``;
        e10.viewModel.modifiedUri && e10.viewModel.originalUri && e10.viewModel.modifiedUri.path !== e10.viewModel.originalUri.path ? (s10 = `R`, i10 = true) : e10.viewModel.modifiedUri ? e10.viewModel.originalUri || (s10 = `A`, o10 = true) : (s10 = `D`, a10 = true), this._elements.status.classList.toggle(`renamed`, i10), this._elements.status.classList.toggle(`deleted`, a10), this._elements.status.classList.toggle(`added`, o10), this._elements.status.innerText = s10, (_b3 = this._resourceLabel2) == null ? void 0 : _b3.setUri(i10 ? e10.viewModel.originalUri : void 0, {
          strikethrough: true
        }), this._dataStore.clear(), this._viewModel.set(e10.viewModel, r10), this.editor.setDiffModel(e10.viewModel.diffEditorViewModelRef, r10), this.editor.updateOptions(t10(n10.options ?? {}));
      }), n10.onOptionsDidChange && this._dataStore.add(n10.onOptionsDidChange(() => {
        this.editor.updateOptions(t10(n10.options ?? {}));
      })), e10.viewModel.isAlive.recomputeInitiallyAndOnChange(this._dataStore, (e11) => {
        e11 || this.setData(void 0);
      }), e10.viewModel.documentDiffItem.contextKeys) for (let [t11, n11] of Object.entries(e10.viewModel.documentDiffItem.contextKeys)) this._contextKeyService.createKey(t11, n11);
    }
    render(e10, t10, n10, r10) {
      this._elements.root.style.visibility = `visible`, this._elements.root.style.top = `${e10.start}px`, this._elements.root.style.height = `${e10.length}px`, this._elements.root.style.width = `${t10}px`, this._elements.root.style.position = `absolute`;
      let i10 = e10.length - this._headerHeight, a10 = Math.max(0, Math.min(r10.start - e10.start, i10));
      this._elements.header.style.transform = `translateY(${a10}px)`, LN((n11) => {
        this.editor.layout({
          width: t10 - 2 * 8 - 2 * 1,
          height: e10.length - this._outerEditorHeight
        });
      });
      try {
        this._isSettingScrollTop = true, this._lastScrollTop = n10, this.editor.getOriginalEditor().setScrollTop(n10);
      } finally {
        this._isSettingScrollTop = false;
      }
      this._elements.header.classList.toggle(`shadow`, a10 > 0 || n10 > 0), this._elements.header.classList.toggle(`collapsed`, a10 === i10);
    }
    hide() {
      this._elements.root.style.top = `-100000px`, this._elements.root.style.visibility = `hidden`;
    }
  };
  C5 = b5([
    x5(3, Jf),
    x5(4, qp)
  ], C5);
  var w5 = class {
    constructor(e10) {
      this._create = e10, this._unused = /* @__PURE__ */ new Set(), this._used = /* @__PURE__ */ new Set(), this._itemData = /* @__PURE__ */ new Map();
    }
    getUnusedObj(e10) {
      let t10;
      if (this._unused.size === 0) t10 = this._create(e10), this._itemData.set(t10, e10);
      else {
        let n10 = [
          ...this._unused.values()
        ];
        t10 = n10.find((t11) => this._itemData.get(t11).getId() === e10.getId()) ?? n10[0], this._unused.delete(t10), this._itemData.set(t10, e10), t10.setData(e10);
      }
      return this._used.add(t10), {
        object: t10,
        dispose: () => {
          this._used.delete(t10), this._unused.size > 5 ? t10.dispose() : this._unused.add(t10);
        }
      };
    }
    dispose() {
      for (let e10 of this._used) e10.dispose();
      for (let e10 of this._unused) e10.dispose();
      this._used.clear(), this._unused.clear();
    }
  }, T5 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, E5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let D5 = class extends j {
    constructor(e10, t10, n10, r10, i10, a10) {
      super(), this._element = e10, this._dimension = t10, this._viewModel = n10, this._workbenchUIElementFactory = r10, this._parentContextKeyService = i10, this._parentInstantiationService = a10, this._scrollableElements = wf(`div.scrollContent`, [
        wf(`div@content`, {
          style: {
            overflow: `hidden`
          }
        }),
        wf(`div.monaco-editor@overflowWidgetsDomNode`, {})
      ]), this._scrollable = this._register(new YE({
        forceIntegerValues: false,
        scheduleAtNextAnimationFrame: (e11) => sd(R(this._element), e11),
        smoothScrollDuration: 100
      })), this._scrollableElement = this._register(new lD(this._scrollableElements.root, {
        vertical: 1,
        horizontal: 1,
        useShadows: false
      }, this._scrollable)), this._elements = wf(`div.monaco-component.multiDiffEditor`, {}, [
        wf(`div`, {}, [
          this._scrollableElement.getDomNode()
        ]),
        wf(`div.placeholder@placeholder`, {}, [
          wf(`div`, [
            T(`noChangedFiles`, `No Changed Files`)
          ])
        ])
      ]), this._sizeObserver = this._register(new I3(this._element, void 0)), this._objectPool = this._register(new w5((e11) => {
        let t11 = this._instantiationService.createInstance(C5, this._scrollableElements.content, this._scrollableElements.overflowWidgetsDomNode, this._workbenchUIElementFactory);
        return t11.setData(e11), t11;
      })), this.scrollTop = oP(this, this._scrollableElement.onScroll, () => this._scrollableElement.getScrollPosition().scrollTop), this.scrollLeft = oP(this, this._scrollableElement.onScroll, () => this._scrollableElement.getScrollPosition().scrollLeft), this._viewItemsInfo = JN(this, (e11, t11) => {
        let n11 = this._viewModel.read(e11);
        if (!n11) return {
          items: [],
          getItem: (e12) => {
            throw new Dr();
          }
        };
        let r11 = n11.items.read(e11), i11 = /* @__PURE__ */ new Map(), a11 = r11.map((e12) => {
          var _a3;
          let n12 = t11.add(new O5(e12, this._objectPool, this.scrollLeft, (e13) => {
            this._scrollableElement.setScrollPosition({
              scrollTop: this._scrollableElement.getScrollPosition().scrollTop + e13
            });
          })), r12 = (_a3 = this._lastDocStates) == null ? void 0 : _a3[n12.getKey()];
          return r12 && FN((e13) => {
            n12.setViewState(r12, e13);
          }), i11.set(e12, n12), n12;
        });
        return {
          items: a11,
          getItem: (e12) => i11.get(e12)
        };
      }), this._viewItems = this._viewItemsInfo.map(this, (e11) => e11.items), this._spaceBetweenPx = 0, this._totalHeight = this._viewItems.map(this, (e11, t11) => e11.reduce((e12, n11) => e12 + n11.contentHeight.read(t11) + this._spaceBetweenPx, 0)), this._contextKeyService = this._register(this._parentContextKeyService.createScoped(this._element)), this._instantiationService = this._register(this._parentInstantiationService.createChild(new uY([
        qp,
        this._contextKeyService
      ]))), this._lastDocStates = {}, this._contextKeyService.createKey($.inMultiDiffEditor.key, true), this._register(nP((e11, t11) => {
        let n11 = this._viewModel.read(e11);
        if (n11 && n11.contextKeys) for (let [e12, r11] of Object.entries(n11.contextKeys)) {
          let n12 = this._contextKeyService.createKey(e12, void 0);
          n12.set(r11), t11.add(k(() => n12.reset()));
        }
      }));
      let o10 = this._parentContextKeyService.createKey($.multiDiffEditorAllCollapsed.key, false);
      this._register(QN((e11) => {
        let t11 = this._viewModel.read(e11);
        if (t11) {
          let n11 = t11.items.read(e11).every((t12) => t12.collapsed.read(e11));
          o10.set(n11);
        }
      })), this._register(QN((e11) => {
        let t11 = this._dimension.read(e11);
        this._sizeObserver.observe(t11);
      })), this._register(QN((e11) => {
        let t11 = this._viewItems.read(e11);
        this._elements.placeholder.classList.toggle(`visible`, t11.length === 0);
      })), this._scrollableElements.content.style.position = `relative`, this._register(QN((e11) => {
        let t11 = this._sizeObserver.height.read(e11);
        this._scrollableElements.root.style.height = `${t11}px`;
        let n11 = this._totalHeight.read(e11);
        this._scrollableElements.content.style.height = `${n11}px`;
        let r11 = this._sizeObserver.width.read(e11), i11 = r11, a11 = this._viewItems.read(e11), o11 = Mv(a11, le((t12) => t12.maxScroll.read(e11).maxScroll, de));
        if (o11) {
          let t12 = o11.maxScroll.read(e11);
          i11 = r11 + t12.maxScroll;
        }
        this._scrollableElement.setScrollDimensions({
          width: r11,
          height: t11,
          scrollHeight: n11,
          scrollWidth: i11
        });
      })), e10.replaceChildren(this._elements.root), this._register(k(() => {
        e10.replaceChildren();
      })), this._register(this._register(QN((e11) => {
        LN((t11) => {
          this.render(e11);
        });
      })));
    }
    render(e10) {
      let t10 = this.scrollTop.read(e10), n10 = 0, r10 = 0, i10 = 0, a10 = this._sizeObserver.height.read(e10), o10 = Cv.ofStartAndLength(t10, a10), s10 = this._sizeObserver.width.read(e10);
      for (let c10 of this._viewItems.read(e10)) {
        let l10 = c10.contentHeight.read(e10), u10 = Math.min(l10, a10), d10 = Cv.ofStartAndLength(r10, u10), f10 = Cv.ofStartAndLength(i10, l10);
        if (f10.isBefore(o10)) n10 -= l10 - u10, c10.hide();
        else if (f10.isAfter(o10)) c10.hide();
        else {
          let e11 = Math.max(0, Math.min(o10.start - f10.start, l10 - u10));
          n10 -= e11;
          let r11 = Cv.ofStartAndLength(t10 + n10, a10);
          c10.render(d10, e11, s10, r11);
        }
        r10 += u10 + this._spaceBetweenPx, i10 += l10 + this._spaceBetweenPx;
      }
      this._scrollableElements.content.style.transform = `translateY(${-(t10 + n10)}px)`;
    }
  };
  D5 = T5([
    E5(4, qp),
    E5(5, Jf)
  ], D5);
  var O5 = class extends j {
    constructor(e10, t10, n10, r10) {
      super(), this.viewModel = e10, this._objectPool = t10, this._scrollLeft = n10, this._deltaScrollVertical = r10, this._templateRef = this._register(UN(this, void 0)), this.contentHeight = Y(this, (e11) => {
        var _a3, _b3;
        return ((_b3 = (_a3 = this._templateRef.read(e11)) == null ? void 0 : _a3.object.contentHeight) == null ? void 0 : _b3.read(e11)) ?? this.viewModel.lastTemplateData.read(e11).contentHeight;
      }), this.maxScroll = Y(this, (e11) => {
        var _a3;
        return ((_a3 = this._templateRef.read(e11)) == null ? void 0 : _a3.object.maxScroll.read(e11)) ?? {
          maxScroll: 0,
          scrollWidth: 0
        };
      }), this.template = Y(this, (e11) => {
        var _a3;
        return (_a3 = this._templateRef.read(e11)) == null ? void 0 : _a3.object;
      }), this._isHidden = VN(this, false), this._isFocused = Y(this, (e11) => {
        var _a3;
        return ((_a3 = this.template.read(e11)) == null ? void 0 : _a3.isFocused.read(e11)) ?? false;
      }), this.viewModel.setIsFocused(this._isFocused, void 0), this._register(QN((e11) => {
        var _a3;
        let t11 = this._scrollLeft.read(e11);
        (_a3 = this._templateRef.read(e11)) == null ? void 0 : _a3.object.setScrollLeft(t11);
      })), this._register(QN((e11) => {
        let t11 = this._templateRef.read(e11);
        if (!t11) return;
        let n11 = this._isHidden.read(e11);
        if (!n11) return;
        let r11 = t11.object.isFocused.read(e11);
        r11 || this._clear();
      }));
    }
    dispose() {
      this._clear(), super.dispose();
    }
    toString() {
      var _a3;
      return `VirtualViewItem(${(_a3 = this.viewModel.documentDiffItem.modified) == null ? void 0 : _a3.uri.toString()})`;
    }
    getKey() {
      return this.viewModel.getKey();
    }
    setViewState(e10, t10) {
      var _a3;
      this.viewModel.collapsed.set(e10.collapsed, t10), this._updateTemplateData(t10);
      let n10 = this.viewModel.lastTemplateData.get(), r10 = (_a3 = e10.selections) == null ? void 0 : _a3.map(Ma.liftSelection);
      this.viewModel.lastTemplateData.set({
        ...n10,
        selections: r10
      }, t10);
      let i10 = this._templateRef.get();
      i10 && r10 && i10.object.editor.setSelections(r10);
    }
    _updateTemplateData(e10) {
      let t10 = this._templateRef.get();
      t10 && this.viewModel.lastTemplateData.set({
        contentHeight: t10.object.contentHeight.get(),
        selections: t10.object.editor.getSelections() ?? void 0
      }, e10);
    }
    _clear() {
      let e10 = this._templateRef.get();
      e10 && FN((t10) => {
        this._updateTemplateData(t10), e10.object.hide(), this._templateRef.set(void 0, t10);
      });
    }
    hide() {
      this._isHidden.set(true, void 0);
    }
    render(e10, t10, n10, r10) {
      this._isHidden.set(false, void 0);
      let i10 = this._templateRef.get();
      if (!i10) {
        i10 = this._objectPool.getUnusedObj(new S5(this.viewModel, this._deltaScrollVertical)), this._templateRef.set(i10, void 0);
        let e11 = this.viewModel.lastTemplateData.get().selections;
        e11 && i10.object.editor.setSelections(e11);
      }
      i10.object.render(e10, n10, t10, r10);
    }
  };
  const k5 = J(`multiDiffEditor.headerBackground`, {
    dark: `#262626`,
    light: `tab.inactiveBackground`,
    hcDark: `tab.inactiveBackground`,
    hcLight: `tab.inactiveBackground`
  }, T(`multiDiffEditor.headerBackground`, `The background color of the diff editor's header`)), Tne = J(`multiDiffEditor.background`, DC, T(`multiDiffEditor.background`, `The background color of the multi file diff editor`)), Ene = J(`multiDiffEditor.border`, {
    dark: `sideBarSectionHeader.border`,
    light: `#cccccc`,
    hcDark: `sideBarSectionHeader.border`,
    hcLight: `#cccccc`
  }, T(`multiDiffEditor.border`, `The border color of the multi file diff editor`));
  var A5 = function(e10, t10, n10, r10) {
    var i10 = arguments.length, a10 = i10 < 3 ? t10 : r10 === null ? r10 = Object.getOwnPropertyDescriptor(t10, n10) : r10, o10;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a10 = Reflect.decorate(e10, t10, n10, r10);
    else for (var s10 = e10.length - 1; s10 >= 0; s10--) (o10 = e10[s10]) && (a10 = (i10 < 3 ? o10(a10) : i10 > 3 ? o10(t10, n10, a10) : o10(t10, n10)) || a10);
    return i10 > 3 && a10 && Object.defineProperty(t10, n10, a10), a10;
  }, j5 = function(e10, t10) {
    return function(n10, r10) {
      t10(n10, r10, e10);
    };
  };
  let M5 = class extends j {
    constructor(e10, t10, n10) {
      super(), this._element = e10, this._workbenchUIElementFactory = t10, this._instantiationService = n10, this._dimension = VN(this, void 0), this._viewModel = VN(this, void 0), this._widgetImpl = JN(this, (e11, t11) => (I6(C5, e11), t11.add(this._instantiationService.createInstance(I6(D5, e11), this._element, this._dimension, this._viewModel, this._workbenchUIElementFactory)))), this._register(mP(this._widgetImpl));
    }
  };
  M5 = A5([
    j5(2, Jf)
  ], M5);
  function N5(e10, t10, n10) {
    let r10 = Q.initialize(n10 || {});
    return r10.createInstance(g5, e10, t10);
  }
  function P5(e10) {
    let t10 = Q.get(Zf);
    return t10.onCodeEditorAdd((t11) => {
      e10(t11);
    });
  }
  function F5(e10) {
    let t10 = Q.get(Zf);
    return t10.onDiffEditorAdd((t11) => {
      e10(t11);
    });
  }
  function I5() {
    let e10 = Q.get(Zf);
    return e10.listCodeEditors();
  }
  function L5() {
    let e10 = Q.get(Zf);
    return e10.listDiffEditors();
  }
  function R5(e10, t10, n10) {
    let r10 = Q.initialize(n10 || {});
    return r10.createInstance(_5, e10, t10);
  }
  function z5(e10, t10) {
    let n10 = Q.initialize(t10 || {});
    return new M5(e10, {}, n10);
  }
  function B5(e10) {
    if (typeof e10.id != `string` || typeof e10.run != `function`) throw Error("Invalid command descriptor, `id` and `run` are required properties!");
    return lp.registerCommand(e10.id, e10.run);
  }
  function V5(e10) {
    if (typeof e10.id != `string` || typeof e10.label != `string` || typeof e10.run != `function`) throw Error("Invalid action descriptor, `id`, `label` and `run` are required properties!");
    let t10 = Ep.deserialize(e10.precondition), n10 = (n11, ...r11) => Pm.runEditorCommand(n11, r11, t10, (t11, n12, r12) => Promise.resolve(e10.run(n12, ...r12))), r10 = new A();
    if (r10.add(lp.registerCommand(e10.id, n10)), e10.contextMenuGroupId) {
      let n11 = {
        command: {
          id: e10.id,
          title: e10.label
        },
        when: t10,
        group: e10.contextMenuGroupId,
        order: e10.contextMenuOrder || 0
      };
      r10.add(vm.appendMenuItem(hm.EditorContext, n11));
    }
    if (Array.isArray(e10.keybindings)) {
      let n11 = Q.get(ME);
      if (!(n11 instanceof zY)) console.warn(`Cannot add keybinding because the editor is configured with an unrecognized KeybindingService`);
      else {
        let i10 = Ep.and(t10, Ep.deserialize(e10.keybindingContext));
        r10.add(n11.addDynamicKeybindings(e10.keybindings.map((t11) => ({
          keybinding: t11,
          command: e10.id,
          when: i10
        }))));
      }
    }
    return r10;
  }
  function H5(e10) {
    return U5([
      e10
    ]);
  }
  function U5(e10) {
    let t10 = Q.get(ME);
    return t10 instanceof zY ? t10.addDynamicKeybindings(e10.map((e11) => ({
      keybinding: e11.keybinding,
      command: e11.command,
      commandArgs: e11.commandArgs,
      when: Ep.deserialize(e11.when)
    }))) : (console.warn(`Cannot add keybinding because the editor is configured with an unrecognized KeybindingService`), j.None);
  }
  function W5(e10, t10, n10) {
    let r10 = Q.get(_g), i10 = r10.getLanguageIdByMimeType(t10) || t10;
    return v5(Q.get(Qf), r10, e10, i10, n10);
  }
  function G5(e10, t10) {
    let n10 = Q.get(_g), r10 = n10.getLanguageIdByMimeType(t10) || t10 || Jg;
    e10.setLanguage(n10.createById(r10));
  }
  function K5(e10, t10, n10) {
    if (e10) {
      let r10 = Q.get(rL);
      r10.changeOne(t10, e10.uri, n10);
    }
  }
  function q5(e10) {
    let t10 = Q.get(rL);
    t10.changeAll(e10, []);
  }
  function J5(e10) {
    let t10 = Q.get(rL);
    return t10.read(e10);
  }
  function Y5(e10) {
    let t10 = Q.get(rL);
    return t10.onMarkerChanged(e10);
  }
  function X5(e10) {
    let t10 = Q.get(Qf);
    return t10.getModel(e10);
  }
  function Z5() {
    let e10 = Q.get(Qf);
    return e10.getModels();
  }
  function Q5(e10) {
    let t10 = Q.get(Qf);
    return t10.onModelAdded(e10);
  }
  function $5(e10) {
    let t10 = Q.get(Qf);
    return t10.onModelRemoved(e10);
  }
  function e7(e10) {
    let t10 = Q.get(Qf);
    return t10.onModelLanguageChanged((t11) => {
      e10({
        model: t11.model,
        oldLanguage: t11.oldLanguageId
      });
    });
  }
  function t7(e10) {
    return iX(Q.get(Qf), e10);
  }
  function n7(e10, t10) {
    let n10 = Q.get(_g), r10 = Q.get(wJ);
    return fZ.colorizeElement(r10, n10, e10, t10).then(() => {
      r10.registerEditorContainer(e10);
    });
  }
  function r7(e10, t10, n10) {
    let r10 = Q.get(_g), i10 = Q.get(wJ);
    return i10.registerEditorContainer(os.document.body), fZ.colorize(r10, e10, t10, n10);
  }
  function i7(e10, t10, n10 = 4) {
    let r10 = Q.get(wJ);
    return r10.registerEditorContainer(os.document.body), fZ.colorizeModelLine(e10, t10, n10);
  }
  function a7(e10) {
    let t10 = ao.get(e10);
    return t10 || {
      getInitialState: () => EA,
      tokenize: (t11, n10, r10) => DA(e10, r10)
    };
  }
  function o7(e10, t10) {
    ao.getOrCreate(t10);
    let n10 = a7(t10), r10 = ws(e10), i10 = [], a10 = n10.getInitialState();
    for (let e11 = 0, t11 = r10.length; e11 < t11; e11++) {
      let t12 = r10[e11], o10 = n10.tokenize(t12, true, a10);
      i10[e11] = o10.tokens, a10 = o10.endState;
    }
    return i10;
  }
  function s7(e10, t10) {
    let n10 = Q.get(wJ);
    n10.defineTheme(e10, t10);
  }
  function c7(e10) {
    let t10 = Q.get(wJ);
    t10.setTheme(e10);
  }
  function l7() {
    Kf.clearAllFontInfos();
  }
  function u7(e10, t10) {
    return lp.registerCommand({
      id: e10,
      handler: t10
    });
  }
  function d7(e10) {
    let t10 = Q.get(vD);
    return t10.registerOpener({
      async open(t11) {
        return typeof t11 == `string` && (t11 = xa.parse(t11)), e10.open(t11);
      }
    });
  }
  function f7(e10) {
    let t10 = Q.get(Zf);
    return t10.registerCodeEditorOpenHandler(async (t11, n10, r10) => {
      var _a3;
      if (!n10) return null;
      let i10 = (_a3 = t11.options) == null ? void 0 : _a3.selection, a10;
      return i10 && typeof i10.endLineNumber == `number` && typeof i10.endColumn == `number` ? a10 = i10 : i10 && (a10 = {
        lineNumber: i10.startLineNumber,
        column: i10.startColumn
      }), await e10.openCodeEditor(n10, t11.resource, a10) ? n10 : null;
    });
  }
  function p7() {
    return {
      create: N5,
      getEditors: I5,
      getDiffEditors: L5,
      onDidCreateEditor: P5,
      onDidCreateDiffEditor: F5,
      createDiffEditor: R5,
      addCommand: B5,
      addEditorAction: V5,
      addKeybindingRule: H5,
      addKeybindingRules: U5,
      createModel: W5,
      setModelLanguage: G5,
      setModelMarkers: K5,
      getModelMarkers: J5,
      removeAllMarkers: q5,
      onDidChangeMarkers: Y5,
      getModels: Z5,
      getModel: X5,
      onDidCreateModel: Q5,
      onWillDisposeModel: $5,
      onDidChangeModelLanguage: e7,
      createWebWorker: t7,
      colorizeElement: n7,
      colorize: r7,
      colorizeModelLine: i7,
      tokenize: o7,
      defineTheme: s7,
      setTheme: c7,
      remeasureFonts: l7,
      registerCommand: u7,
      registerLinkOpener: d7,
      registerEditorOpener: f7,
      AccessibilitySupport: co,
      ContentWidgetPositionPreference: ho,
      CursorChangeReason: go,
      DefaultEndOfLine: _o,
      EditorAutoIndentStrategy: yo,
      EditorOption: bo,
      EndOfLinePreference: xo,
      EndOfLineSequence: So,
      MinimapPosition: No,
      MinimapSectionHeaderStyle: Po,
      MouseTargetType: Fo,
      OverlayWidgetPositionPreference: Ro,
      OverviewRulerLane: zo,
      GlyphMarginLane: Co,
      RenderLineNumbersType: Ho,
      RenderMinimap: Uo,
      ScrollbarVisibility: Go,
      ScrollType: Wo,
      TextEditorCursorBlinkingStyle: Zo,
      TextEditorCursorStyle: Qo,
      TrackedRangeStickiness: $o,
      WrappingIndent: es,
      InjectedTextCursorStops: Eo,
      PositionAffinity: Vo,
      ShowLightbulbIconMode: qo,
      ConfigurationChangedEvent: qt,
      BareFontInfo: Vf,
      FontInfo: Uf,
      TextModelResolvedOptions: ev,
      FindMatch: tv,
      ApplyUpdateResult: Xt,
      EditorZoom: Rf,
      createMultiFileDiffEditor: z5,
      EditorType: oX,
      EditorOptions: pr
    };
  }
  function m7(e10, t10) {
    if (!t10 || !Array.isArray(t10)) return false;
    for (let n10 of t10) if (!e10(n10)) return false;
    return true;
  }
  function h7(e10, t10) {
    return typeof e10 == `boolean` ? e10 : t10;
  }
  function g7(e10, t10) {
    return typeof e10 == `string` ? e10 : t10;
  }
  function _7(e10) {
    let t10 = {};
    for (let n10 of e10) t10[n10] = true;
    return t10;
  }
  function v7(e10, t10 = false) {
    t10 && (e10 = e10.map(function(e11) {
      return e11.toLowerCase();
    }));
    let n10 = _7(e10);
    return t10 ? function(e11) {
      return n10[e11.toLowerCase()] !== void 0 && n10.hasOwnProperty(e11.toLowerCase());
    } : function(e11) {
      return n10[e11] !== void 0 && n10.hasOwnProperty(e11);
    };
  }
  function y7(e10, t10, n10) {
    t10 = t10.replace(/@@/g, ``);
    let r10 = 0, i10;
    do
      i10 = false, t10 = t10.replace(/@(\w+)/g, function(n11, r11) {
        i10 = true;
        let a11 = ``;
        if (typeof e10[r11] == `string`) a11 = e10[r11];
        else if (e10[r11] && e10[r11] instanceof RegExp) a11 = e10[r11].source;
        else if (e10[r11] === void 0) throw qX(e10, `language definition does not contain attribute '` + r11 + `', used at: ` + t10);
        else throw qX(e10, `attribute reference '` + r11 + `' must be a string, used at: ` + t10);
        return UX(a11) ? `` : `(?:` + a11 + `)`;
      }), r10++;
    while (i10 && r10 < 5);
    t10 = t10.replace(/\x01/g, `@`);
    let a10 = (e10.ignoreCase ? `i` : ``) + (e10.unicode ? `u` : ``);
    if (n10) {
      let n11 = t10.match(/\$[sS](\d\d?)/g);
      if (n11) {
        let n12 = null, r11 = null;
        return (i11) => r11 && n12 === i11 ? r11 : (n12 = i11, r11 = new RegExp(YX(e10, t10, i11), a10), r11);
      }
    }
    return new RegExp(t10, a10);
  }
  function b7(e10, t10, n10, r10) {
    if (r10 < 0) return e10;
    if (r10 < t10.length) return t10[r10];
    if (r10 >= 100) {
      r10 -= 100;
      let e11 = n10.split(`.`);
      if (e11.unshift(n10), r10 < e11.length) return e11[r10];
    }
    return null;
  }
  function x7(e10, t10, n10, r10) {
    let i10 = -1, a10 = n10, o10 = n10.match(/^\$(([sS]?)(\d\d?)|#)(.*)$/);
    o10 && (o10[3] && (i10 = parseInt(o10[3]), o10[2] && (i10 += 100)), a10 = o10[4]);
    let s10 = `~`, c10 = a10;
    !a10 || a10.length === 0 ? (s10 = `!=`, c10 = ``) : /^\w*$/.test(c10) ? s10 = `==` : (o10 = a10.match(/^(@|!@|~|!~|==|!=)(.*)$/), o10 && (s10 = o10[1], c10 = o10[2]));
    let l10;
    if ((s10 === `~` || s10 === `!~`) && /^(\w|\|)*$/.test(c10)) {
      let t11 = v7(c10.split(`|`), e10.ignoreCase);
      l10 = function(e11) {
        return s10 === `~` ? t11(e11) : !t11(e11);
      };
    } else if (s10 === `@` || s10 === `!@`) {
      let n11 = e10[c10];
      if (!n11) throw qX(e10, `the @ match target '` + c10 + `' is not defined, in rule: ` + t10);
      if (!m7(function(e11) {
        return typeof e11 == `string`;
      }, n11)) throw qX(e10, `the @ match target '` + c10 + `' must be an array of strings, in rule: ` + t10);
      let r11 = v7(n11, e10.ignoreCase);
      l10 = function(e11) {
        return s10 === `@` ? r11(e11) : !r11(e11);
      };
    } else if (s10 === `~` || s10 === `!~`) if (c10.indexOf(`$`) < 0) {
      let t11 = y7(e10, `^` + c10 + `$`, false);
      l10 = function(e11) {
        return s10 === `~` ? t11.test(e11) : !t11.test(e11);
      };
    } else l10 = function(t11, n11, r11, i11) {
      let a11 = y7(e10, `^` + JX(e10, c10, n11, r11, i11) + `$`, false);
      return a11.test(t11);
    };
    else if (c10.indexOf(`$`) < 0) {
      let t11 = WX(e10, c10);
      l10 = function(e11) {
        return s10 === `==` ? e11 === t11 : e11 !== t11;
      };
    } else {
      let t11 = WX(e10, c10);
      l10 = function(n11, r11, i11, a11, o11) {
        let c11 = JX(e10, t11, r11, i11, a11);
        return s10 === `==` ? n11 === c11 : n11 !== c11;
      };
    }
    return i10 === -1 ? {
      name: n10,
      value: r10,
      test: function(e11, t11, n11, r11) {
        return l10(e11, e11, t11, n11, r11);
      }
    } : {
      name: n10,
      value: r10,
      test: function(e11, t11, n11, r11) {
        let a11 = b7(e11, t11, n11, i10);
        return l10(a11 || ``, e11, t11, n11, r11);
      }
    };
  }
  function S7(e10, t10, n10) {
    if (n10) {
      if (typeof n10 == `string`) return n10;
      if (n10.token || n10.token === ``) {
        if (typeof n10.token != `string`) throw qX(e10, `a 'token' attribute must be of type string, in rule: ` + t10);
        {
          let r10 = {
            token: n10.token
          };
          if (n10.token.indexOf(`$`) >= 0 && (r10.tokenSubst = true), typeof n10.bracket == `string`) if (n10.bracket === `@open`) r10.bracket = 1;
          else if (n10.bracket === `@close`) r10.bracket = -1;
          else throw qX(e10, `a 'bracket' attribute must be either '@open' or '@close', in rule: ` + t10);
          if (n10.next) {
            if (typeof n10.next != `string`) throw qX(e10, `the next state must be a string value in rule: ` + t10);
            {
              let i10 = n10.next;
              if (!/^(@pop|@push|@popall)$/.test(i10) && (i10[0] === `@` && (i10 = i10.substr(1)), i10.indexOf(`$`) < 0 && !ZX(e10, JX(e10, i10, ``, [], ``)))) throw qX(e10, `the next state '` + n10.next + `' is not defined in rule: ` + t10);
              r10.next = i10;
            }
          }
          return typeof n10.goBack == `number` && (r10.goBack = n10.goBack), typeof n10.switchTo == `string` && (r10.switchTo = n10.switchTo), typeof n10.log == `string` && (r10.log = n10.log), typeof n10.nextEmbedded == `string` && (r10.nextEmbedded = n10.nextEmbedded, e10.usesEmbedded = true), r10;
        }
      } else if (Array.isArray(n10)) {
        let r10 = [];
        for (let i10 = 0, a10 = n10.length; i10 < a10; i10++) r10[i10] = S7(e10, t10, n10[i10]);
        return {
          group: r10
        };
      } else if (n10.cases) {
        let r10 = [];
        for (let i11 in n10.cases) if (n10.cases.hasOwnProperty(i11)) {
          let a10 = S7(e10, t10, n10.cases[i11]);
          i11 === `@default` || i11 === `@` || i11 === `` ? r10.push({
            test: void 0,
            value: a10,
            name: i11
          }) : i11 === `@eos` ? r10.push({
            test: function(e11, t11, n11, r11) {
              return r11;
            },
            value: a10,
            name: i11
          }) : r10.push(x7(e10, t10, i11, a10));
        }
        let i10 = e10.defaultToken;
        return {
          test: function(e11, t11, n11, a10) {
            for (let i11 of r10) {
              let r11 = !i11.test || i11.test(e11, t11, n11, a10);
              if (r11) return i11.value;
            }
            return i10;
          }
        };
      } else throw qX(e10, `an action must be a string, an object with a 'token' or 'cases' attribute, or an array of actions; in rule: ` + t10);
    } else return {
      token: ``
    };
  }
  var C7 = class {
    constructor(e10) {
      this.regex = RegExp(``), this.action = {
        token: ``
      }, this.matchOnlyAtLineStart = false, this.name = ``, this.name = e10;
    }
    setRegex(e10, t10) {
      let n10;
      if (typeof t10 == `string`) n10 = t10;
      else if (t10 instanceof RegExp) n10 = t10.source;
      else throw qX(e10, `rules must start with a match string or regular expression: ` + this.name);
      this.matchOnlyAtLineStart = n10.length > 0 && n10[0] === `^`, this.name = this.name + `: ` + n10, this.regex = y7(e10, `^(?:` + (this.matchOnlyAtLineStart ? n10.substr(1) : n10) + `)`, true);
    }
    setAction(e10, t10) {
      this.action = S7(e10, this.name, t10);
    }
    resolveRegex(e10) {
      return this.regex instanceof RegExp ? this.regex : this.regex(e10);
    }
  };
  function w7(e10, t10) {
    if (!t10 || typeof t10 != `object`) throw Error(`Monarch: expecting a language definition object`);
    let n10 = {
      languageId: e10,
      includeLF: h7(t10.includeLF, false),
      noThrow: false,
      maxStack: 100,
      start: typeof t10.start == `string` ? t10.start : null,
      ignoreCase: h7(t10.ignoreCase, false),
      unicode: h7(t10.unicode, false),
      tokenPostfix: g7(t10.tokenPostfix, `.` + e10),
      defaultToken: g7(t10.defaultToken, `source`),
      usesEmbedded: false,
      stateNames: {},
      tokenizer: {},
      brackets: []
    }, r10 = t10;
    r10.languageId = e10, r10.includeLF = n10.includeLF, r10.ignoreCase = n10.ignoreCase, r10.unicode = n10.unicode, r10.noThrow = n10.noThrow, r10.usesEmbedded = n10.usesEmbedded, r10.stateNames = t10.tokenizer, r10.defaultToken = n10.defaultToken;
    function i10(e11, a11, o10) {
      for (let s10 of o10) {
        let o11 = s10.include;
        if (o11) {
          if (typeof o11 != `string`) throw qX(n10, `an 'include' attribute must be a string at: ` + e11);
          if (o11[0] === `@` && (o11 = o11.substr(1)), !t10.tokenizer[o11]) throw qX(n10, `include target '` + o11 + `' is not defined at: ` + e11);
          i10(e11 + `.` + o11, a11, t10.tokenizer[o11]);
        } else {
          let t11 = new C7(e11);
          if (Array.isArray(s10) && s10.length >= 1 && s10.length <= 3) if (t11.setRegex(r10, s10[0]), s10.length >= 3) if (typeof s10[1] == `string`) t11.setAction(r10, {
            token: s10[1],
            next: s10[2]
          });
          else if (typeof s10[1] == `object`) {
            let e12 = s10[1];
            e12.next = s10[2], t11.setAction(r10, e12);
          } else throw qX(n10, `a next state as the last element of a rule can only be given if the action is either an object or a string, at: ` + e11);
          else t11.setAction(r10, s10[1]);
          else {
            if (!s10.regex) throw qX(n10, `a rule must either be an array, or an object with a 'regex' or 'include' field at: ` + e11);
            s10.name && typeof s10.name == `string` && (t11.name = s10.name), s10.matchOnlyAtStart && (t11.matchOnlyAtLineStart = h7(s10.matchOnlyAtLineStart, false)), t11.setRegex(r10, s10.regex), t11.setAction(r10, s10.action);
          }
          a11.push(t11);
        }
      }
    }
    if (!t10.tokenizer || typeof t10.tokenizer != `object`) throw qX(n10, `a language definition must define the 'tokenizer' attribute as an object`);
    for (let e11 in n10.tokenizer = [], t10.tokenizer) if (t10.tokenizer.hasOwnProperty(e11)) {
      n10.start || (n10.start = e11);
      let r11 = t10.tokenizer[e11];
      n10.tokenizer[e11] = [], i10(`tokenizer.` + e11, n10.tokenizer[e11], r11);
    }
    if (n10.usesEmbedded = r10.usesEmbedded, t10.brackets) {
      if (!Array.isArray(t10.brackets)) throw qX(n10, `the 'brackets' attribute must be defined as an array`);
    } else t10.brackets = [
      {
        open: `{`,
        close: `}`,
        token: `delimiter.curly`
      },
      {
        open: `[`,
        close: `]`,
        token: `delimiter.square`
      },
      {
        open: `(`,
        close: `)`,
        token: `delimiter.parenthesis`
      },
      {
        open: `<`,
        close: `>`,
        token: `delimiter.angle`
      }
    ];
    let a10 = [];
    for (let e11 of t10.brackets) {
      let t11 = e11;
      if (t11 && Array.isArray(t11) && t11.length === 3 && (t11 = {
        token: t11[2],
        open: t11[0],
        close: t11[1]
      }), t11.open === t11.close) throw qX(n10, `open and close brackets in a 'brackets' attribute must be different: ` + t11.open + `
 hint: use the 'bracket' attribute if matching on equal brackets is required.`);
      if (typeof t11.open == `string` && typeof t11.token == `string` && typeof t11.close == `string`) a10.push({
        token: t11.token + n10.tokenPostfix,
        open: WX(n10, t11.open),
        close: WX(n10, t11.close)
      });
      else throw qX(n10, `every element in the 'brackets' array must be a '{open,close,token}' object or array`);
    }
    return n10.brackets = a10, n10.noThrow = true, n10;
  }
  function T7(e10) {
    qg.registerLanguage(e10);
  }
  function E7() {
    let e10 = [];
    return e10 = e10.concat(qg.getLanguages()), e10;
  }
  function D7(e10) {
    let t10 = Q.get(_g);
    return t10.languageIdCodec.encodeLanguageId(e10);
  }
  function O7(e10, t10) {
    return Q.withServices(() => {
      let n10 = Q.get(_g), r10 = n10.onDidRequestRichLanguageFeatures((n11) => {
        n11 === e10 && (r10.dispose(), t10());
      });
      return r10;
    });
  }
  function k7(e10, t10) {
    return Q.withServices(() => {
      let n10 = Q.get(_g), r10 = n10.onDidRequestBasicLanguageFeatures((n11) => {
        n11 === e10 && (r10.dispose(), t10());
      });
      return r10;
    });
  }
  function A7(e10, t10) {
    let n10 = Q.get(_g);
    if (!n10.isRegisteredLanguageId(e10)) throw Error(`Cannot set configuration for unknown language ${e10}`);
    let r10 = Q.get(i_);
    return r10.register(e10, t10, 100);
  }
  var j7 = class {
    constructor(e10, t10) {
      this._languageId = e10, this._actual = t10;
    }
    dispose() {
    }
    getInitialState() {
      return this._actual.getInitialState();
    }
    tokenize(e10, t10, n10) {
      if (typeof this._actual.tokenize == `function`) return M7.adaptTokenize(this._languageId, this._actual, e10, n10);
      throw Error(`Not supported!`);
    }
    tokenizeEncoded(e10, t10, n10) {
      let r10 = this._actual.tokenizeEncoded(e10, n10);
      return new Va(r10.tokens, r10.endState);
    }
  }, M7 = class e10 {
    constructor(e11, t10, n10, r10) {
      this._languageId = e11, this._actual = t10, this._languageService = n10, this._standaloneThemeService = r10;
    }
    dispose() {
    }
    getInitialState() {
      return this._actual.getInitialState();
    }
    static _toClassicTokens(e11, t10) {
      let n10 = [], r10 = 0;
      for (let i10 = 0, a10 = e11.length; i10 < a10; i10++) {
        let a11 = e11[i10], o10 = a11.startIndex;
        i10 === 0 ? o10 = 0 : o10 < r10 && (o10 = r10), n10[i10] = new za(o10, a11.scopes, t10), r10 = o10;
      }
      return n10;
    }
    static adaptTokenize(t10, n10, r10, i10) {
      let a10 = n10.tokenize(r10, i10), o10 = e10._toClassicTokens(a10.tokens, t10), s10;
      return s10 = a10.endState.equals(i10) ? i10 : a10.endState, new Ba(o10, s10);
    }
    tokenize(t10, n10, r10) {
      return e10.adaptTokenize(this._languageId, this._actual, t10, r10);
    }
    _toBinaryTokens(e11, t10) {
      let n10 = e11.encodeLanguageId(this._languageId), r10 = this._standaloneThemeService.getColorTheme().tokenTheme, i10 = [], a10 = 0, o10 = 0;
      for (let e12 = 0, s11 = t10.length; e12 < s11; e12++) {
        let s12 = t10[e12], c10 = r10.match(n10, s12.scopes) | 1024;
        if (a10 > 0 && i10[a10 - 1] === c10) continue;
        let l10 = s12.startIndex;
        e12 === 0 ? l10 = 0 : l10 < o10 && (l10 = o10), i10[a10++] = l10, i10[a10++] = c10, o10 = l10;
      }
      let s10 = new Uint32Array(a10);
      for (let e12 = 0; e12 < a10; e12++) s10[e12] = i10[e12];
      return s10;
    }
    tokenizeEncoded(e11, t10, n10) {
      let r10 = this._actual.tokenize(e11, n10), i10 = this._toBinaryTokens(this._languageService.languageIdCodec, r10.tokens), a10;
      return a10 = r10.endState.equals(n10) ? n10 : r10.endState, new Va(i10, a10);
    }
  };
  function N7(e10) {
    return typeof e10.getInitialState == `function`;
  }
  function P7(e10) {
    return `tokenizeEncoded` in e10;
  }
  function F7(e10) {
    return e10 && typeof e10.then == `function`;
  }
  function I7(e10) {
    let t10 = Q.get(wJ);
    if (e10) {
      let n10 = [
        null
      ];
      for (let t11 = 1, r10 = e10.length; t11 < r10; t11++) n10[t11] = K.fromHex(e10[t11]);
      t10.setColorMapOverride(n10);
    } else t10.setColorMapOverride(null);
  }
  function L7(e10, t10) {
    return P7(t10) ? new j7(e10, t10) : new M7(e10, t10, Q.get(_g), Q.get(wJ));
  }
  function R7(e10, t10) {
    let n10 = new io(async () => {
      let n11 = await Promise.resolve(t10.create());
      return n11 ? N7(n11) ? L7(e10, n11) : new lZ(Q.get(_g), Q.get(wJ), e10, w7(e10, n11), Q.get(ug)) : null;
    });
    return ao.registerFactory(e10, n10);
  }
  function z7(e10, t10) {
    let n10 = Q.get(_g);
    if (!n10.isRegisteredLanguageId(e10)) throw Error(`Cannot set tokens provider for unknown language ${e10}`);
    return F7(t10) ? R7(e10, {
      create: () => t10
    }) : ao.register(e10, L7(e10, t10));
  }
  function B7(e10, t10) {
    let n10 = (t11) => new lZ(Q.get(_g), Q.get(wJ), e10, w7(e10, t11), Q.get(ug));
    return F7(t10) ? R7(e10, {
      create: () => t10
    }) : ao.register(e10, n10(t10));
  }
  function V7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.referenceProvider.register(e10, t10);
  }
  function H7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.renameProvider.register(e10, t10);
  }
  function U7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.newSymbolNamesProvider.register(e10, t10);
  }
  function W7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.signatureHelpProvider.register(e10, t10);
  }
  function G7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.hoverProvider.register(e10, {
      provideHover: async (e11, n11, r10, i10) => {
        let a10 = e11.getWordAtPosition(n11);
        return Promise.resolve(t10.provideHover(e11, n11, r10, i10)).then((e12) => {
          if (e12) return !e12.range && a10 && (e12.range = new F(n11.lineNumber, a10.startColumn, n11.lineNumber, a10.endColumn)), e12.range || (e12.range = new F(n11.lineNumber, n11.column, n11.lineNumber, n11.column)), e12;
        });
      }
    });
  }
  function K7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentSymbolProvider.register(e10, t10);
  }
  function q7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentHighlightProvider.register(e10, t10);
  }
  function J7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.linkedEditingRangeProvider.register(e10, t10);
  }
  function Y7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.definitionProvider.register(e10, t10);
  }
  function X7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.implementationProvider.register(e10, t10);
  }
  function Z7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.typeDefinitionProvider.register(e10, t10);
  }
  function Q7(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.codeLensProvider.register(e10, t10);
  }
  function $7(e10, t10, n10) {
    let r10 = Q.get(Ob);
    return r10.codeActionProvider.register(e10, {
      providedCodeActionKinds: n10 == null ? void 0 : n10.providedCodeActionKinds,
      documentation: n10 == null ? void 0 : n10.documentation,
      provideCodeActions: (e11, n11, r11, i10) => {
        let a10 = Q.get(rL), o10 = a10.read({
          resource: e11.uri
        }).filter((e12) => F.areIntersectingOrTouching(e12, n11));
        return t10.provideCodeActions(e11, n11, {
          markers: o10,
          only: r11.only,
          trigger: r11.trigger
        }, i10);
      },
      resolveCodeAction: t10.resolveCodeAction
    });
  }
  function e9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentFormattingEditProvider.register(e10, t10);
  }
  function t9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentRangeFormattingEditProvider.register(e10, t10);
  }
  function n9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.onTypeFormattingEditProvider.register(e10, t10);
  }
  function r9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.linkProvider.register(e10, t10);
  }
  function i9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.completionProvider.register(e10, t10);
  }
  function a9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.colorProvider.register(e10, t10);
  }
  function o9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.foldingRangeProvider.register(e10, t10);
  }
  function s9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.declarationProvider.register(e10, t10);
  }
  function c9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.selectionRangeProvider.register(e10, t10);
  }
  function l9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentSemanticTokensProvider.register(e10, t10);
  }
  function u9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.documentRangeSemanticTokensProvider.register(e10, t10);
  }
  function d9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.inlineCompletionsProvider.register(e10, t10);
  }
  function f9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.inlineEditProvider.register(e10, t10);
  }
  function p9(e10, t10) {
    let n10 = Q.get(Ob);
    return n10.inlayHintsProvider.register(e10, t10);
  }
  function m9() {
    return {
      register: T7,
      getLanguages: E7,
      onLanguage: O7,
      onLanguageEncountered: k7,
      getEncodedLanguageId: D7,
      setLanguageConfiguration: A7,
      setColorMap: I7,
      registerTokensProviderFactory: R7,
      setTokensProvider: z7,
      setMonarchTokensProvider: B7,
      registerReferenceProvider: V7,
      registerRenameProvider: H7,
      registerNewSymbolNameProvider: U7,
      registerCompletionItemProvider: i9,
      registerSignatureHelpProvider: W7,
      registerHoverProvider: G7,
      registerDocumentSymbolProvider: K7,
      registerDocumentHighlightProvider: q7,
      registerLinkedEditingRangeProvider: J7,
      registerDefinitionProvider: Y7,
      registerImplementationProvider: X7,
      registerTypeDefinitionProvider: Z7,
      registerCodeLensProvider: Q7,
      registerCodeActionProvider: $7,
      registerDocumentFormattingEditProvider: e9,
      registerDocumentRangeFormattingEditProvider: t9,
      registerOnTypeFormattingEditProvider: n9,
      registerLinkProvider: r9,
      registerColorProvider: a9,
      registerFoldingRangeProvider: o9,
      registerDeclarationProvider: s9,
      registerSelectionRangeProvider: c9,
      registerDocumentSemanticTokensProvider: l9,
      registerDocumentRangeSemanticTokensProvider: u9,
      registerInlineCompletionsProvider: d9,
      registerInlineEditProvider: f9,
      registerInlayHintsProvider: p9,
      DocumentHighlightKind: vo,
      CompletionItemKind: fo,
      CompletionItemTag: po,
      CompletionItemInsertTextRule: uo,
      SymbolKind: Yo,
      SymbolTag: Xo,
      IndentAction: To,
      CompletionTriggerKind: mo,
      SignatureHelpTriggerKind: Jo,
      InlayHintKind: Do,
      InlineCompletionTriggerKind: Oo,
      InlineEditTriggerKind: ko,
      CodeActionTriggerType: lo,
      NewSymbolNameTag: Io,
      NewSymbolNameTriggerKind: Lo,
      PartialAcceptTriggerKind: Bo,
      HoverVerbosityAction: wo,
      FoldingRangeKind: $a,
      SelectedSuggestionInfo: Ga
    };
  }
  const h9 = Xf(`IEditorCancelService`), g9 = new U(`cancellableOperation`, false, T(`cancellableOperation`, `Whether the editor runs a cancellable operation, e.g. like 'Peek References'`));
  bg(h9, class {
    constructor() {
      this._tokens = /* @__PURE__ */ new WeakMap();
    }
    add(e10, t10) {
      let n10 = this._tokens.get(e10);
      n10 || (n10 = e10.invokeWithinContext((e11) => {
        let t11 = g9.bindTo(e11.get(qp)), n11 = new Rt();
        return {
          key: t11,
          tokens: n11
        };
      }), this._tokens.set(e10, n10));
      let r10;
      return n10.key.set(true), r10 = n10.tokens.push(t10), () => {
        r10 && (r10(), n10.key.set(!n10.tokens.isEmpty()), r10 = void 0);
      };
    }
    cancel(e10) {
      let t10 = this._tokens.get(e10);
      if (!t10) return;
      let n10 = t10.tokens.pop();
      n10 && (n10.cancel(), t10.key.set(!t10.tokens.isEmpty()));
    }
  }, 1);
  var _9 = class extends gi {
    constructor(e10, t10) {
      super(t10), this.editor = e10, this._unregister = e10.invokeWithinContext((t11) => t11.get(h9).add(e10, this));
    }
    dispose() {
      this._unregister(), super.dispose();
    }
  };
  W(new class extends Pm {
    constructor() {
      super({
        id: `editor.cancelOperation`,
        kbOpts: {
          weight: 100,
          primary: 9
        },
        precondition: g9
      });
    }
    runEditorCommand(e10, t10) {
      e10.get(h9).cancel(t10);
    }
  }());
  v9 = class e10 {
    constructor(e11, t10) {
      if (this.flags = t10, this.flags & 1) {
        let t11 = e11.getModel();
        this.modelVersionId = t11 ? ps(`{0}#{1}`, t11.uri.toString(), t11.getVersionId()) : null;
      } else this.modelVersionId = null;
      this.flags & 4 ? this.position = e11.getPosition() : this.position = null, this.flags & 2 ? this.selection = e11.getSelection() : this.selection = null, this.flags & 8 ? (this.scrollLeft = e11.getScrollLeft(), this.scrollTop = e11.getScrollTop()) : (this.scrollLeft = -1, this.scrollTop = -1);
    }
    _equals(t10) {
      if (!(t10 instanceof e10)) return false;
      let n10 = t10;
      return !(this.modelVersionId !== n10.modelVersionId || this.scrollLeft !== n10.scrollLeft || this.scrollTop !== n10.scrollTop || !this.position && n10.position || this.position && !n10.position || this.position && n10.position && !this.position.equals(n10.position) || !this.selection && n10.selection || this.selection && !n10.selection || this.selection && n10.selection && !this.selection.equalsRange(n10.selection));
    }
    validate(t10) {
      return this._equals(new e10(t10, this.flags));
    }
  };
  y9 = class extends _9 {
    constructor(e10, t10, n10, r10) {
      super(e10, r10), this._listener = new A(), t10 & 4 && this._listener.add(e10.onDidChangeCursorPosition((e11) => {
        (!n10 || !F.containsPosition(n10, e11.position)) && this.cancel();
      })), t10 & 2 && this._listener.add(e10.onDidChangeCursorSelection((e11) => {
        (!n10 || !F.containsRange(n10, e11.selection)) && this.cancel();
      })), t10 & 8 && this._listener.add(e10.onDidScrollChange((e11) => this.cancel())), t10 & 1 && (this._listener.add(e10.onDidChangeModel((e11) => this.cancel())), this._listener.add(e10.onDidChangeModelContent((e11) => this.cancel())));
    }
    dispose() {
      this._listener.dispose(), super.dispose();
    }
  };
  b9 = class extends gi {
    constructor(e10, t10) {
      super(t10), this._listener = e10.onDidChangeContent(() => this.cancel());
    }
    dispose() {
      this._listener.dispose(), super.dispose();
    }
  };
  x9 = function(e10) {
    return e10 && typeof e10.getEditorType == `function` ? e10.getEditorType() === oX.ICodeEditor : false;
  };
  S9 = function(e10) {
    return e10 && typeof e10.getEditorType == `function` ? e10.getEditorType() === oX.IDiffEditor : false;
  };
  function C9(e10) {
    return !!e10 && typeof e10 == `object` && typeof e10.onDidChangeActiveEditor == `function`;
  }
  w9 = function(e10) {
    return x9(e10) ? e10 : S9(e10) ? e10.getModifiedEditor() : C9(e10) && x9(e10.activeCodeEditor) ? e10.activeCodeEditor : null;
  };
  let E9, D9;
  T9 = class e10 {
    static _handleEolEdits(e11, t10) {
      let n10, r10 = [];
      for (let e12 of t10) typeof e12.eol == `number` && (n10 = e12.eol), e12.range && typeof e12.text == `string` && r10.push(e12);
      return typeof n10 == `number` && e11.hasModel() && e11.getModel().pushEOL(n10), r10;
    }
    static _isFullModelReplaceEdit(e11, t10) {
      if (!e11.hasModel()) return false;
      let n10 = e11.getModel(), r10 = n10.validateRange(t10.range), i10 = n10.getFullModelRange();
      return i10.equalsRange(r10);
    }
    static execute(t10, n10, r10) {
      r10 && t10.pushUndoStop();
      let i10 = j3.capture(t10), a10 = e10._handleEolEdits(t10, n10);
      a10.length === 1 && e10._isFullModelReplaceEdit(t10, a10[0]) ? t10.executeEdits(`formatEditsCommand`, a10.map((e11) => Nj.replace(F.lift(e11.range), e11.text))) : t10.executeEdits(`formatEditsCommand`, a10.map((e11) => Nj.replaceMove(F.lift(e11.range), e11.text))), r10 && t10.pushUndoStop(), i10.restoreRelativeVerticalPositionOfCursor(t10);
    }
  };
  E9 = class {
    constructor(e10) {
      this.value = e10, this._lower = e10.toLowerCase();
    }
    static toKey(e10) {
      return typeof e10 == `string` ? e10.toLowerCase() : e10._lower;
    }
  };
  D9 = class {
    constructor(e10) {
      if (this._set = /* @__PURE__ */ new Set(), e10) for (let t10 of e10) this.add(t10);
    }
    add(e10) {
      this._set.add(E9.toKey(e10));
    }
    has(e10) {
      return this._set.has(E9.toKey(e10));
    }
  };
  function O9(e10, t10, n10) {
    let r10 = [], i10 = new D9(), a10 = e10.ordered(n10);
    for (let e11 of a10) r10.push(e11), e11.extensionId && i10.add(e11.extensionId);
    let o10 = t10.ordered(n10);
    for (let e11 of o10) {
      if (e11.extensionId) {
        if (i10.has(e11.extensionId)) continue;
        i10.add(e11.extensionId);
      }
      r10.push({
        displayName: e11.displayName,
        extensionId: e11.extensionId,
        provideDocumentFormattingEdits(t11, n11, r11) {
          return e11.provideDocumentRangeFormattingEdits(t11, t11.getFullModelRange(), n11, r11);
        }
      });
    }
    return r10;
  }
  var k9 = (_rb = class {
    static setFormatterSelector(t10) {
      let n10 = _rb._selectors.unshift(t10);
      return {
        dispose: n10
      };
    }
    static async select(t10, n10, r10, i10) {
      if (t10.length === 0) return;
      let a10 = It.first(_rb._selectors);
      if (a10) return await a10(t10, n10, r10, i10);
    }
  }, _rb._selectors = new Rt(), _rb);
  A9 = async function(e10, t10, n10, r10, i10, a10, o10) {
    let s10 = e10.get(Jf), { documentRangeFormattingEditProvider: c10 } = e10.get(Ob), l10 = x9(t10) ? t10.getModel() : t10, u10 = c10.ordered(l10), d10 = await k9.select(u10, l10, r10, 2);
    d10 && (i10.report(d10), await s10.invokeFunction(j9, d10, t10, n10, a10, o10));
  };
  async function j9(e10, t10, n10, r10, i10, a10) {
    var _a3, _b3;
    let o10 = e10.get(eL), s10 = e10.get(wm), c10 = e10.get(bY), l10, u10;
    x9(n10) ? (l10 = n10.getModel(), u10 = new y9(n10, 5, void 0, i10)) : (l10 = n10, u10 = new b9(n10, i10));
    let d10 = [], f10 = 0;
    for (let e11 of ie(r10).sort(F.compareRangesUsingStarts)) f10 > 0 && F.areIntersectingOrTouching(d10[f10 - 1], e11) ? d10[f10 - 1] = F.fromPositions(d10[f10 - 1].getStartPosition(), e11.getEndPosition()) : f10 = d10.push(e11);
    let p10 = async (e11) => {
      var _a4, _b4;
      s10.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, (_a4 = t10.extensionId) == null ? void 0 : _a4.value, e11);
      let n11 = await t10.provideDocumentRangeFormattingEdits(l10, e11, l10.getFormattingOptions(), u10.token) || [];
      return s10.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, (_b4 = t10.extensionId) == null ? void 0 : _b4.value, n11), n11;
    }, m10 = (e11, t11) => {
      if (!e11.length || !t11.length) return false;
      let n11 = e11.reduce((e12, t12) => F.plusRange(e12, t12.range), e11[0].range);
      if (!t11.some((e12) => F.intersectRanges(n11, e12.range))) return false;
      for (let n12 of e11) for (let e12 of t11) if (F.intersectRanges(n12.range, e12.range)) return true;
      return false;
    }, h10 = [], g10 = [];
    try {
      if (typeof t10.provideDocumentRangesFormattingEdits == `function`) {
        s10.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, (_a3 = t10.extensionId) == null ? void 0 : _a3.value, d10);
        let e11 = await t10.provideDocumentRangesFormattingEdits(l10, d10, l10.getFormattingOptions(), u10.token) || [];
        s10.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, (_b3 = t10.extensionId) == null ? void 0 : _b3.value, e11), g10.push(e11);
      } else {
        for (let e11 of d10) {
          if (u10.token.isCancellationRequested) return true;
          g10.push(await p10(e11));
        }
        for (let e11 = 0; e11 < d10.length; ++e11) for (let t11 = e11 + 1; t11 < d10.length; ++t11) {
          if (u10.token.isCancellationRequested) return true;
          if (m10(g10[e11], g10[t11])) {
            let n11 = F.plusRange(d10[e11], d10[t11]), r11 = await p10(n11);
            d10.splice(t11, 1), d10.splice(e11, 1), d10.push(n11), g10.splice(t11, 1), g10.splice(e11, 1), g10.push(r11), e11 = 0, t11 = 0;
          }
        }
      }
      for (let e11 of g10) {
        if (u10.token.isCancellationRequested) return true;
        let t11 = await o10.computeMoreMinimalEdits(l10.uri, e11);
        t11 && h10.push(...t11);
      }
    } finally {
      u10.dispose();
    }
    if (h10.length === 0) return false;
    if (x9(n10)) T9.execute(n10, h10, true), n10.revealPositionInCenterIfOutsideViewport(n10.getPosition(), 1);
    else {
      let [{ range: e11 }] = h10, t11 = new Ma(e11.startLineNumber, e11.startColumn, e11.endLineNumber, e11.endColumn);
      l10.pushEditOperations([
        t11
      ], h10.map((e12) => ({
        text: e12.text,
        range: F.lift(e12.range),
        forceMoveMarkers: true
      })), (e12) => {
        for (let { range: n11 } of e12) if (F.areIntersectingOrTouching(n11, t11)) return [
          new Ma(n11.startLineNumber, n11.startColumn, n11.endLineNumber, n11.endColumn)
        ];
        return null;
      });
    }
    return c10.playSignal(CY.format, {
      userGesture: a10
    }), true;
  }
  M9 = async function(e10, t10, n10, r10, i10, a10) {
    let o10 = e10.get(Jf), s10 = e10.get(Ob), c10 = x9(t10) ? t10.getModel() : t10, l10 = O9(s10.documentFormattingEditProvider, s10.documentRangeFormattingEditProvider, c10), u10 = await k9.select(l10, c10, n10, 1);
    u10 && (r10.report(u10), await o10.invokeFunction(N9, u10, t10, n10, i10, a10));
  };
  async function N9(e10, t10, n10, r10, i10, a10) {
    let o10 = e10.get(eL), s10 = e10.get(bY), c10, l10;
    x9(n10) ? (c10 = n10.getModel(), l10 = new y9(n10, 5, void 0, i10)) : (c10 = n10, l10 = new b9(n10, i10));
    let u10;
    try {
      let e11 = await t10.provideDocumentFormattingEdits(c10, c10.getFormattingOptions(), l10.token);
      if (u10 = await o10.computeMoreMinimalEdits(c10.uri, e11), l10.token.isCancellationRequested) return true;
    } finally {
      l10.dispose();
    }
    if (!u10 || u10.length === 0) return false;
    if (x9(n10)) T9.execute(n10, u10, r10 !== 2), r10 !== 2 && n10.revealPositionInCenterIfOutsideViewport(n10.getPosition(), 1);
    else {
      let [{ range: e11 }] = u10, t11 = new Ma(e11.startLineNumber, e11.startColumn, e11.endLineNumber, e11.endColumn);
      c10.pushEditOperations([
        t11
      ], u10.map((e12) => ({
        text: e12.text,
        range: F.lift(e12.range),
        forceMoveMarkers: true
      })), (e12) => {
        for (let { range: n11 } of e12) if (F.areIntersectingOrTouching(n11, t11)) return [
          new Ma(n11.startLineNumber, n11.startColumn, n11.endLineNumber, n11.endColumn)
        ];
        return null;
      });
    }
    return s10.playSignal(CY.format, {
      userGesture: a10
    }), true;
  }
  async function P9(e10, t10, n10, r10, i10, a10) {
    let o10 = t10.documentRangeFormattingEditProvider.ordered(n10);
    for (let t11 of o10) {
      let o11 = await Promise.resolve(t11.provideDocumentRangeFormattingEdits(n10, r10, i10, a10)).catch(_r);
      if (x(o11)) return await e10.computeMoreMinimalEdits(n10.uri, o11);
    }
  }
  async function F9(e10, t10, n10, r10, i10) {
    let a10 = O9(t10.documentFormattingEditProvider, t10.documentRangeFormattingEditProvider, n10);
    for (let t11 of a10) {
      let a11 = await Promise.resolve(t11.provideDocumentFormattingEdits(n10, r10, i10)).catch(_r);
      if (x(a11)) return await e10.computeMoreMinimalEdits(n10.uri, a11);
    }
  }
  I9 = function(e10, t10, n10, r10, i10, a10, o10) {
    let s10 = t10.onTypeFormattingEditProvider.ordered(n10);
    return s10.length === 0 || s10[0].autoFormatTriggerCharacters.indexOf(i10) < 0 ? Promise.resolve(void 0) : Promise.resolve(s10[0].provideOnTypeFormattingEdits(n10, r10, i10, a10, o10)).catch(_r).then((t11) => e10.computeMoreMinimalEdits(n10.uri, t11));
  };
  lp.registerCommand(`_executeFormatRangeProvider`, async function(e10, ...t10) {
    let [n10, r10, i10] = t10;
    Ee(xa.isUri(n10)), Ee(F.isIRange(r10));
    let a10 = e10.get($f), o10 = e10.get(eL), s10 = e10.get(Ob), c10 = await a10.createModelReference(n10);
    try {
      return P9(o10, s10, c10.object.textEditorModel, F.lift(r10), i10, mi.None);
    } finally {
      c10.dispose();
    }
  }), lp.registerCommand(`_executeFormatDocumentProvider`, async function(e10, ...t10) {
    let [n10, r10] = t10;
    Ee(xa.isUri(n10));
    let i10 = e10.get($f), a10 = e10.get(eL), o10 = e10.get(Ob), s10 = await i10.createModelReference(n10);
    try {
      return F9(a10, o10, s10.object.textEditorModel, r10, mi.None);
    } finally {
      s10.dispose();
    }
  }), lp.registerCommand(`_executeFormatOnTypeProvider`, async function(e10, ...t10) {
    let [n10, r10, i10, a10] = t10;
    Ee(xa.isUri(n10)), Ee(P.isIPosition(r10)), Ee(typeof i10 == `string`);
    let o10 = e10.get($f), s10 = e10.get(eL), c10 = e10.get(Ob), l10 = await o10.createModelReference(n10);
    try {
      return I9(s10, c10, l10.object.textEditorModel, P.lift(r10), i10, a10, mi.None);
    } finally {
      l10.dispose();
    }
  });
  L9 = {};
  e(L9, {
    CancellationTokenSource: () => z9,
    Emitter: () => B9,
    KeyCode: () => V9,
    KeyMod: () => H9,
    MarkerSeverity: () => q9,
    MarkerTag: () => J9,
    Position: () => U9,
    Range: () => W9,
    Selection: () => G9,
    SelectionDirection: () => K9,
    Token: () => X9,
    Uri: () => Y9,
    editor: () => Z9,
    languages: () => Q9
  }), pr.wrappingIndent.defaultValue = 0, pr.glyphMargin.defaultValue = false, pr.autoIndent.defaultValue = 3, pr.overviewRulerLanes.defaultValue = 2, k9.setFormatterSelector((e10, t10, n10) => Promise.resolve(e10[0]));
  const R9 = ns();
  R9.editor = p7(), R9.languages = m9();
  let $9;
  z9 = R9.CancellationTokenSource;
  B9 = R9.Emitter;
  V9 = R9.KeyCode;
  H9 = R9.KeyMod;
  U9 = R9.Position;
  W9 = R9.Range;
  G9 = R9.Selection;
  K9 = R9.SelectionDirection;
  q9 = R9.MarkerSeverity;
  J9 = R9.MarkerTag;
  Y9 = R9.Uri;
  X9 = R9.Token;
  Z9 = R9.editor;
  Q9 = R9.languages;
  $9 = globalThis.MonacoEnvironment;
  (($9 == null ? void 0 : $9.globalAPI) || typeof define == `function` && define.amd) && (globalThis.monaco = R9), globalThis.require !== void 0 && typeof globalThis.require.config == `function` && globalThis.require.config({
    ignoreDuplicateModules: [
      `vscode-languageserver-types`,
      `vscode-languageserver-types/main`,
      `vscode-languageserver-textdocument`,
      `vscode-languageserver-textdocument/main`,
      `vscode-nls`,
      `vscode-nls/vscode-nls`,
      `jsonc-parser`,
      `jsonc-parser/main`,
      `vscode-uri`,
      `vscode-uri/index`,
      `vs/basic-languages/typescript/typescript`
    ]
  });
})();
export {
  H as $,
  CY as AccessibilitySignal,
  ep as Action,
  xm as Action2,
  jI as ActionBar,
  WF as ActionViewItem,
  hl as AsyncIterableObject,
  Dr as BugIndicatingError,
  gU as Button,
  BA as CONTEXT_ACCESSIBILITY_MODE_ENABLED,
  xr as CancellationError,
  mi as CancellationToken,
  z9 as CancellationTokenSource,
  gi as CancellationTokenSource$1,
  DU as CaseSensitiveToggle,
  D_ as CharacterSet,
  gD as ClickAction,
  JQ as ClipboardEventUtils,
  g3 as CodeEditorWidget,
  L as Codicon,
  K as Color,
  no as Command,
  lp as CommandsRegistry,
  Ua as CompletionItemKinds,
  Mp as ContextKeyEqualsExpr,
  Ep as ContextKeyExpr,
  WQ as CopyOptions,
  P1 as CoreEditingCommands,
  _U as CountBadge,
  gR as CursorColumns,
  j$ as CursorMoveCommands,
  p$ as CursorState,
  A0 as DEFAULT_FONT_FAMILY,
  OP as DataTransfers,
  _k as DataUri,
  pl as DeferredPromise,
  tl as Delayer,
  KR as DenseKeyProvider,
  c5 as DiffEditorWidget,
  pd as Dimension,
  j as Disposable,
  W3 as DisposableCancellationTokenSource,
  A as DisposableStore,
  Ja as DocumentHighlightKind,
  Ka as DocumentPasteTriggerKind,
  bD as DomEmitter,
  uD as DomScrollableElement,
  qZ as DynamicCssRules,
  dr as EDITOR_FONT_DEFAULTS,
  Nj as EditOperation,
  Fm as EditorAction,
  Lm as EditorAction2,
  Pm as EditorCommand,
  $ as EditorContextKeys,
  Um as EditorExtensionsRegistry,
  yn as EditorFontLigatures,
  pr as EditorOptions,
  v9 as EditorState,
  y9 as EditorStateCancellationTokenSource,
  Rf as EditorZoom,
  B9 as Emitter,
  N as Emitter$1,
  o1 as EnterOperation,
  M as Event,
  Zd as EventHelper,
  IE as EventType,
  B as EventType$1,
  MH as Extensions,
  Dg as Extensions$1,
  IU as FindInput,
  $a as FoldingRangeKind,
  T9 as FormattingEdit,
  LO as FuzzyScore,
  RO as FuzzyScoreOptions,
  LE as Gesture,
  NE as GlobalPointerMoveMonitor,
  Q_ as GlyphMarginLane,
  kM as GoToLineNLS,
  hJ as HC_BLACK_THEME_NAME,
  gJ as HC_LIGHT_THEME_NAME,
  Qy as HSVA,
  L8 as HideUnchangedRegionsFeature,
  BK as HighlightedLabel,
  PU as HistoryInputBox,
  mD as HoverAction,
  Ha as HoverVerbosityAction,
  pD as HoverWidget,
  zA as IAccessibilityService,
  bY as IAccessibilitySignalService,
  bj as IBulkEditService,
  WJ as IClipboardService,
  Zf as ICodeEditorService,
  cp as ICommandService,
  ug as IConfigurationService,
  qp as IContextKeyService,
  jE as IContextMenuService,
  AE as IContextViewService,
  cx as IDialogService,
  k6 as IDiffProviderFactoryService,
  uM as IEditorProgressService,
  eL as IEditorWorkerService,
  Nx as IEnvironmentService,
  OE as IHoverService,
  Jf as IInstantiationService,
  ME as IKeybindingService,
  sM as ILabelService,
  i_ as ILanguageConfigurationService,
  Ix as ILanguageFeatureDebounceService,
  Ob as ILanguageFeaturesService,
  _g as ILanguageService,
  IG as IListService,
  wm as ILogService,
  nL as IMarkerData,
  hR as IMarkerDecorationsService,
  rL as IMarkerService,
  gm as IMenuService,
  Qf as IModelService,
  ux as INotificationService,
  vD as IOpenerService,
  cM as IProgressService,
  BH as IQuickInputService,
  $x as ISemanticTokensStylingService,
  wJ as IStandaloneThemeService,
  nI as IStorageService,
  Cm as ITelemetryService,
  $f as ITextModelService,
  Eb as ITextResourceConfigurationService,
  Vb as IThemeService,
  _M as IWorkspaceContextService,
  IM as IWorkspaceTrustManagementService,
  HK as IconLabel,
  Dk as IdGenerator,
  GQ as InMemoryClipboardMetadataManager,
  bh as IndentAction,
  $_ as InjectedTextCursorStops,
  ro as InlayHintKind,
  Wa as InlineCompletionTriggerKind,
  so as InlineEditTriggerKind,
  NG as InputFocusedContext,
  OM as InspectTokensNLS,
  _c as InvisibleCharacters,
  jG as IsWebContext,
  AG as IsWindowsContext,
  IH as ItemActivation,
  It as Iterable,
  Ai as KeyChord,
  V9 as KeyCode,
  Nc as KeyCodeChord,
  _D as KeyDownAction,
  H9 as KeyMod,
  JK as KeybindingLabel,
  sm as KeybindingsRegistry,
  G_ as LRUCache,
  dz as LanguageAgnosticBracketTokens,
  us as Lazy,
  C_ as LcsDiff,
  sX as LineDecoration,
  G as LineRange,
  CA as LineTokens,
  Rt as LinkedList,
  IF as List,
  IA as MarkdownRenderer,
  vk as MarkdownString,
  q9 as MarkerSeverity,
  tL as MarkerSeverity$1,
  J9 as MarkerTag,
  TI as MenuEntryActionViewItem,
  hm as MenuId,
  bm as MenuItemAction,
  vm as MenuRegistry,
  Sg as Mimes,
  gH as ModelDecorationInjectedTextOptions,
  _H as ModelDecorationOptions,
  xf as ModifierKeyEmitter,
  E$ as MoveOperations,
  Mm as MultiCommand,
  Im as MultiEditorAction,
  Br as MutableDisposable,
  eo as NewSymbolNameTag,
  to as NewSymbolNameTriggerKind,
  EA as NullState,
  Et as OS,
  bP as ObservablePromise,
  GU as OrthogonalEdge,
  Z_ as OverviewRulerLane,
  Jg as PLAINTEXT_LANGUAGE_ID,
  si as PauseableEmitter,
  ge as Permutation,
  Af as PixelRatio,
  U9 as Position,
  P as Position$1,
  N$ as ProcessedIndentRulesSupport,
  lM as Progress,
  jM as QuickCommandNLS,
  AM as QuickHelpNLS,
  MM as QuickOutlineNLS,
  Xy as RGBA,
  W9 as Range,
  F as Range$1,
  U as RawContextKey,
  Vr as RefCountedDisposable,
  kU as RegexToggle,
  am as Registry,
  pX as RenderLineInput,
  b$ as ReplaceCommand,
  w$ as ReplaceCommandThatPreservesSelection,
  x$ as ReplaceCommandThatSelectsText,
  H_ as ResourceMap,
  Sj as ResourceTextEdit,
  cl as RunOnceScheduler,
  eW as Sash,
  Su as Schemas,
  cD as ScrollableElement,
  cv as SearchParams,
  Ga as SelectedSuggestionInfo,
  G9 as Selection,
  Ma as Selection$1,
  K9 as SelectionDirection,
  np as Separator,
  q_ as SetMap,
  lx as Severity,
  U$ as ShiftCommand,
  On as ShowLightbulbIconMode,
  qa as SignatureHelpTriggerKind,
  Vv as SingleTextEdit,
  oW as Sizing,
  sW as SplitView,
  j3 as StableEditorScrollState,
  Hc as StandardKeyboardEvent,
  Kc as StandardMouseEvent,
  Gr as StopWatch,
  Gh as StringBuilder,
  rp as SubmenuAction,
  ym as SubmenuItemAction,
  Qa as SymbolKinds,
  EZ as TabFocus,
  gM as TernarySearchTree,
  oz as TextBufferTokenizer,
  Bv as TextEdit,
  Rv as TextLength,
  aH as TextModel,
  b9 as TextModelCancellationTokenSource,
  EI as TextOnlyMenuEntryActionViewItem,
  sp as ThemeIcon,
  ol as TimeoutTimer,
  WH as Toggle,
  PM as ToggleHighContrastNLS,
  X9 as Token,
  Vx as TokenMetadata,
  ao as TokenizationRegistry,
  C1 as TypeOperations,
  xa as URI,
  zt as USUAL_WORD_SEPARATORS,
  _v as UnicodeTextModelHighlighter,
  Y9 as Uri,
  Ah as VSBuffer,
  mJ as VS_DARK_THEME_NAME,
  pJ as VS_LIGHT_THEME_NAME,
  TM as WORKSPACE_EXTENSION,
  OU as WholeWordsToggle,
  RE as Widget,
  rI as WillSaveStateReason,
  ad as WindowIdleValue,
  O$ as WordOperations,
  k$ as WordPartOperations,
  NK as WorkbenchAsyncDataTree,
  kE as WorkbenchHoverDelegate,
  HG as WorkbenchListFocusContextKey,
  x8 as WorkbenchToolBar,
  JG as WorkbenchTreeElementCanCollapse,
  XG as WorkbenchTreeElementCanExpand,
  __tla,
  vC as activeContrastBorder,
  z as addDisposableListener,
  nd as addStandardDisposableGenericMouseDownListener,
  td as addStandardDisposableListener,
  JA as alert,
  bO as anyScore,
  V as append,
  P3 as appendRemoveOnDispose,
  Pf as applyFontInfo,
  H3 as applyStyle,
  ie as asArray,
  q as asCssVariable,
  De as assertIsDefined,
  em as assertNever,
  Ee as assertType,
  RN as asyncTransaction,
  QN as autorun,
  $N as autorunOpts,
  nP as autorunWithStore,
  ck as basename,
  la as basename$1,
  sk as basenameOrAuthority,
  d as binarySearch,
  J8 as bindContextKey,
  _i as cancelOnDispose,
  Ax as clamp,
  Zu as clearNode,
  v as coalesce,
  zr as combinedDisposable,
  Rs as commonPrefixLength,
  zs as commonSuffixLength,
  ks as compare,
  le as compareBy,
  js as compareIgnoreCase,
  Zz as computeIndentLevel,
  iP as constObservable,
  Qs as containsRTL,
  sc as containsUppercaseCharacter,
  _C as contrastBorder,
  Hx as countEOL,
  AI as createActionViewItem,
  CI as createAndFillInActionBarActions,
  Hd as createCSSRule,
  _l as createCancelableAsyncIterable,
  Xc as createCancelablePromise,
  Xf as createDecorator,
  FP as createInstantHoverDelegate,
  xO as createMatches,
  Or as createSingleCallFunction,
  Pd as createStyleSheet2,
  lh as createTrustedTypesPolicy,
  je as deepClone,
  hI as defaultCountBadgeStyles,
  Ok as defaultGenerator,
  pI as defaultInputBoxStyles,
  gI as defaultListStyles,
  dI as defaultToggleStyles,
  Y as derived,
  YN as derivedDisposable,
  qN as derivedHandleChanges,
  gP as derivedObservableWithCache,
  KN as derivedOpts,
  GN as derivedWithSetter,
  JN as derivedWithStore,
  b6 as diffAddDecoration,
  S6 as diffAddDecorationEmpty,
  C6 as diffDeleteDecoration,
  T6 as diffDeleteDecorationEmpty,
  g6 as diffLineAddDecorationBackgroundWithIndicator,
  _6 as diffLineDeleteDecorationBackgroundWithIndicator,
  x6 as diffWholeLineAddDecoration,
  w6 as diffWholeLineDeleteDecoration,
  uk as dirname,
  ca as dirname$1,
  UN as disposableObservableValue,
  il as disposableTimeout,
  Rr as dispose,
  S as distinct,
  Z9 as editor,
  BC as editorActiveLinkForeground,
  DC as editorBackground,
  Tj as editorConfigurationBaseNode,
  NC as editorErrorBorder,
  MC as editorErrorForeground,
  KC as editorFindMatchForeground,
  qC as editorFindMatchHighlight,
  YC as editorFindMatchHighlightBorder,
  JC as editorFindMatchHighlightForeground,
  XC as editorFindRangeHighlightBorder,
  OC as editorForeground,
  ZC as editorHoverBackground,
  QC as editorHoverBorder,
  RC as editorInfoBorder,
  LC as editorInfoForeground,
  tw as editorInlayHintBackground,
  ew as editorInlayHintForeground,
  aw as editorInlayHintParameterBackground,
  iw as editorInlayHintParameterForeground,
  rw as editorInlayHintTypeBackground,
  nw as editorInlayHintTypeForeground,
  VC as editorSelectionBackground,
  WC as editorSelectionHighlight,
  IC as editorWarningBorder,
  FC as editorWarningForeground,
  kC as editorWidgetBackground,
  jC as editorWidgetBorder,
  L9 as editor_api_exports,
  l as equals,
  tN as equalsIfDefined,
  gs as escapeRegExpCharacters,
  ak as extUri,
  lk as extname,
  Av as findFirstIdxMonotonousOrArrLen,
  Mv as findFirstMax,
  Tv as findLast,
  al as first,
  Es as firstNonWhitespaceIndex,
  dC as foreground,
  ps as format,
  A9 as formatDocumentRangesWithSelectedProvider,
  M9 as formatDocumentWithSelectedProvider,
  zO as fuzzyScore,
  HO as fuzzyScoreGracefulAggressive,
  jd as getActiveDocument,
  Od as getActiveElement,
  Za as getAriaLabelForSymbol,
  RP as getBaseLayerHoverDelegate,
  dd as getClientArea,
  w9 as getCodeEditor,
  _Q as getColumnOfNodeOffset,
  ud as getComputedStyle,
  PP as getDefaultHoverDelegate,
  gd as getDomNodePagePosition,
  L$ as getEnterAction,
  J$ as getGoodIndentForLine,
  hD as getHoverAccessibleViewHint,
  Z$ as getIndentMetadata,
  Ds as getLeadingWhitespace,
  _I as getListStyles,
  X_ as getMapForWordSeparators,
  I9 as getOnTypeFormattingEdits,
  Dd as getShadowRoot,
  TA as getStandardTokenTypeAtPosition,
  md as getTopLeftOffset,
  xd as getTotalHeight,
  vd as getTotalWidth,
  R as getWindow,
  RL as ghostTextForeground,
  m as groupBy,
  wf as h$1,
  lS as hasDriveLetter,
  Mu as hash,
  ff as hide$1,
  hC as iconForeground,
  Cr as illegalArgument,
  qn as inUntrustedWorkspace,
  tT as inputActiveOptionBackground,
  $w as inputActiveOptionBorder,
  nT as inputActiveOptionForeground,
  Xw as inputBackground,
  Qw as inputBorder,
  Zw as inputForeground,
  kd as isActiveElement,
  Sd as isAncestor,
  ec as isBasicASCII,
  br as isCancellationError,
  x9 as isCodeEditor,
  Bb as isDark,
  we as isDefined,
  S9 as isDiffEditor,
  Lr as isDisposable,
  yk as isEmptyMarkdownString,
  yM as isEmptyWorkspaceIdentifier,
  ok as isEqual$1,
  b as isFalsyOrEmpty,
  ds as isFalsyOrWhitespace,
  Sc as isFirefox,
  Oe as isFunction$1,
  Gd as isHTMLElement,
  zb as isHighContrast,
  Bs as isHighSurrogate,
  M6 as isHotReloadEnabled,
  pm as isIMenuItem,
  bt as isIOS,
  ht as isLinux,
  kt as isLittleEndian,
  YF as isLocalizedString,
  Ya as isLocationLink,
  Vs as isLowSurrogate,
  Ps as isLowerAsciiLetter,
  E as isMacintosh,
  bk as isMarkdownString,
  B4 as isModelDecorationInComment,
  V4 as isModelDecorationInString,
  z4 as isModelDecorationVisible,
  gt as isNative,
  x as isNonEmptyArray,
  be as isNumber,
  ve as isObject$1,
  vM as isSingleFolderWorkspaceIdentifier,
  DM as isStandaloneEditorWorkspace,
  _e as isString$1,
  Ce as isUndefined,
  Fs as isUpperAsciiLetter,
  _t as isWeb,
  mt as isWindows,
  eN as itemEquals,
  $M as itemsEquals,
  dk as joinPath,
  Ct as language,
  Q9 as languages,
  Os as lastNonWhitespaceIndex,
  AR as lengthAdd,
  kR as lengthGetColumnCountIfZeroLineCount,
  CR as lengthZero,
  tE as listFocusHighlightForeground,
  eE as listHighlightForeground,
  T as localize,
  Ke as localize2,
  os as mainWindow,
  Iv as mapFindFirst,
  _P as mapObservableArrayCached,
  GD as matchesContiguousSubString,
  UD as matchesPrefix,
  Cu as matchesScheme,
  wu as matchesSomeScheme,
  KD as matchesSubString,
  fO as matchesWords,
  Hw as minimapFindMatch,
  Uw as minimapSelectionOccurrenceHighlight,
  Ie as mixin,
  hc as noBreakWhitespace,
  vR as normalizeIndentation,
  DA as nullTokenize,
  OA as nullTokenizeEncoded,
  de as numberComparator,
  A8 as observableCodeEditor,
  q8 as observableConfigValue,
  oP as observableFromEvent,
  dP as observableSignal,
  lP as observableSignalFromEvent,
  VN as observableValue,
  gr as onUnexpectedError,
  _r as onUnexpectedExternalError,
  iC as oneOf,
  LA as openLinkFromMarkdown,
  HD as or,
  rk as originalFSPath,
  Lw as overviewRulerFindMatchForeground,
  BL as overviewRulerRangeHighlight,
  Rw as overviewRulerSelectionHighlightForeground,
  xz as parseDocument,
  TE as quickInputListFocusBackground,
  CE as quickInputListFocusForeground,
  wE as quickInputListFocusIconForeground,
  p as quickSelect,
  Zc as raceCancellation,
  M8 as reactToChange,
  N8 as reactToChangeWithStore,
  I6 as readHotReloadableExport,
  mP as recomputeInitiallyAndOnChange,
  Sm as registerAction2,
  J as registerColor,
  zm as registerEditorAction,
  W as registerEditorCommand,
  Hm as registerEditorContribution,
  EY as registerEditorFeature,
  iJ as registerIcon,
  Vm as registerInstantiatedEditorAction,
  Rm as registerModelAndPositionCommand,
  Bm as registerMultiEditorAction,
  bg as registerSingleton,
  qb as registerThemingParticipant,
  pk as relativePath,
  Ud as removeCSSRulesContainingSelector,
  jD as renderIcon,
  AD as renderLabelWithIcons,
  Gk as renderMarkdown,
  _X as renderViewLine,
  af as reset,
  pe as reverseOrder,
  od as runAtThisOrScheduleAtNextAnimationFrame,
  id as runWhenWindowIdle,
  VS as score,
  da as sep,
  uf as setVisibility,
  sx as severity_default,
  ov as shouldSynchronizeModel,
  df as show,
  hd as size$1,
  ws as splitLines,
  Ts as splitLinesIncludeSeparators,
  YA as status,
  QO as stripIcons,
  xs as stripWildcards,
  nN as structuralEquals,
  zN as subtransaction,
  Tf as svgElem,
  Hb as themeColorFromId,
  rl as timeout,
  ap as toAction,
  k as toDisposable,
  Xx as toMultilineTokens2,
  SM as toWorkspaceIdentifier,
  tf as trackFocus,
  FN as transaction,
  rC as transparent,
  _s as trim,
  Jn as unicodeHighlightConfigKeys,
  qK as unthemedKeybindingLabelOptions,
  SP as waitForState,
  xw as widgetBorder,
  uJ as widgetClose,
  bw as widgetShadow
};
