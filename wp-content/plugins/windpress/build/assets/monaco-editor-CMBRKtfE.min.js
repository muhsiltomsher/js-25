const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./editor-VANjXV9n.css"])))=>i.map(i=>d[i]);
import { __export as e } from "./chunk-GxRd6SvM.min.js";
import { __vitePreload as t } from "./preload-helper-DApxheAR.min.js";
import "./dist-DPO5Yrzi.min.js";
import "./runtime-core.esm-bundler-CFIgNHFT.min.js";
import "./dist-BSmntxBi.min.js";
import { loader_default as n } from "./es-DeqYPKA0.min.js";
import "./dist-Doa7WVF-.min.js";
import { $ as r, AccessibilitySignal as i, Action as a, Action2 as o, ActionBar as s, ActionViewItem as c, AsyncIterableObject as l, BugIndicatingError as u, Button as d, CONTEXT_ACCESSIBILITY_MODE_ENABLED as f, CancellationError as p, CancellationToken as m, CancellationTokenSource as h, CancellationTokenSource$1 as g, CaseSensitiveToggle as ee, CharacterSet as te, ClickAction as ne, ClipboardEventUtils as re, CodeEditorWidget as ie, Codicon as _, Color as v, Command as ae, CommandsRegistry as y, CompletionItemKinds as oe, ContextKeyEqualsExpr as se, ContextKeyExpr as b, CopyOptions as ce, CoreEditingCommands as le, CountBadge as ue, CursorColumns as de, CursorMoveCommands as fe, CursorState as pe, DEFAULT_FONT_FAMILY as me, DataTransfers as he, DataUri as ge, DeferredPromise as _e, Delayer as ve, DenseKeyProvider as ye, DiffEditorWidget as be, Dimension as x, Disposable as S, DisposableCancellationTokenSource as xe, DisposableStore as C, DocumentHighlightKind as Se, DocumentPasteTriggerKind as Ce, DomEmitter as we, DomScrollableElement as Te, DynamicCssRules as Ee, EDITOR_FONT_DEFAULTS as De, EditOperation as Oe, EditorAction as w, EditorAction2 as ke, EditorCommand as Ae, EditorContextKeys as T, EditorExtensionsRegistry as je, EditorFontLigatures as Me, EditorOptions as Ne, EditorState as Pe, EditorStateCancellationTokenSource as Fe, EditorZoom as Ie, Emitter as Le, Emitter$1 as E, EnterOperation as Re, Event as ze, EventHelper as Be, EventType as Ve, EventType$1 as He, Extensions as Ue, Extensions$1 as We, FindInput as Ge, FoldingRangeKind as Ke, FormattingEdit as qe, FuzzyScore as Je, FuzzyScoreOptions as Ye, Gesture as Xe, GlobalPointerMoveMonitor as Ze, GlyphMarginLane as Qe, GoToLineNLS as $e, HC_BLACK_THEME_NAME as et, HC_LIGHT_THEME_NAME as tt, HSVA as nt, HideUnchangedRegionsFeature as rt, HighlightedLabel as it, HistoryInputBox as at, HoverAction as ot, HoverVerbosityAction as st, HoverWidget as ct, IAccessibilityService as lt, IAccessibilitySignalService as ut, IBulkEditService as dt, IClipboardService as ft, ICodeEditorService as pt, ICommandService as mt, IConfigurationService as D, IContextKeyService as O, IContextMenuService as ht, IContextViewService as gt, IDialogService as _t, IDiffProviderFactoryService as vt, IEditorProgressService as yt, IEditorWorkerService as bt, IEnvironmentService as xt, IHoverService as St, IInstantiationService as k, IKeybindingService as Ct, ILabelService as wt, ILanguageConfigurationService as Tt, ILanguageFeatureDebounceService as Et, ILanguageFeaturesService as A, ILanguageService as Dt, IListService as Ot, ILogService as kt, IMarkerData as At, IMarkerDecorationsService as jt, IMarkerService as Mt, IMenuService as Nt, IModelService as Pt, INotificationService as Ft, IOpenerService as It, IProgressService as Lt, IQuickInputService as Rt, ISemanticTokensStylingService as zt, IStandaloneThemeService as Bt, IStorageService as Vt, ITelemetryService as Ht, ITextModelService as Ut, ITextResourceConfigurationService as Wt, IThemeService as Gt, IWorkspaceContextService as Kt, IWorkspaceTrustManagementService as qt, IconLabel as Jt, IdGenerator as Yt, InMemoryClipboardMetadataManager as Xt, IndentAction as Zt, InjectedTextCursorStops as Qt, InlayHintKind as $t, InlineCompletionTriggerKind as en, InlineEditTriggerKind as tn, InputFocusedContext as nn, InspectTokensNLS as rn, InvisibleCharacters as an, IsWebContext as on, IsWindowsContext as sn, ItemActivation as cn, Iterable as ln, KeyChord as un, KeyCode as dn, KeyCodeChord as fn, KeyDownAction as pn, KeyMod as mn, KeybindingLabel as hn, KeybindingsRegistry as gn, LRUCache as _n, LanguageAgnosticBracketTokens as vn, Lazy as yn, LcsDiff as bn, LineDecoration as xn, LineRange as Sn, LineTokens as Cn, LinkedList as wn, List as Tn, MarkdownRenderer as En, MarkdownString as Dn, MarkerSeverity as On, MarkerSeverity$1 as kn, MarkerTag as An, MenuEntryActionViewItem as jn, MenuId as j, MenuItemAction as Mn, MenuRegistry as Nn, Mimes as Pn, ModelDecorationInjectedTextOptions as Fn, ModelDecorationOptions as M, ModifierKeyEmitter as In, MoveOperations as Ln, MultiCommand as Rn, MultiEditorAction as zn, MutableDisposable as Bn, NewSymbolNameTag as Vn, NewSymbolNameTriggerKind as Hn, NullState as Un, OS as Wn, ObservablePromise as Gn, OrthogonalEdge as Kn, OverviewRulerLane as qn, PLAINTEXT_LANGUAGE_ID as Jn, PauseableEmitter as Yn, Permutation as Xn, PixelRatio as Zn, Position as Qn, Position$1 as N, ProcessedIndentRulesSupport as $n, Progress as er, QuickCommandNLS as tr, QuickHelpNLS as nr, QuickOutlineNLS as rr, RGBA as ir, Range as ar, Range$1 as P, RawContextKey as F, RefCountedDisposable as or, RegexToggle as sr, Registry as cr, RenderLineInput as lr, ReplaceCommand as ur, ReplaceCommandThatPreservesSelection as dr, ReplaceCommandThatSelectsText as fr, ResourceMap as pr, ResourceTextEdit as mr, RunOnceScheduler as hr, Sash as gr, Schemas as _r, ScrollableElement as vr, SearchParams as yr, SelectedSuggestionInfo as br, Selection as xr, Selection$1 as I, SelectionDirection as Sr, Separator as Cr, SetMap as wr, Severity as Tr, ShiftCommand as Er, ShowLightbulbIconMode as Dr, SignatureHelpTriggerKind as Or, SingleTextEdit as kr, Sizing as Ar, SplitView as jr, StableEditorScrollState as Mr, StandardKeyboardEvent as Nr, StandardMouseEvent as Pr, StopWatch as Fr, StringBuilder as Ir, SubmenuAction as Lr, SubmenuItemAction as Rr, SymbolKinds as zr, TabFocus as Br, TernarySearchTree as Vr, TextBufferTokenizer as Hr, TextEdit as Ur, TextLength as Wr, TextModel as Gr, TextModelCancellationTokenSource as Kr, TextOnlyMenuEntryActionViewItem as qr, ThemeIcon as L, TimeoutTimer as Jr, Toggle as Yr, ToggleHighContrastNLS as Xr, Token as Zr, TokenMetadata as Qr, TokenizationRegistry as $r, TypeOperations as ei, URI as R, USUAL_WORD_SEPARATORS as ti, UnicodeTextModelHighlighter as ni, Uri as ri, VSBuffer as ii, VS_DARK_THEME_NAME as ai, VS_LIGHT_THEME_NAME as oi, WORKSPACE_EXTENSION as si, WholeWordsToggle as ci, Widget as li, WillSaveStateReason as ui, WindowIdleValue as di, WordOperations as fi, WordPartOperations as pi, WorkbenchAsyncDataTree as mi, WorkbenchHoverDelegate as hi, WorkbenchListFocusContextKey as gi, WorkbenchToolBar as _i, WorkbenchTreeElementCanCollapse as vi, WorkbenchTreeElementCanExpand as yi, activeContrastBorder as bi, addDisposableListener as z, addStandardDisposableGenericMouseDownListener as xi, addStandardDisposableListener as Si, alert as Ci, anyScore as wi, append as B, appendRemoveOnDispose as Ti, applyFontInfo as Ei, applyStyle as Di, asArray as Oi, asCssVariable as ki, assertIsDefined as Ai, assertNever as ji, assertType as V, asyncTransaction as Mi, autorun as Ni, autorunOpts as Pi, autorunWithStore as Fi, basename as Ii, basename$1 as Li, basenameOrAuthority as Ri, binarySearch as zi, bindContextKey as Bi, cancelOnDispose as Vi, clamp as Hi, clearNode as Ui, coalesce as Wi, combinedDisposable as Gi, commonPrefixLength as Ki, commonSuffixLength as qi, compare as Ji, compareBy as Yi, compareIgnoreCase as Xi, computeIndentLevel as Zi, constObservable as Qi, containsRTL as $i, containsUppercaseCharacter as ea, contrastBorder as ta, countEOL as na, createActionViewItem as ra, createAndFillInActionBarActions as ia, createCSSRule as aa, createCancelableAsyncIterable as oa, createCancelablePromise as sa, createDecorator as ca, createInstantHoverDelegate as la, createMatches as ua, createSingleCallFunction as da, createStyleSheet2 as fa, createTrustedTypesPolicy as pa, deepClone as ma, defaultCountBadgeStyles as ha, defaultGenerator as ga, defaultInputBoxStyles as _a, defaultListStyles as va, defaultToggleStyles as ya, derived as H, derivedDisposable as ba, derivedHandleChanges as xa, derivedObservableWithCache as Sa, derivedOpts as Ca, derivedWithSetter as wa, derivedWithStore as Ta, diffAddDecoration as Ea, diffAddDecorationEmpty as Da, diffDeleteDecoration as Oa, diffDeleteDecorationEmpty as ka, diffLineAddDecorationBackgroundWithIndicator as Aa, diffLineDeleteDecorationBackgroundWithIndicator as ja, diffWholeLineAddDecoration as Ma, diffWholeLineDeleteDecoration as Na, dirname as Pa, dirname$1 as Fa, disposableObservableValue as Ia, disposableTimeout as La, dispose as Ra, distinct as za, editor as Ba, editorActiveLinkForeground as Va, editorBackground as Ha, editorConfigurationBaseNode as Ua, editorErrorBorder as Wa, editorErrorForeground as Ga, editorFindMatchForeground as Ka, editorFindMatchHighlight as qa, editorFindMatchHighlightBorder as Ja, editorFindMatchHighlightForeground as Ya, editorFindRangeHighlightBorder as Xa, editorForeground as Za, editorHoverBackground as Qa, editorHoverBorder as $a, editorInfoBorder as eo, editorInfoForeground as to, editorInlayHintBackground as no, editorInlayHintForeground as ro, editorInlayHintParameterBackground as io, editorInlayHintParameterForeground as ao, editorInlayHintTypeBackground as oo, editorInlayHintTypeForeground as so, editorSelectionBackground as co, editorSelectionHighlight as lo, editorWarningBorder as uo, editorWarningForeground as fo, editorWidgetBackground as po, editorWidgetBorder as mo, editor_api_exports as ho, equals as go, equalsIfDefined as _o, escapeRegExpCharacters as vo, extUri as yo, extname as bo, findFirstIdxMonotonousOrArrLen as xo, findFirstMax as So, findLast as Co, first as wo, firstNonWhitespaceIndex as To, foreground as Eo, format as Do, formatDocumentRangesWithSelectedProvider as Oo, formatDocumentWithSelectedProvider as ko, fuzzyScore as Ao, fuzzyScoreGracefulAggressive as jo, getActiveDocument as Mo, getActiveElement as No, getAriaLabelForSymbol as Po, getBaseLayerHoverDelegate as Fo, getClientArea as Io, getCodeEditor as Lo, getColumnOfNodeOffset as Ro, getComputedStyle as zo, getDefaultHoverDelegate as Bo, getDomNodePagePosition as Vo, getEnterAction as Ho, getGoodIndentForLine as Uo, getHoverAccessibleViewHint as Wo, getIndentMetadata as Go, getLeadingWhitespace as Ko, getListStyles as qo, getMapForWordSeparators as Jo, getOnTypeFormattingEdits as Yo, getShadowRoot as Xo, getStandardTokenTypeAtPosition as Zo, getTopLeftOffset as Qo, getTotalHeight as $o, getTotalWidth as es, getWindow as ts, ghostTextForeground as ns, groupBy as rs, h$1 as os, hasDriveLetter as ss, hash as cs, hide$1 as ls, iconForeground as us, illegalArgument as ds, inUntrustedWorkspace as fs, inputActiveOptionBackground as ps, inputActiveOptionBorder as ms, inputActiveOptionForeground as hs, inputBackground as gs, inputBorder as _s, inputForeground as vs, isActiveElement as ys, isAncestor as bs, isBasicASCII as xs, isCancellationError as Ss, isCodeEditor as Cs, isDark as ws, isDefined as Ts, isDiffEditor as Es, isDisposable as Ds, isEmptyMarkdownString as Os, isEmptyWorkspaceIdentifier as ks, isEqual$1 as As, isFalsyOrEmpty as js, isFalsyOrWhitespace as Ms, isFirefox as Ns, isFunction$1 as Ps, isHTMLElement as Fs, isHighContrast as Is, isHighSurrogate as Ls, isHotReloadEnabled as Rs, isIMenuItem as zs, isIOS as Bs, isLinux as Vs, isLittleEndian as Hs, isLocalizedString as Us, isLocationLink as Ws, isLowSurrogate as Gs, isLowerAsciiLetter as Ks, isMacintosh as qs, isMarkdownString as Js, isModelDecorationInComment as Ys, isModelDecorationInString as Xs, isModelDecorationVisible as Zs, isNative as Qs, isNonEmptyArray as $s, isNumber as ec, isObject$1 as tc, isSingleFolderWorkspaceIdentifier as nc, isStandaloneEditorWorkspace as rc, isString$1 as ic, isUndefined as ac, isUpperAsciiLetter as oc, isWeb as sc, isWindows as cc, itemEquals as lc, itemsEquals as uc, joinPath as dc, language as fc, languages as pc, lastNonWhitespaceIndex as mc, lengthAdd as hc, lengthGetColumnCountIfZeroLineCount as gc, lengthZero as _c, listFocusHighlightForeground as vc, listHighlightForeground as yc, localize as U, localize2 as W, mainWindow as bc, mapFindFirst as xc, mapObservableArrayCached as Sc, matchesContiguousSubString as Cc, matchesPrefix as wc, matchesScheme as Tc, matchesSomeScheme as Ec, matchesSubString as Dc, matchesWords as Oc, minimapFindMatch as kc, minimapSelectionOccurrenceHighlight as Ac, mixin as jc, noBreakWhitespace as Mc, normalizeIndentation as Nc, nullTokenize as Pc, nullTokenizeEncoded as Fc, numberComparator as Ic, observableCodeEditor as Lc, observableConfigValue as Rc, observableFromEvent as zc, observableSignal as Bc, observableSignalFromEvent as Vc, observableValue as Hc, onUnexpectedError as G, onUnexpectedExternalError as Uc, oneOf as Wc, openLinkFromMarkdown as Gc, or as Kc, originalFSPath as qc, overviewRulerFindMatchForeground as Jc, overviewRulerRangeHighlight as Yc, overviewRulerSelectionHighlightForeground as Xc, parseDocument as Zc, quickInputListFocusBackground as Qc, quickInputListFocusForeground as $c, quickInputListFocusIconForeground as el, quickSelect as tl, raceCancellation as nl, reactToChange as rl, reactToChangeWithStore as il, readHotReloadableExport as al, recomputeInitiallyAndOnChange as ol, registerAction2 as K, registerColor as q, registerEditorAction as J, registerEditorCommand as Y, registerEditorContribution as X, registerEditorFeature as sl, registerIcon as cl, registerInstantiatedEditorAction as ll, registerModelAndPositionCommand as ul, registerMultiEditorAction as dl, registerSingleton as fl, registerThemingParticipant as pl, relativePath as ml, removeCSSRulesContainingSelector as hl, renderIcon as gl, renderLabelWithIcons as _l, renderMarkdown as vl, renderViewLine as yl, reset as bl, reverseOrder as xl, runAtThisOrScheduleAtNextAnimationFrame as Sl, runWhenWindowIdle as Cl, score as wl, sep as Tl, setVisibility as El, severity_default as Dl, shouldSynchronizeModel as Ol, show as kl, size$1 as Al, splitLines as jl, splitLinesIncludeSeparators as Ml, status as Nl, stripIcons as Pl, stripWildcards as Fl, structuralEquals as Il, subtransaction as Ll, svgElem as Rl, themeColorFromId as zl, timeout as Bl, toAction as Vl, toDisposable as Hl, toMultilineTokens2 as Ul, toWorkspaceIdentifier as Wl, trackFocus as Gl, transaction as Kl, transparent as ql, trim as Jl, unicodeHighlightConfigKeys as Yl, unthemedKeybindingLabelOptions as Xl, waitForState as Zl, widgetBorder as Ql, widgetClose as $l, widgetShadow as eu, __tla as __tla_0 } from "./editor.api-CNFWHCpp.min.js";
import { __tla as __tla_1 } from "./monaco.contribution-DghwUxMS.min.js";
Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })()
]).then(async () => {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q, _r2, _s2, _t2, _u2, _v2, _w2, _x2, _y2, _z, _A2, _B, _C2, _D2, _E2, _F2, _G, _H, _I2, _J, _K, _L, _M2, _N2, _O2, _P2, _Q, _R, _S2, _T2, _U, _V, _W, _X, _Y, _Z, __2, _$, _aa, _ba, _ca, _da, _ea, _fa, _ga, _ha, _ia, _ja, _ka, _la, _ma, _na, _oa, _pa, _qa, _ra, _sa, _ta, _ua, _va, _wa, _xa, _ya, _za, _Aa, _Ba, _Ca, _Da, _Ea, _Fa, _Ga, _Ha, _Ia, _Ja, _Ka, _La, _Ma, _Na, _Oa, _Pa, _Qa, _Ra, _Sa, _Ta, _Ua, _Va, _Wa, _Xa, _Ya, _Za, __a, _$a, _ab, _bb, _cb, _db, _eb, _fb, _gb, _hb, _ib, _jb, _kb, _lb, _mb, _nb, _ob, _pb, _qb, _rb, _sb, _tb, _ub, _vb, _wb, _xb, _yb, _zb, _Ab, _Bb, _Cb, _Db, _Eb, _Fb, _Gb, _Hb, _Ib, _Jb, _Kb, _Lb;
  var tu = Object.defineProperty, nu = Object.getOwnPropertyDescriptor, ru = Object.getOwnPropertyNames, iu = Object.prototype.hasOwnProperty, au = (e2, t2, n2, r2) => {
    if (t2 && typeof t2 == `object` || typeof t2 == `function`) for (let i2 of ru(t2)) !iu.call(e2, i2) && i2 !== n2 && tu(e2, i2, {
      get: () => t2[i2],
      enumerable: !(r2 = nu(t2, i2)) || r2.enumerable
    });
    return e2;
  }, ou = (e2, t2, n2) => (au(e2, t2, `default`), n2 && au(n2, t2, `default`)), su = {};
  ou(su, ho);
  var cu = {}, lu = {}, uu = class e2 {
    static getOrCreate(t2) {
      return lu[t2] || (lu[t2] = new e2(t2)), lu[t2];
    }
    constructor(e3) {
      this._languageId = e3, this._loadingTriggered = false, this._lazyLoadPromise = new Promise((e4, t2) => {
        this._lazyLoadPromiseResolve = e4, this._lazyLoadPromiseReject = t2;
      });
    }
    load() {
      return this._loadingTriggered || (this._loadingTriggered = true, cu[this._languageId].loader().then((e3) => this._lazyLoadPromiseResolve(e3), (e3) => this._lazyLoadPromiseReject(e3))), this._lazyLoadPromise;
    }
  };
  function du(e2) {
    let t2 = e2.id;
    cu[t2] = e2, su.languages.register(e2);
    let n2 = uu.getOrCreate(t2);
    su.languages.registerTokensProviderFactory(t2, {
      create: async () => {
        let e3 = await n2.load();
        return e3.language;
      }
    }), su.languages.onLanguageEncountered(t2, async () => {
      let e3 = await n2.load();
      su.languages.setLanguageConfiguration(t2, e3.conf);
    });
  }
  du({
    id: `css`,
    extensions: [
      `.css`
    ],
    aliases: [
      `CSS`,
      `css`
    ],
    mimetypes: [
      `text/css`
    ],
    loader: () => t(() => import("./css-Cwe2ChVy.min.js").then(async (m2) => {
      await m2.__tla;
      return m2;
    }), [], import.meta.url)
  });
  var fu = Object.defineProperty, pu = Object.getOwnPropertyDescriptor, mu = Object.getOwnPropertyNames, hu = Object.prototype.hasOwnProperty, gu = (e2, t2, n2, r2) => {
    if (t2 && typeof t2 == `object` || typeof t2 == `function`) for (let i2 of mu(t2)) !hu.call(e2, i2) && i2 !== n2 && fu(e2, i2, {
      get: () => t2[i2],
      enumerable: !(r2 = pu(t2, i2)) || r2.enumerable
    });
    return e2;
  }, _u = (e2, t2, n2) => (gu(e2, t2, `default`), n2 && gu(n2, t2, `default`)), vu = {};
  _u(vu, ho);
  var yu = class {
    constructor(e2, t2, n2) {
      this._onDidChange = new vu.Emitter(), this._languageId = e2, this.setOptions(t2), this.setModeConfiguration(n2);
    }
    get onDidChange() {
      return this._onDidChange.event;
    }
    get languageId() {
      return this._languageId;
    }
    get modeConfiguration() {
      return this._modeConfiguration;
    }
    get diagnosticsOptions() {
      return this.options;
    }
    get options() {
      return this._options;
    }
    setOptions(e2) {
      this._options = e2 || /* @__PURE__ */ Object.create(null), this._onDidChange.fire(this);
    }
    setDiagnosticsOptions(e2) {
      this.setOptions(e2);
    }
    setModeConfiguration(e2) {
      this._modeConfiguration = e2 || /* @__PURE__ */ Object.create(null), this._onDidChange.fire(this);
    }
  }, bu = {
    validate: true,
    lint: {
      compatibleVendorPrefixes: `ignore`,
      vendorPrefix: `warning`,
      duplicateProperties: `warning`,
      emptyRules: `warning`,
      importStatement: `ignore`,
      boxModel: `ignore`,
      universalSelector: `ignore`,
      zeroUnits: `ignore`,
      fontFaceProperties: `warning`,
      hexColorLength: `error`,
      argumentsInColorFunction: `error`,
      unknownProperties: `warning`,
      ieHack: `ignore`,
      unknownVendorSpecificProperties: `ignore`,
      propertyIgnoredDueToDisplay: `warning`,
      important: `ignore`,
      float: `ignore`,
      idSelector: `ignore`
    },
    data: {
      useDefaultDataProvider: true
    },
    format: {
      newlineBetweenSelectors: true,
      newlineBetweenRules: true,
      spaceAroundSelectorSeparator: false,
      braceStyle: `collapse`,
      maxPreserveNewLines: void 0,
      preserveNewLines: true
    }
  }, xu = {
    completionItems: true,
    hovers: true,
    documentSymbols: true,
    definitions: true,
    references: true,
    documentHighlights: true,
    rename: true,
    colors: true,
    foldingRanges: true,
    diagnostics: true,
    selectionRanges: true,
    documentFormattingEdits: true,
    documentRangeFormattingEdits: true
  }, Su = new yu(`css`, bu, xu), Cu = new yu(`scss`, bu, xu), wu = new yu(`less`, bu, xu);
  vu.languages.css = {
    cssDefaults: Su,
    lessDefaults: wu,
    scssDefaults: Cu
  };
  function Tu() {
    return t(() => import("./cssMode-Dg0Gi_8u.min.js").then(async (m2) => {
      await m2.__tla;
      return m2;
    }), __vite__mapDeps([0]), import.meta.url);
  }
  vu.languages.onLanguage(`less`, () => {
    Tu().then((e2) => e2.setupMode(wu));
  }), vu.languages.onLanguage(`scss`, () => {
    Tu().then((e2) => e2.setupMode(Cu));
  }), vu.languages.onLanguage(`css`, () => {
    Tu().then((e2) => e2.setupMode(Su));
  }), du({
    id: `javascript`,
    extensions: [
      `.js`,
      `.es6`,
      `.jsx`,
      `.mjs`,
      `.cjs`
    ],
    firstLine: `^#!.*\\bnode`,
    filenames: [
      `jakefile`
    ],
    aliases: [
      `JavaScript`,
      `javascript`,
      `js`
    ],
    mimetypes: [
      `text/javascript`
    ],
    loader: () => t(() => import("./javascript-BgVGS4-I.min.js").then(async (m2) => {
      await m2.__tla;
      return m2;
    }), __vite__mapDeps([0]), import.meta.url)
  });
  var Eu = class extends o {
    constructor() {
      super({
        id: `diffEditor.toggleCollapseUnchangedRegions`,
        title: W(`toggleCollapseUnchangedRegions`, `Toggle Collapse Unchanged Regions`),
        icon: _.map,
        toggled: b.has(`config.diffEditor.hideUnchangedRegions.enabled`),
        precondition: b.has(`isInDiffEditor`),
        menu: {
          when: b.has(`isInDiffEditor`),
          id: j.EditorTitle,
          order: 22,
          group: `navigation`
        }
      });
    }
    run(e2, ...t2) {
      let n2 = e2.get(D), r2 = !n2.getValue(`diffEditor.hideUnchangedRegions.enabled`);
      n2.updateValue(`diffEditor.hideUnchangedRegions.enabled`, r2);
    }
  }, Du = class extends o {
    constructor() {
      super({
        id: `diffEditor.toggleShowMovedCodeBlocks`,
        title: W(`toggleShowMovedCodeBlocks`, `Toggle Show Moved Code Blocks`),
        precondition: b.has(`isInDiffEditor`)
      });
    }
    run(e2, ...t2) {
      let n2 = e2.get(D), r2 = !n2.getValue(`diffEditor.experimental.showMoves`);
      n2.updateValue(`diffEditor.experimental.showMoves`, r2);
    }
  }, Ou = class extends o {
    constructor() {
      super({
        id: `diffEditor.toggleUseInlineViewWhenSpaceIsLimited`,
        title: W(`toggleUseInlineViewWhenSpaceIsLimited`, `Toggle Use Inline View When Space Is Limited`),
        precondition: b.has(`isInDiffEditor`)
      });
    }
    run(e2, ...t2) {
      let n2 = e2.get(D), r2 = !n2.getValue(`diffEditor.useInlineViewWhenSpaceIsLimited`);
      n2.updateValue(`diffEditor.useInlineViewWhenSpaceIsLimited`, r2);
    }
  };
  const ku = W(`diffEditor`, `Diff Editor`);
  var Au = class extends ke {
    constructor() {
      super({
        id: `diffEditor.switchSide`,
        title: W(`switchSide`, `Switch Side`),
        icon: _.arrowSwap,
        precondition: b.has(`isInDiffEditor`),
        f1: true,
        category: ku
      });
    }
    runEditorCommand(e2, t2, n2) {
      let r2 = zu(e2);
      if (r2 instanceof be) {
        if (n2 && n2.dryRun) return {
          destinationSelection: r2.mapToOtherSide().destinationSelection
        };
        r2.switchSide();
      }
    }
  }, ju = class extends ke {
    constructor() {
      super({
        id: `diffEditor.exitCompareMove`,
        title: W(`exitCompareMove`, `Exit Compare Move`),
        icon: _.close,
        precondition: T.comparingMovedCode,
        f1: false,
        category: ku,
        keybinding: {
          weight: 1e4,
          primary: 9
        }
      });
    }
    runEditorCommand(e2, t2, ...n2) {
      let r2 = zu(e2);
      r2 instanceof be && r2.exitCompareMove();
    }
  }, Mu = class extends ke {
    constructor() {
      super({
        id: `diffEditor.collapseAllUnchangedRegions`,
        title: W(`collapseAllUnchangedRegions`, `Collapse All Unchanged Regions`),
        icon: _.fold,
        precondition: b.has(`isInDiffEditor`),
        f1: true,
        category: ku
      });
    }
    runEditorCommand(e2, t2, ...n2) {
      let r2 = zu(e2);
      r2 instanceof be && r2.collapseAllUnchangedRegions();
    }
  }, Nu = class extends ke {
    constructor() {
      super({
        id: `diffEditor.showAllUnchangedRegions`,
        title: W(`showAllUnchangedRegions`, `Show All Unchanged Regions`),
        icon: _.unfold,
        precondition: b.has(`isInDiffEditor`),
        f1: true,
        category: ku
      });
    }
    runEditorCommand(e2, t2, ...n2) {
      let r2 = zu(e2);
      r2 instanceof be && r2.showAllUnchangedRegions();
    }
  }, Pu = class extends o {
    constructor() {
      super({
        id: `diffEditor.revert`,
        title: W(`revert`, `Revert`),
        f1: false,
        category: ku
      });
    }
    run(e2, t2) {
      let n2 = Ru(e2, t2.originalUri, t2.modifiedUri);
      n2 instanceof be && n2.revertRangeMappings(t2.mapping.innerChanges ?? []);
    }
  };
  const Fu = W(`accessibleDiffViewer`, `Accessible Diff Viewer`);
  var Iu = (_a2 = class extends o {
    constructor() {
      super({
        id: _a2.id,
        title: W(`editor.action.accessibleDiffViewer.next`, `Go to Next Difference`),
        category: Fu,
        precondition: b.has(`isInDiffEditor`),
        keybinding: {
          primary: 65,
          weight: 100
        },
        f1: true
      });
    }
    run(e2) {
      let t2 = zu(e2);
      t2 == null ? void 0 : t2.accessibleDiffViewerNext();
    }
  }, _a2.id = `editor.action.accessibleDiffViewer.next`, _a2), Lu = (_b2 = class extends o {
    constructor() {
      super({
        id: _b2.id,
        title: W(`editor.action.accessibleDiffViewer.prev`, `Go to Previous Difference`),
        category: Fu,
        precondition: b.has(`isInDiffEditor`),
        keybinding: {
          primary: 1089,
          weight: 100
        },
        f1: true
      });
    }
    run(e2) {
      let t2 = zu(e2);
      t2 == null ? void 0 : t2.accessibleDiffViewerPrev();
    }
  }, _b2.id = `editor.action.accessibleDiffViewer.prev`, _b2);
  function Ru(e2, t2, n2) {
    let r2 = e2.get(pt), i2 = r2.listDiffEditors();
    return i2.find((e3) => {
      var _a3, _b3;
      let r3 = e3.getModifiedEditor(), i3 = e3.getOriginalEditor();
      return r3 && ((_a3 = r3.getModel()) == null ? void 0 : _a3.uri.toString()) === n2.toString() && i3 && ((_b3 = i3.getModel()) == null ? void 0 : _b3.uri.toString()) === t2.toString();
    }) || null;
  }
  function zu(e2) {
    let t2 = e2.get(pt), n2 = t2.listDiffEditors(), r2 = No();
    if (r2) for (let e3 of n2) {
      let t3 = e3.getContainerDomNode();
      if (Bu(t3, r2)) return e3;
    }
    return null;
  }
  function Bu(e2, t2) {
    let n2 = t2;
    for (; n2; ) {
      if (n2 === e2) return true;
      n2 = n2.parentElement;
    }
    return false;
  }
  K(Eu), K(Du), K(Ou), Nn.appendMenuItem(j.EditorTitle, {
    command: {
      id: new Ou().desc.id,
      title: U(`useInlineViewWhenSpaceIsLimited`, `Use Inline View When Space Is Limited`),
      toggled: b.has(`config.diffEditor.useInlineViewWhenSpaceIsLimited`),
      precondition: b.has(`isInDiffEditor`)
    },
    order: 11,
    group: `1_diff`,
    when: b.and(T.diffEditorRenderSideBySideInlineBreakpointReached, b.has(`isInDiffEditor`))
  }), Nn.appendMenuItem(j.EditorTitle, {
    command: {
      id: new Du().desc.id,
      title: U(`showMoves`, `Show Moved Code Blocks`),
      icon: _.move,
      toggled: se.create(`config.diffEditor.experimental.showMoves`, true),
      precondition: b.has(`isInDiffEditor`)
    },
    order: 10,
    group: `1_diff`,
    when: b.has(`isInDiffEditor`)
  }), K(Pu);
  for (let e2 of [
    {
      icon: _.arrowRight,
      key: T.diffEditorInlineMode.toNegated()
    },
    {
      icon: _.discard,
      key: T.diffEditorInlineMode
    }
  ]) Nn.appendMenuItem(j.DiffEditorHunkToolbar, {
    command: {
      id: new Pu().desc.id,
      title: U(`revertHunk`, `Revert Block`),
      icon: e2.icon
    },
    when: b.and(T.diffEditorModifiedWritable, e2.key),
    order: 5,
    group: `primary`
  }), Nn.appendMenuItem(j.DiffEditorSelectionToolbar, {
    command: {
      id: new Pu().desc.id,
      title: U(`revertSelection`, `Revert Selection`),
      icon: e2.icon
    },
    when: b.and(T.diffEditorModifiedWritable, e2.key),
    order: 5,
    group: `primary`
  });
  K(Au), K(ju), K(Mu), K(Nu), Nn.appendMenuItem(j.EditorTitle, {
    command: {
      id: Iu.id,
      title: U(`Open Accessible Diff Viewer`, `Open Accessible Diff Viewer`),
      precondition: b.has(`isInDiffEditor`)
    },
    order: 10,
    group: `2_diff`,
    when: b.and(T.accessibleDiffViewerVisible.negate(), b.has(`isInDiffEditor`))
  }), y.registerCommandAlias(`editor.action.diffReview.next`, Iu.id), K(Iu), y.registerCommandAlias(`editor.action.diffReview.prev`, Lu.id), K(Lu);
  var Vu = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Hu = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Uu;
  const Wu = new F(`selectionAnchorSet`, false);
  let Gu = (_c2 = class {
    static get(e2) {
      return e2.getContribution(Uu.ID);
    }
    constructor(e2, t2) {
      this.editor = e2, this.selectionAnchorSetContextKey = Wu.bindTo(t2), this.modelChangeListener = e2.onDidChangeModel(() => this.selectionAnchorSetContextKey.reset());
    }
    setSelectionAnchor() {
      if (this.editor.hasModel()) {
        let e2 = this.editor.getPosition();
        this.editor.changeDecorations((t2) => {
          this.decorationId && t2.removeDecoration(this.decorationId), this.decorationId = t2.addDecoration(I.fromPositions(e2, e2), {
            description: `selection-anchor`,
            stickiness: 1,
            hoverMessage: new Dn().appendText(U(`selectionAnchor`, `Selection Anchor`)),
            className: `selection-anchor`
          });
        }), this.selectionAnchorSetContextKey.set(!!this.decorationId), Ci(U(`anchorSet`, `Anchor set at {0}:{1}`, e2.lineNumber, e2.column));
      }
    }
    goToSelectionAnchor() {
      if (this.editor.hasModel() && this.decorationId) {
        let e2 = this.editor.getModel().getDecorationRange(this.decorationId);
        e2 && this.editor.setPosition(e2.getStartPosition());
      }
    }
    selectFromAnchorToCursor() {
      if (this.editor.hasModel() && this.decorationId) {
        let e2 = this.editor.getModel().getDecorationRange(this.decorationId);
        if (e2) {
          let t2 = this.editor.getPosition();
          this.editor.setSelection(I.fromPositions(e2.getStartPosition(), t2)), this.cancelSelectionAnchor();
        }
      }
    }
    cancelSelectionAnchor() {
      if (this.decorationId) {
        let e2 = this.decorationId;
        this.editor.changeDecorations((t2) => {
          t2.removeDecoration(e2), this.decorationId = void 0;
        }), this.selectionAnchorSetContextKey.set(false);
      }
    }
    dispose() {
      this.cancelSelectionAnchor(), this.modelChangeListener.dispose();
    }
  }, Uu = _c2, _c2.ID = `editor.contrib.selectionAnchorController`, _c2);
  Gu = Uu = Vu([
    Hu(1, O)
  ], Gu);
  var Ku = class extends w {
    constructor() {
      super({
        id: `editor.action.setSelectionAnchor`,
        label: U(`setSelectionAnchor`, `Set Selection Anchor`),
        alias: `Set Selection Anchor`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2080),
          weight: 100
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      (_a3 = Gu.get(t2)) == null ? void 0 : _a3.setSelectionAnchor();
    }
  }, qu = class extends w {
    constructor() {
      super({
        id: `editor.action.goToSelectionAnchor`,
        label: U(`goToSelectionAnchor`, `Go to Selection Anchor`),
        alias: `Go to Selection Anchor`,
        precondition: Wu
      });
    }
    async run(e2, t2) {
      var _a3;
      (_a3 = Gu.get(t2)) == null ? void 0 : _a3.goToSelectionAnchor();
    }
  }, Ju = class extends w {
    constructor() {
      super({
        id: `editor.action.selectFromAnchorToCursor`,
        label: U(`selectFromAnchorToCursor`, `Select from Anchor to Cursor`),
        alias: `Select from Anchor to Cursor`,
        precondition: Wu,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2089),
          weight: 100
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      (_a3 = Gu.get(t2)) == null ? void 0 : _a3.selectFromAnchorToCursor();
    }
  }, Yu = class extends w {
    constructor() {
      super({
        id: `editor.action.cancelSelectionAnchor`,
        label: U(`cancelSelectionAnchor`, `Cancel Selection Anchor`),
        alias: `Cancel Selection Anchor`,
        precondition: Wu,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 9,
          weight: 100
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      (_a3 = Gu.get(t2)) == null ? void 0 : _a3.cancelSelectionAnchor();
    }
  };
  X(Gu.ID, Gu, 4), J(Ku), J(qu), J(Ju), J(Yu);
  const Xu = q(`editorOverviewRuler.bracketMatchForeground`, `#A0A0A0`, U(`overviewRulerBracketMatchForeground`, `Overview ruler marker color for matching brackets.`));
  var Zu = class extends w {
    constructor() {
      super({
        id: `editor.action.jumpToBracket`,
        label: U(`smartSelect.jumpBracket`, `Go to Bracket`),
        alias: `Go to Bracket`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3165,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = td.get(t2)) == null ? void 0 : _a3.jumpToBracket();
    }
  }, Qu = class extends w {
    constructor() {
      super({
        id: `editor.action.selectToBracket`,
        label: U(`smartSelect.selectToBracket`, `Select to Bracket`),
        alias: `Select to Bracket`,
        precondition: void 0,
        metadata: {
          description: W(`smartSelect.selectToBracketDescription`, `Select the text inside and including the brackets or curly braces`),
          args: [
            {
              name: `args`,
              schema: {
                type: `object`,
                properties: {
                  selectBrackets: {
                    type: `boolean`,
                    default: true
                  }
                }
              }
            }
          ]
        }
      });
    }
    run(e2, t2, n2) {
      var _a3;
      let r2 = true;
      n2 && n2.selectBrackets === false && (r2 = false), (_a3 = td.get(t2)) == null ? void 0 : _a3.selectToBracket(r2);
    }
  }, $u = class extends w {
    constructor() {
      super({
        id: `editor.action.removeBrackets`,
        label: U(`smartSelect.removeBrackets`, `Remove Brackets`),
        alias: `Remove Brackets`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2561,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = td.get(t2)) == null ? void 0 : _a3.removeBrackets(this.id);
    }
  }, ed = class {
    constructor(e2, t2, n2) {
      this.position = e2, this.brackets = t2, this.options = n2;
    }
  }, td = (_d2 = class extends S {
    static get(t2) {
      return t2.getContribution(_d2.ID);
    }
    constructor(e2) {
      super(), this._editor = e2, this._lastBracketsData = [], this._lastVersionId = 0, this._decorations = this._editor.createDecorationsCollection(), this._updateBracketsSoon = this._register(new hr(() => this._updateBrackets(), 50)), this._matchBrackets = this._editor.getOption(72), this._updateBracketsSoon.schedule(), this._register(e2.onDidChangeCursorPosition((e3) => {
        this._matchBrackets !== `never` && this._updateBracketsSoon.schedule();
      })), this._register(e2.onDidChangeModelContent((e3) => {
        this._updateBracketsSoon.schedule();
      })), this._register(e2.onDidChangeModel((e3) => {
        this._lastBracketsData = [], this._updateBracketsSoon.schedule();
      })), this._register(e2.onDidChangeModelLanguageConfiguration((e3) => {
        this._lastBracketsData = [], this._updateBracketsSoon.schedule();
      })), this._register(e2.onDidChangeConfiguration((e3) => {
        e3.hasChanged(72) && (this._matchBrackets = this._editor.getOption(72), this._decorations.clear(), this._lastBracketsData = [], this._lastVersionId = 0, this._updateBracketsSoon.schedule());
      })), this._register(e2.onDidBlurEditorWidget(() => {
        this._updateBracketsSoon.schedule();
      })), this._register(e2.onDidFocusEditorWidget(() => {
        this._updateBracketsSoon.schedule();
      }));
    }
    jumpToBracket() {
      if (!this._editor.hasModel()) return;
      let e2 = this._editor.getModel(), t2 = this._editor.getSelections().map((t3) => {
        let n2 = t3.getStartPosition(), r2 = e2.bracketPairs.matchBracket(n2), i2 = null;
        if (r2) r2[0].containsPosition(n2) && !r2[1].containsPosition(n2) ? i2 = r2[1].getStartPosition() : r2[1].containsPosition(n2) && (i2 = r2[0].getStartPosition());
        else {
          let t4 = e2.bracketPairs.findEnclosingBrackets(n2);
          if (t4) i2 = t4[1].getStartPosition();
          else {
            let t5 = e2.bracketPairs.findNextBracket(n2);
            t5 && t5.range && (i2 = t5.range.getStartPosition());
          }
        }
        return i2 ? new I(i2.lineNumber, i2.column, i2.lineNumber, i2.column) : new I(n2.lineNumber, n2.column, n2.lineNumber, n2.column);
      });
      this._editor.setSelections(t2), this._editor.revealRange(t2[0]);
    }
    selectToBracket(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getModel(), n2 = [];
      this._editor.getSelections().forEach((r2) => {
        let i2 = r2.getStartPosition(), a2 = t2.bracketPairs.matchBracket(i2);
        if (!a2 && (a2 = t2.bracketPairs.findEnclosingBrackets(i2), !a2)) {
          let e3 = t2.bracketPairs.findNextBracket(i2);
          e3 && e3.range && (a2 = t2.bracketPairs.matchBracket(e3.range.getStartPosition()));
        }
        let o2 = null, s2 = null;
        if (a2) {
          a2.sort(P.compareRangesUsingStarts);
          let [t3, n3] = a2;
          if (o2 = e2 ? t3.getStartPosition() : t3.getEndPosition(), s2 = e2 ? n3.getEndPosition() : n3.getStartPosition(), n3.containsPosition(i2)) {
            let e3 = o2;
            o2 = s2, s2 = e3;
          }
        }
        o2 && s2 && n2.push(new I(o2.lineNumber, o2.column, s2.lineNumber, s2.column));
      }), n2.length > 0 && (this._editor.setSelections(n2), this._editor.revealRange(n2[0]));
    }
    removeBrackets(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getModel();
      this._editor.getSelections().forEach((n2) => {
        let r2 = n2.getPosition(), i2 = t2.bracketPairs.matchBracket(r2);
        i2 || (i2 = t2.bracketPairs.findEnclosingBrackets(r2)), i2 && (this._editor.pushUndoStop(), this._editor.executeEdits(e2, [
          {
            range: i2[0],
            text: ``
          },
          {
            range: i2[1],
            text: ``
          }
        ]), this._editor.pushUndoStop());
      });
    }
    _updateBrackets() {
      if (this._matchBrackets === `never`) return;
      this._recomputeBrackets();
      let e2 = [], t2 = 0;
      for (let n2 of this._lastBracketsData) {
        let r2 = n2.brackets;
        r2 && (e2[t2++] = {
          range: r2[0],
          options: n2.options
        }, e2[t2++] = {
          range: r2[1],
          options: n2.options
        });
      }
      this._decorations.set(e2);
    }
    _recomputeBrackets() {
      if (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {
        this._lastBracketsData = [], this._lastVersionId = 0;
        return;
      }
      let t2 = this._editor.getSelections();
      if (t2.length > 100) {
        this._lastBracketsData = [], this._lastVersionId = 0;
        return;
      }
      let n2 = this._editor.getModel(), r2 = n2.getVersionId(), i2 = [];
      this._lastVersionId === r2 && (i2 = this._lastBracketsData);
      let a2 = [], o2 = 0;
      for (let e2 = 0, n3 = t2.length; e2 < n3; e2++) {
        let n4 = t2[e2];
        n4.isEmpty() && (a2[o2++] = n4.getStartPosition());
      }
      a2.length > 1 && a2.sort(N.compare);
      let s2 = [], c2 = 0, l2 = 0, u2 = i2.length;
      for (let t3 = 0, r3 = a2.length; t3 < r3; t3++) {
        let r4 = a2[t3];
        for (; l2 < u2 && i2[l2].position.isBefore(r4); ) l2++;
        if (l2 < u2 && i2[l2].position.equals(r4)) s2[c2++] = i2[l2];
        else {
          let t4 = n2.bracketPairs.matchBracket(r4, 20), i3 = _d2._DECORATION_OPTIONS_WITH_OVERVIEW_RULER;
          !t4 && this._matchBrackets === `always` && (t4 = n2.bracketPairs.findEnclosingBrackets(r4, 20), i3 = _d2._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER), s2[c2++] = new ed(r4, t4, i3);
        }
      }
      this._lastBracketsData = s2, this._lastVersionId = r2;
    }
  }, _d2.ID = `editor.contrib.bracketMatchingController`, _d2._DECORATION_OPTIONS_WITH_OVERVIEW_RULER = M.register({
    description: `bracket-match-overview`,
    stickiness: 1,
    className: `bracket-match`,
    overviewRuler: {
      color: zl(Xu),
      position: qn.Center
    }
  }), _d2._DECORATION_OPTIONS_WITHOUT_OVERVIEW_RULER = M.register({
    description: `bracket-match-no-overview`,
    stickiness: 1,
    className: `bracket-match`
  }), _d2);
  X(td.ID, td, 1), J(Qu), J(Zu), J($u), Nn.appendMenuItem(j.MenubarGoMenu, {
    group: `5_infile_nav`,
    command: {
      id: `editor.action.jumpToBracket`,
      title: U({
        key: `miGoToBracket`,
        comment: [
          `&& denotes a mnemonic`
        ]
      }, `Go to &&Bracket`)
    },
    order: 2
  });
  var nd = class {
    constructor(e2, t2) {
      this._selection = e2, this._isMovingLeft = t2;
    }
    getEditOperations(e2, t2) {
      if (this._selection.startLineNumber !== this._selection.endLineNumber || this._selection.isEmpty()) return;
      let n2 = this._selection.startLineNumber, r2 = this._selection.startColumn, i2 = this._selection.endColumn;
      if (!(this._isMovingLeft && r2 === 1) && !(!this._isMovingLeft && i2 === e2.getLineMaxColumn(n2))) if (this._isMovingLeft) {
        let a2 = new P(n2, r2 - 1, n2, r2), o2 = e2.getValueInRange(a2);
        t2.addEditOperation(a2, null), t2.addEditOperation(new P(n2, i2, n2, i2), o2);
      } else {
        let a2 = new P(n2, i2, n2, i2 + 1), o2 = e2.getValueInRange(a2);
        t2.addEditOperation(a2, null), t2.addEditOperation(new P(n2, r2, n2, r2), o2);
      }
    }
    computeCursorState(e2, t2) {
      return this._isMovingLeft ? new I(this._selection.startLineNumber, this._selection.startColumn - 1, this._selection.endLineNumber, this._selection.endColumn - 1) : new I(this._selection.startLineNumber, this._selection.startColumn + 1, this._selection.endLineNumber, this._selection.endColumn + 1);
    }
  }, rd = class extends w {
    constructor(e2, t2) {
      super(t2), this.left = e2;
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = [], r2 = t2.getSelections();
      for (let e3 of r2) n2.push(new nd(e3, this.left));
      t2.pushUndoStop(), t2.executeCommands(this.id, n2), t2.pushUndoStop();
    }
  }, id = class extends rd {
    constructor() {
      super(true, {
        id: `editor.action.moveCarretLeftAction`,
        label: U(`caret.moveLeft`, `Move Selected Text Left`),
        alias: `Move Selected Text Left`,
        precondition: T.writable
      });
    }
  }, ad = class extends rd {
    constructor() {
      super(false, {
        id: `editor.action.moveCarretRightAction`,
        label: U(`caret.moveRight`, `Move Selected Text Right`),
        alias: `Move Selected Text Right`,
        precondition: T.writable
      });
    }
  };
  J(id), J(ad);
  var od = class extends w {
    constructor() {
      super({
        id: `editor.action.transposeLetters`,
        label: U(`transposeLetters.label`, `Transpose Letters`),
        alias: `Transpose Letters`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 306
          },
          weight: 100
        }
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getModel(), r2 = [], i2 = t2.getSelections();
      for (let e3 of i2) {
        if (!e3.isEmpty()) continue;
        let t3 = e3.startLineNumber, i3 = e3.startColumn, a2 = n2.getLineMaxColumn(t3);
        if (t3 === 1 && (i3 === 1 || i3 === 2 && a2 === 2)) continue;
        let o2 = i3 === a2 ? e3.getPosition() : Ln.rightPosition(n2, e3.getPosition().lineNumber, e3.getPosition().column), s2 = Ln.leftPosition(n2, o2), c2 = Ln.leftPosition(n2, s2), l2 = n2.getValueInRange(P.fromPositions(c2, s2)), u2 = n2.getValueInRange(P.fromPositions(s2, o2)), d2 = P.fromPositions(c2, o2);
        r2.push(new ur(d2, u2 + l2));
      }
      r2.length > 0 && (t2.pushUndoStop(), t2.executeCommands(this.id, r2), t2.pushUndoStop());
    }
  };
  J(od);
  const sd = function() {
    if (typeof crypto == `object` && typeof crypto.randomUUID == `function`) return crypto.randomUUID.bind(crypto);
    let e2;
    e2 = typeof crypto == `object` && typeof crypto.getRandomValues == `function` ? crypto.getRandomValues.bind(crypto) : function(e3) {
      for (let t3 = 0; t3 < e3.length; t3++) e3[t3] = Math.floor(Math.random() * 256);
      return e3;
    };
    let t2 = new Uint8Array(16), n2 = [];
    for (let e3 = 0; e3 < 256; e3++) n2.push(e3.toString(16).padStart(2, `0`));
    return function() {
      e2(t2), t2[6] = t2[6] & 15 | 64, t2[8] = t2[8] & 63 | 128;
      let r2 = 0, i2 = ``;
      return i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += `-`, i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += `-`, i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += `-`, i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += `-`, i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2 += n2[t2[r2++]], i2;
    };
  }();
  function cd(e2) {
    return {
      asString: async () => e2,
      asFile: () => void 0,
      value: typeof e2 == `string` ? e2 : void 0
    };
  }
  function ld(e2, t2, n2) {
    let r2 = {
      id: sd(),
      name: e2,
      uri: t2,
      data: n2
    };
    return {
      asString: async () => ``,
      asFile: () => r2,
      value: void 0
    };
  }
  var ud = class {
    constructor() {
      this._entries = /* @__PURE__ */ new Map();
    }
    get size() {
      let e2 = 0;
      for (let t2 of this._entries) e2++;
      return e2;
    }
    has(e2) {
      return this._entries.has(this.toKey(e2));
    }
    matches(e2) {
      let t2 = [
        ...this._entries.keys()
      ];
      return ln.some(this, ([e3, t3]) => t3.asFile()) && t2.push(`files`), pd(dd(e2), t2);
    }
    get(e2) {
      var _a3;
      return (_a3 = this._entries.get(this.toKey(e2))) == null ? void 0 : _a3[0];
    }
    append(e2, t2) {
      let n2 = this._entries.get(e2);
      n2 ? n2.push(t2) : this._entries.set(this.toKey(e2), [
        t2
      ]);
    }
    replace(e2, t2) {
      this._entries.set(this.toKey(e2), [
        t2
      ]);
    }
    delete(e2) {
      this._entries.delete(this.toKey(e2));
    }
    *[Symbol.iterator]() {
      for (let [e2, t2] of this._entries) for (let n2 of t2) yield [
        e2,
        n2
      ];
    }
    toKey(e2) {
      return dd(e2);
    }
  };
  function dd(e2) {
    return e2.toLowerCase();
  }
  function fd(e2, t2) {
    return pd(dd(e2), t2.map(dd));
  }
  function pd(e2, t2) {
    if (e2 === `*/*`) return t2.length > 0;
    if (t2.includes(e2)) return true;
    let n2 = e2.match(/^([a-z]+)\/([a-z]+|\*)$/i);
    if (!n2) return false;
    let [r2, i2, a2] = n2;
    return a2 === `*` ? t2.some((e3) => e3.startsWith(i2 + `/`)) : false;
  }
  const md = Object.freeze({
    create: (e2) => za(e2.map((e3) => e3.toString())).join(`\r
`),
    split: (e2) => e2.split(`\r
`),
    parse: (e2) => md.split(e2).filter((e3) => !e3.startsWith(`#`))
  });
  var hd = (_e2 = class {
    constructor(e2) {
      this.value = e2;
    }
    equals(e2) {
      return this.value === e2.value;
    }
    contains(t2) {
      return this.equals(t2) || this.value === `` || t2.value.startsWith(this.value + _e2.sep);
    }
    intersects(e2) {
      return this.contains(e2) || e2.contains(this);
    }
    append(...t2) {
      return new _e2((this.value ? [
        this.value,
        ...t2
      ] : t2).join(_e2.sep));
    }
  }, _e2.sep = `.`, _e2.None = new _e2(`@@none@@`), _e2.Empty = new _e2(``), _e2);
  const gd = {
    EDITORS: `CodeEditors`,
    FILES: `CodeFiles`
  };
  var _d = class {
  };
  const vd = {
    DragAndDropContribution: `workbench.contributions.dragAndDrop`
  };
  cr.add(vd.DragAndDropContribution, new _d());
  var yd = (_f2 = class {
    constructor() {
    }
    static getInstance() {
      return _f2.INSTANCE;
    }
    hasData(e2) {
      return e2 && e2 === this.proto;
    }
    getData(e2) {
      if (this.hasData(e2)) return this.data;
    }
  }, _f2.INSTANCE = new _f2(), _f2);
  function bd(e2) {
    let t2 = new ud();
    for (let n2 of e2.items) {
      let e3 = n2.type;
      if (n2.kind === `string`) {
        let r2 = new Promise((e4) => n2.getAsString(e4));
        t2.append(e3, cd(r2));
      } else if (n2.kind === `file`) {
        let r2 = n2.getAsFile();
        r2 && t2.append(e3, xd(r2));
      }
    }
    return t2;
  }
  function xd(e2) {
    let t2 = e2.path ? R.parse(e2.path) : void 0;
    return ld(e2.name, t2, async () => new Uint8Array(await e2.arrayBuffer()));
  }
  const Sd = Object.freeze([
    gd.EDITORS,
    gd.FILES,
    he.RESOURCES,
    he.INTERNAL_URI_LIST
  ]);
  function Cd(e2, t2 = false) {
    let n2 = bd(e2), r2 = n2.get(he.INTERNAL_URI_LIST);
    if (r2) n2.replace(Pn.uriList, r2);
    else if (t2 || !n2.has(Pn.uriList)) {
      let t3 = [];
      for (let n3 of e2.items) {
        let e3 = n3.getAsFile();
        if (e3) {
          let n4 = e3.path;
          try {
            n4 ? t3.push(R.file(n4).toString()) : t3.push(R.parse(e3.name, true).toString());
          } catch {
          }
        }
      }
      t3.length && n2.replace(Pn.uriList, cd(md.create(t3)));
    }
    for (let e3 of Sd) n2.delete(e3);
    return n2;
  }
  var wd = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Td = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Ed = class {
    async provideDocumentPasteEdits(e2, t2, n2, r2, i2) {
      let a2 = await this.getEdit(n2, i2);
      if (a2) return {
        edits: [
          {
            insertText: a2.insertText,
            title: a2.title,
            kind: a2.kind,
            handledMimeType: a2.handledMimeType,
            yieldTo: a2.yieldTo
          }
        ],
        dispose() {
        }
      };
    }
    async provideDocumentDropEdits(e2, t2, n2, r2) {
      let i2 = await this.getEdit(n2, r2);
      if (i2) return {
        edits: [
          {
            insertText: i2.insertText,
            title: i2.title,
            kind: i2.kind,
            handledMimeType: i2.handledMimeType,
            yieldTo: i2.yieldTo
          }
        ],
        dispose() {
        }
      };
    }
  }, Dd = (_g2 = class extends Ed {
    constructor() {
      super(...arguments), this.kind = _g2.kind, this.dropMimeTypes = [
        Pn.text
      ], this.pasteMimeTypes = [
        Pn.text
      ];
    }
    async getEdit(e2, t2) {
      let n2 = e2.get(Pn.text);
      if (!n2 || e2.has(Pn.uriList)) return;
      let r2 = await n2.asString();
      return {
        handledMimeType: Pn.text,
        title: U(`text.label`, `Insert Plain Text`),
        insertText: r2,
        kind: this.kind
      };
    }
  }, _g2.id = `text`, _g2.kind = new hd(`text.plain`), _g2), Od = class extends Ed {
    constructor() {
      super(...arguments), this.kind = new hd(`uri.absolute`), this.dropMimeTypes = [
        Pn.uriList
      ], this.pasteMimeTypes = [
        Pn.uriList
      ];
    }
    async getEdit(e2, t2) {
      let n2 = await jd(e2);
      if (!n2.length || t2.isCancellationRequested) return;
      let r2 = 0, i2 = n2.map(({ uri: e3, originalText: t3 }) => e3.scheme === _r.file ? e3.fsPath : (r2++, t3)).join(` `), a2;
      return a2 = r2 > 0 ? n2.length > 1 ? U(`defaultDropProvider.uriList.uris`, `Insert Uris`) : U(`defaultDropProvider.uriList.uri`, `Insert Uri`) : n2.length > 1 ? U(`defaultDropProvider.uriList.paths`, `Insert Paths`) : U(`defaultDropProvider.uriList.path`, `Insert Path`), {
        handledMimeType: Pn.uriList,
        insertText: i2,
        title: a2,
        kind: this.kind
      };
    }
  };
  let kd = class extends Ed {
    constructor(e2) {
      super(), this._workspaceContextService = e2, this.kind = new hd(`uri.relative`), this.dropMimeTypes = [
        Pn.uriList
      ], this.pasteMimeTypes = [
        Pn.uriList
      ];
    }
    async getEdit(e2, t2) {
      let n2 = await jd(e2);
      if (!n2.length || t2.isCancellationRequested) return;
      let r2 = Wi(n2.map(({ uri: e3 }) => {
        let t3 = this._workspaceContextService.getWorkspaceFolder(e3);
        return t3 ? ml(t3.uri, e3) : void 0;
      }));
      if (r2.length) return {
        handledMimeType: Pn.uriList,
        insertText: r2.join(` `),
        title: n2.length > 1 ? U(`defaultDropProvider.uriList.relativePaths`, `Insert Relative Paths`) : U(`defaultDropProvider.uriList.relativePath`, `Insert Relative Path`),
        kind: this.kind
      };
    }
  };
  kd = wd([
    Td(0, Kt)
  ], kd);
  var Ad = class {
    constructor() {
      this.kind = new hd(`html`), this.pasteMimeTypes = [
        `text/html`
      ], this._yieldTo = [
        {
          mimeType: Pn.text
        }
      ];
    }
    async provideDocumentPasteEdits(e2, t2, n2, r2, i2) {
      var _a3;
      if (r2.triggerKind !== Ce.PasteAs && !((_a3 = r2.only) == null ? void 0 : _a3.contains(this.kind))) return;
      let a2 = n2.get(`text/html`), o2 = await (a2 == null ? void 0 : a2.asString());
      if (!(!o2 || i2.isCancellationRequested)) return {
        dispose() {
        },
        edits: [
          {
            insertText: o2,
            yieldTo: this._yieldTo,
            title: U(`pasteHtmlLabel`, `Insert HTML`),
            kind: this.kind
          }
        ]
      };
    }
  };
  async function jd(e2) {
    let t2 = e2.get(Pn.uriList);
    if (!t2) return [];
    let n2 = await t2.asString(), r2 = [];
    for (let e3 of md.parse(n2)) try {
      r2.push({
        uri: R.parse(e3),
        originalText: e3
      });
    } catch {
    }
    return r2;
  }
  let Md = class extends S {
    constructor(e2, t2) {
      super(), this._register(e2.documentDropEditProvider.register(`*`, new Dd())), this._register(e2.documentDropEditProvider.register(`*`, new Od())), this._register(e2.documentDropEditProvider.register(`*`, new kd(t2)));
    }
  };
  Md = wd([
    Td(0, A),
    Td(1, Kt)
  ], Md);
  let Nd = class extends S {
    constructor(e2, t2) {
      super(), this._register(e2.documentPasteEditProvider.register(`*`, new Dd())), this._register(e2.documentPasteEditProvider.register(`*`, new Od())), this._register(e2.documentPasteEditProvider.register(`*`, new kd(t2))), this._register(e2.documentPasteEditProvider.register(`*`, new Ad()));
    }
  };
  Nd = wd([
    Td(0, A),
    Td(1, Kt)
  ], Nd);
  var Pd = (_h2 = class {
    constructor() {
      this.value = ``, this.pos = 0;
    }
    static isDigitCharacter(e2) {
      return e2 >= 48 && e2 <= 57;
    }
    static isVariableCharacter(e2) {
      return e2 === 95 || e2 >= 97 && e2 <= 122 || e2 >= 65 && e2 <= 90;
    }
    text(e2) {
      this.value = e2, this.pos = 0;
    }
    tokenText(e2) {
      return this.value.substr(e2.pos, e2.len);
    }
    next() {
      if (this.pos >= this.value.length) return {
        type: 14,
        pos: this.pos,
        len: 0
      };
      let t2 = this.pos, n2 = 0, r2 = this.value.charCodeAt(t2), i2;
      if (i2 = _h2._table[r2], typeof i2 == `number`) return this.pos += 1, {
        type: i2,
        pos: t2,
        len: 1
      };
      if (_h2.isDigitCharacter(r2)) {
        i2 = 8;
        do
          n2 += 1, r2 = this.value.charCodeAt(t2 + n2);
        while (_h2.isDigitCharacter(r2));
        return this.pos += n2, {
          type: i2,
          pos: t2,
          len: n2
        };
      }
      if (_h2.isVariableCharacter(r2)) {
        i2 = 9;
        do
          r2 = this.value.charCodeAt(t2 + ++n2);
        while (_h2.isVariableCharacter(r2) || _h2.isDigitCharacter(r2));
        return this.pos += n2, {
          type: i2,
          pos: t2,
          len: n2
        };
      }
      i2 = 10;
      do
        n2 += 1, r2 = this.value.charCodeAt(t2 + n2);
      while (!isNaN(r2) && _h2._table[r2] === void 0 && !_h2.isDigitCharacter(r2) && !_h2.isVariableCharacter(r2));
      return this.pos += n2, {
        type: i2,
        pos: t2,
        len: n2
      };
    }
  }, _h2._table = {
    36: 0,
    58: 1,
    44: 2,
    123: 3,
    125: 4,
    92: 5,
    47: 6,
    124: 7,
    43: 11,
    45: 12,
    63: 13
  }, _h2), Fd = class {
    constructor() {
      this._children = [];
    }
    appendChild(e2) {
      return e2 instanceof Id && this._children[this._children.length - 1] instanceof Id ? this._children[this._children.length - 1].value += e2.value : (e2.parent = this, this._children.push(e2)), this;
    }
    replace(e2, t2) {
      let { parent: n2 } = e2, r2 = n2.children.indexOf(e2), i2 = n2.children.slice(0);
      i2.splice(r2, 1, ...t2), n2._children = i2, function e3(t3, n3) {
        for (let r3 of t3) r3.parent = n3, e3(r3.children, r3);
      }(t2, n2);
    }
    get children() {
      return this._children;
    }
    get rightMostDescendant() {
      return this._children.length > 0 ? this._children[this._children.length - 1].rightMostDescendant : this;
    }
    get snippet() {
      let e2 = this;
      for (; ; ) {
        if (!e2) return;
        if (e2 instanceof Wd) return e2;
        e2 = e2.parent;
      }
    }
    toString() {
      return this.children.reduce((e2, t2) => e2 + t2.toString(), ``);
    }
    len() {
      return 0;
    }
  }, Id = class e2 extends Fd {
    constructor(e3) {
      super(), this.value = e3;
    }
    toString() {
      return this.value;
    }
    len() {
      return this.value.length;
    }
    clone() {
      return new e2(this.value);
    }
  }, Ld = class extends Fd {
  }, Rd = class e2 extends Ld {
    static compareByIndex(e3, t2) {
      return e3.index === t2.index ? 0 : e3.isFinalTabstop ? 1 : t2.isFinalTabstop || e3.index < t2.index ? -1 : e3.index > t2.index ? 1 : 0;
    }
    constructor(e3) {
      super(), this.index = e3;
    }
    get isFinalTabstop() {
      return this.index === 0;
    }
    get choice() {
      return this._children.length === 1 && this._children[0] instanceof zd ? this._children[0] : void 0;
    }
    clone() {
      let t2 = new e2(this.index);
      return this.transform && (t2.transform = this.transform.clone()), t2._children = this.children.map((e3) => e3.clone()), t2;
    }
  }, zd = class e2 extends Fd {
    constructor() {
      super(...arguments), this.options = [];
    }
    appendChild(e3) {
      return e3 instanceof Id && (e3.parent = this, this.options.push(e3)), this;
    }
    toString() {
      return this.options[0].value;
    }
    len() {
      return this.options[0].len();
    }
    clone() {
      let t2 = new e2();
      return this.options.forEach(t2.appendChild, t2), t2;
    }
  }, Bd = class e2 extends Fd {
    constructor() {
      super(...arguments), this.regexp = RegExp(``);
    }
    resolve(e3) {
      let t2 = this, n2 = false, r2 = e3.replace(this.regexp, function() {
        return n2 = true, t2._replace(Array.prototype.slice.call(arguments, 0, -2));
      });
      return !n2 && this._children.some((e4) => e4 instanceof Vd && !!e4.elseValue) && (r2 = this._replace([])), r2;
    }
    _replace(e3) {
      let t2 = ``;
      for (let n2 of this._children) if (n2 instanceof Vd) {
        let r2 = e3[n2.index] || ``;
        r2 = n2.resolve(r2), t2 += r2;
      } else t2 += n2.toString();
      return t2;
    }
    toString() {
      return ``;
    }
    clone() {
      let t2 = new e2();
      return t2.regexp = new RegExp(this.regexp.source, (this.regexp.ignoreCase ? `i` : ``) + (this.regexp.global ? `g` : ``)), t2._children = this.children.map((e3) => e3.clone()), t2;
    }
  }, Vd = class e2 extends Fd {
    constructor(e3, t2, n2, r2) {
      super(), this.index = e3, this.shorthandName = t2, this.ifValue = n2, this.elseValue = r2;
    }
    resolve(e3) {
      return this.shorthandName === `upcase` ? e3 ? e3.toLocaleUpperCase() : `` : this.shorthandName === `downcase` ? e3 ? e3.toLocaleLowerCase() : `` : this.shorthandName === `capitalize` ? e3 ? e3[0].toLocaleUpperCase() + e3.substr(1) : `` : this.shorthandName === `pascalcase` ? e3 ? this._toPascalCase(e3) : `` : this.shorthandName === `camelcase` ? e3 ? this._toCamelCase(e3) : `` : e3 && typeof this.ifValue == `string` ? this.ifValue : !e3 && typeof this.elseValue == `string` ? this.elseValue : e3 || ``;
    }
    _toPascalCase(e3) {
      let t2 = e3.match(/[a-z0-9]+/gi);
      return t2 ? t2.map((e4) => e4.charAt(0).toUpperCase() + e4.substr(1)).join(``) : e3;
    }
    _toCamelCase(e3) {
      let t2 = e3.match(/[a-z0-9]+/gi);
      return t2 ? t2.map((e4, t3) => t3 === 0 ? e4.charAt(0).toLowerCase() + e4.substr(1) : e4.charAt(0).toUpperCase() + e4.substr(1)).join(``) : e3;
    }
    clone() {
      let t2 = new e2(this.index, this.shorthandName, this.ifValue, this.elseValue);
      return t2;
    }
  }, Hd = class e2 extends Ld {
    constructor(e3) {
      super(), this.name = e3;
    }
    resolve(e3) {
      let t2 = e3.resolve(this);
      return this.transform && (t2 = this.transform.resolve(t2 || ``)), t2 === void 0 ? false : (this._children = [
        new Id(t2)
      ], true);
    }
    clone() {
      let t2 = new e2(this.name);
      return this.transform && (t2.transform = this.transform.clone()), t2._children = this.children.map((e3) => e3.clone()), t2;
    }
  };
  function Ud(e2, t2) {
    let n2 = [
      ...e2
    ];
    for (; n2.length > 0; ) {
      let e3 = n2.shift(), r2 = t2(e3);
      if (!r2) break;
      n2.unshift(...e3.children);
    }
  }
  var Wd = class e2 extends Fd {
    get placeholderInfo() {
      if (!this._placeholders) {
        let e3 = [], t2;
        this.walk(function(n2) {
          return n2 instanceof Rd && (e3.push(n2), t2 = !t2 || t2.index < n2.index ? n2 : t2), true;
        }), this._placeholders = {
          all: e3,
          last: t2
        };
      }
      return this._placeholders;
    }
    get placeholders() {
      let { all: e3 } = this.placeholderInfo;
      return e3;
    }
    offset(e3) {
      let t2 = 0, n2 = false;
      return this.walk((r2) => r2 === e3 ? (n2 = true, false) : (t2 += r2.len(), true)), n2 ? t2 : -1;
    }
    fullLen(e3) {
      let t2 = 0;
      return Ud([
        e3
      ], (e4) => (t2 += e4.len(), true)), t2;
    }
    enclosingPlaceholders(e3) {
      let t2 = [], { parent: n2 } = e3;
      for (; n2; ) n2 instanceof Rd && t2.push(n2), n2 = n2.parent;
      return t2;
    }
    resolveVariables(e3) {
      return this.walk((t2) => (t2 instanceof Hd && t2.resolve(e3) && (this._placeholders = void 0), true)), this;
    }
    appendChild(e3) {
      return this._placeholders = void 0, super.appendChild(e3);
    }
    replace(e3, t2) {
      return this._placeholders = void 0, super.replace(e3, t2);
    }
    clone() {
      let t2 = new e2();
      return this._children = this.children.map((e3) => e3.clone()), t2;
    }
    walk(e3) {
      Ud(this.children, e3);
    }
  }, Gd = class {
    constructor() {
      this._scanner = new Pd(), this._token = {
        type: 14,
        pos: 0,
        len: 0
      };
    }
    static escape(e2) {
      return e2.replace(/\$|}|\\/g, `\\$&`);
    }
    static guessNeedsClipboard(e2) {
      return /\${?CLIPBOARD/.test(e2);
    }
    parse(e2, t2, n2) {
      let r2 = new Wd();
      return this.parseFragment(e2, r2), this.ensureFinalTabstop(r2, n2 ?? false, t2 ?? false), r2;
    }
    parseFragment(e2, t2) {
      let n2 = t2.children.length;
      for (this._scanner.text(e2), this._token = this._scanner.next(); this._parse(t2); ) ;
      let r2 = /* @__PURE__ */ new Map(), i2 = [];
      t2.walk((e3) => (e3 instanceof Rd && (e3.isFinalTabstop ? r2.set(0, void 0) : !r2.has(e3.index) && e3.children.length > 0 ? r2.set(e3.index, e3.children) : i2.push(e3)), true));
      let a2 = (e3, n3) => {
        let i3 = r2.get(e3.index);
        if (!i3) return;
        let o3 = new Rd(e3.index);
        o3.transform = e3.transform;
        for (let e4 of i3) {
          let t3 = e4.clone();
          o3.appendChild(t3), t3 instanceof Rd && r2.has(t3.index) && !n3.has(t3.index) && (n3.add(t3.index), a2(t3, n3), n3.delete(t3.index));
        }
        t2.replace(e3, [
          o3
        ]);
      }, o2 = /* @__PURE__ */ new Set();
      for (let e3 of i2) a2(e3, o2);
      return t2.children.slice(n2);
    }
    ensureFinalTabstop(e2, t2, n2) {
      if (t2 || n2 && e2.placeholders.length > 0) {
        let t3 = e2.placeholders.find((e3) => e3.index === 0);
        t3 || e2.appendChild(new Rd(0));
      }
    }
    _accept(e2, t2) {
      if (e2 === void 0 || this._token.type === e2) {
        let e3 = t2 ? this._scanner.tokenText(this._token) : true;
        return this._token = this._scanner.next(), e3;
      }
      return false;
    }
    _backTo(e2) {
      return this._scanner.pos = e2.pos + e2.len, this._token = e2, false;
    }
    _until(e2) {
      let t2 = this._token;
      for (; this._token.type !== e2; ) {
        if (this._token.type === 14) return false;
        if (this._token.type === 5) {
          let e3 = this._scanner.next();
          if (e3.type !== 0 && e3.type !== 4 && e3.type !== 5) return false;
        }
        this._token = this._scanner.next();
      }
      let n2 = this._scanner.value.substring(t2.pos, this._token.pos).replace(/\\(\$|}|\\)/g, `$1`);
      return this._token = this._scanner.next(), n2;
    }
    _parse(e2) {
      return this._parseEscaped(e2) || this._parseTabstopOrVariableName(e2) || this._parseComplexPlaceholder(e2) || this._parseComplexVariable(e2) || this._parseAnything(e2);
    }
    _parseEscaped(e2) {
      let t2;
      return (t2 = this._accept(5, true)) ? (t2 = this._accept(0, true) || this._accept(4, true) || this._accept(5, true) || t2, e2.appendChild(new Id(t2)), true) : false;
    }
    _parseTabstopOrVariableName(e2) {
      let t2, n2 = this._token, r2 = this._accept(0) && (t2 = this._accept(9, true) || this._accept(8, true));
      return r2 ? (e2.appendChild(/^\d+$/.test(t2) ? new Rd(Number(t2)) : new Hd(t2)), true) : this._backTo(n2);
    }
    _parseComplexPlaceholder(e2) {
      let t2, n2 = this._token, r2 = this._accept(0) && this._accept(3) && (t2 = this._accept(8, true));
      if (!r2) return this._backTo(n2);
      let i2 = new Rd(Number(t2));
      if (this._accept(1)) for (; ; ) {
        if (this._accept(4)) return e2.appendChild(i2), true;
        if (!this._parse(i2)) return e2.appendChild(new Id("${" + t2 + `:`)), i2.children.forEach(e2.appendChild, e2), true;
      }
      else if (i2.index > 0 && this._accept(7)) {
        let t3 = new zd();
        for (; ; ) {
          if (this._parseChoiceElement(t3)) {
            if (this._accept(2)) continue;
            if (this._accept(7) && (i2.appendChild(t3), this._accept(4))) return e2.appendChild(i2), true;
          }
          return this._backTo(n2), false;
        }
      } else if (this._accept(6)) return this._parseTransform(i2) ? (e2.appendChild(i2), true) : (this._backTo(n2), false);
      else if (this._accept(4)) return e2.appendChild(i2), true;
      else return this._backTo(n2);
    }
    _parseChoiceElement(e2) {
      let t2 = this._token, n2 = [];
      for (; !(this._token.type === 2 || this._token.type === 7); ) {
        let e3;
        if (e3 = (e3 = this._accept(5, true)) ? this._accept(2, true) || this._accept(7, true) || this._accept(5, true) || e3 : this._accept(void 0, true), !e3) return this._backTo(t2), false;
        n2.push(e3);
      }
      return n2.length === 0 ? (this._backTo(t2), false) : (e2.appendChild(new Id(n2.join(``))), true);
    }
    _parseComplexVariable(e2) {
      let t2, n2 = this._token, r2 = this._accept(0) && this._accept(3) && (t2 = this._accept(9, true));
      if (!r2) return this._backTo(n2);
      let i2 = new Hd(t2);
      if (this._accept(1)) for (; ; ) {
        if (this._accept(4)) return e2.appendChild(i2), true;
        if (!this._parse(i2)) return e2.appendChild(new Id("${" + t2 + `:`)), i2.children.forEach(e2.appendChild, e2), true;
      }
      else if (this._accept(6)) return this._parseTransform(i2) ? (e2.appendChild(i2), true) : (this._backTo(n2), false);
      else if (this._accept(4)) return e2.appendChild(i2), true;
      else return this._backTo(n2);
    }
    _parseTransform(e2) {
      let t2 = new Bd(), n2 = ``, r2 = ``;
      for (; !this._accept(6); ) {
        let e3;
        if (e3 = this._accept(5, true)) {
          e3 = this._accept(6, true) || e3, n2 += e3;
          continue;
        }
        if (this._token.type !== 14) {
          n2 += this._accept(void 0, true);
          continue;
        }
        return false;
      }
      for (; !this._accept(6); ) {
        let e3;
        if (e3 = this._accept(5, true)) {
          e3 = this._accept(5, true) || this._accept(6, true) || e3, t2.appendChild(new Id(e3));
          continue;
        }
        if (!(this._parseFormatString(t2) || this._parseAnything(t2))) return false;
      }
      for (; !this._accept(4); ) {
        if (this._token.type !== 14) {
          r2 += this._accept(void 0, true);
          continue;
        }
        return false;
      }
      try {
        t2.regexp = new RegExp(n2, r2);
      } catch {
        return false;
      }
      return e2.transform = t2, true;
    }
    _parseFormatString(e2) {
      let t2 = this._token;
      if (!this._accept(0)) return false;
      let n2 = false;
      this._accept(3) && (n2 = true);
      let r2 = this._accept(8, true);
      if (r2) if (n2) {
        if (this._accept(4)) return e2.appendChild(new Vd(Number(r2))), true;
        if (!this._accept(1)) return this._backTo(t2), false;
      } else return e2.appendChild(new Vd(Number(r2))), true;
      else return this._backTo(t2), false;
      if (this._accept(6)) {
        let n3 = this._accept(9, true);
        return !n3 || !this._accept(4) ? (this._backTo(t2), false) : (e2.appendChild(new Vd(Number(r2), n3)), true);
      } else if (this._accept(11)) {
        let t3 = this._until(4);
        if (t3) return e2.appendChild(new Vd(Number(r2), void 0, t3, void 0)), true;
      } else if (this._accept(12)) {
        let t3 = this._until(4);
        if (t3) return e2.appendChild(new Vd(Number(r2), void 0, void 0, t3)), true;
      } else if (this._accept(13)) {
        let t3 = this._until(1);
        if (t3) {
          let n3 = this._until(4);
          if (n3) return e2.appendChild(new Vd(Number(r2), void 0, t3, n3)), true;
        }
      } else {
        let t3 = this._until(4);
        if (t3) return e2.appendChild(new Vd(Number(r2), void 0, void 0, t3)), true;
      }
      return this._backTo(t2), false;
    }
    _parseAnything(e2) {
      return this._token.type === 14 ? false : (e2.appendChild(new Id(this._scanner.tokenText(this._token))), this._accept(void 0), true);
    }
  };
  function Kd(e2, t2, n2) {
    var _a3, _b3;
    return (typeof n2.insertText == `string` ? n2.insertText === `` : n2.insertText.snippet === ``) ? {
      edits: ((_a3 = n2.additionalEdit) == null ? void 0 : _a3.edits) ?? []
    } : {
      edits: [
        ...t2.map((t3) => new mr(e2, {
          range: t3,
          text: typeof n2.insertText == `string` ? Gd.escape(n2.insertText) + `$0` : n2.insertText.snippet,
          insertAsSnippet: true
        })),
        ...((_b3 = n2.additionalEdit) == null ? void 0 : _b3.edits) ?? []
      ]
    };
  }
  function qd(e2) {
    function t2(e3, t3) {
      return `mimeType` in e3 ? e3.mimeType === t3.handledMimeType : !!t3.kind && e3.kind.contains(t3.kind);
    }
    let n2 = /* @__PURE__ */ new Map();
    for (let r3 of e2) for (let i3 of r3.yieldTo ?? []) for (let a3 of e2) {
      if (a3 === r3) continue;
      if (t2(i3, a3)) {
        let e3 = n2.get(r3);
        e3 || (e3 = [], n2.set(r3, e3)), e3.push(a3);
      }
    }
    if (!n2.size) return Array.from(e2);
    let r2 = /* @__PURE__ */ new Set(), i2 = [];
    function a2(e3) {
      if (!e3.length) return [];
      let t3 = e3[0];
      if (i2.includes(t3)) return console.warn(`Yield to cycle detected`, t3), e3;
      if (r2.has(t3)) return a2(e3.slice(1));
      let o2 = [], s2 = n2.get(t3);
      return s2 && (i2.push(t3), o2 = a2(s2), i2.pop()), r2.add(t3), [
        ...o2,
        t3,
        ...a2(e3.slice(1))
      ];
    }
    return a2(Array.from(e2));
  }
  var Jd = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Yd = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const Xd = M.register({
    description: `inline-progress-widget`,
    stickiness: 1,
    showIfCollapsed: true,
    after: {
      content: Mc,
      inlineClassName: `inline-editor-progress-decoration`,
      inlineClassNameAffectsLetterSpacing: true
    }
  });
  var Zd = (_i2 = class extends S {
    constructor(e2, t2, n2, r2, i2) {
      super(), this.typeId = e2, this.editor = t2, this.range = n2, this.delegate = i2, this.allowEditorOverflow = false, this.suppressMouseDown = true, this.create(r2), this.editor.addContentWidget(this), this.editor.layoutContentWidget(this);
    }
    create(e2) {
      this.domNode = r(`.inline-progress-widget`), this.domNode.role = `button`, this.domNode.title = e2;
      let t2 = r(`span.icon`);
      this.domNode.append(t2), t2.classList.add(...L.asClassNameArray(_.loading), `codicon-modifier-spin`);
      let n2 = () => {
        let e3 = this.editor.getOption(67);
        this.domNode.style.height = `${e3}px`, this.domNode.style.width = `${Math.ceil(0.8 * e3)}px`;
      };
      n2(), this._register(this.editor.onDidChangeConfiguration((e3) => {
        (e3.hasChanged(52) || e3.hasChanged(67)) && n2();
      })), this._register(z(this.domNode, He.CLICK, (e3) => {
        this.delegate.cancel();
      }));
    }
    getId() {
      return _i2.baseId + `.` + this.typeId;
    }
    getDomNode() {
      return this.domNode;
    }
    getPosition() {
      return {
        position: {
          lineNumber: this.range.startLineNumber,
          column: this.range.startColumn
        },
        preference: [
          0
        ]
      };
    }
    dispose() {
      super.dispose(), this.editor.removeContentWidget(this);
    }
  }, _i2.baseId = `editor.widget.inlineProgressWidget`, _i2);
  let Qd = class extends S {
    constructor(e2, t2, n2) {
      super(), this.id = e2, this._editor = t2, this._instantiationService = n2, this._showDelay = 500, this._showPromise = this._register(new Bn()), this._currentWidget = this._register(new Bn()), this._operationIdPool = 0, this._currentDecorations = t2.createDecorationsCollection();
    }
    dispose() {
      super.dispose(), this._currentDecorations.clear();
    }
    async showWhile(e2, t2, n2, r2, i2) {
      let a2 = this._operationIdPool++;
      this._currentOperation = a2, this.clear(), this._showPromise.value = La(() => {
        let n3 = P.fromPositions(e2), i3 = this._currentDecorations.set([
          {
            range: n3,
            options: Xd
          }
        ]);
        i3.length > 0 && (this._currentWidget.value = this._instantiationService.createInstance(Zd, this.id, this._editor, n3, t2, r2));
      }, i2 ?? this._showDelay);
      try {
        return await n2;
      } finally {
        this._currentOperation === a2 && (this.clear(), this._currentOperation = void 0);
      }
    }
    clear() {
      this._showPromise.clear(), this._currentDecorations.clear(), this._currentWidget.clear();
    }
  };
  Qd = Jd([
    Yd(2, k)
  ], Qd);
  var $d = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ef = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, tf;
  let nf = (_j2 = class {
    static get(e2) {
      return e2.getContribution(tf.ID);
    }
    constructor(e2, t2, n2) {
      this._openerService = n2, this._messageWidget = new Bn(), this._messageListeners = new C(), this._mouseOverMessage = false, this._editor = e2, this._visible = tf.MESSAGE_VISIBLE.bindTo(t2);
    }
    dispose() {
      var _a3;
      (_a3 = this._message) == null ? void 0 : _a3.dispose(), this._messageListeners.dispose(), this._messageWidget.dispose(), this._visible.reset();
    }
    showMessage(e2, t2) {
      Ci(Js(e2) ? e2.value : e2), this._visible.set(true), this._messageWidget.clear(), this._messageListeners.clear(), this._message = Js(e2) ? vl(e2, {
        actionHandler: {
          callback: (t3) => {
            this.closeMessage(), Gc(this._openerService, t3, Js(e2) ? e2.isTrusted : void 0);
          },
          disposables: this._messageListeners
        }
      }) : void 0, this._messageWidget.value = new af(this._editor, t2, typeof e2 == `string` ? e2 : this._message.element), this._messageListeners.add(ze.debounce(this._editor.onDidBlurEditorText, (e3, t3) => t3, 0)(() => {
        this._mouseOverMessage || this._messageWidget.value && bs(No(), this._messageWidget.value.getDomNode()) || this.closeMessage();
      })), this._messageListeners.add(this._editor.onDidChangeCursorPosition(() => this.closeMessage())), this._messageListeners.add(this._editor.onDidDispose(() => this.closeMessage())), this._messageListeners.add(this._editor.onDidChangeModel(() => this.closeMessage())), this._messageListeners.add(z(this._messageWidget.value.getDomNode(), He.MOUSE_ENTER, () => this._mouseOverMessage = true, true)), this._messageListeners.add(z(this._messageWidget.value.getDomNode(), He.MOUSE_LEAVE, () => this._mouseOverMessage = false, true));
      let n2;
      this._messageListeners.add(this._editor.onMouseMove((e3) => {
        e3.target.position && (n2 ? n2.containsPosition(e3.target.position) || this.closeMessage() : n2 = new P(t2.lineNumber - 3, 1, e3.target.position.lineNumber + 3, 1));
      }));
    }
    closeMessage() {
      this._visible.reset(), this._messageListeners.clear(), this._messageWidget.value && this._messageListeners.add(af.fadeOut(this._messageWidget.value));
    }
  }, tf = _j2, _j2.ID = `editor.contrib.messageController`, _j2.MESSAGE_VISIBLE = new F(`messageVisible`, false, U(`messageVisible`, `Whether the editor is currently showing an inline message`)), _j2);
  nf = tf = $d([
    ef(1, O),
    ef(2, It)
  ], nf);
  const rf = Ae.bindToContribution(nf.get);
  Y(new rf({
    id: `leaveEditorMessage`,
    precondition: nf.MESSAGE_VISIBLE,
    handler: (e2) => e2.closeMessage(),
    kbOpts: {
      weight: 130,
      primary: 9
    }
  }));
  var af = class {
    static fadeOut(e2) {
      let t2 = () => {
        e2.dispose(), clearTimeout(n2), e2.getDomNode().removeEventListener(`animationend`, t2);
      }, n2 = setTimeout(t2, 110);
      return e2.getDomNode().addEventListener(`animationend`, t2), e2.getDomNode().classList.add(`fadeOut`), {
        dispose: t2
      };
    }
    constructor(e2, { lineNumber: t2, column: n2 }, r2) {
      this.allowEditorOverflow = true, this.suppressMouseDown = false, this._editor = e2, this._editor.revealLinesInCenterIfOutsideViewport(t2, t2, 0), this._position = {
        lineNumber: t2,
        column: n2
      }, this._domNode = document.createElement(`div`), this._domNode.classList.add(`monaco-editor-overlaymessage`), this._domNode.style.marginLeft = `-6px`;
      let i2 = document.createElement(`div`);
      i2.classList.add(`anchor`, `top`), this._domNode.appendChild(i2);
      let a2 = document.createElement(`div`);
      typeof r2 == `string` ? (a2.classList.add(`message`), a2.textContent = r2) : (r2.classList.add(`message`), a2.appendChild(r2)), this._domNode.appendChild(a2);
      let o2 = document.createElement(`div`);
      o2.classList.add(`anchor`, `below`), this._domNode.appendChild(o2), this._editor.addContentWidget(this), this._domNode.classList.add(`fadeIn`);
    }
    dispose() {
      this._editor.removeContentWidget(this);
    }
    getId() {
      return `messageoverlay`;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return {
        position: this._position,
        preference: [
          1,
          2
        ],
        positionAffinity: 1
      };
    }
    afterRender(e2) {
      this._domNode.classList.toggle(`below`, e2 === 2);
    }
  };
  X(nf.ID, nf, 4);
  function sf(e2, t2) {
    return t2 && (e2.stack || e2.stacktrace) ? U(`stackTrace.format`, `{0}: {1}`, lf(e2), cf(e2.stack) || cf(e2.stacktrace)) : lf(e2);
  }
  function cf(e2) {
    return Array.isArray(e2) ? e2.join(`
`) : e2;
  }
  function lf(e2) {
    return e2.code === `ERR_UNC_HOST_NOT_ALLOWED` ? `${e2.message}. Please update the 'security.allowedUNCHosts' setting if you want to allow this host.` : typeof e2.code == `string` && typeof e2.errno == `number` && typeof e2.syscall == `string` ? U(`nodeExceptionMessage`, `A system error occurred ({0})`, e2.message) : e2.message || U(`error.defaultMessage`, `An unknown error occurred. Please consult the log for more details.`);
  }
  function uf(e2 = null, t2 = false) {
    if (!e2) return U(`error.defaultMessage`, `An unknown error occurred. Please consult the log for more details.`);
    if (Array.isArray(e2)) {
      let n2 = Wi(e2), r2 = uf(n2[0], t2);
      return n2.length > 1 ? U(`error.moreErrors`, `{0} ({1} errors in total)`, r2, n2.length) : r2;
    }
    if (ic(e2)) return e2;
    if (e2.detail) {
      let n2 = e2.detail;
      if (n2.error) return sf(n2.error, t2);
      if (n2.exception) return sf(n2.exception, t2);
    }
    return e2.stack ? sf(e2, t2) : e2.message ? e2.message : U(`error.defaultMessage`, `An unknown error occurred. Please consult the log for more details.`);
  }
  var df = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ff = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, pf;
  let mf = (_k2 = class extends S {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2) {
      super(), this.typeId = e2, this.editor = t2, this.showCommand = r2, this.range = i2, this.edits = a2, this.onSelectNewEdit = o2, this._contextMenuService = s2, this._keybindingService = l2, this.allowEditorOverflow = true, this.suppressMouseDown = true, this.create(), this.visibleContext = n2.bindTo(c2), this.visibleContext.set(true), this._register(Hl(() => this.visibleContext.reset())), this.editor.addContentWidget(this), this.editor.layoutContentWidget(this), this._register(Hl(() => this.editor.removeContentWidget(this))), this._register(this.editor.onDidChangeCursorPosition((e3) => {
        i2.containsPosition(e3.position) || this.dispose();
      })), this._register(ze.runAndSubscribe(l2.onDidUpdateKeybindings, () => {
        this._updateButtonTitle();
      }));
    }
    _updateButtonTitle() {
      var _a3;
      let e2 = (_a3 = this._keybindingService.lookupKeybinding(this.showCommand.id)) == null ? void 0 : _a3.getLabel();
      this.button.element.title = this.showCommand.label + (e2 ? ` (${e2})` : ``);
    }
    create() {
      this.domNode = r(`.post-edit-widget`), this.button = this._register(new d(this.domNode, {
        supportIcons: true
      })), this.button.label = `$(insert)`, this._register(z(this.domNode, He.CLICK, () => this.showSelector()));
    }
    getId() {
      return pf.baseId + `.` + this.typeId;
    }
    getDomNode() {
      return this.domNode;
    }
    getPosition() {
      return {
        position: this.range.getEndPosition(),
        preference: [
          2
        ]
      };
    }
    showSelector() {
      this._contextMenuService.showContextMenu({
        getAnchor: () => {
          let e2 = Vo(this.button.element);
          return {
            x: e2.left + e2.width,
            y: e2.top + e2.height
          };
        },
        getActions: () => this.edits.allEdits.map((e2, t2) => Vl({
          id: ``,
          label: e2.title,
          checked: t2 === this.edits.activeEditIndex,
          run: () => {
            if (t2 !== this.edits.activeEditIndex) return this.onSelectNewEdit(t2);
          }
        }))
      });
    }
  }, pf = _k2, _k2.baseId = `editor.widget.postEditWidget`, _k2);
  mf = pf = df([
    ff(7, ht),
    ff(8, O),
    ff(9, Ct)
  ], mf);
  let hf = class extends S {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(), this._id = e2, this._editor = t2, this._visibleContext = n2, this._showCommand = r2, this._instantiationService = i2, this._bulkEditService = a2, this._notificationService = o2, this._currentWidget = this._register(new Bn()), this._register(ze.any(t2.onDidChangeModel, t2.onDidChangeModelContent)(() => this.clear()));
    }
    async applyEditAndShowIfNeeded(e2, t2, n2, r2, i2) {
      let a2 = this._editor.getModel();
      if (!a2 || !e2.length) return;
      let o2 = t2.allEdits.at(t2.activeEditIndex);
      if (!o2) return;
      let s2 = async (a3) => {
        let o3 = this._editor.getModel();
        o3 && (await o3.undo(), this.applyEditAndShowIfNeeded(e2, {
          activeEditIndex: a3,
          allEdits: t2.allEdits
        }, n2, r2, i2));
      }, c2 = (r3, i3) => {
        Ss(r3) || (this._notificationService.error(i3), n2 && this.show(e2[0], t2, s2));
      }, l2;
      try {
        l2 = await r2(o2, i2);
      } catch (e3) {
        return c2(e3, U(`resolveError`, `Error resolving edit '{0}':
{1}`, o2.title, uf(e3)));
      }
      if (i2.isCancellationRequested) return;
      let u2 = Kd(a2.uri, e2, l2), d2 = e2[0], f2 = a2.deltaDecorations([], [
        {
          range: d2,
          options: {
            description: `paste-line-suffix`,
            stickiness: 0
          }
        }
      ]);
      this._editor.focus();
      let p2, m2;
      try {
        p2 = await this._bulkEditService.apply(u2, {
          editor: this._editor,
          token: i2
        }), m2 = a2.getDecorationRange(f2[0]);
      } catch (e3) {
        return c2(e3, U(`applyError`, `Error applying edit '{0}':
{1}`, o2.title, uf(e3)));
      } finally {
        a2.deltaDecorations(f2, []);
      }
      i2.isCancellationRequested || n2 && p2.isApplied && t2.allEdits.length > 1 && this.show(m2 ?? d2, t2, s2);
    }
    show(e2, t2, n2) {
      this.clear(), this._editor.hasModel() && (this._currentWidget.value = this._instantiationService.createInstance(mf, this._id, this._editor, this._visibleContext, this._showCommand, e2, t2, n2));
    }
    clear() {
      this._currentWidget.clear();
    }
    tryShowSelector() {
      var _a3;
      (_a3 = this._currentWidget.value) == null ? void 0 : _a3.showSelector();
    }
  };
  hf = df([
    ff(4, k),
    ff(5, dt),
    ff(6, Ft)
  ], hf);
  var gf = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, _f = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, vf;
  const yf = `editor.changePasteType`, bf = new F(`pasteWidgetVisible`, false, U(`pasteWidgetVisible`, `Whether the paste widget is showing`)), xf = `application/vnd.code.copyMetadata`;
  let Sf = (_l2 = class extends S {
    static get(e2) {
      return e2.getContribution(vf.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(), this._bulkEditService = n2, this._clipboardService = r2, this._languageFeaturesService = i2, this._quickInputService = a2, this._progressService = o2, this._editor = e2;
      let s2 = e2.getContainerDomNode();
      this._register(z(s2, `copy`, (e3) => this.handleCopy(e3))), this._register(z(s2, `cut`, (e3) => this.handleCopy(e3))), this._register(z(s2, `paste`, (e3) => this.handlePaste(e3), true)), this._pasteProgressManager = this._register(new Qd(`pasteIntoEditor`, e2, t2)), this._postPasteWidgetManager = this._register(t2.createInstance(hf, `pasteIntoEditor`, e2, bf, {
        id: yf,
        label: U(`postPasteWidgetTitle`, `Show paste options...`)
      }));
    }
    changePasteType() {
      this._postPasteWidgetManager.tryShowSelector();
    }
    pasteAs(e2) {
      this._editor.focus();
      try {
        this._pasteAsActionContext = {
          preferred: e2
        }, Mo().execCommand(`paste`);
      } finally {
        this._pasteAsActionContext = void 0;
      }
    }
    clearWidgets() {
      this._postPasteWidgetManager.clear();
    }
    isPasteAsEnabled() {
      return this._editor.getOption(85).enabled;
    }
    async finishedPaste() {
      await this._currentPasteOperation;
    }
    handleCopy(e2) {
      var _a3, _b3, _c3, _d3;
      if (!this._editor.hasTextFocus() || ((_b3 = (_a3 = this._clipboardService).clearInternalState) == null ? void 0 : _b3.call(_a3), !e2.clipboardData || !this.isPasteAsEnabled())) return;
      let t2 = this._editor.getModel(), n2 = this._editor.getSelections();
      if (!t2 || !(n2 == null ? void 0 : n2.length)) return;
      let r2 = this._editor.getOption(37), i2 = n2, a2 = n2.length === 1 && n2[0].isEmpty();
      if (a2) {
        if (!r2) return;
        i2 = [
          new P(i2[0].startLineNumber, 1, i2[0].startLineNumber, 1 + t2.getLineLength(i2[0].startLineNumber))
        ];
      }
      let o2 = (_c3 = this._editor._getViewModel()) == null ? void 0 : _c3.getPlainTextToCopy(n2, r2, cc), s2 = Array.isArray(o2) ? o2 : null, c2 = {
        multicursorText: s2,
        pasteOnNewLine: a2,
        mode: null
      }, l2 = this._languageFeaturesService.documentPasteEditProvider.ordered(t2).filter((e3) => !!e3.prepareDocumentPaste);
      if (!l2.length) {
        this.setCopyMetadata(e2.clipboardData, {
          defaultPastePayload: c2
        });
        return;
      }
      let u2 = bd(e2.clipboardData), d2 = l2.flatMap((e3) => e3.copyMimeTypes ?? []), f2 = sd();
      this.setCopyMetadata(e2.clipboardData, {
        id: f2,
        providerCopyMimeTypes: d2,
        defaultPastePayload: c2
      });
      let p2 = sa(async (e3) => {
        let n3 = Wi(await Promise.all(l2.map(async (n4) => {
          try {
            return await n4.prepareDocumentPaste(t2, i2, u2, e3);
          } catch (e4) {
            console.error(e4);
            return;
          }
        })));
        n3.reverse();
        for (let e4 of n3) for (let [t3, n4] of e4) u2.replace(t3, n4);
        return u2;
      });
      (_d3 = vf._currentCopyOperation) == null ? void 0 : _d3.dataTransferPromise.cancel(), vf._currentCopyOperation = {
        handle: f2,
        dataTransferPromise: p2
      };
    }
    async handlePaste(e2) {
      var _a3, _b3, _c3;
      if (!e2.clipboardData || !this._editor.hasTextFocus()) return;
      (_a3 = nf.get(this._editor)) == null ? void 0 : _a3.closeMessage(), (_b3 = this._currentPasteOperation) == null ? void 0 : _b3.cancel(), this._currentPasteOperation = void 0;
      let t2 = this._editor.getModel(), n2 = this._editor.getSelections();
      if (!(n2 == null ? void 0 : n2.length) || !t2 || this._editor.getOption(92) || !this.isPasteAsEnabled() && !this._pasteAsActionContext) return;
      let r2 = this.fetchCopyMetadata(e2), i2 = Cd(e2.clipboardData);
      i2.delete(xf);
      let a2 = [
        ...e2.clipboardData.types,
        ...(r2 == null ? void 0 : r2.providerCopyMimeTypes) ?? [],
        Pn.uriList
      ], o2 = this._languageFeaturesService.documentPasteEditProvider.ordered(t2).filter((e3) => {
        var _a4, _b4;
        let t3 = (_a4 = this._pasteAsActionContext) == null ? void 0 : _a4.preferred;
        return t3 && e3.providedPasteEditKinds && !this.providerMatchesPreference(e3, t3) ? false : (_b4 = e3.pasteMimeTypes) == null ? void 0 : _b4.some((e4) => fd(e4, a2));
      });
      if (!o2.length) {
        ((_c3 = this._pasteAsActionContext) == null ? void 0 : _c3.preferred) && this.showPasteAsNoEditMessage(n2, this._pasteAsActionContext.preferred);
        return;
      }
      e2.preventDefault(), e2.stopImmediatePropagation(), this._pasteAsActionContext ? this.showPasteAsPick(this._pasteAsActionContext.preferred, o2, n2, i2, r2) : this.doPasteInline(o2, n2, i2, r2, e2);
    }
    showPasteAsNoEditMessage(e2, t2) {
      var _a3;
      (_a3 = nf.get(this._editor)) == null ? void 0 : _a3.showMessage(U(`pasteAsError`, `No paste edits for '{0}' found`, t2 instanceof hd ? t2.value : t2.providerId), e2[0].getStartPosition());
    }
    doPasteInline(e2, t2, n2, r2, i2) {
      let a2 = this._editor;
      if (!a2.hasModel()) return;
      let o2 = new Fe(a2, 3, void 0), s2 = sa(async (a3) => {
        let c2 = this._editor;
        if (!c2.hasModel()) return;
        let l2 = c2.getModel(), u2 = new C(), d2 = u2.add(new g(a3));
        u2.add(o2.token.onCancellationRequested(() => d2.cancel()));
        let f2 = d2.token;
        try {
          if (await this.mergeInDataFromCopy(n2, r2, f2), f2.isCancellationRequested) return;
          let a4 = e2.filter((e3) => this.isSupportedPasteProvider(e3, n2));
          if (!a4.length || a4.length === 1 && a4[0] instanceof Dd) return this.applyDefaultPasteHandler(n2, r2, f2, i2);
          let o3 = {
            triggerKind: Ce.Automatic
          }, s3 = await this.getPasteEdits(a4, n2, l2, t2, o3, f2);
          if (u2.add(s3), f2.isCancellationRequested) return;
          if (s3.edits.length === 1 && s3.edits[0].provider instanceof Dd) return this.applyDefaultPasteHandler(n2, r2, f2, i2);
          if (s3.edits.length) {
            let e3 = c2.getOption(85).showPasteSelector === `afterPaste`;
            return this._postPasteWidgetManager.applyEditAndShowIfNeeded(t2, {
              activeEditIndex: 0,
              allEdits: s3.edits
            }, e3, (e4, n3) => new Promise((r3, i3) => {
              (async () => {
                var _a3, _b3;
                try {
                  let a5 = (_b3 = (_a3 = e4.provider).resolveDocumentPasteEdit) == null ? void 0 : _b3.call(_a3, e4, n3), o4 = new _e(), s4 = a5 && await this._pasteProgressManager.showWhile(t2[0].getEndPosition(), U(`resolveProcess`, `Resolving paste edit. Click to cancel`), Promise.race([
                    o4.p,
                    a5
                  ]), {
                    cancel: () => (o4.cancel(), i3(new p()))
                  }, 0);
                  return s4 && (e4.additionalEdit = s4.additionalEdit), r3(e4);
                } catch (e5) {
                  return i3(e5);
                }
              })();
            }), f2);
          }
          await this.applyDefaultPasteHandler(n2, r2, f2, i2);
        } finally {
          u2.dispose(), this._currentPasteOperation === s2 && (this._currentPasteOperation = void 0);
        }
      });
      this._pasteProgressManager.showWhile(t2[0].getEndPosition(), U(`pasteIntoEditorProgress`, `Running paste handlers. Click to cancel and do basic paste`), s2, {
        cancel: async () => {
          try {
            if (s2.cancel(), o2.token.isCancellationRequested) return;
            await this.applyDefaultPasteHandler(n2, r2, o2.token, i2);
          } finally {
            o2.dispose();
          }
        }
      }).then(() => {
        o2.dispose();
      }), this._currentPasteOperation = s2;
    }
    showPasteAsPick(e2, t2, n2, r2, i2) {
      let a2 = sa(async (o2) => {
        let s2 = this._editor;
        if (!s2.hasModel()) return;
        let c2 = s2.getModel(), l2 = new C(), u2 = l2.add(new Fe(s2, 3, void 0, o2));
        try {
          if (await this.mergeInDataFromCopy(r2, i2, u2.token), u2.token.isCancellationRequested) return;
          let a3 = t2.filter((t3) => this.isSupportedPasteProvider(t3, r2, e2));
          e2 && (a3 = a3.filter((t3) => this.providerMatchesPreference(t3, e2)));
          let o3 = {
            triggerKind: Ce.PasteAs,
            only: e2 && e2 instanceof hd ? e2 : void 0
          }, s3 = l2.add(await this.getPasteEdits(a3, r2, c2, n2, o3, u2.token));
          if (u2.token.isCancellationRequested) return;
          if (e2 && (s3 = {
            edits: s3.edits.filter((t3) => e2 instanceof hd ? e2.contains(t3.kind) : e2.providerId === t3.provider.id),
            dispose: s3.dispose
          }), !s3.edits.length) {
            o3.only && this.showPasteAsNoEditMessage(n2, o3.only);
            return;
          }
          let d2;
          if (e2) d2 = s3.edits.at(0);
          else {
            let e3 = await this._quickInputService.pick(s3.edits.map((e4) => {
              var _a3;
              return {
                label: e4.title,
                description: (_a3 = e4.kind) == null ? void 0 : _a3.value,
                edit: e4
              };
            }), {
              placeHolder: U(`pasteAsPickerPlaceholder`, `Select Paste Action`)
            });
            d2 = e3 == null ? void 0 : e3.edit;
          }
          if (!d2) return;
          let f2 = Kd(c2.uri, n2, d2);
          await this._bulkEditService.apply(f2, {
            editor: this._editor
          });
        } finally {
          l2.dispose(), this._currentPasteOperation === a2 && (this._currentPasteOperation = void 0);
        }
      });
      this._progressService.withProgress({
        location: 10,
        title: U(`pasteAsProgress`, `Running paste handlers`)
      }, () => a2);
    }
    setCopyMetadata(e2, t2) {
      e2.setData(xf, JSON.stringify(t2));
    }
    fetchCopyMetadata(e2) {
      if (!e2.clipboardData) return;
      let t2 = e2.clipboardData.getData(xf);
      if (t2) try {
        return JSON.parse(t2);
      } catch {
        return;
      }
      let [n2, r2] = re.getTextData(e2.clipboardData);
      if (r2) return {
        defaultPastePayload: {
          mode: r2.mode,
          multicursorText: r2.multicursorText ?? null,
          pasteOnNewLine: !!r2.isFromEmptySelection
        }
      };
    }
    async mergeInDataFromCopy(e2, t2, n2) {
      var _a3;
      if ((t2 == null ? void 0 : t2.id) && ((_a3 = vf._currentCopyOperation) == null ? void 0 : _a3.handle) === t2.id) {
        let t3 = await vf._currentCopyOperation.dataTransferPromise;
        if (n2.isCancellationRequested) return;
        for (let [n3, r2] of t3) e2.replace(n3, r2);
      }
      if (!e2.has(Pn.uriList)) {
        let t3 = await this._clipboardService.readResources();
        if (n2.isCancellationRequested) return;
        t3.length && e2.append(Pn.uriList, cd(md.create(t3)));
      }
    }
    async getPasteEdits(e2, t2, n2, r2, i2, a2) {
      let o2 = new C(), s2 = await nl(Promise.all(e2.map(async (e3) => {
        var _a3, _b3;
        try {
          let s3 = await ((_a3 = e3.provideDocumentPasteEdits) == null ? void 0 : _a3.call(e3, n2, r2, t2, i2, a2));
          return s3 && o2.add(s3), (_b3 = s3 == null ? void 0 : s3.edits) == null ? void 0 : _b3.map((t3) => ({
            ...t3,
            provider: e3
          }));
        } catch (e4) {
          Ss(e4) || console.error(e4);
          return;
        }
      })), a2), c2 = Wi(s2 ?? []).flat().filter((e3) => !i2.only || i2.only.contains(e3.kind));
      return {
        edits: qd(c2),
        dispose: () => o2.dispose()
      };
    }
    async applyDefaultPasteHandler(e2, t2, n2, r2) {
      let i2 = e2.get(Pn.text) ?? e2.get(`text`), a2 = await (i2 == null ? void 0 : i2.asString()) ?? ``;
      if (n2.isCancellationRequested) return;
      let o2 = {
        clipboardEvent: r2,
        text: a2,
        pasteOnNewLine: (t2 == null ? void 0 : t2.defaultPastePayload.pasteOnNewLine) ?? false,
        multicursorText: (t2 == null ? void 0 : t2.defaultPastePayload.multicursorText) ?? null,
        mode: null
      };
      this._editor.trigger(`keyboard`, `paste`, o2);
    }
    isSupportedPasteProvider(e2, t2, n2) {
      var _a3;
      return ((_a3 = e2.pasteMimeTypes) == null ? void 0 : _a3.some((e3) => t2.matches(e3))) ? !n2 || this.providerMatchesPreference(e2, n2) : false;
    }
    providerMatchesPreference(e2, t2) {
      return t2 instanceof hd ? e2.providedPasteEditKinds ? e2.providedPasteEditKinds.some((e3) => t2.contains(e3)) : true : e2.id === t2.providerId;
    }
  }, vf = _l2, _l2.ID = `editor.contrib.copyPasteActionController`, _l2);
  Sf = vf = gf([
    _f(1, k),
    _f(2, dt),
    _f(3, ft),
    _f(4, A),
    _f(5, Rt),
    _f(6, Lt)
  ], Sf);
  const Cf = `9_cutcopypaste`, wf = Qs || document.queryCommandSupported(`cut`), Tf = Qs || document.queryCommandSupported(`copy`), Ef = navigator.clipboard === void 0 || Ns ? document.queryCommandSupported(`paste`) : true;
  function Df(e2) {
    return e2.register(), e2;
  }
  const Of = wf ? Df(new Rn({
    id: `editor.action.clipboardCutAction`,
    precondition: void 0,
    kbOpts: Qs ? {
      primary: 2102,
      win: {
        primary: 2102,
        secondary: [
          1044
        ]
      },
      weight: 100
    } : void 0,
    menuOpts: [
      {
        menuId: j.MenubarEditMenu,
        group: `2_ccp`,
        title: U({
          key: `miCut`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `Cu&&t`),
        order: 1
      },
      {
        menuId: j.EditorContext,
        group: Cf,
        title: U(`actions.clipboard.cutLabel`, `Cut`),
        when: T.writable,
        order: 1
      },
      {
        menuId: j.CommandPalette,
        group: ``,
        title: U(`actions.clipboard.cutLabel`, `Cut`),
        order: 1
      },
      {
        menuId: j.SimpleEditorContext,
        group: Cf,
        title: U(`actions.clipboard.cutLabel`, `Cut`),
        when: T.writable,
        order: 1
      }
    ]
  })) : void 0, kf = Tf ? Df(new Rn({
    id: `editor.action.clipboardCopyAction`,
    precondition: void 0,
    kbOpts: Qs ? {
      primary: 2081,
      win: {
        primary: 2081,
        secondary: [
          2067
        ]
      },
      weight: 100
    } : void 0,
    menuOpts: [
      {
        menuId: j.MenubarEditMenu,
        group: `2_ccp`,
        title: U({
          key: `miCopy`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Copy`),
        order: 2
      },
      {
        menuId: j.EditorContext,
        group: Cf,
        title: U(`actions.clipboard.copyLabel`, `Copy`),
        order: 2
      },
      {
        menuId: j.CommandPalette,
        group: ``,
        title: U(`actions.clipboard.copyLabel`, `Copy`),
        order: 1
      },
      {
        menuId: j.SimpleEditorContext,
        group: Cf,
        title: U(`actions.clipboard.copyLabel`, `Copy`),
        order: 2
      }
    ]
  })) : void 0;
  Nn.appendMenuItem(j.MenubarEditMenu, {
    submenu: j.MenubarCopy,
    title: W(`copy as`, `Copy As`),
    group: `2_ccp`,
    order: 3
  }), Nn.appendMenuItem(j.EditorContext, {
    submenu: j.EditorContextCopy,
    title: W(`copy as`, `Copy As`),
    group: Cf,
    order: 3
  }), Nn.appendMenuItem(j.EditorContext, {
    submenu: j.EditorContextShare,
    title: W(`share`, `Share`),
    group: `11_share`,
    order: -1,
    when: b.and(b.notEquals(`resourceScheme`, `output`), T.editorTextFocus)
  }), Nn.appendMenuItem(j.ExplorerContext, {
    submenu: j.ExplorerContextShare,
    title: W(`share`, `Share`),
    group: `11_share`,
    order: -1
  });
  const Af = Ef ? Df(new Rn({
    id: `editor.action.clipboardPasteAction`,
    precondition: void 0,
    kbOpts: Qs ? {
      primary: 2100,
      win: {
        primary: 2100,
        secondary: [
          1043
        ]
      },
      linux: {
        primary: 2100,
        secondary: [
          1043
        ]
      },
      weight: 100
    } : void 0,
    menuOpts: [
      {
        menuId: j.MenubarEditMenu,
        group: `2_ccp`,
        title: U({
          key: `miPaste`,
          comment: [
            `&& denotes a mnemonic`
          ]
        }, `&&Paste`),
        order: 4
      },
      {
        menuId: j.EditorContext,
        group: Cf,
        title: U(`actions.clipboard.pasteLabel`, `Paste`),
        when: T.writable,
        order: 4
      },
      {
        menuId: j.CommandPalette,
        group: ``,
        title: U(`actions.clipboard.pasteLabel`, `Paste`),
        order: 1
      },
      {
        menuId: j.SimpleEditorContext,
        group: Cf,
        title: U(`actions.clipboard.pasteLabel`, `Paste`),
        when: T.writable,
        order: 4
      }
    ]
  })) : void 0;
  var jf = class extends w {
    constructor() {
      super({
        id: `editor.action.clipboardCopyWithSyntaxHighlightingAction`,
        label: U(`actions.clipboard.copyWithSyntaxHighlightingLabel`, `Copy With Syntax Highlighting`),
        alias: `Copy With Syntax Highlighting`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getOption(37);
      !n2 && t2.getSelection().isEmpty() || (ce.forceCopyWithSyntaxHighlighting = true, t2.focus(), t2.getContainerDomNode().ownerDocument.execCommand(`copy`), ce.forceCopyWithSyntaxHighlighting = false);
    }
  };
  function Mf(e2, t2) {
    e2 && (e2.addImplementation(1e4, `code-editor`, (e3, n2) => {
      let r2 = e3.get(pt).getFocusedCodeEditor();
      if (r2 && r2.hasTextFocus()) {
        let e4 = r2.getOption(37), n3 = r2.getSelection();
        return n3 && n3.isEmpty() && !e4 || r2.getContainerDomNode().ownerDocument.execCommand(t2), true;
      }
      return false;
    }), e2.addImplementation(0, `generic-dom`, (e3, n2) => (Mo().execCommand(t2), true)));
  }
  Mf(Of, `cut`), Mf(kf, `copy`), Af && (Af.addImplementation(1e4, `code-editor`, (e2, t2) => {
    var _a3;
    let n2 = e2.get(pt), r2 = e2.get(ft), i2 = n2.getFocusedCodeEditor();
    if (i2 && i2.hasTextFocus()) {
      let e3 = i2.getContainerDomNode().ownerDocument.execCommand(`paste`);
      return e3 ? ((_a3 = Sf.get(i2)) == null ? void 0 : _a3.finishedPaste()) ?? Promise.resolve() : sc ? (async () => {
        let e4 = await r2.readText();
        if (e4 !== ``) {
          let t3 = Xt.INSTANCE.get(e4), n3 = false, r3 = null, a2 = null;
          t3 && (n3 = i2.getOption(37) && !!t3.isFromEmptySelection, r3 = t3.multicursorText === void 0 ? null : t3.multicursorText, a2 = t3.mode), i2.trigger(`keyboard`, `paste`, {
            text: e4,
            pasteOnNewLine: n3,
            multicursorText: r3,
            mode: a2
          });
        }
      })() : true;
    }
    return false;
  }), Af.addImplementation(0, `generic-dom`, (e2, t2) => (Mo().execCommand(`paste`), true))), Tf && J(jf);
  const Z = new class {
    constructor() {
      this.QuickFix = new hd(`quickfix`), this.Refactor = new hd(`refactor`), this.RefactorExtract = this.Refactor.append(`extract`), this.RefactorInline = this.Refactor.append(`inline`), this.RefactorMove = this.Refactor.append(`move`), this.RefactorRewrite = this.Refactor.append(`rewrite`), this.Notebook = new hd(`notebook`), this.Source = new hd(`source`), this.SourceOrganizeImports = this.Source.append(`organizeImports`), this.SourceFixAll = this.Source.append(`fixAll`), this.SurroundWith = this.Refactor.append(`surround`);
    }
  }();
  var Nf;
  (function(e2) {
    e2.Refactor = `refactor`, e2.RefactorPreview = `refactor preview`, e2.Lightbulb = `lightbulb`, e2.Default = `other (default)`, e2.SourceAction = `source action`, e2.QuickFix = `quick fix action`, e2.FixAll = `fix all`, e2.OrganizeImports = `organize imports`, e2.AutoFix = `auto fix`, e2.QuickFixHover = `quick fix hover window`, e2.OnSave = `save participants`, e2.ProblemsView = `problems view`;
  })(Nf || (Nf = {}));
  function Pf(e2, t2) {
    return !(e2.include && !e2.include.intersects(t2) || e2.excludes && e2.excludes.some((n2) => If(t2, n2, e2.include)) || !e2.includeSourceActions && Z.Source.contains(t2));
  }
  function Ff(e2, t2) {
    let n2 = t2.kind ? new hd(t2.kind) : void 0;
    return !(e2.include && (!n2 || !e2.include.contains(n2)) || e2.excludes && n2 && e2.excludes.some((t3) => If(n2, t3, e2.include)) || !e2.includeSourceActions && n2 && Z.Source.contains(n2) || e2.onlyIncludePreferredActions && !t2.isPreferred);
  }
  function If(e2, t2, n2) {
    return !(!t2.contains(e2) || n2 && t2.contains(n2));
  }
  var Lf = class e2 {
    static fromUser(t2, n2) {
      return !t2 || typeof t2 != `object` ? new e2(n2.kind, n2.apply, false) : new e2(e2.getKindFromUser(t2, n2.kind), e2.getApplyFromUser(t2, n2.apply), e2.getPreferredUser(t2));
    }
    static getApplyFromUser(e3, t2) {
      switch (typeof e3.apply == `string` ? e3.apply.toLowerCase() : ``) {
        case `first`:
          return `first`;
        case `never`:
          return `never`;
        case `ifsingle`:
          return `ifSingle`;
        default:
          return t2;
      }
    }
    static getKindFromUser(e3, t2) {
      return typeof e3.kind == `string` ? new hd(e3.kind) : t2;
    }
    static getPreferredUser(e3) {
      return typeof e3.preferred == `boolean` ? e3.preferred : false;
    }
    constructor(e3, t2, n2) {
      this.kind = e3, this.apply = t2, this.preferred = n2;
    }
  }, Rf = class {
    constructor(e2, t2, n2) {
      this.action = e2, this.provider = t2, this.highlightRange = n2;
    }
    async resolve(e2) {
      var _a3;
      if (((_a3 = this.provider) == null ? void 0 : _a3.resolveCodeAction) && !this.action.edit) {
        let t2;
        try {
          t2 = await this.provider.resolveCodeAction(this.action, e2);
        } catch (e3) {
          Uc(e3);
        }
        t2 && (this.action.edit = t2.edit);
      }
      return this;
    }
  };
  const zf = `editor.action.codeAction`, Bf = `editor.action.quickFix`, Vf = `editor.action.autoFix`, Hf = `editor.action.refactor`, Uf = `editor.action.sourceAction`, Wf = `editor.action.organizeImports`, Gf = `editor.action.fixAll`;
  var Kf = class e2 extends S {
    static codeActionsPreferredComparator(e3, t2) {
      return e3.isPreferred && !t2.isPreferred ? -1 : !e3.isPreferred && t2.isPreferred ? 1 : 0;
    }
    static codeActionsComparator({ action: t2 }, { action: n2 }) {
      return t2.isAI && !n2.isAI ? 1 : !t2.isAI && n2.isAI ? -1 : $s(t2.diagnostics) ? $s(n2.diagnostics) ? e2.codeActionsPreferredComparator(t2, n2) : -1 : $s(n2.diagnostics) ? 1 : e2.codeActionsPreferredComparator(t2, n2);
    }
    constructor(t2, n2, r2) {
      super(), this.documentation = n2, this._register(r2), this.allActions = [
        ...t2
      ].sort(e2.codeActionsComparator), this.validActions = this.allActions.filter(({ action: e3 }) => !e3.disabled);
    }
    get hasAutoFix() {
      return this.validActions.some(({ action: e3 }) => !!e3.kind && Z.QuickFix.contains(new hd(e3.kind)) && !!e3.isPreferred);
    }
    get hasAIFix() {
      return this.validActions.some(({ action: e3 }) => !!e3.isAI);
    }
    get allAIFixes() {
      return this.validActions.every(({ action: e3 }) => !!e3.isAI);
    }
  };
  const qf = {
    actions: [],
    documentation: void 0
  };
  async function Jf(e2, t2, n2, r2, i2, a2) {
    var _a3;
    let o2 = r2.filter || {}, s2 = {
      ...o2,
      excludes: [
        ...o2.excludes || [],
        Z.Notebook
      ]
    }, c2 = {
      only: (_a3 = o2.include) == null ? void 0 : _a3.value,
      trigger: r2.type
    }, l2 = new Kr(t2, a2), u2 = r2.type === 2, d2 = Yf(e2, t2, u2 ? s2 : o2), f2 = new C(), p2 = d2.map(async (e3) => {
      try {
        i2.report(e3);
        let r3 = await e3.provideCodeActions(t2, n2, c2, l2.token);
        if (r3 && f2.add(r3), l2.token.isCancellationRequested) return qf;
        let a3 = ((r3 == null ? void 0 : r3.actions) || []).filter((e4) => e4 && Ff(o2, e4)), s3 = Zf(e3, a3, o2.include);
        return {
          actions: a3.map((t3) => new Rf(t3, e3)),
          documentation: s3
        };
      } catch (e4) {
        if (Ss(e4)) throw e4;
        return Uc(e4), qf;
      }
    }), m2 = e2.onDidChange(() => {
      let n3 = e2.all(t2);
      go(n3, d2) || l2.cancel();
    });
    try {
      let n3 = await Promise.all(p2), i3 = n3.map((e3) => e3.actions).flat(), a3 = [
        ...Wi(n3.map((e3) => e3.documentation)),
        ...Xf(e2, t2, r2, i3)
      ];
      return new Kf(i3, a3, f2);
    } finally {
      m2.dispose(), l2.dispose();
    }
  }
  function Yf(e2, t2, n2) {
    return e2.all(t2).filter((e3) => e3.providedCodeActionKinds ? e3.providedCodeActionKinds.some((e4) => Pf(n2, new hd(e4))) : true);
  }
  function* Xf(e2, t2, n2, r2) {
    var _a3, _b3, _c3;
    if (t2 && r2.length) for (let i2 of e2.all(t2)) i2._getAdditionalMenuItems && (yield* (_c3 = i2._getAdditionalMenuItems) == null ? void 0 : _c3.call(i2, {
      trigger: n2.type,
      only: (_b3 = (_a3 = n2.filter) == null ? void 0 : _a3.include) == null ? void 0 : _b3.value
    }, r2.map((e3) => e3.action)));
  }
  function Zf(e2, t2, n2) {
    if (!e2.documentation) return;
    let r2 = e2.documentation.map((e3) => ({
      kind: new hd(e3.kind),
      command: e3.command
    }));
    if (n2) {
      let e3;
      for (let t3 of r2) t3.kind.contains(n2) && (e3 ? e3.kind.contains(t3.kind) && (e3 = t3) : e3 = t3);
      if (e3) return e3 == null ? void 0 : e3.command;
    }
    for (let e3 of t2) {
      if (!e3.kind) continue;
      for (let t3 of r2) if (t3.kind.contains(new hd(e3.kind))) return t3.command;
    }
  }
  var Qf;
  (function(e2) {
    e2.OnSave = `onSave`, e2.FromProblemsView = `fromProblemsView`, e2.FromCodeActions = `fromCodeActions`, e2.FromAILightbulb = `fromAILightbulb`;
  })(Qf || (Qf = {}));
  async function $f(e2, t2, n2, r2, i2 = m.None) {
    var _a3;
    let a2 = e2.get(dt), o2 = e2.get(mt), s2 = e2.get(Ht), c2 = e2.get(Ft);
    if (s2.publicLog2(`codeAction.applyCodeAction`, {
      codeActionTitle: t2.action.title,
      codeActionKind: t2.action.kind,
      codeActionIsPreferred: !!t2.action.isPreferred,
      reason: n2
    }), await t2.resolve(i2), !i2.isCancellationRequested) {
      if ((_a3 = t2.action.edit) == null ? void 0 : _a3.edits.length) {
        let e3 = await a2.apply(t2.action.edit, {
          editor: r2 == null ? void 0 : r2.editor,
          label: t2.action.title,
          quotableLabel: t2.action.title,
          code: `undoredo.codeAction`,
          respectAutoSaveConfig: n2 !== Qf.OnSave,
          showPreview: r2 == null ? void 0 : r2.preview
        });
        if (!e3.isApplied) return;
      }
      if (t2.action.command) try {
        await o2.executeCommand(t2.action.command.id, ...t2.action.command.arguments || []);
      } catch (e3) {
        let t3 = ep(e3);
        c2.error(typeof t3 == `string` ? t3 : U(`applyCodeActionFailed`, `An unknown error occurred while applying the code action`));
      }
    }
  }
  function ep(e2) {
    if (typeof e2 == `string`) return e2;
    if (e2 instanceof Error && typeof e2.message == `string`) return e2.message;
  }
  y.registerCommand(`_executeCodeActionProvider`, async function(e2, t2, n2, r2, i2) {
    if (!(t2 instanceof R)) throw ds();
    let { codeActionProvider: a2 } = e2.get(A), o2 = e2.get(Pt).getModel(t2);
    if (!o2) throw ds();
    let s2 = I.isISelection(n2) ? I.liftSelection(n2) : P.isIRange(n2) ? o2.validateRange(n2) : void 0;
    if (!s2) throw ds();
    let c2 = typeof r2 == `string` ? new hd(r2) : void 0, l2 = await Jf(a2, o2, s2, {
      type: 1,
      triggerAction: Nf.Default,
      filter: {
        includeSourceActions: true,
        include: c2
      }
    }, er.None, m.None), u2 = [], d2 = Math.min(l2.validActions.length, typeof i2 == `number` ? i2 : 0);
    for (let e3 = 0; e3 < d2; e3++) u2.push(l2.validActions[e3].resolve(m.None));
    try {
      return await Promise.all(u2), l2.validActions.map((e3) => e3.action);
    } finally {
      setTimeout(() => l2.dispose(), 100);
    }
  });
  var tp = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, np = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, rp;
  let ip = (_m2 = class {
    constructor(e2) {
      this.keybindingService = e2;
    }
    getResolver() {
      let e2 = new yn(() => this.keybindingService.getKeybindings().filter((e3) => rp.codeActionCommands.indexOf(e3.command) >= 0).filter((e3) => e3.resolvedKeybinding).map((e3) => {
        let t2 = e3.commandArgs;
        return e3.command === Wf ? t2 = {
          kind: Z.SourceOrganizeImports.value
        } : e3.command === Gf && (t2 = {
          kind: Z.SourceFixAll.value
        }), {
          resolvedKeybinding: e3.resolvedKeybinding,
          ...Lf.fromUser(t2, {
            kind: hd.None,
            apply: `never`
          })
        };
      }));
      return (t2) => {
        if (t2.kind) {
          let n2 = this.bestKeybindingForCodeAction(t2, e2.value);
          return n2 == null ? void 0 : n2.resolvedKeybinding;
        }
      };
    }
    bestKeybindingForCodeAction(e2, t2) {
      if (!e2.kind) return;
      let n2 = new hd(e2.kind);
      return t2.filter((e3) => e3.kind.contains(n2)).filter((t3) => t3.preferred ? e2.isPreferred : true).reduceRight((e3, t3) => e3 ? e3.kind.contains(t3.kind) ? t3 : e3 : t3, void 0);
    }
  }, rp = _m2, _m2.codeActionCommands = [
    Hf,
    zf,
    Uf,
    Wf,
    Gf
  ], _m2);
  ip = rp = tp([
    np(0, Ct)
  ], ip);
  const ap = q(`symbolIcon.arrayForeground`, Eo, U(`symbolIcon.arrayForeground`, `The foreground color for array symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), op = q(`symbolIcon.booleanForeground`, Eo, U(`symbolIcon.booleanForeground`, `The foreground color for boolean symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), sp = q(`symbolIcon.classForeground`, {
    dark: `#EE9D28`,
    light: `#D67E00`,
    hcDark: `#EE9D28`,
    hcLight: `#D67E00`
  }, U(`symbolIcon.classForeground`, `The foreground color for class symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), cp = q(`symbolIcon.colorForeground`, Eo, U(`symbolIcon.colorForeground`, `The foreground color for color symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), lp = q(`symbolIcon.constantForeground`, Eo, U(`symbolIcon.constantForeground`, `The foreground color for constant symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), up = q(`symbolIcon.constructorForeground`, {
    dark: `#B180D7`,
    light: `#652D90`,
    hcDark: `#B180D7`,
    hcLight: `#652D90`
  }, U(`symbolIcon.constructorForeground`, `The foreground color for constructor symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), dp = q(`symbolIcon.enumeratorForeground`, {
    dark: `#EE9D28`,
    light: `#D67E00`,
    hcDark: `#EE9D28`,
    hcLight: `#D67E00`
  }, U(`symbolIcon.enumeratorForeground`, `The foreground color for enumerator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), fp = q(`symbolIcon.enumeratorMemberForeground`, {
    dark: `#75BEFF`,
    light: `#007ACC`,
    hcDark: `#75BEFF`,
    hcLight: `#007ACC`
  }, U(`symbolIcon.enumeratorMemberForeground`, `The foreground color for enumerator member symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), pp = q(`symbolIcon.eventForeground`, {
    dark: `#EE9D28`,
    light: `#D67E00`,
    hcDark: `#EE9D28`,
    hcLight: `#D67E00`
  }, U(`symbolIcon.eventForeground`, `The foreground color for event symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), mp = q(`symbolIcon.fieldForeground`, {
    dark: `#75BEFF`,
    light: `#007ACC`,
    hcDark: `#75BEFF`,
    hcLight: `#007ACC`
  }, U(`symbolIcon.fieldForeground`, `The foreground color for field symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), hp = q(`symbolIcon.fileForeground`, Eo, U(`symbolIcon.fileForeground`, `The foreground color for file symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), gp = q(`symbolIcon.folderForeground`, Eo, U(`symbolIcon.folderForeground`, `The foreground color for folder symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), _p = q(`symbolIcon.functionForeground`, {
    dark: `#B180D7`,
    light: `#652D90`,
    hcDark: `#B180D7`,
    hcLight: `#652D90`
  }, U(`symbolIcon.functionForeground`, `The foreground color for function symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), vp = q(`symbolIcon.interfaceForeground`, {
    dark: `#75BEFF`,
    light: `#007ACC`,
    hcDark: `#75BEFF`,
    hcLight: `#007ACC`
  }, U(`symbolIcon.interfaceForeground`, `The foreground color for interface symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), yp = q(`symbolIcon.keyForeground`, Eo, U(`symbolIcon.keyForeground`, `The foreground color for key symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), bp = q(`symbolIcon.keywordForeground`, Eo, U(`symbolIcon.keywordForeground`, `The foreground color for keyword symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), xp = q(`symbolIcon.methodForeground`, {
    dark: `#B180D7`,
    light: `#652D90`,
    hcDark: `#B180D7`,
    hcLight: `#652D90`
  }, U(`symbolIcon.methodForeground`, `The foreground color for method symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Sp = q(`symbolIcon.moduleForeground`, Eo, U(`symbolIcon.moduleForeground`, `The foreground color for module symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Cp = q(`symbolIcon.namespaceForeground`, Eo, U(`symbolIcon.namespaceForeground`, `The foreground color for namespace symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), wp = q(`symbolIcon.nullForeground`, Eo, U(`symbolIcon.nullForeground`, `The foreground color for null symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Tp = q(`symbolIcon.numberForeground`, Eo, U(`symbolIcon.numberForeground`, `The foreground color for number symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Ep = q(`symbolIcon.objectForeground`, Eo, U(`symbolIcon.objectForeground`, `The foreground color for object symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Dp = q(`symbolIcon.operatorForeground`, Eo, U(`symbolIcon.operatorForeground`, `The foreground color for operator symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Op = q(`symbolIcon.packageForeground`, Eo, U(`symbolIcon.packageForeground`, `The foreground color for package symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), kp = q(`symbolIcon.propertyForeground`, Eo, U(`symbolIcon.propertyForeground`, `The foreground color for property symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Ap = q(`symbolIcon.referenceForeground`, Eo, U(`symbolIcon.referenceForeground`, `The foreground color for reference symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), jp = q(`symbolIcon.snippetForeground`, Eo, U(`symbolIcon.snippetForeground`, `The foreground color for snippet symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Mp = q(`symbolIcon.stringForeground`, Eo, U(`symbolIcon.stringForeground`, `The foreground color for string symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Np = q(`symbolIcon.structForeground`, Eo, U(`symbolIcon.structForeground`, `The foreground color for struct symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Pp = q(`symbolIcon.textForeground`, Eo, U(`symbolIcon.textForeground`, `The foreground color for text symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Fp = q(`symbolIcon.typeParameterForeground`, Eo, U(`symbolIcon.typeParameterForeground`, `The foreground color for type parameter symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Ip = q(`symbolIcon.unitForeground`, Eo, U(`symbolIcon.unitForeground`, `The foreground color for unit symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Lp = q(`symbolIcon.variableForeground`, {
    dark: `#75BEFF`,
    light: `#007ACC`,
    hcDark: `#75BEFF`,
    hcLight: `#007ACC`
  }, U(`symbolIcon.variableForeground`, `The foreground color for variable symbols. These symbols appear in the outline, breadcrumb, and suggest widget.`)), Rp = Object.freeze({
    kind: hd.Empty,
    title: U(`codeAction.widget.id.more`, `More Actions...`)
  }), zp = Object.freeze([
    {
      kind: Z.QuickFix,
      title: U(`codeAction.widget.id.quickfix`, `Quick Fix`)
    },
    {
      kind: Z.RefactorExtract,
      title: U(`codeAction.widget.id.extract`, `Extract`),
      icon: _.wrench
    },
    {
      kind: Z.RefactorInline,
      title: U(`codeAction.widget.id.inline`, `Inline`),
      icon: _.wrench
    },
    {
      kind: Z.RefactorRewrite,
      title: U(`codeAction.widget.id.convert`, `Rewrite`),
      icon: _.wrench
    },
    {
      kind: Z.RefactorMove,
      title: U(`codeAction.widget.id.move`, `Move`),
      icon: _.wrench
    },
    {
      kind: Z.SurroundWith,
      title: U(`codeAction.widget.id.surround`, `Surround With`),
      icon: _.surroundWith
    },
    {
      kind: Z.Source,
      title: U(`codeAction.widget.id.source`, `Source Action`),
      icon: _.symbolFile
    },
    Rp
  ]);
  function Bp(e2, t2, n2) {
    if (!t2) return e2.map((e3) => {
      var _a3;
      return {
        kind: `action`,
        item: e3,
        group: Rp,
        disabled: !!e3.action.disabled,
        label: e3.action.disabled || e3.action.title,
        canPreview: !!((_a3 = e3.action.edit) == null ? void 0 : _a3.edits.length)
      };
    });
    let r2 = zp.map((e3) => ({
      group: e3,
      actions: []
    }));
    for (let t3 of e2) {
      let e3 = t3.action.kind ? new hd(t3.action.kind) : hd.None;
      for (let n3 of r2) if (n3.group.kind.contains(e3)) {
        n3.actions.push(t3);
        break;
      }
    }
    let i2 = [];
    for (let e3 of r2) if (e3.actions.length) {
      i2.push({
        kind: `header`,
        group: e3.group
      });
      for (let t3 of e3.actions) {
        let r3 = e3.group;
        i2.push({
          kind: `action`,
          item: t3,
          group: t3.action.isAI ? {
            title: r3.title,
            kind: r3.kind,
            icon: _.sparkle
          } : r3,
          label: t3.action.title,
          disabled: !!t3.action.disabled,
          keybinding: n2(t3.action)
        });
      }
    }
    return i2;
  }
  var Vp = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Hp = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Up;
  const Wp = cl(`gutter-lightbulb`, _.lightBulb, U(`gutterLightbulbWidget`, `Icon which spawns code actions menu from the gutter when there is no space in the editor.`)), Gp = cl(`gutter-lightbulb-auto-fix`, _.lightbulbAutofix, U(`gutterLightbulbAutoFixWidget`, `Icon which spawns code actions menu from the gutter when there is no space in the editor and a quick fix is available.`)), Kp = cl(`gutter-lightbulb-sparkle`, _.lightbulbSparkle, U(`gutterLightbulbAIFixWidget`, `Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix is available.`)), qp = cl(`gutter-lightbulb-aifix-auto-fix`, _.lightbulbSparkleAutofix, U(`gutterLightbulbAIFixAutoFixWidget`, `Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.`)), Jp = cl(`gutter-lightbulb-sparkle-filled`, _.sparkleFilled, U(`gutterLightbulbSparkleFilledWidget`, `Icon which spawns code actions menu from the gutter when there is no space in the editor and an AI fix and a quick fix is available.`));
  var Yp;
  (function(e2) {
    e2.Hidden = {
      type: 0
    };
    class t2 {
      constructor(e3, t3, n2, r2) {
        this.actions = e3, this.trigger = t3, this.editorPosition = n2, this.widgetPosition = r2, this.type = 1;
      }
    }
    e2.Showing = t2;
  })(Yp || (Yp = {}));
  let Xp = (_n2 = class extends S {
    constructor(e2, t2) {
      super(), this._editor = e2, this._keybindingService = t2, this._onClick = this._register(new E()), this.onClick = this._onClick.event, this._state = Yp.Hidden, this._gutterState = Yp.Hidden, this._iconClasses = [], this.lightbulbClasses = [
        `codicon-` + Wp.id,
        `codicon-` + qp.id,
        `codicon-` + Gp.id,
        `codicon-` + Kp.id,
        `codicon-` + Jp.id
      ], this.gutterDecoration = Up.GUTTER_DECORATION, this._domNode = r(`div.lightBulbWidget`), this._domNode.role = `listbox`, this._register(Xe.ignoreTarget(this._domNode)), this._editor.addContentWidget(this), this._register(this._editor.onDidChangeModelContent((e3) => {
        let t3 = this._editor.getModel();
        (this.state.type !== 1 || !t3 || this.state.editorPosition.lineNumber >= t3.getLineCount()) && this.hide(), (this.gutterState.type !== 1 || !t3 || this.gutterState.editorPosition.lineNumber >= t3.getLineCount()) && this.gutterHide();
      })), this._register(xi(this._domNode, (e3) => {
        if (this.state.type !== 1) return;
        this._editor.focus(), e3.preventDefault();
        let { top: t3, height: n2 } = Vo(this._domNode), r2 = this._editor.getOption(67), i2 = Math.floor(r2 / 3);
        this.state.widgetPosition.position !== null && this.state.widgetPosition.position.lineNumber < this.state.editorPosition.lineNumber && (i2 += r2), this._onClick.fire({
          x: e3.posx,
          y: t3 + n2 + i2,
          actions: this.state.actions,
          trigger: this.state.trigger
        });
      })), this._register(z(this._domNode, `mouseenter`, (e3) => {
        (e3.buttons & 1) == 1 && this.hide();
      })), this._register(ze.runAndSubscribe(this._keybindingService.onDidUpdateKeybindings, () => {
        var _a3, _b3;
        this._preferredKbLabel = ((_a3 = this._keybindingService.lookupKeybinding(Vf)) == null ? void 0 : _a3.getLabel()) ?? void 0, this._quickFixKbLabel = ((_b3 = this._keybindingService.lookupKeybinding(Bf)) == null ? void 0 : _b3.getLabel()) ?? void 0, this._updateLightBulbTitleAndIcon();
      })), this._register(this._editor.onMouseDown(async (e3) => {
        if (!e3.target.element || !this.lightbulbClasses.some((t4) => e3.target.element && e3.target.element.classList.contains(t4)) || this.gutterState.type !== 1) return;
        this._editor.focus();
        let { top: t3, height: n2 } = Vo(e3.target.element), r2 = this._editor.getOption(67), i2 = Math.floor(r2 / 3);
        this.gutterState.widgetPosition.position !== null && this.gutterState.widgetPosition.position.lineNumber < this.gutterState.editorPosition.lineNumber && (i2 += r2), this._onClick.fire({
          x: e3.event.posx,
          y: t3 + n2 + i2,
          actions: this.gutterState.actions,
          trigger: this.gutterState.trigger
        });
      }));
    }
    dispose() {
      super.dispose(), this._editor.removeContentWidget(this), this._gutterDecorationID && this._removeGutterDecoration(this._gutterDecorationID);
    }
    getId() {
      return `LightBulbWidget`;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return this._state.type === 1 ? this._state.widgetPosition : null;
    }
    update(e2, t2, n2) {
      if (e2.validActions.length <= 0) return this.gutterHide(), this.hide();
      let r2 = this._editor.hasTextFocus();
      if (!r2) return this.gutterHide(), this.hide();
      let i2 = this._editor.getOptions();
      if (!i2.get(65).enabled) return this.gutterHide(), this.hide();
      let a2 = this._editor.getModel();
      if (!a2) return this.gutterHide(), this.hide();
      let { lineNumber: o2, column: s2 } = a2.validatePosition(n2), c2 = a2.getOptions().tabSize, l2 = this._editor.getOptions().get(50), u2 = a2.getLineContent(o2), d2 = Zi(u2, c2), f2 = l2.spaceWidth * d2 > 22, p2 = (e3) => e3 > 2 && this._editor.getTopForLineNumber(e3) === this._editor.getTopForLineNumber(e3 - 1), m2 = this._editor.getLineDecorations(o2), h2 = false;
      if (m2) for (let e3 of m2) {
        let t3 = e3.options.glyphMarginClassName;
        if (t3 && !this.lightbulbClasses.some((e4) => t3.includes(e4))) {
          h2 = true;
          break;
        }
      }
      let g2 = o2, ee2 = 1;
      if (!f2) {
        let r3 = (e3) => {
          let t3 = a2.getLineContent(e3);
          return /^\s*$|^\s+/.test(t3) || t3.length <= ee2;
        };
        if (o2 > 1 && !p2(o2 - 1)) {
          let i3 = a2.getLineCount(), s3 = o2 === i3, c3 = o2 > 1 && r3(o2 - 1), l3 = !s3 && r3(o2 + 1), u3 = r3(o2), d3 = !l3 && !c3;
          if (!l3 && !c3 && !h2) return this.gutterState = new Yp.Showing(e2, t2, n2, {
            position: {
              lineNumber: g2,
              column: ee2
            },
            preference: Up._posPref
          }), this.renderGutterLightbub(), this.hide();
          c3 || s3 || c3 && !u3 ? --g2 : (l3 || d3 && u3) && (g2 += 1);
        } else if (o2 === 1 && (o2 === a2.getLineCount() || !r3(o2 + 1) && !r3(o2))) if (this.gutterState = new Yp.Showing(e2, t2, n2, {
          position: {
            lineNumber: g2,
            column: ee2
          },
          preference: Up._posPref
        }), h2) this.gutterHide();
        else return this.renderGutterLightbub(), this.hide();
        else if (o2 < a2.getLineCount() && !p2(o2 + 1)) g2 += 1;
        else if (s2 * l2.spaceWidth < 22) return this.hide();
        ee2 = /^\S\s*$/.test(a2.getLineContent(g2)) ? 2 : 1;
      }
      this.state = new Yp.Showing(e2, t2, n2, {
        position: {
          lineNumber: g2,
          column: ee2
        },
        preference: Up._posPref
      }), this._gutterDecorationID && (this._removeGutterDecoration(this._gutterDecorationID), this.gutterHide());
      let te2 = e2.validActions, ne2 = e2.validActions[0].action.kind;
      if (te2.length !== 1 || !ne2) {
        this._editor.layoutContentWidget(this);
        return;
      }
      this._editor.layoutContentWidget(this);
    }
    hide() {
      this.state !== Yp.Hidden && (this.state = Yp.Hidden, this._editor.layoutContentWidget(this));
    }
    gutterHide() {
      this.gutterState !== Yp.Hidden && (this._gutterDecorationID && this._removeGutterDecoration(this._gutterDecorationID), this.gutterState = Yp.Hidden);
    }
    get state() {
      return this._state;
    }
    set state(e2) {
      this._state = e2, this._updateLightBulbTitleAndIcon();
    }
    get gutterState() {
      return this._gutterState;
    }
    set gutterState(e2) {
      this._gutterState = e2, this._updateGutterLightBulbTitleAndIcon();
    }
    _updateLightBulbTitleAndIcon() {
      if (this._domNode.classList.remove(...this._iconClasses), this._iconClasses = [], this.state.type !== 1) return;
      let e2, t2 = false;
      this.state.actions.allAIFixes ? (e2 = _.sparkleFilled, this.state.actions.validActions.length === 1 && (t2 = true)) : e2 = this.state.actions.hasAutoFix ? this.state.actions.hasAIFix ? _.lightbulbSparkleAutofix : _.lightbulbAutofix : this.state.actions.hasAIFix ? _.lightbulbSparkle : _.lightBulb, this._updateLightbulbTitle(this.state.actions.hasAutoFix, t2), this._iconClasses = L.asClassNameArray(e2), this._domNode.classList.add(...this._iconClasses);
    }
    _updateGutterLightBulbTitleAndIcon() {
      if (this.gutterState.type !== 1) return;
      let e2, t2 = false;
      this.gutterState.actions.allAIFixes ? (e2 = Jp, this.gutterState.actions.validActions.length === 1 && (t2 = true)) : e2 = this.gutterState.actions.hasAutoFix ? this.gutterState.actions.hasAIFix ? qp : Gp : this.gutterState.actions.hasAIFix ? Kp : Wp, this._updateLightbulbTitle(this.gutterState.actions.hasAutoFix, t2);
      let n2 = M.register({
        description: `codicon-gutter-lightbulb-decoration`,
        glyphMarginClassName: L.asClassName(e2),
        glyphMargin: {
          position: Qe.Left
        },
        stickiness: 1
      });
      this.gutterDecoration = n2;
    }
    renderGutterLightbub() {
      let e2 = this._editor.getSelection();
      e2 && (this._gutterDecorationID === void 0 ? this._addGutterDecoration(e2.startLineNumber) : this._updateGutterDecoration(this._gutterDecorationID, e2.startLineNumber));
    }
    _addGutterDecoration(e2) {
      this._editor.changeDecorations((t2) => {
        this._gutterDecorationID = t2.addDecoration(new P(e2, 0, e2, 0), this.gutterDecoration);
      });
    }
    _removeGutterDecoration(e2) {
      this._editor.changeDecorations((t2) => {
        t2.removeDecoration(e2), this._gutterDecorationID = void 0;
      });
    }
    _updateGutterDecoration(e2, t2) {
      this._editor.changeDecorations((n2) => {
        n2.changeDecoration(e2, new P(t2, 0, t2, 0)), n2.changeDecorationOptions(e2, this.gutterDecoration);
      });
    }
    _updateLightbulbTitle(e2, t2) {
      this.state.type === 1 && (t2 ? this.title = U(`codeActionAutoRun`, `Run: {0}`, this.state.actions.validActions[0].action.title) : e2 && this._preferredKbLabel ? this.title = U(`preferredcodeActionWithKb`, `Show Code Actions. Preferred Quick Fix Available ({0})`, this._preferredKbLabel) : !e2 && this._quickFixKbLabel ? this.title = U(`codeActionWithKb`, `Show Code Actions ({0})`, this._quickFixKbLabel) : e2 || (this.title = U(`codeAction`, `Show Code Actions`)));
    }
    set title(e2) {
      this._domNode.title = e2;
    }
  }, Up = _n2, _n2.GUTTER_DECORATION = M.register({
    description: `codicon-gutter-lightbulb-decoration`,
    glyphMarginClassName: L.asClassName(_.lightBulb),
    glyphMargin: {
      position: Qe.Left
    },
    stickiness: 1
  }), _n2.ID = `editor.contrib.lightbulbWidget`, _n2._posPref = [
    0
  ], _n2);
  Xp = Up = Vp([
    Hp(1, Ct)
  ], Xp);
  var Zp = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Qp = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const $p = `acceptSelectedCodeAction`, em = `previewSelectedCodeAction`;
  var tm = class {
    get templateId() {
      return `header`;
    }
    renderTemplate(e2) {
      e2.classList.add(`group-header`);
      let t2 = document.createElement(`span`);
      return e2.append(t2), {
        container: e2,
        text: t2
      };
    }
    renderElement(e2, t2, n2) {
      var _a3;
      n2.text.textContent = ((_a3 = e2.group) == null ? void 0 : _a3.title) ?? ``;
    }
    disposeTemplate(e2) {
    }
  };
  let nm = class {
    get templateId() {
      return `action`;
    }
    constructor(e2, t2) {
      this._supportsPreview = e2, this._keybindingService = t2;
    }
    renderTemplate(e2) {
      e2.classList.add(this.templateId);
      let t2 = document.createElement(`div`);
      t2.className = `icon`, e2.append(t2);
      let n2 = document.createElement(`span`);
      n2.className = `title`, e2.append(n2);
      let r2 = new hn(e2, Wn);
      return {
        container: e2,
        icon: t2,
        text: n2,
        keybinding: r2
      };
    }
    renderElement(e2, t2, n2) {
      var _a3, _b3, _c3;
      if (((_a3 = e2.group) == null ? void 0 : _a3.icon) ? (n2.icon.className = L.asClassName(e2.group.icon), e2.group.icon.color && (n2.icon.style.color = ki(e2.group.icon.color.id))) : (n2.icon.className = L.asClassName(_.lightBulb), n2.icon.style.color = `var(--vscode-editorLightBulb-foreground)`), !e2.item || !e2.label) return;
      n2.text.textContent = sm(e2.label), n2.keybinding.set(e2.keybinding), El(!!e2.keybinding, n2.keybinding.element);
      let r2 = (_b3 = this._keybindingService.lookupKeybinding($p)) == null ? void 0 : _b3.getLabel(), i2 = (_c3 = this._keybindingService.lookupKeybinding(em)) == null ? void 0 : _c3.getLabel();
      n2.container.classList.toggle(`option-disabled`, e2.disabled), e2.disabled ? n2.container.title = e2.label : r2 && i2 ? this._supportsPreview && e2.canPreview ? n2.container.title = U({
        key: `label-preview`,
        comment: [
          `placeholders are keybindings, e.g "F2 to Apply, Shift+F2 to Preview"`
        ]
      }, `{0} to Apply, {1} to Preview`, r2, i2) : n2.container.title = U({
        key: `label`,
        comment: [
          `placeholder is a keybinding, e.g "F2 to Apply"`
        ]
      }, `{0} to Apply`, r2) : n2.container.title = ``;
    }
    disposeTemplate(e2) {
      e2.keybinding.dispose();
    }
  };
  nm = Zp([
    Qp(1, Ct)
  ], nm);
  var rm = class extends UIEvent {
    constructor() {
      super(`acceptSelectedAction`);
    }
  }, im = class extends UIEvent {
    constructor() {
      super(`previewSelectedAction`);
    }
  };
  function am(e2) {
    if (e2.kind === `action`) return e2.label;
  }
  let om = class extends S {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this._delegate = r2, this._contextViewService = i2, this._keybindingService = a2, this._actionLineHeight = 24, this._headerLineHeight = 26, this.cts = this._register(new g()), this.domNode = document.createElement(`div`), this.domNode.classList.add(`actionList`);
      let o2 = {
        getHeight: (e3) => e3.kind === `header` ? this._headerLineHeight : this._actionLineHeight,
        getTemplateId: (e3) => e3.kind
      };
      this._list = this._register(new Tn(e2, this.domNode, o2, [
        new nm(t2, this._keybindingService),
        new tm()
      ], {
        keyboardSupport: false,
        typeNavigationEnabled: true,
        keyboardNavigationLabelProvider: {
          getKeyboardNavigationLabel: am
        },
        accessibilityProvider: {
          getAriaLabel: (e3) => {
            if (e3.kind === `action`) {
              let t3 = e3.label ? sm(e3 == null ? void 0 : e3.label) : ``;
              return e3.disabled && (t3 = U({
                key: `customQuickFixWidget.labels`,
                comment: [
                  `Action widget labels for accessibility.`
                ]
              }, `{0}, Disabled Reason: {1}`, t3, e3.disabled)), t3;
            }
            return null;
          },
          getWidgetAriaLabel: () => U({
            key: `customQuickFixWidget`,
            comment: [
              `An action widget option`
            ]
          }, `Action Widget`),
          getRole: (e3) => e3.kind === `action` ? `option` : `separator`,
          getWidgetRole: () => `listbox`
        }
      })), this._list.style(va), this._register(this._list.onMouseClick((e3) => this.onListClick(e3))), this._register(this._list.onMouseOver((e3) => this.onListHover(e3))), this._register(this._list.onDidChangeFocus(() => this.onFocus())), this._register(this._list.onDidChangeSelection((e3) => this.onListSelection(e3))), this._allMenuItems = n2, this._list.splice(0, this._list.length, this._allMenuItems), this._list.length && this.focusNext();
    }
    focusCondition(e2) {
      return !e2.disabled && e2.kind === `action`;
    }
    hide(e2) {
      this._delegate.onHide(e2), this.cts.cancel(), this._contextViewService.hideContextView();
    }
    layout(e2) {
      let t2 = this._allMenuItems.filter((e3) => e3.kind === `header`).length, n2 = this._allMenuItems.length * this._actionLineHeight, r2 = n2 + t2 * this._headerLineHeight - t2 * this._actionLineHeight;
      this._list.layout(r2);
      let i2 = e2;
      if (this._allMenuItems.length >= 50) i2 = 380;
      else {
        let t3 = this._allMenuItems.map((e3, t4) => {
          let n3 = this.domNode.ownerDocument.getElementById(this._list.getElementID(t4));
          if (n3) {
            n3.style.width = `auto`;
            let e4 = n3.getBoundingClientRect().width;
            return n3.style.width = ``, e4;
          }
          return 0;
        });
        i2 = Math.max(...t3, e2);
      }
      let a2 = 0.7, o2 = Math.min(r2, this.domNode.ownerDocument.body.clientHeight * a2);
      return this._list.layout(o2, i2), this.domNode.style.height = `${o2}px`, this._list.domFocus(), i2;
    }
    focusPrevious() {
      this._list.focusPrevious(1, true, void 0, this.focusCondition);
    }
    focusNext() {
      this._list.focusNext(1, true, void 0, this.focusCondition);
    }
    acceptSelected(e2) {
      let t2 = this._list.getFocus();
      if (t2.length === 0) return;
      let n2 = t2[0], r2 = this._list.element(n2);
      if (!this.focusCondition(r2)) return;
      let i2 = e2 ? new im() : new rm();
      this._list.setSelection([
        n2
      ], i2);
    }
    onListSelection(e2) {
      if (!e2.elements.length) return;
      let t2 = e2.elements[0];
      t2.item && this.focusCondition(t2) ? this._delegate.onSelect(t2.item, e2.browserEvent instanceof im) : this._list.setSelection([]);
    }
    onFocus() {
      var _a3, _b3;
      let e2 = this._list.getFocus();
      if (e2.length === 0) return;
      let t2 = e2[0], n2 = this._list.element(t2);
      (_b3 = (_a3 = this._delegate).onFocus) == null ? void 0 : _b3.call(_a3, n2.item);
    }
    async onListHover(e2) {
      let t2 = e2.element;
      if (t2 && t2.item && this.focusCondition(t2)) {
        if (this._delegate.onHover && !t2.disabled && t2.kind === `action`) {
          let e3 = await this._delegate.onHover(t2.item, this.cts.token);
          t2.canPreview = e3 ? e3.canPreview : void 0;
        }
        e2.index && this._list.splice(e2.index, 1, [
          t2
        ]);
      }
      this._list.setFocus(typeof e2.index == `number` ? [
        e2.index
      ] : []);
    }
    onListClick(e2) {
      e2.element && this.focusCondition(e2.element) && this._list.setFocus([]);
    }
  };
  om = Zp([
    Qp(4, gt),
    Qp(5, Ct)
  ], om);
  function sm(e2) {
    return e2.replace(/\r\n|\r|\n/g, ` `);
  }
  var cm = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, lm = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  q(`actionBar.toggledBackground`, ps, U(`actionBar.toggledBackground`, `Background color for toggled action items in action bar.`));
  const um = {
    Visible: new F(`codeActionMenuVisible`, false, U(`codeActionMenuVisible`, `Whether the action widget list is visible`))
  }, dm = ca(`actionWidgetService`);
  let fm = class extends S {
    get isVisible() {
      return um.Visible.getValue(this._contextKeyService) || false;
    }
    constructor(e2, t2, n2) {
      super(), this._contextViewService = e2, this._contextKeyService = t2, this._instantiationService = n2, this._list = this._register(new Bn());
    }
    show(e2, t2, n2, r2, i2, a2, o2) {
      let s2 = um.Visible.bindTo(this._contextKeyService), c2 = this._instantiationService.createInstance(om, e2, t2, n2, r2);
      this._contextViewService.showContextView({
        getAnchor: () => i2,
        render: (e3) => (s2.set(true), this._renderWidget(e3, c2, o2 ?? [])),
        onHide: (e3) => {
          s2.reset(), this._onWidgetClosed(e3);
        }
      }, a2, false);
    }
    acceptSelected(e2) {
      var _a3;
      (_a3 = this._list.value) == null ? void 0 : _a3.acceptSelected(e2);
    }
    focusPrevious() {
      var _a3, _b3;
      (_b3 = (_a3 = this._list) == null ? void 0 : _a3.value) == null ? void 0 : _b3.focusPrevious();
    }
    focusNext() {
      var _a3, _b3;
      (_b3 = (_a3 = this._list) == null ? void 0 : _a3.value) == null ? void 0 : _b3.focusNext();
    }
    hide(e2) {
      var _a3;
      (_a3 = this._list.value) == null ? void 0 : _a3.hide(e2), this._list.clear();
    }
    _renderWidget(e2, t2, n2) {
      var _a3;
      let r2 = document.createElement(`div`);
      if (r2.classList.add(`action-widget`), e2.appendChild(r2), this._list.value = t2, this._list.value) r2.appendChild(this._list.value.domNode);
      else throw Error(`List has no value`);
      let i2 = new C(), a2 = document.createElement(`div`), o2 = e2.appendChild(a2);
      o2.classList.add(`context-view-block`), i2.add(z(o2, He.MOUSE_DOWN, (e3) => e3.stopPropagation()));
      let s2 = document.createElement(`div`), c2 = e2.appendChild(s2);
      c2.classList.add(`context-view-pointerBlock`), i2.add(z(c2, He.POINTER_MOVE, () => c2.remove())), i2.add(z(c2, He.MOUSE_DOWN, () => c2.remove()));
      let l2 = 0;
      if (n2.length) {
        let e3 = this._createActionBar(`.action-widget-action-bar`, n2);
        e3 && (r2.appendChild(e3.getContainer().parentElement), i2.add(e3), l2 = e3.getContainer().offsetWidth);
      }
      let u2 = (_a3 = this._list.value) == null ? void 0 : _a3.layout(l2);
      r2.style.width = `${u2}px`;
      let d2 = i2.add(Gl(e2));
      return i2.add(d2.onDidBlur(() => this.hide(true))), i2;
    }
    _createActionBar(e2, t2) {
      if (!t2.length) return;
      let n2 = r(e2), i2 = new s(n2);
      return i2.push(t2, {
        icon: false,
        label: true
      }), i2;
    }
    _onWidgetClosed(e2) {
      var _a3;
      (_a3 = this._list.value) == null ? void 0 : _a3.hide(e2);
    }
  };
  fm = cm([
    lm(0, gt),
    lm(1, O),
    lm(2, k)
  ], fm), fl(dm, fm, 1);
  const pm = 1100;
  K(class extends o {
    constructor() {
      super({
        id: `hideCodeActionWidget`,
        title: W(`hideCodeActionWidget.title`, `Hide action widget`),
        precondition: um.Visible,
        keybinding: {
          weight: pm,
          primary: 9,
          secondary: [
            1033
          ]
        }
      });
    }
    run(e2) {
      e2.get(dm).hide(true);
    }
  }), K(class extends o {
    constructor() {
      super({
        id: `selectPrevCodeAction`,
        title: W(`selectPrevCodeAction.title`, `Select previous action`),
        precondition: um.Visible,
        keybinding: {
          weight: pm,
          primary: 16,
          secondary: [
            2064
          ],
          mac: {
            primary: 16,
            secondary: [
              2064,
              302
            ]
          }
        }
      });
    }
    run(e2) {
      let t2 = e2.get(dm);
      t2 instanceof fm && t2.focusPrevious();
    }
  }), K(class extends o {
    constructor() {
      super({
        id: `selectNextCodeAction`,
        title: W(`selectNextCodeAction.title`, `Select next action`),
        precondition: um.Visible,
        keybinding: {
          weight: pm,
          primary: 18,
          secondary: [
            2066
          ],
          mac: {
            primary: 18,
            secondary: [
              2066,
              300
            ]
          }
        }
      });
    }
    run(e2) {
      let t2 = e2.get(dm);
      t2 instanceof fm && t2.focusNext();
    }
  }), K(class extends o {
    constructor() {
      super({
        id: $p,
        title: W(`acceptSelected.title`, `Accept selected action`),
        precondition: um.Visible,
        keybinding: {
          weight: pm,
          primary: 3,
          secondary: [
            2137
          ]
        }
      });
    }
    run(e2) {
      let t2 = e2.get(dm);
      t2 instanceof fm && t2.acceptSelected();
    }
  }), K(class extends o {
    constructor() {
      super({
        id: em,
        title: W(`previewSelected.title`, `Preview selected action`),
        precondition: um.Visible,
        keybinding: {
          weight: pm,
          primary: 2051
        }
      });
    }
    run(e2) {
      let t2 = e2.get(dm);
      t2 instanceof fm && t2.acceptSelected(true);
    }
  });
  const mm = new F(`supportedCodeAction`, ``), hm = `_typescript.applyFixAllCodeAction`;
  var gm = class extends S {
    constructor(e2, t2, n2, r2 = 250) {
      super(), this._editor = e2, this._markerService = t2, this._signalChange = n2, this._delay = r2, this._autoTriggerTimer = this._register(new Jr()), this._register(this._markerService.onMarkerChanged((e3) => this._onMarkerChanges(e3))), this._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));
    }
    trigger(e2) {
      let t2 = this._getRangeOfSelectionUnlessWhitespaceEnclosed(e2);
      this._signalChange(t2 ? {
        trigger: e2,
        selection: t2
      } : void 0);
    }
    _onMarkerChanges(e2) {
      let t2 = this._editor.getModel();
      t2 && e2.some((e3) => As(e3, t2.uri)) && this._tryAutoTrigger();
    }
    _tryAutoTrigger() {
      this._autoTriggerTimer.cancelAndSet(() => {
        this.trigger({
          type: 2,
          triggerAction: Nf.Default
        });
      }, this._delay);
    }
    _getRangeOfSelectionUnlessWhitespaceEnclosed(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getSelection();
      if (e2.type === 1) return t2;
      let n2 = this._editor.getOption(65).enabled;
      if (n2 !== Dr.Off) {
        if (n2 === Dr.On) return t2;
        if (n2 === Dr.OnCode) {
          let e3 = t2.isEmpty();
          if (!e3) return t2;
          let n3 = this._editor.getModel(), { lineNumber: r2, column: i2 } = t2.getPosition(), a2 = n3.getLineContent(r2);
          if (a2.length === 0) return;
          if (i2 === 1) {
            if (/\s/.test(a2[0])) return;
          } else if (i2 === n3.getLineMaxColumn(r2)) {
            if (/\s/.test(a2[a2.length - 1])) return;
          } else if (/\s/.test(a2[i2 - 2]) && /\s/.test(a2[i2 - 1])) return;
        }
        return t2;
      }
    }
  }, _m;
  (function(e2) {
    e2.Empty = {
      type: 0
    };
    class t2 {
      constructor(e3, t3, n2) {
        this.trigger = e3, this.position = t3, this._cancellablePromise = n2, this.type = 1, this.actions = n2.catch((e4) => {
          if (Ss(e4)) return vm;
          throw e4;
        });
      }
      cancel() {
        this._cancellablePromise.cancel();
      }
    }
    e2.Triggered = t2;
  })(_m || (_m = {}));
  const vm = Object.freeze({
    allActions: [],
    validActions: [],
    dispose: () => {
    },
    documentation: [],
    hasAutoFix: false,
    hasAIFix: false,
    allAIFixes: false
  });
  var ym = class extends S {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(), this._editor = e2, this._registry = t2, this._markerService = n2, this._progressService = i2, this._configurationService = a2, this._telemetryService = o2, this._codeActionOracle = this._register(new Bn()), this._state = _m.Empty, this._onDidChangeState = this._register(new E()), this.onDidChangeState = this._onDidChangeState.event, this._disposed = false, this._supportedCodeActions = mm.bindTo(r2), this._register(this._editor.onDidChangeModel(() => this._update())), this._register(this._editor.onDidChangeModelLanguage(() => this._update())), this._register(this._registry.onDidChange(() => this._update())), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(65) && this._update();
      })), this._update();
    }
    dispose() {
      this._disposed || (this._disposed = true, super.dispose(), this.setState(_m.Empty, true));
    }
    _settingEnabledNearbyQuickfixes() {
      var _a3;
      let e2 = (_a3 = this._editor) == null ? void 0 : _a3.getModel();
      return this._configurationService ? this._configurationService.getValue(`editor.codeActionWidget.includeNearbyQuickFixes`, {
        resource: e2 == null ? void 0 : e2.uri
      }) : false;
    }
    _update() {
      if (this._disposed) return;
      this._codeActionOracle.value = void 0, this.setState(_m.Empty);
      let e2 = this._editor.getModel();
      if (e2 && this._registry.has(e2) && !this._editor.getOption(92)) {
        let t2 = this._registry.all(e2).flatMap((e3) => e3.providedCodeActionKinds ?? []);
        this._supportedCodeActions.set(t2.join(` `)), this._codeActionOracle.value = new gm(this._editor, this._markerService, (t3) => {
          var _a3;
          if (!t3) {
            this.setState(_m.Empty);
            return;
          }
          let n2 = t3.selection.getStartPosition(), r2 = sa(async (n3) => {
            var _a4, _b3, _c3, _d3, _e3, _f3, _g3, _h3, _i3, _j3;
            if (this._settingEnabledNearbyQuickfixes() && t3.trigger.type === 1 && (t3.trigger.triggerAction === Nf.QuickFix || ((_b3 = (_a4 = t3.trigger.filter) == null ? void 0 : _a4.include) == null ? void 0 : _b3.contains(Z.QuickFix)))) {
              let r3 = await Jf(this._registry, e2, t3.selection, t3.trigger, er.None, n3), i3 = [
                ...r3.allActions
              ];
              if (n3.isCancellationRequested) return vm;
              let a3 = (_c3 = r3.validActions) == null ? void 0 : _c3.some((e3) => e3.action.kind ? Z.QuickFix.contains(new hd(e3.action.kind)) : false), o2 = this._markerService.read({
                resource: e2.uri
              });
              if (a3) {
                for (let e3 of r3.validActions) ((_e3 = (_d3 = e3.action.command) == null ? void 0 : _d3.arguments) == null ? void 0 : _e3.some((e4) => typeof e4 == `string` && e4.includes(hm))) && (e3.action.diagnostics = [
                  ...o2.filter((e4) => e4.relatedInformation)
                ]);
                return {
                  validActions: r3.validActions,
                  allActions: i3,
                  documentation: r3.documentation,
                  hasAutoFix: r3.hasAutoFix,
                  hasAIFix: r3.hasAIFix,
                  allAIFixes: r3.allAIFixes,
                  dispose: () => {
                    r3.dispose();
                  }
                };
              } else if (!a3 && o2.length > 0) {
                let a4 = t3.selection.getPosition(), s2 = a4, c2 = Number.MAX_VALUE, l2 = [
                  ...r3.validActions
                ];
                for (let u3 of o2) {
                  let d2 = u3.endColumn, f2 = u3.endLineNumber, p2 = u3.startLineNumber;
                  if (f2 === a4.lineNumber || p2 === a4.lineNumber) {
                    s2 = new N(f2, d2);
                    let u4 = {
                      type: t3.trigger.type,
                      triggerAction: t3.trigger.triggerAction,
                      filter: {
                        include: ((_f3 = t3.trigger.filter) == null ? void 0 : _f3.include) ? (_g3 = t3.trigger.filter) == null ? void 0 : _g3.include : Z.QuickFix
                      },
                      autoApply: t3.trigger.autoApply,
                      context: {
                        notAvailableMessage: ((_h3 = t3.trigger.context) == null ? void 0 : _h3.notAvailableMessage) || ``,
                        position: s2
                      }
                    }, p3 = new I(s2.lineNumber, s2.column, s2.lineNumber, s2.column), m2 = await Jf(this._registry, e2, p3, u4, er.None, n3);
                    if (m2.validActions.length !== 0) {
                      for (let e3 of m2.validActions) ((_j3 = (_i3 = e3.action.command) == null ? void 0 : _i3.arguments) == null ? void 0 : _j3.some((e4) => typeof e4 == `string` && e4.includes(hm))) && (e3.action.diagnostics = [
                        ...o2.filter((e4) => e4.relatedInformation)
                      ]);
                      r3.allActions.length === 0 && i3.push(...m2.allActions), Math.abs(a4.column - d2) < c2 ? l2.unshift(...m2.validActions) : l2.push(...m2.validActions);
                    }
                    c2 = Math.abs(a4.column - d2);
                  }
                }
                let u2 = l2.filter((e3, t4, n4) => n4.findIndex((t5) => t5.action.title === e3.action.title) === t4);
                return u2.sort((e3, t4) => e3.action.isPreferred && !t4.action.isPreferred ? -1 : !e3.action.isPreferred && t4.action.isPreferred || e3.action.isAI && !t4.action.isAI ? 1 : !e3.action.isAI && t4.action.isAI ? -1 : 0), {
                  validActions: u2,
                  allActions: i3,
                  documentation: r3.documentation,
                  hasAutoFix: r3.hasAutoFix,
                  hasAIFix: r3.hasAIFix,
                  allAIFixes: r3.allAIFixes,
                  dispose: () => {
                    r3.dispose();
                  }
                };
              }
            }
            if (t3.trigger.type === 1) {
              let r3 = new Fr(), i3 = await Jf(this._registry, e2, t3.selection, t3.trigger, er.None, n3);
              return this._telemetryService && this._telemetryService.publicLog2(`codeAction.invokedDurations`, {
                codeActions: i3.validActions.length,
                duration: r3.elapsed()
              }), i3;
            }
            return Jf(this._registry, e2, t3.selection, t3.trigger, er.None, n3);
          });
          t3.trigger.type === 1 && ((_a3 = this._progressService) == null ? void 0 : _a3.showWhile(r2, 250));
          let i2 = new _m.Triggered(t3.trigger, n2, r2), a2 = false;
          this._state.type === 1 && (a2 = this._state.trigger.type === 1 && i2.type === 1 && i2.trigger.type === 2 && this._state.position !== i2.position), a2 ? setTimeout(() => {
            this.setState(i2);
          }, 500) : this.setState(i2);
        }, void 0), this._codeActionOracle.value.trigger({
          type: 2,
          triggerAction: Nf.Default
        });
      } else this._supportedCodeActions.reset();
    }
    trigger(e2) {
      var _a3;
      (_a3 = this._codeActionOracle.value) == null ? void 0 : _a3.trigger(e2);
    }
    setState(e2, t2) {
      e2 !== this._state && (this._state.type === 1 && this._state.cancel(), this._state = e2, !t2 && !this._disposed && this._onDidChangeState.fire(e2));
    }
  }, bm = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, xm = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Sm;
  const Cm = `quickfix-edit-highlight`;
  let wm = (_o2 = class extends S {
    static get(e2) {
      return e2.getContribution(Sm.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2, u2) {
      super(), this._commandService = o2, this._configurationService = s2, this._actionWidgetService = c2, this._instantiationService = l2, this._telemetryService = u2, this._activeCodeActions = this._register(new Bn()), this._showDisabled = false, this._disposed = false, this._editor = e2, this._model = this._register(new ym(this._editor, i2.codeActionProvider, t2, n2, a2, s2, this._telemetryService)), this._register(this._model.onDidChangeState((e3) => this.update(e3))), this._lightBulbWidget = new yn(() => {
        let e3 = this._editor.getContribution(Xp.ID);
        return e3 && this._register(e3.onClick((e4) => this.showCodeActionsFromLightbulb(e4.actions, e4))), e3;
      }), this._resolver = r2.createInstance(ip), this._register(this._editor.onDidLayoutChange(() => this._actionWidgetService.hide()));
    }
    dispose() {
      this._disposed = true, super.dispose();
    }
    async showCodeActionsFromLightbulb(e2, t2) {
      if (e2.allAIFixes && e2.validActions.length === 1) {
        let t3 = e2.validActions[0], n2 = t3.action.command;
        n2 && n2.id === `inlineChat.start` && n2.arguments && n2.arguments.length >= 1 && (n2.arguments[0] = {
          ...n2.arguments[0],
          autoSend: false
        }), await this._applyCodeAction(t3, false, false, Qf.FromAILightbulb);
        return;
      }
      await this.showCodeActionList(e2, t2, {
        includeDisabledActions: false,
        fromLightbulb: true
      });
    }
    showCodeActions(e2, t2, n2) {
      return this.showCodeActionList(t2, n2, {
        includeDisabledActions: false,
        fromLightbulb: false
      });
    }
    manualTriggerAtCurrentPosition(e2, t2, n2, r2) {
      var _a3;
      if (!this._editor.hasModel()) return;
      (_a3 = nf.get(this._editor)) == null ? void 0 : _a3.closeMessage();
      let i2 = this._editor.getPosition();
      this._trigger({
        type: 1,
        triggerAction: t2,
        filter: n2,
        autoApply: r2,
        context: {
          notAvailableMessage: e2,
          position: i2
        }
      });
    }
    _trigger(e2) {
      return this._model.trigger(e2);
    }
    async _applyCodeAction(e2, t2, n2, r2) {
      try {
        await this._instantiationService.invokeFunction($f, e2, r2, {
          preview: n2,
          editor: this._editor
        });
      } finally {
        t2 && this._trigger({
          type: 2,
          triggerAction: Nf.QuickFix,
          filter: {}
        });
      }
    }
    hideLightBulbWidget() {
      var _a3, _b3;
      (_a3 = this._lightBulbWidget.rawValue) == null ? void 0 : _a3.hide(), (_b3 = this._lightBulbWidget.rawValue) == null ? void 0 : _b3.gutterHide();
    }
    async update(e2) {
      var _a3, _b3, _c3, _d3, _e3;
      if (e2.type !== 1) {
        this.hideLightBulbWidget();
        return;
      }
      let t2;
      try {
        t2 = await e2.actions;
      } catch (e3) {
        G(e3);
        return;
      }
      if (this._disposed) return;
      let n2 = this._editor.getSelection();
      if ((n2 == null ? void 0 : n2.startLineNumber) === e2.position.lineNumber) if ((_a3 = this._lightBulbWidget.value) == null ? void 0 : _a3.update(t2, e2.trigger, e2.position), e2.trigger.type === 1) {
        if ((_b3 = e2.trigger.filter) == null ? void 0 : _b3.include) {
          let n4 = this.tryGetValidActionToApply(e2.trigger, t2);
          if (n4) {
            try {
              this.hideLightBulbWidget(), await this._applyCodeAction(n4, false, false, Qf.FromCodeActions);
            } finally {
              t2.dispose();
            }
            return;
          }
          if (e2.trigger.context) {
            let n5 = this.getInvalidActionThatWouldHaveBeenApplied(e2.trigger, t2);
            if (n5 && n5.action.disabled) {
              (_c3 = nf.get(this._editor)) == null ? void 0 : _c3.showMessage(n5.action.disabled, e2.trigger.context.position), t2.dispose();
              return;
            }
          }
        }
        let n3 = !!((_d3 = e2.trigger.filter) == null ? void 0 : _d3.include);
        if (e2.trigger.context && (!t2.allActions.length || !n3 && !t2.validActions.length)) {
          (_e3 = nf.get(this._editor)) == null ? void 0 : _e3.showMessage(e2.trigger.context.notAvailableMessage, e2.trigger.context.position), this._activeCodeActions.value = t2, t2.dispose();
          return;
        }
        this._activeCodeActions.value = t2, this.showCodeActionList(t2, this.toCoords(e2.position), {
          includeDisabledActions: n3,
          fromLightbulb: false
        });
      } else this._actionWidgetService.isVisible ? t2.dispose() : this._activeCodeActions.value = t2;
    }
    getInvalidActionThatWouldHaveBeenApplied(e2, t2) {
      if (t2.allActions.length && (e2.autoApply === `first` && t2.validActions.length === 0 || e2.autoApply === `ifSingle` && t2.allActions.length === 1)) return t2.allActions.find(({ action: e3 }) => e3.disabled);
    }
    tryGetValidActionToApply(e2, t2) {
      if (t2.validActions.length && (e2.autoApply === `first` && t2.validActions.length > 0 || e2.autoApply === `ifSingle` && t2.validActions.length === 1)) return t2.validActions[0];
    }
    async showCodeActionList(e2, t2, n2) {
      let r2 = this._editor.createDecorationsCollection(), i2 = this._editor.getDomNode();
      if (!i2) return;
      let a2 = n2.includeDisabledActions && (this._showDisabled || e2.validActions.length === 0) ? e2.allActions : e2.validActions;
      if (!a2.length) return;
      let o2 = N.isIPosition(t2) ? this.toCoords(t2) : t2, s2 = {
        onSelect: async (e3, t3) => {
          this._applyCodeAction(e3, true, !!t3, n2.fromLightbulb ? Qf.FromAILightbulb : Qf.FromCodeActions), this._actionWidgetService.hide(false), r2.clear();
        },
        onHide: (e3) => {
          var _a3;
          (_a3 = this._editor) == null ? void 0 : _a3.focus(), r2.clear();
        },
        onHover: async (e3, t3) => {
          var _a3;
          if (t3.isCancellationRequested) return;
          let n3 = false, r3 = e3.action.kind;
          if (r3) {
            let e4 = new hd(r3), t4 = [
              Z.RefactorExtract,
              Z.RefactorInline,
              Z.RefactorRewrite,
              Z.RefactorMove,
              Z.Source
            ];
            n3 = t4.some((t5) => t5.contains(e4));
          }
          return {
            canPreview: n3 || !!((_a3 = e3.action.edit) == null ? void 0 : _a3.edits.length)
          };
        },
        onFocus: (e3) => {
          var _a3, _b3;
          if (e3 && e3.action) {
            let t3 = e3.action.ranges, n3 = e3.action.diagnostics;
            if (r2.clear(), t3 && t3.length > 0) {
              let e4 = n3 && (n3 == null ? void 0 : n3.length) > 1 ? n3.map((e5) => ({
                range: e5,
                options: Sm.DECORATION
              })) : t3.map((e5) => ({
                range: e5,
                options: Sm.DECORATION
              }));
              r2.set(e4);
            } else if (n3 && n3.length > 0) {
              let e4 = n3.map((e5) => ({
                range: e5,
                options: Sm.DECORATION
              }));
              r2.set(e4);
              let t4 = n3[0];
              if (t4.startLineNumber && t4.startColumn) {
                let e5 = (_b3 = (_a3 = this._editor.getModel()) == null ? void 0 : _a3.getWordAtPosition({
                  lineNumber: t4.startLineNumber,
                  column: t4.startColumn
                })) == null ? void 0 : _b3.word;
                Nl(U(`editingNewSelection`, `Context: {0} at line {1} and column {2}.`, e5, t4.startLineNumber, t4.startColumn));
              }
            }
          } else r2.clear();
        }
      };
      this._actionWidgetService.show(`codeActionWidget`, true, Bp(a2, this._shouldShowHeaders(), this._resolver.getResolver()), s2, o2, i2, this._getActionBarActions(e2, t2, n2));
    }
    toCoords(e2) {
      if (!this._editor.hasModel()) return {
        x: 0,
        y: 0
      };
      this._editor.revealPosition(e2, 1), this._editor.render();
      let t2 = this._editor.getScrolledVisiblePosition(e2), n2 = Vo(this._editor.getDomNode()), r2 = n2.left + t2.left, i2 = n2.top + t2.top + t2.height;
      return {
        x: r2,
        y: i2
      };
    }
    _shouldShowHeaders() {
      var _a3;
      let e2 = (_a3 = this._editor) == null ? void 0 : _a3.getModel();
      return this._configurationService.getValue(`editor.codeActionWidget.showHeaders`, {
        resource: e2 == null ? void 0 : e2.uri
      });
    }
    _getActionBarActions(e2, t2, n2) {
      if (n2.fromLightbulb) return [];
      let r2 = e2.documentation.map((e3) => ({
        id: e3.id,
        label: e3.title,
        tooltip: e3.tooltip ?? ``,
        class: void 0,
        enabled: true,
        run: () => this._commandService.executeCommand(e3.id, ...e3.arguments ?? [])
      }));
      return n2.includeDisabledActions && e2.validActions.length > 0 && e2.allActions.length !== e2.validActions.length && r2.push(this._showDisabled ? {
        id: `hideMoreActions`,
        label: U(`hideMoreActions`, `Hide Disabled`),
        enabled: true,
        tooltip: ``,
        class: void 0,
        run: () => (this._showDisabled = false, this.showCodeActionList(e2, t2, n2))
      } : {
        id: `showMoreActions`,
        label: U(`showMoreActions`, `Show Disabled`),
        enabled: true,
        tooltip: ``,
        class: void 0,
        run: () => (this._showDisabled = true, this.showCodeActionList(e2, t2, n2))
      }), r2;
    }
  }, Sm = _o2, _o2.ID = `editor.contrib.codeActionController`, _o2.DECORATION = M.register({
    description: `quickfix-highlight`,
    className: Cm
  }), _o2);
  wm = Sm = bm([
    xm(1, Mt),
    xm(2, O),
    xm(3, k),
    xm(4, A),
    xm(5, yt),
    xm(6, mt),
    xm(7, D),
    xm(8, dm),
    xm(9, k),
    xm(10, Ht)
  ], wm), pl((e2, t2) => {
    let n2 = (e3, n3) => {
      n3 && t2.addRule(`.monaco-editor ${e3} { background-color: ${n3}; }`);
    };
    n2(`.quickfix-edit-highlight`, e2.getColor(qa));
    let r2 = e2.getColor(Ja);
    r2 && t2.addRule(`.monaco-editor .quickfix-edit-highlight { border: 1px ${Is(e2.type) ? `dotted` : `solid`} ${r2}; box-sizing: border-box; }`);
  });
  function Tm(e2) {
    return b.regex(mm.keys()[0], RegExp(`(\\s|^)` + vo(e2.value) + `\\b`));
  }
  const Em = {
    type: `object`,
    defaultSnippets: [
      {
        body: {
          kind: ``
        }
      }
    ],
    properties: {
      kind: {
        type: `string`,
        description: U(`args.schema.kind`, `Kind of the code action to run.`)
      },
      apply: {
        type: `string`,
        description: U(`args.schema.apply`, `Controls when the returned actions are applied.`),
        default: `ifSingle`,
        enum: [
          `first`,
          `ifSingle`,
          `never`
        ],
        enumDescriptions: [
          U(`args.schema.apply.first`, `Always apply the first returned code action.`),
          U(`args.schema.apply.ifSingle`, `Apply the first returned code action if it is the only one.`),
          U(`args.schema.apply.never`, `Do not apply the returned code actions.`)
        ]
      },
      preferred: {
        type: `boolean`,
        default: false,
        description: U(`args.schema.preferred`, `Controls if only preferred code actions should be returned.`)
      }
    }
  };
  function Dm(e2, t2, n2, r2, i2 = Nf.Default) {
    if (e2.hasModel()) {
      let a2 = wm.get(e2);
      a2 == null ? void 0 : a2.manualTriggerAtCurrentPosition(t2, i2, n2, r2);
    }
  }
  var Om = class extends w {
    constructor() {
      super({
        id: Bf,
        label: U(`quickfix.trigger.label`, `Quick Fix...`),
        alias: `Quick Fix...`,
        precondition: b.and(T.writable, T.hasCodeActionsProvider),
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 2137,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      return Dm(t2, U(`editor.action.quickFix.noneMessage`, `No code actions available`), void 0, void 0, Nf.QuickFix);
    }
  }, km = class extends Ae {
    constructor() {
      super({
        id: zf,
        precondition: b.and(T.writable, T.hasCodeActionsProvider),
        metadata: {
          description: `Trigger a code action`,
          args: [
            {
              name: `args`,
              schema: Em
            }
          ]
        }
      });
    }
    runEditorCommand(e2, t2, n2) {
      let r2 = Lf.fromUser(n2, {
        kind: hd.Empty,
        apply: `ifSingle`
      });
      return Dm(t2, typeof (n2 == null ? void 0 : n2.kind) == `string` ? r2.preferred ? U(`editor.action.codeAction.noneMessage.preferred.kind`, `No preferred code actions for '{0}' available`, n2.kind) : U(`editor.action.codeAction.noneMessage.kind`, `No code actions for '{0}' available`, n2.kind) : r2.preferred ? U(`editor.action.codeAction.noneMessage.preferred`, `No preferred code actions available`) : U(`editor.action.codeAction.noneMessage`, `No code actions available`), {
        include: r2.kind,
        includeSourceActions: true,
        onlyIncludePreferredActions: r2.preferred
      }, r2.apply);
    }
  }, Am = class extends w {
    constructor() {
      super({
        id: Hf,
        label: U(`refactor.label`, `Refactor...`),
        alias: `Refactor...`,
        precondition: b.and(T.writable, T.hasCodeActionsProvider),
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 3120,
          mac: {
            primary: 1328
          },
          weight: 100
        },
        contextMenuOpts: {
          group: `1_modification`,
          order: 2,
          when: b.and(T.writable, Tm(Z.Refactor))
        },
        metadata: {
          description: `Refactor...`,
          args: [
            {
              name: `args`,
              schema: Em
            }
          ]
        }
      });
    }
    run(e2, t2, n2) {
      let r2 = Lf.fromUser(n2, {
        kind: Z.Refactor,
        apply: `never`
      });
      return Dm(t2, typeof (n2 == null ? void 0 : n2.kind) == `string` ? r2.preferred ? U(`editor.action.refactor.noneMessage.preferred.kind`, `No preferred refactorings for '{0}' available`, n2.kind) : U(`editor.action.refactor.noneMessage.kind`, `No refactorings for '{0}' available`, n2.kind) : r2.preferred ? U(`editor.action.refactor.noneMessage.preferred`, `No preferred refactorings available`) : U(`editor.action.refactor.noneMessage`, `No refactorings available`), {
        include: Z.Refactor.contains(r2.kind) ? r2.kind : hd.None,
        onlyIncludePreferredActions: r2.preferred
      }, r2.apply, Nf.Refactor);
    }
  }, jm = class extends w {
    constructor() {
      super({
        id: Uf,
        label: U(`source.label`, `Source Action...`),
        alias: `Source Action...`,
        precondition: b.and(T.writable, T.hasCodeActionsProvider),
        contextMenuOpts: {
          group: `1_modification`,
          order: 2.1,
          when: b.and(T.writable, Tm(Z.Source))
        },
        metadata: {
          description: `Source Action...`,
          args: [
            {
              name: `args`,
              schema: Em
            }
          ]
        }
      });
    }
    run(e2, t2, n2) {
      let r2 = Lf.fromUser(n2, {
        kind: Z.Source,
        apply: `never`
      });
      return Dm(t2, typeof (n2 == null ? void 0 : n2.kind) == `string` ? r2.preferred ? U(`editor.action.source.noneMessage.preferred.kind`, `No preferred source actions for '{0}' available`, n2.kind) : U(`editor.action.source.noneMessage.kind`, `No source actions for '{0}' available`, n2.kind) : r2.preferred ? U(`editor.action.source.noneMessage.preferred`, `No preferred source actions available`) : U(`editor.action.source.noneMessage`, `No source actions available`), {
        include: Z.Source.contains(r2.kind) ? r2.kind : hd.None,
        includeSourceActions: true,
        onlyIncludePreferredActions: r2.preferred
      }, r2.apply, Nf.SourceAction);
    }
  }, Mm = class extends w {
    constructor() {
      super({
        id: Wf,
        label: U(`organizeImports.label`, `Organize Imports`),
        alias: `Organize Imports`,
        precondition: b.and(T.writable, Tm(Z.SourceOrganizeImports)),
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 1581,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      return Dm(t2, U(`editor.action.organize.noneMessage`, `No organize imports action available`), {
        include: Z.SourceOrganizeImports,
        includeSourceActions: true
      }, `ifSingle`, Nf.OrganizeImports);
    }
  }, Nm = class extends w {
    constructor() {
      super({
        id: Gf,
        label: U(`fixAll.label`, `Fix All`),
        alias: `Fix All`,
        precondition: b.and(T.writable, Tm(Z.SourceFixAll))
      });
    }
    run(e2, t2) {
      return Dm(t2, U(`fixAll.noneMessage`, `No fix all action available`), {
        include: Z.SourceFixAll,
        includeSourceActions: true
      }, `ifSingle`, Nf.FixAll);
    }
  }, Pm = class extends w {
    constructor() {
      super({
        id: Vf,
        label: U(`autoFix.label`, `Auto Fix...`),
        alias: `Auto Fix...`,
        precondition: b.and(T.writable, Tm(Z.QuickFix)),
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 1625,
          mac: {
            primary: 2649
          },
          weight: 100
        }
      });
    }
    run(e2, t2) {
      return Dm(t2, U(`editor.action.autoFix.noneMessage`, `No auto fixes available`), {
        include: Z.QuickFix,
        onlyIncludePreferredActions: true
      }, `ifSingle`, Nf.AutoFix);
    }
  };
  X(wm.ID, wm, 3), X(Xp.ID, Xp, 4), J(Om), J(Am), J(jm), J(Mm), J(Pm), J(Nm), Y(new km()), cr.as(We.Configuration).registerConfiguration({
    ...Ua,
    properties: {
      "editor.codeActionWidget.showHeaders": {
        type: `boolean`,
        scope: 5,
        description: U(`showCodeActionHeaders`, `Enable/disable showing group headers in the Code Action menu.`),
        default: true
      }
    }
  }), cr.as(We.Configuration).registerConfiguration({
    ...Ua,
    properties: {
      "editor.codeActionWidget.includeNearbyQuickFixes": {
        type: `boolean`,
        scope: 5,
        description: U(`includeNearbyQuickFixes`, `Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic.`),
        default: true
      }
    }
  }), cr.as(We.Configuration).registerConfiguration({
    ...Ua,
    properties: {
      "editor.codeActions.triggerOnFocusChange": {
        type: `boolean`,
        scope: 5,
        markdownDescription: U(`triggerOnFocusChange`, `Enable triggering {0} when {1} is set to {2}. Code Actions must be set to {3} to be triggered for window and focus changes.`, "`#editor.codeActionsOnSave#`", "`#files.autoSave#`", "`afterDelay`", "`always`"),
        default: false
      }
    }
  });
  var Fm = class {
    constructor() {
      this.lenses = [], this._disposables = new C();
    }
    dispose() {
      this._disposables.dispose();
    }
    get isDisposed() {
      return this._disposables.isDisposed;
    }
    add(e2, t2) {
      this._disposables.add(e2);
      for (let n2 of e2.lenses) this.lenses.push({
        symbol: n2,
        provider: t2
      });
    }
  };
  async function Im(e2, t2, n2) {
    let r2 = e2.ordered(t2), i2 = /* @__PURE__ */ new Map(), a2 = new Fm(), o2 = r2.map(async (e3, r3) => {
      i2.set(e3, r3);
      try {
        let r4 = await Promise.resolve(e3.provideCodeLenses(t2, n2));
        r4 && a2.add(r4, e3);
      } catch (e4) {
        Uc(e4);
      }
    });
    return await Promise.all(o2), a2.lenses = a2.lenses.sort((e3, t3) => e3.symbol.range.startLineNumber < t3.symbol.range.startLineNumber ? -1 : e3.symbol.range.startLineNumber > t3.symbol.range.startLineNumber ? 1 : i2.get(e3.provider) < i2.get(t3.provider) ? -1 : i2.get(e3.provider) > i2.get(t3.provider) ? 1 : e3.symbol.range.startColumn < t3.symbol.range.startColumn ? -1 : e3.symbol.range.startColumn > t3.symbol.range.startColumn ? 1 : 0), a2;
  }
  y.registerCommand(`_executeCodeLensProvider`, function(e2, ...t2) {
    let [n2, r2] = t2;
    V(R.isUri(n2)), V(typeof r2 == `number` || !r2);
    let { codeLensProvider: i2 } = e2.get(A), a2 = e2.get(Pt).getModel(n2);
    if (!a2) throw ds();
    let o2 = [], s2 = new C();
    return Im(i2, a2, m.None).then((e3) => {
      s2.add(e3);
      let t3 = [];
      for (let n3 of e3.lenses) r2 == null || n3.symbol.command ? o2.push(n3.symbol) : r2-- > 0 && n3.provider.resolveCodeLens && t3.push(Promise.resolve(n3.provider.resolveCodeLens(a2, n3.symbol, m.None)).then((e4) => o2.push(e4 || n3.symbol)));
      return Promise.all(t3);
    }).then(() => o2).finally(() => {
      setTimeout(() => s2.dispose(), 100);
    });
  });
  var Lm = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Rm = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const zm = ca(`ICodeLensCache`);
  var Bm = class {
    constructor(e2, t2) {
      this.lineCount = e2, this.data = t2;
    }
  };
  let Vm = class {
    constructor(e2) {
      this._fakeProvider = new class {
        provideCodeLenses() {
          throw Error(`not supported`);
        }
      }(), this._cache = new _n(20, 0.75);
      let t2 = `codelens/cache`;
      Cl(bc, () => e2.remove(t2, 1));
      let n2 = `codelens/cache2`, r2 = e2.get(n2, 1, `{}`);
      this._deserialize(r2);
      let i2 = ze.filter(e2.onWillSaveState, (e3) => e3.reason === ui.SHUTDOWN);
      ze.once(i2)((t3) => {
        e2.store(n2, this._serialize(), 1, 1);
      });
    }
    put(e2, t2) {
      let n2 = t2.lenses.map((e3) => {
        var _a3;
        return {
          range: e3.symbol.range,
          command: e3.symbol.command && {
            id: ``,
            title: (_a3 = e3.symbol.command) == null ? void 0 : _a3.title
          }
        };
      }), r2 = new Fm();
      r2.add({
        lenses: n2,
        dispose: () => {
        }
      }, this._fakeProvider);
      let i2 = new Bm(e2.getLineCount(), r2);
      this._cache.set(e2.uri.toString(), i2);
    }
    get(e2) {
      let t2 = this._cache.get(e2.uri.toString());
      return t2 && t2.lineCount === e2.getLineCount() ? t2.data : void 0;
    }
    delete(e2) {
      this._cache.delete(e2.uri.toString());
    }
    _serialize() {
      let e2 = /* @__PURE__ */ Object.create(null);
      for (let [t2, n2] of this._cache) {
        let r2 = /* @__PURE__ */ new Set();
        for (let e3 of n2.data.lenses) r2.add(e3.symbol.range.startLineNumber);
        e2[t2] = {
          lineCount: n2.lineCount,
          lines: [
            ...r2.values()
          ]
        };
      }
      return JSON.stringify(e2);
    }
    _deserialize(e2) {
      try {
        let t2 = JSON.parse(e2);
        for (let e3 in t2) {
          let n2 = t2[e3], r2 = [];
          for (let e4 of n2.lines) r2.push({
            range: new P(e4, 1, e4, 11)
          });
          let i2 = new Fm();
          i2.add({
            lenses: r2,
            dispose() {
            }
          }, this._fakeProvider), this._cache.set(e3, new Bm(n2.lineCount, i2));
        }
      } catch {
      }
    }
  };
  Vm = Lm([
    Rm(0, Vt)
  ], Vm), fl(zm, Vm, 1);
  var Hm = class {
    constructor(e2, t2, n2) {
      this.afterColumn = 1073741824, this.afterLineNumber = e2, this.heightInPx = t2, this._onHeight = n2, this.suppressMouseDown = true, this.domNode = document.createElement(`div`);
    }
    onComputedHeight(e2) {
      this._lastHeight === void 0 ? this._lastHeight = e2 : this._lastHeight !== e2 && (this._lastHeight = e2, this._onHeight());
    }
    isVisible() {
      return this._lastHeight !== 0 && this.domNode.hasAttribute(`monaco-visible-view-zone`);
    }
  }, Um = (_p2 = class {
    constructor(t2, n2) {
      this.allowEditorOverflow = false, this.suppressMouseDown = true, this._commands = /* @__PURE__ */ new Map(), this._isEmpty = true, this._editor = t2, this._id = `codelens.widget-${_p2._idPool++}`, this.updatePosition(n2), this._domNode = document.createElement(`span`), this._domNode.className = `codelens-decoration`;
    }
    withCommands(t2, n2) {
      this._commands.clear();
      let i2 = [], a2 = false;
      for (let n3 = 0; n3 < t2.length; n3++) {
        let o2 = t2[n3];
        if (o2 && (a2 = true, o2.command)) {
          let a3 = _l(o2.command.title.trim());
          if (o2.command.id) {
            let t3 = `c${_p2._idPool++}`;
            i2.push(r(`a`, {
              id: t3,
              title: o2.command.tooltip,
              role: `button`
            }, ...a3)), this._commands.set(t3, o2.command);
          } else i2.push(r(`span`, {
            title: o2.command.tooltip
          }, ...a3));
          n3 + 1 < t2.length && i2.push(r(`span`, void 0, `\xA0|\xA0`));
        }
      }
      a2 ? (bl(this._domNode, ...i2), this._isEmpty && n2 && this._domNode.classList.add(`fadein`), this._isEmpty = false) : bl(this._domNode, r(`span`, void 0, `no commands`));
    }
    getCommand(e2) {
      return e2.parentElement === this._domNode ? this._commands.get(e2.id) : void 0;
    }
    getId() {
      return this._id;
    }
    getDomNode() {
      return this._domNode;
    }
    updatePosition(e2) {
      let t2 = this._editor.getModel().getLineFirstNonWhitespaceColumn(e2);
      this._widgetPosition = {
        position: {
          lineNumber: e2,
          column: t2
        },
        preference: [
          1
        ]
      };
    }
    getPosition() {
      return this._widgetPosition || null;
    }
  }, _p2._idPool = 0, _p2), Wm = class {
    constructor() {
      this._removeDecorations = [], this._addDecorations = [], this._addDecorationsCallbacks = [];
    }
    addDecoration(e2, t2) {
      this._addDecorations.push(e2), this._addDecorationsCallbacks.push(t2);
    }
    removeDecoration(e2) {
      this._removeDecorations.push(e2);
    }
    commit(e2) {
      let t2 = e2.deltaDecorations(this._removeDecorations, this._addDecorations);
      for (let e3 = 0, n2 = t2.length; e3 < n2; e3++) this._addDecorationsCallbacks[e3](t2[e3]);
    }
  };
  const Gm = M.register({
    collapseOnReplaceEdit: true,
    description: `codelens`
  });
  var Km = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this._isDisposed = false, this._editor = t2, this._data = e2, this._decorationIds = [];
      let o2, s2 = [];
      this._data.forEach((e3, t3) => {
        e3.symbol.command && s2.push(e3.symbol), n2.addDecoration({
          range: e3.symbol.range,
          options: Gm
        }, (e4) => this._decorationIds[t3] = e4), o2 = o2 ? P.plusRange(o2, e3.symbol.range) : P.lift(e3.symbol.range);
      }), this._viewZone = new Hm(o2.startLineNumber - 1, i2, a2), this._viewZoneId = r2.addZone(this._viewZone), s2.length > 0 && (this._createContentWidgetIfNecessary(), this._contentWidget.withCommands(s2, false));
    }
    _createContentWidgetIfNecessary() {
      this._contentWidget ? this._editor.layoutContentWidget(this._contentWidget) : (this._contentWidget = new Um(this._editor, this._viewZone.afterLineNumber + 1), this._editor.addContentWidget(this._contentWidget));
    }
    dispose(e2, t2) {
      this._decorationIds.forEach(e2.removeDecoration, e2), this._decorationIds = [], t2 == null ? void 0 : t2.removeZone(this._viewZoneId), this._contentWidget && (this._editor.removeContentWidget(this._contentWidget), this._contentWidget = void 0), this._isDisposed = true;
    }
    isDisposed() {
      return this._isDisposed;
    }
    isValid() {
      return this._decorationIds.some((e2, t2) => {
        let n2 = this._editor.getModel().getDecorationRange(e2), r2 = this._data[t2].symbol;
        return !!(n2 && P.isEmpty(r2.range) === n2.isEmpty());
      });
    }
    updateCodeLensSymbols(e2, t2) {
      this._decorationIds.forEach(t2.removeDecoration, t2), this._decorationIds = [], this._data = e2, this._data.forEach((e3, n2) => {
        t2.addDecoration({
          range: e3.symbol.range,
          options: Gm
        }, (e4) => this._decorationIds[n2] = e4);
      });
    }
    updateHeight(e2, t2) {
      this._viewZone.heightInPx = e2, t2.layoutZone(this._viewZoneId), this._contentWidget && this._editor.layoutContentWidget(this._contentWidget);
    }
    computeIfNecessary(e2) {
      if (!this._viewZone.isVisible()) return null;
      for (let t2 = 0; t2 < this._decorationIds.length; t2++) {
        let n2 = e2.getDecorationRange(this._decorationIds[t2]);
        n2 && (this._data[t2].symbol.range = n2);
      }
      return this._data;
    }
    updateCommands(e2) {
      this._createContentWidgetIfNecessary(), this._contentWidget.withCommands(e2, true);
      for (let t2 = 0; t2 < this._data.length; t2++) {
        let n2 = e2[t2];
        if (n2) {
          let { symbol: e3 } = this._data[t2];
          e3.command = n2.command || e3.command;
        }
      }
    }
    getCommand(e2) {
      var _a3;
      return (_a3 = this._contentWidget) == null ? void 0 : _a3.getCommand(e2);
    }
    getLineNumber() {
      let e2 = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
      return e2 ? e2.startLineNumber : -1;
    }
    update(e2) {
      if (this.isValid()) {
        let t2 = this._editor.getModel().getDecorationRange(this._decorationIds[0]);
        t2 && (this._viewZone.afterLineNumber = t2.startLineNumber - 1, e2.layoutZone(this._viewZoneId), this._contentWidget && (this._contentWidget.updatePosition(t2.startLineNumber), this._editor.layoutContentWidget(this._contentWidget)));
      }
    }
  }, qm = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Jm = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let Ym = (_q = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this._editor = e2, this._languageFeaturesService = t2, this._commandService = r2, this._notificationService = i2, this._codeLensCache = a2, this._disposables = new C(), this._localToDispose = new C(), this._lenses = [], this._oldCodeLensModels = new C(), this._provideCodeLensDebounce = n2.for(t2.codeLensProvider, `CodeLensProvide`, {
        min: 250
      }), this._resolveCodeLensesDebounce = n2.for(t2.codeLensProvider, `CodeLensResolve`, {
        min: 250,
        salt: `resolve`
      }), this._resolveCodeLensesScheduler = new hr(() => this._resolveCodeLensesInViewport(), this._resolveCodeLensesDebounce.default()), this._disposables.add(this._editor.onDidChangeModel(() => this._onModelChange())), this._disposables.add(this._editor.onDidChangeModelLanguage(() => this._onModelChange())), this._disposables.add(this._editor.onDidChangeConfiguration((e3) => {
        (e3.hasChanged(50) || e3.hasChanged(19) || e3.hasChanged(18)) && this._updateLensStyle(), e3.hasChanged(17) && this._onModelChange();
      })), this._disposables.add(t2.codeLensProvider.onDidChange(this._onModelChange, this)), this._onModelChange(), this._updateLensStyle();
    }
    dispose() {
      var _a3;
      this._localDispose(), this._disposables.dispose(), this._oldCodeLensModels.dispose(), (_a3 = this._currentCodeLensModel) == null ? void 0 : _a3.dispose();
    }
    _getLayoutInfo() {
      let e2 = Math.max(1.3, this._editor.getOption(67) / this._editor.getOption(52)), t2 = this._editor.getOption(19);
      return (!t2 || t2 < 5) && (t2 = this._editor.getOption(52) * 0.9 | 0), {
        fontSize: t2,
        codeLensHeight: t2 * e2 | 0
      };
    }
    _updateLensStyle() {
      let { codeLensHeight: e2, fontSize: t2 } = this._getLayoutInfo(), n2 = this._editor.getOption(18), r2 = this._editor.getOption(50), { style: i2 } = this._editor.getContainerDomNode();
      i2.setProperty(`--vscode-editorCodeLens-lineHeight`, `${e2}px`), i2.setProperty(`--vscode-editorCodeLens-fontSize`, `${t2}px`), i2.setProperty(`--vscode-editorCodeLens-fontFeatureSettings`, r2.fontFeatureSettings), n2 && (i2.setProperty(`--vscode-editorCodeLens-fontFamily`, n2), i2.setProperty(`--vscode-editorCodeLens-fontFamilyDefault`, De.fontFamily)), this._editor.changeViewZones((t3) => {
        for (let n3 of this._lenses) n3.updateHeight(e2, t3);
      });
    }
    _localDispose() {
      var _a3, _b3, _c3;
      (_a3 = this._getCodeLensModelPromise) == null ? void 0 : _a3.cancel(), this._getCodeLensModelPromise = void 0, (_b3 = this._resolveCodeLensesPromise) == null ? void 0 : _b3.cancel(), this._resolveCodeLensesPromise = void 0, this._localToDispose.clear(), this._oldCodeLensModels.clear(), (_c3 = this._currentCodeLensModel) == null ? void 0 : _c3.dispose();
    }
    _onModelChange() {
      this._localDispose();
      let e2 = this._editor.getModel();
      if (!e2 || !this._editor.getOption(17) || e2.isTooLargeForTokenization()) return;
      let t2 = this._codeLensCache.get(e2);
      if (t2 && this._renderCodeLensSymbols(t2), !this._languageFeaturesService.codeLensProvider.has(e2)) {
        t2 && La(() => {
          let n3 = this._codeLensCache.get(e2);
          t2 === n3 && (this._codeLensCache.delete(e2), this._onModelChange());
        }, 30 * 1e3, this._localToDispose);
        return;
      }
      for (let t3 of this._languageFeaturesService.codeLensProvider.all(e2)) if (typeof t3.onDidChange == `function`) {
        let e3 = t3.onDidChange(() => n2.schedule());
        this._localToDispose.add(e3);
      }
      let n2 = new hr(() => {
        var _a3;
        let t3 = Date.now();
        (_a3 = this._getCodeLensModelPromise) == null ? void 0 : _a3.cancel(), this._getCodeLensModelPromise = sa((t4) => Im(this._languageFeaturesService.codeLensProvider, e2, t4)), this._getCodeLensModelPromise.then((r2) => {
          this._currentCodeLensModel && this._oldCodeLensModels.add(this._currentCodeLensModel), this._currentCodeLensModel = r2, this._codeLensCache.put(e2, r2);
          let i2 = this._provideCodeLensDebounce.update(e2, Date.now() - t3);
          n2.delay = i2, this._renderCodeLensSymbols(r2), this._resolveCodeLensesInViewportSoon();
        }, G);
      }, this._provideCodeLensDebounce.get(e2));
      this._localToDispose.add(n2), this._localToDispose.add(Hl(() => this._resolveCodeLensesScheduler.cancel())), this._localToDispose.add(this._editor.onDidChangeModelContent(() => {
        var _a3;
        this._editor.changeDecorations((e3) => {
          this._editor.changeViewZones((t3) => {
            let n3 = [], r2 = -1;
            this._lenses.forEach((e4) => {
              !e4.isValid() || r2 === e4.getLineNumber() ? n3.push(e4) : (e4.update(t3), r2 = e4.getLineNumber());
            });
            let i2 = new Wm();
            n3.forEach((e4) => {
              e4.dispose(i2, t3), this._lenses.splice(this._lenses.indexOf(e4), 1);
            }), i2.commit(e3);
          });
        }), n2.schedule(), this._resolveCodeLensesScheduler.cancel(), (_a3 = this._resolveCodeLensesPromise) == null ? void 0 : _a3.cancel(), this._resolveCodeLensesPromise = void 0;
      })), this._localToDispose.add(this._editor.onDidFocusEditorText(() => {
        n2.schedule();
      })), this._localToDispose.add(this._editor.onDidBlurEditorText(() => {
        n2.cancel();
      })), this._localToDispose.add(this._editor.onDidScrollChange((e3) => {
        e3.scrollTopChanged && this._lenses.length > 0 && this._resolveCodeLensesInViewportSoon();
      })), this._localToDispose.add(this._editor.onDidLayoutChange(() => {
        this._resolveCodeLensesInViewportSoon();
      })), this._localToDispose.add(Hl(() => {
        if (this._editor.getModel()) {
          let e3 = Mr.capture(this._editor);
          this._editor.changeDecorations((e4) => {
            this._editor.changeViewZones((t3) => {
              this._disposeAllLenses(e4, t3);
            });
          }), e3.restore(this._editor);
        } else this._disposeAllLenses(void 0, void 0);
      })), this._localToDispose.add(this._editor.onMouseDown((e3) => {
        if (e3.target.type !== 9) return;
        let t3 = e3.target.element;
        if ((t3 == null ? void 0 : t3.tagName) === `SPAN` && (t3 = t3.parentElement), (t3 == null ? void 0 : t3.tagName) === `A`) for (let e4 of this._lenses) {
          let n3 = e4.getCommand(t3);
          if (n3) {
            this._commandService.executeCommand(n3.id, ...n3.arguments || []).catch((e5) => this._notificationService.error(e5));
            break;
          }
        }
      })), n2.schedule();
    }
    _disposeAllLenses(e2, t2) {
      let n2 = new Wm();
      for (let e3 of this._lenses) e3.dispose(n2, t2);
      e2 && n2.commit(e2), this._lenses.length = 0;
    }
    _renderCodeLensSymbols(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getModel().getLineCount(), n2 = [], r2;
      for (let i3 of e2.lenses) {
        let e3 = i3.symbol.range.startLineNumber;
        if (e3 < 1 || e3 > t2) continue;
        r2 && r2[r2.length - 1].symbol.range.startLineNumber === e3 ? r2.push(i3) : (r2 = [
          i3
        ], n2.push(r2));
      }
      if (!n2.length && !this._lenses.length) return;
      let i2 = Mr.capture(this._editor), a2 = this._getLayoutInfo();
      this._editor.changeDecorations((e3) => {
        this._editor.changeViewZones((t3) => {
          let r3 = new Wm(), i3 = 0, o2 = 0;
          for (; o2 < n2.length && i3 < this._lenses.length; ) {
            let e4 = n2[o2][0].symbol.range.startLineNumber, s2 = this._lenses[i3].getLineNumber();
            s2 < e4 ? (this._lenses[i3].dispose(r3, t3), this._lenses.splice(i3, 1)) : s2 === e4 ? (this._lenses[i3].updateCodeLensSymbols(n2[o2], r3), o2++, i3++) : (this._lenses.splice(i3, 0, new Km(n2[o2], this._editor, r3, t3, a2.codeLensHeight, () => this._resolveCodeLensesInViewportSoon())), i3++, o2++);
          }
          for (; i3 < this._lenses.length; ) this._lenses[i3].dispose(r3, t3), this._lenses.splice(i3, 1);
          for (; o2 < n2.length; ) this._lenses.push(new Km(n2[o2], this._editor, r3, t3, a2.codeLensHeight, () => this._resolveCodeLensesInViewportSoon())), o2++;
          r3.commit(e3);
        });
      }), i2.restore(this._editor);
    }
    _resolveCodeLensesInViewportSoon() {
      let e2 = this._editor.getModel();
      e2 && this._resolveCodeLensesScheduler.schedule();
    }
    _resolveCodeLensesInViewport() {
      var _a3;
      (_a3 = this._resolveCodeLensesPromise) == null ? void 0 : _a3.cancel(), this._resolveCodeLensesPromise = void 0;
      let e2 = this._editor.getModel();
      if (!e2) return;
      let t2 = [], n2 = [];
      if (this._lenses.forEach((r3) => {
        let i3 = r3.computeIfNecessary(e2);
        i3 && (t2.push(i3), n2.push(r3));
      }), t2.length === 0) return;
      let r2 = Date.now(), i2 = sa((r3) => {
        let i3 = t2.map((t3, i4) => {
          let a2 = Array(t3.length), o2 = t3.map((t4, n3) => !t4.symbol.command && typeof t4.provider.resolveCodeLens == `function` ? Promise.resolve(t4.provider.resolveCodeLens(e2, t4.symbol, r3)).then((e3) => {
            a2[n3] = e3;
          }, Uc) : (a2[n3] = t4.symbol, Promise.resolve(void 0)));
          return Promise.all(o2).then(() => {
            !r3.isCancellationRequested && !n2[i4].isDisposed() && n2[i4].updateCommands(a2);
          });
        });
        return Promise.all(i3);
      });
      this._resolveCodeLensesPromise = i2, this._resolveCodeLensesPromise.then(() => {
        let t3 = this._resolveCodeLensesDebounce.update(e2, Date.now() - r2);
        this._resolveCodeLensesScheduler.delay = t3, this._currentCodeLensModel && this._codeLensCache.put(e2, this._currentCodeLensModel), this._oldCodeLensModels.clear(), i2 === this._resolveCodeLensesPromise && (this._resolveCodeLensesPromise = void 0);
      }, (e3) => {
        G(e3), i2 === this._resolveCodeLensesPromise && (this._resolveCodeLensesPromise = void 0);
      });
    }
    async getModel() {
      var _a3;
      return await this._getCodeLensModelPromise, await this._resolveCodeLensesPromise, ((_a3 = this._currentCodeLensModel) == null ? void 0 : _a3.isDisposed) ? void 0 : this._currentCodeLensModel;
    }
  }, _q.ID = `css.editor.codeLens`, _q);
  Ym = qm([
    Jm(1, A),
    Jm(2, Et),
    Jm(3, mt),
    Jm(4, Ft),
    Jm(5, zm)
  ], Ym), X(Ym.ID, Ym, 1), J(class extends w {
    constructor() {
      super({
        id: `codelens.showLensesInCurrentLine`,
        precondition: T.hasCodeLensProvider,
        label: U(`showLensOnLine`, `Show CodeLens Commands For Current Line`),
        alias: `Show CodeLens Commands For Current Line`
      });
    }
    async run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = e2.get(Rt), r2 = e2.get(mt), i2 = e2.get(Ft), a2 = t2.getSelection().positionLineNumber, o2 = t2.getContribution(Ym.ID);
      if (!o2) return;
      let s2 = await o2.getModel();
      if (!s2) return;
      let c2 = [];
      for (let e3 of s2.lenses) e3.symbol.command && e3.symbol.range.startLineNumber === a2 && c2.push({
        label: e3.symbol.command.title,
        command: e3.symbol.command
      });
      if (c2.length === 0) return;
      let l2 = await n2.pick(c2, {
        canPickMany: false,
        placeHolder: U(`placeHolder`, `Select a command`)
      });
      if (!l2) return;
      let u2 = l2.command;
      if (s2.isDisposed) {
        let e3 = await o2.getModel(), t3 = e3 == null ? void 0 : e3.lenses.find((e4) => {
          var _a3;
          return e4.symbol.range.startLineNumber === a2 && ((_a3 = e4.symbol.command) == null ? void 0 : _a3.title) === u2.title;
        });
        if (!t3 || !t3.symbol.command) return;
        u2 = t3.symbol.command;
      }
      try {
        await r2.executeCommand(u2.id, ...u2.arguments || []);
      } catch (e3) {
        i2.error(e3);
      }
    }
  });
  var Xm = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Zm = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let Qm = class {
    constructor(e2) {
      this._editorWorkerService = e2;
    }
    async provideDocumentColors(e2, t2) {
      return this._editorWorkerService.computeDefaultDocumentColors(e2.uri);
    }
    provideColorPresentations(e2, t2, n2) {
      let r2 = t2.range, i2 = t2.color, a2 = i2.alpha, o2 = new v(new ir(Math.round(255 * i2.red), Math.round(255 * i2.green), Math.round(255 * i2.blue), a2)), s2 = a2 ? v.Format.CSS.formatRGB(o2) : v.Format.CSS.formatRGBA(o2), c2 = a2 ? v.Format.CSS.formatHSL(o2) : v.Format.CSS.formatHSLA(o2), l2 = a2 ? v.Format.CSS.formatHex(o2) : v.Format.CSS.formatHexA(o2), u2 = [];
      return u2.push({
        label: s2,
        textEdit: {
          range: r2,
          text: s2
        }
      }), u2.push({
        label: c2,
        textEdit: {
          range: r2,
          text: c2
        }
      }), u2.push({
        label: l2,
        textEdit: {
          range: r2,
          text: l2
        }
      }), u2;
    }
  };
  Qm = Xm([
    Zm(0, bt)
  ], Qm);
  let $m = class extends S {
    constructor(e2, t2) {
      super(), this._register(e2.colorProvider.register(`*`, new Qm(t2)));
    }
  };
  $m = Xm([
    Zm(0, A),
    Zm(1, bt)
  ], $m), sl($m);
  async function eh(e2, t2, n2, r2 = true) {
    return ah(new nh(), e2, t2, n2, r2);
  }
  function th(e2, t2, n2, r2) {
    return Promise.resolve(n2.provideColorPresentations(e2, t2, r2));
  }
  var nh = class {
    constructor() {
    }
    async compute(e2, t2, n2, r2) {
      let i2 = await e2.provideDocumentColors(t2, n2);
      if (Array.isArray(i2)) for (let t3 of i2) r2.push({
        colorInfo: t3,
        provider: e2
      });
      return Array.isArray(i2);
    }
  }, rh = class {
    constructor() {
    }
    async compute(e2, t2, n2, r2) {
      let i2 = await e2.provideDocumentColors(t2, n2);
      if (Array.isArray(i2)) for (let e3 of i2) r2.push({
        range: e3.range,
        color: [
          e3.color.red,
          e3.color.green,
          e3.color.blue,
          e3.color.alpha
        ]
      });
      return Array.isArray(i2);
    }
  }, ih = class {
    constructor(e2) {
      this.colorInfo = e2;
    }
    async compute(e2, t2, n2, r2) {
      let i2 = await e2.provideColorPresentations(t2, this.colorInfo, m.None);
      return Array.isArray(i2) && r2.push(...i2), Array.isArray(i2);
    }
  };
  async function ah(e2, t2, n2, r2, i2) {
    let a2 = false, o2, s2 = [], c2 = t2.ordered(n2);
    for (let t3 = c2.length - 1; t3 >= 0; t3--) {
      let i3 = c2[t3];
      if (i3 instanceof Qm) o2 = i3;
      else try {
        await e2.compute(i3, n2, r2, s2) && (a2 = true);
      } catch (e3) {
        Uc(e3);
      }
    }
    return a2 ? s2 : o2 && i2 ? (await e2.compute(o2, n2, r2, s2), s2) : [];
  }
  function oh(e2, t2) {
    let { colorProvider: n2 } = e2.get(A), r2 = e2.get(Pt).getModel(t2);
    if (!r2) throw ds();
    let i2 = e2.get(D).getValue(`editor.defaultColorDecorators`, {
      resource: t2
    });
    return {
      model: r2,
      colorProviderRegistry: n2,
      isDefaultColorDecoratorsEnabled: i2
    };
  }
  y.registerCommand(`_executeDocumentColorProvider`, function(e2, ...t2) {
    let [n2] = t2;
    if (!(n2 instanceof R)) throw ds();
    let { model: r2, colorProviderRegistry: i2, isDefaultColorDecoratorsEnabled: a2 } = oh(e2, n2);
    return ah(new rh(), i2, r2, m.None, a2);
  }), y.registerCommand(`_executeColorPresentationProvider`, function(e2, ...t2) {
    let [n2, r2] = t2, { uri: i2, range: a2 } = r2;
    if (!(i2 instanceof R) || !Array.isArray(n2) || n2.length !== 4 || !P.isIRange(a2)) throw ds();
    let { model: o2, colorProviderRegistry: s2, isDefaultColorDecoratorsEnabled: c2 } = oh(e2, i2), [l2, u2, d2, f2] = n2;
    return ah(new ih({
      range: a2,
      color: {
        red: l2,
        green: u2,
        blue: d2,
        alpha: f2
      }
    }), s2, o2, m.None, c2);
  });
  var sh = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ch = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, lh;
  const uh = /* @__PURE__ */ Object.create({});
  let dh = (_r2 = class extends S {
    constructor(e2, t2, n2, r2) {
      super(), this._editor = e2, this._configurationService = t2, this._languageFeaturesService = n2, this._localToDispose = this._register(new C()), this._decorationsIds = [], this._colorDatas = /* @__PURE__ */ new Map(), this._colorDecoratorIds = this._editor.createDecorationsCollection(), this._ruleFactory = new Ee(this._editor), this._decoratorLimitReporter = new fh(), this._colorDecorationClassRefs = this._register(new C()), this._debounceInformation = r2.for(n2.colorProvider, `Document Colors`, {
        min: lh.RECOMPUTE_TIME
      }), this._register(e2.onDidChangeModel(() => {
        this._isColorDecoratorsEnabled = this.isEnabled(), this.updateColors();
      })), this._register(e2.onDidChangeModelLanguage(() => this.updateColors())), this._register(n2.colorProvider.onDidChange(() => this.updateColors())), this._register(e2.onDidChangeConfiguration((e3) => {
        let t3 = this._isColorDecoratorsEnabled;
        this._isColorDecoratorsEnabled = this.isEnabled(), this._isDefaultColorDecoratorsEnabled = this._editor.getOption(148);
        let n3 = t3 !== this._isColorDecoratorsEnabled || e3.hasChanged(21), r3 = e3.hasChanged(148);
        (n3 || r3) && (this._isColorDecoratorsEnabled ? this.updateColors() : this.removeAllDecorations());
      })), this._timeoutTimer = null, this._computePromise = null, this._isColorDecoratorsEnabled = this.isEnabled(), this._isDefaultColorDecoratorsEnabled = this._editor.getOption(148), this.updateColors();
    }
    isEnabled() {
      let e2 = this._editor.getModel();
      if (!e2) return false;
      let t2 = e2.getLanguageId(), n2 = this._configurationService.getValue(t2);
      if (n2 && typeof n2 == `object`) {
        let e3 = n2.colorDecorators;
        if (e3 && e3.enable !== void 0 && !e3.enable) return e3.enable;
      }
      return this._editor.getOption(20);
    }
    static get(e2) {
      return e2.getContribution(this.ID);
    }
    dispose() {
      this.stop(), this.removeAllDecorations(), super.dispose();
    }
    updateColors() {
      if (this.stop(), !this._isColorDecoratorsEnabled) return;
      let e2 = this._editor.getModel();
      !e2 || !this._languageFeaturesService.colorProvider.has(e2) || (this._localToDispose.add(this._editor.onDidChangeModelContent(() => {
        this._timeoutTimer || (this._timeoutTimer = new Jr(), this._timeoutTimer.cancelAndSet(() => {
          this._timeoutTimer = null, this.beginCompute();
        }, this._debounceInformation.get(e2)));
      })), this.beginCompute());
    }
    async beginCompute() {
      this._computePromise = sa(async (e2) => {
        let t2 = this._editor.getModel();
        if (!t2) return [];
        let n2 = new Fr(false), r2 = await eh(this._languageFeaturesService.colorProvider, t2, e2, this._isDefaultColorDecoratorsEnabled);
        return this._debounceInformation.update(t2, n2.elapsed()), r2;
      });
      try {
        let e2 = await this._computePromise;
        this.updateDecorations(e2), this.updateColorDecorators(e2), this._computePromise = null;
      } catch (e2) {
        G(e2);
      }
    }
    stop() {
      this._timeoutTimer && (this._timeoutTimer.cancel(), this._timeoutTimer = null), this._computePromise && (this._computePromise.cancel(), this._computePromise = null), this._localToDispose.clear();
    }
    updateDecorations(e2) {
      let t2 = e2.map((e3) => ({
        range: {
          startLineNumber: e3.colorInfo.range.startLineNumber,
          startColumn: e3.colorInfo.range.startColumn,
          endLineNumber: e3.colorInfo.range.endLineNumber,
          endColumn: e3.colorInfo.range.endColumn
        },
        options: M.EMPTY
      }));
      this._editor.changeDecorations((n2) => {
        this._decorationsIds = n2.deltaDecorations(this._decorationsIds, t2), this._colorDatas = /* @__PURE__ */ new Map(), this._decorationsIds.forEach((t3, n3) => this._colorDatas.set(t3, e2[n3]));
      });
    }
    updateColorDecorators(e2) {
      this._colorDecorationClassRefs.clear();
      let t2 = [], n2 = this._editor.getOption(21);
      for (let r3 = 0; r3 < e2.length && t2.length < n2; r3++) {
        let { red: n3, green: i2, blue: a2, alpha: o2 } = e2[r3].colorInfo.color, s2 = new ir(Math.round(n3 * 255), Math.round(i2 * 255), Math.round(a2 * 255), o2), c2 = `rgba(${s2.r}, ${s2.g}, ${s2.b}, ${s2.a})`, l2 = this._colorDecorationClassRefs.add(this._ruleFactory.createClassNameRef({
          backgroundColor: c2
        }));
        t2.push({
          range: {
            startLineNumber: e2[r3].colorInfo.range.startLineNumber,
            startColumn: e2[r3].colorInfo.range.startColumn,
            endLineNumber: e2[r3].colorInfo.range.endLineNumber,
            endColumn: e2[r3].colorInfo.range.endColumn
          },
          options: {
            description: `colorDetector`,
            before: {
              content: Mc,
              inlineClassName: `${l2.className} colorpicker-color-decoration`,
              inlineClassNameAffectsLetterSpacing: true,
              attachedData: uh
            }
          }
        });
      }
      let r2 = n2 < e2.length ? n2 : false;
      this._decoratorLimitReporter.update(e2.length, r2), this._colorDecoratorIds.set(t2);
    }
    removeAllDecorations() {
      this._editor.removeDecorations(this._decorationsIds), this._decorationsIds = [], this._colorDecoratorIds.clear(), this._colorDecorationClassRefs.clear();
    }
    getColorData(e2) {
      let t2 = this._editor.getModel();
      if (!t2) return null;
      let n2 = t2.getDecorationsInRange(P.fromPositions(e2, e2)).filter((e3) => this._colorDatas.has(e3.id));
      return n2.length === 0 ? null : this._colorDatas.get(n2[0].id);
    }
    isColorDecoration(e2) {
      return this._colorDecoratorIds.has(e2);
    }
  }, lh = _r2, _r2.ID = `editor.contrib.colorDetector`, _r2.RECOMPUTE_TIME = 1e3, _r2);
  dh = lh = sh([
    ch(1, D),
    ch(2, A),
    ch(3, Et)
  ], dh);
  var fh = class {
    constructor() {
      this._onDidChange = new E(), this._computed = 0, this._limited = false;
    }
    update(e2, t2) {
      (e2 !== this._computed || t2 !== this._limited) && (this._computed = e2, this._limited = t2, this._onDidChange.fire());
    }
  };
  X(dh.ID, dh, 1);
  var ph = class {
    get color() {
      return this._color;
    }
    set color(e2) {
      this._color.equals(e2) || (this._color = e2, this._onDidChangeColor.fire(e2));
    }
    get presentation() {
      return this.colorPresentations[this.presentationIndex];
    }
    get colorPresentations() {
      return this._colorPresentations;
    }
    set colorPresentations(e2) {
      this._colorPresentations = e2, this.presentationIndex > e2.length - 1 && (this.presentationIndex = 0), this._onDidChangePresentation.fire(this.presentation);
    }
    constructor(e2, t2, n2) {
      this.presentationIndex = n2, this._onColorFlushed = new E(), this.onColorFlushed = this._onColorFlushed.event, this._onDidChangeColor = new E(), this.onDidChangeColor = this._onDidChangeColor.event, this._onDidChangePresentation = new E(), this.onDidChangePresentation = this._onDidChangePresentation.event, this.originalColor = e2, this._color = e2, this._colorPresentations = t2;
    }
    selectNextColorPresentation() {
      this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length, this.flushColor(), this._onDidChangePresentation.fire(this.presentation);
    }
    guessColorPresentation(e2, t2) {
      let n2 = -1;
      for (let e3 = 0; e3 < this.colorPresentations.length; e3++) if (t2.toLowerCase() === this.colorPresentations[e3].label) {
        n2 = e3;
        break;
      }
      if (n2 === -1) {
        let e3 = t2.split(`(`)[0].toLowerCase();
        for (let t3 = 0; t3 < this.colorPresentations.length; t3++) if (this.colorPresentations[t3].label.toLowerCase().startsWith(e3)) {
          n2 = t3;
          break;
        }
      }
      n2 !== -1 && n2 !== this.presentationIndex && (this.presentationIndex = n2, this._onDidChangePresentation.fire(this.presentation));
    }
    flushColor() {
      this._onColorFlushed.fire(this._color);
    }
  };
  const mh = r;
  var hh = class extends S {
    constructor(e2, t2, n2, r2 = false) {
      super(), this.model = t2, this.showingStandaloneColorPicker = r2, this._closeButton = null, this._domNode = mh(`.colorpicker-header`), B(e2, this._domNode), this._pickedColorNode = B(this._domNode, mh(`.picked-color`)), B(this._pickedColorNode, mh(`span.codicon.codicon-color-mode`)), this._pickedColorPresentation = B(this._pickedColorNode, document.createElement(`span`)), this._pickedColorPresentation.classList.add(`picked-color-presentation`);
      let i2 = U(`clickToToggleColorOptions`, `Click to toggle color options (rgb/hsl/hex)`);
      this._pickedColorNode.setAttribute(`title`, i2), this._originalColorNode = B(this._domNode, mh(`.original-color`)), this._originalColorNode.style.backgroundColor = v.Format.CSS.format(this.model.originalColor) || ``, this.backgroundColor = n2.getColorTheme().getColor(Qa) || v.white, this._register(n2.onDidColorThemeChange((e3) => {
        this.backgroundColor = e3.getColor(Qa) || v.white;
      })), this._register(z(this._pickedColorNode, He.CLICK, () => this.model.selectNextColorPresentation())), this._register(z(this._originalColorNode, He.CLICK, () => {
        this.model.color = this.model.originalColor, this.model.flushColor();
      })), this._register(t2.onDidChangeColor(this.onDidChangeColor, this)), this._register(t2.onDidChangePresentation(this.onDidChangePresentation, this)), this._pickedColorNode.style.backgroundColor = v.Format.CSS.format(t2.color) || ``, this._pickedColorNode.classList.toggle(`light`, t2.color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : t2.color.isLighter()), this.onDidChangeColor(this.model.color), this.showingStandaloneColorPicker && (this._domNode.classList.add(`standalone-colorpicker`), this._closeButton = this._register(new gh(this._domNode)));
    }
    get closeButton() {
      return this._closeButton;
    }
    get pickedColorNode() {
      return this._pickedColorNode;
    }
    get originalColorNode() {
      return this._originalColorNode;
    }
    onDidChangeColor(e2) {
      this._pickedColorNode.style.backgroundColor = v.Format.CSS.format(e2) || ``, this._pickedColorNode.classList.toggle(`light`, e2.rgba.a < 0.5 ? this.backgroundColor.isLighter() : e2.isLighter()), this.onDidChangePresentation();
    }
    onDidChangePresentation() {
      this._pickedColorPresentation.textContent = this.model.presentation ? this.model.presentation.label : ``;
    }
  }, gh = class extends S {
    constructor(e2) {
      super(), this._onClicked = this._register(new E()), this.onClicked = this._onClicked.event, this._button = document.createElement(`div`), this._button.classList.add(`close-button`), B(e2, this._button);
      let t2 = document.createElement(`div`);
      t2.classList.add(`close-button-inner-div`), B(this._button, t2);
      let n2 = B(t2, mh(`.button` + L.asCSSSelector(cl(`color-picker-close`, _.close, U(`closeIcon`, `Icon to close the color picker`)))));
      n2.classList.add(`close-icon`), this._register(z(this._button, He.CLICK, () => {
        this._onClicked.fire();
      }));
    }
  }, _h = class extends S {
    constructor(e2, t2, n2, r2 = false) {
      super(), this.model = t2, this.pixelRatio = n2, this._insertButton = null, this._domNode = mh(`.colorpicker-body`), B(e2, this._domNode), this._saturationBox = new vh(this._domNode, this.model, this.pixelRatio), this._register(this._saturationBox), this._register(this._saturationBox.onDidChange(this.onDidSaturationValueChange, this)), this._register(this._saturationBox.onColorFlushed(this.flushColor, this)), this._opacityStrip = new bh(this._domNode, this.model, r2), this._register(this._opacityStrip), this._register(this._opacityStrip.onDidChange(this.onDidOpacityChange, this)), this._register(this._opacityStrip.onColorFlushed(this.flushColor, this)), this._hueStrip = new xh(this._domNode, this.model, r2), this._register(this._hueStrip), this._register(this._hueStrip.onDidChange(this.onDidHueChange, this)), this._register(this._hueStrip.onColorFlushed(this.flushColor, this)), r2 && (this._insertButton = this._register(new Sh(this._domNode)), this._domNode.classList.add(`standalone-colorpicker`));
    }
    flushColor() {
      this.model.flushColor();
    }
    onDidSaturationValueChange({ s: e2, v: t2 }) {
      let n2 = this.model.color.hsva;
      this.model.color = new v(new nt(n2.h, e2, t2, n2.a));
    }
    onDidOpacityChange(e2) {
      let t2 = this.model.color.hsva;
      this.model.color = new v(new nt(t2.h, t2.s, t2.v, e2));
    }
    onDidHueChange(e2) {
      let t2 = this.model.color.hsva, n2 = (1 - e2) * 360;
      this.model.color = new v(new nt(n2 === 360 ? 0 : n2, t2.s, t2.v, t2.a));
    }
    get domNode() {
      return this._domNode;
    }
    get saturationBox() {
      return this._saturationBox;
    }
    get enterButton() {
      return this._insertButton;
    }
    layout() {
      this._saturationBox.layout(), this._opacityStrip.layout(), this._hueStrip.layout();
    }
  }, vh = class extends S {
    constructor(e2, t2, n2) {
      super(), this.model = t2, this.pixelRatio = n2, this._onDidChange = new E(), this.onDidChange = this._onDidChange.event, this._onColorFlushed = new E(), this.onColorFlushed = this._onColorFlushed.event, this._domNode = mh(`.saturation-wrap`), B(e2, this._domNode), this._canvas = document.createElement(`canvas`), this._canvas.className = `saturation-box`, B(this._domNode, this._canvas), this.selection = mh(`.saturation-selection`), B(this._domNode, this.selection), this.layout(), this._register(z(this._domNode, He.POINTER_DOWN, (e3) => this.onPointerDown(e3))), this._register(this.model.onDidChangeColor(this.onDidChangeColor, this)), this.monitor = null;
    }
    get domNode() {
      return this._domNode;
    }
    onPointerDown(e2) {
      if (!e2.target || !(e2.target instanceof Element)) return;
      this.monitor = this._register(new Ze());
      let t2 = Vo(this._domNode);
      e2.target !== this.selection && this.onDidChangePosition(e2.offsetX, e2.offsetY), this.monitor.startMonitoring(e2.target, e2.pointerId, e2.buttons, (e3) => this.onDidChangePosition(e3.pageX - t2.left, e3.pageY - t2.top), () => null);
      let n2 = z(e2.target.ownerDocument, He.POINTER_UP, () => {
        this._onColorFlushed.fire(), n2.dispose(), this.monitor && (this.monitor.stopMonitoring(true), this.monitor = null);
      }, true);
    }
    onDidChangePosition(e2, t2) {
      let n2 = Math.max(0, Math.min(1, e2 / this.width)), r2 = Math.max(0, Math.min(1, 1 - t2 / this.height));
      this.paintSelection(n2, r2), this._onDidChange.fire({
        s: n2,
        v: r2
      });
    }
    layout() {
      this.width = this._domNode.offsetWidth, this.height = this._domNode.offsetHeight, this._canvas.width = this.width * this.pixelRatio, this._canvas.height = this.height * this.pixelRatio, this.paint();
      let e2 = this.model.color.hsva;
      this.paintSelection(e2.s, e2.v);
    }
    paint() {
      let e2 = this.model.color.hsva, t2 = new v(new nt(e2.h, 1, 1, 1)), n2 = this._canvas.getContext(`2d`), r2 = n2.createLinearGradient(0, 0, this._canvas.width, 0);
      r2.addColorStop(0, `rgba(255, 255, 255, 1)`), r2.addColorStop(0.5, `rgba(255, 255, 255, 0.5)`), r2.addColorStop(1, `rgba(255, 255, 255, 0)`);
      let i2 = n2.createLinearGradient(0, 0, 0, this._canvas.height);
      i2.addColorStop(0, `rgba(0, 0, 0, 0)`), i2.addColorStop(1, `rgba(0, 0, 0, 1)`), n2.rect(0, 0, this._canvas.width, this._canvas.height), n2.fillStyle = v.Format.CSS.format(t2), n2.fill(), n2.fillStyle = r2, n2.fill(), n2.fillStyle = i2, n2.fill();
    }
    paintSelection(e2, t2) {
      this.selection.style.left = `${e2 * this.width}px`, this.selection.style.top = `${this.height - t2 * this.height}px`;
    }
    onDidChangeColor(e2) {
      if (this.monitor && this.monitor.isMonitoring()) return;
      this.paint();
      let t2 = e2.hsva;
      this.paintSelection(t2.s, t2.v);
    }
  }, yh = class extends S {
    constructor(e2, t2, n2 = false) {
      super(), this.model = t2, this._onDidChange = new E(), this.onDidChange = this._onDidChange.event, this._onColorFlushed = new E(), this.onColorFlushed = this._onColorFlushed.event, n2 ? (this.domNode = B(e2, mh(`.standalone-strip`)), this.overlay = B(this.domNode, mh(`.standalone-overlay`))) : (this.domNode = B(e2, mh(`.strip`)), this.overlay = B(this.domNode, mh(`.overlay`))), this.slider = B(this.domNode, mh(`.slider`)), this.slider.style.top = `0px`, this._register(z(this.domNode, He.POINTER_DOWN, (e3) => this.onPointerDown(e3))), this._register(t2.onDidChangeColor(this.onDidChangeColor, this)), this.layout();
    }
    layout() {
      this.height = this.domNode.offsetHeight - this.slider.offsetHeight;
      let e2 = this.getValue(this.model.color);
      this.updateSliderPosition(e2);
    }
    onDidChangeColor(e2) {
      let t2 = this.getValue(e2);
      this.updateSliderPosition(t2);
    }
    onPointerDown(e2) {
      if (!e2.target || !(e2.target instanceof Element)) return;
      let t2 = this._register(new Ze()), n2 = Vo(this.domNode);
      this.domNode.classList.add(`grabbing`), e2.target !== this.slider && this.onDidChangeTop(e2.offsetY), t2.startMonitoring(e2.target, e2.pointerId, e2.buttons, (e3) => this.onDidChangeTop(e3.pageY - n2.top), () => null);
      let r2 = z(e2.target.ownerDocument, He.POINTER_UP, () => {
        this._onColorFlushed.fire(), r2.dispose(), t2.stopMonitoring(true), this.domNode.classList.remove(`grabbing`);
      }, true);
    }
    onDidChangeTop(e2) {
      let t2 = Math.max(0, Math.min(1, 1 - e2 / this.height));
      this.updateSliderPosition(t2), this._onDidChange.fire(t2);
    }
    updateSliderPosition(e2) {
      this.slider.style.top = `${(1 - e2) * this.height}px`;
    }
  }, bh = class extends yh {
    constructor(e2, t2, n2 = false) {
      super(e2, t2, n2), this.domNode.classList.add(`opacity-strip`), this.onDidChangeColor(this.model.color);
    }
    onDidChangeColor(e2) {
      super.onDidChangeColor(e2);
      let { r: t2, g: n2, b: r2 } = e2.rgba, i2 = new v(new ir(t2, n2, r2, 1)), a2 = new v(new ir(t2, n2, r2, 0));
      this.overlay.style.background = `linear-gradient(to bottom, ${i2} 0%, ${a2} 100%)`;
    }
    getValue(e2) {
      return e2.hsva.a;
    }
  }, xh = class extends yh {
    constructor(e2, t2, n2 = false) {
      super(e2, t2, n2), this.domNode.classList.add(`hue-strip`);
    }
    getValue(e2) {
      return 1 - e2.hsva.h / 360;
    }
  }, Sh = class extends S {
    constructor(e2) {
      super(), this._onClicked = this._register(new E()), this.onClicked = this._onClicked.event, this._button = B(e2, document.createElement(`button`)), this._button.classList.add(`insert-button`), this._button.textContent = `Insert`, this._register(z(this._button, He.CLICK, () => {
        this._onClicked.fire();
      }));
    }
    get button() {
      return this._button;
    }
  }, Ch = class extends li {
    constructor(e2, t2, n2, r2, i2 = false) {
      super(), this.model = t2, this.pixelRatio = n2, this._register(Zn.getInstance(ts(e2)).onDidChange(() => this.layout())), this._domNode = mh(`.colorpicker-widget`), e2.appendChild(this._domNode), this.header = this._register(new hh(this._domNode, this.model, r2, i2)), this.body = this._register(new _h(this._domNode, this.model, this.pixelRatio, i2));
    }
    layout() {
      this.body.layout();
    }
    get domNode() {
      return this._domNode;
    }
  }, wh = class {
    constructor(e2, t2, n2, r2) {
      this.priority = e2, this.range = t2, this.initialMousePosX = n2, this.initialMousePosY = r2, this.type = 1;
    }
    equals(e2) {
      return e2.type === 1 && this.range.equalsRange(e2.range);
    }
    canAdoptVisibleHover(e2, t2) {
      return e2.type === 1 && t2.lineNumber === this.range.startLineNumber;
    }
  }, Th = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this.priority = e2, this.owner = t2, this.range = n2, this.initialMousePosX = r2, this.initialMousePosY = i2, this.supportsMarkerHover = a2, this.type = 2;
    }
    equals(e2) {
      return e2.type === 2 && this.owner === e2.owner;
    }
    canAdoptVisibleHover(e2, t2) {
      return e2.type === 2 && this.owner === e2.owner;
    }
  }, Eh = class {
    constructor(e2) {
      this.renderedHoverParts = e2;
    }
    dispose() {
      for (let e2 of this.renderedHoverParts) e2.dispose();
    }
  };
  const Dh = new class {
    constructor() {
      this._participants = [];
    }
    register(e2) {
      this._participants.push(e2);
    }
    getAll() {
      return this._participants;
    }
  }();
  var Oh = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, kh = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Ah = class {
    constructor(e2, t2, n2, r2) {
      this.owner = e2, this.range = t2, this.model = n2, this.provider = r2, this.forceShowAtRange = true;
    }
    isValidForHoverAnchor(e2) {
      return e2.type === 1 && this.range.startColumn <= e2.range.startColumn && this.range.endColumn >= e2.range.endColumn;
    }
  };
  let jh = class {
    constructor(e2, t2) {
      this._editor = e2, this._themeService = t2, this.hoverOrdinal = 2;
    }
    computeSync(e2, t2) {
      return [];
    }
    computeAsync(e2, t2, n2) {
      return l.fromPromise(this._computeAsync(e2, t2, n2));
    }
    async _computeAsync(e2, t2, n2) {
      if (!this._editor.hasModel()) return [];
      let r2 = dh.get(this._editor);
      if (!r2) return [];
      for (let e3 of t2) {
        if (!r2.isColorDecoration(e3)) continue;
        let t3 = r2.getColorData(e3.range.getStartPosition());
        if (t3) {
          let e4 = await Ph(this, this._editor.getModel(), t3.colorInfo, t3.provider);
          return [
            e4
          ];
        }
      }
      return [];
    }
    renderHoverParts(e2, t2) {
      let n2 = Fh(this, this._editor, this._themeService, t2, e2);
      if (!n2) return new Eh([]);
      this._colorPicker = n2.colorPicker;
      let r2 = {
        hoverPart: n2.hoverPart,
        hoverElement: this._colorPicker.domNode,
        dispose() {
          n2.disposables.dispose();
        }
      };
      return new Eh([
        r2
      ]);
    }
    handleResize() {
      var _a3;
      (_a3 = this._colorPicker) == null ? void 0 : _a3.layout();
    }
    isColorPickerVisible() {
      return !!this._colorPicker;
    }
  };
  jh = Oh([
    kh(1, Gt)
  ], jh);
  var Mh = class {
    constructor(e2, t2, n2, r2) {
      this.owner = e2, this.range = t2, this.model = n2, this.provider = r2;
    }
  };
  let Nh = class {
    constructor(e2, t2) {
      this._editor = e2, this._themeService = t2, this._color = null;
    }
    async createColorHover(e2, t2, n2) {
      if (!this._editor.hasModel()) return null;
      let r2 = dh.get(this._editor);
      if (!r2) return null;
      let i2 = await eh(n2, this._editor.getModel(), m.None), a2 = null, o2 = null;
      for (let t3 of i2) {
        let n3 = t3.colorInfo;
        P.containsRange(n3.range, e2.range) && (a2 = n3, o2 = t3.provider);
      }
      let s2 = a2 ?? e2, c2 = o2 ?? t2, l2 = !!a2;
      return {
        colorHover: await Ph(this, this._editor.getModel(), s2, c2),
        foundInEditor: l2
      };
    }
    async updateEditorModel(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = e2.model, n2 = new P(e2.range.startLineNumber, e2.range.startColumn, e2.range.endLineNumber, e2.range.endColumn);
      this._color && (await Lh(this._editor.getModel(), t2, this._color, n2, e2), n2 = Ih(this._editor, n2, t2));
    }
    renderHoverParts(e2, t2) {
      return Fh(this, this._editor, this._themeService, t2, e2);
    }
    set color(e2) {
      this._color = e2;
    }
    get color() {
      return this._color;
    }
  };
  Nh = Oh([
    kh(1, Gt)
  ], Nh);
  async function Ph(e2, t2, n2, r2) {
    let i2 = t2.getValueInRange(n2.range), { red: a2, green: o2, blue: s2, alpha: c2 } = n2.color, l2 = new ir(Math.round(a2 * 255), Math.round(o2 * 255), Math.round(s2 * 255), c2), u2 = new v(l2), d2 = await th(t2, n2, r2, m.None), f2 = new ph(u2, [], 0);
    return f2.colorPresentations = d2 || [], f2.guessColorPresentation(u2, i2), e2 instanceof jh ? new Ah(e2, P.lift(n2.range), f2, r2) : new Mh(e2, P.lift(n2.range), f2, r2);
  }
  function Fh(e2, t2, n2, r2, i2) {
    if (r2.length === 0 || !t2.hasModel()) return;
    if (i2.setMinimumDimensions) {
      let e3 = t2.getOption(67) + 8;
      i2.setMinimumDimensions(new x(302, e3));
    }
    let a2 = new C(), o2 = r2[0], s2 = t2.getModel(), c2 = o2.model, l2 = a2.add(new Ch(i2.fragment, c2, t2.getOption(144), n2, e2 instanceof Nh)), u2 = false, d2 = new P(o2.range.startLineNumber, o2.range.startColumn, o2.range.endLineNumber, o2.range.endColumn);
    if (e2 instanceof Nh) {
      let t3 = o2.model.color;
      e2.color = t3, Lh(s2, c2, t3, d2, o2), a2.add(c2.onColorFlushed((t4) => {
        e2.color = t4;
      }));
    } else a2.add(c2.onColorFlushed(async (e3) => {
      await Lh(s2, c2, e3, d2, o2), u2 = true, d2 = Ih(t2, d2, c2);
    }));
    return a2.add(c2.onDidChangeColor((e3) => {
      Lh(s2, c2, e3, d2, o2);
    })), a2.add(t2.onDidChangeModelContent((e3) => {
      u2 ? u2 = false : (i2.hide(), t2.focus());
    })), {
      hoverPart: o2,
      colorPicker: l2,
      disposables: a2
    };
  }
  function Ih(e2, t2, n2) {
    let r2 = [], i2 = n2.presentation.textEdit ?? {
      range: t2,
      text: n2.presentation.label,
      forceMoveMarkers: false
    };
    r2.push(i2), n2.presentation.additionalTextEdits && r2.push(...n2.presentation.additionalTextEdits);
    let a2 = P.lift(i2.range), o2 = e2.getModel()._setTrackedRange(null, a2, 3);
    return e2.executeEdits(`colorpicker`, r2), e2.pushUndoStop(), e2.getModel()._getTrackedRange(o2) ?? a2;
  }
  async function Lh(e2, t2, n2, r2, i2) {
    let a2 = await th(e2, {
      range: r2,
      color: {
        red: n2.rgba.r / 255,
        green: n2.rgba.g / 255,
        blue: n2.rgba.b / 255,
        alpha: n2.rgba.a
      }
    }, i2.provider, m.None);
    t2.colorPresentations = a2 || [];
  }
  const Rh = `editor.action.showHover`, zh = `editor.action.showDefinitionPreviewHover`, Bh = `editor.action.scrollUpHover`, Vh = `editor.action.scrollDownHover`, Hh = `editor.action.scrollLeftHover`, Uh = `editor.action.scrollRightHover`, Wh = `editor.action.pageUpHover`, Gh = `editor.action.pageDownHover`, Kh = `editor.action.goToTopHover`, qh = `editor.action.goToBottomHover`, Jh = `editor.action.increaseHoverVerbosityLevel`, Yh = U({
    key: `increaseHoverVerbosityLevel`,
    comment: [
      `Label for action that will increase the hover verbosity level.`
    ]
  }, `Increase Hover Verbosity Level`), Xh = `editor.action.decreaseHoverVerbosityLevel`, Zh = U({
    key: `decreaseHoverVerbosityLevel`,
    comment: [
      `Label for action that will decrease the hover verbosity level.`
    ]
  }, `Decrease Hover Verbosity Level`), Qh = `editor.action.inlineSuggest.commit`, $h = `editor.action.inlineSuggest.showPrevious`, eg = `editor.action.inlineSuggest.showNext`;
  var tg = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ng = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, rg;
  let ig = class extends S {
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.model = t2, this.instantiationService = n2, this.alwaysShowToolbar = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(62).showToolbar === `always`), this.sessionPosition = void 0, this.position = H(this, (e3) => {
        var _a3, _b3;
        let t3 = (_a3 = this.model.read(e3)) == null ? void 0 : _a3.primaryGhostText.read(e3);
        if (!this.alwaysShowToolbar.read(e3) || !t3 || t3.parts.length === 0) return this.sessionPosition = void 0, null;
        let n3 = t3.parts[0].column;
        this.sessionPosition && this.sessionPosition.lineNumber !== t3.lineNumber && (this.sessionPosition = void 0);
        let r2 = new N(t3.lineNumber, Math.min(n3, ((_b3 = this.sessionPosition) == null ? void 0 : _b3.column) ?? 2 ** 53 - 1));
        return this.sessionPosition = r2, r2;
      }), this._register(Fi((t3, n3) => {
        let r2 = this.model.read(t3);
        if (!r2 || !this.alwaysShowToolbar.read(t3)) return;
        let i2 = Ta((t4, n4) => {
          let i3 = n4.add(this.instantiationService.createInstance(sg, this.editor, true, this.position, r2.selectedInlineCompletionIndex, r2.inlineCompletionsCount, r2.activeCommands));
          return e2.addContentWidget(i3), n4.add(Hl(() => e2.removeContentWidget(i3))), n4.add(Ni((e3) => {
            let t5 = this.position.read(e3);
            t5 && r2.lastTriggerKind.read(e3) !== en.Explicit && r2.triggerExplicitly();
          })), i3;
        }), a2 = Sa(this, (e3, t4) => !!this.position.read(e3) || !!t4);
        n3.add(Ni((e3) => {
          a2.read(e3) && i2.read(e3);
        }));
      }));
    }
  };
  ig = tg([
    ng(2, k)
  ], ig);
  const ag = cl(`inline-suggestion-hints-next`, _.chevronRight, U(`parameterHintsNextIcon`, `Icon for show next parameter hint.`)), og = cl(`inline-suggestion-hints-previous`, _.chevronLeft, U(`parameterHintsPreviousIcon`, `Icon for show previous parameter hint.`));
  let sg = (_s2 = class extends S {
    static get dropDownVisible() {
      return this._dropDownVisible;
    }
    createCommandAction(e2, t2, n2) {
      let r2 = new a(e2, t2, n2, true, () => this._commandService.executeCommand(e2)), i2 = this.keybindingService.lookupKeybinding(e2, this._contextKeyService), o2 = t2;
      return i2 && (o2 = U({
        key: `content`,
        comment: [
          `A label`,
          `A keybinding`
        ]
      }, `{0} ({1})`, t2, i2.getLabel())), r2.tooltip = o2, r2;
    }
    constructor(e2, t2, n2, r2, i2, o2, s2, c2, l2, u2, d2) {
      super(), this.editor = e2, this.withBorder = t2, this._position = n2, this._currentSuggestionIdx = r2, this._suggestionCount = i2, this._extraCommands = o2, this._commandService = s2, this.keybindingService = l2, this._contextKeyService = u2, this._menuService = d2, this.id = `InlineSuggestionHintsContentWidget${rg.id++}`, this.allowEditorOverflow = true, this.suppressMouseDown = false, this.nodes = os(`div.inlineSuggestionsHints`, {
        className: this.withBorder ? `.withBorder` : ``
      }, [
        os(`div@toolBar`)
      ]), this.previousAction = this.createCommandAction($h, U(`previous`, `Previous`), L.asClassName(og)), this.availableSuggestionCountAction = new a(`inlineSuggestionHints.availableSuggestionCount`, ``, void 0, false), this.nextAction = this.createCommandAction(eg, U(`next`, `Next`), L.asClassName(ag)), this.inlineCompletionsActionsMenus = this._register(this._menuService.createMenu(j.InlineCompletionsActions, this._contextKeyService)), this.clearAvailableSuggestionCountLabelDebounced = this._register(new hr(() => {
        this.availableSuggestionCountAction.label = ``;
      }, 100)), this.disableButtonsDebounced = this._register(new hr(() => {
        this.previousAction.enabled = this.nextAction.enabled = false;
      }, 100)), this.toolBar = this._register(c2.createInstance(ug, this.nodes.toolBar, j.InlineSuggestionToolbar, {
        menuOptions: {
          renderShortTitle: true
        },
        toolbarOptions: {
          primaryGroup: (e3) => e3.startsWith(`primary`)
        },
        actionViewItemProvider: (e3, t3) => {
          if (e3 instanceof Mn) return c2.createInstance(lg, e3, void 0);
          if (e3 === this.availableSuggestionCountAction) {
            let t4 = new cg(void 0, e3, {
              label: true,
              icon: false
            });
            return t4.setClass(`availableSuggestionCount`), t4;
          }
        },
        telemetrySource: `InlineSuggestionToolbar`
      })), this.toolBar.setPrependedPrimaryActions([
        this.previousAction,
        this.availableSuggestionCountAction,
        this.nextAction
      ]), this._register(this.toolBar.onDidChangeDropdownVisibility((e3) => {
        rg._dropDownVisible = e3;
      })), this._register(Ni((e3) => {
        this._position.read(e3), this.editor.layoutContentWidget(this);
      })), this._register(Ni((e3) => {
        let t3 = this._suggestionCount.read(e3), n3 = this._currentSuggestionIdx.read(e3);
        t3 === void 0 ? this.clearAvailableSuggestionCountLabelDebounced.schedule() : (this.clearAvailableSuggestionCountLabelDebounced.cancel(), this.availableSuggestionCountAction.label = `${n3 + 1}/${t3}`), t3 !== void 0 && t3 > 1 ? (this.disableButtonsDebounced.cancel(), this.previousAction.enabled = this.nextAction.enabled = true) : this.disableButtonsDebounced.schedule();
      })), this._register(Ni((e3) => {
        let t3 = this._extraCommands.read(e3), n3 = t3.map((e4) => ({
          class: void 0,
          id: e4.id,
          enabled: true,
          tooltip: e4.tooltip || ``,
          label: e4.title,
          run: (t4) => this._commandService.executeCommand(e4.id)
        }));
        for (let [e4, t4] of this.inlineCompletionsActionsMenus.getActions()) for (let e5 of t4) e5 instanceof Mn && n3.push(e5);
        n3.length > 0 && n3.unshift(new Cr()), this.toolBar.setAdditionalSecondaryActions(n3);
      }));
    }
    getId() {
      return this.id;
    }
    getDomNode() {
      return this.nodes.root;
    }
    getPosition() {
      return {
        position: this._position.get(),
        preference: [
          1,
          2
        ],
        positionAffinity: 3
      };
    }
  }, rg = _s2, _s2._dropDownVisible = false, _s2.id = 0, _s2);
  sg = rg = tg([
    ng(6, mt),
    ng(7, k),
    ng(8, Ct),
    ng(9, O),
    ng(10, Nt)
  ], sg);
  var cg = class extends c {
    constructor() {
      super(...arguments), this._className = void 0;
    }
    setClass(e2) {
      this._className = e2;
    }
    render(e2) {
      super.render(e2), this._className && e2.classList.add(this._className);
    }
    updateTooltip() {
    }
  }, lg = class extends jn {
    updateLabel() {
      let e2 = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);
      if (!e2) return super.updateLabel();
      if (this.label) {
        let t2 = os(`div.keybinding`).root, n2 = this._register(new hn(t2, Wn, {
          disableTitle: true,
          ...Xl
        }));
        n2.set(e2), this.label.textContent = this._action.label, this.label.appendChild(t2), this.label.classList.add(`inlineSuggestionStatusBarItemLabel`);
      }
    }
    updateTooltip() {
    }
  };
  let ug = class extends _i {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      super(e2, {
        resetMenu: t2,
        ...n2
      }, r2, i2, a2, o2, s2, c2), this.menuId = t2, this.options2 = n2, this.menuService = r2, this.contextKeyService = i2, this.menu = this._store.add(this.menuService.createMenu(this.menuId, this.contextKeyService, {
        emitEventsForSubmenuChanges: true
      })), this.additionalActions = [], this.prependedPrimaryActions = [], this._store.add(this.menu.onDidChange(() => this.updateToolbar())), this.updateToolbar();
    }
    updateToolbar() {
      var _a3, _b3, _c3, _d3, _e3, _f3, _g3;
      let e2 = [], t2 = [];
      ia(this.menu, (_a3 = this.options2) == null ? void 0 : _a3.menuOptions, {
        primary: e2,
        secondary: t2
      }, (_c3 = (_b3 = this.options2) == null ? void 0 : _b3.toolbarOptions) == null ? void 0 : _c3.primaryGroup, (_e3 = (_d3 = this.options2) == null ? void 0 : _d3.toolbarOptions) == null ? void 0 : _e3.shouldInlineSubmenu, (_g3 = (_f3 = this.options2) == null ? void 0 : _f3.toolbarOptions) == null ? void 0 : _g3.useSeparatorsInPrimaryActions), t2.push(...this.additionalActions), e2.unshift(...this.prependedPrimaryActions), this.setActions(e2, t2);
    }
    setPrependedPrimaryActions(e2) {
      go(this.prependedPrimaryActions, e2, (e3, t2) => e3 === t2) || (this.prependedPrimaryActions = e2, this.updateToolbar());
    }
    setAdditionalSecondaryActions(e2) {
      go(this.additionalActions, e2, (e3, t2) => e3 === t2) || (this.additionalActions = e2, this.updateToolbar());
    }
  };
  ug = tg([
    ng(3, Nt),
    ng(4, O),
    ng(5, ht),
    ng(6, Ct),
    ng(7, mt),
    ng(8, Ht)
  ], ug);
  function dg(e2, t2, n2) {
    let r2 = Vo(e2);
    return !(t2 < r2.left || t2 > r2.left + r2.width || n2 < r2.top || n2 > r2.top + r2.height);
  }
  var fg = class {
    constructor(e2, t2, n2) {
      this.value = e2, this.isComplete = t2, this.hasLoadingMessage = n2;
    }
  }, pg = class extends S {
    constructor(e2, t2) {
      super(), this._editor = e2, this._computer = t2, this._onResult = this._register(new E()), this.onResult = this._onResult.event, this._firstWaitScheduler = this._register(new hr(() => this._triggerAsyncComputation(), 0)), this._secondWaitScheduler = this._register(new hr(() => this._triggerSyncComputation(), 0)), this._loadingMessageScheduler = this._register(new hr(() => this._triggerLoadingMessage(), 0)), this._state = 0, this._asyncIterable = null, this._asyncIterableDone = false, this._result = [];
    }
    dispose() {
      this._asyncIterable && (this._asyncIterable.cancel(), this._asyncIterable = null), super.dispose();
    }
    get _hoverTime() {
      return this._editor.getOption(60).delay;
    }
    get _firstWaitTime() {
      return this._hoverTime / 2;
    }
    get _secondWaitTime() {
      return this._hoverTime - this._firstWaitTime;
    }
    get _loadingMessageTime() {
      return 3 * this._hoverTime;
    }
    _setState(e2, t2 = true) {
      this._state = e2, t2 && this._fireResult();
    }
    _triggerAsyncComputation() {
      this._setState(2), this._secondWaitScheduler.schedule(this._secondWaitTime), this._computer.computeAsync ? (this._asyncIterableDone = false, this._asyncIterable = oa((e2) => this._computer.computeAsync(e2)), (async () => {
        try {
          for await (let e2 of this._asyncIterable) e2 && (this._result.push(e2), this._fireResult());
          this._asyncIterableDone = true, (this._state === 3 || this._state === 4) && this._setState(0);
        } catch (e2) {
          G(e2);
        }
      })()) : this._asyncIterableDone = true;
    }
    _triggerSyncComputation() {
      this._computer.computeSync && (this._result = this._result.concat(this._computer.computeSync())), this._setState(this._asyncIterableDone ? 0 : 3);
    }
    _triggerLoadingMessage() {
      this._state === 3 && this._setState(4);
    }
    _fireResult() {
      if (this._state === 1 || this._state === 2) return;
      let e2 = this._state === 0, t2 = this._state === 4;
      this._onResult.fire(new fg(this._result.slice(0), e2, t2));
    }
    start(e2) {
      if (e2 === 0) this._state === 0 && (this._setState(1), this._firstWaitScheduler.schedule(this._firstWaitTime), this._loadingMessageScheduler.schedule(this._loadingMessageTime));
      else switch (this._state) {
        case 0:
          this._triggerAsyncComputation(), this._secondWaitScheduler.cancel(), this._triggerSyncComputation();
          break;
        case 2:
          this._secondWaitScheduler.cancel(), this._triggerSyncComputation();
          break;
      }
    }
    cancel() {
      this._firstWaitScheduler.cancel(), this._secondWaitScheduler.cancel(), this._loadingMessageScheduler.cancel(), this._asyncIterable && (this._asyncIterable.cancel(), this._asyncIterable = null), this._result = [], this._setState(0, false);
    }
  }, mg = class {
    constructor() {
      this._onDidWillResize = new E(), this.onDidWillResize = this._onDidWillResize.event, this._onDidResize = new E(), this.onDidResize = this._onDidResize.event, this._sashListener = new C(), this._size = new x(0, 0), this._minSize = new x(0, 0), this._maxSize = new x(2 ** 53 - 1, 2 ** 53 - 1), this.domNode = document.createElement(`div`), this._eastSash = new gr(this.domNode, {
        getVerticalSashLeft: () => this._size.width
      }, {
        orientation: 0
      }), this._westSash = new gr(this.domNode, {
        getVerticalSashLeft: () => 0
      }, {
        orientation: 0
      }), this._northSash = new gr(this.domNode, {
        getHorizontalSashTop: () => 0
      }, {
        orientation: 1,
        orthogonalEdge: Kn.North
      }), this._southSash = new gr(this.domNode, {
        getHorizontalSashTop: () => this._size.height
      }, {
        orientation: 1,
        orthogonalEdge: Kn.South
      }), this._northSash.orthogonalStartSash = this._westSash, this._northSash.orthogonalEndSash = this._eastSash, this._southSash.orthogonalStartSash = this._westSash, this._southSash.orthogonalEndSash = this._eastSash;
      let e2, t2 = 0, n2 = 0;
      this._sashListener.add(ze.any(this._northSash.onDidStart, this._eastSash.onDidStart, this._southSash.onDidStart, this._westSash.onDidStart)(() => {
        e2 === void 0 && (this._onDidWillResize.fire(), e2 = this._size, t2 = 0, n2 = 0);
      })), this._sashListener.add(ze.any(this._northSash.onDidEnd, this._eastSash.onDidEnd, this._southSash.onDidEnd, this._westSash.onDidEnd)(() => {
        e2 !== void 0 && (e2 = void 0, t2 = 0, n2 = 0, this._onDidResize.fire({
          dimension: this._size,
          done: true
        }));
      })), this._sashListener.add(this._eastSash.onDidChange((r2) => {
        e2 && (n2 = r2.currentX - r2.startX, this.layout(e2.height + t2, e2.width + n2), this._onDidResize.fire({
          dimension: this._size,
          done: false,
          east: true
        }));
      })), this._sashListener.add(this._westSash.onDidChange((r2) => {
        e2 && (n2 = -(r2.currentX - r2.startX), this.layout(e2.height + t2, e2.width + n2), this._onDidResize.fire({
          dimension: this._size,
          done: false,
          west: true
        }));
      })), this._sashListener.add(this._northSash.onDidChange((r2) => {
        e2 && (t2 = -(r2.currentY - r2.startY), this.layout(e2.height + t2, e2.width + n2), this._onDidResize.fire({
          dimension: this._size,
          done: false,
          north: true
        }));
      })), this._sashListener.add(this._southSash.onDidChange((r2) => {
        e2 && (t2 = r2.currentY - r2.startY, this.layout(e2.height + t2, e2.width + n2), this._onDidResize.fire({
          dimension: this._size,
          done: false,
          south: true
        }));
      })), this._sashListener.add(ze.any(this._eastSash.onDidReset, this._westSash.onDidReset)((e3) => {
        this._preferredSize && (this.layout(this._size.height, this._preferredSize.width), this._onDidResize.fire({
          dimension: this._size,
          done: true
        }));
      })), this._sashListener.add(ze.any(this._northSash.onDidReset, this._southSash.onDidReset)((e3) => {
        this._preferredSize && (this.layout(this._preferredSize.height, this._size.width), this._onDidResize.fire({
          dimension: this._size,
          done: true
        }));
      }));
    }
    dispose() {
      this._northSash.dispose(), this._southSash.dispose(), this._eastSash.dispose(), this._westSash.dispose(), this._sashListener.dispose(), this._onDidResize.dispose(), this._onDidWillResize.dispose(), this.domNode.remove();
    }
    enableSashes(e2, t2, n2, r2) {
      this._northSash.state = e2 ? 3 : 0, this._eastSash.state = t2 ? 3 : 0, this._southSash.state = n2 ? 3 : 0, this._westSash.state = r2 ? 3 : 0;
    }
    layout(e2 = this.size.height, t2 = this.size.width) {
      let { height: n2, width: r2 } = this._minSize, { height: i2, width: a2 } = this._maxSize;
      e2 = Math.max(n2, Math.min(i2, e2)), t2 = Math.max(r2, Math.min(a2, t2));
      let o2 = new x(t2, e2);
      x.equals(o2, this._size) || (this.domNode.style.height = e2 + `px`, this.domNode.style.width = t2 + `px`, this._size = o2, this._northSash.layout(), this._eastSash.layout(), this._southSash.layout(), this._westSash.layout());
    }
    clearSashHoverState() {
      this._eastSash.clearSashHoverState(), this._westSash.clearSashHoverState(), this._northSash.clearSashHoverState(), this._southSash.clearSashHoverState();
    }
    get size() {
      return this._size;
    }
    set maxSize(e2) {
      this._maxSize = e2;
    }
    get maxSize() {
      return this._maxSize;
    }
    set minSize(e2) {
      this._minSize = e2;
    }
    get minSize() {
      return this._minSize;
    }
    set preferredSize(e2) {
      this._preferredSize = e2;
    }
    get preferredSize() {
      return this._preferredSize;
    }
  };
  const hg = 30, gg = 24;
  var _g = class extends S {
    constructor(e2, t2 = new x(10, 10)) {
      super(), this._editor = e2, this.allowEditorOverflow = true, this.suppressMouseDown = false, this._resizableNode = this._register(new mg()), this._contentPosition = null, this._isResizing = false, this._resizableNode.domNode.style.position = `absolute`, this._resizableNode.minSize = x.lift(t2), this._resizableNode.layout(t2.height, t2.width), this._resizableNode.enableSashes(true, true, true, true), this._register(this._resizableNode.onDidResize((e3) => {
        this._resize(new x(e3.dimension.width, e3.dimension.height)), e3.done && (this._isResizing = false);
      })), this._register(this._resizableNode.onDidWillResize(() => {
        this._isResizing = true;
      }));
    }
    get isResizing() {
      return this._isResizing;
    }
    getDomNode() {
      return this._resizableNode.domNode;
    }
    getPosition() {
      return this._contentPosition;
    }
    get position() {
      var _a3;
      return ((_a3 = this._contentPosition) == null ? void 0 : _a3.position) ? N.lift(this._contentPosition.position) : void 0;
    }
    _availableVerticalSpaceAbove(e2) {
      let t2 = this._editor.getDomNode(), n2 = this._editor.getScrolledVisiblePosition(e2);
      if (!t2 || !n2) return;
      let r2 = Vo(t2);
      return r2.top + n2.top - hg;
    }
    _availableVerticalSpaceBelow(e2) {
      let t2 = this._editor.getDomNode(), n2 = this._editor.getScrolledVisiblePosition(e2);
      if (!t2 || !n2) return;
      let r2 = Vo(t2), i2 = Io(t2.ownerDocument.body), a2 = r2.top + n2.top + n2.height;
      return i2.height - a2 - gg;
    }
    _findPositionPreference(e2, t2) {
      let n2 = Math.min(this._availableVerticalSpaceBelow(t2) ?? 1 / 0, e2), r2 = Math.min(this._availableVerticalSpaceAbove(t2) ?? 1 / 0, e2), i2 = Math.min(Math.max(r2, n2), e2), a2 = Math.min(e2, i2), o2;
      return o2 = this._editor.getOption(60).above ? a2 <= r2 ? 1 : 2 : a2 <= n2 ? 2 : 1, o2 === 1 ? this._resizableNode.enableSashes(true, true, false, false) : this._resizableNode.enableSashes(false, true, true, false), o2;
    }
    _resize(e2) {
      this._resizableNode.layout(e2.height, e2.width);
    }
  }, vg = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, yg = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, bg;
  const xg = 30, Sg = 6;
  let Cg = (_t2 = class extends _g {
    get isVisibleFromKeyboard() {
      var _a3;
      return ((_a3 = this._renderedHover) == null ? void 0 : _a3.source) === 1;
    }
    get isVisible() {
      return this._hoverVisibleKey.get() ?? false;
    }
    get isFocused() {
      return this._hoverFocusedKey.get() ?? false;
    }
    constructor(e2, t2, n2, r2, i2) {
      let a2 = e2.getOption(67) + 8, o2 = 150, s2 = new x(o2, a2);
      super(e2, s2), this._configurationService = n2, this._accessibilityService = r2, this._keybindingService = i2, this._hover = this._register(new ct()), this._onDidResize = this._register(new E()), this.onDidResize = this._onDidResize.event, this._minimumSize = s2, this._hoverVisibleKey = T.hoverVisible.bindTo(t2), this._hoverFocusedKey = T.hoverFocused.bindTo(t2), B(this._resizableNode.domNode, this._hover.containerDomNode), this._resizableNode.domNode.style.zIndex = `50`, this._register(this._editor.onDidLayoutChange(() => {
        this.isVisible && this._updateMaxDimensions();
      })), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(50) && this._updateFont();
      }));
      let c2 = this._register(Gl(this._resizableNode.domNode));
      this._register(c2.onDidFocus(() => {
        this._hoverFocusedKey.set(true);
      })), this._register(c2.onDidBlur(() => {
        this._hoverFocusedKey.set(false);
      })), this._setRenderedHover(void 0), this._editor.addContentWidget(this);
    }
    dispose() {
      var _a3;
      super.dispose(), (_a3 = this._renderedHover) == null ? void 0 : _a3.dispose(), this._editor.removeContentWidget(this);
    }
    getId() {
      return bg.ID;
    }
    static _applyDimensions(e2, t2, n2) {
      let r2 = typeof t2 == `number` ? `${t2}px` : t2, i2 = typeof n2 == `number` ? `${n2}px` : n2;
      e2.style.width = r2, e2.style.height = i2;
    }
    _setContentsDomNodeDimensions(e2, t2) {
      let n2 = this._hover.contentsDomNode;
      return bg._applyDimensions(n2, e2, t2);
    }
    _setContainerDomNodeDimensions(e2, t2) {
      let n2 = this._hover.containerDomNode;
      return bg._applyDimensions(n2, e2, t2);
    }
    _setHoverWidgetDimensions(e2, t2) {
      this._setContentsDomNodeDimensions(e2, t2), this._setContainerDomNodeDimensions(e2, t2), this._layoutContentWidget();
    }
    static _applyMaxDimensions(e2, t2, n2) {
      let r2 = typeof t2 == `number` ? `${t2}px` : t2, i2 = typeof n2 == `number` ? `${n2}px` : n2;
      e2.style.maxWidth = r2, e2.style.maxHeight = i2;
    }
    _setHoverWidgetMaxDimensions(e2, t2) {
      bg._applyMaxDimensions(this._hover.contentsDomNode, e2, t2), bg._applyMaxDimensions(this._hover.containerDomNode, e2, t2), this._hover.containerDomNode.style.setProperty(`--vscode-hover-maxWidth`, typeof e2 == `number` ? `${e2}px` : e2), this._layoutContentWidget();
    }
    _setAdjustedHoverWidgetDimensions(e2) {
      this._setHoverWidgetMaxDimensions(`none`, `none`);
      let t2 = e2.width, n2 = e2.height;
      this._setHoverWidgetDimensions(t2, n2);
    }
    _updateResizableNodeMaxDimensions() {
      let e2 = this._findMaximumRenderingWidth() ?? 1 / 0, t2 = this._findMaximumRenderingHeight() ?? 1 / 0;
      this._resizableNode.maxSize = new x(e2, t2), this._setHoverWidgetMaxDimensions(e2, t2);
    }
    _resize(e2) {
      bg._lastDimensions = new x(e2.width, e2.height), this._setAdjustedHoverWidgetDimensions(e2), this._resizableNode.layout(e2.height, e2.width), this._updateResizableNodeMaxDimensions(), this._hover.scrollbar.scanDomNode(), this._editor.layoutContentWidget(this), this._onDidResize.fire();
    }
    _findAvailableSpaceVertically() {
      var _a3;
      let e2 = (_a3 = this._renderedHover) == null ? void 0 : _a3.showAtPosition;
      if (e2) return this._positionPreference === 1 ? this._availableVerticalSpaceAbove(e2) : this._availableVerticalSpaceBelow(e2);
    }
    _findMaximumRenderingHeight() {
      let e2 = this._findAvailableSpaceVertically();
      if (!e2) return;
      let t2 = Sg;
      return Array.from(this._hover.contentsDomNode.children).forEach((e3) => {
        t2 += e3.clientHeight;
      }), Math.min(e2, t2);
    }
    _isHoverTextOverflowing() {
      this._hover.containerDomNode.style.setProperty(`--vscode-hover-whiteSpace`, `nowrap`), this._hover.containerDomNode.style.setProperty(`--vscode-hover-sourceWhiteSpace`, `nowrap`);
      let e2 = Array.from(this._hover.contentsDomNode.children).some((e3) => e3.scrollWidth > e3.clientWidth);
      return this._hover.containerDomNode.style.removeProperty(`--vscode-hover-whiteSpace`), this._hover.containerDomNode.style.removeProperty(`--vscode-hover-sourceWhiteSpace`), e2;
    }
    _findMaximumRenderingWidth() {
      if (!this._editor || !this._editor.hasModel()) return;
      let e2 = this._isHoverTextOverflowing(), t2 = this._contentWidth === void 0 ? 0 : this._contentWidth - 2;
      if (e2 || this._hover.containerDomNode.clientWidth < t2) {
        let e3 = Io(this._hover.containerDomNode.ownerDocument.body).width, t3 = 14;
        return e3 - t3;
      } else return this._hover.containerDomNode.clientWidth + 2;
    }
    isMouseGettingCloser(e2, t2) {
      if (!this._renderedHover) return false;
      if (this._renderedHover.initialMousePosX === void 0 || this._renderedHover.initialMousePosY === void 0) return this._renderedHover.initialMousePosX = e2, this._renderedHover.initialMousePosY = t2, false;
      let n2 = Vo(this.getDomNode());
      this._renderedHover.closestMouseDistance === void 0 && (this._renderedHover.closestMouseDistance = wg(this._renderedHover.initialMousePosX, this._renderedHover.initialMousePosY, n2.left, n2.top, n2.width, n2.height));
      let r2 = wg(e2, t2, n2.left, n2.top, n2.width, n2.height);
      return r2 > this._renderedHover.closestMouseDistance + 4 ? false : (this._renderedHover.closestMouseDistance = Math.min(this._renderedHover.closestMouseDistance, r2), true);
    }
    _setRenderedHover(e2) {
      var _a3;
      (_a3 = this._renderedHover) == null ? void 0 : _a3.dispose(), this._renderedHover = e2, this._hoverVisibleKey.set(!!e2), this._hover.containerDomNode.classList.toggle(`hidden`, !e2);
    }
    _updateFont() {
      let { fontSize: e2, lineHeight: t2 } = this._editor.getOption(50), n2 = this._hover.contentsDomNode;
      n2.style.fontSize = `${e2}px`, n2.style.lineHeight = `${t2 / e2}`;
      let r2 = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName(`code`));
      r2.forEach((e3) => this._editor.applyFontInfo(e3));
    }
    _updateContent(e2) {
      let t2 = this._hover.contentsDomNode;
      t2.style.paddingBottom = ``, t2.textContent = ``, t2.appendChild(e2);
    }
    _layoutContentWidget() {
      this._editor.layoutContentWidget(this), this._hover.onContentsChanged();
    }
    _updateMaxDimensions() {
      let e2 = Math.max(this._editor.getLayoutInfo().height / 4, 250, bg._lastDimensions.height), t2 = Math.max(this._editor.getLayoutInfo().width * 0.66, 500, bg._lastDimensions.width);
      this._setHoverWidgetMaxDimensions(t2, e2);
    }
    _render(e2) {
      this._setRenderedHover(e2), this._updateFont(), this._updateContent(e2.domNode), this._updateMaxDimensions(), this.onContentsChanged(), this._editor.render();
    }
    getPosition() {
      return this._renderedHover ? {
        position: this._renderedHover.showAtPosition,
        secondaryPosition: this._renderedHover.showAtSecondaryPosition,
        positionAffinity: this._renderedHover.shouldAppearBeforeContent ? 3 : void 0,
        preference: [
          this._positionPreference ?? 1
        ]
      } : null;
    }
    show(e2) {
      var _a3;
      if (!this._editor || !this._editor.hasModel()) return;
      this._render(e2);
      let t2 = $o(this._hover.containerDomNode), n2 = e2.showAtPosition;
      this._positionPreference = this._findPositionPreference(t2, n2) ?? 1, this.onContentsChanged(), e2.shouldFocus && this._hover.containerDomNode.focus(), this._onDidResize.fire();
      let r2 = this._hover.containerDomNode.ownerDocument.activeElement === this._hover.containerDomNode, i2 = r2 && Wo(this._configurationService.getValue(`accessibility.verbosity.hover`) === true && this._accessibilityService.isScreenReaderOptimized(), ((_a3 = this._keybindingService.lookupKeybinding(`editor.action.accessibleView`)) == null ? void 0 : _a3.getAriaLabel()) ?? ``);
      i2 && (this._hover.contentsDomNode.ariaLabel = this._hover.contentsDomNode.textContent + `, ` + i2);
    }
    hide() {
      if (!this._renderedHover) return;
      let e2 = this._renderedHover.shouldFocus || this._hoverFocusedKey.get();
      this._setRenderedHover(void 0), this._resizableNode.maxSize = new x(1 / 0, 1 / 0), this._resizableNode.clearSashHoverState(), this._hoverFocusedKey.set(false), this._editor.layoutContentWidget(this), e2 && this._editor.focus();
    }
    _removeConstraintsRenderNormally() {
      let e2 = this._editor.getLayoutInfo();
      this._resizableNode.layout(e2.height, e2.width), this._setHoverWidgetDimensions(`auto`, `auto`);
    }
    setMinimumDimensions(e2) {
      this._minimumSize = new x(Math.max(this._minimumSize.width, e2.width), Math.max(this._minimumSize.height, e2.height)), this._updateMinimumWidth();
    }
    _updateMinimumWidth() {
      let e2 = this._contentWidth === void 0 ? this._minimumSize.width : Math.min(this._contentWidth, this._minimumSize.width);
      this._resizableNode.minSize = new x(e2, this._minimumSize.height);
    }
    onContentsChanged() {
      var _a3;
      this._removeConstraintsRenderNormally();
      let e2 = this._hover.containerDomNode, t2 = $o(e2), n2 = es(e2);
      if (this._resizableNode.layout(t2, n2), this._setHoverWidgetDimensions(n2, t2), t2 = $o(e2), n2 = es(e2), this._contentWidth = n2, this._updateMinimumWidth(), this._resizableNode.layout(t2, n2), (_a3 = this._renderedHover) == null ? void 0 : _a3.showAtPosition) {
        let e3 = $o(this._hover.containerDomNode);
        this._positionPreference = this._findPositionPreference(e3, this._renderedHover.showAtPosition);
      }
      this._layoutContentWidget();
    }
    focus() {
      this._hover.containerDomNode.focus();
    }
    scrollUp() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollTop, t2 = this._editor.getOption(50);
      this._hover.scrollbar.setScrollPosition({
        scrollTop: e2 - t2.lineHeight
      });
    }
    scrollDown() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollTop, t2 = this._editor.getOption(50);
      this._hover.scrollbar.setScrollPosition({
        scrollTop: e2 + t2.lineHeight
      });
    }
    scrollLeft() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollLeft;
      this._hover.scrollbar.setScrollPosition({
        scrollLeft: e2 - xg
      });
    }
    scrollRight() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollLeft;
      this._hover.scrollbar.setScrollPosition({
        scrollLeft: e2 + xg
      });
    }
    pageUp() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollTop, t2 = this._hover.scrollbar.getScrollDimensions().height;
      this._hover.scrollbar.setScrollPosition({
        scrollTop: e2 - t2
      });
    }
    pageDown() {
      let e2 = this._hover.scrollbar.getScrollPosition().scrollTop, t2 = this._hover.scrollbar.getScrollDimensions().height;
      this._hover.scrollbar.setScrollPosition({
        scrollTop: e2 + t2
      });
    }
    goToTop() {
      this._hover.scrollbar.setScrollPosition({
        scrollTop: 0
      });
    }
    goToBottom() {
      this._hover.scrollbar.setScrollPosition({
        scrollTop: this._hover.scrollbar.getScrollDimensions().scrollHeight
      });
    }
  }, bg = _t2, _t2.ID = `editor.contrib.resizableContentHoverWidget`, _t2._lastDimensions = new x(0, 0), _t2);
  Cg = bg = vg([
    yg(1, O),
    yg(2, D),
    yg(3, lt),
    yg(4, Ct)
  ], Cg);
  function wg(e2, t2, n2, r2, i2, a2) {
    let o2 = n2 + i2 / 2, s2 = r2 + a2 / 2, c2 = Math.max(Math.abs(e2 - o2) - i2 / 2, 0), l2 = Math.max(Math.abs(t2 - s2) - a2 / 2, 0);
    return Math.sqrt(c2 * c2 + l2 * l2);
  }
  var Tg = class e2 {
    get anchor() {
      return this._anchor;
    }
    set anchor(e3) {
      this._anchor = e3;
    }
    get shouldFocus() {
      return this._shouldFocus;
    }
    set shouldFocus(e3) {
      this._shouldFocus = e3;
    }
    get source() {
      return this._source;
    }
    set source(e3) {
      this._source = e3;
    }
    get insistOnKeepingHoverVisible() {
      return this._insistOnKeepingHoverVisible;
    }
    set insistOnKeepingHoverVisible(e3) {
      this._insistOnKeepingHoverVisible = e3;
    }
    constructor(e3, t2) {
      this._editor = e3, this._participants = t2, this._anchor = null, this._shouldFocus = false, this._source = 0, this._insistOnKeepingHoverVisible = false;
    }
    static _getLineDecorations(e3, t2) {
      if (t2.type !== 1 && !t2.supportsMarkerHover) return [];
      let n2 = e3.getModel(), r2 = t2.range.startLineNumber;
      if (r2 > n2.getLineCount()) return [];
      let i2 = n2.getLineMaxColumn(r2);
      return e3.getLineDecorations(r2).filter((e4) => {
        if (e4.options.isWholeLine) return true;
        let n3 = e4.range.startLineNumber === r2 ? e4.range.startColumn : 1, a2 = e4.range.endLineNumber === r2 ? e4.range.endColumn : i2;
        if (e4.options.showIfCollapsed) {
          if (n3 > t2.range.startColumn + 1 || t2.range.endColumn - 1 > a2) return false;
        } else if (n3 > t2.range.startColumn || t2.range.endColumn > a2) return false;
        return true;
      });
    }
    computeAsync(t2) {
      let n2 = this._anchor;
      if (!this._editor.hasModel() || !n2) return l.EMPTY;
      let r2 = e2._getLineDecorations(this._editor, n2);
      return l.merge(this._participants.map((e3) => e3.computeAsync ? e3.computeAsync(n2, r2, t2) : l.EMPTY));
    }
    computeSync() {
      if (!this._editor.hasModel() || !this._anchor) return [];
      let t2 = e2._getLineDecorations(this._editor, this._anchor), n2 = [];
      for (let e3 of this._participants) n2 = n2.concat(e3.computeSync(this._anchor, t2));
      return Wi(n2);
    }
  }, Eg = class {
    constructor(e2, t2, n2) {
      this.anchor = e2, this.hoverParts = t2, this.isComplete = n2;
    }
    filter(e2) {
      let t2 = this.hoverParts.filter((t3) => t3.isValidForHoverAnchor(e2));
      return t2.length === this.hoverParts.length ? this : new Dg(this, this.anchor, t2, this.isComplete);
    }
  }, Dg = class extends Eg {
    constructor(e2, t2, n2, r2) {
      super(t2, n2, r2), this.original = e2;
    }
    filter(e2) {
      return this.original.filter(e2);
    }
  }, Og = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, kg = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const Ag = r;
  let jg = class extends S {
    get hasContent() {
      return this._hasContent;
    }
    constructor(e2) {
      super(), this._keybindingService = e2, this.actions = [], this._hasContent = false, this.hoverElement = Ag(`div.hover-row.status-bar`), this.hoverElement.tabIndex = 0, this.actionsElement = B(this.hoverElement, Ag(`div.actions`));
    }
    addAction(e2) {
      let t2 = this._keybindingService.lookupKeybinding(e2.commandId), n2 = t2 ? t2.getLabel() : null;
      this._hasContent = true;
      let r2 = this._register(ot.render(this.actionsElement, e2, n2));
      return this.actions.push(r2), r2;
    }
    append(e2) {
      let t2 = B(this.actionsElement, e2);
      return this._hasContent = true, t2;
    }
  };
  jg = Og([
    kg(0, Ct)
  ], jg);
  var Mg = class {
    constructor(e2, t2, n2) {
      this.provider = e2, this.hover = t2, this.ordinal = n2;
    }
  };
  async function Ng(e2, t2, n2, r2, i2) {
    let a2 = await Promise.resolve(e2.provideHover(n2, r2, i2)).catch(Uc);
    if (!(!a2 || !Ig(a2))) return new Mg(e2, a2, t2);
  }
  function Pg(e2, t2, n2, r2, i2 = false) {
    let a2 = e2.ordered(t2, i2), o2 = a2.map((e3, i3) => Ng(e3, i3, t2, n2, r2));
    return l.fromPromises(o2).coalesce();
  }
  function Fg(e2, t2, n2, r2, i2 = false) {
    return Pg(e2, t2, n2, r2, i2).map((e3) => e3.hover).toPromise();
  }
  ul(`_executeHoverProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A);
    return Fg(r2.hoverProvider, t2, n2, m.None);
  }), ul(`_executeHoverProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A);
    return Fg(r2.hoverProvider, t2, n2, m.None, true);
  });
  function Ig(e2) {
    let t2 = e2.range !== void 0, n2 = e2.contents !== void 0 && e2.contents && e2.contents.length > 0;
    return t2 && n2;
  }
  var Lg = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Rg = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const zg = r, Bg = cl(`hover-increase-verbosity`, _.add, U(`increaseHoverVerbosity`, `Icon for increaseing hover verbosity.`)), Vg = cl(`hover-decrease-verbosity`, _.remove, U(`decreaseHoverVerbosity`, `Icon for decreasing hover verbosity.`));
  var Hg = class {
    constructor(e2, t2, n2, r2, i2, a2 = void 0) {
      this.owner = e2, this.range = t2, this.contents = n2, this.isBeforeContent = r2, this.ordinal = i2, this.source = a2;
    }
    isValidForHoverAnchor(e2) {
      return e2.type === 1 && this.range.startColumn <= e2.range.startColumn && this.range.endColumn >= e2.range.endColumn;
    }
  }, Ug = class {
    constructor(e2, t2, n2) {
      this.hover = e2, this.hoverProvider = t2, this.hoverPosition = n2;
    }
    supportsVerbosityAction(e2) {
      switch (e2) {
        case st.Increase:
          return this.hover.canIncreaseVerbosity ?? false;
        case st.Decrease:
          return this.hover.canDecreaseVerbosity ?? false;
      }
    }
  };
  let Wg = class {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2) {
      this._editor = e2, this._languageService = t2, this._openerService = n2, this._configurationService = r2, this._languageFeaturesService = i2, this._keybindingService = a2, this._hoverService = o2, this._commandService = s2, this.hoverOrdinal = 3;
    }
    createLoadingMessage(e2) {
      return new Hg(this, e2.range, [
        new Dn().appendText(U(`modesContentHover.loading`, `Loading...`))
      ], false, 2e3);
    }
    computeSync(e2, t2) {
      if (!this._editor.hasModel() || e2.type !== 1) return [];
      let n2 = this._editor.getModel(), r2 = e2.range.startLineNumber, i2 = n2.getLineMaxColumn(r2), a2 = [], o2 = 1e3, s2 = n2.getLineLength(r2), c2 = n2.getLanguageIdAtPosition(e2.range.startLineNumber, e2.range.startColumn), l2 = this._editor.getOption(118), u2 = this._configurationService.getValue(`editor.maxTokenizationLineLength`, {
        overrideIdentifier: c2
      }), d2 = false;
      l2 >= 0 && s2 > l2 && e2.range.startColumn >= l2 && (d2 = true, a2.push(new Hg(this, e2.range, [
        {
          value: U(`stopped rendering`, "Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.")
        }
      ], false, o2++))), !d2 && typeof u2 == `number` && s2 >= u2 && a2.push(new Hg(this, e2.range, [
        {
          value: U(`too many characters`, "Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.")
        }
      ], false, o2++));
      let f2 = false;
      for (let n3 of t2) {
        let t3 = n3.range.startLineNumber === r2 ? n3.range.startColumn : 1, s3 = n3.range.endLineNumber === r2 ? n3.range.endColumn : i2, c3 = n3.options.hoverMessage;
        if (!c3 || Os(c3)) continue;
        n3.options.beforeContentClassName && (f2 = true);
        let l3 = new P(e2.range.startLineNumber, t3, e2.range.startLineNumber, s3);
        a2.push(new Hg(this, l3, Oi(c3), f2, o2++));
      }
      return a2;
    }
    computeAsync(e2, t2, n2) {
      if (!this._editor.hasModel() || e2.type !== 1) return l.EMPTY;
      let r2 = this._editor.getModel(), i2 = this._languageFeaturesService.hoverProvider;
      if (!i2.has(r2)) return l.EMPTY;
      let a2 = this._getMarkdownHovers(i2, r2, e2, n2);
      return a2;
    }
    _getMarkdownHovers(e2, t2, n2, r2) {
      let i2 = n2.range.getStartPosition(), a2 = Pg(e2, t2, i2, r2), o2 = a2.filter((e3) => !Os(e3.hover.contents)).map((e3) => {
        let t3 = e3.hover.range ? P.lift(e3.hover.range) : n2.range, r3 = new Ug(e3.hover, e3.provider, i2);
        return new Hg(this, t3, e3.hover.contents, false, e3.ordinal, r3);
      });
      return o2;
    }
    renderHoverParts(e2, t2) {
      return this._renderedHoverParts = new Kg(t2, e2.fragment, this, this._editor, this._languageService, this._openerService, this._commandService, this._keybindingService, this._hoverService, this._configurationService, e2.onContentsChanged), this._renderedHoverParts;
    }
    updateMarkdownHoverVerbosityLevel(e2, t2, n2) {
      var _a3;
      return Promise.resolve((_a3 = this._renderedHoverParts) == null ? void 0 : _a3.updateMarkdownHoverPartVerbosityLevel(e2, t2, n2));
    }
  };
  Wg = Lg([
    Rg(1, Dt),
    Rg(2, It),
    Rg(3, D),
    Rg(4, A),
    Rg(5, Ct),
    Rg(6, St),
    Rg(7, mt)
  ], Wg);
  var Gg = class {
    constructor(e2, t2, n2) {
      this.hoverPart = e2, this.hoverElement = t2, this.disposables = n2;
    }
    dispose() {
      this.disposables.dispose();
    }
  }, Kg = class {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2, u2) {
      this._hoverParticipant = n2, this._editor = r2, this._languageService = i2, this._openerService = a2, this._commandService = o2, this._keybindingService = s2, this._hoverService = c2, this._configurationService = l2, this._onFinishedRendering = u2, this._ongoingHoverOperations = /* @__PURE__ */ new Map(), this._disposables = new C(), this.renderedHoverParts = this._renderHoverParts(e2, t2, this._onFinishedRendering), this._disposables.add(Hl(() => {
        this.renderedHoverParts.forEach((e3) => {
          e3.dispose();
        }), this._ongoingHoverOperations.forEach((e3) => {
          e3.tokenSource.dispose(true);
        });
      }));
    }
    _renderHoverParts(e2, t2, n2) {
      return e2.sort(Yi((e3) => e3.ordinal, Ic)), e2.map((e3) => {
        let r2 = this._renderHoverPart(e3, n2);
        return t2.appendChild(r2.hoverElement), r2;
      });
    }
    _renderHoverPart(e2, t2) {
      let n2 = this._renderMarkdownHover(e2, t2), r2 = n2.hoverElement, i2 = e2.source, a2 = new C();
      if (a2.add(n2), !i2) return new Gg(e2, r2, a2);
      let o2 = i2.supportsVerbosityAction(st.Increase), s2 = i2.supportsVerbosityAction(st.Decrease);
      if (!o2 && !s2) return new Gg(e2, r2, a2);
      let c2 = zg(`div.verbosity-actions`);
      return r2.prepend(c2), a2.add(this._renderHoverExpansionAction(c2, st.Increase, o2)), a2.add(this._renderHoverExpansionAction(c2, st.Decrease, s2)), new Gg(e2, r2, a2);
    }
    _renderMarkdownHover(e2, t2) {
      let n2 = Jg(this._editor, e2, this._languageService, this._openerService, t2);
      return n2;
    }
    _renderHoverExpansionAction(e2, t2, n2) {
      let r2 = new C(), i2 = t2 === st.Increase, a2 = B(e2, zg(L.asCSSSelector(i2 ? Bg : Vg)));
      a2.tabIndex = 0;
      let o2 = new hi(`mouse`, false, {
        target: e2,
        position: {
          hoverPosition: 0
        }
      }, this._configurationService, this._hoverService);
      if (r2.add(this._hoverService.setupManagedHover(o2, a2, Yg(this._keybindingService, t2))), !n2) return a2.classList.add(`disabled`), r2;
      a2.classList.add(`enabled`);
      let s2 = () => this._commandService.executeCommand(t2 === st.Increase ? Jh : Xh);
      return r2.add(new ne(a2, s2)), r2.add(new pn(a2, s2, [
        3,
        10
      ])), r2;
    }
    async updateMarkdownHoverPartVerbosityLevel(e2, t2, n2 = true) {
      let r2 = this._editor.getModel();
      if (!r2) return;
      let i2 = this._getRenderedHoverPartAtIndex(t2), a2 = i2 == null ? void 0 : i2.hoverPart.source;
      if (!i2 || !(a2 == null ? void 0 : a2.supportsVerbosityAction(e2))) return;
      let o2 = await this._fetchHover(a2, r2, e2);
      if (!o2) return;
      let s2 = new Ug(o2, a2.hoverProvider, a2.hoverPosition), c2 = i2.hoverPart, l2 = new Hg(this._hoverParticipant, c2.range, o2.contents, c2.isBeforeContent, c2.ordinal, s2), u2 = this._renderHoverPart(l2, this._onFinishedRendering);
      return this._replaceRenderedHoverPartAtIndex(t2, u2, l2), n2 && this._focusOnHoverPartWithIndex(t2), {
        hoverPart: l2,
        hoverElement: u2.hoverElement
      };
    }
    async _fetchHover(e2, t2, n2) {
      let r2 = n2 === st.Increase ? 1 : -1, i2 = e2.hoverProvider, a2 = this._ongoingHoverOperations.get(i2);
      a2 && (a2.tokenSource.cancel(), r2 += a2.verbosityDelta);
      let o2 = new g();
      this._ongoingHoverOperations.set(i2, {
        verbosityDelta: r2,
        tokenSource: o2
      });
      let s2 = {
        verbosityRequest: {
          verbosityDelta: r2,
          previousHover: e2.hover
        }
      }, c2;
      try {
        c2 = await Promise.resolve(i2.provideHover(t2, e2.hoverPosition, o2.token, s2));
      } catch (e3) {
        Uc(e3);
      }
      return o2.dispose(), this._ongoingHoverOperations.delete(i2), c2;
    }
    _replaceRenderedHoverPartAtIndex(e2, t2, n2) {
      if (e2 >= this.renderedHoverParts.length || e2 < 0) return;
      let r2 = this.renderedHoverParts[e2], i2 = r2.hoverElement, a2 = t2.hoverElement, o2 = Array.from(a2.children);
      i2.replaceChildren(...o2);
      let s2 = new Gg(n2, i2, t2.disposables);
      i2.focus(), r2.dispose(), this.renderedHoverParts[e2] = s2;
    }
    _focusOnHoverPartWithIndex(e2) {
      this.renderedHoverParts[e2].hoverElement.focus();
    }
    _getRenderedHoverPartAtIndex(e2) {
      return this.renderedHoverParts[e2];
    }
    dispose() {
      this._disposables.dispose();
    }
  };
  function qg(e2, t2, n2, r2, i2) {
    t2.sort(Yi((e3) => e3.ordinal, Ic));
    let a2 = [];
    for (let o2 of t2) a2.push(Jg(n2, o2, r2, i2, e2.onContentsChanged));
    return new Eh(a2);
  }
  function Jg(e2, t2, n2, r2, i2) {
    let a2 = new C(), o2 = zg(`div.hover-row`), s2 = zg(`div.hover-row-contents`);
    o2.appendChild(s2);
    let c2 = t2.contents;
    for (let t3 of c2) {
      if (Os(t3)) continue;
      let o3 = zg(`div.markdown-hover`), c3 = B(o3, zg(`div.hover-contents`)), l3 = a2.add(new En({
        editor: e2
      }, n2, r2));
      a2.add(l3.onDidRenderAsync(() => {
        c3.className = `hover-contents code-hover-contents`, i2();
      }));
      let u2 = a2.add(l3.render(t3));
      c3.appendChild(u2.element), s2.appendChild(o3);
    }
    let l2 = {
      hoverPart: t2,
      hoverElement: o2,
      dispose() {
        a2.dispose();
      }
    };
    return l2;
  }
  function Yg(e2, t2) {
    switch (t2) {
      case st.Increase: {
        let t3 = e2.lookupKeybinding(Jh);
        return t3 ? U(`increaseVerbosityWithKb`, `Increase Hover Verbosity ({0})`, t3.getLabel()) : U(`increaseVerbosity`, `Increase Hover Verbosity`);
      }
      case st.Decrease: {
        let t3 = e2.lookupKeybinding(Xh);
        return t3 ? U(`decreaseVerbosityWithKb`, `Decrease Hover Verbosity ({0})`, t3.getLabel()) : U(`decreaseVerbosity`, `Decrease Hover Verbosity`);
      }
    }
  }
  function Xg(e2, t2) {
    return !!e2[t2];
  }
  var Zg = class {
    constructor(e2, t2) {
      this.target = e2.target, this.isLeftClick = e2.event.leftButton, this.isMiddleClick = e2.event.middleButton, this.isRightClick = e2.event.rightButton, this.hasTriggerModifier = Xg(e2.event, t2.triggerModifier), this.hasSideBySideModifier = Xg(e2.event, t2.triggerSideBySideModifier), this.isNoneOrSingleMouseDown = e2.event.detail <= 1;
    }
  }, Qg = class {
    constructor(e2, t2) {
      this.keyCodeIsTriggerKey = e2.keyCode === t2.triggerKey, this.keyCodeIsSideBySideKey = e2.keyCode === t2.triggerSideBySideKey, this.hasTriggerModifier = Xg(e2, t2.triggerModifier);
    }
  }, $g = class {
    constructor(e2, t2, n2, r2) {
      this.triggerKey = e2, this.triggerModifier = t2, this.triggerSideBySideKey = n2, this.triggerSideBySideModifier = r2;
    }
    equals(e2) {
      return this.triggerKey === e2.triggerKey && this.triggerModifier === e2.triggerModifier && this.triggerSideBySideKey === e2.triggerSideBySideKey && this.triggerSideBySideModifier === e2.triggerSideBySideModifier;
    }
  };
  function e_(e2) {
    return e2 === `altKey` ? qs ? new $g(57, `metaKey`, 6, `altKey`) : new $g(5, `ctrlKey`, 6, `altKey`) : qs ? new $g(6, `altKey`, 57, `metaKey`) : new $g(6, `altKey`, 5, `ctrlKey`);
  }
  var t_ = class extends S {
    constructor(e2, t2) {
      super(), this._onMouseMoveOrRelevantKeyDown = this._register(new E()), this.onMouseMoveOrRelevantKeyDown = this._onMouseMoveOrRelevantKeyDown.event, this._onExecute = this._register(new E()), this.onExecute = this._onExecute.event, this._onCancel = this._register(new E()), this.onCancel = this._onCancel.event, this._editor = e2, this._extractLineNumberFromMouseEvent = (t2 == null ? void 0 : t2.extractLineNumberFromMouseEvent) ?? ((e3) => e3.target.position ? e3.target.position.lineNumber : 0), this._opts = e_(this._editor.getOption(78)), this._lastMouseMoveEvent = null, this._hasTriggerKeyOnMouseDown = false, this._lineNumberOnMouseDown = 0, this._register(this._editor.onDidChangeConfiguration((e3) => {
        if (e3.hasChanged(78)) {
          let e4 = e_(this._editor.getOption(78));
          if (this._opts.equals(e4)) return;
          this._opts = e4, this._lastMouseMoveEvent = null, this._hasTriggerKeyOnMouseDown = false, this._lineNumberOnMouseDown = 0, this._onCancel.fire();
        }
      })), this._register(this._editor.onMouseMove((e3) => this._onEditorMouseMove(new Zg(e3, this._opts)))), this._register(this._editor.onMouseDown((e3) => this._onEditorMouseDown(new Zg(e3, this._opts)))), this._register(this._editor.onMouseUp((e3) => this._onEditorMouseUp(new Zg(e3, this._opts)))), this._register(this._editor.onKeyDown((e3) => this._onEditorKeyDown(new Qg(e3, this._opts)))), this._register(this._editor.onKeyUp((e3) => this._onEditorKeyUp(new Qg(e3, this._opts)))), this._register(this._editor.onMouseDrag(() => this._resetHandler())), this._register(this._editor.onDidChangeCursorSelection((e3) => this._onDidChangeCursorSelection(e3))), this._register(this._editor.onDidChangeModel((e3) => this._resetHandler())), this._register(this._editor.onDidChangeModelContent(() => this._resetHandler())), this._register(this._editor.onDidScrollChange((e3) => {
        (e3.scrollTopChanged || e3.scrollLeftChanged) && this._resetHandler();
      }));
    }
    _onDidChangeCursorSelection(e2) {
      e2.selection && e2.selection.startColumn !== e2.selection.endColumn && this._resetHandler();
    }
    _onEditorMouseMove(e2) {
      this._lastMouseMoveEvent = e2, this._onMouseMoveOrRelevantKeyDown.fire([
        e2,
        null
      ]);
    }
    _onEditorMouseDown(e2) {
      this._hasTriggerKeyOnMouseDown = e2.hasTriggerModifier, this._lineNumberOnMouseDown = this._extractLineNumberFromMouseEvent(e2);
    }
    _onEditorMouseUp(e2) {
      let t2 = this._extractLineNumberFromMouseEvent(e2);
      this._hasTriggerKeyOnMouseDown && this._lineNumberOnMouseDown && this._lineNumberOnMouseDown === t2 && this._onExecute.fire(e2);
    }
    _onEditorKeyDown(e2) {
      this._lastMouseMoveEvent && (e2.keyCodeIsTriggerKey || e2.keyCodeIsSideBySideKey && e2.hasTriggerModifier) ? this._onMouseMoveOrRelevantKeyDown.fire([
        this._lastMouseMoveEvent,
        e2
      ]) : e2.hasTriggerModifier && this._onCancel.fire();
    }
    _onEditorKeyUp(e2) {
      e2.keyCodeIsTriggerKey && this._onCancel.fire();
    }
    _resetHandler() {
      this._lastMouseMoveEvent = null, this._hasTriggerKeyOnMouseDown = false, this._onCancel.fire();
    }
  }, n_ = class {
    constructor(e2, t2) {
      this.range = e2, this.direction = t2;
    }
  }, r_ = class e2 {
    constructor(e3, t2, n2) {
      this.hint = e3, this.anchor = t2, this.provider = n2, this._isResolved = false;
    }
    with(t2) {
      let n2 = new e2(this.hint, t2.anchor, this.provider);
      return n2._isResolved = this._isResolved, n2._currentResolve = this._currentResolve, n2;
    }
    async resolve(e3) {
      if (typeof this.provider.resolveInlayHint == `function`) {
        if (this._currentResolve) return await this._currentResolve, e3.isCancellationRequested ? void 0 : this.resolve(e3);
        this._isResolved || (this._currentResolve = this._doResolve(e3).finally(() => this._currentResolve = void 0)), await this._currentResolve;
      }
    }
    async _doResolve(e3) {
      try {
        let t2 = await Promise.resolve(this.provider.resolveInlayHint(this.hint, e3));
        this.hint.tooltip = (t2 == null ? void 0 : t2.tooltip) ?? this.hint.tooltip, this.hint.label = (t2 == null ? void 0 : t2.label) ?? this.hint.label, this.hint.textEdits = (t2 == null ? void 0 : t2.textEdits) ?? this.hint.textEdits, this._isResolved = true;
      } catch (e4) {
        Uc(e4), this._isResolved = false;
      }
    }
  }, i_ = (_u2 = class {
    static async create(t2, n2, r2, i2) {
      let a2 = [], o2 = t2.ordered(n2).reverse().map((t3) => r2.map(async (r3) => {
        try {
          let o3 = await t3.provideInlayHints(n2, r3, i2);
          ((o3 == null ? void 0 : o3.hints.length) || t3.onDidChangeInlayHints) && a2.push([
            o3 ?? _u2._emptyInlayHintList,
            t3
          ]);
        } catch (e2) {
          Uc(e2);
        }
      }));
      if (await Promise.all(o2.flat()), i2.isCancellationRequested || n2.isDisposed()) throw new p();
      return new _u2(r2, a2, n2);
    }
    constructor(t2, n2, r2) {
      this._disposables = new C(), this.ranges = t2, this.provider = /* @__PURE__ */ new Set();
      let i2 = [];
      for (let [t3, a2] of n2) {
        this._disposables.add(t3), this.provider.add(a2);
        for (let n3 of t3.hints) {
          let t4 = r2.validatePosition(n3.position), o2 = `before`, s2 = _u2._getRangeAtPosition(r2, t4), c2;
          s2.getStartPosition().isBefore(t4) ? (c2 = P.fromPositions(s2.getStartPosition(), t4), o2 = `after`) : (c2 = P.fromPositions(t4, s2.getEndPosition()), o2 = `before`), i2.push(new r_(n3, new n_(c2, o2), a2));
        }
      }
      this.items = i2.sort((e2, t3) => N.compare(e2.hint.position, t3.hint.position));
    }
    dispose() {
      this._disposables.dispose();
    }
    static _getRangeAtPosition(e2, t2) {
      let n2 = t2.lineNumber, r2 = e2.getWordAtPosition(t2);
      if (r2) return new P(n2, r2.startColumn, n2, r2.endColumn);
      e2.tokenization.tokenizeIfCheap(n2);
      let i2 = e2.tokenization.getLineTokens(n2), a2 = t2.column - 1, o2 = i2.findTokenIndexAtOffset(a2), s2 = i2.getStartOffset(o2), c2 = i2.getEndOffset(o2);
      return c2 - s2 === 1 && (s2 === a2 && o2 > 1 ? (s2 = i2.getStartOffset(o2 - 1), c2 = i2.getEndOffset(o2 - 1)) : c2 === a2 && o2 < i2.getCount() - 1 && (s2 = i2.getStartOffset(o2 + 1), c2 = i2.getEndOffset(o2 + 1))), new P(n2, s2 + 1, n2, c2 + 1);
    }
  }, _u2._emptyInlayHintList = Object.freeze({
    dispose() {
    },
    hints: []
  }), _u2);
  function a_(e2) {
    return R.from({
      scheme: _r.command,
      path: e2.id,
      query: e2.arguments && encodeURIComponent(JSON.stringify(e2.arguments))
    }).toString();
  }
  var o_ = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, s_ = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let c_ = class extends ie {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2, u2, d2, f2) {
      super(e2, {
        ...r2.getRawOptions(),
        overflowWidgetsDomNode: r2.getOverflowWidgetsDomNode()
      }, n2, i2, a2, o2, s2, c2, l2, u2, d2, f2), this._parentEditor = r2, this._overwriteOptions = t2, super.updateOptions(this._overwriteOptions), this._register(r2.onDidChangeConfiguration((e3) => this._onParentConfigurationChanged(e3)));
    }
    getParentEditor() {
      return this._parentEditor;
    }
    _onParentConfigurationChanged(e2) {
      super.updateOptions(this._parentEditor.getRawOptions()), super.updateOptions(this._overwriteOptions);
    }
    updateOptions(e2) {
      jc(this._overwriteOptions, e2, true), super.updateOptions(this._overwriteOptions);
    }
  };
  c_ = o_([
    s_(4, k),
    s_(5, pt),
    s_(6, mt),
    s_(7, O),
    s_(8, Gt),
    s_(9, Ft),
    s_(10, lt),
    s_(11, Tt),
    s_(12, A)
  ], c_);
  const l_ = new v(new ir(0, 122, 204)), u_ = {
    showArrow: true,
    showFrame: true,
    className: ``,
    frameColor: l_,
    arrowColor: l_,
    keepEditorSelection: false
  }, d_ = `vs.editor.contrib.zoneWidget`;
  var f_ = class {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2) {
      this.id = ``, this.domNode = e2, this.afterLineNumber = t2, this.afterColumn = n2, this.heightInLines = r2, this.showInHiddenAreas = o2, this.ordinal = s2, this._onDomNodeTop = i2, this._onComputedHeight = a2;
    }
    onDomNodeTop(e2) {
      this._onDomNodeTop(e2);
    }
    onComputedHeight(e2) {
      this._onComputedHeight(e2);
    }
  }, p_ = class {
    constructor(e2, t2) {
      this._id = e2, this._domNode = t2;
    }
    getId() {
      return this._id;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return null;
    }
  }, m_ = (_v2 = class {
    constructor(t2) {
      this._editor = t2, this._ruleName = _v2._IdGenerator.nextId(), this._decorations = this._editor.createDecorationsCollection(), this._color = null, this._height = -1;
    }
    dispose() {
      this.hide(), hl(this._ruleName);
    }
    set color(e2) {
      this._color !== e2 && (this._color = e2, this._updateStyle());
    }
    set height(e2) {
      this._height !== e2 && (this._height = e2, this._updateStyle());
    }
    _updateStyle() {
      hl(this._ruleName), aa(`.monaco-editor ${this._ruleName}`, `border-style: solid; border-color: transparent; border-bottom-color: ${this._color}; border-width: ${this._height}px; bottom: -${this._height}px !important; margin-left: -${this._height}px; `);
    }
    show(e2) {
      e2.column === 1 && (e2 = {
        lineNumber: e2.lineNumber,
        column: 2
      }), this._decorations.set([
        {
          range: P.fromPositions(e2),
          options: {
            description: `zone-widget-arrow`,
            className: this._ruleName,
            stickiness: 1
          }
        }
      ]);
    }
    hide() {
      this._decorations.clear();
    }
  }, _v2._IdGenerator = new Yt(`.arrow-decoration-`), _v2), h_ = class {
    constructor(e2, t2 = {}) {
      this._arrow = null, this._overlayWidget = null, this._resizeSash = null, this._viewZone = null, this._disposables = new C(), this.container = null, this._isShowing = false, this.editor = e2, this._positionMarkerId = this.editor.createDecorationsCollection(), this.options = ma(t2), jc(this.options, u_, false), this.domNode = document.createElement(`div`), this.options.isAccessible || (this.domNode.setAttribute(`aria-hidden`, `true`), this.domNode.setAttribute(`role`, `presentation`)), this._disposables.add(this.editor.onDidLayoutChange((e3) => {
        let t3 = this._getWidth(e3);
        this.domNode.style.width = t3 + `px`, this.domNode.style.left = this._getLeft(e3) + `px`, this._onWidth(t3);
      }));
    }
    dispose() {
      this._overlayWidget && (this.editor.removeOverlayWidget(this._overlayWidget), this._overlayWidget = null), this._viewZone && this.editor.changeViewZones((e2) => {
        this._viewZone && e2.removeZone(this._viewZone.id), this._viewZone = null;
      }), this._positionMarkerId.clear(), this._disposables.dispose();
    }
    create() {
      this.domNode.classList.add(`zone-widget`), this.options.className && this.domNode.classList.add(this.options.className), this.container = document.createElement(`div`), this.container.classList.add(`zone-widget-container`), this.domNode.appendChild(this.container), this.options.showArrow && (this._arrow = new m_(this.editor), this._disposables.add(this._arrow)), this._fillContainer(this.container), this._initSash(), this._applyStyles();
    }
    style(e2) {
      e2.frameColor && (this.options.frameColor = e2.frameColor), e2.arrowColor && (this.options.arrowColor = e2.arrowColor), this._applyStyles();
    }
    _applyStyles() {
      if (this.container && this.options.frameColor) {
        let e2 = this.options.frameColor.toString();
        this.container.style.borderTopColor = e2, this.container.style.borderBottomColor = e2;
      }
      if (this._arrow && this.options.arrowColor) {
        let e2 = this.options.arrowColor.toString();
        this._arrow.color = e2;
      }
    }
    _getWidth(e2) {
      return e2.width - e2.minimap.minimapWidth - e2.verticalScrollbarWidth;
    }
    _getLeft(e2) {
      return e2.minimap.minimapWidth > 0 && e2.minimap.minimapLeft === 0 ? e2.minimap.minimapWidth : 0;
    }
    _onViewZoneTop(e2) {
      this.domNode.style.top = e2 + `px`;
    }
    _onViewZoneHeight(e2) {
      var _a3;
      if (this.domNode.style.height = `${e2}px`, this.container) {
        let t2 = e2 - this._decoratingElementsHeight();
        this.container.style.height = `${t2}px`;
        let n2 = this.editor.getLayoutInfo();
        this._doLayout(t2, this._getWidth(n2));
      }
      (_a3 = this._resizeSash) == null ? void 0 : _a3.layout();
    }
    get position() {
      let e2 = this._positionMarkerId.getRange(0);
      if (e2) return e2.getStartPosition();
    }
    show(e2, t2) {
      let n2 = P.isIRange(e2) ? P.lift(e2) : P.fromPositions(e2);
      this._isShowing = true, this._showImpl(n2, t2), this._isShowing = false, this._positionMarkerId.set([
        {
          range: n2,
          options: M.EMPTY
        }
      ]);
    }
    hide() {
      var _a3;
      this._viewZone && (this.editor.changeViewZones((e2) => {
        this._viewZone && e2.removeZone(this._viewZone.id);
      }), this._viewZone = null), this._overlayWidget && (this.editor.removeOverlayWidget(this._overlayWidget), this._overlayWidget = null), (_a3 = this._arrow) == null ? void 0 : _a3.hide(), this._positionMarkerId.clear();
    }
    _decoratingElementsHeight() {
      let e2 = this.editor.getOption(67), t2 = 0;
      if (this.options.showArrow) {
        let n2 = Math.round(e2 / 3);
        t2 += 2 * n2;
      }
      if (this.options.showFrame) {
        let n2 = Math.round(e2 / 9);
        t2 += 2 * n2;
      }
      return t2;
    }
    _showImpl(e2, t2) {
      let n2 = e2.getStartPosition(), r2 = this.editor.getLayoutInfo(), i2 = this._getWidth(r2);
      this.domNode.style.width = `${i2}px`, this.domNode.style.left = this._getLeft(r2) + `px`;
      let a2 = document.createElement(`div`);
      a2.style.overflow = `hidden`;
      let o2 = this.editor.getOption(67);
      if (!this.options.allowUnlimitedHeight) {
        let e3 = Math.max(12, this.editor.getLayoutInfo().height / o2 * 0.8);
        t2 = Math.min(t2, e3);
      }
      let s2 = 0, c2 = 0;
      if (this._arrow && this.options.showArrow && (s2 = Math.round(o2 / 3), this._arrow.height = s2, this._arrow.show(n2)), this.options.showFrame && (c2 = Math.round(o2 / 9)), this.editor.changeViewZones((e3) => {
        this._viewZone && e3.removeZone(this._viewZone.id), this._overlayWidget && (this.editor.removeOverlayWidget(this._overlayWidget), this._overlayWidget = null), this.domNode.style.top = `-1000px`, this._viewZone = new f_(a2, n2.lineNumber, n2.column, t2, (e4) => this._onViewZoneTop(e4), (e4) => this._onViewZoneHeight(e4), this.options.showInHiddenAreas, this.options.ordinal), this._viewZone.id = e3.addZone(this._viewZone), this._overlayWidget = new p_(d_ + this._viewZone.id, this.domNode), this.editor.addOverlayWidget(this._overlayWidget);
      }), this.container && this.options.showFrame) {
        let e3 = this.options.frameWidth ? this.options.frameWidth : c2;
        this.container.style.borderTopWidth = e3 + `px`, this.container.style.borderBottomWidth = e3 + `px`;
      }
      let l2 = t2 * o2 - this._decoratingElementsHeight();
      this.container && (this.container.style.top = s2 + `px`, this.container.style.height = l2 + `px`, this.container.style.overflow = `hidden`), this._doLayout(l2, i2), this.options.keepEditorSelection || this.editor.setSelection(e2);
      let u2 = this.editor.getModel();
      if (u2) {
        let t3 = u2.validateRange(new P(e2.startLineNumber, 1, e2.endLineNumber + 1, 1));
        this.revealRange(t3, t3.startLineNumber === u2.getLineCount());
      }
    }
    revealRange(e2, t2) {
      t2 ? this.editor.revealLineNearTop(e2.endLineNumber, 0) : this.editor.revealRange(e2, 0);
    }
    setCssClass(e2, t2) {
      this.container && (t2 && this.container.classList.remove(t2), this.container.classList.add(e2));
    }
    _onWidth(e2) {
    }
    _doLayout(e2, t2) {
    }
    _relayout(e2) {
      this._viewZone && this._viewZone.heightInLines !== e2 && this.editor.changeViewZones((t2) => {
        this._viewZone && (this._viewZone.heightInLines = e2, t2.layoutZone(this._viewZone.id));
      });
    }
    _initSash() {
      if (this._resizeSash) return;
      this._resizeSash = this._disposables.add(new gr(this.domNode, this, {
        orientation: 1
      })), this.options.isResizeable || (this._resizeSash.state = 0);
      let e2;
      this._disposables.add(this._resizeSash.onDidStart((t2) => {
        this._viewZone && (e2 = {
          startY: t2.startY,
          heightInLines: this._viewZone.heightInLines
        });
      })), this._disposables.add(this._resizeSash.onDidEnd(() => {
        e2 = void 0;
      })), this._disposables.add(this._resizeSash.onDidChange((t2) => {
        if (e2) {
          let n2 = (t2.currentY - e2.startY) / this.editor.getOption(67), r2 = n2 < 0 ? Math.ceil(n2) : Math.floor(n2), i2 = e2.heightInLines + r2;
          i2 > 5 && i2 < 35 && this._relayout(i2);
        }
      }));
    }
    getHorizontalSashLeft() {
      return 0;
    }
    getHorizontalSashTop() {
      return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;
    }
    getHorizontalSashWidth() {
      let e2 = this.editor.getLayoutInfo();
      return e2.width - e2.minimap.minimapWidth;
    }
  }, g_ = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, __ = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const v_ = ca(`IPeekViewService`);
  fl(v_, class {
    constructor() {
      this._widgets = /* @__PURE__ */ new Map();
    }
    addExclusiveWidget(e2, t2) {
      let n2 = this._widgets.get(e2);
      n2 && (n2.listener.dispose(), n2.widget.dispose());
      let r2 = () => {
        let n3 = this._widgets.get(e2);
        n3 && n3.widget === t2 && (n3.listener.dispose(), this._widgets.delete(e2));
      };
      this._widgets.set(e2, {
        widget: t2,
        listener: t2.onDidClose(r2)
      });
    }
  }, 1);
  var y_;
  (function(e2) {
    e2.inPeekEditor = new F(`inReferenceSearchEditor`, true, U(`inReferenceSearchEditor`, `Whether the current code editor is embedded inside peek`)), e2.notInPeekEditor = e2.inPeekEditor.toNegated();
  })(y_ || (y_ = {}));
  let b_ = (_w2 = class {
    constructor(e2, t2) {
      e2 instanceof c_ && y_.inPeekEditor.bindTo(t2);
    }
    dispose() {
    }
  }, _w2.ID = `editor.contrib.referenceController`, _w2);
  b_ = g_([
    __(1, O)
  ], b_), X(b_.ID, b_, 0);
  function x_(e2) {
    let t2 = e2.get(pt).getFocusedCodeEditor();
    return t2 instanceof c_ ? t2.getParentEditor() : t2;
  }
  const S_ = {
    headerBackgroundColor: v.white,
    primaryHeadingColor: v.fromHex(`#333333`),
    secondaryHeadingColor: v.fromHex(`#6c6c6cb3`)
  };
  let C_ = class extends h_ {
    constructor(e2, t2, n2) {
      super(e2, t2), this.instantiationService = n2, this._onDidClose = new E(), this.onDidClose = this._onDidClose.event, jc(this.options, S_, false);
    }
    dispose() {
      this.disposed || (this.disposed = true, super.dispose(), this._onDidClose.fire(this));
    }
    style(e2) {
      let t2 = this.options;
      e2.headerBackgroundColor && (t2.headerBackgroundColor = e2.headerBackgroundColor), e2.primaryHeadingColor && (t2.primaryHeadingColor = e2.primaryHeadingColor), e2.secondaryHeadingColor && (t2.secondaryHeadingColor = e2.secondaryHeadingColor), super.style(e2);
    }
    _applyStyles() {
      super._applyStyles();
      let e2 = this.options;
      this._headElement && e2.headerBackgroundColor && (this._headElement.style.backgroundColor = e2.headerBackgroundColor.toString()), this._primaryHeading && e2.primaryHeadingColor && (this._primaryHeading.style.color = e2.primaryHeadingColor.toString()), this._secondaryHeading && e2.secondaryHeadingColor && (this._secondaryHeading.style.color = e2.secondaryHeadingColor.toString()), this._bodyElement && e2.frameColor && (this._bodyElement.style.borderColor = e2.frameColor.toString());
    }
    _fillContainer(e2) {
      this.setCssClass(`peekview-widget`), this._headElement = r(`.head`), this._bodyElement = r(`.body`), this._fillHead(this._headElement), this._fillBody(this._bodyElement), e2.appendChild(this._headElement), e2.appendChild(this._bodyElement);
    }
    _fillHead(e2, t2) {
      this._titleElement = r(`.peekview-title`), this.options.supportOnTitleClick && (this._titleElement.classList.add(`clickable`), Si(this._titleElement, `click`, (e3) => this._onTitleClick(e3))), B(this._headElement, this._titleElement), this._fillTitleIcon(this._titleElement), this._primaryHeading = r(`span.filename`), this._secondaryHeading = r(`span.dirname`), this._metaHeading = r(`span.meta`), B(this._titleElement, this._primaryHeading, this._secondaryHeading, this._metaHeading);
      let n2 = r(`.peekview-actions`);
      B(this._headElement, n2);
      let i2 = this._getActionBarOptions();
      this._actionbarWidget = new s(n2, i2), this._disposables.add(this._actionbarWidget), t2 || this._actionbarWidget.push(new a(`peekview.close`, U(`label.close`, `Close`), L.asClassName(_.close), true, () => (this.dispose(), Promise.resolve())), {
        label: false,
        icon: true
      });
    }
    _fillTitleIcon(e2) {
    }
    _getActionBarOptions() {
      return {
        actionViewItemProvider: ra.bind(void 0, this.instantiationService),
        orientation: 0
      };
    }
    _onTitleClick(e2) {
    }
    setTitle(e2, t2) {
      this._primaryHeading && this._secondaryHeading && (this._primaryHeading.innerText = e2, this._primaryHeading.setAttribute(`title`, e2), t2 ? this._secondaryHeading.innerText = t2 : Ui(this._secondaryHeading));
    }
    setMetaTitle(e2) {
      this._metaHeading && (e2 ? (this._metaHeading.innerText = e2, kl(this._metaHeading)) : ls(this._metaHeading));
    }
    _doLayout(e2, t2) {
      if (!this._isShowing && e2 < 0) {
        this.dispose();
        return;
      }
      let n2 = Math.ceil(this.editor.getOption(67) * 1.2), r2 = Math.round(e2 - (n2 + 2));
      this._doLayoutHead(n2, t2), this._doLayoutBody(r2, t2);
    }
    _doLayoutHead(e2, t2) {
      this._headElement && (this._headElement.style.height = `${e2}px`, this._headElement.style.lineHeight = this._headElement.style.height);
    }
    _doLayoutBody(e2, t2) {
      this._bodyElement && (this._bodyElement.style.height = `${e2}px`);
    }
  };
  C_ = g_([
    __(2, k)
  ], C_);
  const w_ = q(`peekViewTitle.background`, {
    dark: `#252526`,
    light: `#F3F3F3`,
    hcDark: v.black,
    hcLight: v.white
  }, U(`peekViewTitleBackground`, `Background color of the peek view title area.`)), T_ = q(`peekViewTitleLabel.foreground`, {
    dark: v.white,
    light: v.black,
    hcDark: v.white,
    hcLight: Za
  }, U(`peekViewTitleForeground`, `Color of the peek view title.`)), E_ = q(`peekViewTitleDescription.foreground`, {
    dark: `#ccccccb3`,
    light: `#616161`,
    hcDark: `#FFFFFF99`,
    hcLight: `#292929`
  }, U(`peekViewTitleInfoForeground`, `Color of the peek view title info.`)), D_ = q(`peekView.border`, {
    dark: to,
    light: to,
    hcDark: ta,
    hcLight: ta
  }, U(`peekViewBorder`, `Color of the peek view borders and arrow.`)), O_ = q(`peekViewResult.background`, {
    dark: `#252526`,
    light: `#F3F3F3`,
    hcDark: v.black,
    hcLight: v.white
  }, U(`peekViewResultsBackground`, `Background color of the peek view result list.`)), k_ = q(`peekViewResult.lineForeground`, {
    dark: `#bbbbbb`,
    light: `#646465`,
    hcDark: v.white,
    hcLight: Za
  }, U(`peekViewResultsMatchForeground`, `Foreground color for line nodes in the peek view result list.`)), A_ = q(`peekViewResult.fileForeground`, {
    dark: v.white,
    light: `#1E1E1E`,
    hcDark: v.white,
    hcLight: Za
  }, U(`peekViewResultsFileForeground`, `Foreground color for file nodes in the peek view result list.`)), j_ = q(`peekViewResult.selectionBackground`, {
    dark: `#3399ff33`,
    light: `#3399ff33`,
    hcDark: null,
    hcLight: null
  }, U(`peekViewResultsSelectionBackground`, `Background color of the selected entry in the peek view result list.`)), M_ = q(`peekViewResult.selectionForeground`, {
    dark: v.white,
    light: `#6C6C6C`,
    hcDark: v.white,
    hcLight: Za
  }, U(`peekViewResultsSelectionForeground`, `Foreground color of the selected entry in the peek view result list.`)), N_ = q(`peekViewEditor.background`, {
    dark: `#001F33`,
    light: `#F2F8FC`,
    hcDark: v.black,
    hcLight: v.white
  }, U(`peekViewEditorBackground`, `Background color of the peek view editor.`)), P_ = q(`peekViewEditorGutter.background`, N_, U(`peekViewEditorGutterBackground`, `Background color of the gutter in the peek view editor.`)), F_ = q(`peekViewEditorStickyScroll.background`, N_, U(`peekViewEditorStickScrollBackground`, `Background color of sticky scroll in the peek view editor.`)), I_ = q(`peekViewResult.matchHighlightBackground`, {
    dark: `#ea5c004d`,
    light: `#ea5c004d`,
    hcDark: null,
    hcLight: null
  }, U(`peekViewResultsMatchHighlight`, `Match highlight color in the peek view result list.`)), L_ = q(`peekViewEditor.matchHighlightBackground`, {
    dark: `#ff8f0099`,
    light: `#f5d802de`,
    hcDark: null,
    hcLight: null
  }, U(`peekViewEditorMatchHighlight`, `Match highlight color in the peek view editor.`)), R_ = q(`peekViewEditor.matchHighlightBorder`, {
    dark: null,
    light: null,
    hcDark: bi,
    hcLight: bi
  }, U(`peekViewEditorMatchHighlightBorder`, `Match highlight border in the peek view editor.`));
  var z_ = class {
    constructor(e2, t2, n2, r2) {
      this.isProviderFirst = e2, this.parent = t2, this.link = n2, this._rangeCallback = r2, this.id = ga.nextId();
    }
    get uri() {
      return this.link.uri;
    }
    get range() {
      return this._range ?? this.link.targetSelectionRange ?? this.link.range;
    }
    set range(e2) {
      this._range = e2, this._rangeCallback(this);
    }
    get ariaMessage() {
      var _a3;
      let e2 = (_a3 = this.parent.getPreview(this)) == null ? void 0 : _a3.preview(this.range);
      return e2 ? U({
        key: `aria.oneReference.preview`,
        comment: [
          `Placeholders are: 0: filename, 1:line number, 2: column number, 3: preview snippet of source code`
        ]
      }, `{0} in {1} on line {2} at column {3}`, e2.value, Ii(this.uri), this.range.startLineNumber, this.range.startColumn) : U(`aria.oneReference`, `in {0} on line {1} at column {2}`, Ii(this.uri), this.range.startLineNumber, this.range.startColumn);
    }
  }, B_ = class {
    constructor(e2) {
      this._modelReference = e2;
    }
    dispose() {
      this._modelReference.dispose();
    }
    preview(e2, t2 = 8) {
      let n2 = this._modelReference.object.textEditorModel;
      if (!n2) return;
      let { startLineNumber: r2, startColumn: i2, endLineNumber: a2, endColumn: o2 } = e2, s2 = n2.getWordUntilPosition({
        lineNumber: r2,
        column: i2 - t2
      }), c2 = new P(r2, s2.startColumn, r2, i2), l2 = new P(a2, o2, a2, 1073741824), u2 = n2.getValueInRange(c2).replace(/^\s+/, ``), d2 = n2.getValueInRange(e2), f2 = n2.getValueInRange(l2).replace(/\s+$/, ``);
      return {
        value: u2 + d2 + f2,
        highlight: {
          start: u2.length,
          end: u2.length + d2.length
        }
      };
    }
  }, V_ = class {
    constructor(e2, t2) {
      this.parent = e2, this.uri = t2, this.children = [], this._previews = new pr();
    }
    dispose() {
      Ra(this._previews.values()), this._previews.clear();
    }
    getPreview(e2) {
      return this._previews.get(e2.uri);
    }
    get ariaMessage() {
      let e2 = this.children.length;
      return e2 === 1 ? U(`aria.fileReferences.1`, `1 symbol in {0}, full path {1}`, Ii(this.uri), this.uri.fsPath) : U(`aria.fileReferences.N`, `{0} symbols in {1}, full path {2}`, e2, Ii(this.uri), this.uri.fsPath);
    }
    async resolve(e2) {
      if (this._previews.size !== 0) return this;
      for (let t2 of this.children) {
        if (this._previews.has(t2.uri)) continue;
        try {
          let n2 = await e2.createModelReference(t2.uri);
          this._previews.set(t2.uri, new B_(n2));
        } catch (e3) {
          G(e3);
        }
      }
      return this;
    }
  }, H_ = class e2 {
    constructor(t2, n2) {
      this.groups = [], this.references = [], this._onDidChangeReferenceRange = new E(), this.onDidChangeReferenceRange = this._onDidChangeReferenceRange.event, this._links = t2, this._title = n2;
      let [r2] = t2;
      t2.sort(e2._compareReferences);
      let i2;
      for (let n3 of t2) if ((!i2 || !yo.isEqual(i2.uri, n3.uri, true)) && (i2 = new V_(this, n3.uri), this.groups.push(i2)), i2.children.length === 0 || e2._compareReferences(n3, i2.children[i2.children.length - 1]) !== 0) {
        let e3 = new z_(r2 === n3, i2, n3, (e4) => this._onDidChangeReferenceRange.fire(e4));
        this.references.push(e3), i2.children.push(e3);
      }
    }
    dispose() {
      Ra(this.groups), this._onDidChangeReferenceRange.dispose(), this.groups.length = 0;
    }
    clone() {
      return new e2(this._links, this._title);
    }
    get title() {
      return this._title;
    }
    get isEmpty() {
      return this.groups.length === 0;
    }
    get ariaMessage() {
      return this.isEmpty ? U(`aria.result.0`, `No results found`) : this.references.length === 1 ? U(`aria.result.1`, `Found 1 symbol in {0}`, this.references[0].uri.fsPath) : this.groups.length === 1 ? U(`aria.result.n1`, `Found {0} symbols in {1}`, this.references.length, this.groups[0].uri.fsPath) : U(`aria.result.nm`, `Found {0} symbols in {1} files`, this.references.length, this.groups.length);
    }
    nextOrPreviousReference(e3, t2) {
      let { parent: n2 } = e3, r2 = n2.children.indexOf(e3), i2 = n2.children.length, a2 = n2.parent.groups.length;
      return a2 === 1 || t2 && r2 + 1 < i2 || !t2 && r2 > 0 ? (r2 = t2 ? (r2 + 1) % i2 : (r2 + i2 - 1) % i2, n2.children[r2]) : (r2 = n2.parent.groups.indexOf(n2), t2 ? (r2 = (r2 + 1) % a2, n2.parent.groups[r2].children[0]) : (r2 = (r2 + a2 - 1) % a2, n2.parent.groups[r2].children[n2.parent.groups[r2].children.length - 1]));
    }
    nearestReference(e3, t2) {
      let n2 = this.references.map((n3, r2) => ({
        idx: r2,
        prefixLen: Ki(n3.uri.toString(), e3.toString()),
        offsetDist: Math.abs(n3.range.startLineNumber - t2.lineNumber) * 100 + Math.abs(n3.range.startColumn - t2.column)
      })).sort((e4, t3) => e4.prefixLen > t3.prefixLen ? -1 : e4.prefixLen < t3.prefixLen ? 1 : e4.offsetDist < t3.offsetDist ? -1 : e4.offsetDist > t3.offsetDist ? 1 : 0)[0];
      if (n2) return this.references[n2.idx];
    }
    referenceAt(e3, t2) {
      for (let n2 of this.references) if (n2.uri.toString() === e3.toString() && P.containsPosition(n2.range, t2)) return n2;
    }
    firstReference() {
      for (let e3 of this.references) if (e3.isProviderFirst) return e3;
      return this.references[0];
    }
    static _compareReferences(e3, t2) {
      return yo.compare(e3.uri, t2.uri) || P.compareRangesUsingStarts(e3.range, t2.range);
    }
  }, U_ = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, W_ = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, G_;
  let K_ = class {
    constructor(e2) {
      this._resolverService = e2;
    }
    hasChildren(e2) {
      return e2 instanceof H_ || e2 instanceof V_;
    }
    getChildren(e2) {
      if (e2 instanceof H_) return e2.groups;
      if (e2 instanceof V_) return e2.resolve(this._resolverService).then((e3) => e3.children);
      throw Error(`bad tree`);
    }
  };
  K_ = U_([
    W_(0, Ut)
  ], K_);
  var q_ = class {
    getHeight() {
      return 23;
    }
    getTemplateId(e2) {
      return e2 instanceof V_ ? Z_.id : $_.id;
    }
  };
  let J_ = class {
    constructor(e2) {
      this._keybindingService = e2;
    }
    getKeyboardNavigationLabel(e2) {
      var _a3;
      if (e2 instanceof z_) {
        let t2 = (_a3 = e2.parent.getPreview(e2)) == null ? void 0 : _a3.preview(e2.range);
        if (t2) return t2.value;
      }
      return Ii(e2.uri);
    }
  };
  J_ = U_([
    W_(0, Ct)
  ], J_);
  var Y_ = class {
    getId(e2) {
      return e2 instanceof z_ ? e2.id : e2.uri;
    }
  };
  let X_ = class extends S {
    constructor(e2, t2) {
      super(), this._labelService = t2;
      let n2 = document.createElement(`div`);
      n2.classList.add(`reference-file`), this.file = this._register(new Jt(n2, {
        supportHighlights: true
      })), this.badge = new ue(B(n2, r(`.count`)), {}, ha), e2.appendChild(n2);
    }
    set(e2, t2) {
      let n2 = Pa(e2.uri);
      this.file.setLabel(this._labelService.getUriBasenameLabel(e2.uri), this._labelService.getUriLabel(n2, {
        relative: true
      }), {
        title: this._labelService.getUriLabel(e2.uri),
        matches: t2
      });
      let r2 = e2.children.length;
      this.badge.setCount(r2), r2 > 1 ? this.badge.setTitleFormat(U(`referencesCount`, `{0} references`, r2)) : this.badge.setTitleFormat(U(`referenceCount`, `{0} reference`, r2));
    }
  };
  X_ = U_([
    W_(1, wt)
  ], X_);
  let Z_ = (_x2 = class {
    constructor(e2) {
      this._instantiationService = e2, this.templateId = G_.id;
    }
    renderTemplate(e2) {
      return this._instantiationService.createInstance(X_, e2);
    }
    renderElement(e2, t2, n2) {
      n2.set(e2.element, ua(e2.filterData));
    }
    disposeTemplate(e2) {
      e2.dispose();
    }
  }, G_ = _x2, _x2.id = `FileReferencesRenderer`, _x2);
  Z_ = G_ = U_([
    W_(0, k)
  ], Z_);
  var Q_ = class extends S {
    constructor(e2) {
      super(), this.label = this._register(new it(e2));
    }
    set(e2, t2) {
      var _a3;
      let n2 = (_a3 = e2.parent.getPreview(e2)) == null ? void 0 : _a3.preview(e2.range);
      if (!n2 || !n2.value) this.label.set(`${Ii(e2.uri)}:${e2.range.startLineNumber + 1}:${e2.range.startColumn + 1}`);
      else {
        let { value: e3, highlight: r2 } = n2;
        t2 && !Je.isDefault(t2) ? (this.label.element.classList.toggle(`referenceMatch`, false), this.label.set(e3, ua(t2))) : (this.label.element.classList.toggle(`referenceMatch`, true), this.label.set(e3, [
          r2
        ]));
      }
    }
  }, $_ = (_y2 = class {
    constructor() {
      this.templateId = _y2.id;
    }
    renderTemplate(e2) {
      return new Q_(e2);
    }
    renderElement(e2, t2, n2) {
      n2.set(e2.element, e2.filterData);
    }
    disposeTemplate(e2) {
      e2.dispose();
    }
  }, _y2.id = `OneReferenceRenderer`, _y2), ev = class {
    getWidgetAriaLabel() {
      return U(`treeAriaLabel`, `References`);
    }
    getAriaLabel(e2) {
      return e2.ariaMessage;
    }
  }, tv = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, nv = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, rv = (_z = class {
    constructor(e2, t2) {
      this._editor = e2, this._model = t2, this._decorations = /* @__PURE__ */ new Map(), this._decorationIgnoreSet = /* @__PURE__ */ new Set(), this._callOnDispose = new C(), this._callOnModelChange = new C(), this._callOnDispose.add(this._editor.onDidChangeModel(() => this._onModelChanged())), this._onModelChanged();
    }
    dispose() {
      this._callOnModelChange.dispose(), this._callOnDispose.dispose(), this.removeDecorations();
    }
    _onModelChanged() {
      this._callOnModelChange.clear();
      let e2 = this._editor.getModel();
      if (e2) {
        for (let t2 of this._model.references) if (t2.uri.toString() === e2.uri.toString()) {
          this._addDecorations(t2.parent);
          return;
        }
      }
    }
    _addDecorations(t2) {
      if (!this._editor.hasModel()) return;
      this._callOnModelChange.add(this._editor.getModel().onDidChangeDecorations(() => this._onDecorationChanged()));
      let n2 = [], r2 = [];
      for (let i2 = 0, a2 = t2.children.length; i2 < a2; i2++) {
        let a3 = t2.children[i2];
        this._decorationIgnoreSet.has(a3.id) || a3.uri.toString() === this._editor.getModel().uri.toString() && (n2.push({
          range: a3.range,
          options: _z.DecorationOptions
        }), r2.push(i2));
      }
      this._editor.changeDecorations((e2) => {
        let i2 = e2.deltaDecorations([], n2);
        for (let e3 = 0; e3 < i2.length; e3++) this._decorations.set(i2[e3], t2.children[r2[e3]]);
      });
    }
    _onDecorationChanged() {
      let e2 = [], t2 = this._editor.getModel();
      if (t2) {
        for (let [n2, r2] of this._decorations) {
          let i2 = t2.getDecorationRange(n2);
          if (!i2) continue;
          let a2 = false;
          if (P.equalsRange(i2, r2.range)) continue;
          if (P.spansMultipleLines(i2)) a2 = true;
          else {
            let e3 = r2.range.endColumn - r2.range.startColumn, t3 = i2.endColumn - i2.startColumn;
            e3 !== t3 && (a2 = true);
          }
          a2 ? (this._decorationIgnoreSet.add(r2.id), e2.push(n2)) : r2.range = i2;
        }
        for (let t3 = 0, n2 = e2.length; t3 < n2; t3++) this._decorations.delete(e2[t3]);
        this._editor.removeDecorations(e2);
      }
    }
    removeDecorations() {
      this._editor.removeDecorations([
        ...this._decorations.keys()
      ]), this._decorations.clear();
    }
  }, _z.DecorationOptions = M.register({
    description: `reference-decoration`,
    stickiness: 1,
    className: `reference-decoration`
  }), _z), iv = class {
    constructor() {
      this.ratio = 0.7, this.heightInLines = 18;
    }
    static fromJSON(e2) {
      let t2, n2;
      try {
        let r2 = JSON.parse(e2);
        t2 = r2.ratio, n2 = r2.heightInLines;
      } catch {
      }
      return {
        ratio: t2 || 0.7,
        heightInLines: n2 || 18
      };
    }
  }, av = class extends mi {
  };
  let ov = class extends C_ {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      super(e2, {
        showFrame: false,
        showArrow: true,
        isResizeable: true,
        isAccessible: true,
        supportOnTitleClick: true
      }, a2), this._defaultTreeKeyboardSupport = t2, this.layoutData = n2, this._textModelResolverService = i2, this._instantiationService = a2, this._peekViewService = o2, this._uriLabel = s2, this._keybindingService = c2, this._disposeOnNewModel = new C(), this._callOnDispose = new C(), this._onDidSelectReference = new E(), this.onDidSelectReference = this._onDidSelectReference.event, this._dim = new x(0, 0), this._isClosing = false, this._applyTheme(r2.getColorTheme()), this._callOnDispose.add(r2.onDidColorThemeChange(this._applyTheme.bind(this))), this._peekViewService.addExclusiveWidget(e2, this), this.create();
    }
    get isClosing() {
      return this._isClosing;
    }
    dispose() {
      this._isClosing = true, this.setModel(void 0), this._callOnDispose.dispose(), this._disposeOnNewModel.dispose(), Ra(this._preview), Ra(this._previewNotAvailableMessage), Ra(this._tree), Ra(this._previewModelReference), this._splitView.dispose(), super.dispose();
    }
    _applyTheme(e2) {
      let t2 = e2.getColor(D_) || v.transparent;
      this.style({
        arrowColor: t2,
        frameColor: t2,
        headerBackgroundColor: e2.getColor(w_) || v.transparent,
        primaryHeadingColor: e2.getColor(T_),
        secondaryHeadingColor: e2.getColor(E_)
      });
    }
    show(e2) {
      super.show(e2, this.layoutData.heightInLines || 18);
    }
    focusOnReferenceTree() {
      this._tree.domFocus();
    }
    focusOnPreviewEditor() {
      this._preview.focus();
    }
    isPreviewEditorFocused() {
      return this._preview.hasTextFocus();
    }
    _onTitleClick(e2) {
      this._preview && this._preview.getModel() && this._onDidSelectReference.fire({
        element: this._getFocusedReference(),
        kind: e2.ctrlKey || e2.metaKey || e2.altKey ? `side` : `open`,
        source: `title`
      });
    }
    _fillBody(e2) {
      this.setCssClass(`reference-zone-widget`), this._messageContainer = B(e2, r(`div.messages`)), ls(this._messageContainer), this._splitView = new jr(e2, {
        orientation: 1
      }), this._previewContainer = B(e2, r(`div.preview.inline`));
      let t2 = {
        scrollBeyondLastLine: false,
        scrollbar: {
          verticalScrollbarSize: 14,
          horizontal: `auto`,
          useShadows: true,
          verticalHasArrows: false,
          horizontalHasArrows: false,
          alwaysConsumeMouseWheel: true
        },
        overviewRulerLanes: 2,
        fixedOverflowWidgets: true,
        minimap: {
          enabled: false
        }
      };
      this._preview = this._instantiationService.createInstance(c_, this._previewContainer, t2, {}, this.editor), ls(this._previewContainer), this._previewNotAvailableMessage = this._instantiationService.createInstance(Gr, U(`missingPreviewMessage`, `no preview available`), Jn, Gr.DEFAULT_CREATION_OPTIONS, null), this._treeContainer = B(e2, r(`div.ref-tree.inline`));
      let n2 = {
        keyboardSupport: this._defaultTreeKeyboardSupport,
        accessibilityProvider: new ev(),
        keyboardNavigationLabelProvider: this._instantiationService.createInstance(J_),
        identityProvider: new Y_(),
        openOnSingleClick: true,
        selectionNavigation: true,
        overrideStyles: {
          listBackground: O_
        }
      };
      this._defaultTreeKeyboardSupport && this._callOnDispose.add(Si(this._treeContainer, `keydown`, (e3) => {
        e3.equals(9) && (this._keybindingService.dispatchEvent(e3, e3.target), e3.stopPropagation());
      }, true)), this._tree = this._instantiationService.createInstance(av, `ReferencesWidget`, this._treeContainer, new q_(), [
        this._instantiationService.createInstance(Z_),
        this._instantiationService.createInstance($_)
      ], this._instantiationService.createInstance(K_), n2), this._splitView.addView({
        onDidChange: ze.None,
        element: this._previewContainer,
        minimumSize: 200,
        maximumSize: Number.MAX_VALUE,
        layout: (e3) => {
          this._preview.layout({
            height: this._dim.height,
            width: e3
          });
        }
      }, Ar.Distribute), this._splitView.addView({
        onDidChange: ze.None,
        element: this._treeContainer,
        minimumSize: 100,
        maximumSize: Number.MAX_VALUE,
        layout: (e3) => {
          this._treeContainer.style.height = `${this._dim.height}px`, this._treeContainer.style.width = `${e3}px`, this._tree.layout(this._dim.height, e3);
        }
      }, Ar.Distribute), this._disposables.add(this._splitView.onDidSashChange(() => {
        this._dim.width && (this.layoutData.ratio = this._splitView.getViewSize(0) / this._dim.width);
      }, void 0));
      let i2 = (e3, t3) => {
        e3 instanceof z_ && (t3 === `show` && this._revealReference(e3, false), this._onDidSelectReference.fire({
          element: e3,
          kind: t3,
          source: `tree`
        }));
      };
      this._disposables.add(this._tree.onDidOpen((e3) => {
        e3.sideBySide ? i2(e3.element, `side`) : e3.editorOptions.pinned ? i2(e3.element, `goto`) : i2(e3.element, `show`);
      })), ls(this._treeContainer);
    }
    _onWidth(e2) {
      this._dim && this._doLayoutBody(this._dim.height, e2);
    }
    _doLayoutBody(e2, t2) {
      super._doLayoutBody(e2, t2), this._dim = new x(t2, e2), this.layoutData.heightInLines = this._viewZone ? this._viewZone.heightInLines : this.layoutData.heightInLines, this._splitView.layout(t2), this._splitView.resizeView(0, t2 * this.layoutData.ratio);
    }
    setSelection(e2) {
      return this._revealReference(e2, true).then(() => {
        this._model && (this._tree.setSelection([
          e2
        ]), this._tree.setFocus([
          e2
        ]));
      });
    }
    setModel(e2) {
      return this._disposeOnNewModel.clear(), this._model = e2, this._model ? this._onNewModel() : Promise.resolve();
    }
    _onNewModel() {
      return this._model ? this._model.isEmpty ? (this.setTitle(``), this._messageContainer.innerText = U(`noResults`, `No results`), kl(this._messageContainer), Promise.resolve(void 0)) : (ls(this._messageContainer), this._decorationsManager = new rv(this._preview, this._model), this._disposeOnNewModel.add(this._decorationsManager), this._disposeOnNewModel.add(this._model.onDidChangeReferenceRange((e2) => this._tree.rerender(e2))), this._disposeOnNewModel.add(this._preview.onMouseDown((e2) => {
        let { event: t2, target: n2 } = e2;
        if (t2.detail !== 2) return;
        let r2 = this._getFocusedReference();
        r2 && this._onDidSelectReference.fire({
          element: {
            uri: r2.uri,
            range: n2.range
          },
          kind: t2.ctrlKey || t2.metaKey || t2.altKey ? `side` : `open`,
          source: `editor`
        });
      })), this.container.classList.add(`results-loaded`), kl(this._treeContainer), kl(this._previewContainer), this._splitView.layout(this._dim.width), this.focusOnReferenceTree(), this._tree.setInput(this._model.groups.length === 1 ? this._model.groups[0] : this._model)) : Promise.resolve(void 0);
    }
    _getFocusedReference() {
      let [e2] = this._tree.getFocus();
      if (e2 instanceof z_) return e2;
      if (e2 instanceof V_ && e2.children.length > 0) return e2.children[0];
    }
    async revealReference(e2) {
      await this._revealReference(e2, false), this._onDidSelectReference.fire({
        element: e2,
        kind: `goto`,
        source: `tree`
      });
    }
    async _revealReference(e2, t2) {
      if (this._revealedReference === e2) return;
      this._revealedReference = e2, e2.uri.scheme === _r.inMemory ? this.setTitle(U(`peekView.alternateTitle`, `References`)) : this.setTitle(Ri(e2.uri), this._uriLabel.getUriLabel(Pa(e2.uri)));
      let n2 = this._textModelResolverService.createModelReference(e2.uri);
      this._tree.getInput() === e2.parent ? this._tree.reveal(e2) : (t2 && this._tree.reveal(e2.parent), await this._tree.expand(e2.parent), this._tree.reveal(e2));
      let r2 = await n2;
      if (!this._model) {
        r2.dispose();
        return;
      }
      Ra(this._previewModelReference);
      let i2 = r2.object;
      if (i2) {
        let t3 = this._preview.getModel() === i2.textEditorModel ? 0 : 1, n3 = P.lift(e2.range).collapseToStart();
        this._previewModelReference = r2, this._preview.setModel(i2.textEditorModel), this._preview.setSelection(n3), this._preview.revealRangeInCenter(n3, t3);
      } else this._preview.setModel(this._previewNotAvailableMessage), r2.dispose();
    }
  };
  ov = tv([
    nv(3, Gt),
    nv(4, Ut),
    nv(5, k),
    nv(6, v_),
    nv(7, wt),
    nv(8, Ct)
  ], ov);
  var sv = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, cv = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, lv;
  const uv = new F(`referenceSearchVisible`, false, U(`referenceSearchVisible`, `Whether reference peek is visible, like 'Peek References' or 'Peek Definition'`));
  let dv = (_A2 = class {
    static get(e2) {
      return e2.getContribution(lv.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2) {
      this._defaultTreeKeyboardSupport = e2, this._editor = t2, this._editorService = r2, this._notificationService = i2, this._instantiationService = a2, this._storageService = o2, this._configurationService = s2, this._disposables = new C(), this._requestIdPool = 0, this._ignoreModelChangeEvent = false, this._referenceSearchVisible = uv.bindTo(n2);
    }
    dispose() {
      var _a3, _b3;
      this._referenceSearchVisible.reset(), this._disposables.dispose(), (_a3 = this._widget) == null ? void 0 : _a3.dispose(), (_b3 = this._model) == null ? void 0 : _b3.dispose(), this._widget = void 0, this._model = void 0;
    }
    toggleWidget(e2, t2, n2) {
      let r2;
      if (this._widget && (r2 = this._widget.position), this.closeWidget(), r2 && e2.containsPosition(r2)) return;
      this._peekMode = n2, this._referenceSearchVisible.set(true), this._disposables.add(this._editor.onDidChangeModelLanguage(() => {
        this.closeWidget();
      })), this._disposables.add(this._editor.onDidChangeModel(() => {
        this._ignoreModelChangeEvent || this.closeWidget();
      }));
      let i2 = `peekViewLayout`, a2 = iv.fromJSON(this._storageService.get(i2, 0, `{}`));
      this._widget = this._instantiationService.createInstance(ov, this._editor, this._defaultTreeKeyboardSupport, a2), this._widget.setTitle(U(`labelLoading`, `Loading...`)), this._widget.show(e2), this._disposables.add(this._widget.onDidClose(() => {
        t2.cancel(), this._widget ? (this._storageService.store(i2, JSON.stringify(this._widget.layoutData), 0, 1), this._widget.isClosing || this.closeWidget(), this._widget = void 0) : this.closeWidget();
      })), this._disposables.add(this._widget.onDidSelectReference((e3) => {
        let { element: t3, kind: r3 } = e3;
        if (t3) switch (r3) {
          case `open`:
            (e3.source !== `editor` || !this._configurationService.getValue(`editor.stablePeek`)) && this.openReference(t3, false, false);
            break;
          case `side`:
            this.openReference(t3, true, false);
            break;
          case `goto`:
            n2 ? this._gotoReference(t3, true) : this.openReference(t3, false, true);
            break;
        }
      }));
      let o2 = ++this._requestIdPool;
      t2.then((t3) => {
        var _a3;
        if (o2 !== this._requestIdPool || !this._widget) {
          t3.dispose();
          return;
        }
        return (_a3 = this._model) == null ? void 0 : _a3.dispose(), this._model = t3, this._widget.setModel(this._model).then(() => {
          if (this._widget && this._model && this._editor.hasModel()) {
            this._model.isEmpty ? this._widget.setMetaTitle(``) : this._widget.setMetaTitle(U(`metaTitle.N`, `{0} ({1})`, this._model.title, this._model.references.length));
            let t4 = this._editor.getModel().uri, n3 = new N(e2.startLineNumber, e2.startColumn), r3 = this._model.nearestReference(t4, n3);
            if (r3) return this._widget.setSelection(r3).then(() => {
              this._widget && this._editor.getOption(87) === `editor` && this._widget.focusOnPreviewEditor();
            });
          }
        });
      }, (e3) => {
        this._notificationService.error(e3);
      });
    }
    changeFocusBetweenPreviewAndReferences() {
      this._widget && (this._widget.isPreviewEditorFocused() ? this._widget.focusOnReferenceTree() : this._widget.focusOnPreviewEditor());
    }
    async goToNextOrPreviousReference(e2) {
      if (!this._editor.hasModel() || !this._model || !this._widget) return;
      let t2 = this._widget.position;
      if (!t2) return;
      let n2 = this._model.nearestReference(this._editor.getModel().uri, t2);
      if (!n2) return;
      let r2 = this._model.nextOrPreviousReference(n2, e2), i2 = this._editor.hasTextFocus(), a2 = this._widget.isPreviewEditorFocused();
      await this._widget.setSelection(r2), await this._gotoReference(r2, false), i2 ? this._editor.focus() : this._widget && a2 && this._widget.focusOnPreviewEditor();
    }
    async revealReference(e2) {
      !this._editor.hasModel() || !this._model || !this._widget || await this._widget.revealReference(e2);
    }
    closeWidget(e2 = true) {
      var _a3, _b3;
      (_a3 = this._widget) == null ? void 0 : _a3.dispose(), (_b3 = this._model) == null ? void 0 : _b3.dispose(), this._referenceSearchVisible.reset(), this._disposables.clear(), this._widget = void 0, this._model = void 0, e2 && this._editor.focus(), this._requestIdPool += 1;
    }
    _gotoReference(e2, t2) {
      var _a3;
      (_a3 = this._widget) == null ? void 0 : _a3.hide(), this._ignoreModelChangeEvent = true;
      let n2 = P.lift(e2.range).collapseToStart();
      return this._editorService.openCodeEditor({
        resource: e2.uri,
        options: {
          selection: n2,
          selectionSource: `code.jump`,
          pinned: t2
        }
      }, this._editor).then((e3) => {
        if (this._ignoreModelChangeEvent = false, !e3 || !this._widget) {
          this.closeWidget();
          return;
        }
        if (this._editor === e3) this._widget.show(n2), this._widget.focusOnReferenceTree();
        else {
          let t3 = lv.get(e3), r2 = this._model.clone();
          this.closeWidget(), e3.focus(), t3 == null ? void 0 : t3.toggleWidget(n2, sa((e4) => Promise.resolve(r2)), this._peekMode ?? false);
        }
      }, (e3) => {
        this._ignoreModelChangeEvent = false, G(e3);
      });
    }
    openReference(e2, t2, n2) {
      t2 || this.closeWidget();
      let { uri: r2, range: i2 } = e2;
      this._editorService.openCodeEditor({
        resource: r2,
        options: {
          selection: i2,
          selectionSource: `code.jump`,
          pinned: n2
        }
      }, this._editor, t2);
    }
  }, lv = _A2, _A2.ID = `editor.contrib.referencesController`, _A2);
  dv = lv = sv([
    cv(2, O),
    cv(3, pt),
    cv(4, Ft),
    cv(5, k),
    cv(6, Vt),
    cv(7, D)
  ], dv);
  function fv(e2, t2) {
    let n2 = x_(e2);
    if (!n2) return;
    let r2 = dv.get(n2);
    r2 && t2(r2);
  }
  gn.registerCommandAndKeybindingRule({
    id: `togglePeekWidgetFocus`,
    weight: 100,
    primary: un(2089, 60),
    when: b.or(uv, y_.inPeekEditor),
    handler(e2) {
      fv(e2, (e3) => {
        e3.changeFocusBetweenPreviewAndReferences();
      });
    }
  }), gn.registerCommandAndKeybindingRule({
    id: `goToNextReference`,
    weight: 90,
    primary: 62,
    secondary: [
      70
    ],
    when: b.or(uv, y_.inPeekEditor),
    handler(e2) {
      fv(e2, (e3) => {
        e3.goToNextOrPreviousReference(true);
      });
    }
  }), gn.registerCommandAndKeybindingRule({
    id: `goToPreviousReference`,
    weight: 90,
    primary: 1086,
    secondary: [
      1094
    ],
    when: b.or(uv, y_.inPeekEditor),
    handler(e2) {
      fv(e2, (e3) => {
        e3.goToNextOrPreviousReference(false);
      });
    }
  }), y.registerCommandAlias(`goToNextReferenceFromEmbeddedEditor`, `goToNextReference`), y.registerCommandAlias(`goToPreviousReferenceFromEmbeddedEditor`, `goToPreviousReference`), y.registerCommandAlias(`closeReferenceSearchEditor`, `closeReferenceSearch`), y.registerCommand(`closeReferenceSearch`, (e2) => fv(e2, (e3) => e3.closeWidget())), gn.registerKeybindingRule({
    id: `closeReferenceSearch`,
    weight: -1,
    primary: 9,
    secondary: [
      1033
    ],
    when: b.and(y_.inPeekEditor, b.not(`config.editor.stablePeek`))
  }), gn.registerKeybindingRule({
    id: `closeReferenceSearch`,
    weight: 250,
    primary: 9,
    secondary: [
      1033
    ],
    when: b.and(uv, b.not(`config.editor.stablePeek`), b.or(T.editorTextFocus, nn.negate()))
  }), gn.registerCommandAndKeybindingRule({
    id: `revealReference`,
    weight: 200,
    primary: 3,
    mac: {
      primary: 3,
      secondary: [
        2066
      ]
    },
    when: b.and(uv, gi, vi.negate(), yi.negate()),
    handler(e2) {
      var _a3;
      let t2 = e2.get(Ot), n2 = (_a3 = t2.lastFocusedList) == null ? void 0 : _a3.getFocus();
      Array.isArray(n2) && n2[0] instanceof z_ && fv(e2, (e3) => e3.revealReference(n2[0]));
    }
  }), gn.registerCommandAndKeybindingRule({
    id: `openReferenceToSide`,
    weight: 100,
    primary: 2051,
    mac: {
      primary: 259
    },
    when: b.and(uv, gi, vi.negate(), yi.negate()),
    handler(e2) {
      var _a3;
      let t2 = e2.get(Ot), n2 = (_a3 = t2.lastFocusedList) == null ? void 0 : _a3.getFocus();
      Array.isArray(n2) && n2[0] instanceof z_ && fv(e2, (e3) => e3.openReference(n2[0], true, true));
    }
  }), y.registerCommand(`openReference`, (e2) => {
    var _a3;
    let t2 = e2.get(Ot), n2 = (_a3 = t2.lastFocusedList) == null ? void 0 : _a3.getFocus();
    Array.isArray(n2) && n2[0] instanceof z_ && fv(e2, (e3) => e3.openReference(n2[0], false, true));
  });
  var pv = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, mv = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const hv = new F(`hasSymbols`, false, U(`hasSymbols`, `Whether there are symbol locations that can be navigated via keyboard-only.`)), gv = ca(`ISymbolNavigationService`);
  let _v = class {
    constructor(e2, t2, n2, r2) {
      this._editorService = t2, this._notificationService = n2, this._keybindingService = r2, this._currentModel = void 0, this._currentIdx = -1, this._ignoreEditorChange = false, this._ctxHasSymbols = hv.bindTo(e2);
    }
    reset() {
      var _a3, _b3;
      this._ctxHasSymbols.reset(), (_a3 = this._currentState) == null ? void 0 : _a3.dispose(), (_b3 = this._currentMessage) == null ? void 0 : _b3.dispose(), this._currentModel = void 0, this._currentIdx = -1;
    }
    put(e2) {
      let t2 = e2.parent.parent;
      if (t2.references.length <= 1) {
        this.reset();
        return;
      }
      this._currentModel = t2, this._currentIdx = t2.references.indexOf(e2), this._ctxHasSymbols.set(true), this._showMessage();
      let n2 = new vv(this._editorService), r2 = n2.onDidChange((e3) => {
        if (this._ignoreEditorChange) return;
        let n3 = this._editorService.getActiveCodeEditor();
        if (!n3) return;
        let r3 = n3.getModel(), i2 = n3.getPosition();
        if (!r3 || !i2) return;
        let a2 = false, o2 = false;
        for (let e4 of t2.references) if (As(e4.uri, r3.uri)) a2 = true, o2 || (o2 = P.containsPosition(e4.range, i2));
        else if (a2) break;
        (!a2 || !o2) && this.reset();
      });
      this._currentState = Gi(n2, r2);
    }
    revealNext(e2) {
      if (!this._currentModel) return Promise.resolve();
      this._currentIdx += 1, this._currentIdx %= this._currentModel.references.length;
      let t2 = this._currentModel.references[this._currentIdx];
      return this._showMessage(), this._ignoreEditorChange = true, this._editorService.openCodeEditor({
        resource: t2.uri,
        options: {
          selection: P.collapseToStart(t2.range),
          selectionRevealType: 3
        }
      }, e2).finally(() => {
        this._ignoreEditorChange = false;
      });
    }
    _showMessage() {
      var _a3;
      (_a3 = this._currentMessage) == null ? void 0 : _a3.dispose();
      let e2 = this._keybindingService.lookupKeybinding(`editor.gotoNextSymbolFromResult`), t2 = e2 ? U(`location.kb`, `Symbol {0} of {1}, {2} for next`, this._currentIdx + 1, this._currentModel.references.length, e2.getLabel()) : U(`location`, `Symbol {0} of {1}`, this._currentIdx + 1, this._currentModel.references.length);
      this._currentMessage = this._notificationService.status(t2);
    }
  };
  _v = pv([
    mv(0, O),
    mv(1, pt),
    mv(2, Ft),
    mv(3, Ct)
  ], _v), fl(gv, _v, 1), Y(new class extends Ae {
    constructor() {
      super({
        id: `editor.gotoNextSymbolFromResult`,
        precondition: hv,
        kbOpts: {
          weight: 100,
          primary: 70
        }
      });
    }
    runEditorCommand(e2, t2) {
      return e2.get(gv).revealNext(t2);
    }
  }()), gn.registerCommandAndKeybindingRule({
    id: `editor.gotoNextSymbolFromResult.cancel`,
    weight: 100,
    when: hv,
    primary: 9,
    handler(e2) {
      e2.get(gv).reset();
    }
  });
  let vv = class {
    constructor(e2) {
      this._listener = /* @__PURE__ */ new Map(), this._disposables = new C(), this._onDidChange = new E(), this.onDidChange = this._onDidChange.event, this._disposables.add(e2.onCodeEditorRemove(this._onDidRemoveEditor, this)), this._disposables.add(e2.onCodeEditorAdd(this._onDidAddEditor, this)), e2.listCodeEditors().forEach(this._onDidAddEditor, this);
    }
    dispose() {
      this._disposables.dispose(), this._onDidChange.dispose(), Ra(this._listener.values());
    }
    _onDidAddEditor(e2) {
      this._listener.set(e2, Gi(e2.onDidChangeCursorPosition((t2) => this._onDidChange.fire({
        editor: e2
      })), e2.onDidChangeModelContent((t2) => this._onDidChange.fire({
        editor: e2
      }))));
    }
    _onDidRemoveEditor(e2) {
      var _a3;
      (_a3 = this._listener.get(e2)) == null ? void 0 : _a3.dispose(), this._listener.delete(e2);
    }
  };
  vv = pv([
    mv(0, pt)
  ], vv);
  function yv(e2, t2) {
    return t2.uri.scheme === e2.uri.scheme ? true : !Ec(t2.uri, _r.walkThroughSnippet, _r.vscodeChatCodeBlock, _r.vscodeChatCodeCompareBlock);
  }
  async function bv(e2, t2, n2, r2, i2) {
    let a2 = n2.ordered(e2, r2), o2 = a2.map((n3) => Promise.resolve(i2(n3, e2, t2)).then(void 0, (e3) => {
      Uc(e3);
    })), s2 = await Promise.all(o2);
    return Wi(s2.flat()).filter((t3) => yv(e2, t3));
  }
  function xv(e2, t2, n2, r2, i2) {
    return bv(t2, n2, e2, r2, (e3, t3, n3) => e3.provideDefinition(t3, n3, i2));
  }
  function Sv(e2, t2, n2, r2, i2) {
    return bv(t2, n2, e2, r2, (e3, t3, n3) => e3.provideDeclaration(t3, n3, i2));
  }
  function Cv(e2, t2, n2, r2, i2) {
    return bv(t2, n2, e2, r2, (e3, t3, n3) => e3.provideImplementation(t3, n3, i2));
  }
  function wv(e2, t2, n2, r2, i2) {
    return bv(t2, n2, e2, r2, (e3, t3, n3) => e3.provideTypeDefinition(t3, n3, i2));
  }
  function Tv(e2, t2, n2, r2, i2, a2) {
    return bv(t2, n2, e2, i2, async (e3, t3, n3) => {
      var _a3, _b3;
      let i3 = (_a3 = await e3.provideReferences(t3, n3, {
        includeDeclaration: true
      }, a2)) == null ? void 0 : _a3.filter((e4) => yv(t3, e4));
      if (!r2 || !i3 || i3.length !== 2) return i3;
      let o2 = (_b3 = await e3.provideReferences(t3, n3, {
        includeDeclaration: false
      }, a2)) == null ? void 0 : _b3.filter((e4) => yv(t3, e4));
      return o2 && o2.length === 1 ? o2 : i3;
    });
  }
  async function Ev(e2) {
    let t2 = await e2(), n2 = new H_(t2, ``), r2 = n2.references.map((e3) => e3.link);
    return n2.dispose(), r2;
  }
  ul(`_executeDefinitionProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = xv(r2.definitionProvider, t2, n2, false, m.None);
    return Ev(() => i2);
  }), ul(`_executeDefinitionProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = xv(r2.definitionProvider, t2, n2, true, m.None);
    return Ev(() => i2);
  }), ul(`_executeTypeDefinitionProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = wv(r2.typeDefinitionProvider, t2, n2, false, m.None);
    return Ev(() => i2);
  }), ul(`_executeTypeDefinitionProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = wv(r2.typeDefinitionProvider, t2, n2, true, m.None);
    return Ev(() => i2);
  }), ul(`_executeDeclarationProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Sv(r2.declarationProvider, t2, n2, false, m.None);
    return Ev(() => i2);
  }), ul(`_executeDeclarationProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Sv(r2.declarationProvider, t2, n2, true, m.None);
    return Ev(() => i2);
  }), ul(`_executeReferenceProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Tv(r2.referenceProvider, t2, n2, false, false, m.None);
    return Ev(() => i2);
  }), ul(`_executeReferenceProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Tv(r2.referenceProvider, t2, n2, false, true, m.None);
    return Ev(() => i2);
  }), ul(`_executeImplementationProvider`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Cv(r2.implementationProvider, t2, n2, false, m.None);
    return Ev(() => i2);
  }), ul(`_executeImplementationProvider_recursive`, (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = Cv(r2.implementationProvider, t2, n2, true, m.None);
    return Ev(() => i2);
  }), Nn.appendMenuItem(j.EditorContext, {
    submenu: j.EditorContextPeek,
    title: U(`peek.submenu`, `Peek`),
    group: `navigation`,
    order: 100
  });
  var Dv = class e2 {
    static is(t2) {
      return !t2 || typeof t2 != `object` ? false : !!(t2 instanceof e2 || N.isIPosition(t2.position) && t2.model);
    }
    constructor(e3, t2) {
      this.model = e3, this.position = t2;
    }
  }, Ov = (_B = class extends ke {
    static all() {
      return _B._allSymbolNavigationCommands.values();
    }
    static _patchConfig(e2) {
      let t2 = {
        ...e2,
        f1: true
      };
      if (t2.menu) for (let n2 of ln.wrap(t2.menu)) (n2.id === j.EditorContext || n2.id === j.EditorContextPeek) && (n2.when = b.and(e2.precondition, n2.when));
      return t2;
    }
    constructor(t2, n2) {
      super(_B._patchConfig(n2)), this.configuration = t2, _B._allSymbolNavigationCommands.set(n2.id, this);
    }
    runEditorCommand(t2, n2, r2, i2) {
      if (!n2.hasModel()) return Promise.resolve(void 0);
      let a2 = t2.get(Ft), o2 = t2.get(pt), s2 = t2.get(yt), c2 = t2.get(gv), l2 = t2.get(A), u2 = t2.get(k), d2 = n2.getModel(), f2 = n2.getPosition(), p2 = Dv.is(r2) ? r2 : new Dv(d2, f2), m2 = new Fe(n2, 5), h2 = nl(this._getLocationModel(l2, p2.model, p2.position, m2.token), m2.token).then(async (t3) => {
        var _a3;
        if (!t3 || m2.token.isCancellationRequested) return;
        Ci(t3.ariaMessage);
        let a3;
        if (t3.referenceAt(d2.uri, f2)) {
          let t4 = this._getAlternativeCommand(n2);
          !_B._activeAlternativeCommands.has(t4) && _B._allSymbolNavigationCommands.has(t4) && (a3 = _B._allSymbolNavigationCommands.get(t4));
        }
        let s3 = t3.references.length;
        if (s3 === 0) {
          if (!this.configuration.muteMessage) {
            let e2 = d2.getWordAtPosition(f2);
            (_a3 = nf.get(n2)) == null ? void 0 : _a3.showMessage(this._getNoResultFoundMessage(e2), f2);
          }
        } else if (s3 === 1 && a3) _B._activeAlternativeCommands.add(this.desc.id), u2.invokeFunction((t4) => a3.runEditorCommand(t4, n2, r2, i2).finally(() => {
          _B._activeAlternativeCommands.delete(this.desc.id);
        }));
        else return this._onResult(o2, c2, n2, t3, i2);
      }, (e2) => {
        a2.error(e2);
      }).finally(() => {
        m2.dispose();
      });
      return s2.showWhile(h2, 250), h2;
    }
    async _onResult(e2, t2, n2, r2, i2) {
      let a2 = this._getGoToPreference(n2);
      if (!(n2 instanceof c_) && (this.configuration.openInPeek || a2 === `peek` && r2.references.length > 1)) this._openInPeek(n2, r2, i2);
      else {
        let o2 = r2.firstReference(), s2 = r2.references.length > 1 && a2 === `gotoAndPeek`, c2 = await this._openReference(n2, e2, o2, this.configuration.openToSide, !s2);
        s2 && c2 ? this._openInPeek(c2, r2, i2) : r2.dispose(), a2 === `goto` && t2.put(o2);
      }
    }
    async _openReference(e2, t2, n2, r2, i2) {
      let a2;
      if (Ws(n2) && (a2 = n2.targetSelectionRange), a2 || (a2 = n2.range), !a2) return;
      let o2 = await t2.openCodeEditor({
        resource: n2.uri,
        options: {
          selection: P.collapseToStart(a2),
          selectionRevealType: 3,
          selectionSource: `code.jump`
        }
      }, e2, r2);
      if (o2) {
        if (i2) {
          let e3 = o2.getModel(), t3 = o2.createDecorationsCollection([
            {
              range: a2,
              options: {
                description: `symbol-navigate-action-highlight`,
                className: `symbolHighlight`
              }
            }
          ]);
          setTimeout(() => {
            o2.getModel() === e3 && t3.clear();
          }, 350);
        }
        return o2;
      }
    }
    _openInPeek(e2, t2, n2) {
      let r2 = dv.get(e2);
      r2 && e2.hasModel() ? r2.toggleWidget(n2 ?? e2.getSelection(), sa((e3) => Promise.resolve(t2)), this.configuration.openInPeek) : t2.dispose();
    }
  }, _B._allSymbolNavigationCommands = /* @__PURE__ */ new Map(), _B._activeAlternativeCommands = /* @__PURE__ */ new Set(), _B), kv = class extends Ov {
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await xv(e2.definitionProvider, t2, n2, false, r2), U(`def.title`, `Definitions`));
    }
    _getNoResultFoundMessage(e2) {
      return e2 && e2.word ? U(`noResultWord`, `No definition found for '{0}'`, e2.word) : U(`generic.noResults`, `No definition found`);
    }
    _getAlternativeCommand(e2) {
      return e2.getOption(58).alternativeDefinitionCommand;
    }
    _getGoToPreference(e2) {
      return e2.getOption(58).multipleDefinitions;
    }
  };
  K((_C2 = class extends kv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: false,
        muteMessage: false
      }, {
        id: _C2.id,
        title: {
          ...W(`actions.goToDecl.label`, `Go to Definition`),
          mnemonicTitle: U({
            key: `miGotoDefinition`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Go to &&Definition`)
        },
        precondition: T.hasDefinitionProvider,
        keybinding: [
          {
            when: T.editorTextFocus,
            primary: 70,
            weight: 100
          },
          {
            when: b.and(T.editorTextFocus, on),
            primary: 2118,
            weight: 100
          }
        ],
        menu: [
          {
            id: j.EditorContext,
            group: `navigation`,
            order: 1.1
          },
          {
            id: j.MenubarGoMenu,
            precondition: null,
            group: `4_symbol_nav`,
            order: 2
          }
        ]
      }), y.registerCommandAlias(`editor.action.goToDeclaration`, _C2.id);
    }
  }, _C2.id = `editor.action.revealDefinition`, _C2)), K((_D2 = class extends kv {
    constructor() {
      super({
        openToSide: true,
        openInPeek: false,
        muteMessage: false
      }, {
        id: _D2.id,
        title: W(`actions.goToDeclToSide.label`, `Open Definition to the Side`),
        precondition: b.and(T.hasDefinitionProvider, T.isInEmbeddedEditor.toNegated()),
        keybinding: [
          {
            when: T.editorTextFocus,
            primary: un(2089, 70),
            weight: 100
          },
          {
            when: b.and(T.editorTextFocus, on),
            primary: un(2089, 2118),
            weight: 100
          }
        ]
      }), y.registerCommandAlias(`editor.action.openDeclarationToTheSide`, _D2.id);
    }
  }, _D2.id = `editor.action.revealDefinitionAside`, _D2)), K((_E2 = class extends kv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: true,
        muteMessage: false
      }, {
        id: _E2.id,
        title: W(`actions.previewDecl.label`, `Peek Definition`),
        precondition: b.and(T.hasDefinitionProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        keybinding: {
          when: T.editorTextFocus,
          primary: 582,
          linux: {
            primary: 3140
          },
          weight: 100
        },
        menu: {
          id: j.EditorContextPeek,
          group: `peek`,
          order: 2
        }
      }), y.registerCommandAlias(`editor.action.previewDeclaration`, _E2.id);
    }
  }, _E2.id = `editor.action.peekDefinition`, _E2));
  var Av = class extends Ov {
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await Sv(e2.declarationProvider, t2, n2, false, r2), U(`decl.title`, `Declarations`));
    }
    _getNoResultFoundMessage(e2) {
      return e2 && e2.word ? U(`decl.noResultWord`, `No declaration found for '{0}'`, e2.word) : U(`decl.generic.noResults`, `No declaration found`);
    }
    _getAlternativeCommand(e2) {
      return e2.getOption(58).alternativeDeclarationCommand;
    }
    _getGoToPreference(e2) {
      return e2.getOption(58).multipleDeclarations;
    }
  };
  K((_F2 = class extends Av {
    constructor() {
      super({
        openToSide: false,
        openInPeek: false,
        muteMessage: false
      }, {
        id: _F2.id,
        title: {
          ...W(`actions.goToDeclaration.label`, `Go to Declaration`),
          mnemonicTitle: U({
            key: `miGotoDeclaration`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Go to &&Declaration`)
        },
        precondition: b.and(T.hasDeclarationProvider, T.isInEmbeddedEditor.toNegated()),
        menu: [
          {
            id: j.EditorContext,
            group: `navigation`,
            order: 1.3
          },
          {
            id: j.MenubarGoMenu,
            precondition: null,
            group: `4_symbol_nav`,
            order: 3
          }
        ]
      });
    }
    _getNoResultFoundMessage(e2) {
      return e2 && e2.word ? U(`decl.noResultWord`, `No declaration found for '{0}'`, e2.word) : U(`decl.generic.noResults`, `No declaration found`);
    }
  }, _F2.id = `editor.action.revealDeclaration`, _F2)), K(class extends Av {
    constructor() {
      super({
        openToSide: false,
        openInPeek: true,
        muteMessage: false
      }, {
        id: `editor.action.peekDeclaration`,
        title: W(`actions.peekDecl.label`, `Peek Declaration`),
        precondition: b.and(T.hasDeclarationProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        menu: {
          id: j.EditorContextPeek,
          group: `peek`,
          order: 3
        }
      });
    }
  });
  var jv = class extends Ov {
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await wv(e2.typeDefinitionProvider, t2, n2, false, r2), U(`typedef.title`, `Type Definitions`));
    }
    _getNoResultFoundMessage(e2) {
      return e2 && e2.word ? U(`goToTypeDefinition.noResultWord`, `No type definition found for '{0}'`, e2.word) : U(`goToTypeDefinition.generic.noResults`, `No type definition found`);
    }
    _getAlternativeCommand(e2) {
      return e2.getOption(58).alternativeTypeDefinitionCommand;
    }
    _getGoToPreference(e2) {
      return e2.getOption(58).multipleTypeDefinitions;
    }
  };
  K((_G = class extends jv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: false,
        muteMessage: false
      }, {
        id: _G.ID,
        title: {
          ...W(`actions.goToTypeDefinition.label`, `Go to Type Definition`),
          mnemonicTitle: U({
            key: `miGotoTypeDefinition`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Go to &&Type Definition`)
        },
        precondition: T.hasTypeDefinitionProvider,
        keybinding: {
          when: T.editorTextFocus,
          primary: 0,
          weight: 100
        },
        menu: [
          {
            id: j.EditorContext,
            group: `navigation`,
            order: 1.4
          },
          {
            id: j.MenubarGoMenu,
            precondition: null,
            group: `4_symbol_nav`,
            order: 3
          }
        ]
      });
    }
  }, _G.ID = `editor.action.goToTypeDefinition`, _G)), K((_H = class extends jv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: true,
        muteMessage: false
      }, {
        id: _H.ID,
        title: W(`actions.peekTypeDefinition.label`, `Peek Type Definition`),
        precondition: b.and(T.hasTypeDefinitionProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        menu: {
          id: j.EditorContextPeek,
          group: `peek`,
          order: 4
        }
      });
    }
  }, _H.ID = `editor.action.peekTypeDefinition`, _H));
  var Mv = class extends Ov {
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await Cv(e2.implementationProvider, t2, n2, false, r2), U(`impl.title`, `Implementations`));
    }
    _getNoResultFoundMessage(e2) {
      return e2 && e2.word ? U(`goToImplementation.noResultWord`, `No implementation found for '{0}'`, e2.word) : U(`goToImplementation.generic.noResults`, `No implementation found`);
    }
    _getAlternativeCommand(e2) {
      return e2.getOption(58).alternativeImplementationCommand;
    }
    _getGoToPreference(e2) {
      return e2.getOption(58).multipleImplementations;
    }
  };
  K((_I2 = class extends Mv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: false,
        muteMessage: false
      }, {
        id: _I2.ID,
        title: {
          ...W(`actions.goToImplementation.label`, `Go to Implementations`),
          mnemonicTitle: U({
            key: `miGotoImplementation`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Go to &&Implementations`)
        },
        precondition: T.hasImplementationProvider,
        keybinding: {
          when: T.editorTextFocus,
          primary: 2118,
          weight: 100
        },
        menu: [
          {
            id: j.EditorContext,
            group: `navigation`,
            order: 1.45
          },
          {
            id: j.MenubarGoMenu,
            precondition: null,
            group: `4_symbol_nav`,
            order: 4
          }
        ]
      });
    }
  }, _I2.ID = `editor.action.goToImplementation`, _I2)), K((_J = class extends Mv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: true,
        muteMessage: false
      }, {
        id: _J.ID,
        title: W(`actions.peekImplementation.label`, `Peek Implementations`),
        precondition: b.and(T.hasImplementationProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        keybinding: {
          when: T.editorTextFocus,
          primary: 3142,
          weight: 100
        },
        menu: {
          id: j.EditorContextPeek,
          group: `peek`,
          order: 5
        }
      });
    }
  }, _J.ID = `editor.action.peekImplementation`, _J));
  var Nv = class extends Ov {
    _getNoResultFoundMessage(e2) {
      return e2 ? U(`references.no`, `No references found for '{0}'`, e2.word) : U(`references.noGeneric`, `No references found`);
    }
    _getAlternativeCommand(e2) {
      return e2.getOption(58).alternativeReferenceCommand;
    }
    _getGoToPreference(e2) {
      return e2.getOption(58).multipleReferences;
    }
  };
  K(class extends Nv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: false,
        muteMessage: false
      }, {
        id: `editor.action.goToReferences`,
        title: {
          ...W(`goToReferences.label`, `Go to References`),
          mnemonicTitle: U({
            key: `miGotoReference`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Go to &&References`)
        },
        precondition: b.and(T.hasReferenceProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        keybinding: {
          when: T.editorTextFocus,
          primary: 1094,
          weight: 100
        },
        menu: [
          {
            id: j.EditorContext,
            group: `navigation`,
            order: 1.45
          },
          {
            id: j.MenubarGoMenu,
            precondition: null,
            group: `4_symbol_nav`,
            order: 5
          }
        ]
      });
    }
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await Tv(e2.referenceProvider, t2, n2, true, false, r2), U(`ref.title`, `References`));
    }
  }), K(class extends Nv {
    constructor() {
      super({
        openToSide: false,
        openInPeek: true,
        muteMessage: false
      }, {
        id: `editor.action.referenceSearch.trigger`,
        title: W(`references.action.label`, `Peek References`),
        precondition: b.and(T.hasReferenceProvider, y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated()),
        menu: {
          id: j.EditorContextPeek,
          group: `peek`,
          order: 6
        }
      });
    }
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(await Tv(e2.referenceProvider, t2, n2, false, false, r2), U(`ref.title`, `References`));
    }
  });
  var Pv = class extends Ov {
    constructor(e2, t2, n2) {
      super(e2, {
        id: `editor.action.goToLocation`,
        title: W(`label.generic`, `Go to Any Symbol`),
        precondition: b.and(y_.notInPeekEditor, T.isInEmbeddedEditor.toNegated())
      }), this._references = t2, this._gotoMultipleBehaviour = n2;
    }
    async _getLocationModel(e2, t2, n2, r2) {
      return new H_(this._references, U(`generic.title`, `Locations`));
    }
    _getNoResultFoundMessage(e2) {
      return e2 && U(`generic.noResult`, `No results for '{0}'`, e2.word) || ``;
    }
    _getGoToPreference(e2) {
      return this._gotoMultipleBehaviour ?? e2.getOption(58).multipleReferences;
    }
    _getAlternativeCommand() {
      return ``;
    }
  };
  y.registerCommand({
    id: `editor.action.goToLocations`,
    metadata: {
      description: `Go to locations from a position in a file`,
      args: [
        {
          name: `uri`,
          description: `The text document in which to start`,
          constraint: R
        },
        {
          name: `position`,
          description: `The position at which to start`,
          constraint: N.isIPosition
        },
        {
          name: `locations`,
          description: `An array of locations.`,
          constraint: Array
        },
        {
          name: `multiple`,
          description: "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto`"
        },
        {
          name: `noResultsMessage`,
          description: `Human readable message that shows when locations is empty.`
        }
      ]
    },
    handler: async (e2, t2, n2, r2, i2, a2, o2) => {
      V(R.isUri(t2)), V(N.isIPosition(n2)), V(Array.isArray(r2)), V(i2 === void 0 || typeof i2 == `string`), V(o2 === void 0 || typeof o2 == `boolean`);
      let s2 = e2.get(pt), c2 = await s2.openCodeEditor({
        resource: t2
      }, s2.getFocusedCodeEditor());
      if (Cs(c2)) return c2.setPosition(n2), c2.revealPositionInCenterIfOutsideViewport(n2, 0), c2.invokeWithinContext((e3) => {
        let t3 = new class extends Pv {
          _getNoResultFoundMessage(e4) {
            return a2 || super._getNoResultFoundMessage(e4);
          }
        }({
          muteMessage: !a2,
          openInPeek: !!o2,
          openToSide: false
        }, r2, i2);
        e3.get(k).invokeFunction(t3.run.bind(t3), c2);
      });
    }
  }), y.registerCommand({
    id: `editor.action.peekLocations`,
    metadata: {
      description: `Peek locations from a position in a file`,
      args: [
        {
          name: `uri`,
          description: `The text document in which to start`,
          constraint: R
        },
        {
          name: `position`,
          description: `The position at which to start`,
          constraint: N.isIPosition
        },
        {
          name: `locations`,
          description: `An array of locations.`,
          constraint: Array
        },
        {
          name: `multiple`,
          description: "Define what to do when having multiple results, either `peek`, `gotoAndPeek`, or `goto`"
        }
      ]
    },
    handler: async (e2, t2, n2, r2, i2) => {
      e2.get(mt).executeCommand(`editor.action.goToLocations`, t2, n2, r2, i2, void 0, true);
    }
  }), y.registerCommand({
    id: `editor.action.findReferences`,
    handler: (e2, t2, n2) => {
      V(R.isUri(t2)), V(N.isIPosition(n2));
      let r2 = e2.get(A), i2 = e2.get(pt);
      return i2.openCodeEditor({
        resource: t2
      }, i2.getFocusedCodeEditor()).then((e3) => {
        if (!Cs(e3) || !e3.hasModel()) return;
        let t3 = dv.get(e3);
        if (!t3) return;
        let i3 = sa((t4) => Tv(r2.referenceProvider, e3.getModel(), N.lift(n2), false, false, t4).then((e4) => new H_(e4, U(`ref.title`, `References`)))), a2 = new P(n2.lineNumber, n2.column, n2.lineNumber, n2.column);
        return Promise.resolve(t3.toggleWidget(a2, i3, false));
      });
    }
  }), y.registerCommandAlias(`editor.action.showReferences`, `editor.action.peekLocations`);
  async function Fv(e2, t2, n2, r2) {
    let i2 = e2.get(Ut), o2 = e2.get(ht), s2 = e2.get(mt), c2 = e2.get(k), l2 = e2.get(Ft);
    if (await r2.item.resolve(m.None), !r2.part.location) return;
    let u2 = r2.part.location, d2 = [], f2 = new Set(Nn.getMenuItems(j.EditorContext).map((e3) => zs(e3) ? e3.command.id : sd()));
    for (let e3 of Ov.all()) f2.has(e3.desc.id) && d2.push(new a(e3.desc.id, Mn.label(e3.desc, {
      renderShortTitle: true
    }), void 0, true, async () => {
      let n3 = await i2.createModelReference(u2.uri);
      try {
        let i3 = new Dv(n3.object.textEditorModel, P.getStartPosition(u2.range)), a2 = r2.item.anchor.range;
        await c2.invokeFunction(e3.runEditorCommand.bind(e3), t2, i3, a2);
      } finally {
        n3.dispose();
      }
    }));
    if (r2.part.command) {
      let { command: e3 } = r2.part;
      d2.push(new Cr()), d2.push(new a(e3.id, e3.title, void 0, true, async () => {
        try {
          await s2.executeCommand(e3.id, ...e3.arguments ?? []);
        } catch (e4) {
          l2.notify({
            severity: Tr.Error,
            source: r2.item.provider.displayName,
            message: e4
          });
        }
      }));
    }
    let p2 = t2.getOption(128);
    o2.showContextMenu({
      domForShadowRoot: p2 ? t2.getDomNode() ?? void 0 : void 0,
      getAnchor: () => {
        let e3 = Vo(n2);
        return {
          x: e3.left,
          y: e3.top + e3.height + 8
        };
      },
      getActions: () => d2,
      onHide: () => {
        t2.focus();
      },
      autoSelectFirstItem: true
    });
  }
  async function Iv(e2, t2, n2, r2) {
    let i2 = e2.get(Ut), a2 = await i2.createModelReference(r2.uri);
    await n2.invokeWithinContext(async (e3) => {
      let i3 = t2.hasSideBySideModifier, o2 = e3.get(O), s2 = y_.inPeekEditor.getValue(o2), c2 = !i3 && n2.getOption(89) && !s2, l2 = new kv({
        openToSide: i3,
        openInPeek: c2,
        muteMessage: true
      }, {
        title: {
          value: ``,
          original: ``
        },
        id: ``,
        precondition: void 0
      });
      return l2.run(e3, new Dv(a2.object.textEditorModel, P.getStartPosition(r2.range)), P.lift(r2.range));
    }), a2.dispose();
  }
  var Lv = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Rv = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, zv, Bv = class e2 {
    constructor() {
      this._entries = new _n(50);
    }
    get(t2) {
      let n2 = e2._key(t2);
      return this._entries.get(n2);
    }
    set(t2, n2) {
      let r2 = e2._key(t2);
      this._entries.set(r2, n2);
    }
    static _key(e3) {
      return `${e3.uri.toString()}/${e3.getVersionId()}`;
    }
  };
  const Vv = ca(`IInlayHintsCache`);
  fl(Vv, Bv, 1);
  var Hv = class {
    constructor(e2, t2) {
      this.item = e2, this.index = t2;
    }
    get part() {
      let e2 = this.item.hint.label;
      return typeof e2 == `string` ? {
        label: e2
      } : e2[this.index];
    }
  }, Uv = class {
    constructor(e2, t2) {
      this.part = e2, this.hasTriggerModifier = t2;
    }
  };
  let Wv = (_K = class {
    static get(e2) {
      return e2.getContribution(zv.ID) ?? void 0;
    }
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      this._editor = e2, this._languageFeaturesService = t2, this._inlayHintsCache = r2, this._commandService = i2, this._notificationService = a2, this._instaService = o2, this._disposables = new C(), this._sessionDisposables = new C(), this._decorationsMetadata = /* @__PURE__ */ new Map(), this._ruleFactory = new Ee(this._editor), this._activeRenderMode = 0, this._debounceInfo = n2.for(t2.inlayHintsProvider, `InlayHint`, {
        min: 25
      }), this._disposables.add(t2.inlayHintsProvider.onDidChange(() => this._update())), this._disposables.add(e2.onDidChangeModel(() => this._update())), this._disposables.add(e2.onDidChangeModelLanguage(() => this._update())), this._disposables.add(e2.onDidChangeConfiguration((e3) => {
        e3.hasChanged(142) && this._update();
      })), this._update();
    }
    dispose() {
      this._sessionDisposables.dispose(), this._removeAllDecorations(), this._disposables.dispose();
    }
    _update() {
      this._sessionDisposables.clear(), this._removeAllDecorations();
      let e2 = this._editor.getOption(142);
      if (e2.enabled === `off`) return;
      let t2 = this._editor.getModel();
      if (!t2 || !this._languageFeaturesService.inlayHintsProvider.has(t2)) return;
      if (e2.enabled === `on`) this._activeRenderMode = 0;
      else {
        let t3, n3;
        e2.enabled === `onUnlessPressed` ? (t3 = 0, n3 = 1) : (t3 = 1, n3 = 0), this._activeRenderMode = t3, this._sessionDisposables.add(In.getInstance().event((e3) => {
          if (!this._editor.hasModel()) return;
          let r3 = e3.altKey && e3.ctrlKey && !(e3.shiftKey || e3.metaKey) ? n3 : t3;
          if (r3 !== this._activeRenderMode) {
            this._activeRenderMode = r3;
            let e4 = this._editor.getModel(), t4 = this._copyInlayHintsWithCurrentAnchor(e4);
            this._updateHintsDecorators([
              e4.getFullModelRange()
            ], t4), a2.schedule(0);
          }
        }));
      }
      let n2 = this._inlayHintsCache.get(t2);
      n2 && this._updateHintsDecorators([
        t2.getFullModelRange()
      ], n2), this._sessionDisposables.add(Hl(() => {
        t2.isDisposed() || this._cacheHintsForFastRestore(t2);
      }));
      let r2, i2 = /* @__PURE__ */ new Set(), a2 = new hr(async () => {
        let e3 = Date.now();
        r2 == null ? void 0 : r2.dispose(true), r2 = new g();
        let n3 = t2.onWillDispose(() => r2 == null ? void 0 : r2.cancel());
        try {
          let n4 = r2.token, o2 = await i_.create(this._languageFeaturesService.inlayHintsProvider, t2, this._getHintsRanges(), n4);
          if (a2.delay = this._debounceInfo.update(t2, Date.now() - e3), n4.isCancellationRequested) {
            o2.dispose();
            return;
          }
          for (let e4 of o2.provider) typeof e4.onDidChangeInlayHints == `function` && !i2.has(e4) && (i2.add(e4), this._sessionDisposables.add(e4.onDidChangeInlayHints(() => {
            a2.isScheduled() || a2.schedule();
          })));
          this._sessionDisposables.add(o2), this._updateHintsDecorators(o2.ranges, o2.items), this._cacheHintsForFastRestore(t2);
        } catch (e4) {
          G(e4);
        } finally {
          r2.dispose(), n3.dispose();
        }
      }, this._debounceInfo.get(t2));
      this._sessionDisposables.add(a2), this._sessionDisposables.add(Hl(() => r2 == null ? void 0 : r2.dispose(true))), a2.schedule(0), this._sessionDisposables.add(this._editor.onDidScrollChange((e3) => {
        (e3.scrollTopChanged || !a2.isScheduled()) && a2.schedule();
      })), this._sessionDisposables.add(this._editor.onDidChangeModelContent((e3) => {
        r2 == null ? void 0 : r2.cancel();
        let t3 = Math.max(a2.delay, 1250);
        a2.schedule(t3);
      })), this._sessionDisposables.add(this._installDblClickGesture(() => a2.schedule(0))), this._sessionDisposables.add(this._installLinkGesture()), this._sessionDisposables.add(this._installContextMenu());
    }
    _installLinkGesture() {
      let e2 = new C(), t2 = e2.add(new t_(this._editor)), n2 = new C();
      return e2.add(n2), e2.add(t2.onMouseMoveOrRelevantKeyDown((e3) => {
        let [t3] = e3, r2 = this._getInlayHintLabelPart(t3), i2 = this._editor.getModel();
        if (!r2 || !i2) {
          n2.clear();
          return;
        }
        let a2 = new g();
        n2.add(Hl(() => a2.dispose(true))), r2.item.resolve(a2.token), this._activeInlayHintPart = r2.part.command || r2.part.location ? new Uv(r2, t3.hasTriggerModifier) : void 0;
        let o2 = i2.validatePosition(r2.item.hint.position).lineNumber, s2 = new P(o2, 1, o2, i2.getLineMaxColumn(o2)), c2 = this._getInlineHintsForRange(s2);
        this._updateHintsDecorators([
          s2
        ], c2), n2.add(Hl(() => {
          this._activeInlayHintPart = void 0, this._updateHintsDecorators([
            s2
          ], c2);
        }));
      })), e2.add(t2.onCancel(() => n2.clear())), e2.add(t2.onExecute(async (e3) => {
        let t3 = this._getInlayHintLabelPart(e3);
        if (t3) {
          let n3 = t3.part;
          n3.location ? this._instaService.invokeFunction(Iv, e3, this._editor, n3.location) : ae.is(n3.command) && await this._invokeCommand(n3.command, t3.item);
        }
      })), e2;
    }
    _getInlineHintsForRange(e2) {
      let t2 = /* @__PURE__ */ new Set();
      for (let n2 of this._decorationsMetadata.values()) e2.containsRange(n2.item.anchor.range) && t2.add(n2.item);
      return Array.from(t2);
    }
    _installDblClickGesture(e2) {
      return this._editor.onMouseUp(async (t2) => {
        if (t2.event.detail !== 2) return;
        let n2 = this._getInlayHintLabelPart(t2);
        if (n2 && (t2.event.preventDefault(), await n2.item.resolve(m.None), $s(n2.item.hint.textEdits))) {
          let t3 = n2.item.hint.textEdits.map((e3) => Oe.replace(P.lift(e3.range), e3.text));
          this._editor.executeEdits(`inlayHint.default`, t3), e2();
        }
      });
    }
    _installContextMenu() {
      return this._editor.onContextMenu(async (e2) => {
        if (!Fs(e2.event.target)) return;
        let t2 = this._getInlayHintLabelPart(e2);
        t2 && await this._instaService.invokeFunction(Fv, this._editor, e2.event.target, t2);
      });
    }
    _getInlayHintLabelPart(e2) {
      var _a3;
      if (e2.target.type !== 6) return;
      let t2 = (_a3 = e2.target.detail.injectedText) == null ? void 0 : _a3.options;
      if (t2 instanceof Fn && (t2 == null ? void 0 : t2.attachedData) instanceof Hv) return t2.attachedData;
    }
    async _invokeCommand(e2, t2) {
      try {
        await this._commandService.executeCommand(e2.id, ...e2.arguments ?? []);
      } catch (e3) {
        this._notificationService.notify({
          severity: Tr.Error,
          source: t2.provider.displayName,
          message: e3
        });
      }
    }
    _cacheHintsForFastRestore(e2) {
      let t2 = this._copyInlayHintsWithCurrentAnchor(e2);
      this._inlayHintsCache.set(e2, t2);
    }
    _copyInlayHintsWithCurrentAnchor(e2) {
      let t2 = /* @__PURE__ */ new Map();
      for (let [n2, r2] of this._decorationsMetadata) {
        if (t2.has(r2.item)) continue;
        let i2 = e2.getDecorationRange(n2);
        if (i2) {
          let e3 = new n_(i2, r2.item.anchor.direction), n3 = r2.item.with({
            anchor: e3
          });
          t2.set(r2.item, n3);
        }
      }
      return Array.from(t2.values());
    }
    _getHintsRanges() {
      let e2 = 30, t2 = this._editor.getModel(), n2 = this._editor.getVisibleRangesPlusViewportAboveBelow(), r2 = [];
      for (let i2 of n2.sort(P.compareRangesUsingStarts)) {
        let n3 = t2.validateRange(new P(i2.startLineNumber - e2, i2.startColumn, i2.endLineNumber + e2, i2.endColumn));
        r2.length === 0 || !P.areIntersectingOrTouching(r2[r2.length - 1], n3) ? r2.push(n3) : r2[r2.length - 1] = P.plusRange(r2[r2.length - 1], n3);
      }
      return r2;
    }
    _updateHintsDecorators(e2, t2) {
      var _a3, _b3;
      let n2 = [], r2 = (e3, t3, r3, i3, a3) => {
        let o3 = {
          content: r3,
          inlineClassNameAffectsLetterSpacing: true,
          inlineClassName: t3.className,
          cursorStops: i3,
          attachedData: a3
        };
        n2.push({
          item: e3,
          classNameRef: t3,
          decoration: {
            range: e3.anchor.range,
            options: {
              description: `InlayHint`,
              showIfCollapsed: e3.anchor.range.isEmpty(),
              collapseOnReplaceEdit: !e3.anchor.range.isEmpty(),
              stickiness: 0,
              [e3.anchor.direction]: this._activeRenderMode === 0 ? o3 : void 0
            }
          }
        });
      }, i2 = (e3, t3) => {
        let n3 = this._ruleFactory.createClassNameRef({
          width: `${a2 / 3 | 0}px`,
          display: `inline-block`
        });
        r2(e3, n3, `\u200A`, t3 ? Qt.Right : Qt.None);
      }, { fontSize: a2, fontFamily: o2, padding: s2, isUniform: c2 } = this._getLayoutInfo(), l2 = `--code-editorInlayHintsFontFamily`;
      this._editor.getContainerDomNode().style.setProperty(l2, o2);
      let u2 = {
        line: 0,
        totalLen: 0
      };
      for (let e3 of t2) {
        if (u2.line !== e3.anchor.range.startLineNumber && (u2 = {
          line: e3.anchor.range.startLineNumber,
          totalLen: 0
        }), u2.totalLen > zv._MAX_LABEL_LEN) continue;
        e3.hint.paddingLeft && i2(e3, false);
        let t3 = typeof e3.hint.label == `string` ? [
          {
            label: e3.hint.label
          }
        ] : e3.hint.label;
        for (let n3 = 0; n3 < t3.length; n3++) {
          let i3 = t3[n3], o3 = n3 === 0, d3 = n3 === t3.length - 1, f3 = {
            fontSize: `${a2}px`,
            fontFamily: `var(${l2}), ${De.fontFamily}`,
            verticalAlign: c2 ? `baseline` : `middle`,
            unicodeBidi: `isolate`
          };
          $s(e3.hint.textEdits) && (f3.cursor = `default`), this._fillInColors(f3, e3.hint), (i3.command || i3.location) && ((_a3 = this._activeInlayHintPart) == null ? void 0 : _a3.part.item) === e3 && this._activeInlayHintPart.part.index === n3 && (f3.textDecoration = `underline`, this._activeInlayHintPart.hasTriggerModifier && (f3.color = zl(Va), f3.cursor = `pointer`)), s2 && (o3 && d3 ? (f3.padding = `1px ${Math.max(1, a2 / 4) | 0}px`, f3.borderRadius = `${a2 / 4 | 0}px`) : o3 ? (f3.padding = `1px 0 1px ${Math.max(1, a2 / 4) | 0}px`, f3.borderRadius = `${a2 / 4 | 0}px 0 0 ${a2 / 4 | 0}px`) : d3 ? (f3.padding = `1px ${Math.max(1, a2 / 4) | 0}px 1px 0`, f3.borderRadius = `0 ${a2 / 4 | 0}px ${a2 / 4 | 0}px 0`) : f3.padding = `1px 0 1px 0`);
          let p2 = i3.label;
          u2.totalLen += p2.length;
          let m2 = false, h2 = u2.totalLen - zv._MAX_LABEL_LEN;
          if (h2 > 0 && (p2 = p2.slice(0, -h2) + `\u2026`, m2 = true), r2(e3, this._ruleFactory.createClassNameRef(f3), Gv(p2), d3 && !e3.hint.paddingRight ? Qt.Right : Qt.None, new Hv(e3, n3)), m2) break;
        }
        if (e3.hint.paddingRight && i2(e3, true), n2.length > zv._MAX_DECORATORS) break;
      }
      let d2 = [];
      for (let [t3, n3] of this._decorationsMetadata) {
        let r3 = (_b3 = this._editor.getModel()) == null ? void 0 : _b3.getDecorationRange(t3);
        r3 && e2.some((e3) => e3.containsRange(r3)) && (d2.push(t3), n3.classNameRef.dispose(), this._decorationsMetadata.delete(t3));
      }
      let f2 = Mr.capture(this._editor);
      this._editor.changeDecorations((e3) => {
        let t3 = e3.deltaDecorations(d2, n2.map((e4) => e4.decoration));
        for (let e4 = 0; e4 < t3.length; e4++) {
          let r3 = n2[e4];
          this._decorationsMetadata.set(t3[e4], r3);
        }
      }), f2.restore(this._editor);
    }
    _fillInColors(e2, t2) {
      t2.kind === $t.Parameter ? (e2.backgroundColor = zl(io), e2.color = zl(ao)) : t2.kind === $t.Type ? (e2.backgroundColor = zl(oo), e2.color = zl(so)) : (e2.backgroundColor = zl(no), e2.color = zl(ro));
    }
    _getLayoutInfo() {
      let e2 = this._editor.getOption(142), t2 = e2.padding, n2 = this._editor.getOption(52), r2 = this._editor.getOption(49), i2 = e2.fontSize;
      (!i2 || i2 < 5 || i2 > n2) && (i2 = n2);
      let a2 = e2.fontFamily || r2, o2 = !t2 && a2 === r2 && i2 === n2;
      return {
        fontSize: i2,
        fontFamily: a2,
        padding: t2,
        isUniform: o2
      };
    }
    _removeAllDecorations() {
      this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));
      for (let e2 of this._decorationsMetadata.values()) e2.classNameRef.dispose();
      this._decorationsMetadata.clear();
    }
  }, zv = _K, _K.ID = `editor.contrib.InlayHints`, _K._MAX_DECORATORS = 1500, _K._MAX_LABEL_LEN = 43, _K);
  Wv = zv = Lv([
    Rv(1, A),
    Rv(2, Et),
    Rv(3, Vv),
    Rv(4, mt),
    Rv(5, Ft),
    Rv(6, k)
  ], Wv);
  function Gv(e2) {
    let t2 = `\xA0`;
    return e2.replace(/[ \t]/g, t2);
  }
  y.registerCommand(`_executeInlayHintProvider`, async (e2, ...t2) => {
    let [n2, r2] = t2;
    V(R.isUri(n2)), V(P.isIRange(r2));
    let { inlayHintsProvider: i2 } = e2.get(A), a2 = await e2.get(Ut).createModelReference(n2);
    try {
      let e3 = await i_.create(i2, a2.object.textEditorModel, [
        P.lift(r2)
      ], m.None), t3 = e3.items.map((e4) => e4.hint);
      return setTimeout(() => e3.dispose(), 0), t3;
    } finally {
      a2.dispose();
    }
  });
  var Kv = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, qv = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Jv = class extends Th {
    constructor(e2, t2, n2, r2) {
      super(10, t2, e2.item.anchor.range, n2, r2, true), this.part = e2;
    }
  };
  let Yv = class extends Wg {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      super(e2, t2, n2, a2, s2, r2, i2, c2), this._resolverService = o2, this.hoverOrdinal = 6;
    }
    suggestHoverAnchor(e2) {
      var _a3;
      let t2 = Wv.get(this._editor);
      if (!t2 || e2.target.type !== 6) return null;
      let n2 = (_a3 = e2.target.detail.injectedText) == null ? void 0 : _a3.options;
      return n2 instanceof Fn && n2.attachedData instanceof Hv ? new Jv(n2.attachedData, this, e2.event.posx, e2.event.posy) : null;
    }
    computeSync() {
      return [];
    }
    computeAsync(e2, t2, n2) {
      return e2 instanceof Jv ? new l(async (t3) => {
        let { part: r2 } = e2;
        if (await r2.item.resolve(n2), n2.isCancellationRequested) return;
        let i2;
        typeof r2.item.hint.tooltip == `string` ? i2 = new Dn().appendText(r2.item.hint.tooltip) : r2.item.hint.tooltip && (i2 = r2.item.hint.tooltip), i2 && t3.emitOne(new Hg(this, e2.range, [
          i2
        ], false, 0)), $s(r2.item.hint.textEdits) && t3.emitOne(new Hg(this, e2.range, [
          new Dn().appendText(U(`hint.dbl`, `Double-click to insert`))
        ], false, 10001));
        let a2;
        if (typeof r2.part.tooltip == `string` ? a2 = new Dn().appendText(r2.part.tooltip) : r2.part.tooltip && (a2 = r2.part.tooltip), a2 && t3.emitOne(new Hg(this, e2.range, [
          a2
        ], false, 1)), r2.part.location || r2.part.command) {
          let n3, i3 = this._editor.getOption(78) === `altKey`, a3 = i3 ? qs ? U(`links.navigate.kb.meta.mac`, `cmd + click`) : U(`links.navigate.kb.meta`, `ctrl + click`) : qs ? U(`links.navigate.kb.alt.mac`, `option + click`) : U(`links.navigate.kb.alt`, `alt + click`);
          r2.part.location && r2.part.command ? n3 = new Dn().appendText(U(`hint.defAndCommand`, `Go to Definition ({0}), right click for more`, a3)) : r2.part.location ? n3 = new Dn().appendText(U(`hint.def`, `Go to Definition ({0})`, a3)) : r2.part.command && (n3 = new Dn(`[${U(`hint.cmd`, `Execute Command`)}](${a_(r2.part.command)} "${r2.part.command.title}") (${a3})`, {
            isTrusted: true
          })), n3 && t3.emitOne(new Hg(this, e2.range, [
            n3
          ], false, 1e4));
        }
        let o2 = await this._resolveInlayHintLabelPartHover(r2, n2);
        for await (let e3 of o2) t3.emitOne(e3);
      }) : l.EMPTY;
    }
    async _resolveInlayHintLabelPartHover(e2, t2) {
      if (!e2.part.location) return l.EMPTY;
      let { uri: n2, range: r2 } = e2.part.location, i2 = await this._resolverService.createModelReference(n2);
      try {
        let n3 = i2.object.textEditorModel;
        return this._languageFeaturesService.hoverProvider.has(n3) ? Pg(this._languageFeaturesService.hoverProvider, n3, new N(r2.startLineNumber, r2.startColumn), t2).filter((e3) => !Os(e3.hover.contents)).map((t3) => new Hg(this, e2.item.anchor.range, t3.hover.contents, false, 2 + t3.ordinal)) : l.EMPTY;
      } finally {
        i2.dispose();
      }
    }
  };
  Yv = Kv([
    qv(1, Dt),
    qv(2, It),
    qv(3, Ct),
    qv(4, St),
    qv(5, D),
    qv(6, Ut),
    qv(7, A),
    qv(8, mt)
  ], Yv);
  var Xv = class e2 extends S {
    constructor(t2, n2, r2, i2, a2, o2) {
      super();
      let s2 = n2.anchor, c2 = n2.hoverParts;
      this._renderedHoverParts = this._register(new Qv(t2, r2, c2, o2, a2));
      let { showAtPosition: l2, showAtSecondaryPosition: u2 } = e2.computeHoverPositions(t2, s2.range, c2);
      this.shouldAppearBeforeContent = c2.some((e3) => e3.isBeforeContent), this.showAtPosition = l2, this.showAtSecondaryPosition = u2, this.initialMousePosX = s2.initialMousePosX, this.initialMousePosY = s2.initialMousePosY, this.shouldFocus = i2.shouldFocus, this.source = i2.source;
    }
    get domNode() {
      return this._renderedHoverParts.domNode;
    }
    get domNodeHasChildren() {
      return this._renderedHoverParts.domNodeHasChildren;
    }
    get focusedHoverPartIndex() {
      return this._renderedHoverParts.focusedHoverPartIndex;
    }
    async updateHoverVerbosityLevel(e3, t2, n2) {
      this._renderedHoverParts.updateHoverVerbosityLevel(e3, t2, n2);
    }
    isColorPickerVisible() {
      return this._renderedHoverParts.isColorPickerVisible();
    }
    static computeHoverPositions(e3, t2, n2) {
      let r2 = 1;
      if (e3.hasModel()) {
        let n3 = e3._getViewModel(), i3 = n3.coordinatesConverter, a3 = i3.convertModelRangeToViewRange(t2), o3 = n3.getLineMinColumn(a3.startLineNumber), s3 = new N(a3.startLineNumber, o3);
        r2 = i3.convertViewPositionToModelPosition(s3).column;
      }
      let i2 = t2.startLineNumber, a2 = t2.startColumn, o2;
      for (let e4 of n2) {
        let t3 = e4.range, n3 = t3.startLineNumber === i2, s3 = t3.endLineNumber === i2, c3 = n3 && s3;
        if (c3) {
          let e5 = t3.startColumn, n4 = Math.min(a2, e5);
          a2 = Math.max(n4, r2);
        }
        e4.forceShowAtRange && (o2 = t3);
      }
      let s2, c2;
      if (o2) {
        let e4 = o2.getStartPosition();
        s2 = e4, c2 = e4;
      } else s2 = t2.getStartPosition(), c2 = new N(i2, a2);
      return {
        showAtPosition: s2,
        showAtSecondaryPosition: c2
      };
    }
  }, Zv = class {
    constructor(e2, t2) {
      this._statusBar = t2, e2.appendChild(this._statusBar.hoverElement);
    }
    get hoverElement() {
      return this._statusBar.hoverElement;
    }
    get actions() {
      return this._statusBar.actions;
    }
    dispose() {
      this._statusBar.dispose();
    }
  }, Qv = (_L = class extends S {
    constructor(e2, t2, n2, r2, i2) {
      super(), this._renderedParts = [], this._focusedHoverPartIndex = -1, this._context = i2, this._fragment = document.createDocumentFragment(), this._register(this._renderParts(t2, n2, i2, r2)), this._register(this._registerListenersOnRenderedParts()), this._register(this._createEditorDecorations(e2, n2)), this._updateMarkdownAndColorParticipantInfo(t2);
    }
    _createEditorDecorations(t2, n2) {
      if (n2.length === 0) return S.None;
      let r2 = n2[0].range;
      for (let e2 of n2) {
        let t3 = e2.range;
        r2 = P.plusRange(r2, t3);
      }
      let i2 = t2.createDecorationsCollection();
      return i2.set([
        {
          range: r2,
          options: _L._DECORATION_OPTIONS
        }
      ]), Hl(() => {
        i2.clear();
      });
    }
    _renderParts(e2, t2, n2, r2) {
      let i2 = new jg(r2), a2 = {
        fragment: this._fragment,
        statusBar: i2,
        ...n2
      }, o2 = new C();
      for (let n3 of e2) {
        let e3 = this._renderHoverPartsForParticipant(t2, n3, a2);
        o2.add(e3);
        for (let t3 of e3.renderedHoverParts) this._renderedParts.push({
          type: `hoverPart`,
          participant: n3,
          hoverPart: t3.hoverPart,
          hoverElement: t3.hoverElement
        });
      }
      let s2 = this._renderStatusBar(this._fragment, i2);
      return s2 && (o2.add(s2), this._renderedParts.push({
        type: `statusBar`,
        hoverElement: s2.hoverElement,
        actions: s2.actions
      })), Hl(() => {
        o2.dispose();
      });
    }
    _renderHoverPartsForParticipant(e2, t2, n2) {
      let r2 = e2.filter((e3) => e3.owner === t2), i2 = r2.length > 0;
      return i2 ? t2.renderHoverParts(n2, r2) : new Eh([]);
    }
    _renderStatusBar(e2, t2) {
      if (t2.hasContent) return new Zv(e2, t2);
    }
    _registerListenersOnRenderedParts() {
      let e2 = new C();
      return this._renderedParts.forEach((t2, n2) => {
        let r2 = t2.hoverElement;
        r2.tabIndex = 0, e2.add(z(r2, He.FOCUS_IN, (e3) => {
          e3.stopPropagation(), this._focusedHoverPartIndex = n2;
        })), e2.add(z(r2, He.FOCUS_OUT, (e3) => {
          e3.stopPropagation(), this._focusedHoverPartIndex = -1;
        }));
      }), e2;
    }
    _updateMarkdownAndColorParticipantInfo(e2) {
      let t2 = e2.find((e3) => e3 instanceof Wg && !(e3 instanceof Yv));
      t2 && (this._markdownHoverParticipant = t2), this._colorHoverParticipant = e2.find((e3) => e3 instanceof jh);
    }
    async updateHoverVerbosityLevel(e2, t2, n2) {
      if (!this._markdownHoverParticipant) return;
      let r2 = this._normalizedIndexToMarkdownHoverIndexRange(this._markdownHoverParticipant, t2);
      if (r2 === void 0) return;
      let i2 = await this._markdownHoverParticipant.updateMarkdownHoverVerbosityLevel(e2, r2, n2);
      i2 && (this._renderedParts[t2] = {
        type: `hoverPart`,
        participant: this._markdownHoverParticipant,
        hoverPart: i2.hoverPart,
        hoverElement: i2.hoverElement
      }, this._context.onContentsChanged());
    }
    isColorPickerVisible() {
      var _a3;
      return ((_a3 = this._colorHoverParticipant) == null ? void 0 : _a3.isColorPickerVisible()) ?? false;
    }
    _normalizedIndexToMarkdownHoverIndexRange(e2, t2) {
      let n2 = this._renderedParts[t2];
      if (!n2 || n2.type !== `hoverPart`) return;
      let r2 = n2.participant === e2;
      if (!r2) return;
      let i2 = this._renderedParts.findIndex((t3) => t3.type === `hoverPart` && t3.participant === e2);
      if (i2 === -1) throw new u();
      return t2 - i2;
    }
    get domNode() {
      return this._fragment;
    }
    get domNodeHasChildren() {
      return this._fragment.hasChildNodes();
    }
    get focusedHoverPartIndex() {
      return this._focusedHoverPartIndex;
    }
  }, _L._DECORATION_OPTIONS = M.register({
    description: `content-hover-highlight`,
    className: `hoverHighlight`
  }), _L), $v = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ey = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let ty = class extends S {
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._instantiationService = t2, this._keybindingService = n2, this._currentResult = null, this._onContentsChanged = this._register(new E()), this.onContentsChanged = this._onContentsChanged.event, this._contentHoverWidget = this._register(this._instantiationService.createInstance(Cg, this._editor)), this._participants = this._initializeHoverParticipants(), this._computer = new Tg(this._editor, this._participants), this._hoverOperation = this._register(new pg(this._editor, this._computer)), this._registerListeners();
    }
    _initializeHoverParticipants() {
      let e2 = [];
      for (let t2 of Dh.getAll()) {
        let n2 = this._instantiationService.createInstance(t2, this._editor);
        e2.push(n2);
      }
      return e2.sort((e3, t2) => e3.hoverOrdinal - t2.hoverOrdinal), this._register(this._contentHoverWidget.onDidResize(() => {
        this._participants.forEach((e3) => {
          var _a3;
          return (_a3 = e3.handleResize) == null ? void 0 : _a3.call(e3);
        });
      })), e2;
    }
    _registerListeners() {
      this._register(this._hoverOperation.onResult((e3) => {
        if (!this._computer.anchor) return;
        let t2 = e3.hasLoadingMessage ? this._addLoadingMessage(e3.value) : e3.value;
        this._withResult(new Eg(this._computer.anchor, t2, e3.isComplete));
      }));
      let e2 = this._contentHoverWidget.getDomNode();
      this._register(Si(e2, `keydown`, (e3) => {
        e3.equals(9) && this.hide();
      })), this._register(Si(e2, `mouseleave`, (e3) => {
        this._onMouseLeave(e3);
      })), this._register($r.onDidChange(() => {
        this._contentHoverWidget.position && this._currentResult && this._setCurrentResult(this._currentResult);
      }));
    }
    _startShowingOrUpdateHover(e2, t2, n2, r2, i2) {
      let a2 = this._contentHoverWidget.position && this._currentResult;
      if (!a2) return e2 ? (this._startHoverOperationIfNecessary(e2, t2, n2, r2, false), true) : false;
      let o2 = this._editor.getOption(60).sticky, s2 = i2 && this._contentHoverWidget.isMouseGettingCloser(i2.event.posx, i2.event.posy), c2 = o2 && s2;
      if (c2) return e2 && this._startHoverOperationIfNecessary(e2, t2, n2, r2, true), true;
      if (!e2) return this._setCurrentResult(null), false;
      let l2 = this._currentResult.anchor.equals(e2);
      if (l2) return true;
      let u2 = e2.canAdoptVisibleHover(this._currentResult.anchor, this._contentHoverWidget.position);
      return u2 ? (this._setCurrentResult(this._currentResult.filter(e2)), this._startHoverOperationIfNecessary(e2, t2, n2, r2, false), true) : (this._setCurrentResult(null), this._startHoverOperationIfNecessary(e2, t2, n2, r2, false), true);
    }
    _startHoverOperationIfNecessary(e2, t2, n2, r2, i2) {
      let a2 = this._computer.anchor && this._computer.anchor.equals(e2);
      a2 || (this._hoverOperation.cancel(), this._computer.anchor = e2, this._computer.shouldFocus = r2, this._computer.source = n2, this._computer.insistOnKeepingHoverVisible = i2, this._hoverOperation.start(t2));
    }
    _setCurrentResult(e2) {
      let t2 = e2, n2 = this._currentResult === t2;
      if (n2) return;
      let r2 = t2 && t2.hoverParts.length === 0;
      r2 && (t2 = null), this._currentResult = t2, this._currentResult ? this._showHover(this._currentResult) : this._hideHover();
    }
    _addLoadingMessage(e2) {
      if (!this._computer.anchor) return e2;
      for (let t2 of this._participants) {
        if (!t2.createLoadingMessage) continue;
        let n2 = t2.createLoadingMessage(this._computer.anchor);
        if (!n2) continue;
        return e2.slice(0).concat([
          n2
        ]);
      }
      return e2;
    }
    _withResult(e2) {
      let t2 = this._contentHoverWidget.position && this._currentResult && this._currentResult.isComplete;
      t2 || this._setCurrentResult(e2);
      let n2 = e2.isComplete;
      if (!n2) return;
      let r2 = e2.hoverParts.length === 0, i2 = this._computer.insistOnKeepingHoverVisible, a2 = r2 && i2;
      a2 || this._setCurrentResult(e2);
    }
    _showHover(e2) {
      let t2 = this._getHoverContext();
      this._renderedContentHover = new Xv(this._editor, e2, this._participants, this._computer, t2, this._keybindingService), this._renderedContentHover.domNodeHasChildren ? this._contentHoverWidget.show(this._renderedContentHover) : this._renderedContentHover.dispose();
    }
    _hideHover() {
      this._contentHoverWidget.hide();
    }
    _getHoverContext() {
      let e2 = () => {
        this.hide();
      }, t2 = () => {
        this._onContentsChanged.fire(), this._contentHoverWidget.onContentsChanged();
      }, n2 = (e3) => {
        this._contentHoverWidget.setMinimumDimensions(e3);
      };
      return {
        hide: e2,
        onContentsChanged: t2,
        setMinimumDimensions: n2
      };
    }
    showsOrWillShow(e2) {
      let t2 = this._contentHoverWidget.isResizing;
      if (t2) return true;
      let n2 = this._findHoverAnchorCandidates(e2), r2 = n2.length > 0;
      if (!r2) return this._startShowingOrUpdateHover(null, 0, 0, false, e2);
      let i2 = n2[0];
      return this._startShowingOrUpdateHover(i2, 0, 0, false, e2);
    }
    _findHoverAnchorCandidates(e2) {
      let t2 = [];
      for (let n3 of this._participants) {
        if (!n3.suggestHoverAnchor) continue;
        let r2 = n3.suggestHoverAnchor(e2);
        if (!r2) continue;
        t2.push(r2);
      }
      let n2 = e2.target;
      switch (n2.type) {
        case 6:
          t2.push(new wh(0, n2.range, e2.event.posx, e2.event.posy));
          break;
        case 7: {
          let r2 = this._editor.getOption(50).typicalHalfwidthCharacterWidth / 2, i2 = !n2.detail.isAfterLines && typeof n2.detail.horizontalDistanceToText == `number` && n2.detail.horizontalDistanceToText < r2;
          if (!i2) break;
          t2.push(new wh(0, n2.range, e2.event.posx, e2.event.posy));
          break;
        }
      }
      return t2.sort((e3, t3) => t3.priority - e3.priority), t2;
    }
    _onMouseLeave(e2) {
      let t2 = this._editor.getDomNode(), n2 = !t2 || !dg(t2, e2.x, e2.y);
      n2 && this.hide();
    }
    startShowingAtRange(e2, t2, n2, r2) {
      this._startShowingOrUpdateHover(new wh(0, e2, void 0, void 0), t2, n2, r2, null);
    }
    async updateHoverVerbosityLevel(e2, t2, n2) {
      var _a3;
      (_a3 = this._renderedContentHover) == null ? void 0 : _a3.updateHoverVerbosityLevel(e2, t2, n2);
    }
    focusedHoverPartIndex() {
      var _a3;
      return ((_a3 = this._renderedContentHover) == null ? void 0 : _a3.focusedHoverPartIndex) ?? -1;
    }
    containsNode(e2) {
      return e2 ? this._contentHoverWidget.getDomNode().contains(e2) : false;
    }
    focus() {
      this._contentHoverWidget.focus();
    }
    scrollUp() {
      this._contentHoverWidget.scrollUp();
    }
    scrollDown() {
      this._contentHoverWidget.scrollDown();
    }
    scrollLeft() {
      this._contentHoverWidget.scrollLeft();
    }
    scrollRight() {
      this._contentHoverWidget.scrollRight();
    }
    pageUp() {
      this._contentHoverWidget.pageUp();
    }
    pageDown() {
      this._contentHoverWidget.pageDown();
    }
    goToTop() {
      this._contentHoverWidget.goToTop();
    }
    goToBottom() {
      this._contentHoverWidget.goToBottom();
    }
    hide() {
      this._computer.anchor = null, this._hoverOperation.cancel(), this._setCurrentResult(null);
    }
    getDomNode() {
      return this._contentHoverWidget.getDomNode();
    }
    get isColorPickerVisible() {
      var _a3;
      return ((_a3 = this._renderedContentHover) == null ? void 0 : _a3.isColorPickerVisible()) ?? false;
    }
    get isVisibleFromKeyboard() {
      return this._contentHoverWidget.isVisibleFromKeyboard;
    }
    get isVisible() {
      return this._contentHoverWidget.isVisible;
    }
    get isFocused() {
      return this._contentHoverWidget.isFocused;
    }
    get isResizing() {
      return this._contentHoverWidget.isResizing;
    }
    get widget() {
      return this._contentHoverWidget;
    }
  };
  ty = $v([
    ey(1, k),
    ey(2, Ct)
  ], ty);
  var ny = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ry = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, iy;
  const ay = false;
  let oy = (_M2 = class extends S {
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._instantiationService = t2, this._keybindingService = n2, this._onHoverContentsChanged = this._register(new E()), this.shouldKeepOpenOnEditorMouseMoveOrLeave = false, this._listenersStore = new C(), this._hoverState = {
        mouseDown: false,
        activatedByDecoratorClick: false
      }, this._reactToEditorMouseMoveRunner = this._register(new hr(() => this._reactToEditorMouseMove(this._mouseMoveEvent), 0)), this._hookListeners(), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(60) && (this._unhookListeners(), this._hookListeners());
      }));
    }
    static get(e2) {
      return e2.getContribution(iy.ID);
    }
    _hookListeners() {
      let e2 = this._editor.getOption(60);
      this._hoverSettings = {
        enabled: e2.enabled,
        sticky: e2.sticky,
        hidingDelay: e2.hidingDelay
      }, e2.enabled ? (this._listenersStore.add(this._editor.onMouseDown((e3) => this._onEditorMouseDown(e3))), this._listenersStore.add(this._editor.onMouseUp(() => this._onEditorMouseUp())), this._listenersStore.add(this._editor.onMouseMove((e3) => this._onEditorMouseMove(e3))), this._listenersStore.add(this._editor.onKeyDown((e3) => this._onKeyDown(e3)))) : (this._listenersStore.add(this._editor.onMouseMove((e3) => this._onEditorMouseMove(e3))), this._listenersStore.add(this._editor.onKeyDown((e3) => this._onKeyDown(e3)))), this._listenersStore.add(this._editor.onMouseLeave((e3) => this._onEditorMouseLeave(e3))), this._listenersStore.add(this._editor.onDidChangeModel(() => {
        this._cancelScheduler(), this._hideWidgets();
      })), this._listenersStore.add(this._editor.onDidChangeModelContent(() => this._cancelScheduler())), this._listenersStore.add(this._editor.onDidScrollChange((e3) => this._onEditorScrollChanged(e3)));
    }
    _unhookListeners() {
      this._listenersStore.clear();
    }
    _cancelScheduler() {
      this._mouseMoveEvent = void 0, this._reactToEditorMouseMoveRunner.cancel();
    }
    _onEditorScrollChanged(e2) {
      (e2.scrollTopChanged || e2.scrollLeftChanged) && this._hideWidgets();
    }
    _onEditorMouseDown(e2) {
      this._hoverState.mouseDown = true;
      let t2 = this._shouldNotHideCurrentHoverWidget(e2);
      t2 || this._hideWidgets();
    }
    _shouldNotHideCurrentHoverWidget(e2) {
      return this._isMouseOnContentHoverWidget(e2) || this._isContentWidgetResizing();
    }
    _isMouseOnContentHoverWidget(e2) {
      var _a3;
      let t2 = (_a3 = this._contentWidget) == null ? void 0 : _a3.getDomNode();
      return t2 ? dg(t2, e2.event.posx, e2.event.posy) : false;
    }
    _onEditorMouseUp() {
      this._hoverState.mouseDown = false;
    }
    _onEditorMouseLeave(e2) {
      if (this.shouldKeepOpenOnEditorMouseMoveOrLeave) return;
      this._cancelScheduler();
      let t2 = this._shouldNotHideCurrentHoverWidget(e2);
      t2 || ay || this._hideWidgets();
    }
    _shouldNotRecomputeCurrentHoverWidget(e2) {
      let t2 = this._hoverSettings.sticky, n2 = (e3, t3) => {
        let n3 = this._isMouseOnContentHoverWidget(e3);
        return t3 && n3;
      }, r2 = (e3) => {
        var _a3;
        let t3 = this._isMouseOnContentHoverWidget(e3), n3 = ((_a3 = this._contentWidget) == null ? void 0 : _a3.isColorPickerVisible) ?? false;
        return t3 && n3;
      }, i2 = (e3, t3) => {
        var _a3, _b3, _c3, _d3;
        return (t3 && ((_b3 = this._contentWidget) == null ? void 0 : _b3.containsNode((_a3 = e3.event.browserEvent.view) == null ? void 0 : _a3.document.activeElement)) && !((_d3 = (_c3 = e3.event.browserEvent.view) == null ? void 0 : _c3.getSelection()) == null ? void 0 : _d3.isCollapsed)) ?? false;
      };
      return n2(e2, t2) || r2(e2) || i2(e2, t2);
    }
    _onEditorMouseMove(e2) {
      var _a3, _b3, _c3, _d3;
      if (this.shouldKeepOpenOnEditorMouseMoveOrLeave || (this._mouseMoveEvent = e2, ((_a3 = this._contentWidget) == null ? void 0 : _a3.isFocused) || ((_b3 = this._contentWidget) == null ? void 0 : _b3.isResizing))) return;
      let t2 = this._hoverSettings.sticky;
      if (t2 && ((_c3 = this._contentWidget) == null ? void 0 : _c3.isVisibleFromKeyboard)) return;
      let n2 = this._shouldNotRecomputeCurrentHoverWidget(e2);
      if (n2) {
        this._reactToEditorMouseMoveRunner.cancel();
        return;
      }
      let r2 = this._hoverSettings.hidingDelay, i2 = (_d3 = this._contentWidget) == null ? void 0 : _d3.isVisible, a2 = i2 && t2 && r2 > 0;
      if (a2) {
        this._reactToEditorMouseMoveRunner.isScheduled() || this._reactToEditorMouseMoveRunner.schedule(r2);
        return;
      }
      this._reactToEditorMouseMove(e2);
    }
    _reactToEditorMouseMove(e2) {
      var _a3;
      if (!e2) return;
      let t2 = e2.target, n2 = (_a3 = t2.element) == null ? void 0 : _a3.classList.contains(`colorpicker-color-decoration`), r2 = this._editor.getOption(149), i2 = this._hoverSettings.enabled, a2 = this._hoverState.activatedByDecoratorClick;
      if (n2 && (r2 === `click` && !a2 || r2 === `hover` && !i2 && !ay || r2 === `clickAndHover` && !i2 && !a2) || !n2 && !i2 && !a2) {
        this._hideWidgets();
        return;
      }
      let o2 = this._tryShowHoverWidget(e2);
      o2 || ay || this._hideWidgets();
    }
    _tryShowHoverWidget(e2) {
      let t2 = this._getOrCreateContentWidget();
      return t2.showsOrWillShow(e2);
    }
    _onKeyDown(e2) {
      var _a3;
      if (!this._editor.hasModel()) return;
      let t2 = this._keybindingService.softDispatch(e2, this._editor.getDomNode()), n2 = t2.kind === 1 || t2.kind === 2 && (t2.commandId === Rh || t2.commandId === Jh || t2.commandId === Xh) && ((_a3 = this._contentWidget) == null ? void 0 : _a3.isVisible);
      e2.keyCode === 5 || e2.keyCode === 6 || e2.keyCode === 57 || e2.keyCode === 4 || n2 || this._hideWidgets();
    }
    _hideWidgets() {
      var _a3, _b3;
      ay || this._hoverState.mouseDown && ((_a3 = this._contentWidget) == null ? void 0 : _a3.isColorPickerVisible) || sg.dropDownVisible || (this._hoverState.activatedByDecoratorClick = false, (_b3 = this._contentWidget) == null ? void 0 : _b3.hide());
    }
    _getOrCreateContentWidget() {
      return this._contentWidget || (this._contentWidget = this._instantiationService.createInstance(ty, this._editor), this._listenersStore.add(this._contentWidget.onContentsChanged(() => this._onHoverContentsChanged.fire()))), this._contentWidget;
    }
    showContentHover(e2, t2, n2, r2, i2 = false) {
      this._hoverState.activatedByDecoratorClick = i2, this._getOrCreateContentWidget().startShowingAtRange(e2, t2, n2, r2);
    }
    _isContentWidgetResizing() {
      var _a3;
      return ((_a3 = this._contentWidget) == null ? void 0 : _a3.widget.isResizing) || false;
    }
    focusedHoverPartIndex() {
      return this._getOrCreateContentWidget().focusedHoverPartIndex();
    }
    updateHoverVerbosityLevel(e2, t2, n2) {
      this._getOrCreateContentWidget().updateHoverVerbosityLevel(e2, t2, n2);
    }
    focus() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.focus();
    }
    scrollUp() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.scrollUp();
    }
    scrollDown() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.scrollDown();
    }
    scrollLeft() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.scrollLeft();
    }
    scrollRight() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.scrollRight();
    }
    pageUp() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.pageUp();
    }
    pageDown() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.pageDown();
    }
    goToTop() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.goToTop();
    }
    goToBottom() {
      var _a3;
      (_a3 = this._contentWidget) == null ? void 0 : _a3.goToBottom();
    }
    get isColorPickerVisible() {
      var _a3;
      return (_a3 = this._contentWidget) == null ? void 0 : _a3.isColorPickerVisible;
    }
    get isHoverVisible() {
      var _a3;
      return (_a3 = this._contentWidget) == null ? void 0 : _a3.isVisible;
    }
    dispose() {
      var _a3;
      super.dispose(), this._unhookListeners(), this._listenersStore.dispose(), (_a3 = this._contentWidget) == null ? void 0 : _a3.dispose();
    }
  }, iy = _M2, _M2.ID = `editor.contrib.contentHover`, _M2);
  oy = iy = ny([
    ry(1, k),
    ry(2, Ct)
  ], oy);
  var sy = (_N2 = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._register(e2.onMouseDown((e3) => this.onMouseDown(e3)));
    }
    dispose() {
      super.dispose();
    }
    onMouseDown(e2) {
      let t2 = this._editor.getOption(149);
      if (t2 !== `click` && t2 !== `clickAndHover`) return;
      let n2 = e2.target;
      if (n2.type !== 6 || !n2.detail.injectedText || n2.detail.injectedText.options.attachedData !== uh || !n2.range) return;
      let r2 = this._editor.getContribution(oy.ID);
      if (r2 && !r2.isColorPickerVisible) {
        let e3 = new P(n2.range.startLineNumber, n2.range.startColumn + 1, n2.range.endLineNumber, n2.range.endColumn + 1);
        r2.showContentHover(e3, 1, 0, false, true);
      }
    }
  }, _N2.ID = `editor.contrib.colorContribution`, _N2);
  X(sy.ID, sy, 2), Dh.register(jh);
  var cy = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ly = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, uy, dy;
  let fy = (_O2 = class extends S {
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._instantiationService = n2, this._standaloneColorPickerWidget = null, this._standaloneColorPickerVisible = T.standaloneColorPickerVisible.bindTo(t2), this._standaloneColorPickerFocused = T.standaloneColorPickerFocused.bindTo(t2);
    }
    showOrFocus() {
      var _a3;
      this._editor.hasModel() && (this._standaloneColorPickerVisible.get() ? this._standaloneColorPickerFocused.get() || ((_a3 = this._standaloneColorPickerWidget) == null ? void 0 : _a3.focus()) : this._standaloneColorPickerWidget = this._instantiationService.createInstance(hy, this._editor, this._standaloneColorPickerVisible, this._standaloneColorPickerFocused));
    }
    hide() {
      var _a3;
      this._standaloneColorPickerFocused.set(false), this._standaloneColorPickerVisible.set(false), (_a3 = this._standaloneColorPickerWidget) == null ? void 0 : _a3.hide(), this._editor.focus();
    }
    insertColor() {
      var _a3;
      (_a3 = this._standaloneColorPickerWidget) == null ? void 0 : _a3.updateEditor(), this.hide();
    }
    static get(e2) {
      return e2.getContribution(uy.ID);
    }
  }, uy = _O2, _O2.ID = `editor.contrib.standaloneColorPickerController`, _O2);
  fy = uy = cy([
    ly(1, O),
    ly(2, k)
  ], fy), X(fy.ID, fy, 1);
  const py = 8, my = 22;
  let hy = (_P2 = class extends S {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      var _a3;
      super(), this._editor = e2, this._standaloneColorPickerVisible = t2, this._standaloneColorPickerFocused = n2, this._keybindingService = i2, this._languageFeaturesService = a2, this._editorWorkerService = o2, this.allowEditorOverflow = true, this._position = void 0, this._body = document.createElement(`div`), this._colorHover = null, this._selectionSetInEditor = false, this._onResult = this._register(new E()), this.onResult = this._onResult.event, this._standaloneColorPickerVisible.set(true), this._standaloneColorPickerParticipant = r2.createInstance(Nh, this._editor), this._position = (_a3 = this._editor._getViewModel()) == null ? void 0 : _a3.getPrimaryCursorState().modelState.position;
      let s2 = this._editor.getSelection(), c2 = s2 ? {
        startLineNumber: s2.startLineNumber,
        startColumn: s2.startColumn,
        endLineNumber: s2.endLineNumber,
        endColumn: s2.endColumn
      } : {
        startLineNumber: 0,
        endLineNumber: 0,
        endColumn: 0,
        startColumn: 0
      }, l2 = this._register(Gl(this._body));
      this._register(l2.onDidBlur((e3) => {
        this.hide();
      })), this._register(l2.onDidFocus((e3) => {
        this.focus();
      })), this._register(this._editor.onDidChangeCursorPosition(() => {
        this._selectionSetInEditor ? this._selectionSetInEditor = false : this.hide();
      })), this._register(this._editor.onMouseMove((e3) => {
        var _a4;
        let t3 = (_a4 = e3.target.element) == null ? void 0 : _a4.classList;
        t3 && t3.contains(`colorpicker-color-decoration`) && this.hide();
      })), this._register(this.onResult((e3) => {
        this._render(e3.value, e3.foundInEditor);
      })), this._start(c2), this._body.style.zIndex = `50`, this._editor.addContentWidget(this);
    }
    updateEditor() {
      this._colorHover && this._standaloneColorPickerParticipant.updateEditorModel(this._colorHover);
    }
    getId() {
      return dy.ID;
    }
    getDomNode() {
      return this._body;
    }
    getPosition() {
      if (!this._position) return null;
      let e2 = this._editor.getOption(60).above;
      return {
        position: this._position,
        secondaryPosition: this._position,
        preference: e2 ? [
          1,
          2
        ] : [
          2,
          1
        ],
        positionAffinity: 2
      };
    }
    hide() {
      this.dispose(), this._standaloneColorPickerVisible.set(false), this._standaloneColorPickerFocused.set(false), this._editor.removeContentWidget(this), this._editor.focus();
    }
    focus() {
      this._standaloneColorPickerFocused.set(true), this._body.focus();
    }
    async _start(e2) {
      let t2 = await this._computeAsync(e2);
      t2 && this._onResult.fire(new gy(t2.result, t2.foundInEditor));
    }
    async _computeAsync(e2) {
      if (!this._editor.hasModel()) return null;
      let t2 = {
        range: e2,
        color: {
          red: 0,
          green: 0,
          blue: 0,
          alpha: 1
        }
      }, n2 = await this._standaloneColorPickerParticipant.createColorHover(t2, new Qm(this._editorWorkerService), this._languageFeaturesService.colorProvider);
      return n2 ? {
        result: n2.colorHover,
        foundInEditor: n2.foundInEditor
      } : null;
    }
    _render(e2, t2) {
      let n2 = document.createDocumentFragment(), r2 = this._register(new jg(this._keybindingService)), i2 = {
        fragment: n2,
        statusBar: r2,
        onContentsChanged: () => {
        },
        hide: () => this.hide()
      };
      this._colorHover = e2;
      let a2 = this._standaloneColorPickerParticipant.renderHoverParts(i2, [
        e2
      ]);
      if (!a2) return;
      this._register(a2.disposables);
      let o2 = a2.colorPicker;
      this._body.classList.add(`standalone-colorpicker-body`), this._body.style.maxHeight = Math.max(this._editor.getLayoutInfo().height / 4, 250) + `px`, this._body.style.maxWidth = Math.max(this._editor.getLayoutInfo().width * 0.66, 500) + `px`, this._body.tabIndex = 0, this._body.appendChild(n2), o2.layout();
      let s2 = o2.body, c2 = s2.saturationBox.domNode.clientWidth, l2 = s2.domNode.clientWidth - c2 - my - py, u2 = o2.body.enterButton;
      u2 == null ? void 0 : u2.onClicked(() => {
        this.updateEditor(), this.hide();
      });
      let d2 = o2.header, f2 = d2.pickedColorNode;
      f2.style.width = c2 + py + `px`;
      let p2 = d2.originalColorNode;
      p2.style.width = l2 + `px`;
      let m2 = o2.header.closeButton;
      m2 == null ? void 0 : m2.onClicked(() => {
        this.hide();
      }), t2 && (u2 && (u2.button.textContent = `Replace`), this._selectionSetInEditor = true, this._editor.setSelection(e2.range)), this._editor.layoutContentWidget(this);
    }
  }, dy = _P2, _P2.ID = `editor.contrib.standaloneColorPickerWidget`, _P2);
  hy = dy = cy([
    ly(3, k),
    ly(4, Ct),
    ly(5, A),
    ly(6, bt)
  ], hy);
  var gy = class {
    constructor(e2, t2) {
      this.value = e2, this.foundInEditor = t2;
    }
  }, _y = class extends ke {
    constructor() {
      super({
        id: `editor.action.showOrFocusStandaloneColorPicker`,
        title: {
          ...W(`showOrFocusStandaloneColorPicker`, `Show or Focus Standalone Color Picker`),
          mnemonicTitle: U({
            key: `mishowOrFocusStandaloneColorPicker`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Show or Focus Standalone Color Picker`)
        },
        precondition: void 0,
        menu: [
          {
            id: j.CommandPalette
          }
        ],
        metadata: {
          description: W(`showOrFocusStandaloneColorPickerDescription`, `Show or focus a standalone color picker which uses the default color provider. It displays hex/rgb/hsl colors.`)
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = fy.get(t2)) == null ? void 0 : _a3.showOrFocus();
    }
  }, vy = class extends w {
    constructor() {
      super({
        id: `editor.action.hideColorPicker`,
        label: U({
          key: `hideColorPicker`,
          comment: [
            `Action that hides the color picker`
          ]
        }, `Hide the Color Picker`),
        alias: `Hide the Color Picker`,
        precondition: T.standaloneColorPickerVisible.isEqualTo(true),
        kbOpts: {
          primary: 9,
          weight: 100
        },
        metadata: {
          description: W(`hideColorPickerDescription`, `Hide the standalone color picker.`)
        }
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = fy.get(t2)) == null ? void 0 : _a3.hide();
    }
  }, yy = class extends w {
    constructor() {
      super({
        id: `editor.action.insertColorWithStandaloneColorPicker`,
        label: U({
          key: `insertColorWithStandaloneColorPicker`,
          comment: [
            `Action that inserts color with standalone color picker`
          ]
        }, `Insert Color with Standalone Color Picker`),
        alias: `Insert Color with Standalone Color Picker`,
        precondition: T.standaloneColorPickerFocused.isEqualTo(true),
        kbOpts: {
          primary: 3,
          weight: 100
        },
        metadata: {
          description: W(`insertColorWithStandaloneColorPickerDescription`, `Insert hex/rgb/hsl colors with the focused standalone color picker.`)
        }
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = fy.get(t2)) == null ? void 0 : _a3.insertColor();
    }
  };
  J(vy), J(yy), K(_y);
  var by = class e2 {
    constructor(e3, t2, n2) {
      this.languageConfigurationService = n2, this._selection = e3, this._insertSpace = t2, this._usedEndToken = null;
    }
    static _haystackHasNeedleAtOffset(e3, t2, n2) {
      if (n2 < 0) return false;
      let r2 = t2.length, i2 = e3.length;
      if (n2 + r2 > i2) return false;
      for (let i3 = 0; i3 < r2; i3++) {
        let r3 = e3.charCodeAt(n2 + i3), a2 = t2.charCodeAt(i3);
        if (r3 !== a2 && !(r3 >= 65 && r3 <= 90 && r3 + 32 === a2) && !(a2 >= 65 && a2 <= 90 && a2 + 32 === r3)) return false;
      }
      return true;
    }
    _createOperationsForBlockComment(t2, n2, r2, i2, a2, o2) {
      let s2 = t2.startLineNumber, c2 = t2.startColumn, l2 = t2.endLineNumber, u2 = t2.endColumn, d2 = a2.getLineContent(s2), f2 = a2.getLineContent(l2), p2 = d2.lastIndexOf(n2, c2 - 1 + n2.length), m2 = f2.indexOf(r2, u2 - 1 - r2.length);
      if (p2 !== -1 && m2 !== -1) if (s2 === l2) {
        let e3 = d2.substring(p2 + n2.length, m2);
        e3.indexOf(r2) >= 0 && (p2 = -1, m2 = -1);
      } else {
        let e3 = d2.substring(p2 + n2.length), t3 = f2.substring(0, m2);
        (e3.indexOf(r2) >= 0 || t3.indexOf(r2) >= 0) && (p2 = -1, m2 = -1);
      }
      let h2;
      p2 !== -1 && m2 !== -1 ? (i2 && p2 + n2.length < d2.length && d2.charCodeAt(p2 + n2.length) === 32 && (n2 += ` `), i2 && m2 > 0 && f2.charCodeAt(m2 - 1) === 32 && (r2 = ` ` + r2, --m2), h2 = e2._createRemoveBlockCommentOperations(new P(s2, p2 + n2.length + 1, l2, m2 + 1), n2, r2)) : (h2 = e2._createAddBlockCommentOperations(t2, n2, r2, this._insertSpace), this._usedEndToken = h2.length === 1 ? r2 : null);
      for (let e3 of h2) o2.addTrackedEditOperation(e3.range, e3.text);
    }
    static _createRemoveBlockCommentOperations(e3, t2, n2) {
      let r2 = [];
      return P.isEmpty(e3) ? r2.push(Oe.delete(new P(e3.startLineNumber, e3.startColumn - t2.length, e3.endLineNumber, e3.endColumn + n2.length))) : (r2.push(Oe.delete(new P(e3.startLineNumber, e3.startColumn - t2.length, e3.startLineNumber, e3.startColumn))), r2.push(Oe.delete(new P(e3.endLineNumber, e3.endColumn, e3.endLineNumber, e3.endColumn + n2.length)))), r2;
    }
    static _createAddBlockCommentOperations(e3, t2, n2, r2) {
      let i2 = [];
      return P.isEmpty(e3) ? i2.push(Oe.replace(new P(e3.startLineNumber, e3.startColumn, e3.endLineNumber, e3.endColumn), t2 + `  ` + n2)) : (i2.push(Oe.insert(new N(e3.startLineNumber, e3.startColumn), t2 + (r2 ? ` ` : ``))), i2.push(Oe.insert(new N(e3.endLineNumber, e3.endColumn), (r2 ? ` ` : ``) + n2))), i2;
    }
    getEditOperations(e3, t2) {
      let n2 = this._selection.startLineNumber, r2 = this._selection.startColumn;
      e3.tokenization.tokenizeIfCheap(n2);
      let i2 = e3.getLanguageIdAtPosition(n2, r2), a2 = this.languageConfigurationService.getLanguageConfiguration(i2).comments;
      !a2 || !a2.blockCommentStartToken || !a2.blockCommentEndToken || this._createOperationsForBlockComment(this._selection, a2.blockCommentStartToken, a2.blockCommentEndToken, this._insertSpace, e3, t2);
    }
    computeCursorState(e3, t2) {
      let n2 = t2.getInverseEditOperations();
      if (n2.length === 2) {
        let e4 = n2[0], t3 = n2[1];
        return new I(e4.range.endLineNumber, e4.range.endColumn, t3.range.startLineNumber, t3.range.startColumn);
      } else {
        let e4 = n2[0].range, t3 = this._usedEndToken ? -this._usedEndToken.length - 1 : 0;
        return new I(e4.endLineNumber, e4.endColumn + t3, e4.endLineNumber, e4.endColumn + t3);
      }
    }
  }, xy = class e2 {
    constructor(e3, t2, n2, r2, i2, a2, o2) {
      this.languageConfigurationService = e3, this._selection = t2, this._indentSize = n2, this._type = r2, this._insertSpace = i2, this._selectionId = null, this._deltaColumn = 0, this._moveEndPositionDown = false, this._ignoreEmptyLines = a2, this._ignoreFirstLine = o2 || false;
    }
    static _gatherPreflightCommentStrings(e3, t2, n2, r2) {
      e3.tokenization.tokenizeIfCheap(t2);
      let i2 = e3.getLanguageIdAtPosition(t2, 1), a2 = r2.getLanguageConfiguration(i2).comments, o2 = a2 ? a2.lineCommentToken : null;
      if (!o2) return null;
      let s2 = [];
      for (let e4 = 0, r3 = n2 - t2 + 1; e4 < r3; e4++) s2[e4] = {
        ignore: false,
        commentStr: o2,
        commentStrOffset: 0,
        commentStrLength: o2.length
      };
      return s2;
    }
    static _analyzeLines(e3, t2, n2, r2, i2, a2, o2, s2) {
      let c2 = true, l2;
      l2 = e3 === 0 ? true : e3 !== 1;
      for (let s3 = 0, u2 = r2.length; s3 < u2; s3++) {
        let u3 = r2[s3], d2 = i2 + s3;
        if (d2 === i2 && o2) {
          u3.ignore = true;
          continue;
        }
        let f2 = n2.getLineContent(d2), p2 = To(f2);
        if (p2 === -1) {
          u3.ignore = a2, u3.commentStrOffset = f2.length;
          continue;
        }
        if (c2 = false, u3.ignore = false, u3.commentStrOffset = p2, l2 && !by._haystackHasNeedleAtOffset(f2, u3.commentStr, p2) && (e3 === 0 ? l2 = false : e3 === 1 || (u3.ignore = true)), l2 && t2) {
          let e4 = p2 + u3.commentStrLength;
          e4 < f2.length && f2.charCodeAt(e4) === 32 && (u3.commentStrLength += 1);
        }
      }
      if (e3 === 0 && c2) {
        l2 = false;
        for (let e4 = 0, t3 = r2.length; e4 < t3; e4++) r2[e4].ignore = false;
      }
      return {
        supported: true,
        shouldRemoveComments: l2,
        lines: r2
      };
    }
    static _gatherPreflightData(t2, n2, r2, i2, a2, o2, s2, c2) {
      let l2 = e2._gatherPreflightCommentStrings(r2, i2, a2, c2);
      return l2 === null ? {
        supported: false
      } : e2._analyzeLines(t2, n2, r2, l2, i2, o2, s2, c2);
    }
    _executeLineComments(t2, n2, r2, i2) {
      let a2;
      r2.shouldRemoveComments ? a2 = e2._createRemoveLineCommentsOperations(r2.lines, i2.startLineNumber) : (e2._normalizeInsertionPoint(t2, r2.lines, i2.startLineNumber, this._indentSize), a2 = this._createAddLineCommentsOperations(r2.lines, i2.startLineNumber));
      let o2 = new N(i2.positionLineNumber, i2.positionColumn);
      for (let e3 = 0, r3 = a2.length; e3 < r3; e3++) if (n2.addEditOperation(a2[e3].range, a2[e3].text), P.isEmpty(a2[e3].range) && P.getStartPosition(a2[e3].range).equals(o2)) {
        let n3 = t2.getLineContent(o2.lineNumber);
        n3.length + 1 === o2.column && (this._deltaColumn = (a2[e3].text || ``).length);
      }
      this._selectionId = n2.trackSelection(i2);
    }
    _attemptRemoveBlockComment(e3, t2, n2, r2) {
      let i2 = t2.startLineNumber, a2 = t2.endLineNumber, o2 = r2.length + Math.max(e3.getLineFirstNonWhitespaceColumn(t2.startLineNumber), t2.startColumn), s2 = e3.getLineContent(i2).lastIndexOf(n2, o2 - 1), c2 = e3.getLineContent(a2).indexOf(r2, t2.endColumn - 1 - n2.length);
      return s2 !== -1 && c2 === -1 && (c2 = e3.getLineContent(i2).indexOf(r2, s2 + n2.length), a2 = i2), s2 === -1 && c2 !== -1 && (s2 = e3.getLineContent(a2).lastIndexOf(n2, c2), i2 = a2), t2.isEmpty() && (s2 === -1 || c2 === -1) && (s2 = e3.getLineContent(i2).indexOf(n2), s2 !== -1 && (c2 = e3.getLineContent(i2).indexOf(r2, s2 + n2.length))), s2 !== -1 && e3.getLineContent(i2).charCodeAt(s2 + n2.length) === 32 && (n2 += ` `), c2 !== -1 && e3.getLineContent(a2).charCodeAt(c2 - 1) === 32 && (r2 = ` ` + r2, --c2), s2 !== -1 && c2 !== -1 ? by._createRemoveBlockCommentOperations(new P(i2, s2 + n2.length + 1, a2, c2 + 1), n2, r2) : null;
    }
    _executeBlockComment(e3, t2, n2) {
      e3.tokenization.tokenizeIfCheap(n2.startLineNumber);
      let r2 = e3.getLanguageIdAtPosition(n2.startLineNumber, 1), i2 = this.languageConfigurationService.getLanguageConfiguration(r2).comments;
      if (!i2 || !i2.blockCommentStartToken || !i2.blockCommentEndToken) return;
      let a2 = i2.blockCommentStartToken, o2 = i2.blockCommentEndToken, s2 = this._attemptRemoveBlockComment(e3, n2, a2, o2);
      if (!s2) {
        if (n2.isEmpty()) {
          let t3 = e3.getLineContent(n2.startLineNumber), r3 = To(t3);
          r3 === -1 && (r3 = t3.length), s2 = by._createAddBlockCommentOperations(new P(n2.startLineNumber, r3 + 1, n2.startLineNumber, t3.length + 1), a2, o2, this._insertSpace);
        } else s2 = by._createAddBlockCommentOperations(new P(n2.startLineNumber, e3.getLineFirstNonWhitespaceColumn(n2.startLineNumber), n2.endLineNumber, e3.getLineMaxColumn(n2.endLineNumber)), a2, o2, this._insertSpace);
        s2.length === 1 && (this._deltaColumn = a2.length + 1);
      }
      this._selectionId = t2.trackSelection(n2);
      for (let e4 of s2) t2.addEditOperation(e4.range, e4.text);
    }
    getEditOperations(t2, n2) {
      let r2 = this._selection;
      if (this._moveEndPositionDown = false, r2.startLineNumber === r2.endLineNumber && this._ignoreFirstLine) {
        n2.addEditOperation(new P(r2.startLineNumber, t2.getLineMaxColumn(r2.startLineNumber), r2.startLineNumber + 1, 1), r2.startLineNumber === t2.getLineCount() ? `` : `
`), this._selectionId = n2.trackSelection(r2);
        return;
      }
      r2.startLineNumber < r2.endLineNumber && r2.endColumn === 1 && (this._moveEndPositionDown = true, r2 = r2.setEndPosition(r2.endLineNumber - 1, t2.getLineMaxColumn(r2.endLineNumber - 1)));
      let i2 = e2._gatherPreflightData(this._type, this._insertSpace, t2, r2.startLineNumber, r2.endLineNumber, this._ignoreEmptyLines, this._ignoreFirstLine, this.languageConfigurationService);
      return i2.supported ? this._executeLineComments(t2, n2, i2, r2) : this._executeBlockComment(t2, n2, r2);
    }
    computeCursorState(e3, t2) {
      let n2 = t2.getTrackedSelection(this._selectionId);
      return this._moveEndPositionDown && (n2 = n2.setEndPosition(n2.endLineNumber + 1, 1)), new I(n2.selectionStartLineNumber, n2.selectionStartColumn + this._deltaColumn, n2.positionLineNumber, n2.positionColumn + this._deltaColumn);
    }
    static _createRemoveLineCommentsOperations(e3, t2) {
      let n2 = [];
      for (let r2 = 0, i2 = e3.length; r2 < i2; r2++) {
        let i3 = e3[r2];
        i3.ignore || n2.push(Oe.delete(new P(t2 + r2, i3.commentStrOffset + 1, t2 + r2, i3.commentStrOffset + i3.commentStrLength + 1)));
      }
      return n2;
    }
    _createAddLineCommentsOperations(e3, t2) {
      let n2 = [], r2 = this._insertSpace ? ` ` : ``;
      for (let i2 = 0, a2 = e3.length; i2 < a2; i2++) {
        let a3 = e3[i2];
        a3.ignore || n2.push(Oe.insert(new N(t2 + i2, a3.commentStrOffset + 1), a3.commentStr + r2));
      }
      return n2;
    }
    static nextVisibleColumn(e3, t2, n2, r2) {
      return n2 ? e3 + (t2 - e3 % t2) : e3 + r2;
    }
    static _normalizeInsertionPoint(t2, n2, r2, i2) {
      let a2 = 1073741824, o2, s2;
      for (let o3 = 0, s3 = n2.length; o3 < s3; o3++) {
        if (n2[o3].ignore) continue;
        let s4 = t2.getLineContent(r2 + o3), c2 = 0;
        for (let t3 = 0, r3 = n2[o3].commentStrOffset; c2 < a2 && t3 < r3; t3++) c2 = e2.nextVisibleColumn(c2, i2, s4.charCodeAt(t3) === 9, 1);
        c2 < a2 && (a2 = c2);
      }
      a2 = Math.floor(a2 / i2) * i2;
      for (let c2 = 0, l2 = n2.length; c2 < l2; c2++) {
        if (n2[c2].ignore) continue;
        let l3 = t2.getLineContent(r2 + c2), u2 = 0;
        for (o2 = 0, s2 = n2[c2].commentStrOffset; u2 < a2 && o2 < s2; o2++) u2 = e2.nextVisibleColumn(u2, i2, l3.charCodeAt(o2) === 9, 1);
        u2 > a2 ? n2[c2].commentStrOffset = o2 - 1 : n2[c2].commentStrOffset = o2;
      }
    }
  }, Sy = class extends w {
    constructor(e2, t2) {
      super(t2), this._type = e2;
    }
    run(e2, t2) {
      let n2 = e2.get(Tt);
      if (!t2.hasModel()) return;
      let r2 = t2.getModel(), i2 = [], a2 = r2.getOptions(), o2 = t2.getOption(23), s2 = t2.getSelections().map((e3, t3) => ({
        selection: e3,
        index: t3,
        ignoreFirstLine: false
      }));
      s2.sort((e3, t3) => P.compareRangesUsingStarts(e3.selection, t3.selection));
      let c2 = s2[0];
      for (let e3 = 1; e3 < s2.length; e3++) {
        let t3 = s2[e3];
        c2.selection.endLineNumber === t3.selection.startLineNumber && (c2.index < t3.index ? t3.ignoreFirstLine = true : (c2.ignoreFirstLine = true, c2 = t3));
      }
      for (let e3 of s2) i2.push(new xy(n2, e3.selection, a2.indentSize, this._type, o2.insertSpace, o2.ignoreEmptyLines, e3.ignoreFirstLine));
      t2.pushUndoStop(), t2.executeCommands(this.id, i2), t2.pushUndoStop();
    }
  }, Cy = class extends Sy {
    constructor() {
      super(0, {
        id: `editor.action.commentLine`,
        label: U(`comment.line`, `Toggle Line Comment`),
        alias: `Toggle Line Comment`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2138,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarEditMenu,
          group: `5_insert`,
          title: U({
            key: `miToggleLineComment`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Toggle Line Comment`),
          order: 1
        }
      });
    }
  }, wy = class extends Sy {
    constructor() {
      super(1, {
        id: `editor.action.addCommentLine`,
        label: U(`comment.line.add`, `Add Line Comment`),
        alias: `Add Line Comment`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2081),
          weight: 100
        }
      });
    }
  }, Ty = class extends Sy {
    constructor() {
      super(2, {
        id: `editor.action.removeCommentLine`,
        label: U(`comment.line.remove`, `Remove Line Comment`),
        alias: `Remove Line Comment`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2099),
          weight: 100
        }
      });
    }
  }, Ey = class extends w {
    constructor() {
      super({
        id: `editor.action.blockComment`,
        label: U(`comment.block`, `Toggle Block Comment`),
        alias: `Toggle Block Comment`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1567,
          linux: {
            primary: 3103
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarEditMenu,
          group: `5_insert`,
          title: U({
            key: `miToggleBlockComment`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Toggle &&Block Comment`),
          order: 2
        }
      });
    }
    run(e2, t2) {
      let n2 = e2.get(Tt);
      if (!t2.hasModel()) return;
      let r2 = t2.getOption(23), i2 = [], a2 = t2.getSelections();
      for (let e3 of a2) i2.push(new by(e3, r2.insertSpace, n2));
      t2.pushUndoStop(), t2.executeCommands(this.id, i2), t2.pushUndoStop();
    }
  };
  J(Cy), J(wy), J(Ty), J(Ey);
  var Dy = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Oy = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, ky;
  let Ay = (_Q = class {
    static get(e2) {
      return e2.getContribution(ky.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2) {
      this._contextMenuService = t2, this._contextViewService = n2, this._contextKeyService = r2, this._keybindingService = i2, this._menuService = a2, this._configurationService = o2, this._workspaceContextService = s2, this._toDispose = new C(), this._contextMenuIsBeingShownCount = 0, this._editor = e2, this._toDispose.add(this._editor.onContextMenu((e3) => this._onContextMenu(e3))), this._toDispose.add(this._editor.onMouseWheel((e3) => {
        if (this._contextMenuIsBeingShownCount > 0) {
          let t3 = this._contextViewService.getContextViewElement(), n3 = e3.srcElement;
          n3.shadowRoot && Xo(t3) === n3.shadowRoot || this._contextViewService.hideContextView();
        }
      })), this._toDispose.add(this._editor.onKeyDown((e3) => {
        this._editor.getOption(24) && e3.keyCode === 58 && (e3.preventDefault(), e3.stopPropagation(), this.showContextMenu());
      }));
    }
    _onContextMenu(e2) {
      if (!this._editor.hasModel()) return;
      if (!this._editor.getOption(24)) {
        this._editor.focus(), e2.target.position && !this._editor.getSelection().containsPosition(e2.target.position) && this._editor.setPosition(e2.target.position);
        return;
      }
      if (e2.target.type === 12 || e2.target.type === 6 && e2.target.detail.injectedText) return;
      if (e2.event.preventDefault(), e2.event.stopPropagation(), e2.target.type === 11) return this._showScrollbarContextMenu(e2.event);
      if (e2.target.type !== 6 && e2.target.type !== 7 && e2.target.type !== 1) return;
      if (this._editor.focus(), e2.target.position) {
        let t3 = false;
        for (let n2 of this._editor.getSelections()) if (n2.containsPosition(e2.target.position)) {
          t3 = true;
          break;
        }
        t3 || this._editor.setPosition(e2.target.position);
      }
      let t2 = null;
      e2.target.type !== 1 && (t2 = e2.event), this.showContextMenu(t2);
    }
    showContextMenu(e2) {
      if (!this._editor.getOption(24) || !this._editor.hasModel()) return;
      let t2 = this._getMenuActions(this._editor.getModel(), this._editor.contextMenuId);
      t2.length > 0 && this._doShowContextMenu(t2, e2);
    }
    _getMenuActions(e2, t2) {
      let n2 = [], r2 = this._menuService.getMenuActions(t2, this._contextKeyService, {
        arg: e2.uri
      });
      for (let t3 of r2) {
        let [, r3] = t3, i2 = 0;
        for (let t4 of r3) if (t4 instanceof Rr) {
          let r4 = this._getMenuActions(e2, t4.item.submenu);
          r4.length > 0 && (n2.push(new Lr(t4.id, t4.label, r4)), i2++);
        } else n2.push(t4), i2++;
        i2 && n2.push(new Cr());
      }
      return n2.length && n2.pop(), n2;
    }
    _doShowContextMenu(e2, t2 = null) {
      if (!this._editor.hasModel()) return;
      let n2 = this._editor.getOption(60);
      this._editor.updateOptions({
        hover: {
          enabled: false
        }
      });
      let r2 = t2;
      if (!r2) {
        this._editor.revealPosition(this._editor.getPosition(), 1), this._editor.render();
        let e3 = this._editor.getScrolledVisiblePosition(this._editor.getPosition()), t3 = Vo(this._editor.getDomNode()), n3 = t3.left + e3.left, i3 = t3.top + e3.top + e3.height;
        r2 = {
          x: n3,
          y: i3
        };
      }
      let i2 = this._editor.getOption(128) && !Bs;
      this._contextMenuIsBeingShownCount++, this._contextMenuService.showContextMenu({
        domForShadowRoot: i2 ? this._editor.getOverflowWidgetsDomNode() ?? this._editor.getDomNode() : void 0,
        getAnchor: () => r2,
        getActions: () => e2,
        getActionViewItem: (e3) => {
          let t3 = this._keybindingFor(e3);
          if (t3) return new c(e3, e3, {
            label: true,
            keybinding: t3.getLabel(),
            isMenu: true
          });
          let n3 = e3;
          return typeof n3.getActionViewItem == `function` ? n3.getActionViewItem() : new c(e3, e3, {
            icon: true,
            label: true,
            isMenu: true
          });
        },
        getKeyBinding: (e3) => this._keybindingFor(e3),
        onHide: (e3) => {
          this._contextMenuIsBeingShownCount--, this._editor.updateOptions({
            hover: n2
          });
        }
      });
    }
    _showScrollbarContextMenu(e2) {
      if (!this._editor.hasModel() || rc(this._workspaceContextService.getWorkspace())) return;
      let t2 = this._editor.getOption(73), n2 = 0, r2 = (e3) => ({
        id: `menu-action-${++n2}`,
        label: e3.label,
        tooltip: ``,
        class: void 0,
        enabled: e3.enabled === void 0 ? true : e3.enabled,
        checked: e3.checked,
        run: e3.run
      }), i2 = (e3, t3) => new Lr(`menu-action-${++n2}`, e3, t3, void 0), a2 = (e3, t3, n3, a3, o3) => {
        if (!t3) return r2({
          label: e3,
          enabled: t3,
          run: () => {
          }
        });
        let s3 = (e4) => () => {
          this._configurationService.updateValue(n3, e4);
        }, c2 = [];
        for (let e4 of o3) c2.push(r2({
          label: e4.label,
          checked: a3 === e4.value,
          run: s3(e4.value)
        }));
        return i2(e3, c2);
      }, o2 = [];
      o2.push(r2({
        label: U(`context.minimap.minimap`, `Minimap`),
        checked: t2.enabled,
        run: () => {
          this._configurationService.updateValue(`editor.minimap.enabled`, !t2.enabled);
        }
      })), o2.push(new Cr()), o2.push(r2({
        label: U(`context.minimap.renderCharacters`, `Render Characters`),
        enabled: t2.enabled,
        checked: t2.renderCharacters,
        run: () => {
          this._configurationService.updateValue(`editor.minimap.renderCharacters`, !t2.renderCharacters);
        }
      })), o2.push(a2(U(`context.minimap.size`, `Vertical size`), t2.enabled, `editor.minimap.size`, t2.size, [
        {
          label: U(`context.minimap.size.proportional`, `Proportional`),
          value: `proportional`
        },
        {
          label: U(`context.minimap.size.fill`, `Fill`),
          value: `fill`
        },
        {
          label: U(`context.minimap.size.fit`, `Fit`),
          value: `fit`
        }
      ])), o2.push(a2(U(`context.minimap.slider`, `Slider`), t2.enabled, `editor.minimap.showSlider`, t2.showSlider, [
        {
          label: U(`context.minimap.slider.mouseover`, `Mouse Over`),
          value: `mouseover`
        },
        {
          label: U(`context.minimap.slider.always`, `Always`),
          value: `always`
        }
      ]));
      let s2 = this._editor.getOption(128) && !Bs;
      this._contextMenuIsBeingShownCount++, this._contextMenuService.showContextMenu({
        domForShadowRoot: s2 ? this._editor.getDomNode() : void 0,
        getAnchor: () => e2,
        getActions: () => o2,
        onHide: (e3) => {
          this._contextMenuIsBeingShownCount--, this._editor.focus();
        }
      });
    }
    _keybindingFor(e2) {
      return this._keybindingService.lookupKeybinding(e2.id);
    }
    dispose() {
      this._contextMenuIsBeingShownCount > 0 && this._contextViewService.hideContextView(), this._toDispose.dispose();
    }
  }, ky = _Q, _Q.ID = `editor.contrib.contextmenu`, _Q);
  Ay = ky = Dy([
    Oy(1, ht),
    Oy(2, gt),
    Oy(3, O),
    Oy(4, Ct),
    Oy(5, Nt),
    Oy(6, D),
    Oy(7, Kt)
  ], Ay);
  var jy = class extends w {
    constructor() {
      super({
        id: `editor.action.showContextMenu`,
        label: U(`action.showContextMenu.label`, `Show Editor Context Menu`),
        alias: `Show Editor Context Menu`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 1092,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = Ay.get(t2)) == null ? void 0 : _a3.showContextMenu();
    }
  };
  X(Ay.ID, Ay, 2), J(jy);
  var My = class {
    constructor(e2) {
      this.selections = e2;
    }
    equals(e2) {
      let t2 = this.selections.length, n2 = e2.selections.length;
      if (t2 !== n2) return false;
      for (let n3 = 0; n3 < t2; n3++) if (!this.selections[n3].equalsSelection(e2.selections[n3])) return false;
      return true;
    }
  }, Ny = class {
    constructor(e2, t2, n2) {
      this.cursorState = e2, this.scrollTop = t2, this.scrollLeft = n2;
    }
  }, Py = (_R = class extends S {
    static get(t2) {
      return t2.getContribution(_R.ID);
    }
    constructor(e2) {
      super(), this._editor = e2, this._isCursorUndoRedo = false, this._undoStack = [], this._redoStack = [], this._register(e2.onDidChangeModel((e3) => {
        this._undoStack = [], this._redoStack = [];
      })), this._register(e2.onDidChangeModelContent((e3) => {
        this._undoStack = [], this._redoStack = [];
      })), this._register(e2.onDidChangeCursorSelection((t2) => {
        if (this._isCursorUndoRedo || !t2.oldSelections || t2.oldModelVersionId !== t2.modelVersionId) return;
        let n2 = new My(t2.oldSelections), r2 = this._undoStack.length > 0 && this._undoStack[this._undoStack.length - 1].cursorState.equals(n2);
        r2 || (this._undoStack.push(new Ny(n2, e2.getScrollTop(), e2.getScrollLeft())), this._redoStack = [], this._undoStack.length > 50 && this._undoStack.shift());
      }));
    }
    cursorUndo() {
      !this._editor.hasModel() || this._undoStack.length === 0 || (this._redoStack.push(new Ny(new My(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft())), this._applyState(this._undoStack.pop()));
    }
    cursorRedo() {
      !this._editor.hasModel() || this._redoStack.length === 0 || (this._undoStack.push(new Ny(new My(this._editor.getSelections()), this._editor.getScrollTop(), this._editor.getScrollLeft())), this._applyState(this._redoStack.pop()));
    }
    _applyState(e2) {
      this._isCursorUndoRedo = true, this._editor.setSelections(e2.cursorState.selections), this._editor.setScrollPosition({
        scrollTop: e2.scrollTop,
        scrollLeft: e2.scrollLeft
      }), this._isCursorUndoRedo = false;
    }
  }, _R.ID = `editor.contrib.cursorUndoRedoController`, _R), Fy = class extends w {
    constructor() {
      super({
        id: `cursorUndo`,
        label: U(`cursor.undo`, `Cursor Undo`),
        alias: `Cursor Undo`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 2099,
          weight: 100
        }
      });
    }
    run(e2, t2, n2) {
      var _a3;
      (_a3 = Py.get(t2)) == null ? void 0 : _a3.cursorUndo();
    }
  }, Iy = class extends w {
    constructor() {
      super({
        id: `cursorRedo`,
        label: U(`cursor.redo`, `Cursor Redo`),
        alias: `Cursor Redo`,
        precondition: void 0
      });
    }
    run(e2, t2, n2) {
      var _a3;
      (_a3 = Py.get(t2)) == null ? void 0 : _a3.cursorRedo();
    }
  };
  X(Py.ID, Py, 0), J(Fy), J(Iy);
  var Ly = class {
    constructor(e2, t2, n2) {
      this.selection = e2, this.targetPosition = t2, this.copy = n2, this.targetSelection = null;
    }
    getEditOperations(e2, t2) {
      let n2 = e2.getValueInRange(this.selection);
      if (this.copy || t2.addEditOperation(this.selection, null), t2.addEditOperation(new P(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), n2), this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition)))) {
        this.targetSelection = this.selection;
        return;
      }
      if (this.copy) {
        this.targetSelection = new I(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
        return;
      }
      if (this.targetPosition.lineNumber > this.selection.endLineNumber) {
        this.targetSelection = new I(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
        return;
      }
      if (this.targetPosition.lineNumber < this.selection.endLineNumber) {
        this.targetSelection = new I(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);
        return;
      }
      this.selection.endColumn <= this.targetPosition.column ? this.targetSelection = new I(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, (this.selection.startLineNumber, this.selection.endLineNumber, this.targetPosition.column - this.selection.endColumn + this.selection.startColumn), this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column : this.selection.endColumn) : this.targetSelection = new I(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);
    }
    computeCursorState(e2, t2) {
      return this.targetSelection;
    }
  };
  function Ry(e2) {
    return qs ? e2.altKey : e2.ctrlKey;
  }
  var zy = (_S2 = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._dndDecorationIds = this._editor.createDecorationsCollection(), this._register(this._editor.onMouseDown((e3) => this._onEditorMouseDown(e3))), this._register(this._editor.onMouseUp((e3) => this._onEditorMouseUp(e3))), this._register(this._editor.onMouseDrag((e3) => this._onEditorMouseDrag(e3))), this._register(this._editor.onMouseDrop((e3) => this._onEditorMouseDrop(e3))), this._register(this._editor.onMouseDropCanceled(() => this._onEditorMouseDropCanceled())), this._register(this._editor.onKeyDown((e3) => this.onEditorKeyDown(e3))), this._register(this._editor.onKeyUp((e3) => this.onEditorKeyUp(e3))), this._register(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur())), this._register(this._editor.onDidBlurEditorText(() => this.onEditorBlur())), this._mouseDown = false, this._modifierPressed = false, this._dragSelection = null;
    }
    onEditorBlur() {
      this._removeDecoration(), this._dragSelection = null, this._mouseDown = false, this._modifierPressed = false;
    }
    onEditorKeyDown(e2) {
      !this._editor.getOption(35) || this._editor.getOption(22) || (Ry(e2) && (this._modifierPressed = true), this._mouseDown && Ry(e2) && this._editor.updateOptions({
        mouseStyle: `copy`
      }));
    }
    onEditorKeyUp(t2) {
      !this._editor.getOption(35) || this._editor.getOption(22) || (Ry(t2) && (this._modifierPressed = false), this._mouseDown && t2.keyCode === _S2.TRIGGER_KEY_VALUE && this._editor.updateOptions({
        mouseStyle: `default`
      }));
    }
    _onEditorMouseDown(e2) {
      this._mouseDown = true;
    }
    _onEditorMouseUp(e2) {
      this._mouseDown = false, this._editor.updateOptions({
        mouseStyle: `text`
      });
    }
    _onEditorMouseDrag(e2) {
      let t2 = e2.target;
      if (this._dragSelection === null) {
        let e3 = this._editor.getSelections() || [], n2 = e3.filter((e4) => t2.position && e4.containsPosition(t2.position));
        if (n2.length === 1) this._dragSelection = n2[0];
        else return;
      }
      Ry(e2.event) ? this._editor.updateOptions({
        mouseStyle: `copy`
      }) : this._editor.updateOptions({
        mouseStyle: `default`
      }), t2.position && (this._dragSelection.containsPosition(t2.position) ? this._removeDecoration() : this.showAt(t2.position));
    }
    _onEditorMouseDropCanceled() {
      this._editor.updateOptions({
        mouseStyle: `text`
      }), this._removeDecoration(), this._dragSelection = null, this._mouseDown = false;
    }
    _onEditorMouseDrop(t2) {
      if (t2.target && (this._hitContent(t2.target) || this._hitMargin(t2.target)) && t2.target.position) {
        let n2 = new N(t2.target.position.lineNumber, t2.target.position.column);
        if (this._dragSelection === null) {
          let e2 = null;
          if (t2.event.shiftKey) {
            let t3 = this._editor.getSelection();
            if (t3) {
              let { selectionStartLineNumber: r2, selectionStartColumn: i2 } = t3;
              e2 = [
                new I(r2, i2, n2.lineNumber, n2.column)
              ];
            }
          } else e2 = (this._editor.getSelections() || []).map((e3) => e3.containsPosition(n2) ? new I(n2.lineNumber, n2.column, n2.lineNumber, n2.column) : e3);
          this._editor.setSelections(e2 || [], `mouse`, 3);
        } else (!this._dragSelection.containsPosition(n2) || (Ry(t2.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(n2) || this._dragSelection.getStartPosition().equals(n2))) && (this._editor.pushUndoStop(), this._editor.executeCommand(_S2.ID, new Ly(this._dragSelection, n2, Ry(t2.event) || this._modifierPressed)), this._editor.pushUndoStop());
      }
      this._editor.updateOptions({
        mouseStyle: `text`
      }), this._removeDecoration(), this._dragSelection = null, this._mouseDown = false;
    }
    showAt(t2) {
      this._dndDecorationIds.set([
        {
          range: new P(t2.lineNumber, t2.column, t2.lineNumber, t2.column),
          options: _S2._DECORATION_OPTIONS
        }
      ]), this._editor.revealPosition(t2, 1);
    }
    _removeDecoration() {
      this._dndDecorationIds.clear();
    }
    _hitContent(e2) {
      return e2.type === 6 || e2.type === 7;
    }
    _hitMargin(e2) {
      return e2.type === 2 || e2.type === 3 || e2.type === 4;
    }
    dispose() {
      this._removeDecoration(), this._dragSelection = null, this._mouseDown = false, this._modifierPressed = false, super.dispose();
    }
  }, _S2.ID = `editor.contrib.dragAndDrop`, _S2.TRIGGER_KEY_VALUE = qs ? 6 : 5, _S2._DECORATION_OPTIONS = M.register({
    description: `dnd-target`,
    className: `dnd-target`
  }), _S2);
  X(zy.ID, zy, 2), X(Sf.ID, Sf, 0), sl(Nd), Y(new class extends Ae {
    constructor() {
      super({
        id: yf,
        precondition: bf,
        kbOpts: {
          weight: 100,
          primary: 2137
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      return (_a3 = Sf.get(t2)) == null ? void 0 : _a3.changePasteType();
    }
  }()), Y(new class extends Ae {
    constructor() {
      super({
        id: `editor.hidePasteWidget`,
        precondition: bf,
        kbOpts: {
          weight: 100,
          primary: 9
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = Sf.get(t2)) == null ? void 0 : _a3.clearWidgets();
    }
  }()), J((_T2 = class extends w {
    constructor() {
      super({
        id: `editor.action.pasteAs`,
        label: U(`pasteAs`, `Paste As...`),
        alias: `Paste As...`,
        precondition: T.writable,
        metadata: {
          description: `Paste as`,
          args: [
            {
              name: `args`,
              schema: _T2.argsSchema
            }
          ]
        }
      });
    }
    run(e2, t2, n2) {
      var _a3;
      let r2 = typeof (n2 == null ? void 0 : n2.kind) == `string` ? n2.kind : void 0;
      return !r2 && n2 && (r2 = typeof n2.id == `string` ? n2.id : void 0), (_a3 = Sf.get(t2)) == null ? void 0 : _a3.pasteAs(r2 ? new hd(r2) : void 0);
    }
  }, _T2.argsSchema = {
    type: `object`,
    properties: {
      kind: {
        type: `string`,
        description: U(`pasteAs.kind`, `The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.`)
      }
    }
  }, _T2)), J(class extends w {
    constructor() {
      super({
        id: `editor.action.pasteAsText`,
        label: U(`pasteAsText`, `Paste as Text`),
        alias: `Paste as Text`,
        precondition: T.writable
      });
    }
    run(e2, t2) {
      var _a3;
      return (_a3 = Sf.get(t2)) == null ? void 0 : _a3.pasteAs({
        providerId: Dd.id
      });
    }
  });
  var By = class {
    constructor() {
      this._dragOperations = /* @__PURE__ */ new Map();
    }
    removeDragOperationTransfer(e2) {
      if (e2 && this._dragOperations.has(e2)) {
        let t2 = this._dragOperations.get(e2);
        return this._dragOperations.delete(e2), t2;
      }
    }
  }, Vy = class {
    constructor(e2) {
      this.identifier = e2;
    }
  };
  const Hy = ca(`treeViewsDndService`);
  fl(Hy, By, 1);
  var Uy = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Wy = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Gy;
  const Ky = `editor.experimental.dropIntoEditor.defaultProvider`, qy = `editor.changeDropType`, Jy = new F(`dropWidgetVisible`, false, U(`dropWidgetVisible`, `Whether the drop widget is showing`));
  let Yy = (_U = class extends S {
    static get(e2) {
      return e2.getContribution(Gy.ID);
    }
    constructor(e2, t2, n2, r2, i2) {
      super(), this._configService = n2, this._languageFeaturesService = r2, this._treeViewsDragAndDropService = i2, this.treeItemsTransfer = yd.getInstance(), this._dropProgressManager = this._register(t2.createInstance(Qd, `dropIntoEditor`, e2)), this._postDropWidgetManager = this._register(t2.createInstance(hf, `dropIntoEditor`, e2, Jy, {
        id: qy,
        label: U(`postDropWidgetTitle`, `Show drop options...`)
      })), this._register(e2.onDropIntoEditor((t3) => this.onDropIntoEditor(e2, t3.position, t3.event)));
    }
    clearWidgets() {
      this._postDropWidgetManager.clear();
    }
    changeDropType() {
      this._postDropWidgetManager.tryShowSelector();
    }
    async onDropIntoEditor(e2, t2, n2) {
      var _a3;
      if (!n2.dataTransfer || !e2.hasModel()) return;
      (_a3 = this._currentOperation) == null ? void 0 : _a3.cancel(), e2.focus(), e2.setPosition(t2);
      let r2 = sa(async (i2) => {
        let a2 = new C(), o2 = a2.add(new Fe(e2, 1, void 0, i2));
        try {
          let r3 = await this.extractDataTransferData(n2);
          if (r3.size === 0 || o2.token.isCancellationRequested) return;
          let s2 = e2.getModel();
          if (!s2) return;
          let c2 = this._languageFeaturesService.documentDropEditProvider.ordered(s2).filter((e3) => e3.dropMimeTypes ? e3.dropMimeTypes.some((e4) => r3.matches(e4)) : true), l2 = a2.add(await this.getDropEdits(c2, s2, t2, r3, o2));
          if (o2.token.isCancellationRequested) return;
          if (l2.edits.length) {
            let n3 = this.getInitialActiveEditIndex(s2, l2.edits), r4 = e2.getOption(36).showDropSelector === `afterDrop`;
            await this._postDropWidgetManager.applyEditAndShowIfNeeded([
              P.fromPositions(t2)
            ], {
              activeEditIndex: n3,
              allEdits: l2.edits
            }, r4, async (e3) => e3, i2);
          }
        } finally {
          a2.dispose(), this._currentOperation === r2 && (this._currentOperation = void 0);
        }
      });
      this._dropProgressManager.showWhile(t2, U(`dropIntoEditorProgress`, `Running drop handlers. Click to cancel`), r2, {
        cancel: () => r2.cancel()
      }), this._currentOperation = r2;
    }
    async getDropEdits(e2, t2, n2, r2, i2) {
      let a2 = new C(), o2 = await nl(Promise.all(e2.map(async (e3) => {
        try {
          let o3 = await e3.provideDocumentDropEdits(t2, n2, r2, i2.token);
          return o3 && a2.add(o3), o3 == null ? void 0 : o3.edits.map((t3) => ({
            ...t3,
            providerId: e3.id
          }));
        } catch (e4) {
          console.error(e4);
        }
      })), i2.token), s2 = Wi(o2 ?? []).flat();
      return {
        edits: qd(s2),
        dispose: () => a2.dispose()
      };
    }
    getInitialActiveEditIndex(e2, t2) {
      let n2 = this._configService.getValue(Ky, {
        resource: e2.uri
      });
      for (let [e3, r2] of Object.entries(n2)) {
        let n3 = new hd(r2), i2 = t2.findIndex((t3) => n3.value === t3.providerId && t3.handledMimeType && fd(e3, [
          t3.handledMimeType
        ]));
        if (i2 >= 0) return i2;
      }
      return 0;
    }
    async extractDataTransferData(e2) {
      if (!e2.dataTransfer) return new ud();
      let t2 = Cd(e2.dataTransfer);
      if (this.treeItemsTransfer.hasData(Vy.prototype)) {
        let e3 = this.treeItemsTransfer.getData(Vy.prototype);
        if (Array.isArray(e3)) for (let n2 of e3) {
          let e4 = await this._treeViewsDragAndDropService.removeDragOperationTransfer(n2.identifier);
          if (e4) for (let [n3, r2] of e4) t2.replace(n3, r2);
        }
      }
      return t2;
    }
  }, Gy = _U, _U.ID = `editor.contrib.dropIntoEditorController`, _U);
  Yy = Gy = Uy([
    Wy(1, k),
    Wy(2, D),
    Wy(3, A),
    Wy(4, Hy)
  ], Yy), X(Yy.ID, Yy, 2), sl(Md), Y(new class extends Ae {
    constructor() {
      super({
        id: qy,
        precondition: Jy,
        kbOpts: {
          weight: 100,
          primary: 2137
        }
      });
    }
    runEditorCommand(e2, t2, n2) {
      var _a3;
      (_a3 = Yy.get(t2)) == null ? void 0 : _a3.changeDropType();
    }
  }()), Y(new class extends Ae {
    constructor() {
      super({
        id: `editor.hideDropWidget`,
        precondition: Jy,
        kbOpts: {
          weight: 100,
          primary: 9
        }
      });
    }
    runEditorCommand(e2, t2, n2) {
      var _a3;
      (_a3 = Yy.get(t2)) == null ? void 0 : _a3.clearWidgets();
    }
  }()), cr.as(We.Configuration).registerConfiguration({
    ...Ua,
    properties: {
      [Ky]: {
        type: `object`,
        scope: 5,
        description: U(`defaultProviderDescription`, `Configures the default drop provider to use for content of a given mime type.`),
        default: {},
        additionalProperties: {
          type: `string`
        }
      }
    }
  });
  var Xy = (_V = class {
    constructor(e2) {
      this._editor = e2, this._decorations = [], this._overviewRulerApproximateDecorations = [], this._findScopeDecorationIds = [], this._rangeHighlightDecorationId = null, this._highlightedDecorationId = null, this._startPosition = this._editor.getPosition();
    }
    dispose() {
      this._editor.removeDecorations(this._allDecorations()), this._decorations = [], this._overviewRulerApproximateDecorations = [], this._findScopeDecorationIds = [], this._rangeHighlightDecorationId = null, this._highlightedDecorationId = null;
    }
    reset() {
      this._decorations = [], this._overviewRulerApproximateDecorations = [], this._findScopeDecorationIds = [], this._rangeHighlightDecorationId = null, this._highlightedDecorationId = null;
    }
    getCount() {
      return this._decorations.length;
    }
    getFindScope() {
      return this._findScopeDecorationIds[0] ? this._editor.getModel().getDecorationRange(this._findScopeDecorationIds[0]) : null;
    }
    getFindScopes() {
      if (this._findScopeDecorationIds.length) {
        let e2 = this._findScopeDecorationIds.map((e3) => this._editor.getModel().getDecorationRange(e3)).filter((e3) => !!e3);
        if (e2.length) return e2;
      }
      return null;
    }
    getStartPosition() {
      return this._startPosition;
    }
    setStartPosition(e2) {
      this._startPosition = e2, this.setCurrentFindMatch(null);
    }
    _getDecorationIndex(e2) {
      let t2 = this._decorations.indexOf(e2);
      return t2 >= 0 ? t2 + 1 : 1;
    }
    getDecorationRangeAt(e2) {
      let t2 = e2 < this._decorations.length ? this._decorations[e2] : null;
      return t2 ? this._editor.getModel().getDecorationRange(t2) : null;
    }
    getCurrentMatchesPosition(t2) {
      let n2 = this._editor.getModel().getDecorationsInRange(t2);
      for (let t3 of n2) {
        let n3 = t3.options;
        if (n3 === _V._FIND_MATCH_DECORATION || n3 === _V._CURRENT_FIND_MATCH_DECORATION) return this._getDecorationIndex(t3.id);
      }
      return 0;
    }
    setCurrentFindMatch(t2) {
      let n2 = null, r2 = 0;
      if (t2) for (let e2 = 0, i2 = this._decorations.length; e2 < i2; e2++) {
        let i3 = this._editor.getModel().getDecorationRange(this._decorations[e2]);
        if (t2.equalsRange(i3)) {
          n2 = this._decorations[e2], r2 = e2 + 1;
          break;
        }
      }
      return (this._highlightedDecorationId !== null || n2 !== null) && this._editor.changeDecorations((t3) => {
        if (this._highlightedDecorationId !== null && (t3.changeDecorationOptions(this._highlightedDecorationId, _V._FIND_MATCH_DECORATION), this._highlightedDecorationId = null), n2 !== null && (this._highlightedDecorationId = n2, t3.changeDecorationOptions(this._highlightedDecorationId, _V._CURRENT_FIND_MATCH_DECORATION)), this._rangeHighlightDecorationId !== null && (t3.removeDecoration(this._rangeHighlightDecorationId), this._rangeHighlightDecorationId = null), n2 !== null) {
          let r3 = this._editor.getModel().getDecorationRange(n2);
          if (r3.startLineNumber !== r3.endLineNumber && r3.endColumn === 1) {
            let e2 = r3.endLineNumber - 1, t4 = this._editor.getModel().getLineMaxColumn(e2);
            r3 = new P(r3.startLineNumber, r3.startColumn, e2, t4);
          }
          this._rangeHighlightDecorationId = t3.addDecoration(r3, _V._RANGE_HIGHLIGHT_DECORATION);
        }
      }), r2;
    }
    set(t2, n2) {
      this._editor.changeDecorations((r2) => {
        let i2 = _V._FIND_MATCH_DECORATION, a2 = [];
        if (t2.length > 1e3) {
          i2 = _V._FIND_MATCH_NO_OVERVIEW_DECORATION;
          let n3 = this._editor.getModel().getLineCount(), r3 = this._editor.getLayoutInfo().height, o3 = r3 / n3, s2 = Math.max(2, Math.ceil(3 / o3)), c2 = t2[0].range.startLineNumber, l2 = t2[0].range.endLineNumber;
          for (let n4 = 1, r4 = t2.length; n4 < r4; n4++) {
            let r5 = t2[n4].range;
            l2 + s2 >= r5.startLineNumber ? r5.endLineNumber > l2 && (l2 = r5.endLineNumber) : (a2.push({
              range: new P(c2, 1, l2, 1),
              options: _V._FIND_MATCH_ONLY_OVERVIEW_DECORATION
            }), c2 = r5.startLineNumber, l2 = r5.endLineNumber);
          }
          a2.push({
            range: new P(c2, 1, l2, 1),
            options: _V._FIND_MATCH_ONLY_OVERVIEW_DECORATION
          });
        }
        let o2 = Array(t2.length);
        for (let e2 = 0, n3 = t2.length; e2 < n3; e2++) o2[e2] = {
          range: t2[e2].range,
          options: i2
        };
        this._decorations = r2.deltaDecorations(this._decorations, o2), this._overviewRulerApproximateDecorations = r2.deltaDecorations(this._overviewRulerApproximateDecorations, a2), this._rangeHighlightDecorationId && (r2.removeDecoration(this._rangeHighlightDecorationId), this._rangeHighlightDecorationId = null), this._findScopeDecorationIds.length && (this._findScopeDecorationIds.forEach((e2) => r2.removeDecoration(e2)), this._findScopeDecorationIds = []), (n2 == null ? void 0 : n2.length) && (this._findScopeDecorationIds = n2.map((t3) => r2.addDecoration(t3, _V._FIND_SCOPE_DECORATION)));
      });
    }
    matchBeforePosition(e2) {
      if (this._decorations.length === 0) return null;
      for (let t2 = this._decorations.length - 1; t2 >= 0; t2--) {
        let n2 = this._decorations[t2], r2 = this._editor.getModel().getDecorationRange(n2);
        if (!(!r2 || r2.endLineNumber > e2.lineNumber) && (r2.endLineNumber < e2.lineNumber || !(r2.endColumn > e2.column))) return r2;
      }
      return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);
    }
    matchAfterPosition(e2) {
      if (this._decorations.length === 0) return null;
      for (let t2 = 0, n2 = this._decorations.length; t2 < n2; t2++) {
        let n3 = this._decorations[t2], r2 = this._editor.getModel().getDecorationRange(n3);
        if (!(!r2 || r2.startLineNumber < e2.lineNumber) && (r2.startLineNumber > e2.lineNumber || !(r2.startColumn < e2.column))) return r2;
      }
      return this._editor.getModel().getDecorationRange(this._decorations[0]);
    }
    _allDecorations() {
      let e2 = [];
      return e2 = e2.concat(this._decorations), e2 = e2.concat(this._overviewRulerApproximateDecorations), this._findScopeDecorationIds.length && e2.push(...this._findScopeDecorationIds), this._rangeHighlightDecorationId && e2.push(this._rangeHighlightDecorationId), e2;
    }
  }, _V._CURRENT_FIND_MATCH_DECORATION = M.register({
    description: `current-find-match`,
    stickiness: 1,
    zIndex: 13,
    className: `currentFindMatch`,
    inlineClassName: `currentFindMatchInline`,
    showIfCollapsed: true,
    overviewRuler: {
      color: zl(Jc),
      position: qn.Center
    },
    minimap: {
      color: zl(kc),
      position: 1
    }
  }), _V._FIND_MATCH_DECORATION = M.register({
    description: `find-match`,
    stickiness: 1,
    zIndex: 10,
    className: `findMatch`,
    inlineClassName: `findMatchInline`,
    showIfCollapsed: true,
    overviewRuler: {
      color: zl(Jc),
      position: qn.Center
    },
    minimap: {
      color: zl(kc),
      position: 1
    }
  }), _V._FIND_MATCH_NO_OVERVIEW_DECORATION = M.register({
    description: `find-match-no-overview`,
    stickiness: 1,
    className: `findMatch`,
    showIfCollapsed: true
  }), _V._FIND_MATCH_ONLY_OVERVIEW_DECORATION = M.register({
    description: `find-match-only-overview`,
    stickiness: 1,
    overviewRuler: {
      color: zl(Jc),
      position: qn.Center
    }
  }), _V._RANGE_HIGHLIGHT_DECORATION = M.register({
    description: `find-range-highlight`,
    stickiness: 1,
    className: `rangeHighlight`,
    isWholeLine: true
  }), _V._FIND_SCOPE_DECORATION = M.register({
    description: `find-scope`,
    className: `findScope`,
    isWholeLine: true
  }), _V), Zy = class {
    constructor(e2, t2, n2) {
      this._editorSelection = e2, this._ranges = t2, this._replaceStrings = n2, this._trackedEditorSelectionId = null;
    }
    getEditOperations(e2, t2) {
      if (this._ranges.length > 0) {
        let e3 = [];
        for (let t3 = 0; t3 < this._ranges.length; t3++) e3.push({
          range: this._ranges[t3],
          text: this._replaceStrings[t3]
        });
        e3.sort((e4, t3) => P.compareRangesUsingStarts(e4.range, t3.range));
        let n2 = [], r2 = e3[0];
        for (let t3 = 1; t3 < e3.length; t3++) r2.range.endLineNumber === e3[t3].range.startLineNumber && r2.range.endColumn === e3[t3].range.startColumn ? (r2.range = r2.range.plusRange(e3[t3].range), r2.text += e3[t3].text) : (n2.push(r2), r2 = e3[t3]);
        n2.push(r2);
        for (let e4 of n2) t2.addEditOperation(e4.range, e4.text);
      }
      this._trackedEditorSelectionId = t2.trackSelection(this._editorSelection);
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this._trackedEditorSelectionId);
    }
  };
  function Qy(e2, t2) {
    if (e2 && e2[0] !== ``) {
      let n2 = $y(e2, t2, `-`), r2 = $y(e2, t2, `_`);
      return n2 && !r2 ? eb(e2, t2, `-`) : !n2 && r2 ? eb(e2, t2, `_`) : e2[0].toUpperCase() === e2[0] ? t2.toUpperCase() : e2[0].toLowerCase() === e2[0] ? t2.toLowerCase() : ea(e2[0][0]) && t2.length > 0 ? t2[0].toUpperCase() + t2.substr(1) : e2[0][0].toUpperCase() !== e2[0][0] && t2.length > 0 ? t2[0].toLowerCase() + t2.substr(1) : t2;
    } else return t2;
  }
  function $y(e2, t2, n2) {
    let r2 = e2[0].indexOf(n2) !== -1 && t2.indexOf(n2) !== -1;
    return r2 && e2[0].split(n2).length === t2.split(n2).length;
  }
  function eb(e2, t2, n2) {
    let r2 = t2.split(n2), i2 = e2[0].split(n2), a2 = ``;
    return r2.forEach((e3, t3) => {
      a2 += Qy([
        i2[t3]
      ], e3) + n2;
    }), a2.slice(0, -1);
  }
  var tb = class {
    constructor(e2) {
      this.staticValue = e2, this.kind = 0;
    }
  }, nb = class {
    constructor(e2) {
      this.pieces = e2, this.kind = 1;
    }
  }, rb = class e2 {
    static fromStaticValue(t2) {
      return new e2([
        ib.staticValue(t2)
      ]);
    }
    get hasReplacementPatterns() {
      return this._state.kind === 1;
    }
    constructor(e3) {
      !e3 || e3.length === 0 ? this._state = new tb(``) : e3.length === 1 && e3[0].staticValue !== null ? this._state = new tb(e3[0].staticValue) : this._state = new nb(e3);
    }
    buildReplaceString(t2, n2) {
      if (this._state.kind === 0) return n2 ? Qy(t2, this._state.staticValue) : this._state.staticValue;
      let r2 = ``;
      for (let n3 = 0, i2 = this._state.pieces.length; n3 < i2; n3++) {
        let i3 = this._state.pieces[n3];
        if (i3.staticValue !== null) {
          r2 += i3.staticValue;
          continue;
        }
        let a2 = e2._substitute(i3.matchIndex, t2);
        if (i3.caseOps !== null && i3.caseOps.length > 0) {
          let e3 = [], t3 = i3.caseOps.length, n4 = 0;
          for (let r3 = 0, o2 = a2.length; r3 < o2; r3++) {
            if (n4 >= t3) {
              e3.push(a2.slice(r3));
              break;
            }
            switch (i3.caseOps[n4]) {
              case `U`:
                e3.push(a2[r3].toUpperCase());
                break;
              case `u`:
                e3.push(a2[r3].toUpperCase()), n4++;
                break;
              case `L`:
                e3.push(a2[r3].toLowerCase());
                break;
              case `l`:
                e3.push(a2[r3].toLowerCase()), n4++;
                break;
              default:
                e3.push(a2[r3]);
            }
          }
          a2 = e3.join(``);
        }
        r2 += a2;
      }
      return r2;
    }
    static _substitute(e3, t2) {
      if (t2 === null) return ``;
      if (e3 === 0) return t2[0];
      let n2 = ``;
      for (; e3 > 0; ) {
        if (e3 < t2.length) {
          let r2 = t2[e3] || ``;
          return r2 + n2;
        }
        n2 = String(e3 % 10) + n2, e3 = Math.floor(e3 / 10);
      }
      return `$` + n2;
    }
  }, ib = class e2 {
    static staticValue(t2) {
      return new e2(t2, -1, null);
    }
    static caseOps(t2, n2) {
      return new e2(null, t2, n2);
    }
    constructor(e3, t2, n2) {
      this.staticValue = e3, this.matchIndex = t2, !n2 || n2.length === 0 ? this.caseOps = null : this.caseOps = n2.slice(0);
    }
  }, ab = class {
    constructor(e2) {
      this._source = e2, this._lastCharIndex = 0, this._result = [], this._resultLen = 0, this._currentStaticPiece = ``;
    }
    emitUnchanged(e2) {
      this._emitStatic(this._source.substring(this._lastCharIndex, e2)), this._lastCharIndex = e2;
    }
    emitStatic(e2, t2) {
      this._emitStatic(e2), this._lastCharIndex = t2;
    }
    _emitStatic(e2) {
      e2.length !== 0 && (this._currentStaticPiece += e2);
    }
    emitMatchIndex(e2, t2, n2) {
      this._currentStaticPiece.length !== 0 && (this._result[this._resultLen++] = ib.staticValue(this._currentStaticPiece), this._currentStaticPiece = ``), this._result[this._resultLen++] = ib.caseOps(e2, n2), this._lastCharIndex = t2;
    }
    finalize() {
      return this.emitUnchanged(this._source.length), this._currentStaticPiece.length !== 0 && (this._result[this._resultLen++] = ib.staticValue(this._currentStaticPiece), this._currentStaticPiece = ``), new rb(this._result);
    }
  };
  function ob(e2) {
    if (!e2 || e2.length === 0) return new rb(null);
    let t2 = [], n2 = new ab(e2);
    for (let r2 = 0, i2 = e2.length; r2 < i2; r2++) {
      let a2 = e2.charCodeAt(r2);
      if (a2 === 92) {
        if (r2++, r2 >= i2) break;
        let a3 = e2.charCodeAt(r2);
        switch (a3) {
          case 92:
            n2.emitUnchanged(r2 - 1), n2.emitStatic(`\\`, r2 + 1);
            break;
          case 110:
            n2.emitUnchanged(r2 - 1), n2.emitStatic(`
`, r2 + 1);
            break;
          case 116:
            n2.emitUnchanged(r2 - 1), n2.emitStatic(`	`, r2 + 1);
            break;
          case 117:
          case 85:
          case 108:
          case 76:
            n2.emitUnchanged(r2 - 1), n2.emitStatic(``, r2 + 1), t2.push(String.fromCharCode(a3));
            break;
        }
        continue;
      }
      if (a2 === 36) {
        if (r2++, r2 >= i2) break;
        let a3 = e2.charCodeAt(r2);
        if (a3 === 36) {
          n2.emitUnchanged(r2 - 1), n2.emitStatic(`$`, r2 + 1);
          continue;
        }
        if (a3 === 48 || a3 === 38) {
          n2.emitUnchanged(r2 - 1), n2.emitMatchIndex(0, r2 + 1, t2), t2.length = 0;
          continue;
        }
        if (49 <= a3 && a3 <= 57) {
          let o2 = a3 - 48;
          if (r2 + 1 < i2) {
            let i3 = e2.charCodeAt(r2 + 1);
            if (48 <= i3 && i3 <= 57) {
              r2++, o2 = o2 * 10 + (i3 - 48), n2.emitUnchanged(r2 - 2), n2.emitMatchIndex(o2, r2 + 1, t2), t2.length = 0;
              continue;
            }
          }
          n2.emitUnchanged(r2 - 1), n2.emitMatchIndex(o2, r2 + 1, t2), t2.length = 0;
          continue;
        }
      }
    }
    return n2.finalize();
  }
  const sb = new F(`findWidgetVisible`, false), cb = sb.toNegated(), lb = new F(`findInputFocussed`, false), ub = new F(`replaceInputFocussed`, false), db = {
    primary: 545,
    mac: {
      primary: 2593
    }
  }, fb = {
    primary: 565,
    mac: {
      primary: 2613
    }
  }, pb = {
    primary: 560,
    mac: {
      primary: 2608
    }
  }, mb = {
    primary: 554,
    mac: {
      primary: 2602
    }
  }, hb = {
    primary: 558,
    mac: {
      primary: 2606
    }
  }, Q = {
    StartFindAction: `actions.find`,
    StartFindWithSelection: `actions.findWithSelection`,
    StartFindWithArgs: `editor.actions.findWithArgs`,
    NextMatchFindAction: `editor.action.nextMatchFindAction`,
    PreviousMatchFindAction: `editor.action.previousMatchFindAction`,
    GoToMatchFindAction: `editor.action.goToMatchFindAction`,
    NextSelectionMatchFindAction: `editor.action.nextSelectionMatchFindAction`,
    PreviousSelectionMatchFindAction: `editor.action.previousSelectionMatchFindAction`,
    StartFindReplaceAction: `editor.action.startFindReplaceAction`,
    CloseFindWidgetCommand: `closeFindWidget`,
    ToggleCaseSensitiveCommand: `toggleFindCaseSensitive`,
    ToggleWholeWordCommand: `toggleFindWholeWord`,
    ToggleRegexCommand: `toggleFindRegex`,
    ToggleSearchScopeCommand: `toggleFindInSelection`,
    TogglePreserveCaseCommand: `togglePreserveCase`,
    ReplaceOneAction: `editor.action.replaceOne`,
    ReplaceAllAction: `editor.action.replaceAll`,
    SelectAllMatchesAction: `editor.action.selectAllMatches`
  }, gb = 19999, _b = 240;
  var vb = class e2 {
    constructor(e3, t2) {
      this._toDispose = new C(), this._editor = e3, this._state = t2, this._isDisposed = false, this._startSearchingTimer = new Jr(), this._decorations = new Xy(e3), this._toDispose.add(this._decorations), this._updateDecorationsScheduler = new hr(() => {
        if (this._editor.hasModel()) return this.research(false);
      }, 100), this._toDispose.add(this._updateDecorationsScheduler), this._toDispose.add(this._editor.onDidChangeCursorPosition((e4) => {
        (e4.reason === 3 || e4.reason === 5 || e4.reason === 6) && this._decorations.setStartPosition(this._editor.getPosition());
      })), this._ignoreModelContentChanged = false, this._toDispose.add(this._editor.onDidChangeModelContent((e4) => {
        this._ignoreModelContentChanged || (e4.isFlush && this._decorations.reset(), this._decorations.setStartPosition(this._editor.getPosition()), this._updateDecorationsScheduler.schedule());
      })), this._toDispose.add(this._state.onFindReplaceStateChange((e4) => this._onStateChanged(e4))), this.research(false, this._state.searchScope);
    }
    dispose() {
      this._isDisposed = true, Ra(this._startSearchingTimer), this._toDispose.dispose();
    }
    _onStateChanged(e3) {
      if (!this._isDisposed && this._editor.hasModel() && (e3.searchString || e3.isReplaceRevealed || e3.isRegex || e3.wholeWord || e3.matchCase || e3.searchScope)) {
        let t2 = this._editor.getModel();
        t2.isTooLargeForSyncing() ? (this._startSearchingTimer.cancel(), this._startSearchingTimer.setIfNotSet(() => {
          e3.searchScope ? this.research(e3.moveCursor, this._state.searchScope) : this.research(e3.moveCursor);
        }, _b)) : e3.searchScope ? this.research(e3.moveCursor, this._state.searchScope) : this.research(e3.moveCursor);
      }
    }
    static _getSearchRange(e3, t2) {
      return t2 || e3.getFullModelRange();
    }
    research(e3, t2) {
      let n2 = null;
      t2 === void 0 ? n2 = this._decorations.getFindScopes() : t2 !== null && (n2 = Array.isArray(t2) ? t2 : [
        t2
      ]), n2 !== null && (n2 = n2.map((e4) => {
        if (e4.startLineNumber !== e4.endLineNumber) {
          let t3 = e4.endLineNumber;
          return e4.endColumn === 1 && --t3, new P(e4.startLineNumber, 1, t3, this._editor.getModel().getLineMaxColumn(t3));
        }
        return e4;
      }));
      let r2 = this._findMatches(n2, false, gb);
      this._decorations.set(r2, n2);
      let i2 = this._editor.getSelection(), a2 = this._decorations.getCurrentMatchesPosition(i2);
      if (a2 === 0 && r2.length > 0) {
        let e4 = xo(r2.map((e5) => e5.range), (e5) => P.compareRangesUsingStarts(e5, i2) >= 0);
        a2 = e4 > 0 ? e4 - 1 + 1 : a2;
      }
      this._state.changeMatchInfo(a2, this._decorations.getCount(), void 0), e3 && this._editor.getOption(41).cursorMoveOnType && this._moveToNextMatch(this._decorations.getStartPosition());
    }
    _hasMatches() {
      return this._state.matchesCount > 0;
    }
    _cannotFind() {
      if (!this._hasMatches()) {
        let e3 = this._decorations.getFindScope();
        return e3 && this._editor.revealRangeInCenterIfOutsideViewport(e3, 0), true;
      }
      return false;
    }
    _setCurrentFindMatch(e3) {
      let t2 = this._decorations.setCurrentFindMatch(e3);
      this._state.changeMatchInfo(t2, this._decorations.getCount(), e3), this._editor.setSelection(e3), this._editor.revealRangeInCenterIfOutsideViewport(e3, 0);
    }
    _prevSearchPosition(e3) {
      let t2 = this._state.isRegex && (this._state.searchString.indexOf(`^`) >= 0 || this._state.searchString.indexOf(`$`) >= 0), { lineNumber: n2, column: r2 } = e3, i2 = this._editor.getModel();
      return t2 || r2 === 1 ? (n2 === 1 ? n2 = i2.getLineCount() : n2--, r2 = i2.getLineMaxColumn(n2)) : r2--, new N(n2, r2);
    }
    _moveToPrevMatch(t2, n2 = false) {
      if (!this._state.canNavigateBack()) {
        let e3 = this._decorations.matchAfterPosition(t2);
        e3 && this._setCurrentFindMatch(e3);
        return;
      }
      if (this._decorations.getCount() < gb) {
        let e3 = this._decorations.matchBeforePosition(t2);
        e3 && e3.isEmpty() && e3.getStartPosition().equals(t2) && (t2 = this._prevSearchPosition(t2), e3 = this._decorations.matchBeforePosition(t2)), e3 && this._setCurrentFindMatch(e3);
        return;
      }
      if (this._cannotFind()) return;
      let r2 = this._decorations.getFindScope(), i2 = e2._getSearchRange(this._editor.getModel(), r2);
      i2.getEndPosition().isBefore(t2) && (t2 = i2.getEndPosition()), t2.isBefore(i2.getStartPosition()) && (t2 = i2.getEndPosition());
      let { lineNumber: a2, column: o2 } = t2, s2 = this._editor.getModel(), c2 = new N(a2, o2), l2 = s2.findPreviousMatch(this._state.searchString, c2, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null, false);
      if (l2 && l2.range.isEmpty() && l2.range.getStartPosition().equals(c2) && (c2 = this._prevSearchPosition(c2), l2 = s2.findPreviousMatch(this._state.searchString, c2, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null, false)), l2) {
        if (!n2 && !i2.containsRange(l2.range)) return this._moveToPrevMatch(l2.range.getStartPosition(), true);
        this._setCurrentFindMatch(l2.range);
      }
    }
    moveToPrevMatch() {
      this._moveToPrevMatch(this._editor.getSelection().getStartPosition());
    }
    _nextSearchPosition(e3) {
      let t2 = this._state.isRegex && (this._state.searchString.indexOf(`^`) >= 0 || this._state.searchString.indexOf(`$`) >= 0), { lineNumber: n2, column: r2 } = e3, i2 = this._editor.getModel();
      return t2 || r2 === i2.getLineMaxColumn(n2) ? (n2 === i2.getLineCount() ? n2 = 1 : n2++, r2 = 1) : r2++, new N(n2, r2);
    }
    _moveToNextMatch(e3) {
      if (!this._state.canNavigateForward()) {
        let t3 = this._decorations.matchBeforePosition(e3);
        t3 && this._setCurrentFindMatch(t3);
        return;
      }
      if (this._decorations.getCount() < gb) {
        let t3 = this._decorations.matchAfterPosition(e3);
        t3 && t3.isEmpty() && t3.getStartPosition().equals(e3) && (e3 = this._nextSearchPosition(e3), t3 = this._decorations.matchAfterPosition(e3)), t3 && this._setCurrentFindMatch(t3);
        return;
      }
      let t2 = this._getNextMatch(e3, false, true);
      t2 && this._setCurrentFindMatch(t2.range);
    }
    _getNextMatch(t2, n2, r2, i2 = false) {
      if (this._cannotFind()) return null;
      let a2 = this._decorations.getFindScope(), o2 = e2._getSearchRange(this._editor.getModel(), a2);
      o2.getEndPosition().isBefore(t2) && (t2 = o2.getStartPosition()), t2.isBefore(o2.getStartPosition()) && (t2 = o2.getStartPosition());
      let { lineNumber: s2, column: c2 } = t2, l2 = this._editor.getModel(), u2 = new N(s2, c2), d2 = l2.findNextMatch(this._state.searchString, u2, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null, n2);
      return r2 && d2 && d2.range.isEmpty() && d2.range.getStartPosition().equals(u2) && (u2 = this._nextSearchPosition(u2), d2 = l2.findNextMatch(this._state.searchString, u2, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null, n2)), d2 ? !i2 && !o2.containsRange(d2.range) ? this._getNextMatch(d2.range.getEndPosition(), n2, r2, true) : d2 : null;
    }
    moveToNextMatch() {
      this._moveToNextMatch(this._editor.getSelection().getEndPosition());
    }
    _moveToMatch(e3) {
      let t2 = this._decorations.getDecorationRangeAt(e3);
      t2 && this._setCurrentFindMatch(t2);
    }
    moveToMatch(e3) {
      this._moveToMatch(e3);
    }
    _getReplacePattern() {
      return this._state.isRegex ? ob(this._state.replaceString) : rb.fromStaticValue(this._state.replaceString);
    }
    replace() {
      if (!this._hasMatches()) return;
      let e3 = this._getReplacePattern(), t2 = this._editor.getSelection(), n2 = this._getNextMatch(t2.getStartPosition(), true, false);
      if (n2) if (t2.equalsRange(n2.range)) {
        let r2 = e3.buildReplaceString(n2.matches, this._state.preserveCase), i2 = new ur(t2, r2);
        this._executeEditorCommand(`replace`, i2), this._decorations.setStartPosition(new N(t2.startLineNumber, t2.startColumn + r2.length)), this.research(true);
      } else this._decorations.setStartPosition(this._editor.getPosition()), this._setCurrentFindMatch(n2.range);
    }
    _findMatches(t2, n2, r2) {
      let i2 = (t2 || [
        null
      ]).map((t3) => e2._getSearchRange(this._editor.getModel(), t3));
      return this._editor.getModel().findMatches(this._state.searchString, i2, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null, n2, r2);
    }
    replaceAll() {
      if (!this._hasMatches()) return;
      let e3 = this._decorations.getFindScopes();
      e3 === null && this._state.matchesCount >= gb ? this._largeReplaceAll() : this._regularReplaceAll(e3), this.research(false);
    }
    _largeReplaceAll() {
      let e3 = new yr(this._state.searchString, this._state.isRegex, this._state.matchCase, this._state.wholeWord ? this._editor.getOption(132) : null), t2 = e3.parseSearchRequest();
      if (!t2) return;
      let n2 = t2.regex;
      if (!n2.multiline) {
        let e4 = `mu`;
        n2.ignoreCase && (e4 += `i`), n2.global && (e4 += `g`), n2 = new RegExp(n2.source, e4);
      }
      let r2 = this._editor.getModel(), i2 = r2.getValue(1), a2 = r2.getFullModelRange(), o2 = this._getReplacePattern(), s2, c2 = this._state.preserveCase;
      s2 = o2.hasReplacementPatterns || c2 ? i2.replace(n2, function() {
        return o2.buildReplaceString(arguments, c2);
      }) : i2.replace(n2, o2.buildReplaceString(null, c2));
      let l2 = new dr(a2, s2, this._editor.getSelection());
      this._executeEditorCommand(`replaceAll`, l2);
    }
    _regularReplaceAll(e3) {
      let t2 = this._getReplacePattern(), n2 = this._findMatches(e3, t2.hasReplacementPatterns || this._state.preserveCase, 1073741824), r2 = [];
      for (let e4 = 0, i3 = n2.length; e4 < i3; e4++) r2[e4] = t2.buildReplaceString(n2[e4].matches, this._state.preserveCase);
      let i2 = new Zy(this._editor.getSelection(), n2.map((e4) => e4.range), r2);
      this._executeEditorCommand(`replaceAll`, i2);
    }
    selectAllMatches() {
      if (!this._hasMatches()) return;
      let e3 = this._decorations.getFindScopes(), t2 = this._findMatches(e3, false, 1073741824), n2 = t2.map((e4) => new I(e4.range.startLineNumber, e4.range.startColumn, e4.range.endLineNumber, e4.range.endColumn)), r2 = this._editor.getSelection();
      for (let e4 = 0, t3 = n2.length; e4 < t3; e4++) {
        let t4 = n2[e4];
        if (t4.equalsRange(r2)) {
          n2 = [
            r2
          ].concat(n2.slice(0, e4), n2.slice(e4 + 1));
          break;
        }
      }
      this._editor.setSelections(n2);
    }
    _executeEditorCommand(e3, t2) {
      try {
        this._ignoreModelContentChanged = true, this._editor.pushUndoStop(), this._editor.executeCommand(e3, t2), this._editor.pushUndoStop();
      } finally {
        this._ignoreModelContentChanged = false;
      }
    }
  }, yb = (_W = class extends li {
    constructor(e2, t2, n2) {
      super(), this._hideSoon = this._register(new hr(() => this._hide(), 2e3)), this._isVisible = false, this._editor = e2, this._state = t2, this._keybindingService = n2, this._domNode = document.createElement(`div`), this._domNode.className = `findOptionsWidget`, this._domNode.style.display = `none`, this._domNode.style.top = `10px`, this._domNode.style.zIndex = `12`, this._domNode.setAttribute(`role`, `presentation`), this._domNode.setAttribute(`aria-hidden`, `true`);
      let r2 = {
        inputActiveOptionBorder: ki(ms),
        inputActiveOptionForeground: ki(hs),
        inputActiveOptionBackground: ki(ps)
      }, i2 = this._register(la());
      this.caseSensitive = this._register(new ee({
        appendTitle: this._keybindingLabelFor(Q.ToggleCaseSensitiveCommand),
        isChecked: this._state.matchCase,
        hoverDelegate: i2,
        ...r2
      })), this._domNode.appendChild(this.caseSensitive.domNode), this._register(this.caseSensitive.onChange(() => {
        this._state.change({
          matchCase: this.caseSensitive.checked
        }, false);
      })), this.wholeWords = this._register(new ci({
        appendTitle: this._keybindingLabelFor(Q.ToggleWholeWordCommand),
        isChecked: this._state.wholeWord,
        hoverDelegate: i2,
        ...r2
      })), this._domNode.appendChild(this.wholeWords.domNode), this._register(this.wholeWords.onChange(() => {
        this._state.change({
          wholeWord: this.wholeWords.checked
        }, false);
      })), this.regex = this._register(new sr({
        appendTitle: this._keybindingLabelFor(Q.ToggleRegexCommand),
        isChecked: this._state.isRegex,
        hoverDelegate: i2,
        ...r2
      })), this._domNode.appendChild(this.regex.domNode), this._register(this.regex.onChange(() => {
        this._state.change({
          isRegex: this.regex.checked
        }, false);
      })), this._editor.addOverlayWidget(this), this._register(this._state.onFindReplaceStateChange((e3) => {
        let t3 = false;
        e3.isRegex && (this.regex.checked = this._state.isRegex, t3 = true), e3.wholeWord && (this.wholeWords.checked = this._state.wholeWord, t3 = true), e3.matchCase && (this.caseSensitive.checked = this._state.matchCase, t3 = true), !this._state.isRevealed && t3 && this._revealTemporarily();
      })), this._register(z(this._domNode, He.MOUSE_LEAVE, (e3) => this._onMouseLeave())), this._register(z(this._domNode, `mouseover`, (e3) => this._onMouseOver()));
    }
    _keybindingLabelFor(e2) {
      let t2 = this._keybindingService.lookupKeybinding(e2);
      return t2 ? ` (${t2.getLabel()})` : ``;
    }
    dispose() {
      this._editor.removeOverlayWidget(this), super.dispose();
    }
    getId() {
      return _W.ID;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return {
        preference: 0
      };
    }
    highlightFindOptions() {
      this._revealTemporarily();
    }
    _revealTemporarily() {
      this._show(), this._hideSoon.schedule();
    }
    _onMouseLeave() {
      this._hideSoon.schedule();
    }
    _onMouseOver() {
      this._hideSoon.cancel();
    }
    _show() {
      this._isVisible || (this._isVisible = true, this._domNode.style.display = `block`);
    }
    _hide() {
      this._isVisible && (this._isVisible = false, this._domNode.style.display = `none`);
    }
  }, _W.ID = `editor.contrib.findOptionsWidget`, _W);
  function bb(e2, t2) {
    return e2 === 1 ? true : e2 === 2 ? false : t2;
  }
  var xb = class extends S {
    get searchString() {
      return this._searchString;
    }
    get replaceString() {
      return this._replaceString;
    }
    get isRevealed() {
      return this._isRevealed;
    }
    get isReplaceRevealed() {
      return this._isReplaceRevealed;
    }
    get isRegex() {
      return bb(this._isRegexOverride, this._isRegex);
    }
    get wholeWord() {
      return bb(this._wholeWordOverride, this._wholeWord);
    }
    get matchCase() {
      return bb(this._matchCaseOverride, this._matchCase);
    }
    get preserveCase() {
      return bb(this._preserveCaseOverride, this._preserveCase);
    }
    get actualIsRegex() {
      return this._isRegex;
    }
    get actualWholeWord() {
      return this._wholeWord;
    }
    get actualMatchCase() {
      return this._matchCase;
    }
    get actualPreserveCase() {
      return this._preserveCase;
    }
    get searchScope() {
      return this._searchScope;
    }
    get matchesPosition() {
      return this._matchesPosition;
    }
    get matchesCount() {
      return this._matchesCount;
    }
    get currentMatch() {
      return this._currentMatch;
    }
    constructor() {
      super(), this._onFindReplaceStateChange = this._register(new E()), this.onFindReplaceStateChange = this._onFindReplaceStateChange.event, this._searchString = ``, this._replaceString = ``, this._isRevealed = false, this._isReplaceRevealed = false, this._isRegex = false, this._isRegexOverride = 0, this._wholeWord = false, this._wholeWordOverride = 0, this._matchCase = false, this._matchCaseOverride = 0, this._preserveCase = false, this._preserveCaseOverride = 0, this._searchScope = null, this._matchesPosition = 0, this._matchesCount = 0, this._currentMatch = null, this._loop = true, this._isSearching = false, this._filters = null;
    }
    changeMatchInfo(e2, t2, n2) {
      let r2 = {
        moveCursor: false,
        updateHistory: false,
        searchString: false,
        replaceString: false,
        isRevealed: false,
        isReplaceRevealed: false,
        isRegex: false,
        wholeWord: false,
        matchCase: false,
        preserveCase: false,
        searchScope: false,
        matchesPosition: false,
        matchesCount: false,
        currentMatch: false,
        loop: false,
        isSearching: false,
        filters: false
      }, i2 = false;
      t2 === 0 && (e2 = 0), e2 > t2 && (e2 = t2), this._matchesPosition !== e2 && (this._matchesPosition = e2, r2.matchesPosition = true, i2 = true), this._matchesCount !== t2 && (this._matchesCount = t2, r2.matchesCount = true, i2 = true), n2 !== void 0 && (P.equalsRange(this._currentMatch, n2) || (this._currentMatch = n2, r2.currentMatch = true, i2 = true)), i2 && this._onFindReplaceStateChange.fire(r2);
    }
    change(e2, t2, n2 = true) {
      var _a3;
      let r2 = {
        moveCursor: t2,
        updateHistory: n2,
        searchString: false,
        replaceString: false,
        isRevealed: false,
        isReplaceRevealed: false,
        isRegex: false,
        wholeWord: false,
        matchCase: false,
        preserveCase: false,
        searchScope: false,
        matchesPosition: false,
        matchesCount: false,
        currentMatch: false,
        loop: false,
        isSearching: false,
        filters: false
      }, i2 = false, a2 = this.isRegex, o2 = this.wholeWord, s2 = this.matchCase, c2 = this.preserveCase;
      e2.searchString !== void 0 && this._searchString !== e2.searchString && (this._searchString = e2.searchString, r2.searchString = true, i2 = true), e2.replaceString !== void 0 && this._replaceString !== e2.replaceString && (this._replaceString = e2.replaceString, r2.replaceString = true, i2 = true), e2.isRevealed !== void 0 && this._isRevealed !== e2.isRevealed && (this._isRevealed = e2.isRevealed, r2.isRevealed = true, i2 = true), e2.isReplaceRevealed !== void 0 && this._isReplaceRevealed !== e2.isReplaceRevealed && (this._isReplaceRevealed = e2.isReplaceRevealed, r2.isReplaceRevealed = true, i2 = true), e2.isRegex !== void 0 && (this._isRegex = e2.isRegex), e2.wholeWord !== void 0 && (this._wholeWord = e2.wholeWord), e2.matchCase !== void 0 && (this._matchCase = e2.matchCase), e2.preserveCase !== void 0 && (this._preserveCase = e2.preserveCase), e2.searchScope !== void 0 && (((_a3 = e2.searchScope) == null ? void 0 : _a3.every((e3) => {
        var _a4;
        return (_a4 = this._searchScope) == null ? void 0 : _a4.some((t3) => !P.equalsRange(t3, e3));
      })) || (this._searchScope = e2.searchScope, r2.searchScope = true, i2 = true)), e2.loop !== void 0 && this._loop !== e2.loop && (this._loop = e2.loop, r2.loop = true, i2 = true), e2.isSearching !== void 0 && this._isSearching !== e2.isSearching && (this._isSearching = e2.isSearching, r2.isSearching = true, i2 = true), e2.filters !== void 0 && (this._filters ? this._filters.update(e2.filters) : this._filters = e2.filters, r2.filters = true, i2 = true), this._isRegexOverride = e2.isRegexOverride === void 0 ? 0 : e2.isRegexOverride, this._wholeWordOverride = e2.wholeWordOverride === void 0 ? 0 : e2.wholeWordOverride, this._matchCaseOverride = e2.matchCaseOverride === void 0 ? 0 : e2.matchCaseOverride, this._preserveCaseOverride = e2.preserveCaseOverride === void 0 ? 0 : e2.preserveCaseOverride, a2 !== this.isRegex && (i2 = true, r2.isRegex = true), o2 !== this.wholeWord && (i2 = true, r2.wholeWord = true), s2 !== this.matchCase && (i2 = true, r2.matchCase = true), c2 !== this.preserveCase && (i2 = true, r2.preserveCase = true), i2 && this._onFindReplaceStateChange.fire(r2);
    }
    canNavigateBack() {
      return this.canNavigateInLoop() || this.matchesPosition !== 1;
    }
    canNavigateForward() {
      return this.canNavigateInLoop() || this.matchesPosition < this.matchesCount;
    }
    canNavigateInLoop() {
      return this._loop || this.matchesCount >= gb;
    }
  };
  const Sb = U(`defaultLabel`, `input`), Cb = U(`label.preserveCaseToggle`, `Preserve Case`);
  var wb = class extends Yr {
    constructor(e2) {
      super({
        icon: _.preserveCase,
        title: Cb + e2.appendTitle,
        isChecked: e2.isChecked,
        hoverDelegate: e2.hoverDelegate ?? Bo(`element`),
        inputActiveOptionBorder: e2.inputActiveOptionBorder,
        inputActiveOptionForeground: e2.inputActiveOptionForeground,
        inputActiveOptionBackground: e2.inputActiveOptionBackground
      });
    }
  }, Tb = class extends li {
    constructor(e2, t2, n2, r2) {
      super(), this._showOptionButtons = n2, this.fixFocusOnOptionClickEnabled = true, this.cachedOptionsWidth = 0, this._onDidOptionChange = this._register(new E()), this.onDidOptionChange = this._onDidOptionChange.event, this._onKeyDown = this._register(new E()), this.onKeyDown = this._onKeyDown.event, this._onMouseDown = this._register(new E()), this._onInput = this._register(new E()), this._onKeyUp = this._register(new E()), this._onPreserveCaseKeyDown = this._register(new E()), this.onPreserveCaseKeyDown = this._onPreserveCaseKeyDown.event, this.contextViewProvider = t2, this.placeholder = r2.placeholder || ``, this.validation = r2.validation, this.label = r2.label || Sb;
      let i2 = r2.appendPreserveCaseLabel || ``, a2 = r2.history || [], o2 = !!r2.flexibleHeight, s2 = !!r2.flexibleWidth, c2 = r2.flexibleMaxHeight;
      this.domNode = document.createElement(`div`), this.domNode.classList.add(`monaco-findInput`), this.inputBox = this._register(new at(this.domNode, this.contextViewProvider, {
        ariaLabel: this.label || ``,
        placeholder: this.placeholder || ``,
        validationOptions: {
          validation: this.validation
        },
        history: a2,
        showHistoryHint: r2.showHistoryHint,
        flexibleHeight: o2,
        flexibleWidth: s2,
        flexibleMaxHeight: c2,
        inputBoxStyles: r2.inputBoxStyles
      })), this.preserveCase = this._register(new wb({
        appendTitle: i2,
        isChecked: false,
        ...r2.toggleStyles
      })), this._register(this.preserveCase.onChange((e3) => {
        this._onDidOptionChange.fire(e3), !e3 && this.fixFocusOnOptionClickEnabled && this.inputBox.focus(), this.validate();
      })), this._register(this.preserveCase.onKeyDown((e3) => {
        this._onPreserveCaseKeyDown.fire(e3);
      })), this._showOptionButtons ? this.cachedOptionsWidth = this.preserveCase.width() : this.cachedOptionsWidth = 0;
      let l2 = [
        this.preserveCase.domNode
      ];
      this.onkeydown(this.domNode, (e3) => {
        if (e3.equals(15) || e3.equals(17) || e3.equals(9)) {
          let t3 = l2.indexOf(this.domNode.ownerDocument.activeElement);
          if (t3 >= 0) {
            let n3 = -1;
            e3.equals(17) ? n3 = (t3 + 1) % l2.length : e3.equals(15) && (n3 = t3 === 0 ? l2.length - 1 : t3 - 1), e3.equals(9) ? (l2[t3].blur(), this.inputBox.focus()) : n3 >= 0 && l2[n3].focus(), Be.stop(e3, true);
          }
        }
      });
      let u2 = document.createElement(`div`);
      u2.className = `controls`, u2.style.display = this._showOptionButtons ? `block` : `none`, u2.appendChild(this.preserveCase.domNode), this.domNode.appendChild(u2), e2 == null ? void 0 : e2.appendChild(this.domNode), this.onkeydown(this.inputBox.inputElement, (e3) => this._onKeyDown.fire(e3)), this.onkeyup(this.inputBox.inputElement, (e3) => this._onKeyUp.fire(e3)), this.oninput(this.inputBox.inputElement, (e3) => this._onInput.fire()), this.onmousedown(this.inputBox.inputElement, (e3) => this._onMouseDown.fire(e3));
    }
    enable() {
      this.domNode.classList.remove(`disabled`), this.inputBox.enable(), this.preserveCase.enable();
    }
    disable() {
      this.domNode.classList.add(`disabled`), this.inputBox.disable(), this.preserveCase.disable();
    }
    setEnabled(e2) {
      e2 ? this.enable() : this.disable();
    }
    select() {
      this.inputBox.select();
    }
    focus() {
      this.inputBox.focus();
    }
    getPreserveCase() {
      return this.preserveCase.checked;
    }
    setPreserveCase(e2) {
      this.preserveCase.checked = e2;
    }
    focusOnPreserve() {
      this.preserveCase.focus();
    }
    validate() {
      var _a3;
      (_a3 = this.inputBox) == null ? void 0 : _a3.validate();
    }
    set width(e2) {
      this.inputBox.paddingRight = this.cachedOptionsWidth, this.domNode.style.width = e2 + `px`;
    }
    dispose() {
      super.dispose();
    }
  }, Eb = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Db = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const Ob = new F(`suggestWidgetVisible`, false, U(`suggestWidgetVisible`, `Whether suggestion are visible`)), kb = `historyNavigationWidgetFocus`, Ab = `historyNavigationForwardsEnabled`, jb = `historyNavigationBackwardsEnabled`;
  let Mb;
  const Nb = [];
  function Pb(e2, t2) {
    if (Nb.includes(t2)) throw Error(`Cannot register the same widget multiple times`);
    Nb.push(t2);
    let n2 = new C(), r2 = new F(kb, false).bindTo(e2), i2 = new F(Ab, true).bindTo(e2), a2 = new F(jb, true).bindTo(e2), o2 = () => {
      r2.set(true), Mb = t2;
    }, s2 = () => {
      r2.set(false), Mb === t2 && (Mb = void 0);
    };
    return ys(t2.element) && o2(), n2.add(t2.onDidFocus(() => o2())), n2.add(t2.onDidBlur(() => s2())), n2.add(Hl(() => {
      Nb.splice(Nb.indexOf(t2), 1), s2();
    })), {
      historyNavigationForwardsEnablement: i2,
      historyNavigationBackwardsEnablement: a2,
      dispose() {
        n2.dispose();
      }
    };
  }
  let Fb = class extends Ge {
    constructor(e2, t2, n2, r2) {
      super(e2, t2, n2);
      let i2 = this._register(r2.createScoped(this.inputBox.element));
      this._register(Pb(i2, this.inputBox));
    }
  };
  Fb = Eb([
    Db(3, O)
  ], Fb);
  let Ib = class extends Tb {
    constructor(e2, t2, n2, r2, i2 = false) {
      super(e2, t2, i2, n2);
      let a2 = this._register(r2.createScoped(this.inputBox.element));
      this._register(Pb(a2, this.inputBox));
    }
  };
  Ib = Eb([
    Db(3, O)
  ], Ib), gn.registerCommandAndKeybindingRule({
    id: `history.showPrevious`,
    weight: 200,
    when: b.and(b.has(kb), b.equals(jb, true), b.not(`isComposing`), Ob.isEqualTo(false)),
    primary: 16,
    secondary: [
      528
    ],
    handler: (e2) => {
      Mb == null ? void 0 : Mb.showPreviousValue();
    }
  }), gn.registerCommandAndKeybindingRule({
    id: `history.showNext`,
    weight: 200,
    when: b.and(b.has(kb), b.equals(Ab, true), b.not(`isComposing`), Ob.isEqualTo(false)),
    primary: 18,
    secondary: [
      530
    ],
    handler: (e2) => {
      Mb == null ? void 0 : Mb.showNextValue();
    }
  });
  function Lb(e2) {
    var _a3, _b3;
    return ((_a3 = e2.lookupKeybinding(`history.showPrevious`)) == null ? void 0 : _a3.getElectronAccelerator()) === `Up` && ((_b3 = e2.lookupKeybinding(`history.showNext`)) == null ? void 0 : _b3.getElectronAccelerator()) === `Down`;
  }
  const Rb = cl(`find-collapsed`, _.chevronRight, U(`findCollapsedIcon`, `Icon to indicate that the editor find widget is collapsed.`)), zb = cl(`find-expanded`, _.chevronDown, U(`findExpandedIcon`, `Icon to indicate that the editor find widget is expanded.`)), Bb = cl(`find-selection`, _.selection, U(`findSelectionIcon`, `Icon for 'Find in Selection' in the editor find widget.`)), Vb = cl(`find-replace`, _.replace, U(`findReplaceIcon`, `Icon for 'Replace' in the editor find widget.`)), Hb = cl(`find-replace-all`, _.replaceAll, U(`findReplaceAllIcon`, `Icon for 'Replace All' in the editor find widget.`)), Ub = cl(`find-previous-match`, _.arrowUp, U(`findPreviousMatchIcon`, `Icon for 'Find Previous' in the editor find widget.`)), Wb = cl(`find-next-match`, _.arrowDown, U(`findNextMatchIcon`, `Icon for 'Find Next' in the editor find widget.`)), Gb = U(`label.findDialog`, `Find / Replace`), Kb = U(`label.find`, `Find`), qb = U(`placeholder.find`, `Find`), Jb = U(`label.previousMatchButton`, `Previous Match`), Yb = U(`label.nextMatchButton`, `Next Match`), Xb = U(`label.toggleSelectionFind`, `Find in Selection`), Zb = U(`label.closeButton`, `Close`), Qb = U(`label.replace`, `Replace`), $b = U(`placeholder.replace`, `Replace`), ex = U(`label.replaceButton`, `Replace`), tx = U(`label.replaceAllButton`, `Replace All`), nx = U(`label.toggleReplaceButton`, `Toggle Replace`), rx = U(`title.matchesCountLimit`, `Only the first {0} results are highlighted, but all find operations work on the entire text.`, gb), ix = U(`label.matchesLocation`, `{0} of {1}`), ax = U(`label.noResults`, `No results`), ox = 419, sx = 275, cx = sx - 54;
  let lx = 69;
  const ux = 33, dx = `ctrlEnterReplaceAll.windows.donotask`, fx = qs ? 256 : 2048;
  var px = class {
    constructor(e2) {
      this.afterLineNumber = e2, this.heightInPx = ux, this.suppressMouseDown = false, this.domNode = document.createElement(`div`), this.domNode.className = `dock-find-viewzone`;
    }
  };
  function mx(e2, t2, n2) {
    let r2 = !!t2.match(/\n/);
    if (n2 && r2 && n2.selectionStart > 0) {
      e2.stopPropagation();
      return;
    }
  }
  function hx(e2, t2, n2) {
    let r2 = !!t2.match(/\n/);
    if (n2 && r2 && n2.selectionEnd < n2.value.length) {
      e2.stopPropagation();
      return;
    }
  }
  var gx = (_X = class extends li {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2) {
      super(), this._hoverService = l2, this._cachedHeight = null, this._revealTimeouts = [], this._codeEditor = e2, this._controller = t2, this._state = n2, this._contextViewProvider = r2, this._keybindingService = i2, this._contextKeyService = a2, this._storageService = s2, this._notificationService = c2, this._ctrlEnterReplaceAllWarningPrompted = !!s2.getBoolean(dx, 0), this._isVisible = false, this._isReplaceVisible = false, this._ignoreChangeEvent = false, this._updateHistoryDelayer = new ve(500), this._register(Hl(() => this._updateHistoryDelayer.cancel())), this._register(this._state.onFindReplaceStateChange((e3) => this._onStateChanged(e3))), this._buildDomNode(), this._updateButtons(), this._tryUpdateWidgetWidth(), this._findInput.inputBox.layout(), this._register(this._codeEditor.onDidChangeConfiguration((e3) => {
        if (e3.hasChanged(92) && (this._codeEditor.getOption(92) && this._state.change({
          isReplaceRevealed: false
        }, false), this._updateButtons()), e3.hasChanged(146) && this._tryUpdateWidgetWidth(), e3.hasChanged(2) && this.updateAccessibilitySupport(), e3.hasChanged(41)) {
          let e4 = this._codeEditor.getOption(41).loop;
          this._state.change({
            loop: e4
          }, false);
          let t3 = this._codeEditor.getOption(41).addExtraSpaceOnTop;
          t3 && !this._viewZone && (this._viewZone = new px(0), this._showViewZone()), !t3 && this._viewZone && this._removeViewZone();
        }
      })), this.updateAccessibilitySupport(), this._register(this._codeEditor.onDidChangeCursorSelection(() => {
        this._isVisible && this._updateToggleSelectionFindButton();
      })), this._register(this._codeEditor.onDidFocusEditorWidget(async () => {
        if (this._isVisible) {
          let e3 = await this._controller.getGlobalBufferTerm();
          e3 && e3 !== this._state.searchString && (this._state.change({
            searchString: e3
          }, false), this._findInput.select());
        }
      })), this._findInputFocused = lb.bindTo(a2), this._findFocusTracker = this._register(Gl(this._findInput.inputBox.inputElement)), this._register(this._findFocusTracker.onDidFocus(() => {
        this._findInputFocused.set(true), this._updateSearchScope();
      })), this._register(this._findFocusTracker.onDidBlur(() => {
        this._findInputFocused.set(false);
      })), this._replaceInputFocused = ub.bindTo(a2), this._replaceFocusTracker = this._register(Gl(this._replaceInput.inputBox.inputElement)), this._register(this._replaceFocusTracker.onDidFocus(() => {
        this._replaceInputFocused.set(true), this._updateSearchScope();
      })), this._register(this._replaceFocusTracker.onDidBlur(() => {
        this._replaceInputFocused.set(false);
      })), this._codeEditor.addOverlayWidget(this), this._codeEditor.getOption(41).addExtraSpaceOnTop && (this._viewZone = new px(0)), this._register(this._codeEditor.onDidChangeModel(() => {
        this._isVisible && (this._viewZoneId = void 0);
      })), this._register(this._codeEditor.onDidScrollChange((e3) => {
        if (e3.scrollTopChanged) {
          this._layoutViewZone();
          return;
        }
        setTimeout(() => {
          this._layoutViewZone();
        }, 0);
      }));
    }
    getId() {
      return _X.ID;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return this._isVisible ? {
        preference: 0
      } : null;
    }
    _onStateChanged(e2) {
      if (e2.searchString) {
        try {
          this._ignoreChangeEvent = true, this._findInput.setValue(this._state.searchString);
        } finally {
          this._ignoreChangeEvent = false;
        }
        this._updateButtons();
      }
      if (e2.replaceString && (this._replaceInput.inputBox.value = this._state.replaceString), e2.isRevealed && (this._state.isRevealed ? this._reveal() : this._hide(true)), e2.isReplaceRevealed && (this._state.isReplaceRevealed ? !this._codeEditor.getOption(92) && !this._isReplaceVisible && (this._isReplaceVisible = true, this._replaceInput.width = es(this._findInput.domNode), this._updateButtons(), this._replaceInput.inputBox.layout()) : this._isReplaceVisible && (this._isReplaceVisible = false, this._updateButtons())), (e2.isRevealed || e2.isReplaceRevealed) && (this._state.isRevealed || this._state.isReplaceRevealed) && this._tryUpdateHeight() && this._showViewZone(), e2.isRegex && this._findInput.setRegex(this._state.isRegex), e2.wholeWord && this._findInput.setWholeWords(this._state.wholeWord), e2.matchCase && this._findInput.setCaseSensitive(this._state.matchCase), e2.preserveCase && this._replaceInput.setPreserveCase(this._state.preserveCase), e2.searchScope && (this._state.searchScope ? this._toggleSelectionFind.checked = true : this._toggleSelectionFind.checked = false, this._updateToggleSelectionFindButton()), e2.searchString || e2.matchesCount || e2.matchesPosition) {
        let e3 = this._state.searchString.length > 0 && this._state.matchesCount === 0;
        this._domNode.classList.toggle(`no-results`, e3), this._updateMatchesCount(), this._updateButtons();
      }
      (e2.searchString || e2.currentMatch) && this._layoutViewZone(), e2.updateHistory && this._delayedUpdateHistory(), e2.loop && this._updateButtons();
    }
    _delayedUpdateHistory() {
      this._updateHistoryDelayer.trigger(this._updateHistory.bind(this)).then(void 0, G);
    }
    _updateHistory() {
      this._state.searchString && this._findInput.inputBox.addToHistory(), this._state.replaceString && this._replaceInput.inputBox.addToHistory();
    }
    _updateMatchesCount() {
      var _a3;
      this._matchesCount.style.minWidth = lx + `px`, this._state.matchesCount >= gb ? this._matchesCount.title = rx : this._matchesCount.title = ``, (_a3 = this._matchesCount.firstChild) == null ? void 0 : _a3.remove();
      let e2;
      if (this._state.matchesCount > 0) {
        let t2 = String(this._state.matchesCount);
        this._state.matchesCount >= gb && (t2 += `+`);
        let n2 = String(this._state.matchesPosition);
        n2 === `0` && (n2 = `?`), e2 = Do(ix, n2, t2);
      } else e2 = ax;
      this._matchesCount.appendChild(document.createTextNode(e2)), Ci(this._getAriaLabel(e2, this._state.currentMatch, this._state.searchString)), lx = Math.max(lx, this._matchesCount.clientWidth);
    }
    _getAriaLabel(e2, t2, n2) {
      if (e2 === ax) return n2 === `` ? U(`ariaSearchNoResultEmpty`, `{0} found`, e2) : U(`ariaSearchNoResult`, `{0} found for '{1}'`, e2, n2);
      if (t2) {
        let r2 = U(`ariaSearchNoResultWithLineNum`, `{0} found for '{1}', at {2}`, e2, n2, t2.startLineNumber + `:` + t2.startColumn), i2 = this._codeEditor.getModel();
        if (i2 && t2.startLineNumber <= i2.getLineCount() && t2.startLineNumber >= 1) {
          let e3 = i2.getLineContent(t2.startLineNumber);
          return `${e3}, ${r2}`;
        }
        return r2;
      }
      return U(`ariaSearchNoResultWithLineNumNoCurrentMatch`, `{0} found for '{1}'`, e2, n2);
    }
    _updateToggleSelectionFindButton() {
      let e2 = this._codeEditor.getSelection(), t2 = e2 ? e2.startLineNumber !== e2.endLineNumber || e2.startColumn !== e2.endColumn : false, n2 = this._toggleSelectionFind.checked;
      this._isVisible && (n2 || t2) ? this._toggleSelectionFind.enable() : this._toggleSelectionFind.disable();
    }
    _updateButtons() {
      this._findInput.setEnabled(this._isVisible), this._replaceInput.setEnabled(this._isVisible && this._isReplaceVisible), this._updateToggleSelectionFindButton(), this._closeBtn.setEnabled(this._isVisible);
      let e2 = this._state.searchString.length > 0, t2 = !!this._state.matchesCount;
      this._prevBtn.setEnabled(this._isVisible && e2 && t2 && this._state.canNavigateBack()), this._nextBtn.setEnabled(this._isVisible && e2 && t2 && this._state.canNavigateForward()), this._replaceBtn.setEnabled(this._isVisible && this._isReplaceVisible && e2), this._replaceAllBtn.setEnabled(this._isVisible && this._isReplaceVisible && e2), this._domNode.classList.toggle(`replaceToggled`, this._isReplaceVisible), this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);
      let n2 = !this._codeEditor.getOption(92);
      this._toggleReplaceBtn.setEnabled(this._isVisible && n2);
    }
    _reveal() {
      if (this._revealTimeouts.forEach((e2) => {
        clearTimeout(e2);
      }), this._revealTimeouts = [], !this._isVisible) {
        this._isVisible = true;
        let e2 = this._codeEditor.getSelection();
        switch (this._codeEditor.getOption(41).autoFindInSelection) {
          case `always`:
            this._toggleSelectionFind.checked = true;
            break;
          case `never`:
            this._toggleSelectionFind.checked = false;
            break;
          case `multiline`: {
            let t3 = !!e2 && e2.startLineNumber !== e2.endLineNumber;
            this._toggleSelectionFind.checked = t3;
            break;
          }
          default:
            break;
        }
        this._tryUpdateWidgetWidth(), this._updateButtons(), this._revealTimeouts.push(setTimeout(() => {
          this._domNode.classList.add(`visible`), this._domNode.setAttribute(`aria-hidden`, `false`);
        }, 0)), this._revealTimeouts.push(setTimeout(() => {
          this._findInput.validate();
        }, 200)), this._codeEditor.layoutOverlayWidget(this);
        let t2 = true;
        if (this._codeEditor.getOption(41).seedSearchStringFromSelection && e2) {
          let n2 = this._codeEditor.getDomNode();
          if (n2) {
            let r2 = Vo(n2), i2 = this._codeEditor.getScrolledVisiblePosition(e2.getStartPosition()), a2 = r2.left + (i2 ? i2.left : 0), o2 = i2 ? i2.top : 0;
            if (this._viewZone && o2 < this._viewZone.heightInPx) {
              e2.endLineNumber > e2.startLineNumber && (t2 = false);
              let n3 = Qo(this._domNode).left;
              a2 > n3 && (t2 = false);
              let i3 = this._codeEditor.getScrolledVisiblePosition(e2.getEndPosition()), o3 = r2.left + (i3 ? i3.left : 0);
              o3 > n3 && (t2 = false);
            }
          }
        }
        this._showViewZone(t2);
      }
    }
    _hide(e2) {
      this._revealTimeouts.forEach((e3) => {
        clearTimeout(e3);
      }), this._revealTimeouts = [], this._isVisible && (this._isVisible = false, this._updateButtons(), this._domNode.classList.remove(`visible`), this._domNode.setAttribute(`aria-hidden`, `true`), this._findInput.clearMessage(), e2 && this._codeEditor.focus(), this._codeEditor.layoutOverlayWidget(this), this._removeViewZone());
    }
    _layoutViewZone(e2) {
      let t2 = this._codeEditor.getOption(41).addExtraSpaceOnTop;
      if (!t2) {
        this._removeViewZone();
        return;
      }
      if (!this._isVisible) return;
      let n2 = this._viewZone;
      this._viewZoneId !== void 0 || !n2 || this._codeEditor.changeViewZones((t3) => {
        n2.heightInPx = this._getHeight(), this._viewZoneId = t3.addZone(n2), this._codeEditor.setScrollTop(e2 || this._codeEditor.getScrollTop() + n2.heightInPx);
      });
    }
    _showViewZone(e2 = true) {
      if (!this._isVisible) return;
      let t2 = this._codeEditor.getOption(41).addExtraSpaceOnTop;
      if (!t2) return;
      this._viewZone === void 0 && (this._viewZone = new px(0));
      let n2 = this._viewZone;
      this._codeEditor.changeViewZones((t3) => {
        if (this._viewZoneId !== void 0) {
          let r2 = this._getHeight();
          if (r2 === n2.heightInPx) return;
          let i2 = r2 - n2.heightInPx;
          n2.heightInPx = r2, t3.layoutZone(this._viewZoneId), e2 && this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() + i2);
          return;
        } else {
          let r2 = this._getHeight();
          if (r2 -= this._codeEditor.getOption(84).top, r2 <= 0) return;
          n2.heightInPx = r2, this._viewZoneId = t3.addZone(n2), e2 && this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() + r2);
        }
      });
    }
    _removeViewZone() {
      this._codeEditor.changeViewZones((e2) => {
        this._viewZoneId !== void 0 && (e2.removeZone(this._viewZoneId), this._viewZoneId = void 0, this._viewZone && (this._codeEditor.setScrollTop(this._codeEditor.getScrollTop() - this._viewZone.heightInPx), this._viewZone = void 0));
      });
    }
    _tryUpdateWidgetWidth() {
      if (!this._isVisible || !this._domNode.isConnected) return;
      let e2 = this._codeEditor.getLayoutInfo(), t2 = e2.contentWidth;
      if (t2 <= 0) {
        this._domNode.classList.add(`hiddenEditor`);
        return;
      } else this._domNode.classList.contains(`hiddenEditor`) && this._domNode.classList.remove(`hiddenEditor`);
      let n2 = e2.width, r2 = e2.minimap.minimapWidth, i2 = false, a2 = false, o2 = false;
      if (this._resized) {
        let e3 = es(this._domNode);
        if (e3 > ox) {
          this._domNode.style.maxWidth = `${n2 - 28 - r2 - 15}px`, this._replaceInput.width = es(this._findInput.domNode);
          return;
        }
      }
      if (ox + 28 + r2 >= n2 && (a2 = true), ox + 28 + r2 - lx >= n2 && (o2 = true), ox + 28 + r2 - lx >= n2 + 50 && (i2 = true), this._domNode.classList.toggle(`collapsed-find-widget`, i2), this._domNode.classList.toggle(`narrow-find-widget`, o2), this._domNode.classList.toggle(`reduced-find-widget`, a2), !o2 && !i2 && (this._domNode.style.maxWidth = `${n2 - 28 - r2 - 15}px`), this._findInput.layout({
        collapsedFindWidget: i2,
        narrowFindWidget: o2,
        reducedFindWidget: a2
      }), this._resized) {
        let e3 = this._findInput.inputBox.element.clientWidth;
        e3 > 0 && (this._replaceInput.width = e3);
      } else this._isReplaceVisible && (this._replaceInput.width = es(this._findInput.domNode));
    }
    _getHeight() {
      let e2 = 0;
      return e2 += 4, e2 += this._findInput.inputBox.height + 2, this._isReplaceVisible && (e2 += 4, e2 += this._replaceInput.inputBox.height + 2), e2 += 4, e2;
    }
    _tryUpdateHeight() {
      let e2 = this._getHeight();
      return this._cachedHeight !== null && this._cachedHeight === e2 ? false : (this._cachedHeight = e2, this._domNode.style.height = `${e2}px`, true);
    }
    focusFindInput() {
      this._findInput.select(), this._findInput.focus();
    }
    focusReplaceInput() {
      this._replaceInput.select(), this._replaceInput.focus();
    }
    highlightFindOptions() {
      this._findInput.highlightFindOptions();
    }
    _updateSearchScope() {
      if (this._codeEditor.hasModel() && this._toggleSelectionFind.checked) {
        let e2 = this._codeEditor.getSelections();
        e2.map((e3) => {
          e3.endColumn === 1 && e3.endLineNumber > e3.startLineNumber && (e3 = e3.setEndPosition(e3.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(e3.endLineNumber - 1)));
          let t2 = this._state.currentMatch;
          return e3.startLineNumber !== e3.endLineNumber && !P.equalsRange(e3, t2) ? e3 : null;
        }).filter((e3) => !!e3), e2.length && this._state.change({
          searchScope: e2
        }, true);
      }
    }
    _onFindInputMouseDown(e2) {
      e2.middleButton && e2.stopPropagation();
    }
    _onFindInputKeyDown(e2) {
      if (e2.equals(fx | 3)) if (this._keybindingService.dispatchEvent(e2, e2.target)) {
        e2.preventDefault();
        return;
      } else {
        this._findInput.inputBox.insertAtCursor(`
`), e2.preventDefault();
        return;
      }
      if (e2.equals(2)) {
        this._isReplaceVisible ? this._replaceInput.focus() : this._findInput.focusOnCaseSensitive(), e2.preventDefault();
        return;
      }
      if (e2.equals(2066)) {
        this._codeEditor.focus(), e2.preventDefault();
        return;
      }
      if (e2.equals(16)) return mx(e2, this._findInput.getValue(), this._findInput.domNode.querySelector(`textarea`));
      if (e2.equals(18)) return hx(e2, this._findInput.getValue(), this._findInput.domNode.querySelector(`textarea`));
    }
    _onReplaceInputKeyDown(e2) {
      if (e2.equals(fx | 3)) if (this._keybindingService.dispatchEvent(e2, e2.target)) {
        e2.preventDefault();
        return;
      } else {
        cc && Qs && !this._ctrlEnterReplaceAllWarningPrompted && (this._notificationService.info(U(`ctrlEnter.keybindingChanged`, `Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.`)), this._ctrlEnterReplaceAllWarningPrompted = true, this._storageService.store(dx, true, 0, 0)), this._replaceInput.inputBox.insertAtCursor(`
`), e2.preventDefault();
        return;
      }
      if (e2.equals(2)) {
        this._findInput.focusOnCaseSensitive(), e2.preventDefault();
        return;
      }
      if (e2.equals(1026)) {
        this._findInput.focus(), e2.preventDefault();
        return;
      }
      if (e2.equals(2066)) {
        this._codeEditor.focus(), e2.preventDefault();
        return;
      }
      if (e2.equals(16)) return mx(e2, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector(`textarea`));
      if (e2.equals(18)) return hx(e2, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector(`textarea`));
    }
    getVerticalSashLeft(e2) {
      return 0;
    }
    _keybindingLabelFor(e2) {
      let t2 = this._keybindingService.lookupKeybinding(e2);
      return t2 ? ` (${t2.getLabel()})` : ``;
    }
    _buildDomNode() {
      let e2 = true, t2 = true;
      this._findInput = this._register(new Fb(null, this._contextViewProvider, {
        width: cx,
        label: Kb,
        placeholder: qb,
        appendCaseSensitiveLabel: this._keybindingLabelFor(Q.ToggleCaseSensitiveCommand),
        appendWholeWordsLabel: this._keybindingLabelFor(Q.ToggleWholeWordCommand),
        appendRegexLabel: this._keybindingLabelFor(Q.ToggleRegexCommand),
        validation: (e3) => {
          if (e3.length === 0 || !this._findInput.getRegex()) return null;
          try {
            return new RegExp(e3, `gu`), null;
          } catch (e4) {
            return {
              content: e4.message
            };
          }
        },
        flexibleHeight: e2,
        flexibleWidth: t2,
        flexibleMaxHeight: 118,
        showCommonFindToggles: true,
        showHistoryHint: () => Lb(this._keybindingService),
        inputBoxStyles: _a,
        toggleStyles: ya
      }, this._contextKeyService)), this._findInput.setRegex(!!this._state.isRegex), this._findInput.setCaseSensitive(!!this._state.matchCase), this._findInput.setWholeWords(!!this._state.wholeWord), this._register(this._findInput.onKeyDown((e3) => this._onFindInputKeyDown(e3))), this._register(this._findInput.inputBox.onDidChange(() => {
        this._ignoreChangeEvent || this._state.change({
          searchString: this._findInput.getValue()
        }, true);
      })), this._register(this._findInput.onDidOptionChange(() => {
        this._state.change({
          isRegex: this._findInput.getRegex(),
          wholeWord: this._findInput.getWholeWords(),
          matchCase: this._findInput.getCaseSensitive()
        }, true);
      })), this._register(this._findInput.onCaseSensitiveKeyDown((e3) => {
        e3.equals(1026) && this._isReplaceVisible && (this._replaceInput.focus(), e3.preventDefault());
      })), this._register(this._findInput.onRegexKeyDown((e3) => {
        e3.equals(2) && this._isReplaceVisible && (this._replaceInput.focusOnPreserve(), e3.preventDefault());
      })), this._register(this._findInput.inputBox.onDidHeightChange((e3) => {
        this._tryUpdateHeight() && this._showViewZone();
      })), Vs && this._register(this._findInput.onMouseDown((e3) => this._onFindInputMouseDown(e3))), this._matchesCount = document.createElement(`div`), this._matchesCount.className = `matchesCount`, this._updateMatchesCount();
      let n2 = this._register(la());
      this._prevBtn = this._register(new _x({
        label: Jb + this._keybindingLabelFor(Q.PreviousMatchFindAction),
        icon: Ub,
        hoverDelegate: n2,
        onTrigger: () => {
          Ai(this._codeEditor.getAction(Q.PreviousMatchFindAction)).run().then(void 0, G);
        }
      }, this._hoverService)), this._nextBtn = this._register(new _x({
        label: Yb + this._keybindingLabelFor(Q.NextMatchFindAction),
        icon: Wb,
        hoverDelegate: n2,
        onTrigger: () => {
          Ai(this._codeEditor.getAction(Q.NextMatchFindAction)).run().then(void 0, G);
        }
      }, this._hoverService));
      let r2 = document.createElement(`div`);
      r2.className = `find-part`, r2.appendChild(this._findInput.domNode);
      let i2 = document.createElement(`div`);
      i2.className = `find-actions`, r2.appendChild(i2), i2.appendChild(this._matchesCount), i2.appendChild(this._prevBtn.domNode), i2.appendChild(this._nextBtn.domNode), this._toggleSelectionFind = this._register(new Yr({
        icon: Bb,
        title: Xb + this._keybindingLabelFor(Q.ToggleSearchScopeCommand),
        isChecked: false,
        hoverDelegate: n2,
        inputActiveOptionBackground: ki(ps),
        inputActiveOptionBorder: ki(ms),
        inputActiveOptionForeground: ki(hs)
      })), this._register(this._toggleSelectionFind.onChange(() => {
        if (this._toggleSelectionFind.checked) {
          if (this._codeEditor.hasModel()) {
            let e3 = this._codeEditor.getSelections();
            e3 = e3.map((e4) => (e4.endColumn === 1 && e4.endLineNumber > e4.startLineNumber && (e4 = e4.setEndPosition(e4.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(e4.endLineNumber - 1))), e4.isEmpty() ? null : e4)).filter((e4) => !!e4), e3.length && this._state.change({
              searchScope: e3
            }, true);
          }
        } else this._state.change({
          searchScope: null
        }, true);
      })), i2.appendChild(this._toggleSelectionFind.domNode), this._closeBtn = this._register(new _x({
        label: Zb + this._keybindingLabelFor(Q.CloseFindWidgetCommand),
        icon: $l,
        hoverDelegate: n2,
        onTrigger: () => {
          this._state.change({
            isRevealed: false,
            searchScope: null
          }, false);
        },
        onKeyDown: (e3) => {
          e3.equals(2) && this._isReplaceVisible && (this._replaceBtn.isEnabled() ? this._replaceBtn.focus() : this._codeEditor.focus(), e3.preventDefault());
        }
      }, this._hoverService)), this._replaceInput = this._register(new Ib(null, void 0, {
        label: Qb,
        placeholder: $b,
        appendPreserveCaseLabel: this._keybindingLabelFor(Q.TogglePreserveCaseCommand),
        history: [],
        flexibleHeight: e2,
        flexibleWidth: t2,
        flexibleMaxHeight: 118,
        showHistoryHint: () => Lb(this._keybindingService),
        inputBoxStyles: _a,
        toggleStyles: ya
      }, this._contextKeyService, true)), this._replaceInput.setPreserveCase(!!this._state.preserveCase), this._register(this._replaceInput.onKeyDown((e3) => this._onReplaceInputKeyDown(e3))), this._register(this._replaceInput.inputBox.onDidChange(() => {
        this._state.change({
          replaceString: this._replaceInput.inputBox.value
        }, false);
      })), this._register(this._replaceInput.inputBox.onDidHeightChange((e3) => {
        this._isReplaceVisible && this._tryUpdateHeight() && this._showViewZone();
      })), this._register(this._replaceInput.onDidOptionChange(() => {
        this._state.change({
          preserveCase: this._replaceInput.getPreserveCase()
        }, true);
      })), this._register(this._replaceInput.onPreserveCaseKeyDown((e3) => {
        e3.equals(2) && (this._prevBtn.isEnabled() ? this._prevBtn.focus() : this._nextBtn.isEnabled() ? this._nextBtn.focus() : this._toggleSelectionFind.enabled ? this._toggleSelectionFind.focus() : this._closeBtn.isEnabled() && this._closeBtn.focus(), e3.preventDefault());
      }));
      let a2 = this._register(la());
      this._replaceBtn = this._register(new _x({
        label: ex + this._keybindingLabelFor(Q.ReplaceOneAction),
        icon: Vb,
        hoverDelegate: a2,
        onTrigger: () => {
          this._controller.replace();
        },
        onKeyDown: (e3) => {
          e3.equals(1026) && (this._closeBtn.focus(), e3.preventDefault());
        }
      }, this._hoverService)), this._replaceAllBtn = this._register(new _x({
        label: tx + this._keybindingLabelFor(Q.ReplaceAllAction),
        icon: Hb,
        hoverDelegate: a2,
        onTrigger: () => {
          this._controller.replaceAll();
        }
      }, this._hoverService));
      let o2 = document.createElement(`div`);
      o2.className = `replace-part`, o2.appendChild(this._replaceInput.domNode);
      let s2 = document.createElement(`div`);
      s2.className = `replace-actions`, o2.appendChild(s2), s2.appendChild(this._replaceBtn.domNode), s2.appendChild(this._replaceAllBtn.domNode), this._toggleReplaceBtn = this._register(new _x({
        label: nx,
        className: `codicon toggle left`,
        onTrigger: () => {
          this._state.change({
            isReplaceRevealed: !this._isReplaceVisible
          }, false), this._isReplaceVisible && (this._replaceInput.width = es(this._findInput.domNode), this._replaceInput.inputBox.layout()), this._showViewZone();
        }
      }, this._hoverService)), this._toggleReplaceBtn.setExpanded(this._isReplaceVisible), this._domNode = document.createElement(`div`), this._domNode.className = `editor-widget find-widget`, this._domNode.setAttribute(`aria-hidden`, `true`), this._domNode.ariaLabel = Gb, this._domNode.role = `dialog`, this._domNode.style.width = `${ox}px`, this._domNode.appendChild(this._toggleReplaceBtn.domNode), this._domNode.appendChild(r2), this._domNode.appendChild(this._closeBtn.domNode), this._domNode.appendChild(o2), this._resizeSash = this._register(new gr(this._domNode, this, {
        orientation: 0,
        size: 2
      })), this._resized = false;
      let c2 = ox;
      this._register(this._resizeSash.onDidStart(() => {
        c2 = es(this._domNode);
      })), this._register(this._resizeSash.onDidChange((e3) => {
        this._resized = true;
        let t3 = c2 + e3.startX - e3.currentX;
        if (t3 < ox) return;
        let n3 = parseFloat(zo(this._domNode).maxWidth) || 0;
        t3 > n3 || (this._domNode.style.width = `${t3}px`, this._isReplaceVisible && (this._replaceInput.width = es(this._findInput.domNode)), this._findInput.inputBox.layout(), this._tryUpdateHeight());
      })), this._register(this._resizeSash.onDidReset(() => {
        let e3 = es(this._domNode);
        if (e3 < ox) return;
        let t3 = ox;
        if (!this._resized || e3 === ox) {
          let e4 = this._codeEditor.getLayoutInfo();
          t3 = e4.width - 28 - e4.minimap.minimapWidth - 15, this._resized = true;
        }
        this._domNode.style.width = `${t3}px`, this._isReplaceVisible && (this._replaceInput.width = es(this._findInput.domNode)), this._findInput.inputBox.layout();
      }));
    }
    updateAccessibilitySupport() {
      let e2 = this._codeEditor.getOption(2);
      this._findInput.setFocusInputOnOptionClick(e2 !== 2);
    }
  }, _X.ID = `editor.contrib.findWidget`, _X), _x = class extends li {
    constructor(e2, t2) {
      super(), this._opts = e2;
      let n2 = `button`;
      this._opts.className && (n2 = n2 + ` ` + this._opts.className), this._opts.icon && (n2 = n2 + ` ` + L.asClassName(this._opts.icon)), this._domNode = document.createElement(`div`), this._domNode.tabIndex = 0, this._domNode.className = n2, this._domNode.setAttribute(`role`, `button`), this._domNode.setAttribute(`aria-label`, this._opts.label), this._register(t2.setupManagedHover(e2.hoverDelegate ?? Bo(`element`), this._domNode, this._opts.label)), this.onclick(this._domNode, (e3) => {
        this._opts.onTrigger(), e3.preventDefault();
      }), this.onkeydown(this._domNode, (e3) => {
        var _a3, _b3;
        if (e3.equals(10) || e3.equals(3)) {
          this._opts.onTrigger(), e3.preventDefault();
          return;
        }
        (_b3 = (_a3 = this._opts).onKeyDown) == null ? void 0 : _b3.call(_a3, e3);
      });
    }
    get domNode() {
      return this._domNode;
    }
    isEnabled() {
      return this._domNode.tabIndex >= 0;
    }
    focus() {
      this._domNode.focus();
    }
    setEnabled(e2) {
      this._domNode.classList.toggle(`disabled`, !e2), this._domNode.setAttribute(`aria-disabled`, String(!e2)), this._domNode.tabIndex = e2 ? 0 : -1;
    }
    setExpanded(e2) {
      this._domNode.setAttribute(`aria-expanded`, String(!!e2)), e2 ? (this._domNode.classList.remove(...L.asClassNameArray(Rb)), this._domNode.classList.add(...L.asClassNameArray(zb))) : (this._domNode.classList.remove(...L.asClassNameArray(zb)), this._domNode.classList.add(...L.asClassNameArray(Rb)));
    }
  };
  pl((e2, t2) => {
    let n2 = e2.getColor(Ja);
    n2 && t2.addRule(`.monaco-editor .findMatch { border: 1px ${Is(e2.type) ? `dotted` : `solid`} ${n2}; box-sizing: border-box; }`);
    let r2 = e2.getColor(Xa);
    r2 && t2.addRule(`.monaco-editor .findScope { border: 1px ${Is(e2.type) ? `dashed` : `solid`} ${r2}; }`);
    let i2 = e2.getColor(ta);
    i2 && t2.addRule(`.monaco-editor .find-widget { border: 1px solid ${i2}; }`);
    let a2 = e2.getColor(Ka);
    a2 && t2.addRule(`.monaco-editor .findMatchInline { color: ${a2}; }`);
    let o2 = e2.getColor(Ya);
    o2 && t2.addRule(`.monaco-editor .currentFindMatchInline { color: ${o2}; }`);
  });
  var vx = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, yx = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, bx;
  const xx = 524288;
  function Sx(e2, t2 = `single`, n2 = false) {
    if (!e2.hasModel()) return null;
    let r2 = e2.getSelection();
    if (t2 === `single` && r2.startLineNumber === r2.endLineNumber || t2 === `multiple`) {
      if (r2.isEmpty()) {
        let t3 = e2.getConfiguredWordAtPosition(r2.getStartPosition());
        if (t3 && n2 === false) return t3.word;
      } else if (e2.getModel().getValueLengthInRange(r2) < xx) return e2.getModel().getValueInRange(r2);
    }
    return null;
  }
  let Cx = (_Y = class extends S {
    get editor() {
      return this._editor;
    }
    static get(e2) {
      return e2.getContribution(bx.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this._editor = e2, this._findWidgetVisible = sb.bindTo(t2), this._contextKeyService = t2, this._storageService = n2, this._clipboardService = r2, this._notificationService = i2, this._hoverService = a2, this._updateHistoryDelayer = new ve(500), this._state = this._register(new xb()), this.loadQueryState(), this._register(this._state.onFindReplaceStateChange((e3) => this._onStateChanged(e3))), this._model = null, this._register(this._editor.onDidChangeModel(() => {
        let e3 = this._editor.getModel() && this._state.isRevealed;
        this.disposeModel(), this._state.change({
          searchScope: null,
          matchCase: this._storageService.getBoolean(`editor.matchCase`, 1, false),
          wholeWord: this._storageService.getBoolean(`editor.wholeWord`, 1, false),
          isRegex: this._storageService.getBoolean(`editor.isRegex`, 1, false),
          preserveCase: this._storageService.getBoolean(`editor.preserveCase`, 1, false)
        }, false), e3 && this._start({
          forceRevealReplace: false,
          seedSearchStringFromSelection: `none`,
          seedSearchStringFromNonEmptySelection: false,
          seedSearchStringFromGlobalClipboard: false,
          shouldFocus: 0,
          shouldAnimate: false,
          updateSearchScope: false,
          loop: this._editor.getOption(41).loop
        });
      }));
    }
    dispose() {
      this.disposeModel(), super.dispose();
    }
    disposeModel() {
      this._model && (this._model.dispose(), this._model = null);
    }
    _onStateChanged(e2) {
      this.saveQueryState(e2), e2.isRevealed && (this._state.isRevealed ? this._findWidgetVisible.set(true) : (this._findWidgetVisible.reset(), this.disposeModel())), e2.searchString && this.setGlobalBufferTerm(this._state.searchString);
    }
    saveQueryState(e2) {
      e2.isRegex && this._storageService.store(`editor.isRegex`, this._state.actualIsRegex, 1, 1), e2.wholeWord && this._storageService.store(`editor.wholeWord`, this._state.actualWholeWord, 1, 1), e2.matchCase && this._storageService.store(`editor.matchCase`, this._state.actualMatchCase, 1, 1), e2.preserveCase && this._storageService.store(`editor.preserveCase`, this._state.actualPreserveCase, 1, 1);
    }
    loadQueryState() {
      this._state.change({
        matchCase: this._storageService.getBoolean(`editor.matchCase`, 1, this._state.matchCase),
        wholeWord: this._storageService.getBoolean(`editor.wholeWord`, 1, this._state.wholeWord),
        isRegex: this._storageService.getBoolean(`editor.isRegex`, 1, this._state.isRegex),
        preserveCase: this._storageService.getBoolean(`editor.preserveCase`, 1, this._state.preserveCase)
      }, false);
    }
    isFindInputFocused() {
      return !!lb.getValue(this._contextKeyService);
    }
    getState() {
      return this._state;
    }
    closeFindWidget() {
      this._state.change({
        isRevealed: false,
        searchScope: null
      }, false), this._editor.focus();
    }
    toggleCaseSensitive() {
      this._state.change({
        matchCase: !this._state.matchCase
      }, false), this._state.isRevealed || this.highlightFindOptions();
    }
    toggleWholeWords() {
      this._state.change({
        wholeWord: !this._state.wholeWord
      }, false), this._state.isRevealed || this.highlightFindOptions();
    }
    toggleRegex() {
      this._state.change({
        isRegex: !this._state.isRegex
      }, false), this._state.isRevealed || this.highlightFindOptions();
    }
    togglePreserveCase() {
      this._state.change({
        preserveCase: !this._state.preserveCase
      }, false), this._state.isRevealed || this.highlightFindOptions();
    }
    toggleSearchScope() {
      if (this._state.searchScope) this._state.change({
        searchScope: null
      }, true);
      else if (this._editor.hasModel()) {
        let e2 = this._editor.getSelections();
        e2 = e2.map((e3) => (e3.endColumn === 1 && e3.endLineNumber > e3.startLineNumber && (e3 = e3.setEndPosition(e3.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(e3.endLineNumber - 1))), e3.isEmpty() ? null : e3)).filter((e3) => !!e3), e2.length && this._state.change({
          searchScope: e2
        }, true);
      }
    }
    setSearchString(e2) {
      this._state.isRegex && (e2 = vo(e2)), this._state.change({
        searchString: e2
      }, false);
    }
    highlightFindOptions(e2 = false) {
    }
    async _start(e2, t2) {
      if (this.disposeModel(), !this._editor.hasModel()) return;
      let n2 = {
        ...t2,
        isRevealed: true
      };
      if (e2.seedSearchStringFromSelection === `single`) {
        let t3 = Sx(this._editor, e2.seedSearchStringFromSelection, e2.seedSearchStringFromNonEmptySelection);
        t3 && (this._state.isRegex ? n2.searchString = vo(t3) : n2.searchString = t3);
      } else if (e2.seedSearchStringFromSelection === `multiple` && !e2.updateSearchScope) {
        let t3 = Sx(this._editor, e2.seedSearchStringFromSelection);
        t3 && (n2.searchString = t3);
      }
      if (!n2.searchString && e2.seedSearchStringFromGlobalClipboard) {
        let e3 = await this.getGlobalBufferTerm();
        if (!this._editor.hasModel()) return;
        e3 && (n2.searchString = e3);
      }
      if (e2.forceRevealReplace || n2.isReplaceRevealed ? n2.isReplaceRevealed = true : this._findWidgetVisible.get() || (n2.isReplaceRevealed = false), e2.updateSearchScope) {
        let e3 = this._editor.getSelections();
        e3.some((e4) => !e4.isEmpty()) && (n2.searchScope = e3);
      }
      n2.loop = e2.loop, this._state.change(n2, false), this._model || (this._model = new vb(this._editor, this._state));
    }
    start(e2, t2) {
      return this._start(e2, t2);
    }
    moveToNextMatch() {
      return this._model ? (this._model.moveToNextMatch(), true) : false;
    }
    moveToPrevMatch() {
      return this._model ? (this._model.moveToPrevMatch(), true) : false;
    }
    goToMatch(e2) {
      return this._model ? (this._model.moveToMatch(e2), true) : false;
    }
    replace() {
      return this._model ? (this._model.replace(), true) : false;
    }
    replaceAll() {
      var _a3;
      return this._model ? ((_a3 = this._editor.getModel()) == null ? void 0 : _a3.isTooLargeForHeapOperation()) ? (this._notificationService.warn(U(`too.large.for.replaceall`, `The file is too large to perform a replace all operation.`)), false) : (this._model.replaceAll(), true) : false;
    }
    selectAllMatches() {
      return this._model ? (this._model.selectAllMatches(), this._editor.focus(), true) : false;
    }
    async getGlobalBufferTerm() {
      return this._editor.getOption(41).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing() ? this._clipboardService.readFindText() : ``;
    }
    setGlobalBufferTerm(e2) {
      this._editor.getOption(41).globalFindClipboard && this._editor.hasModel() && !this._editor.getModel().isTooLargeForSyncing() && this._clipboardService.writeFindText(e2);
    }
  }, bx = _Y, _Y.ID = `editor.contrib.findController`, _Y);
  Cx = bx = vx([
    yx(1, O),
    yx(2, Vt),
    yx(3, ft),
    yx(4, Ft),
    yx(5, St)
  ], Cx);
  let wx = class extends Cx {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      super(e2, n2, o2, s2, a2, c2), this._contextViewService = t2, this._keybindingService = r2, this._themeService = i2, this._widget = null, this._findOptionsWidget = null;
    }
    async _start(e2, t2) {
      this._widget || this._createFindWidget();
      let n2 = this._editor.getSelection(), r2 = false;
      switch (this._editor.getOption(41).autoFindInSelection) {
        case `always`:
          r2 = true;
          break;
        case `never`:
          r2 = false;
          break;
        case `multiline`: {
          let e3 = !!n2 && n2.startLineNumber !== n2.endLineNumber;
          r2 = e3;
          break;
        }
        default:
          break;
      }
      e2.updateSearchScope = e2.updateSearchScope || r2, await super._start(e2, t2), this._widget && (e2.shouldFocus === 2 ? this._widget.focusReplaceInput() : e2.shouldFocus === 1 && this._widget.focusFindInput());
    }
    highlightFindOptions(e2 = false) {
      this._widget || this._createFindWidget(), this._state.isRevealed && !e2 ? this._widget.highlightFindOptions() : this._findOptionsWidget.highlightFindOptions();
    }
    _createFindWidget() {
      this._widget = this._register(new gx(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService, this._storageService, this._notificationService, this._hoverService)), this._findOptionsWidget = this._register(new yb(this._editor, this._state, this._keybindingService));
    }
  };
  wx = vx([
    yx(1, gt),
    yx(2, O),
    yx(3, Ct),
    yx(4, Gt),
    yx(5, Ft),
    yx(6, Vt),
    yx(7, ft),
    yx(8, St)
  ], wx);
  const Tx = dl(new zn({
    id: Q.StartFindAction,
    label: U(`startFindAction`, `Find`),
    alias: `Find`,
    precondition: b.or(T.focus, b.has(`editorIsOpen`)),
    kbOpts: {
      kbExpr: null,
      primary: 2084,
      weight: 100
    },
    menuOpts: {
      menuId: j.MenubarEditMenu,
      group: `3_find`,
      title: U({
        key: `miFind`,
        comment: [
          `&& denotes a mnemonic`
        ]
      }, `&&Find`),
      order: 1
    }
  }));
  Tx.addImplementation(0, (e2, t2, n2) => {
    let r2 = Cx.get(t2);
    return r2 ? r2.start({
      forceRevealReplace: false,
      seedSearchStringFromSelection: t2.getOption(41).seedSearchStringFromSelection === `never` ? `none` : `single`,
      seedSearchStringFromNonEmptySelection: t2.getOption(41).seedSearchStringFromSelection === `selection`,
      seedSearchStringFromGlobalClipboard: t2.getOption(41).globalFindClipboard,
      shouldFocus: 1,
      shouldAnimate: true,
      updateSearchScope: false,
      loop: t2.getOption(41).loop
    }) : false;
  });
  const Ex = {
    description: `Open a new In-Editor Find Widget.`,
    args: [
      {
        name: `Open a new In-Editor Find Widget args`,
        schema: {
          properties: {
            searchString: {
              type: `string`
            },
            replaceString: {
              type: `string`
            },
            isRegex: {
              type: `boolean`
            },
            matchWholeWord: {
              type: `boolean`
            },
            isCaseSensitive: {
              type: `boolean`
            },
            preserveCase: {
              type: `boolean`
            },
            findInSelection: {
              type: `boolean`
            }
          }
        }
      }
    ]
  };
  var Dx = class extends w {
    constructor() {
      super({
        id: Q.StartFindWithArgs,
        label: U(`startFindWithArgsAction`, `Find With Arguments`),
        alias: `Find With Arguments`,
        precondition: void 0,
        kbOpts: {
          kbExpr: null,
          primary: 0,
          weight: 100
        },
        metadata: Ex
      });
    }
    async run(e2, t2, n2) {
      let r2 = Cx.get(t2);
      if (r2) {
        let e3 = n2 ? {
          searchString: n2.searchString,
          replaceString: n2.replaceString,
          isReplaceRevealed: n2.replaceString !== void 0,
          isRegex: n2.isRegex,
          wholeWord: n2.matchWholeWord,
          matchCase: n2.isCaseSensitive,
          preserveCase: n2.preserveCase
        } : {};
        await r2.start({
          forceRevealReplace: false,
          seedSearchStringFromSelection: r2.getState().searchString.length === 0 && t2.getOption(41).seedSearchStringFromSelection !== `never` ? `single` : `none`,
          seedSearchStringFromNonEmptySelection: t2.getOption(41).seedSearchStringFromSelection === `selection`,
          seedSearchStringFromGlobalClipboard: true,
          shouldFocus: 1,
          shouldAnimate: true,
          updateSearchScope: (n2 == null ? void 0 : n2.findInSelection) || false,
          loop: t2.getOption(41).loop
        }, e3), r2.setGlobalBufferTerm(r2.getState().searchString);
      }
    }
  }, Ox = class extends w {
    constructor() {
      super({
        id: Q.StartFindWithSelection,
        label: U(`startFindWithSelectionAction`, `Find With Selection`),
        alias: `Find With Selection`,
        precondition: void 0,
        kbOpts: {
          kbExpr: null,
          primary: 0,
          mac: {
            primary: 2083
          },
          weight: 100
        }
      });
    }
    async run(e2, t2) {
      let n2 = Cx.get(t2);
      n2 && (await n2.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: `multiple`,
        seedSearchStringFromNonEmptySelection: false,
        seedSearchStringFromGlobalClipboard: false,
        shouldFocus: 0,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: t2.getOption(41).loop
      }), n2.setGlobalBufferTerm(n2.getState().searchString));
    }
  }, kx = class extends w {
    async run(e2, t2) {
      let n2 = Cx.get(t2);
      n2 && !this._run(n2) && (await n2.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: n2.getState().searchString.length === 0 && t2.getOption(41).seedSearchStringFromSelection !== `never` ? `single` : `none`,
        seedSearchStringFromNonEmptySelection: t2.getOption(41).seedSearchStringFromSelection === `selection`,
        seedSearchStringFromGlobalClipboard: true,
        shouldFocus: 0,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: t2.getOption(41).loop
      }), this._run(n2));
    }
  }, Ax = class extends kx {
    constructor() {
      super({
        id: Q.NextMatchFindAction,
        label: U(`findNextMatchAction`, `Find Next`),
        alias: `Find Next`,
        precondition: void 0,
        kbOpts: [
          {
            kbExpr: T.focus,
            primary: 61,
            mac: {
              primary: 2085,
              secondary: [
                61
              ]
            },
            weight: 100
          },
          {
            kbExpr: b.and(T.focus, lb),
            primary: 3,
            weight: 100
          }
        ]
      });
    }
    _run(e2) {
      let t2 = e2.moveToNextMatch();
      return t2 ? (e2.editor.pushUndoStop(), true) : false;
    }
  }, jx = class extends kx {
    constructor() {
      super({
        id: Q.PreviousMatchFindAction,
        label: U(`findPreviousMatchAction`, `Find Previous`),
        alias: `Find Previous`,
        precondition: void 0,
        kbOpts: [
          {
            kbExpr: T.focus,
            primary: 1085,
            mac: {
              primary: 3109,
              secondary: [
                1085
              ]
            },
            weight: 100
          },
          {
            kbExpr: b.and(T.focus, lb),
            primary: 1027,
            weight: 100
          }
        ]
      });
    }
    _run(e2) {
      return e2.moveToPrevMatch();
    }
  }, Mx = class extends w {
    constructor() {
      super({
        id: Q.GoToMatchFindAction,
        label: U(`findMatchAction.goToMatch`, `Go to Match...`),
        alias: `Go to Match...`,
        precondition: sb
      }), this._highlightDecorations = [];
    }
    run(e2, t2, n2) {
      let r2 = Cx.get(t2);
      if (!r2) return;
      let i2 = r2.getState().matchesCount;
      if (i2 < 1) {
        let t3 = e2.get(Ft);
        t3.notify({
          severity: Tr.Warning,
          message: U(`findMatchAction.noResults`, `No matches. Try searching for something else.`)
        });
        return;
      }
      let a2 = e2.get(Rt), o2 = new C(), s2 = o2.add(a2.createInputBox());
      s2.placeholder = U(`findMatchAction.inputPlaceHolder`, `Type a number to go to a specific match (between 1 and {0})`, i2);
      let c2 = (e3) => {
        let t3 = parseInt(e3);
        if (isNaN(t3)) return;
        let n3 = r2.getState().matchesCount;
        if (t3 > 0 && t3 <= n3) return t3 - 1;
        if (t3 < 0 && t3 >= -n3) return n3 + t3;
      }, l2 = (e3) => {
        let n3 = c2(e3);
        if (typeof n3 == `number`) {
          s2.validationMessage = void 0, r2.goToMatch(n3);
          let e4 = r2.getState().currentMatch;
          e4 && this.addDecorations(t2, e4);
        } else s2.validationMessage = U(`findMatchAction.inputValidationMessage`, `Please type a number between 1 and {0}`, r2.getState().matchesCount), this.clearDecorations(t2);
      };
      o2.add(s2.onDidChangeValue((e3) => {
        l2(e3);
      })), o2.add(s2.onDidAccept(() => {
        let e3 = c2(s2.value);
        typeof e3 == `number` ? (r2.goToMatch(e3), s2.hide()) : s2.validationMessage = U(`findMatchAction.inputValidationMessage`, `Please type a number between 1 and {0}`, r2.getState().matchesCount);
      })), o2.add(s2.onDidHide(() => {
        this.clearDecorations(t2), o2.dispose();
      })), s2.show();
    }
    clearDecorations(e2) {
      e2.changeDecorations((e3) => {
        this._highlightDecorations = e3.deltaDecorations(this._highlightDecorations, []);
      });
    }
    addDecorations(e2, t2) {
      e2.changeDecorations((e3) => {
        this._highlightDecorations = e3.deltaDecorations(this._highlightDecorations, [
          {
            range: t2,
            options: {
              description: `find-match-quick-access-range-highlight`,
              className: `rangeHighlight`,
              isWholeLine: true
            }
          },
          {
            range: t2,
            options: {
              description: `find-match-quick-access-range-highlight-overview`,
              overviewRuler: {
                color: zl(Yc),
                position: qn.Full
              }
            }
          }
        ]);
      });
    }
  }, Nx = class extends w {
    async run(e2, t2) {
      let n2 = Cx.get(t2);
      if (!n2) return;
      let r2 = Sx(t2, `single`, false);
      r2 && n2.setSearchString(r2), this._run(n2) || (await n2.start({
        forceRevealReplace: false,
        seedSearchStringFromSelection: `none`,
        seedSearchStringFromNonEmptySelection: false,
        seedSearchStringFromGlobalClipboard: false,
        shouldFocus: 0,
        shouldAnimate: true,
        updateSearchScope: false,
        loop: t2.getOption(41).loop
      }), this._run(n2));
    }
  }, Px = class extends Nx {
    constructor() {
      super({
        id: Q.NextSelectionMatchFindAction,
        label: U(`nextSelectionMatchFindAction`, `Find Next Selection`),
        alias: `Find Next Selection`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 2109,
          weight: 100
        }
      });
    }
    _run(e2) {
      return e2.moveToNextMatch();
    }
  }, Fx = class extends Nx {
    constructor() {
      super({
        id: Q.PreviousSelectionMatchFindAction,
        label: U(`previousSelectionMatchFindAction`, `Find Previous Selection`),
        alias: `Find Previous Selection`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 3133,
          weight: 100
        }
      });
    }
    _run(e2) {
      return e2.moveToPrevMatch();
    }
  };
  const Ix = dl(new zn({
    id: Q.StartFindReplaceAction,
    label: U(`startReplace`, `Replace`),
    alias: `Replace`,
    precondition: b.or(T.focus, b.has(`editorIsOpen`)),
    kbOpts: {
      kbExpr: null,
      primary: 2086,
      mac: {
        primary: 2596
      },
      weight: 100
    },
    menuOpts: {
      menuId: j.MenubarEditMenu,
      group: `3_find`,
      title: U({
        key: `miReplace`,
        comment: [
          `&& denotes a mnemonic`
        ]
      }, `&&Replace`),
      order: 2
    }
  }));
  Ix.addImplementation(0, (e2, t2, n2) => {
    if (!t2.hasModel() || t2.getOption(92)) return false;
    let r2 = Cx.get(t2);
    if (!r2) return false;
    let i2 = t2.getSelection(), a2 = r2.isFindInputFocused(), o2 = !i2.isEmpty() && i2.startLineNumber === i2.endLineNumber && t2.getOption(41).seedSearchStringFromSelection !== `never` && !a2, s2 = a2 || o2 ? 2 : 1;
    return r2.start({
      forceRevealReplace: true,
      seedSearchStringFromSelection: o2 ? `single` : `none`,
      seedSearchStringFromNonEmptySelection: t2.getOption(41).seedSearchStringFromSelection === `selection`,
      seedSearchStringFromGlobalClipboard: t2.getOption(41).seedSearchStringFromSelection !== `never`,
      shouldFocus: s2,
      shouldAnimate: true,
      updateSearchScope: false,
      loop: t2.getOption(41).loop
    });
  }), X(Cx.ID, wx, 0), J(Dx), J(Ox), J(Ax), J(jx), J(Mx), J(Px), J(Fx);
  const Lx = Ae.bindToContribution(Cx.get);
  Y(new Lx({
    id: Q.CloseFindWidgetCommand,
    precondition: sb,
    handler: (e2) => e2.closeFindWidget(),
    kbOpts: {
      weight: 105,
      kbExpr: b.and(T.focus, b.not(`isComposing`)),
      primary: 9,
      secondary: [
        1033
      ]
    }
  })), Y(new Lx({
    id: Q.ToggleCaseSensitiveCommand,
    precondition: void 0,
    handler: (e2) => e2.toggleCaseSensitive(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: db.primary,
      mac: db.mac,
      win: db.win,
      linux: db.linux
    }
  })), Y(new Lx({
    id: Q.ToggleWholeWordCommand,
    precondition: void 0,
    handler: (e2) => e2.toggleWholeWords(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: fb.primary,
      mac: fb.mac,
      win: fb.win,
      linux: fb.linux
    }
  })), Y(new Lx({
    id: Q.ToggleRegexCommand,
    precondition: void 0,
    handler: (e2) => e2.toggleRegex(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: pb.primary,
      mac: pb.mac,
      win: pb.win,
      linux: pb.linux
    }
  })), Y(new Lx({
    id: Q.ToggleSearchScopeCommand,
    precondition: void 0,
    handler: (e2) => e2.toggleSearchScope(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: mb.primary,
      mac: mb.mac,
      win: mb.win,
      linux: mb.linux
    }
  })), Y(new Lx({
    id: Q.TogglePreserveCaseCommand,
    precondition: void 0,
    handler: (e2) => e2.togglePreserveCase(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: hb.primary,
      mac: hb.mac,
      win: hb.win,
      linux: hb.linux
    }
  })), Y(new Lx({
    id: Q.ReplaceOneAction,
    precondition: sb,
    handler: (e2) => e2.replace(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: 3094
    }
  })), Y(new Lx({
    id: Q.ReplaceOneAction,
    precondition: sb,
    handler: (e2) => e2.replace(),
    kbOpts: {
      weight: 105,
      kbExpr: b.and(T.focus, ub),
      primary: 3
    }
  })), Y(new Lx({
    id: Q.ReplaceAllAction,
    precondition: sb,
    handler: (e2) => e2.replaceAll(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: 2563
    }
  })), Y(new Lx({
    id: Q.ReplaceAllAction,
    precondition: sb,
    handler: (e2) => e2.replaceAll(),
    kbOpts: {
      weight: 105,
      kbExpr: b.and(T.focus, ub),
      primary: void 0,
      mac: {
        primary: 2051
      }
    }
  })), Y(new Lx({
    id: Q.SelectAllMatchesAction,
    precondition: sb,
    handler: (e2) => e2.selectAllMatches(),
    kbOpts: {
      weight: 105,
      kbExpr: T.focus,
      primary: 515
    }
  }));
  const Rx = {
    0: ` `,
    1: `u`,
    2: `r`
  }, zx = 65535, Bx = 16777215, Vx = 4278190080;
  var Hx = class {
    constructor(e2) {
      let t2 = Math.ceil(e2 / 32);
      this._states = new Uint32Array(t2);
    }
    get(e2) {
      let t2 = e2 / 32 | 0, n2 = e2 % 32;
      return (this._states[t2] & 1 << n2) != 0;
    }
    set(e2, t2) {
      let n2 = e2 / 32 | 0, r2 = e2 % 32, i2 = this._states[n2];
      t2 ? this._states[n2] = i2 | 1 << r2 : this._states[n2] = i2 & ~(1 << r2);
    }
  }, Ux = class e2 {
    constructor(e3, t2, n2) {
      if (e3.length !== t2.length || e3.length > zx) throw Error(`invalid startIndexes or endIndexes size`);
      this._startIndexes = e3, this._endIndexes = t2, this._collapseStates = new Hx(e3.length), this._userDefinedStates = new Hx(e3.length), this._recoveredStates = new Hx(e3.length), this._types = n2, this._parentsComputed = false;
    }
    ensureParentIndices() {
      if (!this._parentsComputed) {
        this._parentsComputed = true;
        let e3 = [], t2 = (t3, n2) => {
          let r2 = e3[e3.length - 1];
          return this.getStartLineNumber(r2) <= t3 && this.getEndLineNumber(r2) >= n2;
        };
        for (let n2 = 0, r2 = this._startIndexes.length; n2 < r2; n2++) {
          let r3 = this._startIndexes[n2], i2 = this._endIndexes[n2];
          if (r3 > Bx || i2 > Bx) throw Error(`startLineNumber or endLineNumber must not exceed ` + Bx);
          for (; e3.length > 0 && !t2(r3, i2); ) e3.pop();
          let a2 = e3.length > 0 ? e3[e3.length - 1] : -1;
          e3.push(n2), this._startIndexes[n2] = r3 + ((a2 & 255) << 24), this._endIndexes[n2] = i2 + ((a2 & 65280) << 16);
        }
      }
    }
    get length() {
      return this._startIndexes.length;
    }
    getStartLineNumber(e3) {
      return this._startIndexes[e3] & Bx;
    }
    getEndLineNumber(e3) {
      return this._endIndexes[e3] & Bx;
    }
    getType(e3) {
      return this._types ? this._types[e3] : void 0;
    }
    hasTypes() {
      return !!this._types;
    }
    isCollapsed(e3) {
      return this._collapseStates.get(e3);
    }
    setCollapsed(e3, t2) {
      this._collapseStates.set(e3, t2);
    }
    isUserDefined(e3) {
      return this._userDefinedStates.get(e3);
    }
    setUserDefined(e3, t2) {
      return this._userDefinedStates.set(e3, t2);
    }
    isRecovered(e3) {
      return this._recoveredStates.get(e3);
    }
    setRecovered(e3, t2) {
      return this._recoveredStates.set(e3, t2);
    }
    getSource(e3) {
      return this.isUserDefined(e3) ? 1 : this.isRecovered(e3) ? 2 : 0;
    }
    setSource(e3, t2) {
      t2 === 1 ? (this.setUserDefined(e3, true), this.setRecovered(e3, false)) : t2 === 2 ? (this.setUserDefined(e3, false), this.setRecovered(e3, true)) : (this.setUserDefined(e3, false), this.setRecovered(e3, false));
    }
    setCollapsedAllOfType(e3, t2) {
      let n2 = false;
      if (this._types) for (let r2 = 0; r2 < this._types.length; r2++) this._types[r2] === e3 && (this.setCollapsed(r2, t2), n2 = true);
      return n2;
    }
    toRegion(e3) {
      return new Wx(this, e3);
    }
    getParentIndex(e3) {
      this.ensureParentIndices();
      let t2 = ((this._startIndexes[e3] & Vx) >>> 24) + ((this._endIndexes[e3] & Vx) >>> 16);
      return t2 === zx ? -1 : t2;
    }
    contains(e3, t2) {
      return this.getStartLineNumber(e3) <= t2 && this.getEndLineNumber(e3) >= t2;
    }
    findIndex(e3) {
      let t2 = 0, n2 = this._startIndexes.length;
      if (n2 === 0) return -1;
      for (; t2 < n2; ) {
        let r2 = Math.floor((t2 + n2) / 2);
        e3 < this.getStartLineNumber(r2) ? n2 = r2 : t2 = r2 + 1;
      }
      return t2 - 1;
    }
    findRange(e3) {
      let t2 = this.findIndex(e3);
      if (t2 >= 0) {
        let n2 = this.getEndLineNumber(t2);
        if (n2 >= e3) return t2;
        for (t2 = this.getParentIndex(t2); t2 !== -1; ) {
          if (this.contains(t2, e3)) return t2;
          t2 = this.getParentIndex(t2);
        }
      }
      return -1;
    }
    toString() {
      let e3 = [];
      for (let t2 = 0; t2 < this.length; t2++) e3[t2] = `[${Rx[this.getSource(t2)]}${this.isCollapsed(t2) ? `+` : `-`}] ${this.getStartLineNumber(t2)}/${this.getEndLineNumber(t2)}`;
      return e3.join(`, `);
    }
    toFoldRange(e3) {
      return {
        startLineNumber: this._startIndexes[e3] & Bx,
        endLineNumber: this._endIndexes[e3] & Bx,
        type: this._types ? this._types[e3] : void 0,
        isCollapsed: this.isCollapsed(e3),
        source: this.getSource(e3)
      };
    }
    static fromFoldRanges(t2) {
      let n2 = t2.length, r2 = new Uint32Array(n2), i2 = new Uint32Array(n2), a2 = [], o2 = false;
      for (let e3 = 0; e3 < n2; e3++) {
        let n3 = t2[e3];
        r2[e3] = n3.startLineNumber, i2[e3] = n3.endLineNumber, a2.push(n3.type), n3.type && (o2 = true);
      }
      o2 || (a2 = void 0);
      let s2 = new e2(r2, i2, a2);
      for (let e3 = 0; e3 < n2; e3++) t2[e3].isCollapsed && s2.setCollapsed(e3, true), s2.setSource(e3, t2[e3].source);
      return s2;
    }
    static sanitizeAndMerge(e3, t2, n2, r2) {
      n2 ?? (n2 = Number.MAX_VALUE);
      let i2 = (e4, t3) => Array.isArray(e4) ? (n3) => n3 < t3 ? e4[n3] : void 0 : (n3) => n3 < t3 ? e4.toFoldRange(n3) : void 0, a2 = i2(e3, e3.length), o2 = i2(t2, t2.length), s2 = 0, c2 = 0, l2 = a2(0), u2 = o2(0), d2 = [], f2, p2 = 0, m2 = [];
      for (; l2 || u2; ) {
        let e4;
        if (u2 && (!l2 || l2.startLineNumber >= u2.startLineNumber)) l2 && l2.startLineNumber === u2.startLineNumber ? (u2.source === 1 ? e4 = u2 : (e4 = l2, e4.isCollapsed = u2.isCollapsed && (l2.endLineNumber === u2.endLineNumber || !(r2 == null ? void 0 : r2.startsInside(l2.startLineNumber + 1, l2.endLineNumber + 1))), e4.source = 0), l2 = a2(++s2)) : (e4 = u2, u2.isCollapsed && u2.source === 0 && (e4.source = 2)), u2 = o2(++c2);
        else {
          let t3 = c2, n3 = u2;
          for (; ; ) {
            if (!n3 || n3.startLineNumber > l2.endLineNumber) {
              e4 = l2;
              break;
            }
            if (n3.source === 1 && n3.endLineNumber > l2.endLineNumber) break;
            n3 = o2(++t3);
          }
          l2 = a2(++s2);
        }
        if (e4) {
          for (; f2 && f2.endLineNumber < e4.startLineNumber; ) f2 = d2.pop();
          e4.endLineNumber > e4.startLineNumber && e4.startLineNumber > p2 && e4.endLineNumber <= n2 && (!f2 || f2.endLineNumber >= e4.endLineNumber) && (m2.push(e4), p2 = e4.startLineNumber, f2 && d2.push(f2), f2 = e4);
        }
      }
      return m2;
    }
  }, Wx = class {
    constructor(e2, t2) {
      this.ranges = e2, this.index = t2;
    }
    get startLineNumber() {
      return this.ranges.getStartLineNumber(this.index);
    }
    get endLineNumber() {
      return this.ranges.getEndLineNumber(this.index);
    }
    get regionIndex() {
      return this.index;
    }
    get parentIndex() {
      return this.ranges.getParentIndex(this.index);
    }
    get isCollapsed() {
      return this.ranges.isCollapsed(this.index);
    }
    containedBy(e2) {
      return e2.startLineNumber <= this.startLineNumber && e2.endLineNumber >= this.endLineNumber;
    }
    containsLine(e2) {
      return this.startLineNumber <= e2 && e2 <= this.endLineNumber;
    }
  }, Gx = class {
    get regions() {
      return this._regions;
    }
    get textModel() {
      return this._textModel;
    }
    constructor(e2, t2) {
      this._updateEventEmitter = new E(), this.onDidChange = this._updateEventEmitter.event, this._textModel = e2, this._decorationProvider = t2, this._regions = new Ux(new Uint32Array(), new Uint32Array()), this._editorDecorationIds = [];
    }
    toggleCollapseState(e2) {
      if (!e2.length) return;
      e2 = e2.sort((e3, t3) => e3.regionIndex - t3.regionIndex);
      let t2 = {};
      this._decorationProvider.changeDecorations((n2) => {
        let r2 = 0, i2 = -1, a2 = -1, o2 = (e3) => {
          for (; r2 < e3; ) {
            let e4 = this._regions.getEndLineNumber(r2), t3 = this._regions.isCollapsed(r2);
            if (e4 <= i2) {
              let i3 = this.regions.getSource(r2) !== 0;
              n2.changeDecorationOptions(this._editorDecorationIds[r2], this._decorationProvider.getDecorationOption(t3, e4 <= a2, i3));
            }
            t3 && e4 > a2 && (a2 = e4), r2++;
          }
        };
        for (let n3 of e2) {
          let e3 = n3.regionIndex, r3 = this._editorDecorationIds[e3];
          if (r3 && !t2[r3]) {
            t2[r3] = true, o2(e3);
            let n4 = !this._regions.isCollapsed(e3);
            this._regions.setCollapsed(e3, n4), i2 = Math.max(i2, this._regions.getEndLineNumber(e3));
          }
        }
        o2(this._regions.length);
      }), this._updateEventEmitter.fire({
        model: this,
        collapseStateChanged: e2
      });
    }
    removeManualRanges(e2) {
      let t2 = [], n2 = (t3) => {
        for (let n3 of e2) if (!(n3.startLineNumber > t3.endLineNumber || t3.startLineNumber > n3.endLineNumber)) return true;
        return false;
      };
      for (let e3 = 0; e3 < this._regions.length; e3++) {
        let r2 = this._regions.toFoldRange(e3);
        (r2.source === 0 || !n2(r2)) && t2.push(r2);
      }
      this.updatePost(Ux.fromFoldRanges(t2));
    }
    update(e2, t2) {
      let n2 = this._currentFoldedOrManualRanges(t2), r2 = Ux.sanitizeAndMerge(e2, n2, this._textModel.getLineCount(), t2);
      this.updatePost(Ux.fromFoldRanges(r2));
    }
    updatePost(e2) {
      let t2 = [], n2 = -1;
      for (let r2 = 0, i2 = e2.length; r2 < i2; r2++) {
        let i3 = e2.getStartLineNumber(r2), a2 = e2.getEndLineNumber(r2), o2 = e2.isCollapsed(r2), s2 = e2.getSource(r2) !== 0, c2 = {
          startLineNumber: i3,
          startColumn: this._textModel.getLineMaxColumn(i3),
          endLineNumber: a2,
          endColumn: this._textModel.getLineMaxColumn(a2) + 1
        };
        t2.push({
          range: c2,
          options: this._decorationProvider.getDecorationOption(o2, a2 <= n2, s2)
        }), o2 && a2 > n2 && (n2 = a2);
      }
      this._decorationProvider.changeDecorations((e3) => this._editorDecorationIds = e3.deltaDecorations(this._editorDecorationIds, t2)), this._regions = e2, this._updateEventEmitter.fire({
        model: this
      });
    }
    _currentFoldedOrManualRanges(e2) {
      let t2 = [];
      for (let n2 = 0, r2 = this._regions.length; n2 < r2; n2++) {
        let r3 = this.regions.isCollapsed(n2), i2 = this.regions.getSource(n2);
        if (r3 || i2 !== 0) {
          let a2 = this._regions.toFoldRange(n2), o2 = this._textModel.getDecorationRange(this._editorDecorationIds[n2]);
          o2 && (r3 && (e2 == null ? void 0 : e2.startsInside(o2.startLineNumber + 1, o2.endLineNumber)) && (r3 = false), t2.push({
            startLineNumber: o2.startLineNumber,
            endLineNumber: o2.endLineNumber,
            type: a2.type,
            isCollapsed: r3,
            source: i2
          }));
        }
      }
      return t2;
    }
    getMemento() {
      let e2 = this._currentFoldedOrManualRanges(), t2 = [], n2 = this._textModel.getLineCount();
      for (let r2 = 0, i2 = e2.length; r2 < i2; r2++) {
        let i3 = e2[r2];
        if (i3.startLineNumber >= i3.endLineNumber || i3.startLineNumber < 1 || i3.endLineNumber > n2) continue;
        let a2 = this._getLinesChecksum(i3.startLineNumber + 1, i3.endLineNumber);
        t2.push({
          startLineNumber: i3.startLineNumber,
          endLineNumber: i3.endLineNumber,
          isCollapsed: i3.isCollapsed,
          source: i3.source,
          checksum: a2
        });
      }
      return t2.length > 0 ? t2 : void 0;
    }
    applyMemento(e2) {
      if (!Array.isArray(e2)) return;
      let t2 = [], n2 = this._textModel.getLineCount();
      for (let r3 of e2) {
        if (r3.startLineNumber >= r3.endLineNumber || r3.startLineNumber < 1 || r3.endLineNumber > n2) continue;
        let e3 = this._getLinesChecksum(r3.startLineNumber + 1, r3.endLineNumber);
        (!r3.checksum || e3 === r3.checksum) && t2.push({
          startLineNumber: r3.startLineNumber,
          endLineNumber: r3.endLineNumber,
          type: void 0,
          isCollapsed: r3.isCollapsed ?? true,
          source: r3.source ?? 0
        });
      }
      let r2 = Ux.sanitizeAndMerge(this._regions, t2, n2);
      this.updatePost(Ux.fromFoldRanges(r2));
    }
    _getLinesChecksum(e2, t2) {
      let n2 = cs(this._textModel.getLineContent(e2) + this._textModel.getLineContent(t2));
      return n2 % 1e6;
    }
    dispose() {
      this._decorationProvider.removeDecorations(this._editorDecorationIds);
    }
    getAllRegionsAtLine(e2, t2) {
      let n2 = [];
      if (this._regions) {
        let r2 = this._regions.findRange(e2), i2 = 1;
        for (; r2 >= 0; ) {
          let e3 = this._regions.toRegion(r2);
          (!t2 || t2(e3, i2)) && n2.push(e3), i2++, r2 = e3.parentIndex;
        }
      }
      return n2;
    }
    getRegionAtLine(e2) {
      if (this._regions) {
        let t2 = this._regions.findRange(e2);
        if (t2 >= 0) return this._regions.toRegion(t2);
      }
      return null;
    }
    getRegionsInside(e2, t2) {
      let n2 = [], r2 = e2 ? e2.regionIndex + 1 : 0, i2 = e2 ? e2.endLineNumber : Number.MAX_VALUE;
      if (t2 && t2.length === 2) {
        let e3 = [];
        for (let a2 = r2, o2 = this._regions.length; a2 < o2; a2++) {
          let r3 = this._regions.toRegion(a2);
          if (this._regions.getStartLineNumber(a2) < i2) {
            for (; e3.length > 0 && !r3.containedBy(e3[e3.length - 1]); ) e3.pop();
            e3.push(r3), t2(r3, e3.length) && n2.push(r3);
          } else break;
        }
      } else for (let e3 = r2, a2 = this._regions.length; e3 < a2; e3++) {
        let r3 = this._regions.toRegion(e3);
        if (this._regions.getStartLineNumber(e3) < i2) (!t2 || t2(r3)) && n2.push(r3);
        else break;
      }
      return n2;
    }
  };
  function Kx(e2, t2, n2) {
    let r2 = [];
    for (let i2 of n2) {
      let n3 = e2.getRegionAtLine(i2);
      if (n3) {
        let i3 = !n3.isCollapsed;
        if (r2.push(n3), t2 > 1) {
          let a2 = e2.getRegionsInside(n3, (e3, n4) => e3.isCollapsed !== i3 && n4 < t2);
          r2.push(...a2);
        }
      }
    }
    e2.toggleCollapseState(r2);
  }
  function qx(e2, t2, n2 = Number.MAX_VALUE, r2) {
    let i2 = [];
    if (r2 && r2.length > 0) for (let a2 of r2) {
      let r3 = e2.getRegionAtLine(a2);
      if (r3 && (r3.isCollapsed !== t2 && i2.push(r3), n2 > 1)) {
        let a3 = e2.getRegionsInside(r3, (e3, r4) => e3.isCollapsed !== t2 && r4 < n2);
        i2.push(...a3);
      }
    }
    else {
      let r3 = e2.getRegionsInside(null, (e3, r4) => e3.isCollapsed !== t2 && r4 < n2);
      i2.push(...r3);
    }
    e2.toggleCollapseState(i2);
  }
  function Jx(e2, t2, n2, r2) {
    let i2 = [];
    for (let a2 of r2) {
      let r3 = e2.getAllRegionsAtLine(a2, (e3, r4) => e3.isCollapsed !== t2 && r4 <= n2);
      i2.push(...r3);
    }
    e2.toggleCollapseState(i2);
  }
  function Yx(e2, t2, n2) {
    let r2 = [];
    for (let i2 of n2) {
      let n3 = e2.getAllRegionsAtLine(i2, (e3) => e3.isCollapsed !== t2);
      n3.length > 0 && r2.push(n3[0]);
    }
    e2.toggleCollapseState(r2);
  }
  function Xx(e2, t2, n2, r2) {
    let i2 = (e3, i3) => i3 === t2 && e3.isCollapsed !== n2 && !r2.some((t3) => e3.containsLine(t3)), a2 = e2.getRegionsInside(null, i2);
    e2.toggleCollapseState(a2);
  }
  function Zx(e2, t2, n2) {
    let r2 = [];
    for (let t3 of n2) {
      let n3 = e2.getAllRegionsAtLine(t3, void 0);
      n3.length > 0 && r2.push(n3[0]);
    }
    let i2 = (e3) => r2.every((t3) => !t3.containedBy(e3) && !e3.containedBy(t3)) && e3.isCollapsed !== t2, a2 = e2.getRegionsInside(null, i2);
    e2.toggleCollapseState(a2);
  }
  function Qx(e2, t2, n2) {
    let r2 = e2.textModel, i2 = e2.regions, a2 = [];
    for (let e3 = i2.length - 1; e3 >= 0; e3--) if (n2 !== i2.isCollapsed(e3)) {
      let n3 = i2.getStartLineNumber(e3);
      t2.test(r2.getLineContent(n3)) && a2.push(i2.toRegion(e3));
    }
    e2.toggleCollapseState(a2);
  }
  function $x(e2, t2, n2) {
    let r2 = e2.regions, i2 = [];
    for (let e3 = r2.length - 1; e3 >= 0; e3--) n2 !== r2.isCollapsed(e3) && t2 === r2.getType(e3) && i2.push(r2.toRegion(e3));
    e2.toggleCollapseState(i2);
  }
  function eS(e2, t2) {
    let n2 = null, r2 = t2.getRegionAtLine(e2);
    if (r2 !== null && (n2 = r2.startLineNumber, e2 === n2)) {
      let e3 = r2.parentIndex;
      n2 = e3 === -1 ? null : t2.regions.getStartLineNumber(e3);
    }
    return n2;
  }
  function tS(e2, t2) {
    let n2 = t2.getRegionAtLine(e2);
    if (n2 !== null && n2.startLineNumber === e2) {
      if (e2 !== n2.startLineNumber) return n2.startLineNumber;
      {
        let e3 = n2.parentIndex, r2 = 0;
        for (e3 !== -1 && (r2 = t2.regions.getStartLineNumber(n2.parentIndex)); n2 !== null; ) if (n2.regionIndex > 0) {
          if (n2 = t2.regions.toRegion(n2.regionIndex - 1), n2.startLineNumber <= r2) return null;
          if (n2.parentIndex === e3) return n2.startLineNumber;
        } else return null;
      }
    } else if (t2.regions.length > 0) for (n2 = t2.regions.toRegion(t2.regions.length - 1); n2 !== null; ) {
      if (n2.startLineNumber < e2) return n2.startLineNumber;
      n2 = n2.regionIndex > 0 ? t2.regions.toRegion(n2.regionIndex - 1) : null;
    }
    return null;
  }
  function nS(e2, t2) {
    let n2 = t2.getRegionAtLine(e2);
    if (n2 !== null && n2.startLineNumber === e2) {
      let e3 = n2.parentIndex, r2 = 0;
      if (e3 !== -1) r2 = t2.regions.getEndLineNumber(n2.parentIndex);
      else if (t2.regions.length === 0) return null;
      else r2 = t2.regions.getEndLineNumber(t2.regions.length - 1);
      for (; n2 !== null; ) if (n2.regionIndex < t2.regions.length) {
        if (n2 = t2.regions.toRegion(n2.regionIndex + 1), n2.startLineNumber >= r2) return null;
        if (n2.parentIndex === e3) return n2.startLineNumber;
      } else return null;
    } else if (t2.regions.length > 0) for (n2 = t2.regions.toRegion(0); n2 !== null; ) {
      if (n2.startLineNumber > e2) return n2.startLineNumber;
      n2 = n2.regionIndex < t2.regions.length ? t2.regions.toRegion(n2.regionIndex + 1) : null;
    }
    return null;
  }
  var rS = class {
    get onDidChange() {
      return this._updateEventEmitter.event;
    }
    get hiddenRanges() {
      return this._hiddenRanges;
    }
    constructor(e2) {
      this._updateEventEmitter = new E(), this._hasLineChanges = false, this._foldingModel = e2, this._foldingModelListener = e2.onDidChange((e3) => this.updateHiddenRanges()), this._hiddenRanges = [], e2.regions.length && this.updateHiddenRanges();
    }
    notifyChangeModelContent(e2) {
      this._hiddenRanges.length && !this._hasLineChanges && (this._hasLineChanges = e2.changes.some((e3) => e3.range.endLineNumber !== e3.range.startLineNumber || na(e3.text)[0] !== 0));
    }
    updateHiddenRanges() {
      let e2 = false, t2 = [], n2 = 0, r2 = 0, i2 = Number.MAX_VALUE, a2 = -1, o2 = this._foldingModel.regions;
      for (; n2 < o2.length; n2++) {
        if (!o2.isCollapsed(n2)) continue;
        let s2 = o2.getStartLineNumber(n2) + 1, c2 = o2.getEndLineNumber(n2);
        i2 <= s2 && c2 <= a2 || (!e2 && r2 < this._hiddenRanges.length && this._hiddenRanges[r2].startLineNumber === s2 && this._hiddenRanges[r2].endLineNumber === c2 ? (t2.push(this._hiddenRanges[r2]), r2++) : (e2 = true, t2.push(new P(s2, 1, c2, 1))), i2 = s2, a2 = c2);
      }
      (this._hasLineChanges || e2 || r2 < this._hiddenRanges.length) && this.applyHiddenRanges(t2);
    }
    applyHiddenRanges(e2) {
      this._hiddenRanges = e2, this._hasLineChanges = false, this._updateEventEmitter.fire(e2);
    }
    hasRanges() {
      return this._hiddenRanges.length > 0;
    }
    isHidden(e2) {
      return aS(this._hiddenRanges, e2) !== null;
    }
    adjustSelections(e2) {
      let t2 = false, n2 = this._foldingModel.textModel, r2 = null, i2 = (e3) => ((!r2 || !iS(e3, r2)) && (r2 = aS(this._hiddenRanges, e3)), r2 ? r2.startLineNumber - 1 : null);
      for (let r3 = 0, a2 = e2.length; r3 < a2; r3++) {
        let a3 = e2[r3], o2 = i2(a3.startLineNumber);
        o2 && (a3 = a3.setStartPosition(o2, n2.getLineMaxColumn(o2)), t2 = true);
        let s2 = i2(a3.endLineNumber);
        s2 && (a3 = a3.setEndPosition(s2, n2.getLineMaxColumn(s2)), t2 = true), e2[r3] = a3;
      }
      return t2;
    }
    dispose() {
      this.hiddenRanges.length > 0 && (this._hiddenRanges = [], this._updateEventEmitter.fire(this._hiddenRanges)), this._foldingModelListener && (this._foldingModelListener.dispose(), this._foldingModelListener = null);
    }
  };
  function iS(e2, t2) {
    return e2 >= t2.startLineNumber && e2 <= t2.endLineNumber;
  }
  function aS(e2, t2) {
    let n2 = xo(e2, (e3) => t2 < e3.startLineNumber) - 1;
    return n2 >= 0 && e2[n2].endLineNumber >= t2 ? e2[n2] : null;
  }
  const oS = 5e3, sS = `indent`;
  var cS = class {
    constructor(e2, t2, n2) {
      this.editorModel = e2, this.languageConfigurationService = t2, this.foldingRangesLimit = n2, this.id = sS;
    }
    dispose() {
    }
    compute(e2) {
      let t2 = this.languageConfigurationService.getLanguageConfiguration(this.editorModel.getLanguageId()).foldingRules, n2 = t2 && !!t2.offSide, r2 = t2 && t2.markers;
      return Promise.resolve(dS(this.editorModel, n2, r2, this.foldingRangesLimit));
    }
  }, lS = class {
    constructor(e2) {
      this._startIndexes = [], this._endIndexes = [], this._indentOccurrences = [], this._length = 0, this._foldingRangesLimit = e2;
    }
    insertFirst(e2, t2, n2) {
      if (e2 > Bx || t2 > Bx) return;
      let r2 = this._length;
      this._startIndexes[r2] = e2, this._endIndexes[r2] = t2, this._length++, n2 < 1e3 && (this._indentOccurrences[n2] = (this._indentOccurrences[n2] || 0) + 1);
    }
    toIndentRanges(e2) {
      let t2 = this._foldingRangesLimit.limit;
      if (this._length <= t2) {
        this._foldingRangesLimit.update(this._length, false);
        let e3 = new Uint32Array(this._length), t3 = new Uint32Array(this._length);
        for (let n2 = this._length - 1, r2 = 0; n2 >= 0; n2--, r2++) e3[r2] = this._startIndexes[n2], t3[r2] = this._endIndexes[n2];
        return new Ux(e3, t3);
      } else {
        this._foldingRangesLimit.update(this._length, t2);
        let n2 = 0, r2 = this._indentOccurrences.length;
        for (let e3 = 0; e3 < this._indentOccurrences.length; e3++) {
          let i3 = this._indentOccurrences[e3];
          if (i3) {
            if (i3 + n2 > t2) {
              r2 = e3;
              break;
            }
            n2 += i3;
          }
        }
        let i2 = e2.getOptions().tabSize, a2 = new Uint32Array(t2), o2 = new Uint32Array(t2);
        for (let s2 = this._length - 1, c2 = 0; s2 >= 0; s2--) {
          let l2 = this._startIndexes[s2], u2 = e2.getLineContent(l2), d2 = Zi(u2, i2);
          (d2 < r2 || d2 === r2 && n2++ < t2) && (a2[c2] = l2, o2[c2] = this._endIndexes[s2], c2++);
        }
        return new Ux(a2, o2);
      }
    }
  };
  const uS = {
    limit: oS,
    update: () => {
    }
  };
  function dS(e2, t2, n2, r2 = uS) {
    let i2 = e2.getOptions().tabSize, a2 = new lS(r2), o2;
    n2 && (o2 = RegExp(`(${n2.start.source})|(?:${n2.end.source})`));
    let s2 = [], c2 = e2.getLineCount() + 1;
    s2.push({
      indent: -1,
      endAbove: c2,
      line: c2
    });
    for (let n3 = e2.getLineCount(); n3 > 0; n3--) {
      let r3 = e2.getLineContent(n3), c3 = Zi(r3, i2), l2 = s2[s2.length - 1];
      if (c3 === -1) {
        t2 && (l2.endAbove = n3);
        continue;
      }
      let u2;
      if (o2 && (u2 = r3.match(o2))) if (u2[1]) {
        let e3 = s2.length - 1;
        for (; e3 > 0 && s2[e3].indent !== -2; ) e3--;
        if (e3 > 0) {
          s2.length = e3 + 1, l2 = s2[e3], a2.insertFirst(n3, l2.line, c3), l2.line = n3, l2.indent = c3, l2.endAbove = n3;
          continue;
        }
      } else {
        s2.push({
          indent: -2,
          endAbove: n3,
          line: n3
        });
        continue;
      }
      if (l2.indent > c3) {
        do
          s2.pop(), l2 = s2[s2.length - 1];
        while (l2.indent > c3);
        let e3 = l2.endAbove - 1;
        e3 - n3 >= 1 && a2.insertFirst(n3, e3, c3);
      }
      l2.indent === c3 ? l2.endAbove = n3 : s2.push({
        indent: c3,
        endAbove: n3,
        line: n3
      });
    }
    return a2.toIndentRanges(e2);
  }
  const fS = q(`editor.foldBackground`, {
    light: ql(co, 0.3),
    dark: ql(co, 0.3),
    hcDark: null,
    hcLight: null
  }, U(`foldBackgroundBackground`, `Background color behind folded ranges. The color must not be opaque so as not to hide underlying decorations.`), true);
  q(`editor.foldPlaceholderForeground`, {
    light: `#808080`,
    dark: `#808080`,
    hcDark: null,
    hcLight: null
  }, U(`collapsedTextColor`, `Color of the collapsed text after the first line of a folded range.`)), q(`editorGutter.foldingControlForeground`, us, U(`editorGutter.foldingControlForeground`, `Color of the folding control in the editor gutter.`));
  const pS = cl(`folding-expanded`, _.chevronDown, U(`foldingExpandedIcon`, `Icon for expanded ranges in the editor glyph margin.`)), mS = cl(`folding-collapsed`, _.chevronRight, U(`foldingCollapsedIcon`, `Icon for collapsed ranges in the editor glyph margin.`)), hS = cl(`folding-manual-collapsed`, mS, U(`foldingManualCollapedIcon`, `Icon for manually collapsed ranges in the editor glyph margin.`)), gS = cl(`folding-manual-expanded`, pS, U(`foldingManualExpandedIcon`, `Icon for manually expanded ranges in the editor glyph margin.`)), _S = {
    color: zl(fS),
    position: 1
  }, vS = U(`linesCollapsed`, `Click to expand the range.`), yS = U(`linesExpanded`, `Click to collapse the range.`);
  var bS = (_Z = class {
    constructor(e2) {
      this.editor = e2, this.showFoldingControls = `mouseover`, this.showFoldingHighlights = true;
    }
    getDecorationOption(t2, n2, r2) {
      return n2 ? _Z.HIDDEN_RANGE_DECORATION : this.showFoldingControls === `never` ? t2 ? this.showFoldingHighlights ? _Z.NO_CONTROLS_COLLAPSED_HIGHLIGHTED_RANGE_DECORATION : _Z.NO_CONTROLS_COLLAPSED_RANGE_DECORATION : _Z.NO_CONTROLS_EXPANDED_RANGE_DECORATION : t2 ? r2 ? this.showFoldingHighlights ? _Z.MANUALLY_COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION : _Z.MANUALLY_COLLAPSED_VISUAL_DECORATION : this.showFoldingHighlights ? _Z.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION : _Z.COLLAPSED_VISUAL_DECORATION : this.showFoldingControls === `mouseover` ? r2 ? _Z.MANUALLY_EXPANDED_AUTO_HIDE_VISUAL_DECORATION : _Z.EXPANDED_AUTO_HIDE_VISUAL_DECORATION : r2 ? _Z.MANUALLY_EXPANDED_VISUAL_DECORATION : _Z.EXPANDED_VISUAL_DECORATION;
    }
    changeDecorations(e2) {
      return this.editor.changeDecorations(e2);
    }
    removeDecorations(e2) {
      this.editor.removeDecorations(e2);
    }
  }, _Z.COLLAPSED_VISUAL_DECORATION = M.register({
    description: `folding-collapsed-visual-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    isWholeLine: true,
    linesDecorationsTooltip: vS,
    firstLineDecorationClassName: L.asClassName(mS)
  }), _Z.COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION = M.register({
    description: `folding-collapsed-highlighted-visual-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    className: `folded-background`,
    minimap: _S,
    isWholeLine: true,
    linesDecorationsTooltip: vS,
    firstLineDecorationClassName: L.asClassName(mS)
  }), _Z.MANUALLY_COLLAPSED_VISUAL_DECORATION = M.register({
    description: `folding-manually-collapsed-visual-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    isWholeLine: true,
    linesDecorationsTooltip: vS,
    firstLineDecorationClassName: L.asClassName(hS)
  }), _Z.MANUALLY_COLLAPSED_HIGHLIGHTED_VISUAL_DECORATION = M.register({
    description: `folding-manually-collapsed-highlighted-visual-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    className: `folded-background`,
    minimap: _S,
    isWholeLine: true,
    linesDecorationsTooltip: vS,
    firstLineDecorationClassName: L.asClassName(hS)
  }), _Z.NO_CONTROLS_COLLAPSED_RANGE_DECORATION = M.register({
    description: `folding-no-controls-range-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    isWholeLine: true,
    linesDecorationsTooltip: vS
  }), _Z.NO_CONTROLS_COLLAPSED_HIGHLIGHTED_RANGE_DECORATION = M.register({
    description: `folding-no-controls-range-decoration`,
    stickiness: 0,
    afterContentClassName: `inline-folded`,
    className: `folded-background`,
    minimap: _S,
    isWholeLine: true,
    linesDecorationsTooltip: vS
  }), _Z.EXPANDED_VISUAL_DECORATION = M.register({
    description: `folding-expanded-visual-decoration`,
    stickiness: 1,
    isWholeLine: true,
    firstLineDecorationClassName: `alwaysShowFoldIcons ` + L.asClassName(pS),
    linesDecorationsTooltip: yS
  }), _Z.EXPANDED_AUTO_HIDE_VISUAL_DECORATION = M.register({
    description: `folding-expanded-auto-hide-visual-decoration`,
    stickiness: 1,
    isWholeLine: true,
    firstLineDecorationClassName: L.asClassName(pS),
    linesDecorationsTooltip: yS
  }), _Z.MANUALLY_EXPANDED_VISUAL_DECORATION = M.register({
    description: `folding-manually-expanded-visual-decoration`,
    stickiness: 0,
    isWholeLine: true,
    firstLineDecorationClassName: `alwaysShowFoldIcons ` + L.asClassName(gS),
    linesDecorationsTooltip: yS
  }), _Z.MANUALLY_EXPANDED_AUTO_HIDE_VISUAL_DECORATION = M.register({
    description: `folding-manually-expanded-auto-hide-visual-decoration`,
    stickiness: 0,
    isWholeLine: true,
    firstLineDecorationClassName: L.asClassName(gS),
    linesDecorationsTooltip: yS
  }), _Z.NO_CONTROLS_EXPANDED_RANGE_DECORATION = M.register({
    description: `folding-no-controls-range-decoration`,
    stickiness: 0,
    isWholeLine: true
  }), _Z.HIDDEN_RANGE_DECORATION = M.register({
    description: `folding-hidden-range-decoration`,
    stickiness: 1
  }), _Z);
  const xS = {}, SS = `syntax`;
  var CS = class {
    constructor(e2, t2, n2, r2, i2) {
      this.editorModel = e2, this.providers = t2, this.handleFoldingRangesChange = n2, this.foldingRangesLimit = r2, this.fallbackRangeProvider = i2, this.id = SS, this.disposables = new C(), i2 && this.disposables.add(i2);
      for (let e3 of t2) typeof e3.onDidChange == `function` && this.disposables.add(e3.onDidChange(n2));
    }
    compute(e2) {
      return wS(this.providers, this.editorModel, e2).then((t2) => {
        var _a3;
        if (t2) {
          let e3 = ES(t2, this.foldingRangesLimit);
          return e3;
        }
        return ((_a3 = this.fallbackRangeProvider) == null ? void 0 : _a3.compute(e2)) ?? null;
      });
    }
    dispose() {
      this.disposables.dispose();
    }
  };
  function wS(e2, t2, n2) {
    let r2 = null, i2 = e2.map((e3, i3) => Promise.resolve(e3.provideFoldingRanges(t2, xS, n2)).then((e4) => {
      if (!n2.isCancellationRequested && Array.isArray(e4)) {
        Array.isArray(r2) || (r2 = []);
        let n3 = t2.getLineCount();
        for (let t3 of e4) t3.start > 0 && t3.end > t3.start && t3.end <= n3 && r2.push({
          start: t3.start,
          end: t3.end,
          rank: i3,
          kind: t3.kind
        });
      }
    }, Uc));
    return Promise.all(i2).then((e3) => r2);
  }
  var TS = class {
    constructor(e2) {
      this._startIndexes = [], this._endIndexes = [], this._nestingLevels = [], this._nestingLevelCounts = [], this._types = [], this._length = 0, this._foldingRangesLimit = e2;
    }
    add(e2, t2, n2, r2) {
      if (e2 > Bx || t2 > Bx) return;
      let i2 = this._length;
      this._startIndexes[i2] = e2, this._endIndexes[i2] = t2, this._nestingLevels[i2] = r2, this._types[i2] = n2, this._length++, r2 < 30 && (this._nestingLevelCounts[r2] = (this._nestingLevelCounts[r2] || 0) + 1);
    }
    toIndentRanges() {
      let e2 = this._foldingRangesLimit.limit;
      if (this._length <= e2) {
        this._foldingRangesLimit.update(this._length, false);
        let e3 = new Uint32Array(this._length), t2 = new Uint32Array(this._length);
        for (let n2 = 0; n2 < this._length; n2++) e3[n2] = this._startIndexes[n2], t2[n2] = this._endIndexes[n2];
        return new Ux(e3, t2, this._types);
      } else {
        this._foldingRangesLimit.update(this._length, e2);
        let t2 = 0, n2 = this._nestingLevelCounts.length;
        for (let r3 = 0; r3 < this._nestingLevelCounts.length; r3++) {
          let i3 = this._nestingLevelCounts[r3];
          if (i3) {
            if (i3 + t2 > e2) {
              n2 = r3;
              break;
            }
            t2 += i3;
          }
        }
        let r2 = new Uint32Array(e2), i2 = new Uint32Array(e2), a2 = [];
        for (let o2 = 0, s2 = 0; o2 < this._length; o2++) {
          let c2 = this._nestingLevels[o2];
          (c2 < n2 || c2 === n2 && t2++ < e2) && (r2[s2] = this._startIndexes[o2], i2[s2] = this._endIndexes[o2], a2[s2] = this._types[o2], s2++);
        }
        return new Ux(r2, i2, a2);
      }
    }
  };
  function ES(e2, t2) {
    let n2 = e2.sort((e3, t3) => {
      let n3 = e3.start - t3.start;
      return n3 === 0 && (n3 = e3.rank - t3.rank), n3;
    }), r2 = new TS(t2), i2, a2 = [];
    for (let e3 of n2) if (!i2) i2 = e3, r2.add(e3.start, e3.end, e3.kind && e3.kind.value, a2.length);
    else if (e3.start > i2.start) if (e3.end <= i2.end) a2.push(i2), i2 = e3, r2.add(e3.start, e3.end, e3.kind && e3.kind.value, a2.length);
    else {
      if (e3.start > i2.end) {
        do
          i2 = a2.pop();
        while (i2 && e3.start > i2.end);
        i2 && a2.push(i2), i2 = e3;
      }
      r2.add(e3.start, e3.end, e3.kind && e3.kind.value, a2.length);
    }
    return r2.toIndentRanges();
  }
  var DS = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, OS = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, kS;
  const AS = new F(`foldingEnabled`, false);
  let jS = (__2 = class extends S {
    static get(e2) {
      return e2.getContribution(kS.ID);
    }
    static getFoldingRangeProviders(e2, t2) {
      var _a3;
      let n2 = e2.foldingRangeProvider.ordered(t2);
      return ((_a3 = kS._foldingRangeSelector) == null ? void 0 : _a3.call(kS, n2, t2)) ?? n2;
    }
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this.contextKeyService = t2, this.languageConfigurationService = n2, this.languageFeaturesService = a2, this.localToDispose = this._register(new C()), this.editor = e2, this._foldingLimitReporter = new MS(e2);
      let o2 = this.editor.getOptions();
      this._isEnabled = o2.get(43), this._useFoldingProviders = o2.get(44) !== `indentation`, this._unfoldOnClickAfterEndOfLine = o2.get(48), this._restoringViewState = false, this._currentModelHasFoldedImports = false, this._foldingImportsByDefault = o2.get(46), this.updateDebounceInfo = i2.for(a2.foldingRangeProvider, `Folding`, {
        min: 200
      }), this.foldingModel = null, this.hiddenRangeModel = null, this.rangeProvider = null, this.foldingRegionPromise = null, this.foldingModelPromise = null, this.updateScheduler = null, this.cursorChangedScheduler = null, this.mouseDownInfo = null, this.foldingDecorationProvider = new bS(e2), this.foldingDecorationProvider.showFoldingControls = o2.get(111), this.foldingDecorationProvider.showFoldingHighlights = o2.get(45), this.foldingEnabled = AS.bindTo(this.contextKeyService), this.foldingEnabled.set(this._isEnabled), this._register(this.editor.onDidChangeModel(() => this.onModelChanged())), this._register(this.editor.onDidChangeConfiguration((e3) => {
        if (e3.hasChanged(43) && (this._isEnabled = this.editor.getOptions().get(43), this.foldingEnabled.set(this._isEnabled), this.onModelChanged()), e3.hasChanged(47) && this.onModelChanged(), e3.hasChanged(111) || e3.hasChanged(45)) {
          let e4 = this.editor.getOptions();
          this.foldingDecorationProvider.showFoldingControls = e4.get(111), this.foldingDecorationProvider.showFoldingHighlights = e4.get(45), this.triggerFoldingModelChanged();
        }
        e3.hasChanged(44) && (this._useFoldingProviders = this.editor.getOptions().get(44) !== `indentation`, this.onFoldingStrategyChanged()), e3.hasChanged(48) && (this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48)), e3.hasChanged(46) && (this._foldingImportsByDefault = this.editor.getOptions().get(46));
      })), this.onModelChanged();
    }
    saveViewState() {
      let e2 = this.editor.getModel();
      if (!e2 || !this._isEnabled || e2.isTooLargeForTokenization()) return {};
      if (this.foldingModel) {
        let t2 = this.foldingModel.getMemento(), n2 = this.rangeProvider ? this.rangeProvider.id : void 0;
        return {
          collapsedRegions: t2,
          lineCount: e2.getLineCount(),
          provider: n2,
          foldedImports: this._currentModelHasFoldedImports
        };
      }
    }
    restoreViewState(e2) {
      let t2 = this.editor.getModel();
      if (!(!t2 || !this._isEnabled || t2.isTooLargeForTokenization() || !this.hiddenRangeModel) && e2 && (this._currentModelHasFoldedImports = !!e2.foldedImports, e2.collapsedRegions && e2.collapsedRegions.length > 0 && this.foldingModel)) {
        this._restoringViewState = true;
        try {
          this.foldingModel.applyMemento(e2.collapsedRegions);
        } finally {
          this._restoringViewState = false;
        }
      }
    }
    onModelChanged() {
      this.localToDispose.clear();
      let e2 = this.editor.getModel();
      !this._isEnabled || !e2 || e2.isTooLargeForTokenization() || (this._currentModelHasFoldedImports = false, this.foldingModel = new Gx(e2, this.foldingDecorationProvider), this.localToDispose.add(this.foldingModel), this.hiddenRangeModel = new rS(this.foldingModel), this.localToDispose.add(this.hiddenRangeModel), this.localToDispose.add(this.hiddenRangeModel.onDidChange((e3) => this.onHiddenRangesChanges(e3))), this.updateScheduler = new ve(this.updateDebounceInfo.get(e2)), this.cursorChangedScheduler = new hr(() => this.revealCursor(), 200), this.localToDispose.add(this.cursorChangedScheduler), this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged())), this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())), this.localToDispose.add(this.editor.onDidChangeModelContent((e3) => this.onDidChangeModelContent(e3))), this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged())), this.localToDispose.add(this.editor.onMouseDown((e3) => this.onEditorMouseDown(e3))), this.localToDispose.add(this.editor.onMouseUp((e3) => this.onEditorMouseUp(e3))), this.localToDispose.add({
        dispose: () => {
          var _a3, _b3;
          this.foldingRegionPromise && (this.foldingRegionPromise.cancel(), this.foldingRegionPromise = null), (_a3 = this.updateScheduler) == null ? void 0 : _a3.cancel(), this.updateScheduler = null, this.foldingModel = null, this.foldingModelPromise = null, this.hiddenRangeModel = null, this.cursorChangedScheduler = null, (_b3 = this.rangeProvider) == null ? void 0 : _b3.dispose(), this.rangeProvider = null;
        }
      }), this.triggerFoldingModelChanged());
    }
    onFoldingStrategyChanged() {
      var _a3;
      (_a3 = this.rangeProvider) == null ? void 0 : _a3.dispose(), this.rangeProvider = null, this.triggerFoldingModelChanged();
    }
    getRangeProvider(e2) {
      if (this.rangeProvider) return this.rangeProvider;
      let t2 = new cS(e2, this.languageConfigurationService, this._foldingLimitReporter);
      if (this.rangeProvider = t2, this._useFoldingProviders && this.foldingModel) {
        let n2 = kS.getFoldingRangeProviders(this.languageFeaturesService, e2);
        n2.length > 0 && (this.rangeProvider = new CS(e2, n2, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, t2));
      }
      return this.rangeProvider;
    }
    getFoldingModel() {
      return this.foldingModelPromise;
    }
    onDidChangeModelContent(e2) {
      var _a3;
      (_a3 = this.hiddenRangeModel) == null ? void 0 : _a3.notifyChangeModelContent(e2), this.triggerFoldingModelChanged();
    }
    triggerFoldingModelChanged() {
      this.updateScheduler && (this.foldingRegionPromise && (this.foldingRegionPromise.cancel(), this.foldingRegionPromise = null), this.foldingModelPromise = this.updateScheduler.trigger(() => {
        let e2 = this.foldingModel;
        if (!e2) return null;
        let t2 = new Fr(), n2 = this.getRangeProvider(e2.textModel), r2 = this.foldingRegionPromise = sa((e3) => n2.compute(e3));
        return r2.then((n3) => {
          if (n3 && r2 === this.foldingRegionPromise) {
            let r3;
            if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {
              let e3 = n3.setCollapsedAllOfType(Ke.Imports.value, true);
              e3 && (r3 = Mr.capture(this.editor), this._currentModelHasFoldedImports = e3);
            }
            let i2 = this.editor.getSelections();
            e2.update(n3, PS(i2)), r3 == null ? void 0 : r3.restore(this.editor);
            let a2 = this.updateDebounceInfo.update(e2.textModel, t2.elapsed());
            this.updateScheduler && (this.updateScheduler.defaultDelay = a2);
          }
          return e2;
        });
      }).then(void 0, (e2) => (G(e2), null)));
    }
    onHiddenRangesChanges(e2) {
      if (this.hiddenRangeModel && e2.length && !this._restoringViewState) {
        let e3 = this.editor.getSelections();
        e3 && this.hiddenRangeModel.adjustSelections(e3) && this.editor.setSelections(e3);
      }
      this.editor.setHiddenAreas(e2, this);
    }
    onCursorPositionChanged() {
      this.hiddenRangeModel && this.hiddenRangeModel.hasRanges() && this.cursorChangedScheduler.schedule();
    }
    revealCursor() {
      let e2 = this.getFoldingModel();
      e2 && e2.then((e3) => {
        if (e3) {
          let t2 = this.editor.getSelections();
          if (t2 && t2.length > 0) {
            let n2 = [];
            for (let r2 of t2) {
              let t3 = r2.selectionStartLineNumber;
              this.hiddenRangeModel && this.hiddenRangeModel.isHidden(t3) && n2.push(...e3.getAllRegionsAtLine(t3, (e4) => e4.isCollapsed && t3 > e4.startLineNumber));
            }
            n2.length && (e3.toggleCollapseState(n2), this.reveal(t2[0].getPosition()));
          }
        }
      }).then(void 0, G);
    }
    onEditorMouseDown(e2) {
      if (this.mouseDownInfo = null, !this.hiddenRangeModel || !e2.target || !e2.target.range || !e2.event.leftButton && !e2.event.middleButton) return;
      let t2 = e2.target.range, n2 = false;
      switch (e2.target.type) {
        case 4: {
          let t3 = e2.target.detail, r2 = e2.target.element.offsetLeft, i2 = t3.offsetX - r2;
          if (i2 < 4) return;
          n2 = true;
          break;
        }
        case 7:
          if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {
            let t3 = e2.target.detail;
            if (!t3.isAfterLines) break;
          }
          return;
        case 6:
          if (this.hiddenRangeModel.hasRanges()) {
            let e3 = this.editor.getModel();
            if (e3 && t2.startColumn === e3.getLineMaxColumn(t2.startLineNumber)) break;
          }
          return;
        default:
          return;
      }
      this.mouseDownInfo = {
        lineNumber: t2.startLineNumber,
        iconClicked: n2
      };
    }
    onEditorMouseUp(e2) {
      let t2 = this.foldingModel;
      if (!t2 || !this.mouseDownInfo || !e2.target) return;
      let n2 = this.mouseDownInfo.lineNumber, r2 = this.mouseDownInfo.iconClicked, i2 = e2.target.range;
      if (!i2 || i2.startLineNumber !== n2) return;
      if (r2) {
        if (e2.target.type !== 4) return;
      } else {
        let e3 = this.editor.getModel();
        if (!e3 || i2.startColumn !== e3.getLineMaxColumn(n2)) return;
      }
      let a2 = t2.getRegionAtLine(n2);
      if (a2 && a2.startLineNumber === n2) {
        let i3 = a2.isCollapsed;
        if (r2 || i3) {
          let r3 = e2.event.altKey, o2 = [];
          if (r3) {
            let e3 = (e4) => !e4.containedBy(a2) && !a2.containedBy(e4), n3 = t2.getRegionsInside(null, e3);
            for (let e4 of n3) e4.isCollapsed && o2.push(e4);
            o2.length === 0 && (o2 = n3);
          } else {
            let n3 = e2.event.middleButton || e2.event.shiftKey;
            if (n3) for (let e3 of t2.getRegionsInside(a2)) e3.isCollapsed === i3 && o2.push(e3);
            (i3 || !n3 || o2.length === 0) && o2.push(a2);
          }
          t2.toggleCollapseState(o2), this.reveal({
            lineNumber: n2,
            column: 1
          });
        }
      }
    }
    reveal(e2) {
      this.editor.revealPositionInCenterIfOutsideViewport(e2, 0);
    }
  }, kS = __2, __2.ID = `editor.contrib.folding`, __2);
  jS = kS = DS([
    OS(1, O),
    OS(2, Tt),
    OS(3, Ft),
    OS(4, Et),
    OS(5, A)
  ], jS);
  var MS = class {
    constructor(e2) {
      this.editor = e2, this._onDidChange = new E(), this._computed = 0, this._limited = false;
    }
    get limit() {
      return this.editor.getOptions().get(47);
    }
    update(e2, t2) {
      (e2 !== this._computed || t2 !== this._limited) && (this._computed = e2, this._limited = t2, this._onDidChange.fire());
    }
  }, NS = class extends w {
    runEditorCommand(e2, t2, n2) {
      let r2 = e2.get(Tt), i2 = jS.get(t2);
      if (!i2) return;
      let a2 = i2.getFoldingModel();
      if (a2) return this.reportTelemetry(e2, t2), a2.then((e3) => {
        if (e3) {
          this.invoke(i2, e3, t2, n2, r2);
          let a3 = t2.getSelection();
          a3 && i2.reveal(a3.getStartPosition());
        }
      });
    }
    getSelectedLines(e2) {
      let t2 = e2.getSelections();
      return t2 ? t2.map((e3) => e3.startLineNumber) : [];
    }
    getLineNumbers(e2, t2) {
      return e2 && e2.selectionLines ? e2.selectionLines.map((e3) => e3 + 1) : this.getSelectedLines(t2);
    }
    run(e2, t2) {
    }
  };
  function PS(e2) {
    return !e2 || e2.length === 0 ? {
      startsInside: () => false
    } : {
      startsInside(t2, n2) {
        for (let r2 of e2) {
          let e3 = r2.startLineNumber;
          if (e3 >= t2 && e3 <= n2) return true;
        }
        return false;
      }
    };
  }
  function FS(e2) {
    if (!ac(e2)) {
      if (!tc(e2)) return false;
      let t2 = e2;
      if (!ac(t2.levels) && !ec(t2.levels) || !ac(t2.direction) && !ic(t2.direction) || !ac(t2.selectionLines) && (!Array.isArray(t2.selectionLines) || !t2.selectionLines.every(ec))) return false;
    }
    return true;
  }
  var IS = class extends NS {
    constructor() {
      super({
        id: `editor.unfold`,
        label: U(`unfoldAction.label`, `Unfold`),
        alias: `Unfold`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3166,
          mac: {
            primary: 2654
          },
          weight: 100
        },
        metadata: {
          description: `Unfold the content in the editor`,
          args: [
            {
              name: `Unfold editor argument`,
              description: `Property-value pairs that can be passed through this argument:
						* 'levels': Number of levels to unfold. If not set, defaults to 1.
						* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.
						* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.
						`,
              constraint: FS,
              schema: {
                type: `object`,
                properties: {
                  levels: {
                    type: `number`,
                    default: 1
                  },
                  direction: {
                    type: `string`,
                    enum: [
                      `up`,
                      `down`
                    ],
                    default: `down`
                  },
                  selectionLines: {
                    type: `array`,
                    items: {
                      type: `number`
                    }
                  }
                }
              }
            }
          ]
        }
      });
    }
    invoke(e2, t2, n2, r2) {
      let i2 = r2 && r2.levels || 1, a2 = this.getLineNumbers(r2, n2);
      r2 && r2.direction === `up` ? Jx(t2, false, i2, a2) : qx(t2, false, i2, a2);
    }
  }, LS = class extends NS {
    constructor() {
      super({
        id: `editor.unfoldRecursively`,
        label: U(`unFoldRecursivelyAction.label`, `Unfold Recursively`),
        alias: `Unfold Recursively`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2142),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2, r2) {
      qx(t2, false, Number.MAX_VALUE, this.getSelectedLines(n2));
    }
  }, RS = class extends NS {
    constructor() {
      super({
        id: `editor.fold`,
        label: U(`foldAction.label`, `Fold`),
        alias: `Fold`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3164,
          mac: {
            primary: 2652
          },
          weight: 100
        },
        metadata: {
          description: `Fold the content in the editor`,
          args: [
            {
              name: `Fold editor argument`,
              description: `Property-value pairs that can be passed through this argument:
							* 'levels': Number of levels to fold.
							* 'direction': If 'up', folds given number of levels up otherwise folds down.
							* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.
							If no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.
						`,
              constraint: FS,
              schema: {
                type: `object`,
                properties: {
                  levels: {
                    type: `number`
                  },
                  direction: {
                    type: `string`,
                    enum: [
                      `up`,
                      `down`
                    ]
                  },
                  selectionLines: {
                    type: `array`,
                    items: {
                      type: `number`
                    }
                  }
                }
              }
            }
          ]
        }
      });
    }
    invoke(e2, t2, n2, r2) {
      let i2 = this.getLineNumbers(r2, n2), a2 = r2 && r2.levels, o2 = r2 && r2.direction;
      typeof a2 != `number` && typeof o2 != `string` ? Yx(t2, true, i2) : o2 === `up` ? Jx(t2, true, a2 || 1, i2) : qx(t2, true, a2 || 1, i2);
    }
  }, zS = class extends NS {
    constructor() {
      super({
        id: `editor.toggleFold`,
        label: U(`toggleFoldAction.label`, `Toggle Fold`),
        alias: `Toggle Fold`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2090),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      Kx(t2, 1, r2);
    }
  }, BS = class extends NS {
    constructor() {
      super({
        id: `editor.foldRecursively`,
        label: U(`foldRecursivelyAction.label`, `Fold Recursively`),
        alias: `Fold Recursively`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2140),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      qx(t2, true, Number.MAX_VALUE, r2);
    }
  }, VS = class extends NS {
    constructor() {
      super({
        id: `editor.toggleFoldRecursively`,
        label: U(`toggleFoldRecursivelyAction.label`, `Toggle Fold Recursively`),
        alias: `Toggle Fold Recursively`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 3114),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      Kx(t2, Number.MAX_VALUE, r2);
    }
  }, HS = class extends NS {
    constructor() {
      super({
        id: `editor.foldAllBlockComments`,
        label: U(`foldAllBlockComments.label`, `Fold All Block Comments`),
        alias: `Fold All Block Comments`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2138),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2, r2, i2) {
      if (t2.regions.hasTypes()) $x(t2, Ke.Comment.value, true);
      else {
        let e3 = n2.getModel();
        if (!e3) return;
        let r3 = i2.getLanguageConfiguration(e3.getLanguageId()).comments;
        if (r3 && r3.blockCommentStartToken) {
          let e4 = RegExp(`^\\s*` + vo(r3.blockCommentStartToken));
          Qx(t2, e4, true);
        }
      }
    }
  }, US = class extends NS {
    constructor() {
      super({
        id: `editor.foldAllMarkerRegions`,
        label: U(`foldAllMarkerRegions.label`, `Fold All Regions`),
        alias: `Fold All Regions`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2077),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2, r2, i2) {
      if (t2.regions.hasTypes()) $x(t2, Ke.Region.value, true);
      else {
        let e3 = n2.getModel();
        if (!e3) return;
        let r3 = i2.getLanguageConfiguration(e3.getLanguageId()).foldingRules;
        if (r3 && r3.markers && r3.markers.start) {
          let e4 = new RegExp(r3.markers.start);
          Qx(t2, e4, true);
        }
      }
    }
  }, WS = class extends NS {
    constructor() {
      super({
        id: `editor.unfoldAllMarkerRegions`,
        label: U(`unfoldAllMarkerRegions.label`, `Unfold All Regions`),
        alias: `Unfold All Regions`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2078),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2, r2, i2) {
      if (t2.regions.hasTypes()) $x(t2, Ke.Region.value, false);
      else {
        let e3 = n2.getModel();
        if (!e3) return;
        let r3 = i2.getLanguageConfiguration(e3.getLanguageId()).foldingRules;
        if (r3 && r3.markers && r3.markers.start) {
          let e4 = new RegExp(r3.markers.start);
          Qx(t2, e4, false);
        }
      }
    }
  }, GS = class extends NS {
    constructor() {
      super({
        id: `editor.foldAllExcept`,
        label: U(`foldAllExcept.label`, `Fold All Except Selected`),
        alias: `Fold All Except Selected`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2136),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      Zx(t2, true, r2);
    }
  }, KS = class extends NS {
    constructor() {
      super({
        id: `editor.unfoldAllExcept`,
        label: U(`unfoldAllExcept.label`, `Unfold All Except Selected`),
        alias: `Unfold All Except Selected`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2134),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      Zx(t2, false, r2);
    }
  }, qS = class extends NS {
    constructor() {
      super({
        id: `editor.foldAll`,
        label: U(`foldAllAction.label`, `Fold All`),
        alias: `Fold All`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2069),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      qx(t2, true);
    }
  }, JS = class extends NS {
    constructor() {
      super({
        id: `editor.unfoldAll`,
        label: U(`unfoldAllAction.label`, `Unfold All`),
        alias: `Unfold All`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2088),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      qx(t2, false);
    }
  }, YS = (_$ = class extends NS {
    getFoldingLevel() {
      return parseInt(this.id.substr(_$.ID_PREFIX.length));
    }
    invoke(e2, t2, n2) {
      Xx(t2, this.getFoldingLevel(), true, this.getSelectedLines(n2));
    }
  }, _$.ID_PREFIX = `editor.foldLevel`, _$.ID = (t2) => _$.ID_PREFIX + t2, _$), XS = class extends NS {
    constructor() {
      super({
        id: `editor.gotoParentFold`,
        label: U(`gotoParentFold.label`, `Go to Parent Fold`),
        alias: `Go to Parent Fold`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      if (r2.length > 0) {
        let e3 = eS(r2[0], t2);
        e3 !== null && n2.setSelection({
          startLineNumber: e3,
          startColumn: 1,
          endLineNumber: e3,
          endColumn: 1
        });
      }
    }
  }, ZS = class extends NS {
    constructor() {
      super({
        id: `editor.gotoPreviousFold`,
        label: U(`gotoPreviousFold.label`, `Go to Previous Folding Range`),
        alias: `Go to Previous Folding Range`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      if (r2.length > 0) {
        let e3 = tS(r2[0], t2);
        e3 !== null && n2.setSelection({
          startLineNumber: e3,
          startColumn: 1,
          endLineNumber: e3,
          endColumn: 1
        });
      }
    }
  }, QS = class extends NS {
    constructor() {
      super({
        id: `editor.gotoNextFold`,
        label: U(`gotoNextFold.label`, `Go to Next Folding Range`),
        alias: `Go to Next Folding Range`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = this.getSelectedLines(n2);
      if (r2.length > 0) {
        let e3 = nS(r2[0], t2);
        e3 !== null && n2.setSelection({
          startLineNumber: e3,
          startColumn: 1,
          endLineNumber: e3,
          endColumn: 1
        });
      }
    }
  }, $S = class extends NS {
    constructor() {
      super({
        id: `editor.createFoldingRangeFromSelection`,
        label: U(`createManualFoldRange.label`, `Create Folding Range from Selection`),
        alias: `Create Folding Range from Selection`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2135),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      var _a3;
      let r2 = [], i2 = n2.getSelections();
      if (i2) {
        for (let e3 of i2) {
          let t3 = e3.endLineNumber;
          e3.endColumn === 1 && --t3, t3 > e3.startLineNumber && (r2.push({
            startLineNumber: e3.startLineNumber,
            endLineNumber: t3,
            type: void 0,
            isCollapsed: true,
            source: 1
          }), n2.setSelection({
            startLineNumber: e3.startLineNumber,
            startColumn: 1,
            endLineNumber: e3.startLineNumber,
            endColumn: 1
          }));
        }
        if (r2.length > 0) {
          r2.sort((e4, t3) => e4.startLineNumber - t3.startLineNumber);
          let e3 = Ux.sanitizeAndMerge(t2.regions, r2, (_a3 = n2.getModel()) == null ? void 0 : _a3.getLineCount());
          t2.updatePost(Ux.fromFoldRanges(e3));
        }
      }
    }
  }, eC = class extends NS {
    constructor() {
      super({
        id: `editor.removeManualFoldingRanges`,
        label: U(`removeManualFoldingRanges.label`, `Remove Manual Folding Ranges`),
        alias: `Remove Manual Folding Ranges`,
        precondition: AS,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2137),
          weight: 100
        }
      });
    }
    invoke(e2, t2, n2) {
      let r2 = n2.getSelections();
      if (r2) {
        let n3 = [];
        for (let e3 of r2) {
          let { startLineNumber: t3, endLineNumber: r3 } = e3;
          n3.push(r3 >= t3 ? {
            startLineNumber: t3,
            endLineNumber: r3
          } : {
            endLineNumber: r3,
            startLineNumber: t3
          });
        }
        t2.removeManualRanges(n3), e2.triggerFoldingModelChanged();
      }
    }
  };
  X(jS.ID, jS, 0), J(IS), J(LS), J(RS), J(BS), J(VS), J(qS), J(JS), J(HS), J(US), J(WS), J(GS), J(KS), J(zS), J(XS), J(ZS), J(QS), J($S), J(eC);
  for (let e2 = 1; e2 <= 7; e2++) ll(new YS({
    id: YS.ID(e2),
    label: U(`foldLevelAction.label`, `Fold Level {0}`, e2),
    alias: `Fold Level ${e2}`,
    precondition: AS,
    kbOpts: {
      kbExpr: T.editorTextFocus,
      primary: un(2089, 2048 | 21 + e2),
      weight: 100
    }
  }));
  y.registerCommand(`_executeFoldingRangeProvider`, async function(e2, ...t2) {
    let [n2] = t2;
    if (!(n2 instanceof R)) throw ds();
    let r2 = e2.get(A), i2 = e2.get(Pt).getModel(n2);
    if (!i2) throw ds();
    let a2 = e2.get(D);
    if (!a2.getValue(`editor.folding`, {
      resource: n2
    })) return [];
    let o2 = e2.get(Tt), s2 = a2.getValue(`editor.foldingStrategy`, {
      resource: n2
    }), c2 = {
      get limit() {
        return a2.getValue(`editor.foldingMaximumRegions`, {
          resource: n2
        });
      },
      update: (e3, t3) => {
      }
    }, l2 = new cS(i2, o2, c2), u2 = l2;
    if (s2 !== `indentation`) {
      let e3 = jS.getFoldingRangeProviders(r2, i2);
      e3.length && (u2 = new CS(i2, e3, () => {
      }, c2, l2));
    }
    let d2 = await u2.compute(m.None), f2 = [];
    try {
      if (d2) for (let e3 = 0; e3 < d2.length; e3++) {
        let t3 = d2.getType(e3);
        f2.push({
          start: d2.getStartLineNumber(e3),
          end: d2.getEndLineNumber(e3),
          kind: t3 ? Ke.fromValue(t3) : void 0
        });
      }
      return f2;
    } finally {
      u2.dispose();
    }
  });
  var tC = class extends w {
    constructor() {
      super({
        id: `editor.action.fontZoomIn`,
        label: U(`EditorFontZoomIn.label`, `Increase Editor Font Size`),
        alias: `Increase Editor Font Size`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      Ie.setZoomLevel(Ie.getZoomLevel() + 1);
    }
  }, nC = class extends w {
    constructor() {
      super({
        id: `editor.action.fontZoomOut`,
        label: U(`EditorFontZoomOut.label`, `Decrease Editor Font Size`),
        alias: `Decrease Editor Font Size`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      Ie.setZoomLevel(Ie.getZoomLevel() - 1);
    }
  }, rC = class extends w {
    constructor() {
      super({
        id: `editor.action.fontZoomReset`,
        label: U(`EditorFontZoomReset.label`, `Reset Editor Font Size`),
        alias: `Reset Editor Font Size`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      Ie.setZoomLevel(0);
    }
  };
  J(tC), J(nC), J(rC);
  var iC = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, aC = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let oC = (_aa = class {
    constructor(e2, t2, n2, r2) {
      this._editor = e2, this._languageFeaturesService = t2, this._workerService = n2, this._accessibilitySignalService = r2, this._disposables = new C(), this._sessionDisposables = new C(), this._disposables.add(t2.onTypeFormattingEditProvider.onDidChange(this._update, this)), this._disposables.add(e2.onDidChangeModel(() => this._update())), this._disposables.add(e2.onDidChangeModelLanguage(() => this._update())), this._disposables.add(e2.onDidChangeConfiguration((e3) => {
        e3.hasChanged(56) && this._update();
      })), this._update();
    }
    dispose() {
      this._disposables.dispose(), this._sessionDisposables.dispose();
    }
    _update() {
      if (this._sessionDisposables.clear(), !this._editor.getOption(56) || !this._editor.hasModel()) return;
      let e2 = this._editor.getModel(), [t2] = this._languageFeaturesService.onTypeFormattingEditProvider.ordered(e2);
      if (!t2 || !t2.autoFormatTriggerCharacters) return;
      let n2 = new te();
      for (let e3 of t2.autoFormatTriggerCharacters) n2.add(e3.charCodeAt(0));
      this._sessionDisposables.add(this._editor.onDidType((e3) => {
        let t3 = e3.charCodeAt(e3.length - 1);
        n2.has(t3) && this._trigger(String.fromCharCode(t3));
      }));
    }
    _trigger(e2) {
      if (!this._editor.hasModel() || this._editor.getSelections().length > 1 || !this._editor.getSelection().isEmpty()) return;
      let t2 = this._editor.getModel(), n2 = this._editor.getPosition(), r2 = new g(), a2 = this._editor.onDidChangeModelContent((e3) => {
        if (e3.isFlush) {
          r2.cancel(), a2.dispose();
          return;
        }
        for (let t3 = 0, i2 = e3.changes.length; t3 < i2; t3++) {
          let i3 = e3.changes[t3];
          if (i3.range.endLineNumber <= n2.lineNumber) {
            r2.cancel(), a2.dispose();
            return;
          }
        }
      });
      Yo(this._workerService, this._languageFeaturesService, t2, n2, e2, t2.getFormattingOptions(), r2.token).then((e3) => {
        r2.token.isCancellationRequested || $s(e3) && (this._accessibilitySignalService.playSignal(i.format, {
          userGesture: false
        }), qe.execute(this._editor, e3, true));
      }).finally(() => {
        a2.dispose();
      });
    }
  }, _aa.ID = `editor.contrib.autoFormat`, _aa);
  oC = iC([
    aC(1, A),
    aC(2, bt),
    aC(3, ut)
  ], oC);
  let sC = (_ba = class {
    constructor(e2, t2, n2) {
      this.editor = e2, this._languageFeaturesService = t2, this._instantiationService = n2, this._callOnDispose = new C(), this._callOnModel = new C(), this._callOnDispose.add(e2.onDidChangeConfiguration(() => this._update())), this._callOnDispose.add(e2.onDidChangeModel(() => this._update())), this._callOnDispose.add(e2.onDidChangeModelLanguage(() => this._update())), this._callOnDispose.add(t2.documentRangeFormattingEditProvider.onDidChange(this._update, this));
    }
    dispose() {
      this._callOnDispose.dispose(), this._callOnModel.dispose();
    }
    _update() {
      this._callOnModel.clear(), this.editor.getOption(55) && this.editor.hasModel() && this._languageFeaturesService.documentRangeFormattingEditProvider.has(this.editor.getModel()) && this._callOnModel.add(this.editor.onDidPaste(({ range: e2 }) => this._trigger(e2)));
    }
    _trigger(e2) {
      this.editor.hasModel() && (this.editor.getSelections().length > 1 || this._instantiationService.invokeFunction(Oo, this.editor, e2, 2, er.None, m.None, false).catch(G));
    }
  }, _ba.ID = `editor.contrib.formatOnPaste`, _ba);
  sC = iC([
    aC(1, A),
    aC(2, k)
  ], sC);
  var cC = class extends w {
    constructor() {
      super({
        id: `editor.action.formatDocument`,
        label: U(`formatDocument.label`, `Format Document`),
        alias: `Format Document`,
        precondition: b.and(T.notInCompositeEditor, T.writable, T.hasDocumentFormattingProvider),
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1572,
          linux: {
            primary: 3111
          },
          weight: 100
        },
        contextMenuOpts: {
          group: `1_modification`,
          order: 1.3
        }
      });
    }
    async run(e2, t2) {
      if (t2.hasModel()) {
        let n2 = e2.get(k), r2 = e2.get(yt);
        await r2.showWhile(n2.invokeFunction(ko, t2, 1, er.None, m.None, true), 250);
      }
    }
  }, lC = class extends w {
    constructor() {
      super({
        id: `editor.action.formatSelection`,
        label: U(`formatSelection.label`, `Format Selection`),
        alias: `Format Selection`,
        precondition: b.and(T.writable, T.hasDocumentSelectionFormattingProvider),
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2084),
          weight: 100
        },
        contextMenuOpts: {
          when: T.hasNonEmptySelection,
          group: `1_modification`,
          order: 1.31
        }
      });
    }
    async run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = e2.get(k), r2 = t2.getModel(), i2 = t2.getSelections().map((e3) => e3.isEmpty() ? new P(e3.startLineNumber, 1, e3.startLineNumber, r2.getLineMaxColumn(e3.startLineNumber)) : e3), a2 = e2.get(yt);
      await a2.showWhile(n2.invokeFunction(Oo, t2, i2, 1, er.None, m.None, true), 250);
    }
  };
  X(oC.ID, oC, 2), X(sC.ID, sC, 2), J(cC), J(lC), y.registerCommand(`editor.action.format`, async (e2) => {
    let t2 = e2.get(pt).getFocusedCodeEditor();
    if (!t2 || !t2.hasModel()) return;
    let n2 = e2.get(mt);
    t2.getSelection().isEmpty() ? await n2.executeCommand(`editor.action.formatDocument`) : await n2.executeCommand(`editor.action.formatSelection`);
  });
  var uC = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, dC = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, fC = class {
    remove() {
      var _a3;
      (_a3 = this.parent) == null ? void 0 : _a3.children.delete(this.id);
    }
    static findId(e2, t2) {
      let n2;
      typeof e2 == `string` ? n2 = `${t2.id}/${e2}` : (n2 = `${t2.id}/${e2.name}`, t2.children.get(n2) !== void 0 && (n2 = `${t2.id}/${e2.name}_${e2.range.startLineNumber}_${e2.range.startColumn}`));
      let r2 = n2;
      for (let e3 = 0; t2.children.get(r2) !== void 0; e3++) r2 = `${n2}_${e3}`;
      return r2;
    }
    static empty(e2) {
      return e2.children.size === 0;
    }
  }, pC = class extends fC {
    constructor(e2, t2, n2) {
      super(), this.id = e2, this.parent = t2, this.symbol = n2, this.children = /* @__PURE__ */ new Map();
    }
  }, mC = class extends fC {
    constructor(e2, t2, n2, r2) {
      super(), this.id = e2, this.parent = t2, this.label = n2, this.order = r2, this.children = /* @__PURE__ */ new Map();
    }
  }, hC = class e2 extends fC {
    static create(t2, n2, r2) {
      let i2 = new g(r2), a2 = new e2(n2.uri), o2 = t2.ordered(n2), s2 = o2.map((t3, r3) => {
        let o3 = fC.findId(`provider_${r3}`, a2), s3 = new mC(o3, a2, t3.displayName ?? `Unknown Outline Provider`, r3);
        return Promise.resolve(t3.provideDocumentSymbols(n2, i2.token)).then((t4) => {
          for (let n3 of t4 || []) e2._makeOutlineElement(n3, s3);
          return s3;
        }, (e3) => (Uc(e3), s3)).then((e3) => {
          fC.empty(e3) ? e3.remove() : a2._groups.set(o3, e3);
        });
      }), c2 = t2.onDidChange(() => {
        let e3 = t2.ordered(n2);
        go(e3, o2) || i2.cancel();
      });
      return Promise.all(s2).then(() => i2.token.isCancellationRequested && !r2.isCancellationRequested ? e2.create(t2, n2, r2) : a2._compact()).finally(() => {
        i2.dispose(), c2.dispose(), i2.dispose();
      });
    }
    static _makeOutlineElement(t2, n2) {
      let r2 = fC.findId(t2, n2), i2 = new pC(r2, n2, t2);
      if (t2.children) for (let n3 of t2.children) e2._makeOutlineElement(n3, i2);
      n2.children.set(i2.id, i2);
    }
    constructor(e3) {
      super(), this.uri = e3, this.id = `root`, this.parent = void 0, this._groups = /* @__PURE__ */ new Map(), this.children = /* @__PURE__ */ new Map(), this.id = `root`, this.parent = void 0;
    }
    _compact() {
      let e3 = 0;
      for (let [t2, n2] of this._groups) n2.children.size === 0 ? this._groups.delete(t2) : e3 += 1;
      if (e3 !== 1) this.children = this._groups;
      else {
        let e4 = ln.first(this._groups.values());
        for (let [, t2] of e4.children) t2.parent = this, this.children.set(t2.id, t2);
      }
      return this;
    }
    getTopLevelSymbols() {
      let e3 = [];
      for (let t2 of this.children.values()) t2 instanceof pC ? e3.push(t2.symbol) : e3.push(...ln.map(t2.children.values(), (e4) => e4.symbol));
      return e3.sort((e4, t2) => P.compareRangesUsingStarts(e4.range, t2.range));
    }
    asListOfDocumentSymbols() {
      let t2 = this.getTopLevelSymbols(), n2 = [];
      return e2._flattenDocumentSymbols(n2, t2, ``), n2.sort((e3, t3) => N.compare(P.getStartPosition(e3.range), P.getStartPosition(t3.range)) || N.compare(P.getEndPosition(t3.range), P.getEndPosition(e3.range)));
    }
    static _flattenDocumentSymbols(t2, n2, r2) {
      for (let i2 of n2) t2.push({
        kind: i2.kind,
        tags: i2.tags,
        name: i2.name,
        detail: i2.detail,
        containerName: i2.containerName || r2,
        range: i2.range,
        selectionRange: i2.selectionRange,
        children: void 0
      }), i2.children && e2._flattenDocumentSymbols(t2, i2.children, i2.name);
    }
  };
  const gC = ca(`IOutlineModelService`);
  let _C = class {
    constructor(e2, t2, n2) {
      this._languageFeaturesService = e2, this._disposables = new C(), this._cache = new _n(10, 0.7), this._debounceInformation = t2.for(e2.documentSymbolProvider, `DocumentSymbols`, {
        min: 350
      }), this._disposables.add(n2.onModelRemoved((e3) => {
        this._cache.delete(e3.id);
      }));
    }
    dispose() {
      this._disposables.dispose();
    }
    async getOrCreate(e2, t2) {
      let n2 = this._languageFeaturesService.documentSymbolProvider, r2 = n2.ordered(e2), i2 = this._cache.get(e2.id);
      if (!i2 || i2.versionId !== e2.getVersionId() || !go(i2.provider, r2)) {
        let t3 = new g();
        i2 = {
          versionId: e2.getVersionId(),
          provider: r2,
          promiseCnt: 0,
          source: t3,
          promise: hC.create(n2, e2, t3.token),
          model: void 0
        }, this._cache.set(e2.id, i2);
        let a3 = Date.now();
        i2.promise.then((t4) => {
          i2.model = t4, this._debounceInformation.update(e2, Date.now() - a3);
        }).catch((t4) => {
          this._cache.delete(e2.id);
        });
      }
      if (i2.model) return i2.model;
      i2.promiseCnt += 1;
      let a2 = t2.onCancellationRequested(() => {
        --i2.promiseCnt === 0 && (i2.source.cancel(), this._cache.delete(e2.id));
      });
      try {
        return await i2.promise;
      } finally {
        a2.dispose();
      }
    }
  };
  _C = uC([
    dC(0, A),
    dC(1, Et),
    dC(2, Pt)
  ], _C), fl(gC, _C, 1), y.registerCommand(`_executeDocumentSymbolProvider`, async function(e2, ...t2) {
    let [n2] = t2;
    V(R.isUri(n2));
    let r2 = e2.get(gC), i2 = e2.get(Ut), a2 = await i2.createModelReference(n2);
    try {
      return (await r2.getOrCreate(a2.object.textEditorModel, m.None)).getTopLevelSymbols();
    } finally {
      a2.dispose();
    }
  });
  var vC = (_ca = class extends S {
    constructor(t2, n2) {
      super(), this.contextKeyService = t2, this.model = n2, this.inlineCompletionVisible = _ca.inlineSuggestionVisible.bindTo(this.contextKeyService), this.inlineCompletionSuggestsIndentation = _ca.inlineSuggestionHasIndentation.bindTo(this.contextKeyService), this.inlineCompletionSuggestsIndentationLessThanTabSize = _ca.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService), this.suppressSuggestions = _ca.suppressSuggestions.bindTo(this.contextKeyService), this._register(Ni((e2) => {
        let t3 = this.model.read(e2), n3 = t3 == null ? void 0 : t3.state.read(e2), r2 = !!(n3 == null ? void 0 : n3.inlineCompletion) && (n3 == null ? void 0 : n3.primaryGhostText) !== void 0 && !(n3 == null ? void 0 : n3.primaryGhostText.isEmpty());
        this.inlineCompletionVisible.set(r2), (n3 == null ? void 0 : n3.primaryGhostText) && (n3 == null ? void 0 : n3.inlineCompletion) && this.suppressSuggestions.set(n3.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);
      })), this._register(Ni((e2) => {
        let t3 = this.model.read(e2), n3 = false, r2 = true, i2 = t3 == null ? void 0 : t3.primaryGhostText.read(e2);
        if ((t3 == null ? void 0 : t3.selectedSuggestItem) && i2 && i2.parts.length > 0) {
          let { column: e3, lines: a2 } = i2.parts[0], o2 = a2[0], s2 = t3.textModel.getLineIndentColumn(i2.lineNumber), c2 = e3 <= s2;
          if (c2) {
            let e4 = To(o2);
            e4 === -1 && (e4 = o2.length - 1), n3 = e4 > 0;
            let i3 = t3.textModel.getOptions().tabSize, a3 = de.visibleColumnFromColumn(o2, e4 + 1, i3);
            r2 = a3 < i3;
          }
        }
        this.inlineCompletionSuggestsIndentation.set(n3), this.inlineCompletionSuggestsIndentationLessThanTabSize.set(r2);
      }));
    }
  }, _ca.inlineSuggestionVisible = new F(`inlineSuggestionVisible`, false, U(`inlineSuggestionVisible`, `Whether an inline suggestion is visible`)), _ca.inlineSuggestionHasIndentation = new F(`inlineSuggestionHasIndentation`, false, U(`inlineSuggestionHasIndentation`, `Whether the inline suggestion starts with whitespace`)), _ca.inlineSuggestionHasIndentationLessThanTabSize = new F(`inlineSuggestionHasIndentationLessThanTabSize`, true, U(`inlineSuggestionHasIndentationLessThanTabSize`, `Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab`)), _ca.suppressSuggestions = new F(`inlineSuggestionSuppressSuggestions`, void 0, U(`suppressSuggestions`, `Whether suggestions should be suppressed for the current suggestion`)), _ca);
  function yC(e2) {
    let t2 = new C(), n2 = t2.add(fa());
    return t2.add(Ni((t3) => {
      n2.setStyle(e2.read(t3));
    })), t2;
  }
  var bC = class {
    constructor(e2, t2) {
      this.lineNumber = e2, this.parts = t2;
    }
    equals(e2) {
      return this.lineNumber === e2.lineNumber && this.parts.length === e2.parts.length && this.parts.every((t2, n2) => t2.equals(e2.parts[n2]));
    }
    renderForScreenReader(e2) {
      if (this.parts.length === 0) return ``;
      let t2 = this.parts[this.parts.length - 1], n2 = e2.substr(0, t2.column - 1), r2 = new Ur([
        ...this.parts.map((e3) => new kr(P.fromPositions(new N(1, e3.column)), e3.lines.join(`
`)))
      ]).applyToString(n2);
      return r2.substring(this.parts[0].column - 1);
    }
    isEmpty() {
      return this.parts.every((e2) => e2.lines.length === 0);
    }
    get lineCount() {
      return 1 + this.parts.reduce((e2, t2) => e2 + t2.lines.length - 1, 0);
    }
  }, xC = class {
    constructor(e2, t2, n2) {
      this.column = e2, this.text = t2, this.preview = n2, this.lines = jl(this.text);
    }
    equals(e2) {
      return this.column === e2.column && this.lines.length === e2.lines.length && this.lines.every((t2, n2) => t2 === e2.lines[n2]);
    }
  }, SC = class {
    constructor(e2, t2, n2, r2 = 0) {
      this.lineNumber = e2, this.columnRange = t2, this.text = n2, this.additionalReservedLineCount = r2, this.parts = [
        new xC(this.columnRange.endColumnExclusive, this.text, false)
      ], this.newLines = jl(this.text);
    }
    renderForScreenReader(e2) {
      return this.newLines.join(`
`);
    }
    get lineCount() {
      return this.newLines.length;
    }
    isEmpty() {
      return this.parts.every((e2) => e2.lines.length === 0);
    }
    equals(e2) {
      return this.lineNumber === e2.lineNumber && this.columnRange.equals(e2.columnRange) && this.newLines.length === e2.newLines.length && this.newLines.every((t2, n2) => t2 === e2.newLines[n2]) && this.additionalReservedLineCount === e2.additionalReservedLineCount;
    }
  };
  function CC(e2, t2) {
    return go(e2, t2, wC);
  }
  function wC(e2, t2) {
    return e2 === t2 ? true : !e2 || !t2 ? false : e2 instanceof bC && t2 instanceof bC || e2 instanceof SC && t2 instanceof SC ? e2.equals(t2) : false;
  }
  const TC = [];
  function EC() {
    return TC;
  }
  var DC = class {
    constructor(e2, t2) {
      if (this.startColumn = e2, this.endColumnExclusive = t2, e2 > t2) throw new u(`startColumn ${e2} cannot be after endColumnExclusive ${t2}`);
    }
    toRange(e2) {
      return new P(e2, this.startColumn, e2, this.endColumnExclusive);
    }
    equals(e2) {
      return this.startColumn === e2.startColumn && this.endColumnExclusive === e2.endColumnExclusive;
    }
  };
  function OC(e2, t2) {
    let n2 = new C(), r2 = e2.createDecorationsCollection();
    return n2.add(Pi({
      debugName: () => `Apply decorations from ${t2.debugName}`
    }, (e3) => {
      let n3 = t2.read(e3);
      r2.set(n3);
    })), n2.add({
      dispose: () => {
        r2.clear();
      }
    }), n2;
  }
  function kC(e2, t2) {
    return new N(e2.lineNumber + t2.lineNumber - 1, t2.lineNumber === 1 ? e2.column + t2.column - 1 : t2.column);
  }
  function AC(e2, t2) {
    return new N(e2.lineNumber - t2.lineNumber + 1, e2.lineNumber - t2.lineNumber === 0 ? e2.column - t2.column + 1 : e2.column);
  }
  var jC = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, MC = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const NC = `ghost-text`;
  let PC = class extends S {
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.model = t2, this.languageService = n2, this.isDisposed = Hc(this, false), this.currentTextModel = zc(this, this.editor.onDidChangeModel, () => this.editor.getModel()), this.uiState = H(this, (e3) => {
        if (this.isDisposed.read(e3)) return;
        let t3 = this.currentTextModel.read(e3);
        if (t3 !== this.model.targetTextModel.read(e3)) return;
        let n3 = this.model.ghostText.read(e3);
        if (!n3) return;
        let r2 = n3 instanceof SC ? n3.columnRange : void 0, i2 = [], a2 = [];
        function o2(e4, t4) {
          if (a2.length > 0) {
            let n4 = a2[a2.length - 1];
            t4 && n4.decorations.push(new xn(n4.content.length + 1, n4.content.length + 1 + e4[0].length, t4, 0)), n4.content += e4[0], e4 = e4.slice(1);
          }
          for (let n4 of e4) a2.push({
            content: n4,
            decorations: t4 ? [
              new xn(1, n4.length + 1, t4, 0)
            ] : []
          });
        }
        let s2 = t3.getLineContent(n3.lineNumber), c2, l2 = 0;
        for (let e4 of n3.parts) {
          let t4 = e4.lines;
          c2 === void 0 ? (i2.push({
            column: e4.column,
            text: t4[0],
            preview: e4.preview
          }), t4 = t4.slice(1)) : o2([
            s2.substring(l2, e4.column - 1)
          ], void 0), t4.length > 0 && (o2(t4, NC), c2 === void 0 && e4.column <= s2.length && (c2 = e4.column)), l2 = e4.column - 1;
        }
        c2 !== void 0 && o2([
          s2.substring(l2)
        ], void 0);
        let u2 = c2 === void 0 ? void 0 : new DC(c2, s2.length + 1);
        return {
          replacedRange: r2,
          inlineTexts: i2,
          additionalLines: a2,
          hiddenRange: u2,
          lineNumber: n3.lineNumber,
          additionalReservedLineCount: this.model.minReservedLineCount.read(e3),
          targetTextModel: t3
        };
      }), this.decorations = H(this, (e3) => {
        let t3 = this.uiState.read(e3);
        if (!t3) return [];
        let n3 = [];
        t3.replacedRange && n3.push({
          range: t3.replacedRange.toRange(t3.lineNumber),
          options: {
            inlineClassName: `inline-completion-text-to-replace`,
            description: `GhostTextReplacement`
          }
        }), t3.hiddenRange && n3.push({
          range: t3.hiddenRange.toRange(t3.lineNumber),
          options: {
            inlineClassName: `ghost-text-hidden`,
            description: `ghost-text-hidden`
          }
        });
        for (let e4 of t3.inlineTexts) n3.push({
          range: P.fromPositions(new N(t3.lineNumber, e4.column)),
          options: {
            description: NC,
            after: {
              content: e4.text,
              inlineClassName: e4.preview ? `ghost-text-decoration-preview` : `ghost-text-decoration`,
              cursorStops: Qt.Left
            },
            showIfCollapsed: true
          }
        });
        return n3;
      }), this.additionalLinesWidget = this._register(new FC(this.editor, this.languageService.languageIdCodec, H((e3) => {
        let t3 = this.uiState.read(e3);
        return t3 ? {
          lineNumber: t3.lineNumber,
          additionalLines: t3.additionalLines,
          minReservedLineCount: t3.additionalReservedLineCount,
          targetTextModel: t3.targetTextModel
        } : void 0;
      }))), this._register(Hl(() => {
        this.isDisposed.set(true, void 0);
      })), this._register(OC(this.editor, this.decorations));
    }
    ownsViewZone(e2) {
      return this.additionalLinesWidget.viewZoneId === e2;
    }
  };
  PC = jC([
    MC(2, Dt)
  ], PC);
  var FC = class extends S {
    get viewZoneId() {
      return this._viewZoneId;
    }
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.languageIdCodec = t2, this.lines = n2, this._viewZoneId = void 0, this.editorOptionsChanged = Vc(`editorOptionChanged`, ze.filter(this.editor.onDidChangeConfiguration, (e3) => e3.hasChanged(33) || e3.hasChanged(118) || e3.hasChanged(100) || e3.hasChanged(95) || e3.hasChanged(51) || e3.hasChanged(50) || e3.hasChanged(67))), this._register(Ni((e3) => {
        let t3 = this.lines.read(e3);
        this.editorOptionsChanged.read(e3), t3 ? this.updateLines(t3.lineNumber, t3.additionalLines, t3.minReservedLineCount) : this.clear();
      }));
    }
    dispose() {
      super.dispose(), this.clear();
    }
    clear() {
      this.editor.changeViewZones((e2) => {
        this._viewZoneId && (e2.removeZone(this._viewZoneId), this._viewZoneId = void 0);
      });
    }
    updateLines(e2, t2, n2) {
      let r2 = this.editor.getModel();
      if (!r2) return;
      let { tabSize: i2 } = r2.getOptions();
      this.editor.changeViewZones((r3) => {
        this._viewZoneId && (r3.removeZone(this._viewZoneId), this._viewZoneId = void 0);
        let a2 = Math.max(t2.length, n2);
        if (a2 > 0) {
          let n3 = document.createElement(`div`);
          IC(n3, i2, t2, this.editor.getOptions(), this.languageIdCodec), this._viewZoneId = r3.addZone({
            afterLineNumber: e2,
            heightInLines: a2,
            domNode: n3,
            afterColumnAffinity: 1
          });
        }
      });
    }
  };
  function IC(e2, t2, n2, r2, i2) {
    let a2 = r2.get(33), o2 = r2.get(118), s2 = `none`, c2 = r2.get(95), l2 = r2.get(51), u2 = r2.get(50), d2 = r2.get(67), f2 = new Ir(1e4);
    f2.appendString(`<div class="suggest-preview-text">`);
    for (let e3 = 0, r3 = n2.length; e3 < r3; e3++) {
      let r4 = n2[e3], p3 = r4.content;
      f2.appendString(`<div class="view-line`), f2.appendString(`" style="top:`), f2.appendString(String(e3 * d2)), f2.appendString(`px;width:1000000px;">`);
      let m3 = xs(p3), h2 = $i(p3), g2 = Cn.createEmpty(p3, i2);
      yl(new lr(u2.isMonospace && !a2, u2.canUseHalfwidthRightwardsArrow, p3, false, m3, h2, 0, g2, r4.decorations, t2, 0, u2.spaceWidth, u2.middotWidth, u2.wsmiddotWidth, o2, s2, c2, l2 !== Me.OFF, null), f2), f2.appendString(`</div>`);
    }
    f2.appendString(`</div>`), Ei(e2, u2);
    let p2 = f2.build(), m2 = LC ? LC.createHTML(p2) : p2;
    e2.innerHTML = m2;
  }
  const LC = pa(`editorGhostText`, {
    createHTML: (e2) => e2
  });
  function RC(e2, t2) {
    let n2 = new ye(), r2 = new vn(n2, (e3) => t2.getLanguageConfiguration(e3)), i2 = new Hr(new zC([
      e2
    ]), r2), a2 = Zc(i2, [], void 0, true), o2 = ``, s2 = e2.getLineContent();
    function c2(e3, t3) {
      if (e3.kind === 2) if (c2(e3.openingBracket, t3), t3 = hc(t3, e3.openingBracket.length), e3.child && (c2(e3.child, t3), t3 = hc(t3, e3.child.length)), e3.closingBracket) c2(e3.closingBracket, t3), t3 = hc(t3, e3.closingBracket.length);
      else {
        let t4 = r2.getSingleLanguageBracketTokens(e3.openingBracket.languageId), n3 = t4.findClosingTokenText(e3.openingBracket.bracketIds);
        o2 += n3;
      }
      else if (e3.kind !== 3) {
        if (e3.kind === 0 || e3.kind === 1) o2 += s2.substring(gc(t3), gc(hc(t3, e3.length)));
        else if (e3.kind === 4) for (let n3 of e3.children) c2(n3, t3), t3 = hc(t3, n3.length);
      }
    }
    return c2(a2, _c), o2;
  }
  var zC = class {
    constructor(e2) {
      this.lines = e2, this.tokenization = {
        getLineTokens: (e3) => this.lines[e3 - 1]
      };
    }
    getLineCount() {
      return this.lines.length;
    }
    getLineLength(e2) {
      return this.lines[e2 - 1].getLineContent().length;
    }
  };
  async function BC(e2, t2, n2, r2, i2 = m.None, a2) {
    let o2 = t2 instanceof N ? WC(t2, n2) : t2, s2 = e2.all(n2), c2 = new wr();
    for (let e3 of s2) e3.groupId && c2.add(e3.groupId, e3);
    function l2(e3) {
      if (!e3.yieldsToGroupIds) return [];
      let t3 = [];
      for (let n3 of e3.yieldsToGroupIds || []) {
        let e4 = c2.get(n3);
        for (let n4 of e4) t3.push(n4);
      }
      return t3;
    }
    let u2 = /* @__PURE__ */ new Map(), d2 = /* @__PURE__ */ new Set();
    function f2(e3, t3) {
      if (t3 = [
        ...t3,
        e3
      ], d2.has(e3)) return t3;
      d2.add(e3);
      try {
        let n3 = l2(e3);
        for (let e4 of n3) {
          let n4 = f2(e4, t3);
          if (n4) return n4;
        }
      } finally {
        d2.delete(e3);
      }
    }
    function p2(e3) {
      let a3 = u2.get(e3);
      if (a3) return a3;
      let o3 = f2(e3, []);
      o3 && Uc(Error(`Inline completions: cyclic yield-to dependency detected. Path: ${o3.map((e4) => e4.toString ? e4.toString() : `` + e4).join(` -> `)}`));
      let s3 = new _e();
      return u2.set(e3, s3.p), (async () => {
        var _a3;
        if (!o3) {
          let t3 = l2(e3);
          for (let e4 of t3) {
            let t4 = await p2(e4);
            if (t4 && t4.items.length > 0) return;
          }
        }
        try {
          if (t2 instanceof N) {
            let a4 = await e3.provideInlineCompletions(n2, t2, r2, i2);
            return a4;
          } else {
            let a4 = await ((_a3 = e3.provideInlineEdits) == null ? void 0 : _a3.call(e3, n2, t2, r2, i2));
            return a4;
          }
        } catch (e4) {
          Uc(e4);
          return;
        }
      })().then((e4) => s3.complete(e4), (e4) => s3.error(e4)), s3.p;
    }
    let h2 = await Promise.all(s2.map(async (e3) => ({
      provider: e3,
      completions: await p2(e3)
    }))), g2 = /* @__PURE__ */ new Map(), ee2 = [];
    for (let e3 of h2) {
      let t3 = e3.completions;
      if (!t3) continue;
      let r3 = new HC(t3, e3.provider);
      ee2.push(r3);
      for (let e4 of t3.items) {
        let t4 = UC.from(e4, r3, o2, n2, a2);
        g2.set(t4.hash(), t4);
      }
    }
    return new VC(Array.from(g2.values()), new Set(g2.keys()), ee2);
  }
  var VC = class {
    constructor(e2, t2, n2) {
      this.completions = e2, this.hashs = t2, this.providerResults = n2;
    }
    has(e2) {
      return this.hashs.has(e2.hash());
    }
    dispose() {
      for (let e2 of this.providerResults) e2.removeRef();
    }
  }, HC = class {
    constructor(e2, t2) {
      this.inlineCompletions = e2, this.provider = t2, this.refCount = 1;
    }
    addRef() {
      this.refCount++;
    }
    removeRef() {
      this.refCount--, this.refCount === 0 && this.provider.freeInlineCompletions(this.inlineCompletions);
    }
  }, UC = class e2 {
    static from(t2, n2, r2, i2, a2) {
      let o2, s2, c2 = t2.range ? P.lift(t2.range) : r2;
      if (typeof t2.insertText == `string`) {
        if (o2 = t2.insertText, a2 && t2.completeBracketPairs) {
          o2 = GC(o2, c2.getStartPosition(), i2, a2);
          let e3 = o2.length - t2.insertText.length;
          e3 !== 0 && (c2 = new P(c2.startLineNumber, c2.startColumn, c2.endLineNumber, c2.endColumn + e3));
        }
        s2 = void 0;
      } else if (`snippet` in t2.insertText) {
        let e3 = t2.insertText.snippet.length;
        if (a2 && t2.completeBracketPairs) {
          t2.insertText.snippet = GC(t2.insertText.snippet, c2.getStartPosition(), i2, a2);
          let n4 = t2.insertText.snippet.length - e3;
          n4 !== 0 && (c2 = new P(c2.startLineNumber, c2.startColumn, c2.endLineNumber, c2.endColumn + n4));
        }
        let n3 = new Gd().parse(t2.insertText.snippet);
        n3.children.length === 1 && n3.children[0] instanceof Id ? (o2 = n3.children[0].value, s2 = void 0) : (o2 = n3.toString(), s2 = {
          snippet: t2.insertText.snippet,
          range: c2
        });
      } else ji(t2.insertText);
      return new e2(o2, t2.command, c2, o2, s2, t2.additionalTextEdits || EC(), t2, n2);
    }
    constructor(e3, t2, n2, r2, i2, a2, o2, s2) {
      this.filterText = e3, this.command = t2, this.range = n2, this.insertText = r2, this.snippetInfo = i2, this.additionalTextEdits = a2, this.sourceInlineCompletion = o2, this.source = s2, e3 = e3.replace(/\r\n|\r/g, `
`), r2 = e3.replace(/\r\n|\r/g, `
`);
    }
    withRange(t2) {
      return new e2(this.filterText, this.command, t2, this.insertText, this.snippetInfo, this.additionalTextEdits, this.sourceInlineCompletion, this.source);
    }
    hash() {
      return JSON.stringify({
        insertText: this.insertText,
        range: this.range.toString()
      });
    }
    toSingleTextEdit() {
      return new kr(this.range, this.insertText);
    }
  };
  function WC(e2, t2) {
    let n2 = t2.getWordAtPosition(e2), r2 = t2.getLineMaxColumn(e2.lineNumber);
    return n2 ? new P(e2.lineNumber, n2.startColumn, e2.lineNumber, r2) : P.fromPositions(e2, e2.with(void 0, r2));
  }
  function GC(e2, t2, n2, r2) {
    let i2 = n2.getLineContent(t2.lineNumber).substring(0, t2.column - 1), a2 = i2 + e2, o2 = n2.tokenization.tokenizeLineWithEdit(t2, a2.length - (t2.column - 1), e2), s2 = o2 == null ? void 0 : o2.sliceAndInflate(t2.column - 1, a2.length, 0);
    if (!s2) return e2;
    let c2 = RC(s2, r2);
    return c2;
  }
  function KC(e2, t2, n2) {
    let r2 = n2 ? e2.range.intersectRanges(n2) : e2.range;
    if (!r2) return e2;
    let i2 = t2.getValueInRange(r2, 1), a2 = Ki(i2, e2.text), o2 = Wr.ofText(i2.substring(0, a2)).addToPosition(e2.range.getStartPosition()), s2 = e2.text.substring(a2), c2 = P.fromPositions(o2, e2.range.getEndPosition());
    return new kr(c2, s2);
  }
  function qC(e2, t2) {
    return e2.text.startsWith(t2.text) && YC(e2.range, t2.range);
  }
  function JC(e2, t2, n2, r2, i2 = 0) {
    let a2 = KC(e2, t2);
    if (a2.range.endLineNumber !== a2.range.startLineNumber) return;
    let o2 = t2.getLineContent(a2.range.startLineNumber), s2 = Ko(o2).length, c2 = a2.range.startColumn - 1 <= s2;
    if (c2) {
      let e3 = Ko(a2.text).length, t3 = o2.substring(a2.range.startColumn - 1, s2), [n3, r3] = [
        a2.range.getStartPosition(),
        a2.range.getEndPosition()
      ], i3 = n3.column + t3.length <= r3.column ? n3.delta(0, t3.length) : r3, c3 = P.fromPositions(i3, r3), l3 = a2.text.startsWith(t3) ? a2.text.substring(t3.length) : a2.text.substring(e3);
      a2 = new kr(c3, l3);
    }
    let l2 = t2.getValueInRange(a2.range), u2 = ZC(l2, a2.text);
    if (!u2) return;
    let d2 = a2.range.startLineNumber, f2 = [];
    if (n2 === `prefix`) {
      let e3 = u2.filter((e4) => e4.originalLength === 0);
      if (e3.length > 1 || e3.length === 1 && e3[0].originalStart !== l2.length) return;
    }
    let p2 = a2.text.length - i2;
    for (let e3 of u2) {
      let t3 = a2.range.startColumn + e3.originalStart + e3.originalLength;
      if (n2 === `subwordSmart` && r2 && r2.lineNumber === a2.range.startLineNumber && t3 < r2.column || e3.originalLength > 0) return;
      if (e3.modifiedLength === 0) continue;
      let i3 = e3.modifiedStart + e3.modifiedLength, o3 = Math.max(e3.modifiedStart, Math.min(i3, p2)), s3 = a2.text.substring(e3.modifiedStart, o3), c3 = a2.text.substring(o3, Math.max(e3.modifiedStart, i3));
      s3.length > 0 && f2.push(new xC(t3, s3, false)), c3.length > 0 && f2.push(new xC(t3, c3, true));
    }
    return new bC(d2, f2);
  }
  function YC(e2, t2) {
    return t2.getStartPosition().equals(e2.getStartPosition()) && t2.getEndPosition().isBeforeOrEqual(e2.getEndPosition());
  }
  let XC;
  function ZC(e2, t2) {
    if ((XC == null ? void 0 : XC.originalValue) === e2 && (XC == null ? void 0 : XC.newValue) === t2) return XC == null ? void 0 : XC.changes;
    {
      let n2 = $C(e2, t2, true);
      if (n2) {
        let r2 = QC(n2);
        if (r2 > 0) {
          let i2 = $C(e2, t2, false);
          i2 && QC(i2) < r2 && (n2 = i2);
        }
      }
      return XC = {
        originalValue: e2,
        newValue: t2,
        changes: n2
      }, n2;
    }
  }
  function QC(e2) {
    let t2 = 0;
    for (let n2 of e2) t2 += n2.originalLength;
    return t2;
  }
  function $C(e2, t2, n2) {
    if (e2.length > 5e3 || t2.length > 5e3) return;
    function r2(e3) {
      let t3 = 0;
      for (let n3 = 0, r3 = e3.length; n3 < r3; n3++) {
        let r4 = e3.charCodeAt(n3);
        r4 > t3 && (t3 = r4);
      }
      return t3;
    }
    let i2 = Math.max(r2(e2), r2(t2));
    function a2(e3) {
      if (e3 < 0) throw Error(`unexpected`);
      return i2 + e3 + 1;
    }
    function o2(e3) {
      let t3 = 0, r3 = 0, i3 = new Int32Array(e3.length);
      for (let o3 = 0, s3 = e3.length; o3 < s3; o3++) if (n2 && e3[o3] === `(`) {
        let e4 = r3 * 100 + t3;
        i3[o3] = a2(2 * e4), t3++;
      } else if (n2 && e3[o3] === `)`) {
        t3 = Math.max(t3 - 1, 0);
        let e4 = r3 * 100 + t3;
        i3[o3] = a2(2 * e4 + 1), t3 === 0 && r3++;
      } else i3[o3] = e3.charCodeAt(o3);
      return i3;
    }
    let s2 = o2(e2), c2 = o2(t2);
    return new bn({
      getElements: () => s2
    }, {
      getElements: () => c2
    }).ComputeDiff(false).changes;
  }
  var ew = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, tw = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let nw = class extends S {
    constructor(e2, t2, n2, r2, i2) {
      super(), this.textModel = e2, this.versionId = t2, this._debounceValue = n2, this.languageFeaturesService = r2, this.languageConfigurationService = i2, this._updateOperation = this._register(new Bn()), this.inlineCompletions = Ia(`inlineCompletions`, void 0), this.suggestWidgetInlineCompletions = Ia(`suggestWidgetInlineCompletions`, void 0), this._register(this.textModel.onDidChangeContent(() => {
        this._updateOperation.clear();
      }));
    }
    fetch(e2, t2, n2) {
      var _a3, _b3;
      let r2 = new iw(e2, t2, this.textModel.getVersionId()), i2 = t2.selectedSuggestionInfo ? this.suggestWidgetInlineCompletions : this.inlineCompletions;
      if ((_a3 = this._updateOperation.value) == null ? void 0 : _a3.request.satisfies(r2)) return this._updateOperation.value.promise;
      if ((_b3 = i2.get()) == null ? void 0 : _b3.request.satisfies(r2)) return Promise.resolve(true);
      let a2 = !!this._updateOperation.value;
      this._updateOperation.clear();
      let o2 = new g(), s2 = (async () => {
        let s3 = a2 || t2.triggerKind === en.Automatic;
        if (s3 && await rw(this._debounceValue.get(this.textModel), o2.token), o2.token.isCancellationRequested || this._store.isDisposed || this.textModel.getVersionId() !== r2.versionId) return false;
        let c3 = /* @__PURE__ */ new Date(), l2 = await BC(this.languageFeaturesService.inlineCompletionsProvider, e2, this.textModel, t2, o2.token, this.languageConfigurationService);
        if (o2.token.isCancellationRequested || this._store.isDisposed || this.textModel.getVersionId() !== r2.versionId) return false;
        let u2 = /* @__PURE__ */ new Date();
        this._debounceValue.update(this.textModel, u2.getTime() - c3.getTime());
        let d2 = new ow(l2, r2, this.textModel, this.versionId);
        if (n2) {
          let t3 = n2.toInlineCompletion(void 0);
          n2.canBeReused(this.textModel, e2) && !l2.has(t3) && d2.prepend(n2.inlineCompletion, t3.range, true);
        }
        return this._updateOperation.clear(), Kl((e3) => {
          i2.set(d2, e3);
        }), true;
      })(), c2 = new aw(r2, o2, s2);
      return this._updateOperation.value = c2, s2;
    }
    clear(e2) {
      this._updateOperation.clear(), this.inlineCompletions.set(void 0, e2), this.suggestWidgetInlineCompletions.set(void 0, e2);
    }
    clearSuggestWidgetInlineCompletions(e2) {
      var _a3;
      ((_a3 = this._updateOperation.value) == null ? void 0 : _a3.request.context.selectedSuggestionInfo) && this._updateOperation.clear(), this.suggestWidgetInlineCompletions.set(void 0, e2);
    }
    cancelUpdate() {
      this._updateOperation.clear();
    }
  };
  nw = ew([
    tw(3, A),
    tw(4, Tt)
  ], nw);
  function rw(e2, t2) {
    return new Promise((n2) => {
      let r2, i2 = setTimeout(() => {
        r2 && r2.dispose(), n2();
      }, e2);
      t2 && (r2 = t2.onCancellationRequested(() => {
        clearTimeout(i2), r2 && r2.dispose(), n2();
      }));
    });
  }
  var iw = class {
    constructor(e2, t2, n2) {
      this.position = e2, this.context = t2, this.versionId = n2;
    }
    satisfies(e2) {
      return this.position.equals(e2.position) && _o(this.context.selectedSuggestionInfo, e2.context.selectedSuggestionInfo, lc()) && (e2.context.triggerKind === en.Automatic || this.context.triggerKind === en.Explicit) && this.versionId === e2.versionId;
    }
  }, aw = class {
    constructor(e2, t2, n2) {
      this.request = e2, this.cancellationTokenSource = t2, this.promise = n2;
    }
    dispose() {
      this.cancellationTokenSource.cancel();
    }
  }, ow = class {
    get inlineCompletions() {
      return this._inlineCompletions;
    }
    constructor(e2, t2, n2, r2) {
      this.inlineCompletionProviderResult = e2, this.request = t2, this._textModel = n2, this._versionId = r2, this._refCount = 1, this._prependedInlineCompletionItems = [];
      let i2 = n2.deltaDecorations([], e2.completions.map((e3) => ({
        range: e3.range,
        options: {
          description: `inline-completion-tracking-range`
        }
      })));
      this._inlineCompletions = e2.completions.map((e3, t3) => new sw(e3, i2[t3], this._textModel, this._versionId));
    }
    clone() {
      return this._refCount++, this;
    }
    dispose() {
      if (this._refCount--, this._refCount === 0) {
        setTimeout(() => {
          this._textModel.isDisposed() || this._textModel.deltaDecorations(this._inlineCompletions.map((e2) => e2.decorationId), []);
        }, 0), this.inlineCompletionProviderResult.dispose();
        for (let e2 of this._prependedInlineCompletionItems) e2.source.removeRef();
      }
    }
    prepend(e2, t2, n2) {
      n2 && e2.source.addRef();
      let r2 = this._textModel.deltaDecorations([], [
        {
          range: t2,
          options: {
            description: `inline-completion-tracking-range`
          }
        }
      ])[0];
      this._inlineCompletions.unshift(new sw(e2, r2, this._textModel, this._versionId)), this._prependedInlineCompletionItems.push(e2);
    }
  }, sw = class {
    get forwardStable() {
      return this.inlineCompletion.source.inlineCompletions.enableForwardStability ?? false;
    }
    constructor(e2, t2, n2, r2) {
      this.inlineCompletion = e2, this.decorationId = t2, this._textModel = n2, this._modelVersion = r2, this.semanticId = JSON.stringify([
        this.inlineCompletion.filterText,
        this.inlineCompletion.insertText,
        this.inlineCompletion.range.getStartPosition().toString()
      ]), this._updatedRange = Ca({
        owner: this,
        equalsFn: P.equalsRange
      }, (e3) => (this._modelVersion.read(e3), this._textModel.getDecorationRange(this.decorationId)));
    }
    toInlineCompletion(e2) {
      return this.inlineCompletion.withRange(this._updatedRange.read(e2) ?? cw);
    }
    toSingleTextEdit(e2) {
      return new kr(this._updatedRange.read(e2) ?? cw, this.inlineCompletion.insertText);
    }
    isVisible(e2, t2, n2) {
      let r2 = KC(this._toFilterTextReplacement(n2), e2), i2 = this._updatedRange.read(n2);
      if (!i2 || !this.inlineCompletion.range.getStartPosition().equals(i2.getStartPosition()) || t2.lineNumber !== r2.range.startLineNumber) return false;
      let a2 = e2.getValueInRange(r2.range, 1), o2 = r2.text, s2 = Math.max(0, t2.column - r2.range.startColumn), c2 = o2.substring(0, s2), l2 = o2.substring(s2), u2 = a2.substring(0, s2), d2 = a2.substring(s2), f2 = e2.getLineIndentColumn(r2.range.startLineNumber);
      return r2.range.startColumn <= f2 && (u2 = u2.trimStart(), u2.length === 0 && (d2 = d2.trimStart()), c2 = c2.trimStart(), c2.length === 0 && (l2 = l2.trimStart())), c2.startsWith(u2) && !!Dc(d2, l2);
    }
    canBeReused(e2, t2) {
      let n2 = this._updatedRange.read(void 0), r2 = !!n2 && n2.containsPosition(t2) && this.isVisible(e2, t2, void 0) && Wr.ofRange(n2).isGreaterThanOrEqualTo(Wr.ofRange(this.inlineCompletion.range));
      return r2;
    }
    _toFilterTextReplacement(e2) {
      return new kr(this._updatedRange.read(e2) ?? cw, this.inlineCompletion.filterText);
    }
  };
  const cw = new P(1, 1, 1, 1), $ = {
    Visible: Ob,
    HasFocusedSuggestion: new F(`suggestWidgetHasFocusedSuggestion`, false, U(`suggestWidgetHasSelection`, `Whether any suggestion is focused`)),
    DetailsVisible: new F(`suggestWidgetDetailsVisible`, false, U(`suggestWidgetDetailsVisible`, `Whether suggestion details are visible`)),
    MultipleSuggestions: new F(`suggestWidgetMultipleSuggestions`, false, U(`suggestWidgetMultipleSuggestions`, `Whether there are multiple suggestions to pick from`)),
    MakesTextEdit: new F(`suggestionMakesTextEdit`, true, U(`suggestionMakesTextEdit`, `Whether inserting the current suggestion yields in a change or has everything already been typed`)),
    AcceptSuggestionsOnEnter: new F(`acceptSuggestionOnEnter`, true, U(`acceptSuggestionOnEnter`, `Whether suggestions are inserted when pressing Enter`)),
    HasInsertAndReplaceRange: new F(`suggestionHasInsertAndReplaceRange`, false, U(`suggestionHasInsertAndReplaceRange`, `Whether the current suggestion has insert and replace behaviour`)),
    InsertMode: new F(`suggestionInsertMode`, void 0, {
      type: `string`,
      description: U(`suggestionInsertMode`, `Whether the default behaviour is to insert or replace`)
    }),
    CanResolve: new F(`suggestionCanResolve`, false, U(`suggestionCanResolve`, `Whether the current suggestion supports to resolve further details`))
  }, lw = new j(`suggestWidgetStatusBar`);
  var uw = class {
    constructor(e2, t2, n2, r2) {
      var _a3;
      this.position = e2, this.completion = t2, this.container = n2, this.provider = r2, this.isInvalid = false, this.score = Je.Default, this.distance = 0, this.textLabel = typeof t2.label == `string` ? t2.label : (_a3 = t2.label) == null ? void 0 : _a3.label, this.labelLow = this.textLabel.toLowerCase(), this.isInvalid = !this.textLabel, this.sortTextLow = t2.sortText && t2.sortText.toLowerCase(), this.filterTextLow = t2.filterText && t2.filterText.toLowerCase(), this.extensionId = t2.extensionId, P.isIRange(t2.range) ? (this.editStart = new N(t2.range.startLineNumber, t2.range.startColumn), this.editInsertEnd = new N(t2.range.endLineNumber, t2.range.endColumn), this.editReplaceEnd = new N(t2.range.endLineNumber, t2.range.endColumn), this.isInvalid = this.isInvalid || P.spansMultipleLines(t2.range) || t2.range.startLineNumber !== e2.lineNumber) : (this.editStart = new N(t2.range.insert.startLineNumber, t2.range.insert.startColumn), this.editInsertEnd = new N(t2.range.insert.endLineNumber, t2.range.insert.endColumn), this.editReplaceEnd = new N(t2.range.replace.endLineNumber, t2.range.replace.endColumn), this.isInvalid = this.isInvalid || P.spansMultipleLines(t2.range.insert) || P.spansMultipleLines(t2.range.replace) || t2.range.insert.startLineNumber !== e2.lineNumber || t2.range.replace.startLineNumber !== e2.lineNumber || t2.range.insert.startColumn !== t2.range.replace.startColumn), typeof r2.resolveCompletionItem != `function` && (this._resolveCache = Promise.resolve(), this._resolveDuration = 0);
    }
    get isResolved() {
      return this._resolveDuration !== void 0;
    }
    get resolveDuration() {
      return this._resolveDuration === void 0 ? -1 : this._resolveDuration;
    }
    async resolve(e2) {
      if (!this._resolveCache) {
        let t2 = e2.onCancellationRequested(() => {
          this._resolveCache = void 0, this._resolveDuration = void 0;
        }), n2 = new Fr(true);
        this._resolveCache = Promise.resolve(this.provider.resolveCompletionItem(this.completion, e2)).then((e3) => {
          Object.assign(this.completion, e3), this._resolveDuration = n2.elapsed();
        }, (e3) => {
          Ss(e3) && (this._resolveCache = void 0, this._resolveDuration = void 0);
        }).finally(() => {
          t2.dispose();
        });
      }
      return this._resolveCache;
    }
  }, dw = (_da = class {
    constructor(e2 = 2, t2 = /* @__PURE__ */ new Set(), n2 = /* @__PURE__ */ new Set(), r2 = /* @__PURE__ */ new Map(), i2 = true) {
      this.snippetSortOrder = e2, this.kindFilter = t2, this.providerFilter = n2, this.providerItemsToReuse = r2, this.showDeprecated = i2;
    }
  }, _da.default = new _da(), _da);
  let fw;
  function pw() {
    return fw;
  }
  var mw = class {
    constructor(e2, t2, n2, r2) {
      this.items = e2, this.needsClipboard = t2, this.durations = n2, this.disposable = r2;
    }
  };
  async function hw(e2, t2, n2, r2 = dw.default, i2 = {
    triggerKind: 0
  }, a2 = m.None) {
    let o2 = new Fr();
    n2 = n2.clone();
    let s2 = t2.getWordAtPosition(n2), c2 = s2 ? new P(n2.lineNumber, s2.startColumn, n2.lineNumber, s2.endColumn) : P.fromPositions(n2), l2 = {
      replace: c2,
      insert: c2.setEndPosition(n2.lineNumber, n2.column)
    }, u2 = [], d2 = new C(), f2 = [], h2 = false, g2 = (e3, t3, i3) => {
      var _a3;
      let a3 = false;
      if (!t3) return a3;
      for (let i4 of t3.suggestions) if (!r2.kindFilter.has(i4.kind)) {
        if (!r2.showDeprecated && ((_a3 = i4 == null ? void 0 : i4.tags) == null ? void 0 : _a3.includes(1))) continue;
        i4.range || (i4.range = l2), i4.sortText || (i4.sortText = typeof i4.label == `string` ? i4.label : i4.label.label), !h2 && i4.insertTextRules && i4.insertTextRules & 4 && (h2 = Gd.guessNeedsClipboard(i4.insertText)), u2.push(new uw(n2, i4, t3, e3)), a3 = true;
      }
      return Ds(t3) && d2.add(t3), f2.push({
        providerName: e3._debugDisplayName ?? `unknown_provider`,
        elapsedProvider: t3.duration ?? -1,
        elapsedOverall: i3.elapsed()
      }), a3;
    }, ee2 = (async () => {
      if (!fw || r2.kindFilter.has(27)) return;
      let e3 = r2.providerItemsToReuse.get(fw);
      if (e3) {
        e3.forEach((e4) => u2.push(e4));
        return;
      }
      if (r2.providerFilter.size > 0 && !r2.providerFilter.has(fw)) return;
      let o3 = new Fr(), s3 = await fw.provideCompletionItems(t2, n2, i2, a2);
      g2(fw, s3, o3);
    })();
    for (let o3 of e2.orderedGroups(t2)) {
      let e3 = false;
      if (await Promise.all(o3.map(async (o4) => {
        if (r2.providerItemsToReuse.has(o4)) {
          let t3 = r2.providerItemsToReuse.get(o4);
          t3.forEach((e4) => u2.push(e4)), e3 || (e3 = t3.length > 0);
          return;
        }
        if (!(r2.providerFilter.size > 0 && !r2.providerFilter.has(o4))) try {
          let r3 = new Fr(), s3 = await o4.provideCompletionItems(t2, n2, i2, a2);
          e3 = g2(o4, s3, r3) || e3;
        } catch (e4) {
          Uc(e4);
        }
      })), e3 || a2.isCancellationRequested) break;
    }
    return await ee2, a2.isCancellationRequested ? (d2.dispose(), Promise.reject(new p())) : new mw(u2.sort(bw(r2.snippetSortOrder)), h2, {
      entries: f2,
      elapsed: o2.elapsed()
    }, d2);
  }
  function gw(e2, t2) {
    if (e2.sortTextLow && t2.sortTextLow) {
      if (e2.sortTextLow < t2.sortTextLow) return -1;
      if (e2.sortTextLow > t2.sortTextLow) return 1;
    }
    return e2.textLabel < t2.textLabel ? -1 : e2.textLabel > t2.textLabel ? 1 : e2.completion.kind - t2.completion.kind;
  }
  function _w(e2, t2) {
    if (e2.completion.kind !== t2.completion.kind) {
      if (e2.completion.kind === 27) return -1;
      if (t2.completion.kind === 27) return 1;
    }
    return gw(e2, t2);
  }
  function vw(e2, t2) {
    if (e2.completion.kind !== t2.completion.kind) {
      if (e2.completion.kind === 27) return 1;
      if (t2.completion.kind === 27) return -1;
    }
    return gw(e2, t2);
  }
  const yw = /* @__PURE__ */ new Map();
  yw.set(0, _w), yw.set(2, vw), yw.set(1, gw);
  function bw(e2) {
    return yw.get(e2);
  }
  y.registerCommand(`_executeCompletionItemProvider`, async (e2, ...t2) => {
    let [n2, r2, i2, a2] = t2;
    V(R.isUri(n2)), V(N.isIPosition(r2)), V(typeof i2 == `string` || !i2), V(typeof a2 == `number` || !a2);
    let { completionProvider: o2 } = e2.get(A), s2 = await e2.get(Ut).createModelReference(n2);
    try {
      let e3 = {
        incomplete: false,
        suggestions: []
      }, t3 = [], n3 = s2.object.textEditorModel.validatePosition(r2), c2 = await hw(o2, s2.object.textEditorModel, n3, void 0, {
        triggerCharacter: i2 ?? void 0,
        triggerKind: i2 ? 1 : 0
      });
      for (let n4 of c2.items) t3.length < (a2 ?? 0) && t3.push(n4.resolve(m.None)), e3.incomplete = e3.incomplete || n4.container.incomplete, e3.suggestions.push(n4.completion);
      try {
        return await Promise.all(t3), e3;
      } finally {
        setTimeout(() => c2.disposable.dispose(), 100);
      }
    } finally {
      s2.dispose();
    }
  });
  function xw(e2, t2) {
    var _a3;
    (_a3 = e2.getContribution(`editor.contrib.suggestController`)) == null ? void 0 : _a3.triggerSuggest((/* @__PURE__ */ new Set()).add(t2), void 0, true);
  }
  var Sw = class {
    static isAllOff(e2) {
      return e2.other === `off` && e2.comments === `off` && e2.strings === `off`;
    }
    static isAllOn(e2) {
      return e2.other === `on` && e2.comments === `on` && e2.strings === `on`;
    }
    static valueFor(e2, t2) {
      switch (t2) {
        case 1:
          return e2.comments;
        case 2:
          return e2.strings;
        default:
          return e2.other;
      }
    }
  };
  function Cw(e2, t2 = cc) {
    return ss(e2, t2) ? e2.charAt(0).toUpperCase() + e2.slice(1) : e2;
  }
  let ww = /* @__PURE__ */ Object.create(null);
  var Tw = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Ew = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const Dw = Object.freeze({
    CURRENT_YEAR: true,
    CURRENT_YEAR_SHORT: true,
    CURRENT_MONTH: true,
    CURRENT_DATE: true,
    CURRENT_HOUR: true,
    CURRENT_MINUTE: true,
    CURRENT_SECOND: true,
    CURRENT_DAY_NAME: true,
    CURRENT_DAY_NAME_SHORT: true,
    CURRENT_MONTH_NAME: true,
    CURRENT_MONTH_NAME_SHORT: true,
    CURRENT_SECONDS_UNIX: true,
    CURRENT_TIMEZONE_OFFSET: true,
    SELECTION: true,
    CLIPBOARD: true,
    TM_SELECTED_TEXT: true,
    TM_CURRENT_LINE: true,
    TM_CURRENT_WORD: true,
    TM_LINE_INDEX: true,
    TM_LINE_NUMBER: true,
    TM_FILENAME: true,
    TM_FILENAME_BASE: true,
    TM_DIRECTORY: true,
    TM_FILEPATH: true,
    CURSOR_INDEX: true,
    CURSOR_NUMBER: true,
    RELATIVE_FILEPATH: true,
    BLOCK_COMMENT_START: true,
    BLOCK_COMMENT_END: true,
    LINE_COMMENT: true,
    WORKSPACE_NAME: true,
    WORKSPACE_FOLDER: true,
    RANDOM: true,
    RANDOM_HEX: true,
    UUID: true
  });
  var Ow = class {
    constructor(e2) {
      this._delegates = e2;
    }
    resolve(e2) {
      for (let t2 of this._delegates) {
        let n2 = t2.resolve(e2);
        if (n2 !== void 0) return n2;
      }
    }
  }, kw = class {
    constructor(e2, t2, n2, r2) {
      this._model = e2, this._selection = t2, this._selectionIdx = n2, this._overtypingCapturer = r2;
    }
    resolve(e2) {
      let { name: t2 } = e2;
      if (t2 === `SELECTION` || t2 === `TM_SELECTED_TEXT`) {
        let t3 = this._model.getValueInRange(this._selection) || void 0, n2 = this._selection.startLineNumber !== this._selection.endLineNumber;
        if (!t3 && this._overtypingCapturer) {
          let e3 = this._overtypingCapturer.getLastOvertypedInfo(this._selectionIdx);
          e3 && (t3 = e3.value, n2 = e3.multiline);
        }
        if (t3 && n2 && e2.snippet) {
          let n3 = this._model.getLineContent(this._selection.startLineNumber), r2 = Ko(n3, 0, this._selection.startColumn - 1), i2 = r2;
          e2.snippet.walk((t4) => t4 === e2 ? false : (t4 instanceof Id && (i2 = Ko(jl(t4.value).pop())), true));
          let a2 = Ki(i2, r2);
          t3 = t3.replace(/(\r\n|\r|\n)(.*)/g, (e3, t4, n4) => `${t4}${i2.substr(a2)}${n4}`);
        }
        return t3;
      } else if (t2 === `TM_CURRENT_LINE`) return this._model.getLineContent(this._selection.positionLineNumber);
      else if (t2 === `TM_CURRENT_WORD`) {
        let e3 = this._model.getWordAtPosition({
          lineNumber: this._selection.positionLineNumber,
          column: this._selection.positionColumn
        });
        return e3 && e3.word || void 0;
      } else if (t2 === `TM_LINE_INDEX`) return String(this._selection.positionLineNumber - 1);
      else if (t2 === `TM_LINE_NUMBER`) return String(this._selection.positionLineNumber);
      else if (t2 === `CURSOR_INDEX`) return String(this._selectionIdx);
      else if (t2 === `CURSOR_NUMBER`) return String(this._selectionIdx + 1);
    }
  }, Aw = class {
    constructor(e2, t2) {
      this._labelService = e2, this._model = t2;
    }
    resolve(e2) {
      let { name: t2 } = e2;
      if (t2 === `TM_FILENAME`) return Li(this._model.uri.fsPath);
      if (t2 === `TM_FILENAME_BASE`) {
        let e3 = Li(this._model.uri.fsPath), t3 = e3.lastIndexOf(`.`);
        return t3 <= 0 ? e3 : e3.slice(0, t3);
      } else if (t2 === `TM_DIRECTORY`) return Fa(this._model.uri.fsPath) === `.` ? `` : this._labelService.getUriLabel(Pa(this._model.uri));
      else if (t2 === `TM_FILEPATH`) return this._labelService.getUriLabel(this._model.uri);
      else if (t2 === `RELATIVE_FILEPATH`) return this._labelService.getUriLabel(this._model.uri, {
        relative: true,
        noPrefix: true
      });
    }
  }, jw = class {
    constructor(e2, t2, n2, r2) {
      this._readClipboardText = e2, this._selectionIdx = t2, this._selectionCount = n2, this._spread = r2;
    }
    resolve(e2) {
      if (e2.name !== `CLIPBOARD`) return;
      let t2 = this._readClipboardText();
      if (t2) {
        if (this._spread) {
          let e3 = t2.split(/\r\n|\n|\r/).filter((e4) => !Ms(e4));
          if (e3.length === this._selectionCount) return e3[this._selectionIdx];
        }
        return t2;
      }
    }
  };
  let Mw = class {
    constructor(e2, t2, n2) {
      this._model = e2, this._selection = t2, this._languageConfigurationService = n2;
    }
    resolve(e2) {
      let { name: t2 } = e2, n2 = this._model.getLanguageIdAtPosition(this._selection.selectionStartLineNumber, this._selection.selectionStartColumn), r2 = this._languageConfigurationService.getLanguageConfiguration(n2).comments;
      if (r2) {
        if (t2 === `LINE_COMMENT`) return r2.lineCommentToken || void 0;
        if (t2 === `BLOCK_COMMENT_START`) return r2.blockCommentStartToken || void 0;
        if (t2 === `BLOCK_COMMENT_END`) return r2.blockCommentEndToken || void 0;
      }
    }
  };
  Mw = Tw([
    Ew(2, Tt)
  ], Mw);
  var Nw = (_ea = class {
    constructor() {
      this._date = /* @__PURE__ */ new Date();
    }
    resolve(t2) {
      let { name: n2 } = t2;
      if (n2 === `CURRENT_YEAR`) return String(this._date.getFullYear());
      if (n2 === `CURRENT_YEAR_SHORT`) return String(this._date.getFullYear()).slice(-2);
      if (n2 === `CURRENT_MONTH`) return String(this._date.getMonth().valueOf() + 1).padStart(2, `0`);
      if (n2 === `CURRENT_DATE`) return String(this._date.getDate().valueOf()).padStart(2, `0`);
      if (n2 === `CURRENT_HOUR`) return String(this._date.getHours().valueOf()).padStart(2, `0`);
      if (n2 === `CURRENT_MINUTE`) return String(this._date.getMinutes().valueOf()).padStart(2, `0`);
      if (n2 === `CURRENT_SECOND`) return String(this._date.getSeconds().valueOf()).padStart(2, `0`);
      if (n2 === `CURRENT_DAY_NAME`) return _ea.dayNames[this._date.getDay()];
      if (n2 === `CURRENT_DAY_NAME_SHORT`) return _ea.dayNamesShort[this._date.getDay()];
      if (n2 === `CURRENT_MONTH_NAME`) return _ea.monthNames[this._date.getMonth()];
      if (n2 === `CURRENT_MONTH_NAME_SHORT`) return _ea.monthNamesShort[this._date.getMonth()];
      if (n2 === `CURRENT_SECONDS_UNIX`) return String(Math.floor(this._date.getTime() / 1e3));
      if (n2 === `CURRENT_TIMEZONE_OFFSET`) {
        let e2 = this._date.getTimezoneOffset(), t3 = e2 > 0 ? `-` : `+`, n3 = Math.trunc(Math.abs(e2 / 60)), r2 = n3 < 10 ? `0` + n3 : n3, i2 = Math.abs(e2) - n3 * 60, a2 = i2 < 10 ? `0` + i2 : i2;
        return t3 + r2 + `:` + a2;
      }
    }
  }, _ea.dayNames = [
    U(`Sunday`, `Sunday`),
    U(`Monday`, `Monday`),
    U(`Tuesday`, `Tuesday`),
    U(`Wednesday`, `Wednesday`),
    U(`Thursday`, `Thursday`),
    U(`Friday`, `Friday`),
    U(`Saturday`, `Saturday`)
  ], _ea.dayNamesShort = [
    U(`SundayShort`, `Sun`),
    U(`MondayShort`, `Mon`),
    U(`TuesdayShort`, `Tue`),
    U(`WednesdayShort`, `Wed`),
    U(`ThursdayShort`, `Thu`),
    U(`FridayShort`, `Fri`),
    U(`SaturdayShort`, `Sat`)
  ], _ea.monthNames = [
    U(`January`, `January`),
    U(`February`, `February`),
    U(`March`, `March`),
    U(`April`, `April`),
    U(`May`, `May`),
    U(`June`, `June`),
    U(`July`, `July`),
    U(`August`, `August`),
    U(`September`, `September`),
    U(`October`, `October`),
    U(`November`, `November`),
    U(`December`, `December`)
  ], _ea.monthNamesShort = [
    U(`JanuaryShort`, `Jan`),
    U(`FebruaryShort`, `Feb`),
    U(`MarchShort`, `Mar`),
    U(`AprilShort`, `Apr`),
    U(`MayShort`, `May`),
    U(`JuneShort`, `Jun`),
    U(`JulyShort`, `Jul`),
    U(`AugustShort`, `Aug`),
    U(`SeptemberShort`, `Sep`),
    U(`OctoberShort`, `Oct`),
    U(`NovemberShort`, `Nov`),
    U(`DecemberShort`, `Dec`)
  ], _ea), Pw = class {
    constructor(e2) {
      this._workspaceService = e2;
    }
    resolve(e2) {
      if (!this._workspaceService) return;
      let t2 = Wl(this._workspaceService.getWorkspace());
      if (!ks(t2)) {
        if (e2.name === `WORKSPACE_NAME`) return this._resolveWorkspaceName(t2);
        if (e2.name === `WORKSPACE_FOLDER`) return this._resoveWorkspacePath(t2);
      }
    }
    _resolveWorkspaceName(e2) {
      if (nc(e2)) return Li(e2.uri.path);
      let t2 = Li(e2.configPath.path);
      return t2.endsWith(si) && (t2 = t2.substr(0, t2.length - si.length - 1)), t2;
    }
    _resoveWorkspacePath(e2) {
      if (nc(e2)) return Cw(e2.uri.fsPath);
      let t2 = Li(e2.configPath.path), n2 = e2.configPath.fsPath;
      return n2.endsWith(t2) && (n2 = n2.substr(0, n2.length - t2.length - 1)), n2 ? Cw(n2) : `/`;
    }
  }, Fw = class {
    resolve(e2) {
      let { name: t2 } = e2;
      if (t2 === `RANDOM`) return Math.random().toString().slice(-6);
      if (t2 === `RANDOM_HEX`) return Math.random().toString(16).slice(-6);
      if (t2 === `UUID`) return sd();
    }
  }, Iw = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Lw = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Rw, zw = (_fa = class {
    constructor(e2, t2, n2) {
      this._editor = e2, this._snippet = t2, this._snippetLineLeadingWhitespace = n2, this._offset = -1, this._nestingLevel = 1, this._placeholderGroups = rs(t2.placeholders, Rd.compareByIndex), this._placeholderGroupsIdx = -1;
    }
    initialize(e2) {
      this._offset = e2.newPosition;
    }
    dispose() {
      this._placeholderDecorations && this._editor.removeDecorations([
        ...this._placeholderDecorations.values()
      ]), this._placeholderGroups.length = 0;
    }
    _initDecorations() {
      if (this._offset === -1) throw Error(`Snippet not initialized!`);
      if (this._placeholderDecorations) return;
      this._placeholderDecorations = /* @__PURE__ */ new Map();
      let t2 = this._editor.getModel();
      this._editor.changeDecorations((n2) => {
        for (let r2 of this._snippet.placeholders) {
          let i2 = this._snippet.offset(r2), a2 = this._snippet.fullLen(r2), o2 = P.fromPositions(t2.getPositionAt(this._offset + i2), t2.getPositionAt(this._offset + i2 + a2)), s2 = r2.isFinalTabstop ? _fa._decor.inactiveFinal : _fa._decor.inactive, c2 = n2.addDecoration(o2, s2);
          this._placeholderDecorations.set(r2, c2);
        }
      });
    }
    move(t2) {
      if (!this._editor.hasModel()) return [];
      if (this._initDecorations(), this._placeholderGroupsIdx >= 0) {
        let e2 = [];
        for (let t3 of this._placeholderGroups[this._placeholderGroupsIdx]) if (t3.transform) {
          let n3 = this._placeholderDecorations.get(t3), r3 = this._editor.getModel().getDecorationRange(n3), i2 = this._editor.getModel().getValueInRange(r3), a2 = t3.transform.resolve(i2).split(/\r\n|\r|\n/);
          for (let e3 = 1; e3 < a2.length; e3++) a2[e3] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + a2[e3]);
          e2.push(Oe.replace(r3, a2.join(this._editor.getModel().getEOL())));
        }
        e2.length > 0 && this._editor.executeEdits(`snippet.placeholderTransform`, e2);
      }
      let n2 = false;
      t2 === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1 ? (this._placeholderGroupsIdx += 1, n2 = true) : t2 === false && this._placeholderGroupsIdx > 0 && (--this._placeholderGroupsIdx, n2 = true);
      let r2 = this._editor.getModel().changeDecorations((t3) => {
        let r3 = /* @__PURE__ */ new Set(), i2 = [];
        for (let a2 of this._placeholderGroups[this._placeholderGroupsIdx]) {
          let o2 = this._placeholderDecorations.get(a2), s2 = this._editor.getModel().getDecorationRange(o2);
          i2.push(new I(s2.startLineNumber, s2.startColumn, s2.endLineNumber, s2.endColumn)), n2 && (n2 = this._hasPlaceholderBeenCollapsed(a2)), t3.changeDecorationOptions(o2, a2.isFinalTabstop ? _fa._decor.activeFinal : _fa._decor.active), r3.add(a2);
          for (let n3 of this._snippet.enclosingPlaceholders(a2)) {
            let i3 = this._placeholderDecorations.get(n3);
            t3.changeDecorationOptions(i3, n3.isFinalTabstop ? _fa._decor.activeFinal : _fa._decor.active), r3.add(n3);
          }
        }
        for (let [n3, i3] of this._placeholderDecorations) r3.has(n3) || t3.changeDecorationOptions(i3, n3.isFinalTabstop ? _fa._decor.inactiveFinal : _fa._decor.inactive);
        return i2;
      });
      return n2 ? this.move(t2) : r2 ?? [];
    }
    _hasPlaceholderBeenCollapsed(e2) {
      let t2 = e2;
      for (; t2; ) {
        if (t2 instanceof Rd) {
          let e3 = this._placeholderDecorations.get(t2), n2 = this._editor.getModel().getDecorationRange(e3);
          if (n2.isEmpty() && t2.toString().length > 0) return true;
        }
        t2 = t2.parent;
      }
      return false;
    }
    get isAtFirstPlaceholder() {
      return this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;
    }
    get isAtLastPlaceholder() {
      return this._placeholderGroupsIdx === this._placeholderGroups.length - 1;
    }
    get hasPlaceholder() {
      return this._snippet.placeholders.length > 0;
    }
    get isTrivialSnippet() {
      if (this._snippet.placeholders.length === 0) return true;
      if (this._snippet.placeholders.length === 1) {
        let [e2] = this._snippet.placeholders;
        if (e2.isFinalTabstop && this._snippet.rightMostDescendant === e2) return true;
      }
      return false;
    }
    computePossibleSelections() {
      let e2 = /* @__PURE__ */ new Map();
      for (let t2 of this._placeholderGroups) {
        let n2;
        for (let r2 of t2) {
          if (r2.isFinalTabstop) break;
          n2 || (n2 = [], e2.set(r2.index, n2));
          let t3 = this._placeholderDecorations.get(r2), i2 = this._editor.getModel().getDecorationRange(t3);
          if (!i2) {
            e2.delete(r2.index);
            break;
          }
          n2.push(i2);
        }
      }
      return e2;
    }
    get activeChoice() {
      if (!this._placeholderDecorations) return;
      let e2 = this._placeholderGroups[this._placeholderGroupsIdx][0];
      if (!(e2 == null ? void 0 : e2.choice)) return;
      let t2 = this._placeholderDecorations.get(e2);
      if (!t2) return;
      let n2 = this._editor.getModel().getDecorationRange(t2);
      if (n2) return {
        range: n2,
        choice: e2.choice
      };
    }
    get hasChoice() {
      let e2 = false;
      return this._snippet.walk((t2) => (e2 = t2 instanceof zd, !e2)), e2;
    }
    merge(t2) {
      let n2 = this._editor.getModel();
      this._nestingLevel *= 10, this._editor.changeDecorations((r2) => {
        for (let i2 of this._placeholderGroups[this._placeholderGroupsIdx]) {
          let a2 = t2.shift();
          console.assert(a2._offset !== -1), console.assert(!a2._placeholderDecorations);
          let o2 = a2._snippet.placeholderInfo.last.index;
          for (let e2 of a2._snippet.placeholderInfo.all) e2.isFinalTabstop ? e2.index = i2.index + (o2 + 1) / this._nestingLevel : e2.index = i2.index + e2.index / this._nestingLevel;
          this._snippet.replace(i2, a2._snippet.children);
          let s2 = this._placeholderDecorations.get(i2);
          r2.removeDecoration(s2), this._placeholderDecorations.delete(i2);
          for (let t3 of a2._snippet.placeholders) {
            let i3 = a2._snippet.offset(t3), o3 = a2._snippet.fullLen(t3), s3 = P.fromPositions(n2.getPositionAt(a2._offset + i3), n2.getPositionAt(a2._offset + i3 + o3)), c2 = r2.addDecoration(s3, _fa._decor.inactive);
            this._placeholderDecorations.set(t3, c2);
          }
        }
        this._placeholderGroups = rs(this._snippet.placeholders, Rd.compareByIndex);
      });
    }
  }, _fa._decor = {
    active: M.register({
      description: `snippet-placeholder-1`,
      stickiness: 0,
      className: `snippet-placeholder`
    }),
    inactive: M.register({
      description: `snippet-placeholder-2`,
      stickiness: 1,
      className: `snippet-placeholder`
    }),
    activeFinal: M.register({
      description: `snippet-placeholder-3`,
      stickiness: 1,
      className: `finish-snippet-placeholder`
    }),
    inactiveFinal: M.register({
      description: `snippet-placeholder-4`,
      stickiness: 1,
      className: `finish-snippet-placeholder`
    })
  }, _fa);
  const Bw = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    adjustWhitespace: true,
    clipboardText: void 0,
    overtypingCapturer: void 0
  };
  let Vw = Rw = class {
    static adjustWhitespace(e2, t2, n2, r2, i2) {
      let a2 = e2.getLineContent(t2.lineNumber), o2 = Ko(a2, 0, t2.column - 1), s2;
      return r2.walk((t3) => {
        if (!(t3 instanceof Id) || t3.parent instanceof zd || i2 && !i2.has(t3)) return true;
        let a3 = t3.value.split(/\r\n|\r|\n/);
        if (n2) {
          let n3 = r2.offset(t3);
          if (n3 === 0) a3[0] = e2.normalizeIndentation(a3[0]);
          else {
            s2 ?? (s2 = r2.toString());
            let t4 = s2.charCodeAt(n3 - 1);
            (t4 === 10 || t4 === 13) && (a3[0] = e2.normalizeIndentation(o2 + a3[0]));
          }
          for (let t4 = 1; t4 < a3.length; t4++) a3[t4] = e2.normalizeIndentation(o2 + a3[t4]);
        }
        let c2 = a3.join(e2.getEOL());
        return c2 !== t3.value && (t3.parent.replace(t3, [
          new Id(c2)
        ]), s2 = void 0), true;
      }), o2;
    }
    static adjustSelection(e2, t2, n2, r2) {
      if (n2 !== 0 || r2 !== 0) {
        let { positionLineNumber: i2, positionColumn: a2 } = t2, o2 = a2 - n2, s2 = a2 + r2, c2 = e2.validateRange({
          startLineNumber: i2,
          startColumn: o2,
          endLineNumber: i2,
          endColumn: s2
        });
        t2 = I.createWithDirection(c2.startLineNumber, c2.startColumn, c2.endLineNumber, c2.endColumn, t2.getDirection());
      }
      return t2;
    }
    static createEditsAndSnippetsFromSelections(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      let l2 = [], u2 = [];
      if (!e2.hasModel()) return {
        edits: l2,
        snippets: u2
      };
      let d2 = e2.getModel(), f2 = e2.invokeWithinContext((e3) => e3.get(Kt)), p2 = e2.invokeWithinContext((e3) => new Aw(e3.get(wt), d2)), m2 = () => o2, h2 = d2.getValueInRange(Rw.adjustSelection(d2, e2.getSelection(), n2, 0)), g2 = d2.getValueInRange(Rw.adjustSelection(d2, e2.getSelection(), 0, r2)), ee2 = d2.getLineFirstNonWhitespaceColumn(e2.getSelection().positionLineNumber), te2 = e2.getSelections().map((e3, t3) => ({
        selection: e3,
        idx: t3
      })).sort((e3, t3) => P.compareRangesUsingStarts(e3.selection, t3.selection));
      for (let { selection: o3, idx: ne2 } of te2) {
        let re2 = Rw.adjustSelection(d2, o3, n2, 0), ie2 = Rw.adjustSelection(d2, o3, 0, r2);
        h2 !== d2.getValueInRange(re2) && (re2 = o3), g2 !== d2.getValueInRange(ie2) && (ie2 = o3);
        let _2 = o3.setStartPosition(re2.startLineNumber, re2.startColumn).setEndPosition(ie2.endLineNumber, ie2.endColumn), v2 = new Gd().parse(t2, true, i2), ae2 = _2.getStartPosition(), y2 = Rw.adjustWhitespace(d2, ae2, a2 || ne2 > 0 && ee2 !== d2.getLineFirstNonWhitespaceColumn(o3.positionLineNumber), v2);
        v2.resolveVariables(new Ow([
          p2,
          new jw(m2, ne2, te2.length, e2.getOption(79) === `spread`),
          new kw(d2, o3, ne2, s2),
          new Mw(d2, o3, c2),
          new Nw(),
          new Pw(f2),
          new Fw()
        ])), l2[ne2] = Oe.replace(_2, v2.toString()), l2[ne2].identifier = {
          major: ne2,
          minor: 0
        }, l2[ne2]._isTracked = true, u2[ne2] = new zw(e2, v2, y2);
      }
      return {
        edits: l2,
        snippets: u2
      };
    }
    static createEditsAndSnippetsFromEdits(e2, t2, n2, r2, i2, a2, o2) {
      if (!e2.hasModel() || t2.length === 0) return {
        edits: [],
        snippets: []
      };
      let s2 = [], c2 = e2.getModel(), l2 = new Gd(), u2 = new Wd(), d2 = new Ow([
        e2.invokeWithinContext((e3) => new Aw(e3.get(wt), c2)),
        new jw(() => i2, 0, e2.getSelections().length, e2.getOption(79) === `spread`),
        new kw(c2, e2.getSelection(), 0, a2),
        new Mw(c2, e2.getSelection(), o2),
        new Nw(),
        new Pw(e2.invokeWithinContext((e3) => e3.get(Kt))),
        new Fw()
      ]);
      t2 = t2.sort((e3, t3) => P.compareRangesUsingStarts(e3.range, t3.range));
      let f2 = 0;
      for (let e3 = 0; e3 < t2.length; e3++) {
        let { range: n3, template: r3 } = t2[e3];
        if (e3 > 0) {
          let r4 = t2[e3 - 1].range, i4 = P.fromPositions(r4.getEndPosition(), n3.getStartPosition()), a4 = new Id(c2.getValueInRange(i4));
          u2.appendChild(a4), f2 += a4.value.length;
        }
        let i3 = l2.parseFragment(r3, u2);
        Rw.adjustWhitespace(c2, n3.getStartPosition(), true, u2, new Set(i3)), u2.resolveVariables(d2);
        let a3 = u2.toString(), o3 = a3.slice(f2);
        f2 = a3.length;
        let p2 = Oe.replace(n3, o3);
        p2.identifier = {
          major: e3,
          minor: 0
        }, p2._isTracked = true, s2.push(p2);
      }
      return l2.ensureFinalTabstop(u2, n2, true), {
        edits: s2,
        snippets: [
          new zw(e2, u2, ``)
        ]
      };
    }
    constructor(e2, t2, n2 = Bw, r2) {
      this._editor = e2, this._template = t2, this._options = n2, this._languageConfigurationService = r2, this._templateMerges = [], this._snippets = [];
    }
    dispose() {
      Ra(this._snippets);
    }
    _logInfo() {
      return `template="${this._template}", merged_templates="${this._templateMerges.join(` -> `)}"`;
    }
    insert() {
      if (!this._editor.hasModel()) return;
      let { edits: e2, snippets: t2 } = typeof this._template == `string` ? Rw.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService) : Rw.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);
      this._snippets = t2, this._editor.executeEdits(`snippet`, e2, (e3) => {
        let n2 = e3.filter((e4) => !!e4.identifier);
        for (let e4 = 0; e4 < t2.length; e4++) t2[e4].initialize(n2[e4].textChange);
        return this._snippets[0].hasPlaceholder ? this._move(true) : n2.map((e4) => I.fromPositions(e4.range.getEndPosition()));
      }), this._editor.revealRange(this._editor.getSelections()[0]);
    }
    merge(e2, t2 = Bw) {
      if (!this._editor.hasModel()) return;
      this._templateMerges.push([
        this._snippets[0]._nestingLevel,
        this._snippets[0]._placeholderGroupsIdx,
        e2
      ]);
      let { edits: n2, snippets: r2 } = Rw.createEditsAndSnippetsFromSelections(this._editor, e2, t2.overwriteBefore, t2.overwriteAfter, true, t2.adjustWhitespace, t2.clipboardText, t2.overtypingCapturer, this._languageConfigurationService);
      this._editor.executeEdits(`snippet`, n2, (e3) => {
        let t3 = e3.filter((e4) => !!e4.identifier);
        for (let e4 = 0; e4 < r2.length; e4++) r2[e4].initialize(t3[e4].textChange);
        let n3 = r2[0].isTrivialSnippet;
        if (!n3) {
          for (let e4 of this._snippets) e4.merge(r2);
          console.assert(r2.length === 0);
        }
        return this._snippets[0].hasPlaceholder && !n3 ? this._move(void 0) : t3.map((e4) => I.fromPositions(e4.range.getEndPosition()));
      });
    }
    next() {
      let e2 = this._move(true);
      this._editor.setSelections(e2), this._editor.revealPositionInCenterIfOutsideViewport(e2[0].getPosition());
    }
    prev() {
      let e2 = this._move(false);
      this._editor.setSelections(e2), this._editor.revealPositionInCenterIfOutsideViewport(e2[0].getPosition());
    }
    _move(e2) {
      let t2 = [];
      for (let n2 of this._snippets) {
        let r2 = n2.move(e2);
        t2.push(...r2);
      }
      return t2;
    }
    get isAtFirstPlaceholder() {
      return this._snippets[0].isAtFirstPlaceholder;
    }
    get isAtLastPlaceholder() {
      return this._snippets[0].isAtLastPlaceholder;
    }
    get hasPlaceholder() {
      return this._snippets[0].hasPlaceholder;
    }
    get hasChoice() {
      return this._snippets[0].hasChoice;
    }
    get activeChoice() {
      return this._snippets[0].activeChoice;
    }
    isSelectionWithinPlaceholders() {
      if (!this.hasPlaceholder) return false;
      let e2 = this._editor.getSelections();
      if (e2.length < this._snippets.length) return false;
      let t2 = /* @__PURE__ */ new Map();
      for (let n2 of this._snippets) {
        let r2 = n2.computePossibleSelections();
        if (t2.size === 0) for (let [n3, i2] of r2) {
          i2.sort(P.compareRangesUsingStarts);
          for (let r3 of e2) if (i2[0].containsRange(r3)) {
            t2.set(n3, []);
            break;
          }
        }
        if (t2.size === 0) return false;
        t2.forEach((e3, t3) => {
          e3.push(...r2.get(t3));
        });
      }
      e2.sort(P.compareRangesUsingStarts);
      for (let [n2, r2] of t2) {
        if (r2.length !== e2.length) {
          t2.delete(n2);
          continue;
        }
        r2.sort(P.compareRangesUsingStarts);
        for (let i2 = 0; i2 < r2.length; i2++) if (!r2[i2].containsRange(e2[i2])) {
          t2.delete(n2);
          continue;
        }
      }
      return t2.size > 0;
    }
  };
  Vw = Rw = Iw([
    Lw(3, Tt)
  ], Vw);
  var Hw = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Uw = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Ww;
  const Gw = {
    overwriteBefore: 0,
    overwriteAfter: 0,
    undoStopBefore: true,
    undoStopAfter: true,
    adjustWhitespace: true,
    clipboardText: void 0,
    overtypingCapturer: void 0
  };
  let Kw = (_ga = class {
    static get(e2) {
      return e2.getContribution(Ww.ID);
    }
    constructor(e2, t2, n2, r2, i2) {
      this._editor = e2, this._logService = t2, this._languageFeaturesService = n2, this._languageConfigurationService = i2, this._snippetListener = new C(), this._modelVersionId = -1, this._inSnippet = Ww.InSnippetMode.bindTo(r2), this._hasNextTabstop = Ww.HasNextTabstop.bindTo(r2), this._hasPrevTabstop = Ww.HasPrevTabstop.bindTo(r2);
    }
    dispose() {
      var _a3;
      this._inSnippet.reset(), this._hasPrevTabstop.reset(), this._hasNextTabstop.reset(), (_a3 = this._session) == null ? void 0 : _a3.dispose(), this._snippetListener.dispose();
    }
    insert(e2, t2) {
      try {
        this._doInsert(e2, t2 === void 0 ? Gw : {
          ...Gw,
          ...t2
        });
      } catch (t3) {
        this.cancel(), this._logService.error(t3), this._logService.error(`snippet_error`), this._logService.error(`insert_template=`, e2), this._logService.error(`existing_template=`, this._session ? this._session._logInfo() : `<no_session>`);
      }
    }
    _doInsert(e2, t2) {
      var _a3;
      if (this._editor.hasModel()) {
        if (this._snippetListener.clear(), t2.undoStopBefore && this._editor.getModel().pushStackElement(), this._session && typeof e2 != `string` && this.cancel(), this._session ? (V(typeof e2 == `string`), this._session.merge(e2, t2)) : (this._modelVersionId = this._editor.getModel().getAlternativeVersionId(), this._session = new Vw(this._editor, e2, t2, this._languageConfigurationService), this._session.insert()), t2.undoStopAfter && this._editor.getModel().pushStackElement(), (_a3 = this._session) == null ? void 0 : _a3.hasChoice) {
          let e3 = {
            _debugDisplayName: `snippetChoiceCompletions`,
            provideCompletionItems: (e4, t4) => {
              if (!this._session || e4 !== this._editor.getModel() || !N.equals(this._editor.getPosition(), t4)) return;
              let { activeChoice: n3 } = this._session;
              if (!n3 || n3.choice.options.length === 0) return;
              let r3 = e4.getValueInRange(n3.range), i3 = !!n3.choice.options.find((e5) => e5.value === r3), a3 = [];
              for (let e5 = 0; e5 < n3.choice.options.length; e5++) {
                let t5 = n3.choice.options[e5];
                a3.push({
                  kind: 13,
                  label: t5.value,
                  insertText: t5.value,
                  sortText: `a`.repeat(e5 + 1),
                  range: n3.range,
                  filterText: i3 ? `${r3}_${t5.value}` : void 0,
                  command: {
                    id: `jumpToNextSnippetPlaceholder`,
                    title: U(`next`, `Go to next placeholder...`)
                  }
                });
              }
              return {
                suggestions: a3
              };
            }
          }, t3 = this._editor.getModel(), n2, r2 = false, i2 = () => {
            n2 == null ? void 0 : n2.dispose(), r2 = false;
          }, a2 = () => {
            r2 || (n2 = this._languageFeaturesService.completionProvider.register({
              language: t3.getLanguageId(),
              pattern: t3.uri.fsPath,
              scheme: t3.uri.scheme,
              exclusive: true
            }, e3), this._snippetListener.add(n2), r2 = true);
          };
          this._choiceCompletions = {
            provider: e3,
            enable: a2,
            disable: i2
          };
        }
        this._updateState(), this._snippetListener.add(this._editor.onDidChangeModelContent((e3) => e3.isFlush && this.cancel())), this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel())), this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));
      }
    }
    _updateState() {
      if (!(!this._session || !this._editor.hasModel())) {
        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId() || !this._session.hasPlaceholder) return this.cancel();
        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) return this._editor.getModel().pushStackElement(), this.cancel();
        this._inSnippet.set(true), this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder), this._hasNextTabstop.set(!this._session.isAtLastPlaceholder), this._handleChoice();
      }
    }
    _handleChoice() {
      var _a3;
      if (!this._session || !this._editor.hasModel()) {
        this._currentChoice = void 0;
        return;
      }
      let { activeChoice: e2 } = this._session;
      if (!e2 || !this._choiceCompletions) {
        (_a3 = this._choiceCompletions) == null ? void 0 : _a3.disable(), this._currentChoice = void 0;
        return;
      }
      this._currentChoice !== e2.choice && (this._currentChoice = e2.choice, this._choiceCompletions.enable(), queueMicrotask(() => {
        xw(this._editor, this._choiceCompletions.provider);
      }));
    }
    finish() {
      for (; this._inSnippet.get(); ) this.next();
    }
    cancel(e2 = false) {
      var _a3;
      this._inSnippet.reset(), this._hasPrevTabstop.reset(), this._hasNextTabstop.reset(), this._snippetListener.clear(), this._currentChoice = void 0, (_a3 = this._session) == null ? void 0 : _a3.dispose(), this._session = void 0, this._modelVersionId = -1, e2 && this._editor.setSelections([
        this._editor.getSelection()
      ]);
    }
    prev() {
      var _a3;
      (_a3 = this._session) == null ? void 0 : _a3.prev(), this._updateState();
    }
    next() {
      var _a3;
      (_a3 = this._session) == null ? void 0 : _a3.next(), this._updateState();
    }
    isInSnippet() {
      return !!this._inSnippet.get();
    }
  }, Ww = _ga, _ga.ID = `snippetController2`, _ga.InSnippetMode = new F(`inSnippetMode`, false, U(`inSnippetMode`, `Whether the editor in current in snippet mode`)), _ga.HasNextTabstop = new F(`hasNextTabstop`, false, U(`hasNextTabstop`, `Whether there is a next tab stop when in snippet mode`)), _ga.HasPrevTabstop = new F(`hasPrevTabstop`, false, U(`hasPrevTabstop`, `Whether there is a previous tab stop when in snippet mode`)), _ga);
  Kw = Ww = Hw([
    Uw(1, kt),
    Uw(2, A),
    Uw(3, O),
    Uw(4, Tt)
  ], Kw), X(Kw.ID, Kw, 4);
  const qw = Ae.bindToContribution(Kw.get);
  Y(new qw({
    id: `jumpToNextSnippetPlaceholder`,
    precondition: b.and(Kw.InSnippetMode, Kw.HasNextTabstop),
    handler: (e2) => e2.next(),
    kbOpts: {
      weight: 130,
      kbExpr: T.textInputFocus,
      primary: 2
    }
  })), Y(new qw({
    id: `jumpToPrevSnippetPlaceholder`,
    precondition: b.and(Kw.InSnippetMode, Kw.HasPrevTabstop),
    handler: (e2) => e2.prev(),
    kbOpts: {
      weight: 130,
      kbExpr: T.textInputFocus,
      primary: 1026
    }
  })), Y(new qw({
    id: `leaveSnippet`,
    precondition: Kw.InSnippetMode,
    handler: (e2) => e2.cancel(true),
    kbOpts: {
      weight: 130,
      kbExpr: T.textInputFocus,
      primary: 9,
      secondary: [
        1033
      ]
    }
  })), Y(new qw({
    id: `acceptSnippet`,
    precondition: Kw.InSnippetMode,
    handler: (e2) => e2.finish()
  }));
  var Jw = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Yw = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let Xw = class extends S {
    get isAcceptingPartially() {
      return this._isAcceptingPartially;
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2, u2, d2) {
      super(), this.textModel = e2, this.selectedSuggestItem = t2, this._textModelVersionId = n2, this._positions = r2, this._debounceValue = i2, this._suggestPreviewEnabled = a2, this._suggestPreviewMode = o2, this._inlineSuggestMode = s2, this._enabled = c2, this._instantiationService = l2, this._commandService = u2, this._languageConfigurationService = d2, this._source = this._register(this._instantiationService.createInstance(nw, this.textModel, this._textModelVersionId, this._debounceValue)), this._isActive = Hc(this, false), this._forceUpdateExplicitlySignal = Bc(this), this._selectedInlineCompletionId = Hc(this, void 0), this._primaryPosition = H(this, (e3) => this._positions.read(e3)[0] ?? new N(1, 1)), this._isAcceptingPartially = false, this._preserveCurrentCompletionReasons = /* @__PURE__ */ new Set([
        Zw.Redo,
        Zw.Undo,
        Zw.AcceptWord
      ]), this._fetchInlineCompletionsPromise = xa({
        owner: this,
        createEmptyChangeSummary: () => ({
          preserveCurrentCompletion: false,
          inlineCompletionTriggerKind: en.Automatic
        }),
        handleChange: (e3, t3) => (e3.didChange(this._textModelVersionId) && this._preserveCurrentCompletionReasons.has(this._getReason(e3.change)) ? t3.preserveCurrentCompletion = true : e3.didChange(this._forceUpdateExplicitlySignal) && (t3.inlineCompletionTriggerKind = en.Explicit), true)
      }, (e3, t3) => {
        this._forceUpdateExplicitlySignal.read(e3);
        let n3 = this._enabled.read(e3) && this.selectedSuggestItem.read(e3) || this._isActive.read(e3);
        if (!n3) {
          this._source.cancelUpdate();
          return;
        }
        this._textModelVersionId.read(e3);
        let r3 = this._source.suggestWidgetInlineCompletions.get(), i3 = this.selectedSuggestItem.read(e3);
        if (r3 && !i3) {
          let e4 = this._source.inlineCompletions.get();
          Kl((t4) => {
            (!e4 || r3.request.versionId > e4.request.versionId) && this._source.inlineCompletions.set(r3.clone(), t4), this._source.clearSuggestWidgetInlineCompletions(t4);
          });
        }
        let a3 = this._primaryPosition.read(e3), o3 = {
          triggerKind: t3.inlineCompletionTriggerKind,
          selectedSuggestionInfo: i3 == null ? void 0 : i3.toSelectedSuggestionInfo()
        }, s3 = this.selectedInlineCompletion.get(), c3 = t3.preserveCurrentCompletion || (s3 == null ? void 0 : s3.forwardStable) ? s3 : void 0;
        return this._source.fetch(a3, o3, c3);
      }), this._filteredInlineCompletionItems = Ca({
        owner: this,
        equalsFn: uc()
      }, (e3) => {
        let t3 = this._source.inlineCompletions.read(e3);
        if (!t3) return [];
        let n3 = this._primaryPosition.read(e3), r3 = t3.inlineCompletions.filter((t4) => t4.isVisible(this.textModel, n3, e3));
        return r3;
      }), this.selectedInlineCompletionIndex = H(this, (e3) => {
        let t3 = this._selectedInlineCompletionId.read(e3), n3 = this._filteredInlineCompletionItems.read(e3), r3 = this._selectedInlineCompletionId === void 0 ? -1 : n3.findIndex((e4) => e4.semanticId === t3);
        return r3 === -1 ? (this._selectedInlineCompletionId.set(void 0, void 0), 0) : r3;
      }), this.selectedInlineCompletion = H(this, (e3) => {
        let t3 = this._filteredInlineCompletionItems.read(e3), n3 = this.selectedInlineCompletionIndex.read(e3);
        return t3[n3];
      }), this.activeCommands = Ca({
        owner: this,
        equalsFn: uc()
      }, (e3) => {
        var _a3;
        return ((_a3 = this.selectedInlineCompletion.read(e3)) == null ? void 0 : _a3.inlineCompletion.source.inlineCompletions.commands) ?? [];
      }), this.lastTriggerKind = this._source.inlineCompletions.map(this, (e3) => e3 == null ? void 0 : e3.request.context.triggerKind), this.inlineCompletionsCount = H(this, (e3) => {
        if (this.lastTriggerKind.read(e3) === en.Explicit) return this._filteredInlineCompletionItems.read(e3).length;
      }), this.state = Ca({
        owner: this,
        equalsFn: (e3, t3) => !e3 || !t3 ? e3 === t3 : CC(e3.ghostTexts, t3.ghostTexts) && e3.inlineCompletion === t3.inlineCompletion && e3.suggestItem === t3.suggestItem
      }, (e3) => {
        let t3 = this.textModel, n3 = this.selectedSuggestItem.read(e3);
        if (n3) {
          let r3 = KC(n3.toSingleTextEdit(), t3), i3 = this._computeAugmentation(r3, e3), a3 = this._suggestPreviewEnabled.read(e3);
          if (!a3 && !i3) return;
          let o3 = (i3 == null ? void 0 : i3.edit) ?? r3, s3 = i3 ? i3.edit.text.length - r3.text.length : 0, c3 = this._suggestPreviewMode.read(e3), l3 = this._positions.read(e3), u3 = [
            o3,
            ...Qw(this.textModel, l3, o3)
          ], d3 = u3.map((e4, n4) => JC(e4, t3, c3, l3[n4], s3)).filter(Ts), f3 = d3[0] ?? new bC(o3.range.endLineNumber, []);
          return {
            edits: u3,
            primaryGhostText: f3,
            ghostTexts: d3,
            inlineCompletion: i3 == null ? void 0 : i3.completion,
            suggestItem: n3
          };
        } else {
          if (!this._isActive.read(e3)) return;
          let n4 = this.selectedInlineCompletion.read(e3);
          if (!n4) return;
          let r3 = n4.toSingleTextEdit(e3), i3 = this._inlineSuggestMode.read(e3), a3 = this._positions.read(e3), o3 = [
            r3,
            ...Qw(this.textModel, a3, r3)
          ], s3 = o3.map((e4, n5) => JC(e4, t3, i3, a3[n5], 0)).filter(Ts);
          return s3[0] ? {
            edits: o3,
            primaryGhostText: s3[0],
            ghostTexts: s3,
            inlineCompletion: n4,
            suggestItem: void 0
          } : void 0;
        }
      }), this.ghostTexts = Ca({
        owner: this,
        equalsFn: CC
      }, (e3) => {
        let t3 = this.state.read(e3);
        if (t3) return t3.ghostTexts;
      }), this.primaryGhostText = Ca({
        owner: this,
        equalsFn: wC
      }, (e3) => {
        let t3 = this.state.read(e3);
        if (t3) return t3 == null ? void 0 : t3.primaryGhostText;
      }), this._register(ol(this._fetchInlineCompletionsPromise));
      let f2;
      this._register(Ni((e3) => {
        var _a3, _b3;
        let t3 = this.state.read(e3), n3 = t3 == null ? void 0 : t3.inlineCompletion;
        if ((n3 == null ? void 0 : n3.semanticId) !== (f2 == null ? void 0 : f2.semanticId) && (f2 = n3, n3)) {
          let e4 = n3.inlineCompletion, t4 = e4.source;
          (_b3 = (_a3 = t4.provider).handleItemDidShow) == null ? void 0 : _b3.call(_a3, t4.inlineCompletions, e4.sourceInlineCompletion, e4.insertText);
        }
      }));
    }
    _getReason(e2) {
      return (e2 == null ? void 0 : e2.isUndoing) ? Zw.Undo : (e2 == null ? void 0 : e2.isRedoing) ? Zw.Redo : this.isAcceptingPartially ? Zw.AcceptWord : Zw.Other;
    }
    async trigger(e2) {
      this._isActive.set(true, e2), await this._fetchInlineCompletionsPromise.get();
    }
    async triggerExplicitly(e2) {
      Ll(e2, (e3) => {
        this._isActive.set(true, e3), this._forceUpdateExplicitlySignal.trigger(e3);
      }), await this._fetchInlineCompletionsPromise.get();
    }
    stop(e2) {
      Ll(e2, (e3) => {
        this._isActive.set(false, e3), this._source.clear(e3);
      });
    }
    _computeAugmentation(e2, t2) {
      let n2 = this.textModel, r2 = this._source.suggestWidgetInlineCompletions.read(t2), i2 = r2 ? r2.inlineCompletions : [
        this.selectedInlineCompletion.read(t2)
      ].filter(Ts), a2 = xc(i2, (r3) => {
        let i3 = r3.toSingleTextEdit(t2);
        return i3 = KC(i3, n2, P.fromPositions(i3.range.getStartPosition(), e2.range.getEndPosition())), qC(i3, e2) ? {
          completion: r3,
          edit: i3
        } : void 0;
      });
      return a2;
    }
    async _deltaSelectedInlineCompletionIndex(e2) {
      await this.triggerExplicitly();
      let t2 = this._filteredInlineCompletionItems.get() || [];
      if (t2.length > 0) {
        let n2 = (this.selectedInlineCompletionIndex.get() + e2 + t2.length) % t2.length;
        this._selectedInlineCompletionId.set(t2[n2].semanticId, void 0);
      } else this._selectedInlineCompletionId.set(void 0, void 0);
    }
    async next() {
      await this._deltaSelectedInlineCompletionIndex(1);
    }
    async previous() {
      await this._deltaSelectedInlineCompletionIndex(-1);
    }
    async accept(e2) {
      var _a3;
      if (e2.getModel() !== this.textModel) throw new u();
      let t2 = this.state.get();
      if (!t2 || t2.primaryGhostText.isEmpty() || !t2.inlineCompletion) return;
      let n2 = t2.inlineCompletion.toInlineCompletion(void 0);
      if (n2.command && n2.source.addRef(), e2.pushUndoStop(), n2.snippetInfo) e2.executeEdits(`inlineSuggestion.accept`, [
        Oe.replace(n2.range, ``),
        ...n2.additionalTextEdits
      ]), e2.setPosition(n2.snippetInfo.range.getStartPosition(), `inlineCompletionAccept`), (_a3 = Kw.get(e2)) == null ? void 0 : _a3.insert(n2.snippetInfo.snippet, {
        undoStopBefore: false
      });
      else {
        let r2 = t2.edits, i2 = eT(r2).map((e3) => I.fromPositions(e3));
        e2.executeEdits(`inlineSuggestion.accept`, [
          ...r2.map((e3) => Oe.replace(e3.range, e3.text)),
          ...n2.additionalTextEdits
        ]), e2.setSelections(i2, `inlineCompletionAccept`);
      }
      this.stop(), n2.command && (await this._commandService.executeCommand(n2.command.id, ...n2.command.arguments || []).then(void 0, Uc), n2.source.removeRef());
    }
    async acceptNextWord(e2) {
      await this._acceptNext(e2, (e3, t2) => {
        let n2 = this.textModel.getLanguageIdAtPosition(e3.lineNumber, e3.column), r2 = this._languageConfigurationService.getLanguageConfiguration(n2), i2 = new RegExp(r2.wordDefinition.source, r2.wordDefinition.flags.replace(`g`, ``)), a2 = t2.match(i2), o2 = 0;
        o2 = a2 && a2.index !== void 0 ? a2.index === 0 ? a2[0].length : a2.index : t2.length;
        let s2 = /\s+/g, c2 = s2.exec(t2);
        return c2 && c2.index !== void 0 && c2.index + c2[0].length < o2 && (o2 = c2.index + c2[0].length), o2;
      }, 0);
    }
    async acceptNextLine(e2) {
      await this._acceptNext(e2, (e3, t2) => {
        let n2 = t2.match(/\n/);
        return n2 && n2.index !== void 0 ? n2.index + 1 : t2.length;
      }, 1);
    }
    async _acceptNext(e2, t2, n2) {
      if (e2.getModel() !== this.textModel) throw new u();
      let r2 = this.state.get();
      if (!r2 || r2.primaryGhostText.isEmpty() || !r2.inlineCompletion) return;
      let i2 = r2.primaryGhostText, a2 = r2.inlineCompletion.toInlineCompletion(void 0);
      if (a2.snippetInfo || a2.filterText !== a2.insertText) {
        await this.accept(e2);
        return;
      }
      let o2 = i2.parts[0], s2 = new N(i2.lineNumber, o2.column), c2 = o2.text, l2 = t2(s2, c2);
      if (l2 === c2.length && i2.parts.length === 1) {
        this.accept(e2);
        return;
      }
      let d2 = c2.substring(0, l2), f2 = this._positions.get(), p2 = f2[0];
      a2.source.addRef();
      try {
        this._isAcceptingPartially = true;
        try {
          e2.pushUndoStop();
          let t3 = P.fromPositions(p2, s2), n3 = e2.getModel().getValueInRange(t3) + d2, r3 = new kr(t3, n3), i3 = [
            r3,
            ...Qw(this.textModel, f2, r3)
          ], a3 = eT(i3).map((e3) => I.fromPositions(e3));
          e2.executeEdits(`inlineSuggestion.accept`, i3.map((e3) => Oe.replace(e3.range, e3.text))), e2.setSelections(a3, `inlineCompletionPartialAccept`), e2.revealPositionInCenterIfOutsideViewport(e2.getPosition(), 1);
        } finally {
          this._isAcceptingPartially = false;
        }
        if (a2.source.provider.handlePartialAccept) {
          let t3 = P.fromPositions(a2.range.getStartPosition(), Wr.ofText(d2).addToPosition(s2)), r3 = e2.getModel().getValueInRange(t3, 1);
          a2.source.provider.handlePartialAccept(a2.source.inlineCompletions, a2.sourceInlineCompletion, r3.length, {
            kind: n2
          });
        }
      } finally {
        a2.source.removeRef();
      }
    }
    handleSuggestAccepted(e2) {
      var _a3, _b3;
      let t2 = KC(e2.toSingleTextEdit(), this.textModel), n2 = this._computeAugmentation(t2, void 0);
      if (!n2) return;
      let r2 = n2.completion.inlineCompletion;
      (_b3 = (_a3 = r2.source.provider).handlePartialAccept) == null ? void 0 : _b3.call(_a3, r2.source.inlineCompletions, r2.sourceInlineCompletion, t2.text.length, {
        kind: 2
      });
    }
  };
  Xw = Jw([
    Yw(9, k),
    Yw(10, mt),
    Yw(11, Tt)
  ], Xw);
  var Zw;
  (function(e2) {
    e2[e2.Undo = 0] = `Undo`, e2[e2.Redo = 1] = `Redo`, e2[e2.AcceptWord = 2] = `AcceptWord`, e2[e2.Other = 3] = `Other`;
  })(Zw || (Zw = {}));
  function Qw(e2, t2, n2) {
    if (t2.length === 1) return [];
    let r2 = t2[0], i2 = t2.slice(1), a2 = n2.range.getStartPosition(), o2 = n2.range.getEndPosition(), s2 = e2.getValueInRange(P.fromPositions(r2, o2)), c2 = AC(r2, a2);
    if (c2.lineNumber < 1) return G(new u(`positionWithinTextEdit line number should be bigger than 0.
			Invalid subtraction between ${r2.toString()} and ${a2.toString()}`)), [];
    let l2 = $w(n2.text, c2);
    return i2.map((t3) => {
      let n3 = kC(AC(t3, a2), o2), r3 = e2.getValueInRange(P.fromPositions(t3, n3)), i3 = Ki(s2, r3), c3 = P.fromPositions(t3, t3.delta(0, i3));
      return new kr(c3, l2);
    });
  }
  function $w(e2, t2) {
    let n2 = ``, r2 = Ml(e2);
    for (let e3 = t2.lineNumber - 1; e3 < r2.length; e3++) n2 += r2[e3].substring(e3 === t2.lineNumber - 1 ? t2.column - 1 : 0);
    return n2;
  }
  function eT(e2) {
    let t2 = Xn.createSortPermutation(e2, Yi((e3) => e3.range, P.compareRangesUsingStarts)), n2 = new Ur(t2.apply(e2)), r2 = n2.getNewRanges(), i2 = t2.inverse().apply(r2);
    return i2.map((e3) => e3.getEndPosition());
  }
  var tT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, nT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, rT, iT = class {
    constructor(e2) {
      this.name = e2;
    }
    select(e2, t2, n2) {
      if (n2.length === 0) return 0;
      let r2 = n2[0].score[0];
      for (let e3 = 0; e3 < n2.length; e3++) {
        let { score: t3, completion: i2 } = n2[e3];
        if (t3[0] !== r2) break;
        if (i2.preselect) return e3;
      }
      return 0;
    }
  }, aT = class extends iT {
    constructor() {
      super(`first`);
    }
    memorize(e2, t2, n2) {
    }
    toJSON() {
    }
    fromJSON() {
    }
  }, oT = class extends iT {
    constructor() {
      super(`recentlyUsed`), this._cache = new _n(300, 0.66), this._seq = 0;
    }
    memorize(e2, t2, n2) {
      let r2 = `${e2.getLanguageId()}/${n2.textLabel}`;
      this._cache.set(r2, {
        touch: this._seq++,
        type: n2.completion.kind,
        insertText: n2.completion.insertText
      });
    }
    select(e2, t2, n2) {
      if (n2.length === 0) return 0;
      let r2 = e2.getLineContent(t2.lineNumber).substr(t2.column - 10, t2.column - 1);
      if (/\s$/.test(r2)) return super.select(e2, t2, n2);
      let i2 = n2[0].score[0], a2 = -1, o2 = -1, s2 = -1;
      for (let t3 = 0; t3 < n2.length && n2[t3].score[0] === i2; t3++) {
        let r3 = `${e2.getLanguageId()}/${n2[t3].textLabel}`, i3 = this._cache.peek(r3);
        if (i3 && i3.touch > s2 && i3.type === n2[t3].completion.kind && i3.insertText === n2[t3].completion.insertText && (s2 = i3.touch, o2 = t3), n2[t3].completion.preselect && a2 === -1) return a2 = t3;
      }
      return o2 === -1 ? a2 === -1 ? 0 : a2 : o2;
    }
    toJSON() {
      return this._cache.toJSON();
    }
    fromJSON(e2) {
      this._cache.clear();
      let t2 = 0;
      for (let [n2, r2] of e2) r2.touch = t2, r2.type = typeof r2.type == `number` ? r2.type : oe.fromString(r2.type), this._cache.set(n2, r2);
      this._seq = this._cache.size;
    }
  }, sT = class extends iT {
    constructor() {
      super(`recentlyUsedByPrefix`), this._trie = Vr.forStrings(), this._seq = 0;
    }
    memorize(e2, t2, n2) {
      let { word: r2 } = e2.getWordUntilPosition(t2), i2 = `${e2.getLanguageId()}/${r2}`;
      this._trie.set(i2, {
        type: n2.completion.kind,
        insertText: n2.completion.insertText,
        touch: this._seq++
      });
    }
    select(e2, t2, n2) {
      let { word: r2 } = e2.getWordUntilPosition(t2);
      if (!r2) return super.select(e2, t2, n2);
      let i2 = `${e2.getLanguageId()}/${r2}`, a2 = this._trie.get(i2);
      if (a2 || (a2 = this._trie.findSubstr(i2)), a2) for (let e3 = 0; e3 < n2.length; e3++) {
        let { kind: t3, insertText: r3 } = n2[e3].completion;
        if (t3 === a2.type && r3 === a2.insertText) return e3;
      }
      return super.select(e2, t2, n2);
    }
    toJSON() {
      let e2 = [];
      return this._trie.forEach((t2, n2) => e2.push([
        n2,
        t2
      ])), e2.sort((e3, t2) => -(e3[1].touch - t2[1].touch)).forEach((e3, t2) => e3[1].touch = t2), e2.slice(0, 200);
    }
    fromJSON(e2) {
      if (this._trie.clear(), e2.length > 0) {
        this._seq = e2[0][1].touch + 1;
        for (let [t2, n2] of e2) n2.type = typeof n2.type == `number` ? n2.type : oe.fromString(n2.type), this._trie.set(t2, n2);
      }
    }
  };
  let cT = (_ha = class {
    constructor(e2, t2) {
      this._storageService = e2, this._configService = t2, this._disposables = new C(), this._persistSoon = new hr(() => this._saveState(), 500), this._disposables.add(e2.onWillSaveState((e3) => {
        e3.reason === ui.SHUTDOWN && this._saveState();
      }));
    }
    dispose() {
      this._disposables.dispose(), this._persistSoon.dispose();
    }
    memorize(e2, t2, n2) {
      this._withStrategy(e2, t2).memorize(e2, t2, n2), this._persistSoon.schedule();
    }
    select(e2, t2, n2) {
      return this._withStrategy(e2, t2).select(e2, t2, n2);
    }
    _withStrategy(e2, t2) {
      var _a3;
      let n2 = this._configService.getValue(`editor.suggestSelection`, {
        overrideIdentifier: e2.getLanguageIdAtPosition(t2.lineNumber, t2.column),
        resource: e2.uri
      });
      if (((_a3 = this._strategy) == null ? void 0 : _a3.name) !== n2) {
        this._saveState();
        let e3 = rT._strategyCtors.get(n2) || aT;
        this._strategy = new e3();
        try {
          let e4 = this._configService.getValue(`editor.suggest.shareSuggestSelections`), t3 = e4 ? 0 : 1, r2 = this._storageService.get(`${rT._storagePrefix}/${n2}`, t3);
          r2 && this._strategy.fromJSON(JSON.parse(r2));
        } catch {
        }
      }
      return this._strategy;
    }
    _saveState() {
      if (this._strategy) {
        let e2 = this._configService.getValue(`editor.suggest.shareSuggestSelections`), t2 = e2 ? 0 : 1, n2 = JSON.stringify(this._strategy);
        this._storageService.store(`${rT._storagePrefix}/${this._strategy.name}`, n2, t2, 1);
      }
    }
  }, rT = _ha, _ha._strategyCtors = /* @__PURE__ */ new Map([
    [
      `recentlyUsedByPrefix`,
      sT
    ],
    [
      `recentlyUsed`,
      oT
    ],
    [
      `first`,
      aT
    ]
  ]), _ha._storagePrefix = `suggest/memories`, _ha);
  cT = rT = tT([
    nT(0, Vt),
    nT(1, D)
  ], cT);
  const lT = ca(`ISuggestMemories`);
  fl(lT, cT, 1);
  var uT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, dT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, fT;
  let pT = (_ia = class {
    constructor(e2, t2) {
      this._editor = e2, this._enabled = false, this._ckAtEnd = fT.AtEnd.bindTo(t2), this._configListener = this._editor.onDidChangeConfiguration((e3) => e3.hasChanged(124) && this._update()), this._update();
    }
    dispose() {
      var _a3;
      this._configListener.dispose(), (_a3 = this._selectionListener) == null ? void 0 : _a3.dispose(), this._ckAtEnd.reset();
    }
    _update() {
      let e2 = this._editor.getOption(124) === `on`;
      if (this._enabled !== e2) if (this._enabled = e2, this._enabled) {
        let e3 = () => {
          if (!this._editor.hasModel()) {
            this._ckAtEnd.set(false);
            return;
          }
          let e4 = this._editor.getModel(), t2 = this._editor.getSelection(), n2 = e4.getWordAtPosition(t2.getStartPosition());
          if (!n2) {
            this._ckAtEnd.set(false);
            return;
          }
          this._ckAtEnd.set(n2.endColumn === t2.getStartPosition().column);
        };
        this._selectionListener = this._editor.onDidChangeCursorSelection(e3), e3();
      } else this._selectionListener && (this._ckAtEnd.reset(), this._selectionListener.dispose(), this._selectionListener = void 0);
    }
  }, fT = _ia, _ia.AtEnd = new F(`atEndOfWord`, false), _ia);
  pT = fT = uT([
    dT(1, O)
  ], pT);
  var mT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, hT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, gT;
  let _T = (_ja = class {
    constructor(e2, t2) {
      this._editor = e2, this._index = 0, this._ckOtherSuggestions = gT.OtherSuggestions.bindTo(t2);
    }
    dispose() {
      this.reset();
    }
    reset() {
      var _a3;
      this._ckOtherSuggestions.reset(), (_a3 = this._listener) == null ? void 0 : _a3.dispose(), this._model = void 0, this._acceptNext = void 0, this._ignore = false;
    }
    set({ model: e2, index: t2 }, n2) {
      if (e2.items.length === 0) {
        this.reset();
        return;
      }
      let r2 = gT._moveIndex(true, e2, t2);
      if (r2 === t2) {
        this.reset();
        return;
      }
      this._acceptNext = n2, this._model = e2, this._index = t2, this._listener = this._editor.onDidChangeCursorPosition(() => {
        this._ignore || this.reset();
      }), this._ckOtherSuggestions.set(true);
    }
    static _moveIndex(e2, t2, n2) {
      let r2 = n2;
      for (let i2 = t2.items.length; i2 > 0 && (r2 = (r2 + t2.items.length + (e2 ? 1 : -1)) % t2.items.length, !(r2 === n2 || !t2.items[r2].completion.additionalTextEdits)); i2--) ;
      return r2;
    }
    next() {
      this._move(true);
    }
    prev() {
      this._move(false);
    }
    _move(e2) {
      if (this._model) try {
        this._ignore = true, this._index = gT._moveIndex(e2, this._model, this._index), this._acceptNext({
          index: this._index,
          item: this._model.items[this._index],
          model: this._model
        });
      } finally {
        this._ignore = false;
      }
    }
  }, gT = _ja, _ja.OtherSuggestions = new F(`hasOtherSuggestions`, false), _ja);
  _T = gT = mT([
    hT(1, O)
  ], _T);
  var vT = class {
    constructor(e2, t2, n2, r2) {
      this._disposables = new C(), this._disposables.add(n2.onDidSuggest((e3) => {
        e3.completionModel.items.length === 0 && this.reset();
      })), this._disposables.add(n2.onDidCancel((e3) => {
        this.reset();
      })), this._disposables.add(t2.onDidShow(() => this._onItem(t2.getFocusedItem()))), this._disposables.add(t2.onDidFocus(this._onItem, this)), this._disposables.add(t2.onDidHide(this.reset, this)), this._disposables.add(e2.onWillType((i2) => {
        if (this._active && !t2.isFrozen() && n2.state !== 0) {
          let t3 = i2.charCodeAt(i2.length - 1);
          this._active.acceptCharacters.has(t3) && e2.getOption(0) && r2(this._active.item);
        }
      }));
    }
    _onItem(e2) {
      if (!e2 || !$s(e2.item.completion.commitCharacters)) {
        this.reset();
        return;
      }
      if (this._active && this._active.item.item === e2.item) return;
      let t2 = new te();
      for (let n2 of e2.item.completion.commitCharacters) n2.length > 0 && t2.add(n2.charCodeAt(0));
      this._active = {
        acceptCharacters: t2,
        item: e2
      };
    }
    reset() {
      this._active = void 0;
    }
    dispose() {
      this._disposables.dispose();
    }
  }, yT = (_ka = class {
    async provideSelectionRanges(t2, n2) {
      let r2 = [];
      for (let i2 of n2) {
        let n3 = [];
        r2.push(n3);
        let a2 = /* @__PURE__ */ new Map();
        await new Promise((n4) => _ka._bracketsRightYield(n4, 0, t2, i2, a2)), await new Promise((r3) => _ka._bracketsLeftYield(r3, 0, t2, i2, a2, n3));
      }
      return r2;
    }
    static _bracketsRightYield(t2, n2, r2, i2, a2) {
      let o2 = /* @__PURE__ */ new Map(), s2 = Date.now();
      for (; ; ) {
        if (n2 >= _ka._maxRounds) {
          t2();
          break;
        }
        if (!i2) {
          t2();
          break;
        }
        let c2 = r2.bracketPairs.findNextBracket(i2);
        if (!c2) {
          t2();
          break;
        }
        let l2 = Date.now() - s2;
        if (l2 > _ka._maxDuration) {
          setTimeout(() => _ka._bracketsRightYield(t2, n2 + 1, r2, i2, a2));
          break;
        }
        if (c2.bracketInfo.isOpeningBracket) {
          let e2 = c2.bracketInfo.bracketText, t3 = o2.has(e2) ? o2.get(e2) : 0;
          o2.set(e2, t3 + 1);
        } else {
          let e2 = c2.bracketInfo.getOpeningBrackets()[0].bracketText, t3 = o2.has(e2) ? o2.get(e2) : 0;
          if (--t3, o2.set(e2, Math.max(0, t3)), t3 < 0) {
            let t4 = a2.get(e2);
            t4 || (t4 = new wn(), a2.set(e2, t4)), t4.push(c2.range);
          }
        }
        i2 = c2.range.getEndPosition();
      }
    }
    static _bracketsLeftYield(t2, n2, r2, i2, a2, o2) {
      let s2 = /* @__PURE__ */ new Map(), c2 = Date.now();
      for (; ; ) {
        if (n2 >= _ka._maxRounds && a2.size === 0) {
          t2();
          break;
        }
        if (!i2) {
          t2();
          break;
        }
        let l2 = r2.bracketPairs.findPrevBracket(i2);
        if (!l2) {
          t2();
          break;
        }
        let u2 = Date.now() - c2;
        if (u2 > _ka._maxDuration) {
          setTimeout(() => _ka._bracketsLeftYield(t2, n2 + 1, r2, i2, a2, o2));
          break;
        }
        if (l2.bracketInfo.isOpeningBracket) {
          let t3 = l2.bracketInfo.bracketText, n3 = s2.has(t3) ? s2.get(t3) : 0;
          if (--n3, s2.set(t3, Math.max(0, n3)), n3 < 0) {
            let n4 = a2.get(t3);
            if (n4) {
              let i3 = n4.shift();
              n4.size === 0 && a2.delete(t3);
              let s3 = P.fromPositions(l2.range.getEndPosition(), i3.getStartPosition()), c3 = P.fromPositions(l2.range.getStartPosition(), i3.getEndPosition());
              o2.push({
                range: s3
              }), o2.push({
                range: c3
              }), _ka._addBracketLeading(r2, c3, o2);
            }
          }
        } else {
          let e2 = l2.bracketInfo.getOpeningBrackets()[0].bracketText, t3 = s2.has(e2) ? s2.get(e2) : 0;
          s2.set(e2, t3 + 1);
        }
        i2 = l2.range.getStartPosition();
      }
    }
    static _addBracketLeading(e2, t2, n2) {
      if (t2.startLineNumber === t2.endLineNumber) return;
      let r2 = t2.startLineNumber, i2 = e2.getLineFirstNonWhitespaceColumn(r2);
      i2 !== 0 && i2 !== t2.startColumn && (n2.push({
        range: P.fromPositions(new N(r2, i2), t2.getEndPosition())
      }), n2.push({
        range: P.fromPositions(new N(r2, 1), t2.getEndPosition())
      }));
      let a2 = r2 - 1;
      if (a2 > 0) {
        let r3 = e2.getLineFirstNonWhitespaceColumn(a2);
        r3 === t2.startColumn && r3 !== e2.getLineLastNonWhitespaceColumn(a2) && (n2.push({
          range: P.fromPositions(new N(a2, r3), t2.getEndPosition())
        }), n2.push({
          range: P.fromPositions(new N(a2, 1), t2.getEndPosition())
        }));
      }
    }
  }, _ka._maxDuration = 30, _ka._maxRounds = 2, _ka), bT = (_la = class {
    static async create(t2, n2) {
      if (!n2.getOption(119).localityBonus || !n2.hasModel()) return _la.None;
      let r2 = n2.getModel(), i2 = n2.getPosition();
      if (!t2.canComputeWordRanges(r2.uri)) return _la.None;
      let [a2] = await new yT().provideSelectionRanges(r2, [
        i2
      ]);
      if (a2.length === 0) return _la.None;
      let o2 = await t2.computeWordRanges(r2.uri, a2[0].range);
      if (!o2) return _la.None;
      let s2 = r2.getWordUntilPosition(i2);
      return delete o2[s2.word], new class extends _la {
        distance(e2, t3) {
          if (!i2.equals(n2.getPosition())) return 0;
          if (t3.kind === 17) return 2 << 20;
          let r3 = typeof t3.label == `string` ? t3.label : t3.label.label, s3 = o2[r3];
          if (js(s3)) return 2 << 20;
          let c2 = zi(s3, P.fromPositions(e2), P.compareRangesUsingStarts), l2 = c2 >= 0 ? s3[c2] : s3[Math.max(0, ~c2 - 1)], u2 = a2.length;
          for (let e3 of a2) {
            if (!P.containsRange(e3.range, l2)) break;
            --u2;
          }
          return u2;
        }
      }();
    }
  }, _la.None = new class extends _la {
    distance() {
      return 0;
    }
  }(), _la), xT = class {
    constructor(e2, t2) {
      this.leadingLineContent = e2, this.characterCountDelta = t2;
    }
  }, ST = class e2 {
    constructor(t2, n2, r2, i2, a2, o2, s2 = Ye.default, c2 = void 0) {
      this.clipboardText = c2, this._snippetCompareFn = e2._compareCompletionItems, this._items = t2, this._column = n2, this._wordDistance = i2, this._options = a2, this._refilterKind = 1, this._lineContext = r2, this._fuzzyScoreOptions = s2, o2 === `top` ? this._snippetCompareFn = e2._compareCompletionItemsSnippetsUp : o2 === `bottom` && (this._snippetCompareFn = e2._compareCompletionItemsSnippetsDown);
    }
    get lineContext() {
      return this._lineContext;
    }
    set lineContext(e3) {
      (this._lineContext.leadingLineContent !== e3.leadingLineContent || this._lineContext.characterCountDelta !== e3.characterCountDelta) && (this._refilterKind = this._lineContext.characterCountDelta < e3.characterCountDelta && this._filteredItems ? 2 : 1, this._lineContext = e3);
    }
    get items() {
      return this._ensureCachedState(), this._filteredItems;
    }
    getItemsByProvider() {
      return this._ensureCachedState(), this._itemsByProvider;
    }
    getIncompleteProvider() {
      this._ensureCachedState();
      let e3 = /* @__PURE__ */ new Set();
      for (let [t2, n2] of this.getItemsByProvider()) n2.length > 0 && n2[0].container.incomplete && e3.add(t2);
      return e3;
    }
    get stats() {
      return this._ensureCachedState(), this._stats;
    }
    _ensureCachedState() {
      this._refilterKind !== 0 && this._createCachedState();
    }
    _createCachedState() {
      this._itemsByProvider = /* @__PURE__ */ new Map();
      let e3 = [], { leadingLineContent: t2, characterCountDelta: n2 } = this._lineContext, r2 = ``, i2 = ``, a2 = this._refilterKind === 1 ? this._items : this._filteredItems, o2 = [], s2 = !this._options.filterGraceful || a2.length > 2e3 ? Ao : jo;
      for (let c2 = 0; c2 < a2.length; c2++) {
        let l2 = a2[c2];
        if (l2.isInvalid) continue;
        let u2 = this._itemsByProvider.get(l2.provider);
        u2 ? u2.push(l2) : this._itemsByProvider.set(l2.provider, [
          l2
        ]);
        let d2 = l2.position.column - l2.editStart.column, f2 = d2 + n2 - (l2.position.column - this._column);
        if (r2.length !== f2 && (r2 = f2 === 0 ? `` : t2.slice(-f2), i2 = r2.toLowerCase()), l2.word = r2, f2 === 0) l2.score = Je.Default;
        else {
          let e4 = 0;
          for (; e4 < d2; ) {
            let t3 = r2.charCodeAt(e4);
            if (t3 === 32 || t3 === 9) e4 += 1;
            else break;
          }
          if (e4 >= f2) l2.score = Je.Default;
          else if (typeof l2.completion.filterText == `string`) {
            let t3 = s2(r2, i2, e4, l2.completion.filterText, l2.filterTextLow, 0, this._fuzzyScoreOptions);
            if (!t3) continue;
            Xi(l2.completion.filterText, l2.textLabel) === 0 ? l2.score = t3 : (l2.score = wi(r2, i2, e4, l2.textLabel, l2.labelLow, 0), l2.score[0] = t3[0]);
          } else {
            let t3 = s2(r2, i2, e4, l2.textLabel, l2.labelLow, 0, this._fuzzyScoreOptions);
            if (!t3) continue;
            l2.score = t3;
          }
        }
        l2.idx = c2, l2.distance = this._wordDistance.distance(l2.position, l2.completion), o2.push(l2), e3.push(l2.textLabel.length);
      }
      this._filteredItems = o2.sort(this._snippetCompareFn), this._refilterKind = 0, this._stats = {
        pLabelLen: e3.length ? tl(e3.length - 0.85, e3, (e4, t3) => e4 - t3) : 0
      };
    }
    static _compareCompletionItems(e3, t2) {
      return e3.score[0] > t2.score[0] ? -1 : e3.score[0] < t2.score[0] ? 1 : e3.distance < t2.distance ? -1 : e3.distance > t2.distance ? 1 : e3.idx < t2.idx ? -1 : e3.idx > t2.idx ? 1 : 0;
    }
    static _compareCompletionItemsSnippetsDown(t2, n2) {
      if (t2.completion.kind !== n2.completion.kind) {
        if (t2.completion.kind === 27) return 1;
        if (n2.completion.kind === 27) return -1;
      }
      return e2._compareCompletionItems(t2, n2);
    }
    static _compareCompletionItemsSnippetsUp(t2, n2) {
      if (t2.completion.kind !== n2.completion.kind) {
        if (t2.completion.kind === 27) return -1;
        if (n2.completion.kind === 27) return 1;
      }
      return e2._compareCompletionItems(t2, n2);
    }
  }, CT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, wT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, TT, ET = class {
    static shouldAutoTrigger(e2) {
      if (!e2.hasModel()) return false;
      let t2 = e2.getModel(), n2 = e2.getPosition();
      t2.tokenization.tokenizeIfCheap(n2.lineNumber);
      let r2 = t2.getWordAtPosition(n2);
      return !(!r2 || r2.endColumn !== n2.column && r2.startColumn + 1 !== n2.column || !isNaN(Number(r2.word)));
    }
    constructor(e2, t2, n2) {
      this.leadingLineContent = e2.getLineContent(t2.lineNumber).substr(0, t2.column - 1), this.leadingWord = e2.getWordUntilPosition(t2), this.lineNumber = t2.lineNumber, this.column = t2.column, this.triggerOptions = n2;
    }
  };
  function DT(e2, t2, n2) {
    if (!t2.getContextKeyValue(vC.inlineSuggestionVisible.key)) return true;
    let r2 = t2.getContextKeyValue(vC.suppressSuggestions.key);
    return r2 === void 0 ? !e2.getOption(62).suppressSuggestions : !r2;
  }
  function OT(e2, t2, n2) {
    if (!t2.getContextKeyValue(`inlineSuggestionVisible`)) return true;
    let r2 = t2.getContextKeyValue(vC.suppressSuggestions.key);
    return r2 === void 0 ? !e2.getOption(62).suppressSuggestions : !r2;
  }
  let kT = TT = class {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      this._editor = e2, this._editorWorkerService = t2, this._clipboardService = n2, this._telemetryService = r2, this._logService = i2, this._contextKeyService = a2, this._configurationService = o2, this._languageFeaturesService = s2, this._envService = c2, this._toDispose = new C(), this._triggerCharacterListener = new C(), this._triggerQuickSuggest = new Jr(), this._triggerState = void 0, this._completionDisposables = new C(), this._onDidCancel = new E(), this._onDidTrigger = new E(), this._onDidSuggest = new E(), this.onDidCancel = this._onDidCancel.event, this.onDidTrigger = this._onDidTrigger.event, this.onDidSuggest = this._onDidSuggest.event, this._telemetryGate = 0, this._currentSelection = this._editor.getSelection() || new I(1, 1, 1, 1), this._toDispose.add(this._editor.onDidChangeModel(() => {
        this._updateTriggerCharacters(), this.cancel();
      })), this._toDispose.add(this._editor.onDidChangeModelLanguage(() => {
        this._updateTriggerCharacters(), this.cancel();
      })), this._toDispose.add(this._editor.onDidChangeConfiguration(() => {
        this._updateTriggerCharacters();
      })), this._toDispose.add(this._languageFeaturesService.completionProvider.onDidChange(() => {
        this._updateTriggerCharacters(), this._updateActiveSuggestSession();
      }));
      let l2 = false;
      this._toDispose.add(this._editor.onDidCompositionStart(() => {
        l2 = true;
      })), this._toDispose.add(this._editor.onDidCompositionEnd(() => {
        l2 = false, this._onCompositionEnd();
      })), this._toDispose.add(this._editor.onDidChangeCursorSelection((e3) => {
        l2 || this._onCursorChange(e3);
      })), this._toDispose.add(this._editor.onDidChangeModelContent(() => {
        !l2 && this._triggerState !== void 0 && this._refilterCompletionItems();
      })), this._updateTriggerCharacters();
    }
    dispose() {
      Ra(this._triggerCharacterListener), Ra([
        this._onDidCancel,
        this._onDidSuggest,
        this._onDidTrigger,
        this._triggerQuickSuggest
      ]), this._toDispose.dispose(), this._completionDisposables.dispose(), this.cancel();
    }
    _updateTriggerCharacters() {
      if (this._triggerCharacterListener.clear(), this._editor.getOption(92) || !this._editor.hasModel() || !this._editor.getOption(122)) return;
      let e2 = /* @__PURE__ */ new Map();
      for (let t3 of this._languageFeaturesService.completionProvider.all(this._editor.getModel())) for (let n2 of t3.triggerCharacters || []) {
        let r2 = e2.get(n2);
        if (!r2) {
          r2 = /* @__PURE__ */ new Set();
          let t4 = pw();
          t4 && r2.add(t4), e2.set(n2, r2);
        }
        r2.add(t3);
      }
      let t2 = (t3) => {
        var _a3;
        if (!OT(this._editor, this._contextKeyService, this._configurationService) || ET.shouldAutoTrigger(this._editor)) return;
        if (!t3) {
          let e3 = this._editor.getPosition(), n3 = this._editor.getModel();
          t3 = n3.getLineContent(e3.lineNumber).substr(0, e3.column - 1);
        }
        let n2 = ``;
        Gs(t3.charCodeAt(t3.length - 1)) ? Ls(t3.charCodeAt(t3.length - 2)) && (n2 = t3.substr(t3.length - 2)) : n2 = t3.charAt(t3.length - 1);
        let r2 = e2.get(n2);
        if (r2) {
          let e3 = /* @__PURE__ */ new Map();
          if (this._completionModel) for (let [t4, n3] of this._completionModel.getItemsByProvider()) r2.has(t4) || e3.set(t4, n3);
          this.trigger({
            auto: true,
            triggerKind: 1,
            triggerCharacter: n2,
            retrigger: !!this._completionModel,
            clipboardText: (_a3 = this._completionModel) == null ? void 0 : _a3.clipboardText,
            completionOptions: {
              providerFilter: r2,
              providerItemsToReuse: e3
            }
          });
        }
      };
      this._triggerCharacterListener.add(this._editor.onDidType(t2)), this._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => t2()));
    }
    get state() {
      return this._triggerState ? this._triggerState.auto ? 2 : 1 : 0;
    }
    cancel(e2 = false) {
      var _a3;
      this._triggerState !== void 0 && (this._triggerQuickSuggest.cancel(), (_a3 = this._requestToken) == null ? void 0 : _a3.cancel(), this._requestToken = void 0, this._triggerState = void 0, this._completionModel = void 0, this._context = void 0, this._onDidCancel.fire({
        retrigger: e2
      }));
    }
    clear() {
      this._completionDisposables.clear();
    }
    _updateActiveSuggestSession() {
      this._triggerState !== void 0 && (!this._editor.hasModel() || !this._languageFeaturesService.completionProvider.has(this._editor.getModel()) ? this.cancel() : this.trigger({
        auto: this._triggerState.auto,
        retrigger: true
      }));
    }
    _onCursorChange(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._currentSelection;
      if (this._currentSelection = this._editor.getSelection(), !e2.selection.isEmpty() || e2.reason !== 0 && e2.reason !== 3 || e2.source !== `keyboard` && e2.source !== `deleteLeft`) {
        this.cancel();
        return;
      }
      this._triggerState === void 0 && e2.reason === 0 ? (t2.containsRange(this._currentSelection) || t2.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) && this._doTriggerQuickSuggest() : this._triggerState !== void 0 && e2.reason === 3 && this._refilterCompletionItems();
    }
    _onCompositionEnd() {
      this._triggerState === void 0 ? this._doTriggerQuickSuggest() : this._refilterCompletionItems();
    }
    _doTriggerQuickSuggest() {
      var _a3;
      Sw.isAllOff(this._editor.getOption(90)) || this._editor.getOption(119).snippetsPreventQuickSuggestions && ((_a3 = Kw.get(this._editor)) == null ? void 0 : _a3.isInSnippet()) || (this.cancel(), this._triggerQuickSuggest.cancelAndSet(() => {
        if (this._triggerState !== void 0 || !ET.shouldAutoTrigger(this._editor) || !this._editor.hasModel() || !this._editor.hasWidgetFocus()) return;
        let e2 = this._editor.getModel(), t2 = this._editor.getPosition(), n2 = this._editor.getOption(90);
        if (!Sw.isAllOff(n2)) {
          if (!Sw.isAllOn(n2)) {
            e2.tokenization.tokenizeIfCheap(t2.lineNumber);
            let r2 = e2.tokenization.getLineTokens(t2.lineNumber), i2 = r2.getStandardTokenType(r2.findTokenIndexAtOffset(Math.max(t2.column - 1 - 1, 0)));
            if (Sw.valueFor(n2, i2) !== `on`) return;
          }
          DT(this._editor, this._contextKeyService, this._configurationService) && this._languageFeaturesService.completionProvider.has(e2) && this.trigger({
            auto: true
          });
        }
      }, this._editor.getOption(91)));
    }
    _refilterCompletionItems() {
      V(this._editor.hasModel()), V(this._triggerState !== void 0);
      let e2 = this._editor.getModel(), t2 = this._editor.getPosition(), n2 = new ET(e2, t2, {
        ...this._triggerState,
        refilter: true
      });
      this._onNewContext(n2);
    }
    trigger(e2) {
      var _a3, _b3, _c3;
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getModel(), n2 = new ET(t2, this._editor.getPosition(), e2);
      this.cancel(e2.retrigger), this._triggerState = e2, this._onDidTrigger.fire({
        auto: e2.auto,
        shy: e2.shy ?? false,
        position: this._editor.getPosition()
      }), this._context = n2;
      let r2 = {
        triggerKind: e2.triggerKind ?? 0
      };
      e2.triggerCharacter && (r2 = {
        triggerKind: 1,
        triggerCharacter: e2.triggerCharacter
      }), this._requestToken = new g();
      let i2 = this._editor.getOption(113), a2 = 1;
      switch (i2) {
        case `top`:
          a2 = 0;
          break;
        case `bottom`:
          a2 = 2;
          break;
      }
      let { itemKind: o2, showDeprecated: s2 } = TT.createSuggestFilter(this._editor), c2 = new dw(a2, ((_a3 = e2.completionOptions) == null ? void 0 : _a3.kindFilter) ?? o2, (_b3 = e2.completionOptions) == null ? void 0 : _b3.providerFilter, (_c3 = e2.completionOptions) == null ? void 0 : _c3.providerItemsToReuse, s2), l2 = bT.create(this._editorWorkerService, this._editor), u2 = hw(this._languageFeaturesService.completionProvider, t2, this._editor.getPosition(), c2, r2, this._requestToken.token);
      Promise.all([
        u2,
        l2
      ]).then(async ([t3, n3]) => {
        var _a4;
        if ((_a4 = this._requestToken) == null ? void 0 : _a4.dispose(), !this._editor.hasModel()) return;
        let r3 = e2 == null ? void 0 : e2.clipboardText;
        if (!r3 && t3.needsClipboard && (r3 = await this._clipboardService.readText()), this._triggerState === void 0) return;
        let i3 = this._editor.getModel(), a3 = new ET(i3, this._editor.getPosition(), e2), o3 = {
          ...Ye.default,
          firstMatchCanBeWeak: !this._editor.getOption(119).matchOnWordStartOnly
        };
        if (this._completionModel = new ST(t3.items, this._context.column, {
          leadingLineContent: a3.leadingLineContent,
          characterCountDelta: a3.column - this._context.column
        }, n3, this._editor.getOption(119), this._editor.getOption(113), o3, r3), this._completionDisposables.add(t3.disposable), this._onNewContext(a3), this._reportDurationsTelemetry(t3.durations), !this._envService.isBuilt || this._envService.isExtensionDevelopment) for (let e3 of t3.items) e3.isInvalid && this._logService.warn(`[suggest] did IGNORE invalid completion item from ${e3.provider._debugDisplayName}`, e3.completion);
      }).catch(G);
    }
    _reportDurationsTelemetry(e2) {
      this._telemetryGate++ % 230 == 0 && setTimeout(() => {
        this._telemetryService.publicLog2(`suggest.durations.json`, {
          data: JSON.stringify(e2)
        }), this._logService.debug(`suggest.durations.json`, e2);
      });
    }
    static createSuggestFilter(e2) {
      let t2 = /* @__PURE__ */ new Set(), n2 = e2.getOption(113);
      n2 === `none` && t2.add(27);
      let r2 = e2.getOption(119);
      return r2.showMethods || t2.add(0), r2.showFunctions || t2.add(1), r2.showConstructors || t2.add(2), r2.showFields || t2.add(3), r2.showVariables || t2.add(4), r2.showClasses || t2.add(5), r2.showStructs || t2.add(6), r2.showInterfaces || t2.add(7), r2.showModules || t2.add(8), r2.showProperties || t2.add(9), r2.showEvents || t2.add(10), r2.showOperators || t2.add(11), r2.showUnits || t2.add(12), r2.showValues || t2.add(13), r2.showConstants || t2.add(14), r2.showEnums || t2.add(15), r2.showEnumMembers || t2.add(16), r2.showKeywords || t2.add(17), r2.showWords || t2.add(18), r2.showColors || t2.add(19), r2.showFiles || t2.add(20), r2.showReferences || t2.add(21), r2.showColors || t2.add(22), r2.showFolders || t2.add(23), r2.showTypeParameters || t2.add(24), r2.showSnippets || t2.add(27), r2.showUsers || t2.add(25), r2.showIssues || t2.add(26), {
        itemKind: t2,
        showDeprecated: r2.showDeprecated
      };
    }
    _onNewContext(e2) {
      if (this._context) {
        if (e2.lineNumber !== this._context.lineNumber) {
          this.cancel();
          return;
        }
        if (Ko(e2.leadingLineContent) !== Ko(this._context.leadingLineContent)) {
          this.cancel();
          return;
        }
        if (e2.column < this._context.column) {
          e2.leadingWord.word ? this.trigger({
            auto: this._context.triggerOptions.auto,
            retrigger: true
          }) : this.cancel();
          return;
        }
        if (this._completionModel) {
          if (e2.leadingWord.word.length !== 0 && e2.leadingWord.startColumn > this._context.leadingWord.startColumn) {
            let e3 = ET.shouldAutoTrigger(this._editor);
            if (e3 && this._context) {
              let e4 = this._completionModel.getItemsByProvider();
              this.trigger({
                auto: this._context.triggerOptions.auto,
                retrigger: true,
                clipboardText: this._completionModel.clipboardText,
                completionOptions: {
                  providerItemsToReuse: e4
                }
              });
            }
            return;
          }
          if (e2.column > this._context.column && this._completionModel.getIncompleteProvider().size > 0 && e2.leadingWord.word.length !== 0) {
            let e3 = /* @__PURE__ */ new Map(), t2 = /* @__PURE__ */ new Set();
            for (let [n2, r2] of this._completionModel.getItemsByProvider()) r2.length > 0 && r2[0].container.incomplete ? t2.add(n2) : e3.set(n2, r2);
            this.trigger({
              auto: this._context.triggerOptions.auto,
              triggerKind: 2,
              retrigger: true,
              clipboardText: this._completionModel.clipboardText,
              completionOptions: {
                providerFilter: t2,
                providerItemsToReuse: e3
              }
            });
          } else {
            let t2 = this._completionModel.lineContext, n2 = false;
            if (this._completionModel.lineContext = {
              leadingLineContent: e2.leadingLineContent,
              characterCountDelta: e2.column - this._context.column
            }, this._completionModel.items.length === 0) {
              let r2 = ET.shouldAutoTrigger(this._editor);
              if (!this._context) {
                this.cancel();
                return;
              }
              if (r2 && this._context.leadingWord.endColumn < e2.leadingWord.startColumn) {
                this.trigger({
                  auto: this._context.triggerOptions.auto,
                  retrigger: true
                });
                return;
              }
              if (this._context.triggerOptions.auto) {
                this.cancel();
                return;
              } else if (this._completionModel.lineContext = t2, n2 = this._completionModel.items.length > 0, n2 && e2.leadingWord.word.length === 0) {
                this.cancel();
                return;
              }
            }
            this._onDidSuggest.fire({
              completionModel: this._completionModel,
              triggerOptions: e2.triggerOptions,
              isFrozen: n2
            });
          }
        }
      }
    }
  };
  kT = TT = CT([
    wT(1, bt),
    wT(2, ft),
    wT(3, Ht),
    wT(4, kt),
    wT(5, O),
    wT(6, D),
    wT(7, A),
    wT(8, xt)
  ], kT);
  var AT = (_ma = class {
    constructor(t2, n2) {
      this._disposables = new C(), this._lastOvertyped = [], this._locked = false, this._disposables.add(t2.onWillType(() => {
        if (this._locked || !t2.hasModel()) return;
        let n3 = t2.getSelections(), r2 = n3.length, i2 = false;
        for (let e2 = 0; e2 < r2; e2++) if (!n3[e2].isEmpty()) {
          i2 = true;
          break;
        }
        if (!i2) {
          this._lastOvertyped.length !== 0 && (this._lastOvertyped.length = 0);
          return;
        }
        this._lastOvertyped = [];
        let a2 = t2.getModel();
        for (let t3 = 0; t3 < r2; t3++) {
          let r3 = n3[t3];
          if (a2.getValueLengthInRange(r3) > _ma._maxSelectionLength) return;
          this._lastOvertyped[t3] = {
            value: a2.getValueInRange(r3),
            multiline: r3.startLineNumber !== r3.endLineNumber
          };
        }
      })), this._disposables.add(n2.onDidTrigger((e2) => {
        this._locked = true;
      })), this._disposables.add(n2.onDidCancel((e2) => {
        this._locked = false;
      }));
    }
    getLastOvertypedInfo(e2) {
      if (e2 >= 0 && e2 < this._lastOvertyped.length) return this._lastOvertyped[e2];
    }
    dispose() {
      this._disposables.dispose();
    }
  }, _ma._maxSelectionLength = 51200, _ma), jT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, MT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let NT = class {
    constructor(e2, t2, n2, i2, a2) {
      this._menuId = t2, this._menuService = i2, this._contextKeyService = a2, this._menuDisposables = new C(), this.element = B(e2, r(`.suggest-status-bar`));
      let o2 = (e3) => e3 instanceof Mn ? n2.createInstance(qr, e3, {
        useComma: true
      }) : void 0;
      this._leftActions = new s(this.element, {
        actionViewItemProvider: o2
      }), this._rightActions = new s(this.element, {
        actionViewItemProvider: o2
      }), this._leftActions.domNode.classList.add(`left`), this._rightActions.domNode.classList.add(`right`);
    }
    dispose() {
      this._menuDisposables.dispose(), this._leftActions.dispose(), this._rightActions.dispose(), this.element.remove();
    }
    show() {
      let e2 = this._menuService.createMenu(this._menuId, this._contextKeyService), t2 = () => {
        let t3 = [], n2 = [];
        for (let [r2, i2] of e2.getActions()) r2 === `left` ? t3.push(...i2) : n2.push(...i2);
        this._leftActions.clear(), this._leftActions.push(t3), this._rightActions.clear(), this._rightActions.push(n2);
      };
      this._menuDisposables.add(e2.onDidChange(() => t2())), this._menuDisposables.add(e2);
    }
    hide() {
      this._menuDisposables.clear();
    }
  };
  NT = jT([
    MT(2, k),
    MT(3, Nt),
    MT(4, O)
  ], NT);
  var PT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, FT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  function IT(e2) {
    return !!e2 && !!(e2.completion.documentation || e2.completion.detail && e2.completion.detail !== e2.completion.label);
  }
  let LT = class {
    constructor(e2, t2) {
      this._editor = e2, this._onDidClose = new E(), this.onDidClose = this._onDidClose.event, this._onDidChangeContents = new E(), this.onDidChangeContents = this._onDidChangeContents.event, this._disposables = new C(), this._renderDisposeable = new C(), this._borderWidth = 1, this._size = new x(330, 0), this.domNode = r(`.suggest-details`), this.domNode.classList.add(`no-docs`), this._markdownRenderer = t2.createInstance(En, {
        editor: e2
      }), this._body = r(`.body`), this._scrollbar = new Te(this._body, {
        alwaysConsumeMouseWheel: true
      }), B(this.domNode, this._scrollbar.getDomNode()), this._disposables.add(this._scrollbar), this._header = B(this._body, r(`.header`)), this._close = B(this._header, r(`span` + L.asCSSSelector(_.close))), this._close.title = U(`details.close`, `Close`), this._type = B(this._header, r(`p.type`)), this._docs = B(this._body, r(`p.docs`)), this._configureFont(), this._disposables.add(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(50) && this._configureFont();
      }));
    }
    dispose() {
      this._disposables.dispose(), this._renderDisposeable.dispose();
    }
    _configureFont() {
      let e2 = this._editor.getOptions(), t2 = e2.get(50), n2 = t2.getMassagedFontFamily(), r2 = e2.get(120) || t2.fontSize, i2 = e2.get(121) || t2.lineHeight, a2 = t2.fontWeight, o2 = `${r2}px`, s2 = `${i2}px`;
      this.domNode.style.fontSize = o2, this.domNode.style.lineHeight = `${i2 / r2}`, this.domNode.style.fontWeight = a2, this.domNode.style.fontFeatureSettings = t2.fontFeatureSettings, this._type.style.fontFamily = n2, this._close.style.height = s2, this._close.style.width = s2;
    }
    getLayoutInfo() {
      let e2 = this._editor.getOption(121) || this._editor.getOption(50).lineHeight, t2 = this._borderWidth, n2 = t2 * 2;
      return {
        lineHeight: e2,
        borderWidth: t2,
        borderHeight: n2,
        verticalPadding: 22,
        horizontalPadding: 14
      };
    }
    renderLoading() {
      this._type.textContent = U(`loading`, `Loading...`), this._docs.textContent = ``, this.domNode.classList.remove(`no-docs`, `no-type`), this.layout(this.size.width, this.getLayoutInfo().lineHeight * 2), this._onDidChangeContents.fire(this);
    }
    renderItem(e2, t2) {
      var _a3;
      this._renderDisposeable.clear();
      let { detail: n2, documentation: r2 } = e2.completion;
      if (t2) {
        let t3 = ``;
        t3 += `score: ${e2.score[0]}
`, t3 += `prefix: ${e2.word ?? `(no prefix)`}
`, t3 += `word: ${e2.completion.filterText ? e2.completion.filterText + ` (filterText)` : e2.textLabel}
`, t3 += `distance: ${e2.distance} (localityBonus-setting)
`, t3 += `index: ${e2.idx}, based on ${e2.completion.sortText && `sortText: "${e2.completion.sortText}"` || `label`}
`, t3 += `commit_chars: ${(_a3 = e2.completion.commitCharacters) == null ? void 0 : _a3.join(``)}
`, r2 = new Dn().appendCodeblock(`empty`, t3), n2 = `Provider: ${e2.provider._debugDisplayName}`;
      }
      if (!t2 && !IT(e2)) {
        this.clearContents();
        return;
      }
      if (this.domNode.classList.remove(`no-docs`, `no-type`), n2) {
        let e3 = n2.length > 1e5 ? `${n2.substr(0, 1e5)}\u2026` : n2;
        this._type.textContent = e3, this._type.title = e3, kl(this._type), this._type.classList.toggle(`auto-wrap`, !/\r?\n^\s+/gim.test(e3));
      } else Ui(this._type), this._type.title = ``, ls(this._type), this.domNode.classList.add(`no-type`);
      if (Ui(this._docs), typeof r2 == `string`) this._docs.classList.remove(`markdown-docs`), this._docs.textContent = r2;
      else if (r2) {
        this._docs.classList.add(`markdown-docs`), Ui(this._docs);
        let e3 = this._markdownRenderer.render(r2);
        this._docs.appendChild(e3.element), this._renderDisposeable.add(e3), this._renderDisposeable.add(this._markdownRenderer.onDidRenderAsync(() => {
          this.layout(this._size.width, this._type.clientHeight + this._docs.clientHeight), this._onDidChangeContents.fire(this);
        }));
      }
      this.domNode.style.userSelect = `text`, this.domNode.tabIndex = -1, this._close.onmousedown = (e3) => {
        e3.preventDefault(), e3.stopPropagation();
      }, this._close.onclick = (e3) => {
        e3.preventDefault(), e3.stopPropagation(), this._onDidClose.fire();
      }, this._body.scrollTop = 0, this.layout(this._size.width, this._type.clientHeight + this._docs.clientHeight), this._onDidChangeContents.fire(this);
    }
    clearContents() {
      this.domNode.classList.add(`no-docs`), this._type.textContent = ``, this._docs.textContent = ``;
    }
    get isEmpty() {
      return this.domNode.classList.contains(`no-docs`);
    }
    get size() {
      return this._size;
    }
    layout(e2, t2) {
      let n2 = new x(e2, t2);
      x.equals(n2, this._size) || (this._size = n2, Al(this.domNode, e2, t2)), this._scrollbar.scanDomNode();
    }
    scrollDown(e2 = 8) {
      this._body.scrollTop += e2;
    }
    scrollUp(e2 = 8) {
      this._body.scrollTop -= e2;
    }
    scrollTop() {
      this._body.scrollTop = 0;
    }
    scrollBottom() {
      this._body.scrollTop = this._body.scrollHeight;
    }
    pageDown() {
      this.scrollDown(80);
    }
    pageUp() {
      this.scrollUp(80);
    }
    set borderWidth(e2) {
      this._borderWidth = e2;
    }
    get borderWidth() {
      return this._borderWidth;
    }
  };
  LT = PT([
    FT(1, k)
  ], LT);
  var RT = class {
    constructor(e2, t2) {
      this.widget = e2, this._editor = t2, this.allowEditorOverflow = true, this._disposables = new C(), this._added = false, this._preferAlignAtTop = true, this._resizable = new mg(), this._resizable.domNode.classList.add(`suggest-details-container`), this._resizable.domNode.appendChild(e2.domNode), this._resizable.enableSashes(false, true, true, false);
      let n2, r2, i2 = 0, a2 = 0;
      this._disposables.add(this._resizable.onDidWillResize(() => {
        n2 = this._topLeft, r2 = this._resizable.size;
      })), this._disposables.add(this._resizable.onDidResize((e3) => {
        if (n2 && r2) {
          this.widget.layout(e3.dimension.width, e3.dimension.height);
          let t3 = false;
          e3.west && (a2 = r2.width - e3.dimension.width, t3 = true), e3.north && (i2 = r2.height - e3.dimension.height, t3 = true), t3 && this._applyTopLeft({
            top: n2.top + i2,
            left: n2.left + a2
          });
        }
        e3.done && (n2 = void 0, r2 = void 0, i2 = 0, a2 = 0, this._userSize = e3.dimension);
      })), this._disposables.add(this.widget.onDidChangeContents(() => {
        this._anchorBox && this._placeAtAnchor(this._anchorBox, this._userSize ?? this.widget.size, this._preferAlignAtTop);
      }));
    }
    dispose() {
      this._resizable.dispose(), this._disposables.dispose(), this.hide();
    }
    getId() {
      return `suggest.details`;
    }
    getDomNode() {
      return this._resizable.domNode;
    }
    getPosition() {
      return this._topLeft ? {
        preference: this._topLeft
      } : null;
    }
    show() {
      this._added || (this._editor.addOverlayWidget(this), this._added = true);
    }
    hide(e2 = false) {
      this._resizable.clearSashHoverState(), this._added && (this._editor.removeOverlayWidget(this), this._added = false, this._anchorBox = void 0, this._topLeft = void 0), e2 && (this._userSize = void 0, this.widget.clearContents());
    }
    placeAtAnchor(e2, t2) {
      let n2 = e2.getBoundingClientRect();
      this._anchorBox = n2, this._preferAlignAtTop = t2, this._placeAtAnchor(this._anchorBox, this._userSize ?? this.widget.size, t2);
    }
    _placeAtAnchor(e2, t2, n2) {
      let r2 = Io(this.getDomNode().ownerDocument.body), i2 = this.widget.getLayoutInfo(), a2 = new x(220, 2 * i2.lineHeight), o2 = e2.top, s2 = function() {
        let n3 = r2.width - (e2.left + e2.width + i2.borderWidth + i2.horizontalPadding), s3 = -i2.borderWidth + e2.left + e2.width, c3 = new x(n3, r2.height - e2.top - i2.borderHeight - i2.verticalPadding), l3 = c3.with(void 0, e2.top + e2.height - i2.borderHeight - i2.verticalPadding);
        return {
          top: o2,
          left: s3,
          fit: n3 - t2.width,
          maxSizeTop: c3,
          maxSizeBottom: l3,
          minSize: a2.with(Math.min(n3, a2.width))
        };
      }(), c2 = function() {
        let n3 = e2.left - i2.borderWidth - i2.horizontalPadding, s3 = Math.max(i2.horizontalPadding, e2.left - t2.width - i2.borderWidth), c3 = new x(n3, r2.height - e2.top - i2.borderHeight - i2.verticalPadding), l3 = c3.with(void 0, e2.top + e2.height - i2.borderHeight - i2.verticalPadding);
        return {
          top: o2,
          left: s3,
          fit: n3 - t2.width,
          maxSizeTop: c3,
          maxSizeBottom: l3,
          minSize: a2.with(Math.min(n3, a2.width))
        };
      }(), l2 = function() {
        let n3 = e2.left, o3 = -i2.borderWidth + e2.top + e2.height, s3 = new x(e2.width - i2.borderHeight, r2.height - e2.top - e2.height - i2.verticalPadding);
        return {
          top: o3,
          left: n3,
          fit: s3.height - t2.height,
          maxSizeBottom: s3,
          maxSizeTop: s3,
          minSize: a2.with(s3.width)
        };
      }(), u2 = [
        s2,
        c2,
        l2
      ], d2 = u2.find((e3) => e3.fit >= 0) ?? u2.sort((e3, t3) => t3.fit - e3.fit)[0], f2 = e2.top + e2.height - i2.borderHeight, p2, m2 = t2.height, h2 = Math.max(d2.maxSizeTop.height, d2.maxSizeBottom.height);
      m2 > h2 && (m2 = h2);
      let g2;
      n2 ? m2 <= d2.maxSizeTop.height ? (p2 = true, g2 = d2.maxSizeTop) : (p2 = false, g2 = d2.maxSizeBottom) : m2 <= d2.maxSizeBottom.height ? (p2 = false, g2 = d2.maxSizeBottom) : (p2 = true, g2 = d2.maxSizeTop);
      let { top: ee2, left: te2 } = d2;
      !p2 && m2 > e2.height && (ee2 = f2 - m2);
      let ne2 = this._editor.getDomNode();
      if (ne2) {
        let e3 = ne2.getBoundingClientRect();
        ee2 -= e3.top, te2 -= e3.left;
      }
      this._applyTopLeft({
        left: te2,
        top: ee2
      }), this._resizable.enableSashes(!p2, d2 === s2, p2, d2 !== s2), this._resizable.minSize = d2.minSize, this._resizable.maxSize = g2, this._resizable.layout(m2, Math.min(g2.width, t2.width)), this.widget.layout(this._resizable.size.width, this._resizable.size.height);
    }
    _applyTopLeft(e2) {
      this._topLeft = e2, this._editor.layoutOverlayWidget(this);
    }
  }, zT;
  (function(e2) {
    e2[e2.FILE = 0] = `FILE`, e2[e2.FOLDER = 1] = `FOLDER`, e2[e2.ROOT_FOLDER = 2] = `ROOT_FOLDER`;
  })(zT || (zT = {}));
  const BT = /(?:\/|^)(?:([^\/]+)\/)?([^\/]+)$/;
  function VT(e2, t2, n2, r2, i2) {
    if (L.isThemeIcon(i2)) return [
      `codicon-${i2.id}`,
      `predefined-file-icon`
    ];
    if (R.isUri(i2)) return [];
    let a2 = r2 === zT.ROOT_FOLDER ? [
      `rootfolder-icon`
    ] : r2 === zT.FOLDER ? [
      `folder-icon`
    ] : [
      `file-icon`
    ];
    if (n2) {
      let i3;
      if (n2.scheme === _r.data) {
        let e3 = ge.parseMetaData(n2);
        i3 = e3.get(ge.META_DATA_LABEL);
      } else {
        let e3 = n2.path.match(BT);
        e3 ? (i3 = UT(e3[2].toLowerCase()), e3[1] && a2.push(`${UT(e3[1].toLowerCase())}-name-dir-icon`)) : i3 = UT(n2.authority.toLowerCase());
      }
      if (r2 === zT.ROOT_FOLDER) a2.push(`${i3}-root-name-folder-icon`);
      else if (r2 === zT.FOLDER) a2.push(`${i3}-name-folder-icon`);
      else {
        if (i3) {
          if (a2.push(`${i3}-name-file-icon`), a2.push(`name-file-icon`), i3.length <= 255) {
            let e3 = i3.split(`.`);
            for (let t3 = 1; t3 < e3.length; t3++) a2.push(`${e3.slice(t3).join(`.`)}-ext-file-icon`);
          }
          a2.push(`ext-file-icon`);
        }
        let r3 = HT(e2, t2, n2);
        r3 && a2.push(`${UT(r3)}-lang-file-icon`);
      }
    }
    return a2;
  }
  function HT(e2, t2, n2) {
    if (!n2) return null;
    let r2 = null;
    if (n2.scheme === _r.data) {
      let e3 = ge.parseMetaData(n2), i2 = e3.get(ge.META_DATA_MIME);
      i2 && (r2 = t2.getLanguageIdByMimeType(i2));
    } else {
      let t3 = e2.getModel(n2);
      t3 && (r2 = t3.getLanguageId());
    }
    return r2 && r2 !== Jn ? r2 : t2.guessLanguageIdByFilepathOrFirstLine(n2);
  }
  function UT(e2) {
    return e2.replace(/[\s]/g, `/`);
  }
  var WT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, GT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  function KT(e2) {
    return `suggest-aria-id:${e2}`;
  }
  const qT = cl(`suggest-more-info`, _.chevronRight, U(`suggestMoreInfoIcon`, `Icon for more information in the suggest widget.`)), JT = new (_na = class {
    extract(t2, n2) {
      if (t2.textLabel.match(_na._regexStrict)) return n2[0] = t2.textLabel, true;
      if (t2.completion.detail && t2.completion.detail.match(_na._regexStrict)) return n2[0] = t2.completion.detail, true;
      if (t2.completion.documentation) {
        let r2 = typeof t2.completion.documentation == `string` ? t2.completion.documentation : t2.completion.documentation.value, i2 = _na._regexRelaxed.exec(r2);
        if (i2 && (i2.index === 0 || i2.index + i2[0].length === r2.length)) return n2[0] = i2[0], true;
      }
      return false;
    }
  }, _na._regexRelaxed = /(#([\da-fA-F]{3}){1,2}|(rgb|hsl)a\(\s*(\d{1,3}%?\s*,\s*){3}(1|0?\.\d+)\)|(rgb|hsl)\(\s*\d{1,3}%?(\s*,\s*\d{1,3}%?){2}\s*\))/, _na._regexStrict = RegExp(`^${_na._regexRelaxed.source}$`, `i`), _na)();
  let YT = class {
    constructor(e2, t2, n2, r2) {
      this._editor = e2, this._modelService = t2, this._languageService = n2, this._themeService = r2, this._onDidToggleDetails = new E(), this.onDidToggleDetails = this._onDidToggleDetails.event, this.templateId = `suggestion`;
    }
    dispose() {
      this._onDidToggleDetails.dispose();
    }
    renderTemplate(e2) {
      let t2 = new C(), n2 = e2;
      n2.classList.add(`show-file-icons`);
      let i2 = B(e2, r(`.icon`)), a2 = B(i2, r(`span.colorspan`)), o2 = B(e2, r(`.contents`)), s2 = B(o2, r(`.main`)), c2 = B(s2, r(`.icon-label.codicon`)), l2 = B(s2, r(`span.left`)), u2 = B(s2, r(`span.right`)), d2 = new Jt(l2, {
        supportHighlights: true,
        supportIcons: true
      });
      t2.add(d2);
      let f2 = B(l2, r(`span.signature-label`)), p2 = B(l2, r(`span.qualifier-label`)), m2 = B(u2, r(`span.details-label`)), h2 = B(u2, r(`span.readMore` + L.asCSSSelector(qT)));
      h2.title = U(`readMore`, `Read More`);
      let g2 = () => {
        let e3 = this._editor.getOptions(), t3 = e3.get(50), r2 = t3.getMassagedFontFamily(), a3 = t3.fontFeatureSettings, o3 = e3.get(120) || t3.fontSize, c3 = e3.get(121) || t3.lineHeight, l3 = t3.fontWeight, u3 = t3.letterSpacing, d3 = `${o3}px`, f3 = `${c3}px`, p3 = `${u3}px`;
        n2.style.fontSize = d3, n2.style.fontWeight = l3, n2.style.letterSpacing = p3, s2.style.fontFamily = r2, s2.style.fontFeatureSettings = a3, s2.style.lineHeight = f3, i2.style.height = f3, i2.style.width = f3, h2.style.height = f3, h2.style.width = f3;
      };
      return {
        root: n2,
        left: l2,
        right: u2,
        icon: i2,
        colorspan: a2,
        iconLabel: d2,
        iconContainer: c2,
        parametersLabel: f2,
        qualifierLabel: p2,
        detailsLabel: m2,
        readMore: h2,
        disposables: t2,
        configureFont: g2
      };
    }
    renderElement(e2, t2, n2) {
      n2.configureFont();
      let { completion: r2 } = e2;
      n2.root.id = KT(t2), n2.colorspan.style.backgroundColor = ``;
      let i2 = {
        labelEscapeNewLines: true,
        matches: ua(e2.score)
      }, a2 = [];
      if (r2.kind === 19 && JT.extract(e2, a2)) n2.icon.className = `icon customcolor`, n2.iconContainer.className = `icon hide`, n2.colorspan.style.backgroundColor = a2[0];
      else if (r2.kind === 20 && this._themeService.getFileIconTheme().hasFileIcons) {
        n2.icon.className = `icon hide`, n2.iconContainer.className = `icon hide`;
        let t3 = VT(this._modelService, this._languageService, R.from({
          scheme: `fake`,
          path: e2.textLabel
        }), zT.FILE), a3 = VT(this._modelService, this._languageService, R.from({
          scheme: `fake`,
          path: r2.detail
        }), zT.FILE);
        i2.extraClasses = t3.length > a3.length ? t3 : a3;
      } else r2.kind === 23 && this._themeService.getFileIconTheme().hasFolderIcons ? (n2.icon.className = `icon hide`, n2.iconContainer.className = `icon hide`, i2.extraClasses = [
        VT(this._modelService, this._languageService, R.from({
          scheme: `fake`,
          path: e2.textLabel
        }), zT.FOLDER),
        VT(this._modelService, this._languageService, R.from({
          scheme: `fake`,
          path: r2.detail
        }), zT.FOLDER)
      ].flat()) : (n2.icon.className = `icon hide`, n2.iconContainer.className = ``, n2.iconContainer.classList.add(`suggest-icon`, ...L.asClassNameArray(oe.toIcon(r2.kind))));
      r2.tags && r2.tags.indexOf(1) >= 0 && (i2.extraClasses = (i2.extraClasses || []).concat([
        `deprecated`
      ]), i2.matches = []), n2.iconLabel.setLabel(e2.textLabel, void 0, i2), typeof r2.label == `string` ? (n2.parametersLabel.textContent = ``, n2.detailsLabel.textContent = XT(r2.detail || ``), n2.root.classList.add(`string-label`)) : (n2.parametersLabel.textContent = XT(r2.label.detail || ``), n2.detailsLabel.textContent = XT(r2.label.description || ``), n2.root.classList.remove(`string-label`)), this._editor.getOption(119).showInlineDetails ? kl(n2.detailsLabel) : ls(n2.detailsLabel), IT(e2) ? (n2.right.classList.add(`can-expand-details`), kl(n2.readMore), n2.readMore.onmousedown = (e3) => {
        e3.stopPropagation(), e3.preventDefault();
      }, n2.readMore.onclick = (e3) => {
        e3.stopPropagation(), e3.preventDefault(), this._onDidToggleDetails.fire();
      }) : (n2.right.classList.remove(`can-expand-details`), ls(n2.readMore), n2.readMore.onmousedown = null, n2.readMore.onclick = null);
    }
    disposeTemplate(e2) {
      e2.disposables.dispose();
    }
  };
  YT = WT([
    GT(1, Pt),
    GT(2, Dt),
    GT(3, Gt)
  ], YT);
  function XT(e2) {
    return e2.replace(/\r\n|\r|\n/g, ``);
  }
  var ZT = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, QT = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, $T;
  q(`editorSuggestWidget.background`, po, U(`editorSuggestWidgetBackground`, `Background color of the suggest widget.`)), q(`editorSuggestWidget.border`, mo, U(`editorSuggestWidgetBorder`, `Border color of the suggest widget.`));
  const eE = q(`editorSuggestWidget.foreground`, Za, U(`editorSuggestWidgetForeground`, `Foreground color of the suggest widget.`));
  q(`editorSuggestWidget.selectedForeground`, $c, U(`editorSuggestWidgetSelectedForeground`, `Foreground color of the selected entry in the suggest widget.`)), q(`editorSuggestWidget.selectedIconForeground`, el, U(`editorSuggestWidgetSelectedIconForeground`, `Icon foreground color of the selected entry in the suggest widget.`));
  const tE = q(`editorSuggestWidget.selectedBackground`, Qc, U(`editorSuggestWidgetSelectedBackground`, `Background color of the selected entry in the suggest widget.`));
  q(`editorSuggestWidget.highlightForeground`, yc, U(`editorSuggestWidgetHighlightForeground`, `Color of the match highlights in the suggest widget.`)), q(`editorSuggestWidget.focusHighlightForeground`, vc, U(`editorSuggestWidgetFocusHighlightForeground`, `Color of the match highlights in the suggest widget when an item is focused.`)), q(`editorSuggestWidgetStatus.foreground`, ql(eE, 0.5), U(`editorSuggestWidgetStatusForeground`, `Foreground color of the suggest widget status.`));
  var nE = class {
    constructor(e2, t2) {
      this._service = e2, this._key = `suggestWidget.size/${t2.getEditorType()}/${t2 instanceof c_}`;
    }
    restore() {
      let e2 = this._service.get(this._key, 0) ?? ``;
      try {
        let t2 = JSON.parse(e2);
        if (x.is(t2)) return x.lift(t2);
      } catch {
      }
    }
    store(e2) {
      this._service.store(this._key, JSON.stringify(e2), 0, 1);
    }
    reset() {
      this._service.remove(this._key, 0);
    }
  };
  let rE = (_oa = class {
    constructor(e2, t2, n2, i2, a2) {
      this.editor = e2, this._storageService = t2, this._state = 0, this._isAuto = false, this._pendingLayout = new Bn(), this._pendingShowDetails = new Bn(), this._ignoreFocusEvents = false, this._forceRenderingAbove = false, this._explainMode = false, this._showTimeout = new Jr(), this._disposables = new C(), this._onDidSelect = new Yn(), this._onDidFocus = new Yn(), this._onDidHide = new E(), this._onDidShow = new E(), this.onDidSelect = this._onDidSelect.event, this.onDidFocus = this._onDidFocus.event, this.onDidHide = this._onDidHide.event, this.onDidShow = this._onDidShow.event, this._onDetailsKeydown = new E(), this.onDetailsKeyDown = this._onDetailsKeydown.event, this.element = new mg(), this.element.domNode.classList.add(`editor-widget`, `suggest-widget`), this._contentWidget = new iE(this, e2), this._persistedSize = new nE(t2, e2);
      class o2 {
        constructor(e3, t3, n3 = false, r2 = false) {
          this.persistedSize = e3, this.currentSize = t3, this.persistHeight = n3, this.persistWidth = r2;
        }
      }
      let s2;
      this._disposables.add(this.element.onDidWillResize(() => {
        this._contentWidget.lockPreference(), s2 = new o2(this._persistedSize.restore(), this.element.size);
      })), this._disposables.add(this.element.onDidResize((e3) => {
        var _a3, _b3;
        if (this._resize(e3.dimension.width, e3.dimension.height), s2 && (s2.persistHeight = s2.persistHeight || !!e3.north || !!e3.south, s2.persistWidth = s2.persistWidth || !!e3.east || !!e3.west), e3.done) {
          if (s2) {
            let { itemHeight: e4, defaultSize: t3 } = this.getLayoutInfo(), n3 = Math.round(e4 / 2), { width: r2, height: i3 } = this.element.size;
            (!s2.persistHeight || Math.abs(s2.currentSize.height - i3) <= n3) && (i3 = ((_a3 = s2.persistedSize) == null ? void 0 : _a3.height) ?? t3.height), (!s2.persistWidth || Math.abs(s2.currentSize.width - r2) <= n3) && (r2 = ((_b3 = s2.persistedSize) == null ? void 0 : _b3.width) ?? t3.width), this._persistedSize.store(new x(r2, i3));
          }
          this._contentWidget.unlockPreference(), s2 = void 0;
        }
      })), this._messageElement = B(this.element.domNode, r(`.message`)), this._listElement = B(this.element.domNode, r(`.tree`));
      let c2 = this._disposables.add(a2.createInstance(LT, this.editor));
      c2.onDidClose(this.toggleDetails, this, this._disposables), this._details = new RT(c2, this.editor);
      let l2 = () => this.element.domNode.classList.toggle(`no-icons`, !this.editor.getOption(119).showIcons);
      l2();
      let u2 = a2.createInstance(YT, this.editor);
      this._disposables.add(u2), this._disposables.add(u2.onDidToggleDetails(() => this.toggleDetails())), this._list = new Tn(`SuggestWidget`, this._listElement, {
        getHeight: (e3) => this.getLayoutInfo().itemHeight,
        getTemplateId: (e3) => `suggestion`
      }, [
        u2
      ], {
        alwaysConsumeMouseWheel: true,
        useShadows: false,
        mouseSupport: false,
        multipleSelectionSupport: false,
        accessibilityProvider: {
          getRole: () => `option`,
          getWidgetAriaLabel: () => U(`suggest`, `Suggest`),
          getWidgetRole: () => `listbox`,
          getAriaLabel: (e3) => {
            let t3 = e3.textLabel;
            if (typeof e3.completion.label != `string`) {
              let { detail: n4, description: r3 } = e3.completion.label;
              n4 && r3 ? t3 = U(`label.full`, `{0} {1}, {2}`, t3, n4, r3) : n4 ? t3 = U(`label.detail`, `{0} {1}`, t3, n4) : r3 && (t3 = U(`label.desc`, `{0}, {1}`, t3, r3));
            }
            if (!e3.isResolved || !this._isDetailsVisible()) return t3;
            let { documentation: n3, detail: r2 } = e3.completion, i3 = Do(`{0}{1}`, r2 || ``, n3 ? typeof n3 == `string` ? n3 : n3.value : ``);
            return U(`ariaCurrenttSuggestionReadDetails`, `{0}, docs: {1}`, t3, i3);
          }
        }
      }), this._list.style(qo({
        listInactiveFocusBackground: tE,
        listInactiveFocusOutline: bi
      })), this._status = a2.createInstance(NT, this.element.domNode, lw);
      let d2 = () => this.element.domNode.classList.toggle(`with-status-bar`, this.editor.getOption(119).showStatusBar);
      d2(), this._disposables.add(i2.onDidColorThemeChange((e3) => this._onThemeChange(e3))), this._onThemeChange(i2.getColorTheme()), this._disposables.add(this._list.onMouseDown((e3) => this._onListMouseDownOrTap(e3))), this._disposables.add(this._list.onTap((e3) => this._onListMouseDownOrTap(e3))), this._disposables.add(this._list.onDidChangeSelection((e3) => this._onListSelection(e3))), this._disposables.add(this._list.onDidChangeFocus((e3) => this._onListFocus(e3))), this._disposables.add(this.editor.onDidChangeCursorSelection(() => this._onCursorSelectionChanged())), this._disposables.add(this.editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(119) && (d2(), l2()), this._completionModel && (e3.hasChanged(50) || e3.hasChanged(120) || e3.hasChanged(121)) && this._list.splice(0, this._list.length, this._completionModel.items);
      })), this._ctxSuggestWidgetVisible = $.Visible.bindTo(n2), this._ctxSuggestWidgetDetailsVisible = $.DetailsVisible.bindTo(n2), this._ctxSuggestWidgetMultipleSuggestions = $.MultipleSuggestions.bindTo(n2), this._ctxSuggestWidgetHasFocusedSuggestion = $.HasFocusedSuggestion.bindTo(n2), this._disposables.add(Si(this._details.widget.domNode, `keydown`, (e3) => {
        this._onDetailsKeydown.fire(e3);
      })), this._disposables.add(this.editor.onMouseDown((e3) => this._onEditorMouseDown(e3)));
    }
    dispose() {
      var _a3;
      this._details.widget.dispose(), this._details.dispose(), this._list.dispose(), this._status.dispose(), this._disposables.dispose(), (_a3 = this._loadingTimeout) == null ? void 0 : _a3.dispose(), this._pendingLayout.dispose(), this._pendingShowDetails.dispose(), this._showTimeout.dispose(), this._contentWidget.dispose(), this.element.dispose();
    }
    _onEditorMouseDown(e2) {
      this._details.widget.domNode.contains(e2.target.element) ? this._details.widget.domNode.focus() : this.element.domNode.contains(e2.target.element) && this.editor.focus();
    }
    _onCursorSelectionChanged() {
      this._state !== 0 && this._contentWidget.layout();
    }
    _onListMouseDownOrTap(e2) {
      e2.element === void 0 || e2.index === void 0 || (e2.browserEvent.preventDefault(), e2.browserEvent.stopPropagation(), this._select(e2.element, e2.index));
    }
    _onListSelection(e2) {
      e2.elements.length && this._select(e2.elements[0], e2.indexes[0]);
    }
    _select(e2, t2) {
      let n2 = this._completionModel;
      n2 && (this._onDidSelect.fire({
        item: e2,
        index: t2,
        model: n2
      }), this.editor.focus());
    }
    _onThemeChange(e2) {
      this._details.widget.borderWidth = Is(e2.type) ? 2 : 1;
    }
    _onListFocus(e2) {
      var _a3;
      if (this._ignoreFocusEvents) return;
      if (!e2.elements.length) {
        this._currentSuggestionDetails && (this._currentSuggestionDetails.cancel(), this._currentSuggestionDetails = void 0, this._focusedItem = void 0), this.editor.setAriaOptions({
          activeDescendant: void 0
        }), this._ctxSuggestWidgetHasFocusedSuggestion.set(false);
        return;
      }
      if (!this._completionModel) return;
      this._ctxSuggestWidgetHasFocusedSuggestion.set(true);
      let t2 = e2.elements[0], n2 = e2.indexes[0];
      t2 !== this._focusedItem && ((_a3 = this._currentSuggestionDetails) == null ? void 0 : _a3.cancel(), this._currentSuggestionDetails = void 0, this._focusedItem = t2, this._list.reveal(n2), this._currentSuggestionDetails = sa(async (e3) => {
        let n3 = La(() => {
          this._isDetailsVisible() && this.showDetails(true);
        }, 250), r2 = e3.onCancellationRequested(() => n3.dispose());
        try {
          return await t2.resolve(e3);
        } finally {
          n3.dispose(), r2.dispose();
        }
      }), this._currentSuggestionDetails.then(() => {
        n2 >= this._list.length || t2 !== this._list.element(n2) || (this._ignoreFocusEvents = true, this._list.splice(n2, 1, [
          t2
        ]), this._list.setFocus([
          n2
        ]), this._ignoreFocusEvents = false, this._isDetailsVisible() ? this.showDetails(false) : this.element.domNode.classList.remove(`docs-side`), this.editor.setAriaOptions({
          activeDescendant: KT(n2)
        }));
      }).catch(G)), this._onDidFocus.fire({
        item: t2,
        index: n2,
        model: this._completionModel
      });
    }
    _setState(e2) {
      if (this._state !== e2) switch (this._state = e2, this.element.domNode.classList.toggle(`frozen`, e2 === 4), this.element.domNode.classList.remove(`message`), e2) {
        case 0:
          ls(this._messageElement, this._listElement, this._status.element), this._details.hide(true), this._status.hide(), this._contentWidget.hide(), this._ctxSuggestWidgetVisible.reset(), this._ctxSuggestWidgetMultipleSuggestions.reset(), this._ctxSuggestWidgetHasFocusedSuggestion.reset(), this._showTimeout.cancel(), this.element.domNode.classList.remove(`visible`), this._list.splice(0, this._list.length), this._focusedItem = void 0, this._cappedHeight = void 0, this._explainMode = false;
          break;
        case 1:
          this.element.domNode.classList.add(`message`), this._messageElement.textContent = $T.LOADING_MESSAGE, ls(this._listElement, this._status.element), kl(this._messageElement), this._details.hide(), this._show(), this._focusedItem = void 0, Nl($T.LOADING_MESSAGE);
          break;
        case 2:
          this.element.domNode.classList.add(`message`), this._messageElement.textContent = $T.NO_SUGGESTIONS_MESSAGE, ls(this._listElement, this._status.element), kl(this._messageElement), this._details.hide(), this._show(), this._focusedItem = void 0, Nl($T.NO_SUGGESTIONS_MESSAGE);
          break;
        case 3:
          ls(this._messageElement), kl(this._listElement, this._status.element), this._show();
          break;
        case 4:
          ls(this._messageElement), kl(this._listElement, this._status.element), this._show();
          break;
        case 5:
          ls(this._messageElement), kl(this._listElement, this._status.element), this._details.show(), this._show();
          break;
      }
    }
    _show() {
      this._status.show(), this._contentWidget.show(), this._layout(this._persistedSize.restore()), this._ctxSuggestWidgetVisible.set(true), this._showTimeout.cancelAndSet(() => {
        this.element.domNode.classList.add(`visible`), this._onDidShow.fire(this);
      }, 100);
    }
    showTriggered(e2, t2) {
      this._state === 0 && (this._contentWidget.setPosition(this.editor.getPosition()), this._isAuto = !!e2, this._isAuto || (this._loadingTimeout = La(() => this._setState(1), t2)));
    }
    showSuggestions(e2, t2, n2, r2, i2) {
      var _a3, _b3;
      if (this._contentWidget.setPosition(this.editor.getPosition()), (_a3 = this._loadingTimeout) == null ? void 0 : _a3.dispose(), (_b3 = this._currentSuggestionDetails) == null ? void 0 : _b3.cancel(), this._currentSuggestionDetails = void 0, this._completionModel !== e2 && (this._completionModel = e2), n2 && this._state !== 2 && this._state !== 0) {
        this._setState(4);
        return;
      }
      let a2 = this._completionModel.items.length, o2 = a2 === 0;
      if (this._ctxSuggestWidgetMultipleSuggestions.set(a2 > 1), o2) {
        this._setState(r2 ? 0 : 2), this._completionModel = void 0;
        return;
      }
      this._focusedItem = void 0, this._onDidFocus.pause(), this._onDidSelect.pause();
      try {
        this._list.splice(0, this._list.length, this._completionModel.items), this._setState(n2 ? 4 : 3), this._list.reveal(t2, 0), this._list.setFocus(i2 ? [] : [
          t2
        ]);
      } finally {
        this._onDidFocus.resume(), this._onDidSelect.resume();
      }
      this._pendingLayout.value = Sl(ts(this.element.domNode), () => {
        this._pendingLayout.clear(), this._layout(this.element.size), this._details.widget.domNode.classList.remove(`focused`);
      });
    }
    focusSelected() {
      this._list.length > 0 && this._list.setFocus([
        0
      ]);
    }
    selectNextPage() {
      switch (this._state) {
        case 0:
          return false;
        case 5:
          return this._details.widget.pageDown(), true;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusNextPage(), true;
      }
    }
    selectNext() {
      switch (this._state) {
        case 0:
          return false;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusNext(1, true), true;
      }
    }
    selectLast() {
      switch (this._state) {
        case 0:
          return false;
        case 5:
          return this._details.widget.scrollBottom(), true;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusLast(), true;
      }
    }
    selectPreviousPage() {
      switch (this._state) {
        case 0:
          return false;
        case 5:
          return this._details.widget.pageUp(), true;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusPreviousPage(), true;
      }
    }
    selectPrevious() {
      switch (this._state) {
        case 0:
          return false;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusPrevious(1, true), false;
      }
    }
    selectFirst() {
      switch (this._state) {
        case 0:
          return false;
        case 5:
          return this._details.widget.scrollTop(), true;
        case 1:
          return !this._isAuto;
        default:
          return this._list.focusFirst(), true;
      }
    }
    getFocusedItem() {
      if (this._state !== 0 && this._state !== 2 && this._state !== 1 && this._completionModel && this._list.getFocus().length > 0) return {
        item: this._list.getFocusedElements()[0],
        index: this._list.getFocus()[0],
        model: this._completionModel
      };
    }
    toggleDetailsFocus() {
      this._state === 5 ? (this._setState(3), this._details.widget.domNode.classList.remove(`focused`)) : this._state === 3 && this._isDetailsVisible() && (this._setState(5), this._details.widget.domNode.classList.add(`focused`));
    }
    toggleDetails() {
      this._isDetailsVisible() ? (this._pendingShowDetails.clear(), this._ctxSuggestWidgetDetailsVisible.set(false), this._setDetailsVisible(false), this._details.hide(), this.element.domNode.classList.remove(`shows-details`)) : (IT(this._list.getFocusedElements()[0]) || this._explainMode) && (this._state === 3 || this._state === 5 || this._state === 4) && (this._ctxSuggestWidgetDetailsVisible.set(true), this._setDetailsVisible(true), this.showDetails(false));
    }
    showDetails(e2) {
      this._pendingShowDetails.value = Sl(ts(this.element.domNode), () => {
        this._pendingShowDetails.clear(), this._details.show(), e2 ? this._details.widget.renderLoading() : this._details.widget.renderItem(this._list.getFocusedElements()[0], this._explainMode), this._details.widget.isEmpty ? this._details.hide() : (this._positionDetails(), this.element.domNode.classList.add(`shows-details`)), this.editor.focus();
      });
    }
    toggleExplainMode() {
      this._list.getFocusedElements()[0] && (this._explainMode = !this._explainMode, this._isDetailsVisible() ? this.showDetails(false) : this.toggleDetails());
    }
    resetPersistedSize() {
      this._persistedSize.reset();
    }
    hideWidget() {
      var _a3;
      this._pendingLayout.clear(), this._pendingShowDetails.clear(), (_a3 = this._loadingTimeout) == null ? void 0 : _a3.dispose(), this._setState(0), this._onDidHide.fire(this), this.element.clearSashHoverState();
      let e2 = this._persistedSize.restore(), t2 = Math.ceil(this.getLayoutInfo().itemHeight * 4.3);
      e2 && e2.height < t2 && this._persistedSize.store(e2.with(void 0, t2));
    }
    isFrozen() {
      return this._state === 4;
    }
    _afterRender(e2) {
      if (e2 === null) {
        this._isDetailsVisible() && this._details.hide();
        return;
      }
      this._state === 2 || this._state === 1 || (this._isDetailsVisible() && !this._details.widget.isEmpty && this._details.show(), this._positionDetails());
    }
    _layout(e2) {
      var _a3, _b3;
      if (!this.editor.hasModel() || !this.editor.getDomNode()) return;
      let t2 = Io(this.element.domNode.ownerDocument.body), n2 = this.getLayoutInfo();
      e2 || (e2 = n2.defaultSize);
      let r2 = e2.height, i2 = e2.width;
      if (this._status.element.style.height = `${n2.itemHeight}px`, this._state === 2 || this._state === 1) r2 = n2.itemHeight + n2.borderHeight, i2 = n2.defaultSize.width / 2, this.element.enableSashes(false, false, false, false), this.element.minSize = this.element.maxSize = new x(i2, r2), this._contentWidget.setPreference(2);
      else {
        let a2 = t2.width - n2.borderHeight - 2 * n2.horizontalPadding;
        i2 > a2 && (i2 = a2);
        let o2 = this._completionModel ? this._completionModel.stats.pLabelLen * n2.typicalHalfwidthCharacterWidth : i2, s2 = n2.statusBarHeight + this._list.contentHeight + n2.borderHeight, c2 = n2.itemHeight + n2.statusBarHeight, l2 = Vo(this.editor.getDomNode()), u2 = this.editor.getScrolledVisiblePosition(this.editor.getPosition()), d2 = l2.top + u2.top + u2.height, f2 = Math.min(t2.height - d2 - n2.verticalPadding, s2), p2 = l2.top + u2.top - n2.verticalPadding, m2 = Math.min(p2, s2), h2 = Math.min(Math.max(m2, f2) + n2.borderHeight, s2);
        r2 === ((_a3 = this._cappedHeight) == null ? void 0 : _a3.capped) && (r2 = this._cappedHeight.wanted), r2 < c2 && (r2 = c2), r2 > h2 && (r2 = h2);
        let g2 = 150;
        r2 > f2 || this._forceRenderingAbove && p2 > g2 ? (this._contentWidget.setPreference(1), this.element.enableSashes(true, true, false, false), h2 = m2) : (this._contentWidget.setPreference(2), this.element.enableSashes(false, true, true, false), h2 = f2), this.element.preferredSize = new x(o2, n2.defaultSize.height), this.element.maxSize = new x(a2, h2), this.element.minSize = new x(220, c2), this._cappedHeight = r2 === s2 ? {
          wanted: ((_b3 = this._cappedHeight) == null ? void 0 : _b3.wanted) ?? e2.height,
          capped: r2
        } : void 0;
      }
      this._resize(i2, r2);
    }
    _resize(e2, t2) {
      let { width: n2, height: r2 } = this.element.maxSize;
      e2 = Math.min(n2, e2), t2 = Math.min(r2, t2);
      let { statusBarHeight: i2 } = this.getLayoutInfo();
      this._list.layout(t2 - i2, e2), this._listElement.style.height = `${t2 - i2}px`, this.element.layout(t2, e2), this._contentWidget.layout(), this._positionDetails();
    }
    _positionDetails() {
      var _a3;
      this._isDetailsVisible() && this._details.placeAtAnchor(this.element.domNode, ((_a3 = this._contentWidget.getPosition()) == null ? void 0 : _a3.preference[0]) === 2);
    }
    getLayoutInfo() {
      let e2 = this.editor.getOption(50), t2 = Hi(this.editor.getOption(121) || e2.lineHeight, 8, 1e3), n2 = !this.editor.getOption(119).showStatusBar || this._state === 2 || this._state === 1 ? 0 : t2, r2 = this._details.widget.borderWidth, i2 = 2 * r2;
      return {
        itemHeight: t2,
        statusBarHeight: n2,
        borderWidth: r2,
        borderHeight: i2,
        typicalHalfwidthCharacterWidth: e2.typicalHalfwidthCharacterWidth,
        verticalPadding: 22,
        horizontalPadding: 14,
        defaultSize: new x(430, n2 + 12 * t2 + i2)
      };
    }
    _isDetailsVisible() {
      return this._storageService.getBoolean(`expandSuggestionDocs`, 0, false);
    }
    _setDetailsVisible(e2) {
      this._storageService.store(`expandSuggestionDocs`, e2, 0, 0);
    }
    forceRenderingAbove() {
      this._forceRenderingAbove || (this._forceRenderingAbove = true, this._layout(this._persistedSize.restore()));
    }
    stopForceRenderingAbove() {
      this._forceRenderingAbove = false;
    }
  }, $T = _oa, _oa.LOADING_MESSAGE = U(`suggestWidget.loading`, `Loading...`), _oa.NO_SUGGESTIONS_MESSAGE = U(`suggestWidget.noSuggestions`, `No suggestions.`), _oa);
  rE = $T = ZT([
    QT(1, Vt),
    QT(2, O),
    QT(3, Gt),
    QT(4, k)
  ], rE);
  var iE = class {
    constructor(e2, t2) {
      this._widget = e2, this._editor = t2, this.allowEditorOverflow = true, this.suppressMouseDown = false, this._preferenceLocked = false, this._added = false, this._hidden = false;
    }
    dispose() {
      this._added && (this._added = false, this._editor.removeContentWidget(this));
    }
    getId() {
      return `editor.widget.suggestWidget`;
    }
    getDomNode() {
      return this._widget.element.domNode;
    }
    show() {
      this._hidden = false, this._added || (this._added = true, this._editor.addContentWidget(this));
    }
    hide() {
      this._hidden || (this._hidden = true, this.layout());
    }
    layout() {
      this._editor.layoutContentWidget(this);
    }
    getPosition() {
      return this._hidden || !this._position || !this._preference ? null : {
        position: this._position,
        preference: [
          this._preference
        ]
      };
    }
    beforeRender() {
      let { height: e2, width: t2 } = this._widget.element.size, { borderWidth: n2, horizontalPadding: r2 } = this._widget.getLayoutInfo();
      return new x(t2 + 2 * n2 + r2, e2 + 2 * n2);
    }
    afterRender(e2) {
      this._widget._afterRender(e2);
    }
    setPreference(e2) {
      this._preferenceLocked || (this._preference = e2);
    }
    lockPreference() {
      this._preferenceLocked = true;
    }
    unlockPreference() {
      this._preferenceLocked = false;
    }
    setPosition(e2) {
      this._position = e2;
    }
  }, aE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, oE = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, sE;
  const cE = false;
  var lE = class {
    constructor(e2, t2) {
      this._model = e2, this._position = t2, this._decorationOptions = M.register({
        description: `suggest-line-suffix`,
        stickiness: 1
      });
      let n2 = e2.getLineMaxColumn(t2.lineNumber);
      if (n2 !== t2.column) {
        let n3 = e2.getOffsetAt(t2), r2 = e2.getPositionAt(n3 + 1);
        e2.changeDecorations((e3) => {
          this._marker && e3.removeDecoration(this._marker), this._marker = e3.addDecoration(P.fromPositions(t2, r2), this._decorationOptions);
        });
      }
    }
    dispose() {
      this._marker && !this._model.isDisposed() && this._model.changeDecorations((e2) => {
        e2.removeDecoration(this._marker), this._marker = void 0;
      });
    }
    delta(e2) {
      if (this._model.isDisposed() || this._position.lineNumber !== e2.lineNumber) return 0;
      if (this._marker) {
        let t2 = this._model.getDecorationRange(this._marker), n2 = this._model.getOffsetAt(t2.getStartPosition());
        return n2 - this._model.getOffsetAt(e2);
      } else return this._model.getLineMaxColumn(e2.lineNumber) - e2.column;
    }
  };
  let uE = (_pa = class {
    static get(e2) {
      return e2.getContribution(sE.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      this._memoryService = t2, this._commandService = n2, this._contextKeyService = r2, this._instantiationService = i2, this._logService = a2, this._telemetryService = o2, this._lineSuffix = new Bn(), this._toDispose = new C(), this._selectors = new dE((e3) => e3.priority), this._onWillInsertSuggestItem = new E(), this.onWillInsertSuggestItem = this._onWillInsertSuggestItem.event, this.editor = e2, this.model = i2.createInstance(kT, this.editor), this._selectors.register({
        priority: 0,
        select: (e3, t3, n3) => this._memoryService.select(e3, t3, n3)
      });
      let s2 = $.InsertMode.bindTo(r2);
      s2.set(e2.getOption(119).insertMode), this._toDispose.add(this.model.onDidTrigger(() => s2.set(e2.getOption(119).insertMode))), this.widget = this._toDispose.add(new di(ts(e2.getDomNode()), () => {
        let e3 = this._instantiationService.createInstance(rE, this.editor);
        this._toDispose.add(e3), this._toDispose.add(e3.onDidSelect((e4) => this._insertSuggestion(e4, 0), this));
        let t3 = new vT(this.editor, e3, this.model, (e4) => this._insertSuggestion(e4, 2));
        this._toDispose.add(t3);
        let n3 = $.MakesTextEdit.bindTo(this._contextKeyService), r3 = $.HasInsertAndReplaceRange.bindTo(this._contextKeyService), i3 = $.CanResolve.bindTo(this._contextKeyService);
        return this._toDispose.add(Hl(() => {
          n3.reset(), r3.reset(), i3.reset();
        })), this._toDispose.add(e3.onDidFocus(({ item: e4 }) => {
          let t4 = this.editor.getPosition(), a3 = e4.editStart.column, o3 = t4.column, s3 = true;
          if (this.editor.getOption(1) === `smart` && this.model.state === 2 && !e4.completion.additionalTextEdits && !(e4.completion.insertTextRules & 4) && o3 - a3 === e4.completion.insertText.length) {
            let n4 = this.editor.getModel().getValueInRange({
              startLineNumber: t4.lineNumber,
              startColumn: a3,
              endLineNumber: t4.lineNumber,
              endColumn: o3
            });
            s3 = n4 !== e4.completion.insertText;
          }
          n3.set(s3), r3.set(!N.equals(e4.editInsertEnd, e4.editReplaceEnd)), i3.set(!!e4.provider.resolveCompletionItem || !!e4.completion.documentation || e4.completion.detail !== e4.completion.label);
        })), this._toDispose.add(e3.onDetailsKeyDown((e4) => {
          if (e4.toKeyCodeChord().equals(new fn(true, false, false, false, 33)) || qs && e4.toKeyCodeChord().equals(new fn(false, false, false, true, 33))) {
            e4.stopPropagation();
            return;
          }
          e4.toKeyCodeChord().isModifierKey() || this.editor.focus();
        })), e3;
      })), this._overtypingCapturer = this._toDispose.add(new di(ts(e2.getDomNode()), () => this._toDispose.add(new AT(this.editor, this.model)))), this._alternatives = this._toDispose.add(new di(ts(e2.getDomNode()), () => this._toDispose.add(new _T(this.editor, this._contextKeyService)))), this._toDispose.add(i2.createInstance(pT, e2)), this._toDispose.add(this.model.onDidTrigger((e3) => {
        this.widget.value.showTriggered(e3.auto, e3.shy ? 250 : 50), this._lineSuffix.value = new lE(this.editor.getModel(), e3.position);
      })), this._toDispose.add(this.model.onDidSuggest((e3) => {
        if (e3.triggerOptions.shy) return;
        let t3 = -1;
        for (let n4 of this._selectors.itemsOrderedByPriorityDesc) if (t3 = n4.select(this.editor.getModel(), this.editor.getPosition(), e3.completionModel.items), t3 !== -1) break;
        if (t3 === -1 && (t3 = 0), this.model.state === 0) return;
        let n3 = false;
        if (e3.triggerOptions.auto) {
          let t4 = this.editor.getOption(119);
          t4.selectionMode === `never` || t4.selectionMode === `always` ? n3 = t4.selectionMode === `never` : t4.selectionMode === `whenTriggerCharacter` ? n3 = e3.triggerOptions.triggerKind !== 1 : t4.selectionMode === `whenQuickSuggestion` && (n3 = e3.triggerOptions.triggerKind === 1 && !e3.triggerOptions.refilter);
        }
        this.widget.value.showSuggestions(e3.completionModel, t3, e3.isFrozen, e3.triggerOptions.auto, n3);
      })), this._toDispose.add(this.model.onDidCancel((e3) => {
        e3.retrigger || this.widget.value.hideWidget();
      })), this._toDispose.add(this.editor.onDidBlurEditorWidget(() => {
        cE || (this.model.cancel(), this.model.clear());
      }));
      let c2 = $.AcceptSuggestionsOnEnter.bindTo(r2), l2 = () => {
        let e3 = this.editor.getOption(1);
        c2.set(e3 === `on` || e3 === `smart`);
      };
      this._toDispose.add(this.editor.onDidChangeConfiguration(() => l2())), l2();
    }
    dispose() {
      this._alternatives.dispose(), this._toDispose.dispose(), this.widget.dispose(), this.model.dispose(), this._lineSuffix.dispose(), this._onWillInsertSuggestItem.dispose();
    }
    _insertSuggestion(e2, t2) {
      if (!e2 || !e2.item) {
        this._alternatives.value.reset(), this.model.cancel(), this.model.clear();
        return;
      }
      if (!this.editor.hasModel()) return;
      let n2 = Kw.get(this.editor);
      if (!n2) return;
      this._onWillInsertSuggestItem.fire({
        item: e2.item
      });
      let r2 = this.editor.getModel(), i2 = r2.getAlternativeVersionId(), { item: a2 } = e2, o2 = [], s2 = new g();
      t2 & 1 || this.editor.pushUndoStop();
      let c2 = this.getOverwriteInfo(a2, !!(t2 & 8));
      this._memoryService.memorize(r2, this.editor.getPosition(), a2);
      let l2 = a2.isResolved, u2 = -1, d2 = -1;
      if (Array.isArray(a2.completion.additionalTextEdits)) {
        this.model.cancel();
        let e3 = Mr.capture(this.editor);
        this.editor.executeEdits(`suggestController.additionalTextEdits.sync`, a2.completion.additionalTextEdits.map((e4) => {
          let t3 = P.lift(e4.range);
          if (t3.startLineNumber === a2.position.lineNumber && t3.startColumn > a2.position.column) {
            let e5 = this.editor.getPosition().column - a2.position.column, n3 = e5, r3 = P.spansMultipleLines(t3) ? 0 : e5;
            t3 = new P(t3.startLineNumber, t3.startColumn + n3, t3.endLineNumber, t3.endColumn + r3);
          }
          return Oe.replaceMove(t3, e4.text);
        })), e3.restoreRelativeVerticalPositionOfCursor(this.editor);
      } else if (!l2) {
        let e3 = new Fr(), n3, i3 = r2.onDidChangeContent((e4) => {
          if (e4.isFlush) {
            s2.cancel(), i3.dispose();
            return;
          }
          for (let t3 of e4.changes) {
            let e5 = P.getEndPosition(t3.range);
            (!n3 || N.isBefore(e5, n3)) && (n3 = e5);
          }
        }), c3 = t2;
        t2 |= 2;
        let l3 = false, u3 = this.editor.onWillType(() => {
          u3.dispose(), l3 = true, c3 & 2 || this.editor.pushUndoStop();
        });
        o2.push(a2.resolve(s2.token).then(() => {
          if (!a2.completion.additionalTextEdits || s2.token.isCancellationRequested) return;
          if (n3 && a2.completion.additionalTextEdits.some((e5) => N.isBefore(n3, P.getStartPosition(e5.range)))) return false;
          l3 && this.editor.pushUndoStop();
          let e4 = Mr.capture(this.editor);
          return this.editor.executeEdits(`suggestController.additionalTextEdits.async`, a2.completion.additionalTextEdits.map((e5) => Oe.replaceMove(P.lift(e5.range), e5.text))), e4.restoreRelativeVerticalPositionOfCursor(this.editor), (l3 || !(c3 & 2)) && this.editor.pushUndoStop(), true;
        }).then((t3) => {
          this._logService.trace(`[suggest] async resolving of edits DONE (ms, applied?)`, e3.elapsed(), t3), d2 = t3 === true ? 1 : t3 === false ? 0 : -2;
        }).finally(() => {
          i3.dispose(), u3.dispose();
        }));
      }
      let { insertText: f2 } = a2.completion;
      if (a2.completion.insertTextRules & 4 || (f2 = Gd.escape(f2)), this.model.cancel(), n2.insert(f2, {
        overwriteBefore: c2.overwriteBefore,
        overwriteAfter: c2.overwriteAfter,
        undoStopBefore: false,
        undoStopAfter: false,
        adjustWhitespace: !(a2.completion.insertTextRules & 1),
        clipboardText: e2.model.clipboardText,
        overtypingCapturer: this._overtypingCapturer.value
      }), t2 & 2 || this.editor.pushUndoStop(), a2.completion.command) if (a2.completion.command.id === fE.id) this.model.trigger({
        auto: true,
        retrigger: true
      });
      else {
        let e3 = new Fr();
        o2.push(this._commandService.executeCommand(a2.completion.command.id, ...a2.completion.command.arguments ? [
          ...a2.completion.command.arguments
        ] : []).catch((e4) => {
          a2.completion.extensionId ? Uc(e4) : G(e4);
        }).finally(() => {
          u2 = e3.elapsed();
        }));
      }
      t2 & 4 && this._alternatives.value.set(e2, (e3) => {
        for (s2.cancel(); r2.canUndo(); ) {
          i2 !== r2.getAlternativeVersionId() && r2.undo(), this._insertSuggestion(e3, 3 | (t2 & 8 ? 8 : 0));
          break;
        }
      }), this._alertCompletionItem(a2), Promise.all(o2).finally(() => {
        this._reportSuggestionAcceptedTelemetry(a2, r2, l2, u2, d2, e2.index, e2.model.items), this.model.clear(), s2.dispose();
      });
    }
    _reportSuggestionAcceptedTelemetry(e2, t2, n2, r2, i2, a2, o2) {
      var _a3;
      if (Math.floor(Math.random() * 100) === 0) return;
      let s2 = /* @__PURE__ */ new Map();
      for (let e3 = 0; e3 < Math.min(30, o2.length); e3++) {
        let t3 = o2[e3].textLabel;
        s2.has(t3) ? s2.get(t3).push(e3) : s2.set(t3, [
          e3
        ]);
      }
      let c2 = s2.get(e2.textLabel), l2 = c2 && c2.length > 1, u2 = l2 ? c2[0] : -1;
      this._telemetryService.publicLog2(`suggest.acceptedSuggestion`, {
        extensionId: ((_a3 = e2.extensionId) == null ? void 0 : _a3.value) ?? `unknown`,
        providerId: e2.provider._debugDisplayName ?? `unknown`,
        kind: e2.completion.kind,
        basenameHash: cs(Ii(t2.uri)).toString(16),
        languageId: t2.getLanguageId(),
        fileExtension: bo(t2.uri),
        resolveInfo: e2.provider.resolveCompletionItem ? n2 ? 1 : 0 : -1,
        resolveDuration: e2.resolveDuration,
        commandDuration: r2,
        additionalEditsAsync: i2,
        index: a2,
        firstIndex: u2
      });
    }
    getOverwriteInfo(e2, t2) {
      V(this.editor.hasModel());
      let n2 = this.editor.getOption(119).insertMode === `replace`;
      t2 && (n2 = !n2);
      let r2 = e2.position.column - e2.editStart.column, i2 = (n2 ? e2.editReplaceEnd.column : e2.editInsertEnd.column) - e2.position.column, a2 = this.editor.getPosition().column - e2.position.column, o2 = this._lineSuffix.value ? this._lineSuffix.value.delta(this.editor.getPosition()) : 0;
      return {
        overwriteBefore: r2 + a2,
        overwriteAfter: i2 + o2
      };
    }
    _alertCompletionItem(e2) {
      if ($s(e2.completion.additionalTextEdits)) {
        let t2 = U(`aria.alert.snippet`, `Accepting '{0}' made {1} additional edits`, e2.textLabel, e2.completion.additionalTextEdits.length);
        Ci(t2);
      }
    }
    triggerSuggest(e2, t2, n2) {
      this.editor.hasModel() && (this.model.trigger({
        auto: t2 ?? false,
        completionOptions: {
          providerFilter: e2,
          kindFilter: n2 ? /* @__PURE__ */ new Set() : void 0
        }
      }), this.editor.revealPosition(this.editor.getPosition(), 0), this.editor.focus());
    }
    triggerSuggestAndAcceptBest(e2) {
      if (!this.editor.hasModel()) return;
      let t2 = this.editor.getPosition(), n2 = () => {
        t2.equals(this.editor.getPosition()) && this._commandService.executeCommand(e2.fallback);
      }, r2 = (e3) => {
        if (e3.completion.insertTextRules & 4 || e3.completion.additionalTextEdits) return true;
        let t3 = this.editor.getPosition(), n3 = e3.editStart.column, r3 = t3.column;
        if (r3 - n3 !== e3.completion.insertText.length) return true;
        let i2 = this.editor.getModel().getValueInRange({
          startLineNumber: t3.lineNumber,
          startColumn: n3,
          endLineNumber: t3.lineNumber,
          endColumn: r3
        });
        return i2 !== e3.completion.insertText;
      };
      ze.once(this.model.onDidTrigger)((e3) => {
        let t3 = [];
        ze.any(this.model.onDidTrigger, this.model.onDidCancel)(() => {
          Ra(t3), n2();
        }, void 0, t3), this.model.onDidSuggest(({ completionModel: e4 }) => {
          if (Ra(t3), e4.items.length === 0) {
            n2();
            return;
          }
          let i2 = this._memoryService.select(this.editor.getModel(), this.editor.getPosition(), e4.items), a2 = e4.items[i2];
          if (!r2(a2)) {
            n2();
            return;
          }
          this.editor.pushUndoStop(), this._insertSuggestion({
            index: i2,
            item: a2,
            model: e4
          }, 7);
        }, void 0, t3);
      }), this.model.trigger({
        auto: false,
        shy: true
      }), this.editor.revealPosition(t2, 0), this.editor.focus();
    }
    acceptSelectedSuggestion(e2, t2) {
      let n2 = this.widget.value.getFocusedItem(), r2 = 0;
      e2 && (r2 |= 4), t2 && (r2 |= 8), this._insertSuggestion(n2, r2);
    }
    acceptNextSuggestion() {
      this._alternatives.value.next();
    }
    acceptPrevSuggestion() {
      this._alternatives.value.prev();
    }
    cancelSuggestWidget() {
      this.model.cancel(), this.model.clear(), this.widget.value.hideWidget();
    }
    focusSuggestion() {
      this.widget.value.focusSelected();
    }
    selectNextSuggestion() {
      this.widget.value.selectNext();
    }
    selectNextPageSuggestion() {
      this.widget.value.selectNextPage();
    }
    selectLastSuggestion() {
      this.widget.value.selectLast();
    }
    selectPrevSuggestion() {
      this.widget.value.selectPrevious();
    }
    selectPrevPageSuggestion() {
      this.widget.value.selectPreviousPage();
    }
    selectFirstSuggestion() {
      this.widget.value.selectFirst();
    }
    toggleSuggestionDetails() {
      this.widget.value.toggleDetails();
    }
    toggleExplainMode() {
      this.widget.value.toggleExplainMode();
    }
    toggleSuggestionFocus() {
      this.widget.value.toggleDetailsFocus();
    }
    resetWidgetSize() {
      this.widget.value.resetPersistedSize();
    }
    forceRenderingAbove() {
      this.widget.value.forceRenderingAbove();
    }
    stopForceRenderingAbove() {
      this.widget.isInitialized && this.widget.value.stopForceRenderingAbove();
    }
    registerSelector(e2) {
      return this._selectors.register(e2);
    }
  }, sE = _pa, _pa.ID = `editor.contrib.suggestController`, _pa);
  uE = sE = aE([
    oE(1, lT),
    oE(2, mt),
    oE(3, O),
    oE(4, k),
    oE(5, kt),
    oE(6, Ht)
  ], uE);
  var dE = class {
    constructor(e2) {
      this.prioritySelector = e2, this._items = [];
    }
    register(e2) {
      if (this._items.indexOf(e2) !== -1) throw Error(`Value is already registered`);
      return this._items.push(e2), this._items.sort((e3, t2) => this.prioritySelector(t2) - this.prioritySelector(e3)), {
        dispose: () => {
          let t2 = this._items.indexOf(e2);
          t2 >= 0 && this._items.splice(t2, 1);
        }
      };
    }
    get itemsOrderedByPriorityDesc() {
      return this._items;
    }
  }, fE = (_qa = class extends w {
    constructor() {
      super({
        id: _qa.id,
        label: U(`suggest.trigger.label`, `Trigger Suggest`),
        alias: `Trigger Suggest`,
        precondition: b.and(T.writable, T.hasCompletionItemProvider, $.Visible.toNegated()),
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 2058,
          secondary: [
            2087
          ],
          mac: {
            primary: 266,
            secondary: [
              521,
              2087
            ]
          },
          weight: 100
        }
      });
    }
    run(e2, t2, n2) {
      let r2 = uE.get(t2);
      if (!r2) return;
      let i2;
      n2 && typeof n2 == `object` && n2.auto === true && (i2 = true), r2.triggerSuggest(void 0, i2, void 0);
    }
  }, _qa.id = `editor.action.triggerSuggest`, _qa);
  X(uE.ID, uE, 2), J(fE);
  const pE = 190, mE = Ae.bindToContribution(uE.get);
  Y(new mE({
    id: `acceptSelectedSuggestion`,
    precondition: b.and($.Visible, $.HasFocusedSuggestion),
    handler(e2) {
      e2.acceptSelectedSuggestion(true, false);
    },
    kbOpts: [
      {
        primary: 2,
        kbExpr: b.and($.Visible, T.textInputFocus),
        weight: pE
      },
      {
        primary: 3,
        kbExpr: b.and($.Visible, T.textInputFocus, $.AcceptSuggestionsOnEnter, $.MakesTextEdit),
        weight: pE
      }
    ],
    menuOpts: [
      {
        menuId: lw,
        title: U(`accept.insert`, `Insert`),
        group: `left`,
        order: 1,
        when: $.HasInsertAndReplaceRange.toNegated()
      },
      {
        menuId: lw,
        title: U(`accept.insert`, `Insert`),
        group: `left`,
        order: 1,
        when: b.and($.HasInsertAndReplaceRange, $.InsertMode.isEqualTo(`insert`))
      },
      {
        menuId: lw,
        title: U(`accept.replace`, `Replace`),
        group: `left`,
        order: 1,
        when: b.and($.HasInsertAndReplaceRange, $.InsertMode.isEqualTo(`replace`))
      }
    ]
  })), Y(new mE({
    id: `acceptAlternativeSelectedSuggestion`,
    precondition: b.and($.Visible, T.textInputFocus, $.HasFocusedSuggestion),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 1027,
      secondary: [
        1026
      ]
    },
    handler(e2) {
      e2.acceptSelectedSuggestion(false, true);
    },
    menuOpts: [
      {
        menuId: lw,
        group: `left`,
        order: 2,
        when: b.and($.HasInsertAndReplaceRange, $.InsertMode.isEqualTo(`insert`)),
        title: U(`accept.replace`, `Replace`)
      },
      {
        menuId: lw,
        group: `left`,
        order: 2,
        when: b.and($.HasInsertAndReplaceRange, $.InsertMode.isEqualTo(`replace`)),
        title: U(`accept.insert`, `Insert`)
      }
    ]
  })), y.registerCommandAlias(`acceptSelectedSuggestionOnEnter`, `acceptSelectedSuggestion`), Y(new mE({
    id: `hideSuggestWidget`,
    precondition: $.Visible,
    handler: (e2) => e2.cancelSuggestWidget(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 9,
      secondary: [
        1033
      ]
    }
  })), Y(new mE({
    id: `selectNextSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectNextSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 18,
      secondary: [
        2066
      ],
      mac: {
        primary: 18,
        secondary: [
          2066,
          300
        ]
      }
    }
  })), Y(new mE({
    id: `selectNextPageSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectNextPageSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 12,
      secondary: [
        2060
      ]
    }
  })), Y(new mE({
    id: `selectLastSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectLastSuggestion()
  })), Y(new mE({
    id: `selectPrevSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectPrevSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 16,
      secondary: [
        2064
      ],
      mac: {
        primary: 16,
        secondary: [
          2064,
          302
        ]
      }
    }
  })), Y(new mE({
    id: `selectPrevPageSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectPrevPageSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 11,
      secondary: [
        2059
      ]
    }
  })), Y(new mE({
    id: `selectFirstSuggestion`,
    precondition: b.and($.Visible, b.or($.MultipleSuggestions, $.HasFocusedSuggestion.negate())),
    handler: (e2) => e2.selectFirstSuggestion()
  })), Y(new mE({
    id: `focusSuggestion`,
    precondition: b.and($.Visible, $.HasFocusedSuggestion.negate()),
    handler: (e2) => e2.focusSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 2058,
      secondary: [
        2087
      ],
      mac: {
        primary: 266,
        secondary: [
          2087
        ]
      }
    }
  })), Y(new mE({
    id: `focusAndAcceptSuggestion`,
    precondition: b.and($.Visible, $.HasFocusedSuggestion.negate()),
    handler: (e2) => {
      e2.focusSuggestion(), e2.acceptSelectedSuggestion(true, false);
    }
  })), Y(new mE({
    id: `toggleSuggestionDetails`,
    precondition: b.and($.Visible, $.HasFocusedSuggestion),
    handler: (e2) => e2.toggleSuggestionDetails(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 2058,
      secondary: [
        2087
      ],
      mac: {
        primary: 266,
        secondary: [
          2087
        ]
      }
    },
    menuOpts: [
      {
        menuId: lw,
        group: `right`,
        order: 1,
        when: b.and($.DetailsVisible, $.CanResolve),
        title: U(`detail.more`, `Show Less`)
      },
      {
        menuId: lw,
        group: `right`,
        order: 1,
        when: b.and($.DetailsVisible.toNegated(), $.CanResolve),
        title: U(`detail.less`, `Show More`)
      }
    ]
  })), Y(new mE({
    id: `toggleExplainMode`,
    precondition: $.Visible,
    handler: (e2) => e2.toggleExplainMode(),
    kbOpts: {
      weight: 100,
      primary: 2138
    }
  })), Y(new mE({
    id: `toggleSuggestionFocus`,
    precondition: $.Visible,
    handler: (e2) => e2.toggleSuggestionFocus(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 2570,
      mac: {
        primary: 778
      }
    }
  })), Y(new mE({
    id: `insertBestCompletion`,
    precondition: b.and(T.textInputFocus, b.equals(`config.editor.tabCompletion`, `on`), pT.AtEnd, $.Visible.toNegated(), _T.OtherSuggestions.toNegated(), Kw.InSnippetMode.toNegated()),
    handler: (e2, t2) => {
      e2.triggerSuggestAndAcceptBest(tc(t2) ? {
        fallback: `tab`,
        ...t2
      } : {
        fallback: `tab`
      });
    },
    kbOpts: {
      weight: pE,
      primary: 2
    }
  })), Y(new mE({
    id: `insertNextSuggestion`,
    precondition: b.and(T.textInputFocus, b.equals(`config.editor.tabCompletion`, `on`), _T.OtherSuggestions, $.Visible.toNegated(), Kw.InSnippetMode.toNegated()),
    handler: (e2) => e2.acceptNextSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 2
    }
  })), Y(new mE({
    id: `insertPrevSuggestion`,
    precondition: b.and(T.textInputFocus, b.equals(`config.editor.tabCompletion`, `on`), _T.OtherSuggestions, $.Visible.toNegated(), Kw.InSnippetMode.toNegated()),
    handler: (e2) => e2.acceptPrevSuggestion(),
    kbOpts: {
      weight: pE,
      kbExpr: T.textInputFocus,
      primary: 1026
    }
  })), J(class extends w {
    constructor() {
      super({
        id: `editor.action.resetSuggestSize`,
        label: U(`suggest.reset.label`, `Reset Suggest Widget Size`),
        alias: `Reset Suggest Widget Size`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      var _a3;
      (_a3 = uE.get(t2)) == null ? void 0 : _a3.resetWidgetSize();
    }
  });
  var hE = class extends S {
    get selectedItem() {
      return this._currentSuggestItemInfo;
    }
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.suggestControllerPreselector = t2, this.onWillAccept = n2, this.isSuggestWidgetVisible = false, this.isShiftKeyPressed = false, this._isActive = false, this._currentSuggestItemInfo = void 0, this._onDidSelectedItemChange = this._register(new E()), this.onDidSelectedItemChange = this._onDidSelectedItemChange.event, this._register(e2.onKeyDown((e3) => {
        e3.shiftKey && !this.isShiftKeyPressed && (this.isShiftKeyPressed = true, this.update(this._isActive));
      })), this._register(e2.onKeyUp((e3) => {
        e3.shiftKey && this.isShiftKeyPressed && (this.isShiftKeyPressed = false, this.update(this._isActive));
      }));
      let r2 = uE.get(this.editor);
      if (r2) {
        this._register(r2.registerSelector({
          priority: 100,
          select: (e4, t4, n3) => {
            let i2 = this.editor.getModel();
            if (!i2) return -1;
            let a2 = this.suggestControllerPreselector(), o2 = a2 ? KC(a2, i2) : void 0;
            if (!o2) return -1;
            let s2 = N.lift(t4), c2 = n3.map((e5, t5) => {
              let n4 = gE.fromSuggestion(r2, i2, s2, e5, this.isShiftKeyPressed), a3 = KC(n4.toSingleTextEdit(), i2), c3 = qC(o2, a3);
              return {
                index: t5,
                valid: c3,
                prefixLength: a3.text.length,
                suggestItem: e5
              };
            }).filter((e5) => e5 && e5.valid && e5.prefixLength > 0), l2 = So(c2, Yi((e5) => e5.prefixLength, Ic));
            return l2 ? l2.index : -1;
          }
        }));
        let e3 = false, t3 = () => {
          e3 || (e3 = true, this._register(r2.widget.value.onDidShow(() => {
            this.isSuggestWidgetVisible = true, this.update(true);
          })), this._register(r2.widget.value.onDidHide(() => {
            this.isSuggestWidgetVisible = false, this.update(false);
          })), this._register(r2.widget.value.onDidFocus(() => {
            this.isSuggestWidgetVisible = true, this.update(true);
          })));
        };
        this._register(ze.once(r2.model.onDidTrigger)((e4) => {
          t3();
        })), this._register(r2.onWillInsertSuggestItem((e4) => {
          let t4 = this.editor.getPosition(), n3 = this.editor.getModel();
          if (!t4 || !n3) return;
          let i2 = gE.fromSuggestion(r2, n3, t4, e4.item, this.isShiftKeyPressed);
          this.onWillAccept(i2);
        }));
      }
      this.update(this._isActive);
    }
    update(e2) {
      let t2 = this.getSuggestItemInfo();
      (this._isActive !== e2 || !_E(this._currentSuggestItemInfo, t2)) && (this._isActive = e2, this._currentSuggestItemInfo = t2, this._onDidSelectedItemChange.fire());
    }
    getSuggestItemInfo() {
      let e2 = uE.get(this.editor);
      if (!e2 || !this.isSuggestWidgetVisible) return;
      let t2 = e2.widget.value.getFocusedItem(), n2 = this.editor.getPosition(), r2 = this.editor.getModel();
      if (!(!t2 || !n2 || !r2)) return gE.fromSuggestion(e2, r2, n2, t2.item, this.isShiftKeyPressed);
    }
    stopForceRenderingAbove() {
      let e2 = uE.get(this.editor);
      e2 == null ? void 0 : e2.stopForceRenderingAbove();
    }
    forceRenderingAbove() {
      let e2 = uE.get(this.editor);
      e2 == null ? void 0 : e2.forceRenderingAbove();
    }
  }, gE = class e2 {
    static fromSuggestion(t2, n2, r2, i2, a2) {
      let { insertText: o2 } = i2.completion, s2 = false;
      if (i2.completion.insertTextRules & 4) {
        let e3 = new Gd().parse(o2);
        e3.children.length < 100 && Vw.adjustWhitespace(n2, r2, true, e3), o2 = e3.toString(), s2 = true;
      }
      let c2 = t2.getOverwriteInfo(i2, a2);
      return new e2(P.fromPositions(r2.delta(0, -c2.overwriteBefore), r2.delta(0, Math.max(c2.overwriteAfter, 0))), o2, i2.completion.kind, s2);
    }
    constructor(e3, t2, n2, r2) {
      this.range = e3, this.insertText = t2, this.completionItemKind = n2, this.isSnippetText = r2;
    }
    equals(e3) {
      return this.range.equalsRange(e3.range) && this.insertText === e3.insertText && this.completionItemKind === e3.completionItemKind && this.isSnippetText === e3.isSnippetText;
    }
    toSelectedSuggestionInfo() {
      return new br(this.range, this.insertText, this.completionItemKind, this.isSnippetText);
    }
    toSingleTextEdit() {
      return new kr(this.range, this.insertText);
    }
  };
  function _E(e2, t2) {
    return e2 === t2 ? true : !e2 || !t2 ? false : e2.equals(t2);
  }
  var vE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, yE = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, bE;
  let xE = (_ra = class extends S {
    static get(e2) {
      return e2.getContribution(bE.ID);
    }
    constructor(e2, t2, n2, r2, a2, o2, s2, c2, l2, u2) {
      super(), this.editor = e2, this._instantiationService = t2, this._contextKeyService = n2, this._configurationService = r2, this._commandService = a2, this._debounceService = o2, this._languageFeaturesService = s2, this._accessibilitySignalService = c2, this._keybindingService = l2, this._accessibilityService = u2, this._editorObs = Lc(this.editor), this._positions = H(this, (e3) => {
        var _a3;
        return ((_a3 = this._editorObs.selections.read(e3)) == null ? void 0 : _a3.map((e4) => e4.getEndPosition())) ?? [
          new N(1, 1)
        ];
      }), this._suggestWidgetAdaptor = this._register(new hE(this.editor, () => {
        var _a3, _b3;
        return this._editorObs.forceUpdate(), (_b3 = (_a3 = this.model.get()) == null ? void 0 : _a3.selectedInlineCompletion.get()) == null ? void 0 : _b3.toSingleTextEdit(void 0);
      }, (e3) => this._editorObs.forceUpdate((t3) => {
        var _a3;
        (_a3 = this.model.get()) == null ? void 0 : _a3.handleSuggestAccepted(e3);
      }))), this._suggestWidgetSelectedItem = zc(this, (e3) => this._suggestWidgetAdaptor.onDidSelectedItemChange(() => {
        this._editorObs.forceUpdate((t3) => e3(void 0));
      }), () => this._suggestWidgetAdaptor.selectedItem), this._enabledInConfig = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(62).enabled), this._isScreenReaderEnabled = zc(this, this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized()), this._editorDictationInProgress = zc(this, this._contextKeyService.onDidChangeContext, () => this._contextKeyService.getContext(this.editor.getDomNode()).getValue(`editorDictation.inProgress`) === true), this._enabled = H(this, (e3) => this._enabledInConfig.read(e3) && (!this._isScreenReaderEnabled.read(e3) || !this._editorDictationInProgress.read(e3))), this._debounceValue = this._debounceService.for(this._languageFeaturesService.inlineCompletionsProvider, `InlineCompletionsDebounce`, {
        min: 50,
        max: 50
      }), this.model = ba(this, (e3) => {
        if (this._editorObs.isReadonly.read(e3)) return;
        let t3 = this._editorObs.model.read(e3);
        if (!t3) return;
        let n3 = this._instantiationService.createInstance(Xw, t3, this._suggestWidgetSelectedItem, this._editorObs.versionId, this._positions, this._debounceValue, zc(this.editor.onDidChangeConfiguration, () => this.editor.getOption(119).preview), zc(this.editor.onDidChangeConfiguration, () => this.editor.getOption(119).previewMode), zc(this.editor.onDidChangeConfiguration, () => this.editor.getOption(62).mode), this._enabled);
        return n3;
      }).recomputeInitiallyAndOnChange(this._store), this._ghostTexts = H(this, (e3) => {
        let t3 = this.model.read(e3);
        return (t3 == null ? void 0 : t3.ghostTexts.read(e3)) ?? [];
      }), this._stablizedGhostTexts = SE(this._ghostTexts, this._store), this._ghostTextWidgets = Sc(this, this._stablizedGhostTexts, (e3, t3) => t3.add(this._instantiationService.createInstance(PC, this.editor, {
        ghostText: e3,
        minReservedLineCount: Qi(0),
        targetTextModel: this.model.map((e4) => e4 == null ? void 0 : e4.textModel)
      }))).recomputeInitiallyAndOnChange(this._store), this._playAccessibilitySignal = Bc(this), this._fontFamily = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(62).fontFamily), this._register(new vC(this._contextKeyService, this.model)), this._register(rl(this._editorObs.onDidType, (e3, t3) => {
        var _a3;
        this._enabled.get() && ((_a3 = this.model.get()) == null ? void 0 : _a3.trigger());
      })), this._register(this._commandService.onDidExecuteCommand((t3) => {
        let n3 = /* @__PURE__ */ new Set([
          le.Tab.id,
          le.DeleteLeft.id,
          le.DeleteRight.id,
          Qh,
          `acceptSelectedSuggestion`
        ]);
        n3.has(t3.commandId) && e2.hasTextFocus() && this._enabled.get() && this._editorObs.forceUpdate((e3) => {
          var _a3;
          (_a3 = this.model.get()) == null ? void 0 : _a3.trigger(e3);
        });
      })), this._register(rl(this._editorObs.selections, (e3, t3) => {
        var _a3;
        t3.some((e4) => e4.reason === 3 || e4.source === `api`) && ((_a3 = this.model.get()) == null ? void 0 : _a3.stop());
      })), this._register(this.editor.onDidBlurEditorWidget(() => {
        this._contextKeyService.getContextKeyValue(`accessibleViewIsShown`) || this._configurationService.getValue(`editor.inlineSuggest.keepOnBlur`) || e2.getOption(62).keepOnBlur || sg.dropDownVisible || Kl((e3) => {
          var _a3;
          (_a3 = this.model.get()) == null ? void 0 : _a3.stop(e3);
        });
      })), this._register(Ni((e3) => {
        var _a3;
        let t3 = (_a3 = this.model.read(e3)) == null ? void 0 : _a3.state.read(e3);
        (t3 == null ? void 0 : t3.suggestItem) ? t3.primaryGhostText.lineCount >= 2 && this._suggestWidgetAdaptor.forceRenderingAbove() : this._suggestWidgetAdaptor.stopForceRenderingAbove();
      })), this._register(Hl(() => {
        this._suggestWidgetAdaptor.stopForceRenderingAbove();
      }));
      let d2 = Sa(this, (e3, t3) => {
        var _a3;
        let n3 = this.model.read(e3), r3 = n3 == null ? void 0 : n3.state.read(e3);
        return this._suggestWidgetSelectedItem.get() ? t3 : (_a3 = r3 == null ? void 0 : r3.inlineCompletion) == null ? void 0 : _a3.semanticId;
      });
      this._register(il(H((e3) => (this._playAccessibilitySignal.read(e3), d2.read(e3), {})), async (e3, t3, n3) => {
        let r3 = this.model.get(), a3 = r3 == null ? void 0 : r3.state.get();
        if (!a3 || !r3) return;
        let o3 = r3.textModel.getLineContent(a3.primaryGhostText.lineNumber);
        await Bl(50, Vi(n3)), await Zl(this._suggestWidgetSelectedItem, ac, () => false, Vi(n3)), await this._accessibilitySignalService.playSignal(i.inlineSuggestion), this.editor.getOption(8) && this._provideScreenReaderUpdate(a3.primaryGhostText.renderForScreenReader(o3));
      })), this._register(new ig(this.editor, this.model, this._instantiationService)), this._register(yC(H((e3) => {
        let t3 = this._fontFamily.read(e3);
        return t3 === `` || t3 === `default` ? `` : `
.monaco-editor .ghost-text-decoration,
.monaco-editor .ghost-text-decoration-preview,
.monaco-editor .ghost-text {
	font-family: ${t3};
}`;
      }))), this._register(this._configurationService.onDidChangeConfiguration((e3) => {
        e3.affectsConfiguration(`accessibility.verbosity.inlineCompletions`) && this.editor.updateOptions({
          inlineCompletionsAccessibilityVerbose: this._configurationService.getValue(`accessibility.verbosity.inlineCompletions`)
        });
      })), this.editor.updateOptions({
        inlineCompletionsAccessibilityVerbose: this._configurationService.getValue(`accessibility.verbosity.inlineCompletions`)
      });
    }
    playAccessibilitySignal(e2) {
      this._playAccessibilitySignal.trigger(e2);
    }
    _provideScreenReaderUpdate(e2) {
      let t2 = this._contextKeyService.getContextKeyValue(`accessibleViewIsShown`), n2 = this._keybindingService.lookupKeybinding(`editor.action.accessibleView`), r2;
      !t2 && n2 && this.editor.getOption(150) && (r2 = U(`showAccessibleViewHint`, `Inspect this in the accessible view ({0})`, n2.getAriaLabel())), Ci(r2 ? e2 + `, ` + r2 : e2);
    }
    shouldShowHoverAt(e2) {
      var _a3;
      let t2 = (_a3 = this.model.get()) == null ? void 0 : _a3.primaryGhostText.get();
      return t2 ? t2.parts.some((n2) => e2.containsPosition(new N(t2.lineNumber, n2.column))) : false;
    }
    shouldShowHoverAtViewZone(e2) {
      var _a3;
      return ((_a3 = this._ghostTextWidgets.get()[0]) == null ? void 0 : _a3.ownsViewZone(e2)) ?? false;
    }
  }, bE = _ra, _ra.ID = `editor.contrib.inlineCompletionsController`, _ra);
  xE = bE = vE([
    yE(1, k),
    yE(2, O),
    yE(3, D),
    yE(4, mt),
    yE(5, Et),
    yE(6, A),
    yE(7, ut),
    yE(8, Ct),
    yE(9, lt)
  ], xE);
  function SE(e2, t2) {
    let n2 = Hc(`result`, []), r2 = [];
    return t2.add(Ni((t3) => {
      let i2 = e2.read(t3);
      Kl((e3) => {
        if (i2.length !== r2.length) {
          r2.length = i2.length;
          for (let e4 = 0; e4 < r2.length; e4++) r2[e4] || (r2[e4] = Hc(`item`, i2[e4]));
          n2.set([
            ...r2
          ], e3);
        }
        r2.forEach((t4, n3) => t4.set(i2[n3], e3));
      });
    })), n2;
  }
  var CE = (_sa = class extends w {
    constructor() {
      super({
        id: _sa.ID,
        label: U(`action.inlineSuggest.showNext`, `Show Next Inline Suggestion`),
        alias: `Show Next Inline Suggestion`,
        precondition: b.and(T.writable, vC.inlineSuggestionVisible),
        kbOpts: {
          weight: 100,
          primary: 606
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xE.get(t2);
      (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.next();
    }
  }, _sa.ID = eg, _sa), wE = (_ta = class extends w {
    constructor() {
      super({
        id: _ta.ID,
        label: U(`action.inlineSuggest.showPrevious`, `Show Previous Inline Suggestion`),
        alias: `Show Previous Inline Suggestion`,
        precondition: b.and(T.writable, vC.inlineSuggestionVisible),
        kbOpts: {
          weight: 100,
          primary: 604
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xE.get(t2);
      (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.previous();
    }
  }, _ta.ID = $h, _ta), TE = class extends w {
    constructor() {
      super({
        id: `editor.action.inlineSuggest.trigger`,
        label: U(`action.inlineSuggest.trigger`, `Trigger Inline Suggestion`),
        alias: `Trigger Inline Suggestion`,
        precondition: T.writable
      });
    }
    async run(e2, t2) {
      let n2 = xE.get(t2);
      await Mi(async (e3) => {
        var _a3;
        await ((_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.triggerExplicitly(e3)), n2 == null ? void 0 : n2.playAccessibilitySignal(e3);
      });
    }
  }, EE = class extends w {
    constructor() {
      super({
        id: `editor.action.inlineSuggest.acceptNextWord`,
        label: U(`action.inlineSuggest.acceptNextWord`, `Accept Next Word Of Inline Suggestion`),
        alias: `Accept Next Word Of Inline Suggestion`,
        precondition: b.and(T.writable, vC.inlineSuggestionVisible),
        kbOpts: {
          weight: 101,
          primary: 2065,
          kbExpr: b.and(T.writable, vC.inlineSuggestionVisible)
        },
        menuOpts: [
          {
            menuId: j.InlineSuggestionToolbar,
            title: U(`acceptWord`, `Accept Word`),
            group: `primary`,
            order: 2
          }
        ]
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xE.get(t2);
      await ((_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.acceptNextWord(n2.editor));
    }
  }, DE = class extends w {
    constructor() {
      super({
        id: `editor.action.inlineSuggest.acceptNextLine`,
        label: U(`action.inlineSuggest.acceptNextLine`, `Accept Next Line Of Inline Suggestion`),
        alias: `Accept Next Line Of Inline Suggestion`,
        precondition: b.and(T.writable, vC.inlineSuggestionVisible),
        kbOpts: {
          weight: 101
        },
        menuOpts: [
          {
            menuId: j.InlineSuggestionToolbar,
            title: U(`acceptLine`, `Accept Line`),
            group: `secondary`,
            order: 2
          }
        ]
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xE.get(t2);
      await ((_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.acceptNextLine(n2.editor));
    }
  }, OE = class extends w {
    constructor() {
      super({
        id: Qh,
        label: U(`action.inlineSuggest.accept`, `Accept Inline Suggestion`),
        alias: `Accept Inline Suggestion`,
        precondition: vC.inlineSuggestionVisible,
        menuOpts: [
          {
            menuId: j.InlineSuggestionToolbar,
            title: U(`accept`, `Accept`),
            group: `primary`,
            order: 1
          }
        ],
        kbOpts: {
          primary: 2,
          weight: 200,
          kbExpr: b.and(vC.inlineSuggestionVisible, T.tabMovesFocus.toNegated(), vC.inlineSuggestionHasIndentationLessThanTabSize, $.Visible.toNegated(), T.hoverFocused.toNegated())
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xE.get(t2);
      n2 && ((_a3 = n2.model.get()) == null ? void 0 : _a3.accept(n2.editor), n2.editor.focus());
    }
  }, kE = (_ua = class extends w {
    constructor() {
      super({
        id: _ua.ID,
        label: U(`action.inlineSuggest.hide`, `Hide Inline Suggestion`),
        alias: `Hide Inline Suggestion`,
        precondition: vC.inlineSuggestionVisible,
        kbOpts: {
          weight: 100,
          primary: 9
        }
      });
    }
    async run(e2, t2) {
      let n2 = xE.get(t2);
      Kl((e3) => {
        var _a3;
        (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.stop(e3);
      });
    }
  }, _ua.ID = `editor.action.inlineSuggest.hide`, _ua), AE = (_va = class extends o {
    constructor() {
      super({
        id: _va.ID,
        title: U(`action.inlineSuggest.alwaysShowToolbar`, `Always Show Toolbar`),
        f1: false,
        precondition: void 0,
        menu: [
          {
            id: j.InlineSuggestionToolbar,
            group: `secondary`,
            order: 10
          }
        ],
        toggled: b.equals(`config.editor.inlineSuggest.showToolbar`, `always`)
      });
    }
    async run(e2, t2) {
      let n2 = e2.get(D), r2 = n2.getValue(`editor.inlineSuggest.showToolbar`), i2 = r2 === `always` ? `onHover` : `always`;
      n2.updateValue(`editor.inlineSuggest.showToolbar`, i2);
    }
  }, _va.ID = `editor.action.inlineSuggest.toggleAlwaysShowToolbar`, _va), jE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ME = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, NE = class {
    constructor(e2, t2, n2) {
      this.owner = e2, this.range = t2, this.controller = n2;
    }
    isValidForHoverAnchor(e2) {
      return e2.type === 1 && this.range.startColumn <= e2.range.startColumn && this.range.endColumn >= e2.range.endColumn;
    }
  };
  let PE = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this._editor = e2, this._languageService = t2, this._openerService = n2, this.accessibilityService = r2, this._instantiationService = i2, this._telemetryService = a2, this.hoverOrdinal = 4;
    }
    suggestHoverAnchor(e2) {
      let t2 = xE.get(this._editor);
      if (!t2) return null;
      let n2 = e2.target;
      if (n2.type === 8) {
        let r2 = n2.detail;
        if (t2.shouldShowHoverAtViewZone(r2.viewZoneId)) return new Th(1e3, this, P.fromPositions(this._editor.getModel().validatePosition(r2.positionBefore || r2.position)), e2.event.posx, e2.event.posy, false);
      }
      if (n2.type === 7 && t2.shouldShowHoverAt(n2.range)) return new Th(1e3, this, n2.range, e2.event.posx, e2.event.posy, false);
      if (n2.type === 6) {
        let r2 = n2.detail.mightBeForeignElement;
        if (r2 && t2.shouldShowHoverAt(n2.range)) return new Th(1e3, this, n2.range, e2.event.posx, e2.event.posy, false);
      }
      return null;
    }
    computeSync(e2, t2) {
      if (this._editor.getOption(62).showToolbar !== `onHover`) return [];
      let n2 = xE.get(this._editor);
      return n2 && n2.shouldShowHoverAt(e2.range) ? [
        new NE(this, e2.range, n2)
      ] : [];
    }
    renderHoverParts(e2, t2) {
      let n2 = new C(), r2 = t2[0];
      this._telemetryService.publicLog2(`inlineCompletionHover.shown`), this.accessibilityService.isScreenReaderOptimized() && !this._editor.getOption(8) && n2.add(this.renderScreenReaderText(e2, r2));
      let i2 = r2.controller.model.get(), a2 = this._instantiationService.createInstance(sg, this._editor, false, Qi(null), i2.selectedInlineCompletionIndex, i2.inlineCompletionsCount, i2.activeCommands), o2 = a2.getDomNode();
      e2.fragment.appendChild(o2), i2.triggerExplicitly(), n2.add(a2);
      let s2 = {
        hoverPart: r2,
        hoverElement: o2,
        dispose() {
          n2.dispose();
        }
      };
      return new Eh([
        s2
      ]);
    }
    renderScreenReaderText(e2, t2) {
      let n2 = new C(), i2 = r, a2 = i2(`div.hover-row.markdown-hover`), o2 = B(a2, i2(`div.hover-contents`, {
        "aria-live": `assertive`
      })), s2 = n2.add(new En({
        editor: this._editor
      }, this._languageService, this._openerService)), c2 = (t3) => {
        n2.add(s2.onDidRenderAsync(() => {
          o2.className = `hover-contents code-hover-contents`, e2.onContentsChanged();
        }));
        let r2 = U(`inlineSuggestionFollows`, `Suggestion:`), i3 = n2.add(s2.render(new Dn().appendText(r2).appendCodeblock(`text`, t3)));
        o2.replaceChildren(i3.element);
      };
      return n2.add(Ni((e3) => {
        var _a3;
        let n3 = (_a3 = t2.controller.model.read(e3)) == null ? void 0 : _a3.primaryGhostText.read(e3);
        if (n3) {
          let e4 = this._editor.getModel().getLineContent(n3.lineNumber);
          c2(n3.renderForScreenReader(e4));
        } else bl(o2);
      })), e2.fragment.appendChild(a2), n2;
    }
  };
  PE = jE([
    ME(1, Dt),
    ME(2, It),
    ME(3, lt),
    ME(4, k),
    ME(5, Ht)
  ], PE);
  var FE = class {
  };
  const IE = new class {
    constructor() {
      this._implementations = [];
    }
    register(e2) {
      return this._implementations.push(e2), {
        dispose: () => {
          let t2 = this._implementations.indexOf(e2);
          t2 !== -1 && this._implementations.splice(t2, 1);
        }
      };
    }
    getImplementations() {
      return this._implementations;
    }
  }();
  X(xE.ID, xE, 3), J(TE), J(CE), J(wE), J(EE), J(DE), J(OE), J(kE), K(AE), Dh.register(PE), IE.register(new FE());
  var LE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, RE = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, zE;
  let BE = (_wa = class {
    constructor(e2, t2, n2, r2) {
      this.textModelResolverService = t2, this.languageService = n2, this.languageFeaturesService = r2, this.toUnhook = new C(), this.toUnhookForKeyboard = new C(), this.currentWordAtPosition = null, this.previousPromise = null, this.editor = e2, this.linkDecorations = this.editor.createDecorationsCollection();
      let i2 = new t_(e2);
      this.toUnhook.add(i2), this.toUnhook.add(i2.onMouseMoveOrRelevantKeyDown(([e3, t3]) => {
        this.startFindDefinitionFromMouse(e3, t3 ?? void 0);
      })), this.toUnhook.add(i2.onExecute((e3) => {
        this.isEnabled(e3) && this.gotoDefinition(e3.target.position, e3.hasSideBySideModifier).catch((e4) => {
          G(e4);
        }).finally(() => {
          this.removeLinkDecorations();
        });
      })), this.toUnhook.add(i2.onCancel(() => {
        this.removeLinkDecorations(), this.currentWordAtPosition = null;
      }));
    }
    static get(e2) {
      return e2.getContribution(zE.ID);
    }
    async startFindDefinitionFromCursor(e2) {
      await this.startFindDefinition(e2), this.toUnhookForKeyboard.add(this.editor.onDidChangeCursorPosition(() => {
        this.currentWordAtPosition = null, this.removeLinkDecorations(), this.toUnhookForKeyboard.clear();
      })), this.toUnhookForKeyboard.add(this.editor.onKeyDown((e3) => {
        e3 && (this.currentWordAtPosition = null, this.removeLinkDecorations(), this.toUnhookForKeyboard.clear());
      }));
    }
    startFindDefinitionFromMouse(e2, t2) {
      if (e2.target.type === 9 && this.linkDecorations.length > 0) return;
      if (!this.editor.hasModel() || !this.isEnabled(e2, t2)) {
        this.currentWordAtPosition = null, this.removeLinkDecorations();
        return;
      }
      let n2 = e2.target.position;
      this.startFindDefinition(n2);
    }
    async startFindDefinition(e2) {
      var _a3;
      this.toUnhookForKeyboard.clear();
      let t2 = e2 ? (_a3 = this.editor.getModel()) == null ? void 0 : _a3.getWordAtPosition(e2) : null;
      if (!t2) {
        this.currentWordAtPosition = null, this.removeLinkDecorations();
        return;
      }
      if (this.currentWordAtPosition && this.currentWordAtPosition.startColumn === t2.startColumn && this.currentWordAtPosition.endColumn === t2.endColumn && this.currentWordAtPosition.word === t2.word) return;
      this.currentWordAtPosition = t2;
      let n2 = new Pe(this.editor, 15);
      this.previousPromise && (this.previousPromise.cancel(), this.previousPromise = null), this.previousPromise = sa((t3) => this.findDefinition(e2, t3));
      let r2;
      try {
        r2 = await this.previousPromise;
      } catch (e3) {
        G(e3);
        return;
      }
      if (!r2 || !r2.length || !n2.validate(this.editor)) {
        this.removeLinkDecorations();
        return;
      }
      let i2 = r2[0].originSelectionRange ? P.lift(r2[0].originSelectionRange) : new P(e2.lineNumber, t2.startColumn, e2.lineNumber, t2.endColumn);
      if (r2.length > 1) {
        let e3 = i2;
        for (let { originSelectionRange: t3 } of r2) t3 && (e3 = P.plusRange(e3, t3));
        this.addDecoration(e3, new Dn().appendText(U(`multipleResults`, `Click to show {0} definitions.`, r2.length)));
      } else {
        let e3 = r2[0];
        if (!e3.uri) return;
        this.textModelResolverService.createModelReference(e3.uri).then((t3) => {
          if (!t3.object || !t3.object.textEditorModel) {
            t3.dispose();
            return;
          }
          let { object: { textEditorModel: n3 } } = t3, { startLineNumber: r3 } = e3.range;
          if (r3 < 1 || r3 > n3.getLineCount()) {
            t3.dispose();
            return;
          }
          let a2 = this.getPreviewValue(n3, r3, e3), o2 = this.languageService.guessLanguageIdByFilepathOrFirstLine(n3.uri);
          this.addDecoration(i2, a2 ? new Dn().appendCodeblock(o2 || ``, a2) : void 0), t3.dispose();
        });
      }
    }
    getPreviewValue(e2, t2, n2) {
      let r2 = n2.range, i2 = r2.endLineNumber - r2.startLineNumber;
      i2 >= zE.MAX_SOURCE_PREVIEW_LINES && (r2 = this.getPreviewRangeBasedOnIndentation(e2, t2));
      let a2 = this.stripIndentationFromPreviewRange(e2, t2, r2);
      return a2;
    }
    stripIndentationFromPreviewRange(e2, t2, n2) {
      let r2 = e2.getLineFirstNonWhitespaceColumn(t2), i2 = r2;
      for (let r3 = t2 + 1; r3 < n2.endLineNumber; r3++) {
        let t3 = e2.getLineFirstNonWhitespaceColumn(r3);
        i2 = Math.min(i2, t3);
      }
      let a2 = e2.getValueInRange(n2).replace(RegExp(`^\\s{${i2 - 1}}`, `gm`), ``).trim();
      return a2;
    }
    getPreviewRangeBasedOnIndentation(e2, t2) {
      let n2 = e2.getLineFirstNonWhitespaceColumn(t2), r2 = Math.min(e2.getLineCount(), t2 + zE.MAX_SOURCE_PREVIEW_LINES), i2 = t2 + 1;
      for (; i2 < r2; i2++) {
        let t3 = e2.getLineFirstNonWhitespaceColumn(i2);
        if (n2 === t3) break;
      }
      return new P(t2, 1, i2 + 1, 1);
    }
    addDecoration(e2, t2) {
      let n2 = {
        range: e2,
        options: {
          description: `goto-definition-link`,
          inlineClassName: `goto-definition-link`,
          hoverMessage: t2
        }
      };
      this.linkDecorations.set([
        n2
      ]);
    }
    removeLinkDecorations() {
      this.linkDecorations.clear();
    }
    isEnabled(e2, t2) {
      var _a3;
      return this.editor.hasModel() && e2.isLeftClick && e2.isNoneOrSingleMouseDown && e2.target.type === 6 && !(((_a3 = e2.target.detail.injectedText) == null ? void 0 : _a3.options) instanceof Fn) && (e2.hasTriggerModifier || (t2 ? t2.keyCodeIsTriggerKey : false)) && this.languageFeaturesService.definitionProvider.has(this.editor.getModel());
    }
    findDefinition(e2, t2) {
      let n2 = this.editor.getModel();
      return n2 ? xv(this.languageFeaturesService.definitionProvider, n2, e2, false, t2) : Promise.resolve(null);
    }
    gotoDefinition(e2, t2) {
      return this.editor.setPosition(e2), this.editor.invokeWithinContext((e3) => {
        let n2 = !t2 && this.editor.getOption(89) && !this.isInPeekEditor(e3), r2 = new kv({
          openToSide: t2,
          openInPeek: n2,
          muteMessage: true
        }, {
          title: {
            value: ``,
            original: ``
          },
          id: ``,
          precondition: void 0
        });
        return r2.run(e3);
      });
    }
    isInPeekEditor(e2) {
      let t2 = e2.get(O);
      return y_.inPeekEditor.getValue(t2);
    }
    dispose() {
      this.toUnhook.dispose(), this.toUnhookForKeyboard.dispose();
    }
  }, zE = _wa, _wa.ID = `editor.contrib.gotodefinitionatposition`, _wa.MAX_SOURCE_PREVIEW_LINES = 8, _wa);
  BE = zE = LE([
    RE(1, Ut),
    RE(2, Dt),
    RE(3, A)
  ], BE), X(BE.ID, BE, 2);
  var VE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, HE = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, UE = class {
    constructor(e2, t2, n2) {
      this.marker = e2, this.index = t2, this.total = n2;
    }
  };
  let WE = class {
    constructor(e2, t2, n2) {
      this._markerService = t2, this._configService = n2, this._onDidChange = new E(), this.onDidChange = this._onDidChange.event, this._dispoables = new C(), this._markers = [], this._nextIdx = -1, R.isUri(e2) ? this._resourceFilter = (t3) => t3.toString() === e2.toString() : e2 && (this._resourceFilter = e2);
      let r2 = this._configService.getValue(`problems.sortOrder`), i2 = (e3, t3) => {
        let n3 = Ji(e3.resource.toString(), t3.resource.toString());
        return n3 === 0 && (n3 = r2 === `position` ? P.compareRangesUsingStarts(e3, t3) || kn.compare(e3.severity, t3.severity) : kn.compare(e3.severity, t3.severity) || P.compareRangesUsingStarts(e3, t3)), n3;
      }, a2 = () => {
        this._markers = this._markerService.read({
          resource: R.isUri(e2) ? e2 : void 0,
          severities: kn.Error | kn.Warning | kn.Info
        }), typeof e2 == `function` && (this._markers = this._markers.filter((e3) => this._resourceFilter(e3.resource))), this._markers.sort(i2);
      };
      a2(), this._dispoables.add(t2.onMarkerChanged((e3) => {
        (!this._resourceFilter || e3.some((e4) => this._resourceFilter(e4))) && (a2(), this._nextIdx = -1, this._onDidChange.fire());
      }));
    }
    dispose() {
      this._dispoables.dispose(), this._onDidChange.dispose();
    }
    matches(e2) {
      return !this._resourceFilter && !e2 ? true : !this._resourceFilter || !e2 ? false : this._resourceFilter(e2);
    }
    get selected() {
      let e2 = this._markers[this._nextIdx];
      return e2 && new UE(e2, this._nextIdx + 1, this._markers.length);
    }
    _initIdx(e2, t2, n2) {
      let r2 = false, i2 = this._markers.findIndex((t3) => t3.resource.toString() === e2.uri.toString());
      i2 < 0 && (i2 = zi(this._markers, {
        resource: e2.uri
      }, (e3, t3) => Ji(e3.resource.toString(), t3.resource.toString())), i2 < 0 && (i2 = ~i2));
      for (let n3 = i2; n3 < this._markers.length; n3++) {
        let i3 = P.lift(this._markers[n3]);
        if (i3.isEmpty()) {
          let t3 = e2.getWordAtPosition(i3.getStartPosition());
          t3 && (i3 = new P(i3.startLineNumber, t3.startColumn, i3.startLineNumber, t3.endColumn));
        }
        if (t2 && (i3.containsPosition(t2) || t2.isBeforeOrEqual(i3.getStartPosition()))) {
          this._nextIdx = n3, r2 = true;
          break;
        }
        if (this._markers[n3].resource.toString() !== e2.uri.toString()) break;
      }
      r2 || (this._nextIdx = n2 ? 0 : this._markers.length - 1), this._nextIdx < 0 && (this._nextIdx = this._markers.length - 1);
    }
    resetIndex() {
      this._nextIdx = -1;
    }
    move(e2, t2, n2) {
      if (this._markers.length === 0) return false;
      let r2 = this._nextIdx;
      return this._nextIdx === -1 ? this._initIdx(t2, n2, e2) : e2 ? this._nextIdx = (this._nextIdx + 1) % this._markers.length : e2 || (this._nextIdx = (this._nextIdx - 1 + this._markers.length) % this._markers.length), r2 !== this._nextIdx;
    }
    find(e2, t2) {
      let n2 = this._markers.findIndex((t3) => t3.resource.toString() === e2.toString());
      if (!(n2 < 0)) {
        for (; n2 < this._markers.length; n2++) if (P.containsPosition(this._markers[n2], t2)) return new UE(this._markers[n2], n2 + 1, this._markers.length);
      }
    }
  };
  WE = VE([
    HE(1, Mt),
    HE(2, D)
  ], WE);
  const GE = ca(`IMarkerNavigationService`);
  let KE = class {
    constructor(e2, t2) {
      this._markerService = e2, this._configService = t2, this._provider = new wn();
    }
    getMarkerList(e2) {
      for (let t2 of this._provider) {
        let n2 = t2.getMarkerList(e2);
        if (n2) return n2;
      }
      return new WE(e2, this._markerService, this._configService);
    }
  };
  KE = VE([
    HE(0, Mt),
    HE(1, D)
  ], KE), fl(GE, KE, 1);
  var qE;
  (function(e2) {
    function t2(e3) {
      switch (e3) {
        case Dl.Ignore:
          return `severity-ignore ` + L.asClassName(_.info);
        case Dl.Info:
          return L.asClassName(_.info);
        case Dl.Warning:
          return L.asClassName(_.warning);
        case Dl.Error:
          return L.asClassName(_.error);
        default:
          return ``;
      }
    }
    e2.className = t2;
  })(qE || (qE = {}));
  var JE = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, YE = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, XE, ZE = class {
    constructor(e2, t2, n2, r2, i2) {
      this._openerService = r2, this._labelService = i2, this._lines = 0, this._longestLineLength = 0, this._relatedDiagnostics = /* @__PURE__ */ new WeakMap(), this._disposables = new C(), this._editor = t2;
      let a2 = document.createElement(`div`);
      a2.className = `descriptioncontainer`, this._messageBlock = document.createElement(`div`), this._messageBlock.classList.add(`message`), this._messageBlock.setAttribute(`aria-live`, `assertive`), this._messageBlock.setAttribute(`role`, `alert`), a2.appendChild(this._messageBlock), this._relatedBlock = document.createElement(`div`), a2.appendChild(this._relatedBlock), this._disposables.add(Si(this._relatedBlock, `click`, (e3) => {
        e3.preventDefault();
        let t3 = this._relatedDiagnostics.get(e3.target);
        t3 && n2(t3);
      })), this._scrollable = new vr(a2, {
        horizontal: 1,
        vertical: 1,
        useShadows: false,
        horizontalScrollbarSize: 6,
        verticalScrollbarSize: 6
      }), e2.appendChild(this._scrollable.getDomNode()), this._disposables.add(this._scrollable.onScroll((e3) => {
        a2.style.left = `-${e3.scrollLeft}px`, a2.style.top = `-${e3.scrollTop}px`;
      })), this._disposables.add(this._scrollable);
    }
    dispose() {
      Ra(this._disposables);
    }
    update(e2) {
      let { source: t2, message: n2, relatedInformation: i2, code: a2 } = e2, o2 = ((t2 == null ? void 0 : t2.length) || 0) + 2;
      a2 && (typeof a2 == `string` ? o2 += a2.length : o2 += a2.value.length);
      let s2 = jl(n2);
      this._lines = s2.length, this._longestLineLength = 0;
      for (let e3 of s2) this._longestLineLength = Math.max(e3.length + o2, this._longestLineLength);
      Ui(this._messageBlock), this._messageBlock.setAttribute(`aria-label`, this.getAriaLabel(e2)), this._editor.applyFontInfo(this._messageBlock);
      let c2 = this._messageBlock;
      for (let e3 of s2) c2 = document.createElement(`div`), c2.innerText = e3, e3 === `` && (c2.style.height = this._messageBlock.style.lineHeight), this._messageBlock.appendChild(c2);
      if (t2 || a2) {
        let e3 = document.createElement(`span`);
        if (e3.classList.add(`details`), c2.appendChild(e3), t2) {
          let n3 = document.createElement(`span`);
          n3.innerText = t2, n3.classList.add(`source`), e3.appendChild(n3);
        }
        if (a2) if (typeof a2 == `string`) {
          let t3 = document.createElement(`span`);
          t3.innerText = `(${a2})`, t3.classList.add(`code`), e3.appendChild(t3);
        } else {
          this._codeLink = r(`a.code-link`), this._codeLink.setAttribute(`href`, `${a2.target.toString()}`), this._codeLink.onclick = (e4) => {
            this._openerService.open(a2.target, {
              allowCommands: true
            }), e4.preventDefault(), e4.stopPropagation();
          };
          let t3 = B(this._codeLink, r(`span`));
          t3.innerText = a2.value, e3.appendChild(this._codeLink);
        }
      }
      if (Ui(this._relatedBlock), this._editor.applyFontInfo(this._relatedBlock), $s(i2)) {
        let e3 = this._relatedBlock.appendChild(document.createElement(`div`));
        e3.style.paddingTop = `${Math.floor(this._editor.getOption(67) * 0.66)}px`, this._lines += 1;
        for (let t3 of i2) {
          let n3 = document.createElement(`div`), r2 = document.createElement(`a`);
          r2.classList.add(`filename`), r2.innerText = `${this._labelService.getUriBasenameLabel(t3.resource)}(${t3.startLineNumber}, ${t3.startColumn}): `, r2.title = this._labelService.getUriLabel(t3.resource), this._relatedDiagnostics.set(r2, t3);
          let i3 = document.createElement(`span`);
          i3.innerText = t3.message, n3.appendChild(r2), n3.appendChild(i3), this._lines += 1, e3.appendChild(n3);
        }
      }
      let l2 = this._editor.getOption(50), u2 = Math.ceil(l2.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75), d2 = l2.lineHeight * this._lines;
      this._scrollable.setScrollDimensions({
        scrollWidth: u2,
        scrollHeight: d2
      });
    }
    layout(e2, t2) {
      this._scrollable.getDomNode().style.height = `${e2}px`, this._scrollable.getDomNode().style.width = `${t2}px`, this._scrollable.setScrollDimensions({
        width: t2,
        height: e2
      });
    }
    getHeightInLines() {
      return Math.min(17, this._lines);
    }
    getAriaLabel(e2) {
      let t2 = ``;
      switch (e2.severity) {
        case kn.Error:
          t2 = U(`Error`, `Error`);
          break;
        case kn.Warning:
          t2 = U(`Warning`, `Warning`);
          break;
        case kn.Info:
          t2 = U(`Info`, `Info`);
          break;
        case kn.Hint:
          t2 = U(`Hint`, `Hint`);
          break;
      }
      let n2 = U(`marker aria`, `{0} at {1}. `, t2, e2.startLineNumber + `:` + e2.startColumn), r2 = this._editor.getModel();
      if (r2 && e2.startLineNumber <= r2.getLineCount() && e2.startLineNumber >= 1) {
        let t3 = r2.getLineContent(e2.startLineNumber);
        n2 = `${t3}, ${n2}`;
      }
      return n2;
    }
  };
  let QE = (_xa = class extends C_ {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(e2, {
        showArrow: true,
        showFrame: true,
        isAccessible: true,
        frameWidth: 1
      }, i2), this._themeService = t2, this._openerService = n2, this._menuService = r2, this._contextKeyService = a2, this._labelService = o2, this._callOnDispose = new C(), this._onDidSelectRelatedInformation = new E(), this.onDidSelectRelatedInformation = this._onDidSelectRelatedInformation.event, this._severity = kn.Warning, this._backgroundColor = v.white, this._applyTheme(t2.getColorTheme()), this._callOnDispose.add(t2.onDidColorThemeChange(this._applyTheme.bind(this))), this.create();
    }
    _applyTheme(e2) {
      this._backgroundColor = e2.getColor(cD);
      let t2 = nD, n2 = rD;
      this._severity === kn.Warning ? (t2 = iD, n2 = aD) : this._severity === kn.Info && (t2 = oD, n2 = sD);
      let r2 = e2.getColor(t2), i2 = e2.getColor(n2);
      this.style({
        arrowColor: r2,
        frameColor: r2,
        headerBackgroundColor: i2,
        primaryHeadingColor: e2.getColor(T_),
        secondaryHeadingColor: e2.getColor(E_)
      });
    }
    _applyStyles() {
      this._parentContainer && (this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : ``), super._applyStyles();
    }
    dispose() {
      this._callOnDispose.dispose(), super.dispose();
    }
    _fillHead(e2) {
      super._fillHead(e2), this._disposables.add(this._actionbarWidget.actionRunner.onWillRun((e3) => this.editor.focus()));
      let t2 = [], n2 = this._menuService.getMenuActions(XE.TitleMenu, this._contextKeyService);
      ia(n2, t2), this._actionbarWidget.push(t2, {
        label: false,
        icon: true,
        index: 0
      });
    }
    _fillTitleIcon(e2) {
      this._icon = B(e2, r(``));
    }
    _fillBody(e2) {
      this._parentContainer = e2, e2.classList.add(`marker-widget`), this._parentContainer.tabIndex = 0, this._parentContainer.setAttribute(`role`, `tooltip`), this._container = document.createElement(`div`), e2.appendChild(this._container), this._message = new ZE(this._container, this.editor, (e3) => this._onDidSelectRelatedInformation.fire(e3), this._openerService, this._labelService), this._disposables.add(this._message);
    }
    show() {
      throw Error(`call showAtMarker`);
    }
    showAtMarker(e2, t2, n2) {
      this._container.classList.remove(`stale`), this._message.update(e2), this._severity = e2.severity, this._applyTheme(this._themeService.getColorTheme());
      let r2 = P.lift(e2), i2 = this.editor.getPosition(), a2 = i2 && r2.containsPosition(i2) ? i2 : r2.getStartPosition();
      super.show(a2, this.computeRequiredHeight());
      let o2 = this.editor.getModel();
      if (o2) {
        let e3 = n2 > 1 ? U(`problems`, `{0} of {1} problems`, t2, n2) : U(`change`, `{0} of {1} problem`, t2, n2);
        this.setTitle(Ii(o2.uri), e3);
      }
      this._icon.className = `codicon ${qE.className(kn.toSeverity(this._severity))}`, this.editor.revealPositionNearTop(a2, 0), this.editor.focus();
    }
    updateMarker(e2) {
      this._container.classList.remove(`stale`), this._message.update(e2);
    }
    showStale() {
      this._container.classList.add(`stale`), this._relayout();
    }
    _doLayoutBody(e2, t2) {
      super._doLayoutBody(e2, t2), this._heightInPixel = e2, this._message.layout(e2, t2), this._container.style.height = `${e2}px`;
    }
    _onWidth(e2) {
      this._message.layout(this._heightInPixel, e2);
    }
    _relayout() {
      super._relayout(this.computeRequiredHeight());
    }
    computeRequiredHeight() {
      return 3 + this._message.getHeightInLines();
    }
  }, XE = _xa, _xa.TitleMenu = new j(`gotoErrorTitleMenu`), _xa);
  QE = XE = JE([
    YE(1, Gt),
    YE(2, It),
    YE(3, Nt),
    YE(4, k),
    YE(5, O),
    YE(6, wt)
  ], QE);
  const $E = Wc(Ga, Wa), eD = Wc(fo, uo), tD = Wc(to, eo), nD = q(`editorMarkerNavigationError.background`, {
    dark: $E,
    light: $E,
    hcDark: ta,
    hcLight: ta
  }, U(`editorMarkerNavigationError`, `Editor marker navigation widget error color.`)), rD = q(`editorMarkerNavigationError.headerBackground`, {
    dark: ql(nD, 0.1),
    light: ql(nD, 0.1),
    hcDark: null,
    hcLight: null
  }, U(`editorMarkerNavigationErrorHeaderBackground`, `Editor marker navigation widget error heading background.`)), iD = q(`editorMarkerNavigationWarning.background`, {
    dark: eD,
    light: eD,
    hcDark: ta,
    hcLight: ta
  }, U(`editorMarkerNavigationWarning`, `Editor marker navigation widget warning color.`)), aD = q(`editorMarkerNavigationWarning.headerBackground`, {
    dark: ql(iD, 0.1),
    light: ql(iD, 0.1),
    hcDark: `#0C141F`,
    hcLight: ql(iD, 0.2)
  }, U(`editorMarkerNavigationWarningBackground`, `Editor marker navigation widget warning heading background.`)), oD = q(`editorMarkerNavigationInfo.background`, {
    dark: tD,
    light: tD,
    hcDark: ta,
    hcLight: ta
  }, U(`editorMarkerNavigationInfo`, `Editor marker navigation widget info color.`)), sD = q(`editorMarkerNavigationInfo.headerBackground`, {
    dark: ql(oD, 0.1),
    light: ql(oD, 0.1),
    hcDark: null,
    hcLight: null
  }, U(`editorMarkerNavigationInfoHeaderBackground`, `Editor marker navigation widget info heading background.`)), cD = q(`editorMarkerNavigation.background`, Ha, U(`editorMarkerNavigationBackground`, `Editor marker navigation widget background.`));
  var lD = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, uD = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, dD;
  let fD = (_ya = class {
    static get(e2) {
      return e2.getContribution(dD.ID);
    }
    constructor(e2, t2, n2, r2, i2) {
      this._markerNavigationService = t2, this._contextKeyService = n2, this._editorService = r2, this._instantiationService = i2, this._sessionDispoables = new C(), this._editor = e2, this._widgetVisible = vD.bindTo(this._contextKeyService);
    }
    dispose() {
      this._cleanUp(), this._sessionDispoables.dispose();
    }
    _cleanUp() {
      this._widgetVisible.reset(), this._sessionDispoables.clear(), this._widget = void 0, this._model = void 0;
    }
    _getOrCreateModel(e2) {
      if (this._model && this._model.matches(e2)) return this._model;
      let t2 = false;
      return this._model && (t2 = true, this._cleanUp()), this._model = this._markerNavigationService.getMarkerList(e2), t2 && this._model.move(true, this._editor.getModel(), this._editor.getPosition()), this._widget = this._instantiationService.createInstance(QE, this._editor), this._widget.onDidClose(() => this.close(), this, this._sessionDispoables), this._widgetVisible.set(true), this._sessionDispoables.add(this._model), this._sessionDispoables.add(this._widget), this._sessionDispoables.add(this._editor.onDidChangeCursorPosition((e3) => {
        var _a3, _b3, _c3;
        (!((_a3 = this._model) == null ? void 0 : _a3.selected) || !P.containsPosition((_b3 = this._model) == null ? void 0 : _b3.selected.marker, e3.position)) && ((_c3 = this._model) == null ? void 0 : _c3.resetIndex());
      })), this._sessionDispoables.add(this._model.onDidChange(() => {
        if (!this._widget || !this._widget.position || !this._model) return;
        let e3 = this._model.find(this._editor.getModel().uri, this._widget.position);
        e3 ? this._widget.updateMarker(e3.marker) : this._widget.showStale();
      })), this._sessionDispoables.add(this._widget.onDidSelectRelatedInformation((e3) => {
        this._editorService.openCodeEditor({
          resource: e3.resource,
          options: {
            pinned: true,
            revealIfOpened: true,
            selection: P.lift(e3).collapseToStart()
          }
        }, this._editor), this.close(false);
      })), this._sessionDispoables.add(this._editor.onDidChangeModel(() => this._cleanUp())), this._model;
    }
    close(e2 = true) {
      this._cleanUp(), e2 && this._editor.focus();
    }
    showAtMarker(e2) {
      if (this._editor.hasModel()) {
        let t2 = this._getOrCreateModel(this._editor.getModel().uri);
        t2.resetIndex(), t2.move(true, this._editor.getModel(), new N(e2.startLineNumber, e2.startColumn)), t2.selected && this._widget.showAtMarker(t2.selected.marker, t2.selected.index, t2.selected.total);
      }
    }
    async nagivate(e2, t2) {
      var _a3, _b3;
      if (this._editor.hasModel()) {
        let n2 = this._getOrCreateModel(t2 ? void 0 : this._editor.getModel().uri);
        if (n2.move(e2, this._editor.getModel(), this._editor.getPosition()), !n2.selected) return;
        if (n2.selected.marker.resource.toString() !== this._editor.getModel().uri.toString()) {
          this._cleanUp();
          let r2 = await this._editorService.openCodeEditor({
            resource: n2.selected.marker.resource,
            options: {
              pinned: false,
              revealIfOpened: true,
              selectionRevealType: 2,
              selection: n2.selected.marker
            }
          }, this._editor);
          r2 && ((_a3 = dD.get(r2)) == null ? void 0 : _a3.close(), (_b3 = dD.get(r2)) == null ? void 0 : _b3.nagivate(e2, t2));
        } else this._widget.showAtMarker(n2.selected.marker, n2.selected.index, n2.selected.total);
      }
    }
  }, dD = _ya, _ya.ID = `editor.contrib.markerController`, _ya);
  fD = dD = lD([
    uD(1, GE),
    uD(2, O),
    uD(3, pt),
    uD(4, k)
  ], fD);
  var pD = class extends w {
    constructor(e2, t2, n2) {
      super(n2), this._next = e2, this._multiFile = t2;
    }
    async run(e2, t2) {
      var _a3;
      t2.hasModel() && ((_a3 = fD.get(t2)) == null ? void 0 : _a3.nagivate(this._next, this._multiFile));
    }
  }, mD = (_za = class extends pD {
    constructor() {
      super(true, false, {
        id: _za.ID,
        label: _za.LABEL,
        alias: `Go to Next Problem (Error, Warning, Info)`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 578,
          weight: 100
        },
        menuOpts: {
          menuId: QE.TitleMenu,
          title: _za.LABEL,
          icon: cl(`marker-navigation-next`, _.arrowDown, U(`nextMarkerIcon`, `Icon for goto next marker.`)),
          group: `navigation`,
          order: 1
        }
      });
    }
  }, _za.ID = `editor.action.marker.next`, _za.LABEL = U(`markerAction.next.label`, `Go to Next Problem (Error, Warning, Info)`), _za), hD = (_Aa = class extends pD {
    constructor() {
      super(false, false, {
        id: _Aa.ID,
        label: _Aa.LABEL,
        alias: `Go to Previous Problem (Error, Warning, Info)`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 1602,
          weight: 100
        },
        menuOpts: {
          menuId: QE.TitleMenu,
          title: _Aa.LABEL,
          icon: cl(`marker-navigation-previous`, _.arrowUp, U(`previousMarkerIcon`, `Icon for goto previous marker.`)),
          group: `navigation`,
          order: 2
        }
      });
    }
  }, _Aa.ID = `editor.action.marker.prev`, _Aa.LABEL = U(`markerAction.previous.label`, `Go to Previous Problem (Error, Warning, Info)`), _Aa), gD = class extends pD {
    constructor() {
      super(true, true, {
        id: `editor.action.marker.nextInFiles`,
        label: U(`markerAction.nextInFiles.label`, `Go to Next Problem in Files (Error, Warning, Info)`),
        alias: `Go to Next Problem in Files (Error, Warning, Info)`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 66,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarGoMenu,
          title: U({
            key: `miGotoNextProblem`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Next &&Problem`),
          group: `6_problem_nav`,
          order: 1
        }
      });
    }
  }, _D = class extends pD {
    constructor() {
      super(false, true, {
        id: `editor.action.marker.prevInFiles`,
        label: U(`markerAction.previousInFiles.label`, `Go to Previous Problem in Files (Error, Warning, Info)`),
        alias: `Go to Previous Problem in Files (Error, Warning, Info)`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 1090,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarGoMenu,
          title: U({
            key: `miGotoPreviousProblem`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Previous &&Problem`),
          group: `6_problem_nav`,
          order: 2
        }
      });
    }
  };
  X(fD.ID, fD, 4), J(mD), J(hD), J(gD), J(_D);
  const vD = new F(`markersNavigationVisible`, false), yD = Ae.bindToContribution(fD.get);
  Y(new yD({
    id: `closeMarkersNavigation`,
    precondition: vD,
    handler: (e2) => e2.close(),
    kbOpts: {
      weight: 150,
      kbExpr: T.focus,
      primary: 9,
      secondary: [
        1033
      ]
    }
  }));
  var bD;
  (function(e2) {
    e2.NoAutoFocus = `noAutoFocus`, e2.FocusIfVisible = `focusIfVisible`, e2.AutoFocusImmediately = `autoFocusImmediately`;
  })(bD || (bD = {}));
  var xD = class extends w {
    constructor() {
      super({
        id: Rh,
        label: U({
          key: `showOrFocusHover`,
          comment: [
            `Label for action that will trigger the showing/focusing of a hover in the editor.`,
            `If the hover is not visible, it will show the hover.`,
            `This allows for users to show the hover without using the mouse.`
          ]
        }, `Show or Focus Hover`),
        metadata: {
          description: W(`showOrFocusHoverDescription`, `Show or focus the editor hover which shows documentation, references, and other content for a symbol at the current cursor position.`),
          args: [
            {
              name: `args`,
              schema: {
                type: `object`,
                properties: {
                  focus: {
                    description: `Controls if and when the hover should take focus upon being triggered by this action.`,
                    enum: [
                      bD.NoAutoFocus,
                      bD.FocusIfVisible,
                      bD.AutoFocusImmediately
                    ],
                    enumDescriptions: [
                      U(`showOrFocusHover.focus.noAutoFocus`, `The hover will not automatically take focus.`),
                      U(`showOrFocusHover.focus.focusIfVisible`, `The hover will take focus only if it is already visible.`),
                      U(`showOrFocusHover.focus.autoFocusImmediately`, `The hover will automatically take focus when it appears.`)
                    ],
                    default: bD.FocusIfVisible
                  }
                }
              }
            }
          ]
        },
        alias: `Show or Focus Hover`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2087),
          weight: 100
        }
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = oy.get(t2);
      if (!r2) return;
      let i2 = n2 == null ? void 0 : n2.focus, a2 = bD.FocusIfVisible;
      Object.values(bD).includes(i2) ? a2 = i2 : typeof i2 == `boolean` && i2 && (a2 = bD.AutoFocusImmediately);
      let o2 = (e3) => {
        let n3 = t2.getPosition(), i3 = new P(n3.lineNumber, n3.column, n3.lineNumber, n3.column);
        r2.showContentHover(i3, 1, 1, e3);
      }, s2 = t2.getOption(2) === 2;
      r2.isHoverVisible ? a2 === bD.NoAutoFocus ? o2(s2) : r2.focus() : o2(s2 || a2 === bD.AutoFocusImmediately);
    }
  }, SD = class extends w {
    constructor() {
      super({
        id: zh,
        label: U({
          key: `showDefinitionPreviewHover`,
          comment: [
            `Label for action that will trigger the showing of definition preview hover in the editor.`,
            `This allows for users to show the definition preview hover without using the mouse.`
          ]
        }, `Show Definition Preview Hover`),
        alias: `Show Definition Preview Hover`,
        precondition: void 0,
        metadata: {
          description: W(`showDefinitionPreviewHoverDescription`, `Show the definition preview hover in the editor.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      if (!n2) return;
      let r2 = t2.getPosition();
      if (!r2) return;
      let i2 = new P(r2.lineNumber, r2.column, r2.lineNumber, r2.column), a2 = BE.get(t2);
      if (!a2) return;
      let o2 = a2.startFindDefinitionFromCursor(r2);
      o2.then(() => {
        n2.showContentHover(i2, 1, 1, true);
      });
    }
  }, CD = class extends w {
    constructor() {
      super({
        id: Bh,
        label: U({
          key: `scrollUpHover`,
          comment: [
            `Action that allows to scroll up in the hover widget with the up arrow when the hover widget is focused.`
          ]
        }, `Scroll Up Hover`),
        alias: `Scroll Up Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 16,
          weight: 100
        },
        metadata: {
          description: W(`scrollUpHoverDescription`, `Scroll up the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.scrollUp();
    }
  }, wD = class extends w {
    constructor() {
      super({
        id: Vh,
        label: U({
          key: `scrollDownHover`,
          comment: [
            `Action that allows to scroll down in the hover widget with the up arrow when the hover widget is focused.`
          ]
        }, `Scroll Down Hover`),
        alias: `Scroll Down Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 18,
          weight: 100
        },
        metadata: {
          description: W(`scrollDownHoverDescription`, `Scroll down the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.scrollDown();
    }
  }, TD = class extends w {
    constructor() {
      super({
        id: Hh,
        label: U({
          key: `scrollLeftHover`,
          comment: [
            `Action that allows to scroll left in the hover widget with the left arrow when the hover widget is focused.`
          ]
        }, `Scroll Left Hover`),
        alias: `Scroll Left Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 15,
          weight: 100
        },
        metadata: {
          description: W(`scrollLeftHoverDescription`, `Scroll left the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.scrollLeft();
    }
  }, ED = class extends w {
    constructor() {
      super({
        id: Uh,
        label: U({
          key: `scrollRightHover`,
          comment: [
            `Action that allows to scroll right in the hover widget with the right arrow when the hover widget is focused.`
          ]
        }, `Scroll Right Hover`),
        alias: `Scroll Right Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 17,
          weight: 100
        },
        metadata: {
          description: W(`scrollRightHoverDescription`, `Scroll right the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.scrollRight();
    }
  }, DD = class extends w {
    constructor() {
      super({
        id: Wh,
        label: U({
          key: `pageUpHover`,
          comment: [
            `Action that allows to page up in the hover widget with the page up command when the hover widget is focused.`
          ]
        }, `Page Up Hover`),
        alias: `Page Up Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 11,
          secondary: [
            528
          ],
          weight: 100
        },
        metadata: {
          description: W(`pageUpHoverDescription`, `Page up the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.pageUp();
    }
  }, OD = class extends w {
    constructor() {
      super({
        id: Gh,
        label: U({
          key: `pageDownHover`,
          comment: [
            `Action that allows to page down in the hover widget with the page down command when the hover widget is focused.`
          ]
        }, `Page Down Hover`),
        alias: `Page Down Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 12,
          secondary: [
            530
          ],
          weight: 100
        },
        metadata: {
          description: W(`pageDownHoverDescription`, `Page down the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.pageDown();
    }
  }, kD = class extends w {
    constructor() {
      super({
        id: Kh,
        label: U({
          key: `goToTopHover`,
          comment: [
            `Action that allows to go to the top of the hover widget with the home command when the hover widget is focused.`
          ]
        }, `Go To Top Hover`),
        alias: `Go To Bottom Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 14,
          secondary: [
            2064
          ],
          weight: 100
        },
        metadata: {
          description: W(`goToTopHoverDescription`, `Go to the top of the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.goToTop();
    }
  }, AD = class extends w {
    constructor() {
      super({
        id: qh,
        label: U({
          key: `goToBottomHover`,
          comment: [
            `Action that allows to go to the bottom in the hover widget with the end command when the hover widget is focused.`
          ]
        }, `Go To Bottom Hover`),
        alias: `Go To Bottom Hover`,
        precondition: T.hoverFocused,
        kbOpts: {
          kbExpr: T.hoverFocused,
          primary: 13,
          secondary: [
            2066
          ],
          weight: 100
        },
        metadata: {
          description: W(`goToBottomHoverDescription`, `Go to the bottom of the editor hover.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = oy.get(t2);
      n2 && n2.goToBottom();
    }
  }, jD = class extends w {
    constructor() {
      super({
        id: Jh,
        label: Yh,
        alias: `Increase Hover Verbosity Level`,
        precondition: T.hoverVisible
      });
    }
    run(e2, t2, n2) {
      let r2 = oy.get(t2);
      if (!r2) return;
      let i2 = (n2 == null ? void 0 : n2.index) === void 0 ? r2.focusedHoverPartIndex() : n2.index;
      r2.updateHoverVerbosityLevel(st.Increase, i2, n2 == null ? void 0 : n2.focus);
    }
  }, MD = class extends w {
    constructor() {
      super({
        id: Xh,
        label: Zh,
        alias: `Decrease Hover Verbosity Level`,
        precondition: T.hoverVisible
      });
    }
    run(e2, t2, n2) {
      var _a3;
      let r2 = oy.get(t2);
      if (!r2) return;
      let i2 = (n2 == null ? void 0 : n2.index) === void 0 ? r2.focusedHoverPartIndex() : n2.index;
      (_a3 = oy.get(t2)) == null ? void 0 : _a3.updateHoverVerbosityLevel(st.Decrease, i2, n2 == null ? void 0 : n2.focus);
    }
  }, ND = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, PD = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const FD = r;
  var ID = class {
    constructor(e2, t2, n2) {
      this.owner = e2, this.range = t2, this.marker = n2;
    }
    isValidForHoverAnchor(e2) {
      return e2.type === 1 && this.range.startColumn <= e2.range.startColumn && this.range.endColumn >= e2.range.endColumn;
    }
  };
  const LD = {
    type: 1,
    filter: {
      include: Z.QuickFix
    },
    triggerAction: Nf.QuickFixHover
  };
  let RD = class {
    constructor(e2, t2, n2, r2) {
      this._editor = e2, this._markerDecorationsService = t2, this._openerService = n2, this._languageFeaturesService = r2, this.hoverOrdinal = 1, this.recentMarkerCodeActionsInfo = void 0;
    }
    computeSync(e2, t2) {
      if (!this._editor.hasModel() || e2.type !== 1 && !e2.supportsMarkerHover) return [];
      let n2 = this._editor.getModel(), r2 = e2.range.startLineNumber, i2 = n2.getLineMaxColumn(r2), a2 = [];
      for (let o2 of t2) {
        let t3 = o2.range.startLineNumber === r2 ? o2.range.startColumn : 1, s2 = o2.range.endLineNumber === r2 ? o2.range.endColumn : i2, c2 = this._markerDecorationsService.getMarker(n2.uri, o2);
        if (!c2) continue;
        let l2 = new P(e2.range.startLineNumber, t3, e2.range.startLineNumber, s2);
        a2.push(new ID(this, l2, c2));
      }
      return a2;
    }
    renderHoverParts(e2, t2) {
      if (!t2.length) return new Eh([]);
      let n2 = new C(), r2 = [];
      t2.forEach((t3) => {
        let n3 = this._renderMarkerHover(t3);
        e2.fragment.appendChild(n3.hoverElement), r2.push(n3);
      });
      let i2 = t2.length === 1 ? t2[0] : t2.sort((e3, t3) => kn.compare(e3.marker.severity, t3.marker.severity))[0];
      return this.renderMarkerStatusbar(e2, i2, n2), new Eh(r2);
    }
    _renderMarkerHover(e2) {
      let t2 = new C(), n2 = FD(`div.hover-row`), r2 = B(n2, FD(`div.marker.hover-contents`)), { source: i2, message: a2, code: o2, relatedInformation: s2 } = e2.marker;
      this._editor.applyFontInfo(r2);
      let c2 = B(r2, FD(`span`));
      if (c2.style.whiteSpace = `pre-wrap`, c2.innerText = a2, i2 || o2) if (o2 && typeof o2 != `string`) {
        let e3 = FD(`span`);
        if (i2) {
          let t3 = B(e3, FD(`span`));
          t3.innerText = i2;
        }
        let n3 = B(e3, FD(`a.code-link`));
        n3.setAttribute(`href`, o2.target.toString()), t2.add(z(n3, `click`, (e4) => {
          this._openerService.open(o2.target, {
            allowCommands: true
          }), e4.preventDefault(), e4.stopPropagation();
        }));
        let a3 = B(n3, FD(`span`));
        a3.innerText = o2.value;
        let s3 = B(r2, e3);
        s3.style.opacity = `0.6`, s3.style.paddingLeft = `6px`;
      } else {
        let e3 = B(r2, FD(`span`));
        e3.style.opacity = `0.6`, e3.style.paddingLeft = `6px`, e3.innerText = i2 && o2 ? `${i2}(${o2})` : i2 || `(${o2})`;
      }
      if ($s(s2)) for (let { message: e3, resource: n3, startLineNumber: i3, startColumn: a3 } of s2) {
        let o3 = B(r2, FD(`div`));
        o3.style.marginTop = `8px`;
        let s3 = B(o3, FD(`a`));
        s3.innerText = `${Ii(n3)}(${i3}, ${a3}): `, s3.style.cursor = `pointer`, t2.add(z(s3, `click`, (e4) => {
          if (e4.stopPropagation(), e4.preventDefault(), this._openerService) {
            let e5 = {
              selection: {
                startLineNumber: i3,
                startColumn: a3
              }
            };
            this._openerService.open(n3, {
              fromUserGesture: true,
              editorOptions: e5
            }).catch(G);
          }
        }));
        let c3 = B(o3, FD(`span`));
        c3.innerText = e3, this._editor.applyFontInfo(c3);
      }
      let l2 = {
        hoverPart: e2,
        hoverElement: n2,
        dispose: () => t2.dispose()
      };
      return l2;
    }
    renderMarkerStatusbar(e2, t2, n2) {
      if (t2.marker.severity === kn.Error || t2.marker.severity === kn.Warning || t2.marker.severity === kn.Info) {
        let n3 = fD.get(this._editor);
        n3 && e2.statusBar.addAction({
          label: U(`view problem`, `View Problem`),
          commandId: mD.ID,
          run: () => {
            e2.hide(), n3.showAtMarker(t2.marker), this._editor.focus();
          }
        });
      }
      if (!this._editor.getOption(92)) {
        let r2 = e2.statusBar.append(FD(`div`));
        this.recentMarkerCodeActionsInfo && (At.makeKey(this.recentMarkerCodeActionsInfo.marker) === At.makeKey(t2.marker) ? this.recentMarkerCodeActionsInfo.hasCodeActions || (r2.textContent = U(`noQuickFixes`, `No quick fixes available`)) : this.recentMarkerCodeActionsInfo = void 0);
        let i2 = this.recentMarkerCodeActionsInfo && !this.recentMarkerCodeActionsInfo.hasCodeActions ? S.None : La(() => r2.textContent = U(`checkingForQuickFixes`, `Checking for quick fixes...`), 200, n2);
        r2.textContent || (r2.textContent = `\xA0`);
        let a2 = this.getCodeActions(t2.marker);
        n2.add(Hl(() => a2.cancel())), a2.then((a3) => {
          if (i2.dispose(), this.recentMarkerCodeActionsInfo = {
            marker: t2.marker,
            hasCodeActions: a3.validActions.length > 0
          }, !this.recentMarkerCodeActionsInfo.hasCodeActions) {
            a3.dispose(), r2.textContent = U(`noQuickFixes`, `No quick fixes available`);
            return;
          }
          r2.style.display = `none`;
          let o2 = false;
          n2.add(Hl(() => {
            o2 || a3.dispose();
          })), e2.statusBar.addAction({
            label: U(`quick fixes`, `Quick Fix...`),
            commandId: Bf,
            run: (t3) => {
              o2 = true;
              let n3 = wm.get(this._editor), r3 = Vo(t3);
              e2.hide(), n3 == null ? void 0 : n3.showCodeActions(LD, a3, {
                x: r3.left,
                y: r3.top,
                width: r3.width,
                height: r3.height
              });
            }
          });
        }, G);
      }
    }
    getCodeActions(e2) {
      return sa((t2) => Jf(this._languageFeaturesService.codeActionProvider, this._editor.getModel(), new P(e2.startLineNumber, e2.startColumn, e2.endLineNumber, e2.endColumn), LD, er.None, t2));
    }
  };
  RD = ND([
    PD(1, jt),
    PD(2, It),
    PD(3, A)
  ], RD);
  var zD = class {
    get lineNumber() {
      return this._lineNumber;
    }
    set lineNumber(e2) {
      this._lineNumber = e2;
    }
    get lane() {
      return this._laneOrLine;
    }
    set lane(e2) {
      this._laneOrLine = e2;
    }
    constructor(e2) {
      this._editor = e2, this._lineNumber = -1, this._laneOrLine = Qe.Center;
    }
    computeSync() {
      var _a3;
      let e2 = (e3) => ({
        value: e3
      }), t2 = this._editor.getLineDecorations(this._lineNumber), n2 = [], r2 = this._laneOrLine === `lineNo`;
      if (!t2) return n2;
      for (let i2 of t2) {
        let t3 = ((_a3 = i2.options.glyphMargin) == null ? void 0 : _a3.position) ?? Qe.Center;
        if (!r2 && t3 !== this._laneOrLine) continue;
        let a2 = r2 ? i2.options.lineNumberHoverMessage : i2.options.glyphMarginHoverMessage;
        if (!a2 || Os(a2)) continue;
        n2.push(...Oi(a2).map(e2));
      }
      return n2;
    }
  }, BD = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, VD = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, HD;
  const UD = r;
  let WD = (_Ba = class extends S {
    constructor(e2, t2, n2) {
      super(), this._renderDisposeables = this._register(new C()), this._editor = e2, this._isVisible = false, this._messages = [], this._hover = this._register(new ct()), this._hover.containerDomNode.classList.toggle(`hidden`, !this._isVisible), this._markdownRenderer = this._register(new En({
        editor: this._editor
      }, t2, n2)), this._computer = new zD(this._editor), this._hoverOperation = this._register(new pg(this._editor, this._computer)), this._register(this._hoverOperation.onResult((e3) => {
        this._withResult(e3.value);
      })), this._register(this._editor.onDidChangeModelDecorations(() => this._onModelDecorationsChanged())), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(50) && this._updateFont();
      })), this._register(Si(this._hover.containerDomNode, `mouseleave`, (e3) => {
        this._onMouseLeave(e3);
      })), this._editor.addOverlayWidget(this);
    }
    dispose() {
      this._editor.removeOverlayWidget(this), super.dispose();
    }
    getId() {
      return HD.ID;
    }
    getDomNode() {
      return this._hover.containerDomNode;
    }
    getPosition() {
      return null;
    }
    _updateFont() {
      let e2 = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName(`code`));
      e2.forEach((e3) => this._editor.applyFontInfo(e3));
    }
    _onModelDecorationsChanged() {
      this._isVisible && (this._hoverOperation.cancel(), this._hoverOperation.start(0));
    }
    showsOrWillShow(e2) {
      let t2 = e2.target;
      return t2.type === 2 && t2.detail.glyphMarginLane ? (this._startShowingAt(t2.position.lineNumber, t2.detail.glyphMarginLane), true) : t2.type === 3 ? (this._startShowingAt(t2.position.lineNumber, `lineNo`), true) : false;
    }
    _startShowingAt(e2, t2) {
      this._computer.lineNumber === e2 && this._computer.lane === t2 || (this._hoverOperation.cancel(), this.hide(), this._computer.lineNumber = e2, this._computer.lane = t2, this._hoverOperation.start(0));
    }
    hide() {
      this._computer.lineNumber = -1, this._hoverOperation.cancel(), this._isVisible && (this._isVisible = false, this._hover.containerDomNode.classList.toggle(`hidden`, !this._isVisible));
    }
    _withResult(e2) {
      this._messages = e2, this._messages.length > 0 ? this._renderMessages(this._computer.lineNumber, this._messages) : this.hide();
    }
    _renderMessages(e2, t2) {
      this._renderDisposeables.clear();
      let n2 = document.createDocumentFragment();
      for (let e3 of t2) {
        let t3 = UD(`div.hover-row.markdown-hover`), r2 = B(t3, UD(`div.hover-contents`)), i2 = this._renderDisposeables.add(this._markdownRenderer.render(e3.value));
        r2.appendChild(i2.element), n2.appendChild(t3);
      }
      this._updateContents(n2), this._showAt(e2);
    }
    _updateContents(e2) {
      this._hover.contentsDomNode.textContent = ``, this._hover.contentsDomNode.appendChild(e2), this._updateFont();
    }
    _showAt(e2) {
      this._isVisible || (this._isVisible = true, this._hover.containerDomNode.classList.toggle(`hidden`, !this._isVisible));
      let t2 = this._editor.getLayoutInfo(), n2 = this._editor.getTopForLineNumber(e2), r2 = this._editor.getScrollTop(), i2 = this._editor.getOption(67), a2 = this._hover.containerDomNode.clientHeight, o2 = n2 - r2 - (a2 - i2) / 2, s2 = t2.glyphMarginLeft + t2.glyphMarginWidth + (this._computer.lane === `lineNo` ? t2.lineNumbersWidth : 0);
      this._hover.containerDomNode.style.left = `${s2}px`, this._hover.containerDomNode.style.top = `${Math.max(Math.round(o2), 0)}px`;
    }
    _onMouseLeave(e2) {
      let t2 = this._editor.getDomNode(), n2 = !t2 || !dg(t2, e2.x, e2.y);
      n2 && this.hide();
    }
  }, HD = _Ba, _Ba.ID = `editor.contrib.modesGlyphHoverWidget`, _Ba);
  WD = HD = BD([
    VD(1, Dt),
    VD(2, It)
  ], WD);
  var GD = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, KD = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const qD = false;
  let JD = (_Ca = class extends S {
    constructor(e2, t2) {
      super(), this._editor = e2, this._instantiationService = t2, this.shouldKeepOpenOnEditorMouseMoveOrLeave = false, this._listenersStore = new C(), this._hoverState = {
        mouseDown: false
      }, this._reactToEditorMouseMoveRunner = this._register(new hr(() => this._reactToEditorMouseMove(this._mouseMoveEvent), 0)), this._hookListeners(), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(60) && (this._unhookListeners(), this._hookListeners());
      }));
    }
    _hookListeners() {
      let e2 = this._editor.getOption(60);
      this._hoverSettings = {
        enabled: e2.enabled,
        sticky: e2.sticky,
        hidingDelay: e2.hidingDelay
      }, e2.enabled ? (this._listenersStore.add(this._editor.onMouseDown((e3) => this._onEditorMouseDown(e3))), this._listenersStore.add(this._editor.onMouseUp(() => this._onEditorMouseUp())), this._listenersStore.add(this._editor.onMouseMove((e3) => this._onEditorMouseMove(e3))), this._listenersStore.add(this._editor.onKeyDown((e3) => this._onKeyDown(e3)))) : (this._listenersStore.add(this._editor.onMouseMove((e3) => this._onEditorMouseMove(e3))), this._listenersStore.add(this._editor.onKeyDown((e3) => this._onKeyDown(e3)))), this._listenersStore.add(this._editor.onMouseLeave((e3) => this._onEditorMouseLeave(e3))), this._listenersStore.add(this._editor.onDidChangeModel(() => {
        this._cancelScheduler(), this._hideWidgets();
      })), this._listenersStore.add(this._editor.onDidChangeModelContent(() => this._cancelScheduler())), this._listenersStore.add(this._editor.onDidScrollChange((e3) => this._onEditorScrollChanged(e3)));
    }
    _unhookListeners() {
      this._listenersStore.clear();
    }
    _cancelScheduler() {
      this._mouseMoveEvent = void 0, this._reactToEditorMouseMoveRunner.cancel();
    }
    _onEditorScrollChanged(e2) {
      (e2.scrollTopChanged || e2.scrollLeftChanged) && this._hideWidgets();
    }
    _onEditorMouseDown(e2) {
      this._hoverState.mouseDown = true;
      let t2 = this._isMouseOnMarginHoverWidget(e2);
      t2 || this._hideWidgets();
    }
    _isMouseOnMarginHoverWidget(e2) {
      var _a3;
      let t2 = (_a3 = this._glyphWidget) == null ? void 0 : _a3.getDomNode();
      return t2 ? dg(t2, e2.event.posx, e2.event.posy) : false;
    }
    _onEditorMouseUp() {
      this._hoverState.mouseDown = false;
    }
    _onEditorMouseLeave(e2) {
      if (this.shouldKeepOpenOnEditorMouseMoveOrLeave) return;
      this._cancelScheduler();
      let t2 = this._isMouseOnMarginHoverWidget(e2);
      t2 || qD || this._hideWidgets();
    }
    _shouldNotRecomputeCurrentHoverWidget(e2) {
      let t2 = this._hoverSettings.sticky, n2 = this._isMouseOnMarginHoverWidget(e2);
      return t2 && n2;
    }
    _onEditorMouseMove(e2) {
      if (this.shouldKeepOpenOnEditorMouseMoveOrLeave) return;
      this._mouseMoveEvent = e2;
      let t2 = this._shouldNotRecomputeCurrentHoverWidget(e2);
      if (t2) {
        this._reactToEditorMouseMoveRunner.cancel();
        return;
      }
      this._reactToEditorMouseMove(e2);
    }
    _reactToEditorMouseMove(e2) {
      if (!e2) return;
      let t2 = this._tryShowHoverWidget(e2);
      t2 || qD || this._hideWidgets();
    }
    _tryShowHoverWidget(e2) {
      let t2 = this._getOrCreateGlyphWidget();
      return t2.showsOrWillShow(e2);
    }
    _onKeyDown(e2) {
      this._editor.hasModel() && (e2.keyCode === 5 || e2.keyCode === 6 || e2.keyCode === 57 || e2.keyCode === 4 || this._hideWidgets());
    }
    _hideWidgets() {
      var _a3;
      qD || ((_a3 = this._glyphWidget) == null ? void 0 : _a3.hide());
    }
    _getOrCreateGlyphWidget() {
      return this._glyphWidget || (this._glyphWidget = this._instantiationService.createInstance(WD, this._editor)), this._glyphWidget;
    }
    dispose() {
      var _a3;
      super.dispose(), this._unhookListeners(), this._listenersStore.dispose(), (_a3 = this._glyphWidget) == null ? void 0 : _a3.dispose();
    }
  }, _Ca.ID = `editor.contrib.marginHover`, _Ca);
  JD = GD([
    KD(1, k)
  ], JD);
  var YD = class {
  }, XD = class {
  }, ZD = class {
  };
  X(oy.ID, oy, 2), X(JD.ID, JD, 2), J(xD), J(SD), J(CD), J(wD), J(TD), J(ED), J(DD), J(OD), J(kD), J(AD), J(jD), J(MD), Dh.register(Wg), Dh.register(RD), pl((e2, t2) => {
    let n2 = e2.getColor($a);
    n2 && (t2.addRule(`.monaco-editor .monaco-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid ${n2.transparent(0.5)}; }`), t2.addRule(`.monaco-editor .monaco-hover hr { border-top: 1px solid ${n2.transparent(0.5)}; }`), t2.addRule(`.monaco-editor .monaco-hover hr { border-bottom: 0px solid ${n2.transparent(0.5)}; }`));
  }), IE.register(new YD()), IE.register(new XD()), IE.register(new ZD());
  function QD(e2, t2) {
    let n2 = 0;
    for (let r2 = 0; r2 < e2.length; r2++) e2.charAt(r2) === `	` ? n2 += t2 : n2++;
    return n2;
  }
  function $D(e2, t2, n2) {
    e2 = e2 < 0 ? 0 : e2;
    let r2 = ``;
    if (!n2) {
      let n3 = Math.floor(e2 / t2);
      e2 %= t2;
      for (let e3 = 0; e3 < n3; e3++) r2 += `	`;
    }
    for (let t3 = 0; t3 < e2; t3++) r2 += ` `;
    return r2;
  }
  function eO(e2, t2, n2, r2) {
    if (e2.getLineCount() === 1 && e2.getLineMaxColumn(1) === 1) return [];
    let i2 = t2.getLanguageConfiguration(e2.getLanguageId()).indentRulesSupport;
    if (!i2) return [];
    let a2 = new $n(e2, i2, t2);
    for (r2 = Math.min(r2, e2.getLineCount()); n2 <= r2 && a2.shouldIgnore(n2); ) n2++;
    if (n2 > r2 - 1) return [];
    let { tabSize: o2, indentSize: s2, insertSpaces: c2 } = e2.getOptions(), l2 = (e3, t3) => (t3 || (t3 = 1), Er.shiftIndent(e3, e3.length + t3, o2, s2, c2)), u2 = (e3, t3) => (t3 || (t3 = 1), Er.unshiftIndent(e3, e3.length + t3, o2, s2, c2)), d2 = [], f2 = e2.getLineContent(n2), p2 = Ko(f2), m2 = p2;
    a2.shouldIncrease(n2) ? (m2 = l2(m2), p2 = l2(p2)) : a2.shouldIndentNextLine(n2) && (m2 = l2(m2)), n2++;
    for (let t3 = n2; t3 <= r2; t3++) {
      if (tO(e2, t3)) continue;
      let n3 = e2.getLineContent(t3), r3 = Ko(n3), i3 = m2;
      a2.shouldDecrease(t3, i3) && (m2 = u2(m2), p2 = u2(p2)), r3 !== m2 && d2.push(Oe.replaceMove(new I(t3, 1, t3, r3.length + 1), Nc(m2, s2, c2))), !a2.shouldIgnore(t3) && (a2.shouldIncrease(t3, i3) ? (p2 = l2(p2), m2 = p2) : m2 = a2.shouldIndentNextLine(t3, i3) ? l2(m2) : p2);
    }
    return d2;
  }
  function tO(e2, t2) {
    if (!e2.tokenization.isCheapToTokenize(t2)) return false;
    let n2 = e2.tokenization.getLineTokens(t2);
    return n2.getStandardTokenType(0) === 2;
  }
  var nO = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, rO = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, iO = (_Da = class extends w {
    constructor() {
      super({
        id: _Da.ID,
        label: U(`indentationToSpaces`, `Convert Indentation to Spaces`),
        alias: `Convert Indentation to Spaces`,
        precondition: T.writable,
        metadata: {
          description: W(`indentationToSpacesDescription`, `Convert the tab indentation to spaces.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = t2.getModel();
      if (!n2) return;
      let r2 = n2.getOptions(), i2 = t2.getSelection();
      if (!i2) return;
      let a2 = new _O(i2, r2.tabSize);
      t2.pushUndoStop(), t2.executeCommands(this.id, [
        a2
      ]), t2.pushUndoStop(), n2.updateOptions({
        insertSpaces: true
      });
    }
  }, _Da.ID = `editor.action.indentationToSpaces`, _Da), aO = (_Ea = class extends w {
    constructor() {
      super({
        id: _Ea.ID,
        label: U(`indentationToTabs`, `Convert Indentation to Tabs`),
        alias: `Convert Indentation to Tabs`,
        precondition: T.writable,
        metadata: {
          description: W(`indentationToTabsDescription`, `Convert the spaces indentation to tabs.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = t2.getModel();
      if (!n2) return;
      let r2 = n2.getOptions(), i2 = t2.getSelection();
      if (!i2) return;
      let a2 = new vO(i2, r2.tabSize);
      t2.pushUndoStop(), t2.executeCommands(this.id, [
        a2
      ]), t2.pushUndoStop(), n2.updateOptions({
        insertSpaces: false
      });
    }
  }, _Ea.ID = `editor.action.indentationToTabs`, _Ea), oO = class extends w {
    constructor(e2, t2, n2) {
      super(n2), this.insertSpaces = e2, this.displaySizeOnly = t2;
    }
    run(e2, t2) {
      let n2 = e2.get(Rt), r2 = e2.get(Pt), i2 = t2.getModel();
      if (!i2) return;
      let a2 = r2.getCreationOptions(i2.getLanguageId(), i2.uri, i2.isForSimpleWidget), o2 = i2.getOptions(), s2 = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ].map((e3) => ({
        id: e3.toString(),
        label: e3.toString(),
        description: e3 === a2.tabSize && e3 === o2.tabSize ? U(`configuredTabSize`, `Configured Tab Size`) : e3 === a2.tabSize ? U(`defaultTabSize`, `Default Tab Size`) : e3 === o2.tabSize ? U(`currentTabSize`, `Current Tab Size`) : void 0
      })), c2 = Math.min(i2.getOptions().tabSize - 1, 7);
      setTimeout(() => {
        n2.pick(s2, {
          placeHolder: U({
            key: `selectTabWidth`,
            comment: [
              `Tab corresponds to the tab key`
            ]
          }, `Select Tab Size for Current File`),
          activeItem: s2[c2]
        }).then((e3) => {
          if (e3 && i2 && !i2.isDisposed()) {
            let t3 = parseInt(e3.label, 10);
            this.displaySizeOnly ? i2.updateOptions({
              tabSize: t3
            }) : i2.updateOptions({
              tabSize: t3,
              indentSize: t3,
              insertSpaces: this.insertSpaces
            });
          }
        });
      }, 50);
    }
  }, sO = (_Fa = class extends oO {
    constructor() {
      super(false, false, {
        id: _Fa.ID,
        label: U(`indentUsingTabs`, `Indent Using Tabs`),
        alias: `Indent Using Tabs`,
        precondition: void 0,
        metadata: {
          description: W(`indentUsingTabsDescription`, `Use indentation with tabs.`)
        }
      });
    }
  }, _Fa.ID = `editor.action.indentUsingTabs`, _Fa), cO = (_Ga = class extends oO {
    constructor() {
      super(true, false, {
        id: _Ga.ID,
        label: U(`indentUsingSpaces`, `Indent Using Spaces`),
        alias: `Indent Using Spaces`,
        precondition: void 0,
        metadata: {
          description: W(`indentUsingSpacesDescription`, `Use indentation with spaces.`)
        }
      });
    }
  }, _Ga.ID = `editor.action.indentUsingSpaces`, _Ga), lO = (_Ha = class extends oO {
    constructor() {
      super(true, true, {
        id: _Ha.ID,
        label: U(`changeTabDisplaySize`, `Change Tab Display Size`),
        alias: `Change Tab Display Size`,
        precondition: void 0,
        metadata: {
          description: W(`changeTabDisplaySizeDescription`, `Change the space size equivalent of the tab.`)
        }
      });
    }
  }, _Ha.ID = `editor.action.changeTabDisplaySize`, _Ha), uO = (_Ia = class extends w {
    constructor() {
      super({
        id: _Ia.ID,
        label: U(`detectIndentation`, `Detect Indentation from Content`),
        alias: `Detect Indentation from Content`,
        precondition: void 0,
        metadata: {
          description: W(`detectIndentationDescription`, `Detect the indentation from content.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = e2.get(Pt), r2 = t2.getModel();
      if (!r2) return;
      let i2 = n2.getCreationOptions(r2.getLanguageId(), r2.uri, r2.isForSimpleWidget);
      r2.detectIndentation(i2.insertSpaces, i2.tabSize);
    }
  }, _Ia.ID = `editor.action.detectIndentation`, _Ia), dO = class extends w {
    constructor() {
      super({
        id: `editor.action.reindentlines`,
        label: U(`editor.reindentlines`, `Reindent Lines`),
        alias: `Reindent Lines`,
        precondition: T.writable,
        metadata: {
          description: W(`editor.reindentlinesDescription`, `Reindent the lines of the editor.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = e2.get(Tt), r2 = t2.getModel();
      if (!r2) return;
      let i2 = eO(r2, n2, 1, r2.getLineCount());
      i2.length > 0 && (t2.pushUndoStop(), t2.executeEdits(this.id, i2), t2.pushUndoStop());
    }
  }, fO = class extends w {
    constructor() {
      super({
        id: `editor.action.reindentselectedlines`,
        label: U(`editor.reindentselectedlines`, `Reindent Selected Lines`),
        alias: `Reindent Selected Lines`,
        precondition: T.writable,
        metadata: {
          description: W(`editor.reindentselectedlinesDescription`, `Reindent the selected lines of the editor.`)
        }
      });
    }
    run(e2, t2) {
      let n2 = e2.get(Tt), r2 = t2.getModel();
      if (!r2) return;
      let i2 = t2.getSelections();
      if (i2 === null) return;
      let a2 = [];
      for (let e3 of i2) {
        let t3 = e3.startLineNumber, i3 = e3.endLineNumber;
        if (t3 !== i3 && e3.endColumn === 1 && i3--, t3 === 1) {
          if (t3 === i3) continue;
        } else t3--;
        let o2 = eO(r2, n2, t3, i3);
        a2.push(...o2);
      }
      a2.length > 0 && (t2.pushUndoStop(), t2.executeEdits(this.id, a2), t2.pushUndoStop());
    }
  }, pO = class {
    constructor(e2, t2) {
      this._initialSelection = t2, this._edits = [], this._selectionId = null;
      for (let t3 of e2) t3.range && typeof t3.text == `string` && this._edits.push(t3);
    }
    getEditOperations(e2, t2) {
      for (let e3 of this._edits) t2.addEditOperation(P.lift(e3.range), e3.text);
      let n2 = false;
      Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty() && (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber ? (n2 = true, this._selectionId = t2.trackSelection(this._initialSelection, true)) : this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber && (n2 = true, this._selectionId = t2.trackSelection(this._initialSelection, false))), n2 || (this._selectionId = t2.trackSelection(this._initialSelection));
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this._selectionId);
    }
  };
  let mO = (_Ja = class {
    constructor(e2, t2) {
      this.editor = e2, this._languageConfigurationService = t2, this.callOnDispose = new C(), this.callOnModel = new C(), this.callOnDispose.add(e2.onDidChangeConfiguration(() => this.update())), this.callOnDispose.add(e2.onDidChangeModel(() => this.update())), this.callOnDispose.add(e2.onDidChangeModelLanguage(() => this.update()));
    }
    update() {
      this.callOnModel.clear(), !(this.editor.getOption(12) < 4 || this.editor.getOption(55)) && this.editor.hasModel() && this.callOnModel.add(this.editor.onDidPaste(({ range: e2 }) => {
        this.trigger(e2);
      }));
    }
    trigger(e2) {
      let t2 = this.editor.getSelections();
      if (t2 === null || t2.length > 1) return;
      let n2 = this.editor.getModel();
      if (!n2) return;
      let r2 = this.rangeContainsOnlyWhitespaceCharacters(n2, e2);
      if (r2 || hO(n2, e2) || !n2.tokenization.isCheapToTokenize(e2.getStartPosition().lineNumber)) return;
      let i2 = this.editor.getOption(12), { tabSize: a2, indentSize: o2, insertSpaces: s2 } = n2.getOptions(), c2 = [], l2 = {
        shiftIndent: (e3) => Er.shiftIndent(e3, e3.length + 1, a2, o2, s2),
        unshiftIndent: (e3) => Er.unshiftIndent(e3, e3.length + 1, a2, o2, s2)
      }, u2 = e2.startLineNumber;
      for (; u2 <= e2.endLineNumber; ) {
        if (this.shouldIgnoreLine(n2, u2)) {
          u2++;
          continue;
        }
        break;
      }
      if (u2 > e2.endLineNumber) return;
      let d2 = n2.getLineContent(u2);
      if (!/\S/.test(d2.substring(0, e2.startColumn - 1))) {
        let e3 = Uo(i2, n2, n2.getLanguageId(), u2, l2, this._languageConfigurationService);
        if (e3 !== null) {
          let t3 = Ko(d2), r3 = QD(e3, a2), i3 = QD(t3, a2);
          if (r3 !== i3) {
            let e4 = $D(r3, a2, s2);
            c2.push({
              range: new P(u2, 1, u2, t3.length + 1),
              text: e4
            }), d2 = e4 + d2.substring(t3.length);
          } else {
            let e4 = Go(n2, u2, this._languageConfigurationService);
            if (e4 === 0 || e4 === 8) return;
          }
        }
      }
      let f2 = u2;
      for (; u2 < e2.endLineNumber; ) {
        if (!/\S/.test(n2.getLineContent(u2 + 1))) {
          u2++;
          continue;
        }
        break;
      }
      if (u2 !== e2.endLineNumber) {
        let t3 = {
          tokenization: {
            getLineTokens: (e3) => n2.tokenization.getLineTokens(e3),
            getLanguageId: () => n2.getLanguageId(),
            getLanguageIdAtPosition: (e3, t4) => n2.getLanguageIdAtPosition(e3, t4)
          },
          getLineContent: (e3) => e3 === f2 ? d2 : n2.getLineContent(e3)
        }, r3 = Uo(i2, t3, n2.getLanguageId(), u2 + 1, l2, this._languageConfigurationService);
        if (r3 !== null) {
          let t4 = QD(r3, a2), i3 = QD(Ko(n2.getLineContent(u2 + 1)), a2);
          if (t4 !== i3) {
            let r4 = t4 - i3;
            for (let t5 = u2 + 1; t5 <= e2.endLineNumber; t5++) {
              let e3 = n2.getLineContent(t5), i4 = Ko(e3), o3 = QD(i4, a2), l3 = o3 + r4, u3 = $D(l3, a2, s2);
              u3 !== i4 && c2.push({
                range: new P(t5, 1, t5, i4.length + 1),
                text: u3
              });
            }
          }
        }
      }
      if (c2.length > 0) {
        this.editor.pushUndoStop();
        let e3 = new pO(c2, this.editor.getSelection());
        this.editor.executeCommand(`autoIndentOnPaste`, e3), this.editor.pushUndoStop();
      }
    }
    rangeContainsOnlyWhitespaceCharacters(e2, t2) {
      let n2 = (e3) => e3.trim().length === 0, r2 = true;
      if (t2.startLineNumber === t2.endLineNumber) {
        let i2 = e2.getLineContent(t2.startLineNumber), a2 = i2.substring(t2.startColumn - 1, t2.endColumn - 1);
        r2 = n2(a2);
      } else for (let i2 = t2.startLineNumber; i2 <= t2.endLineNumber; i2++) {
        let a2 = e2.getLineContent(i2);
        if (i2 === t2.startLineNumber) {
          let e3 = a2.substring(t2.startColumn - 1);
          r2 = n2(e3);
        } else if (i2 === t2.endLineNumber) {
          let e3 = a2.substring(0, t2.endColumn - 1);
          r2 = n2(e3);
        } else r2 = e2.getLineFirstNonWhitespaceColumn(i2) === 0;
        if (!r2) break;
      }
      return r2;
    }
    shouldIgnoreLine(e2, t2) {
      e2.tokenization.forceTokenization(t2);
      let n2 = e2.getLineFirstNonWhitespaceColumn(t2);
      if (n2 === 0) return true;
      let r2 = e2.tokenization.getLineTokens(t2);
      if (r2.getCount() > 0) {
        let e3 = r2.findTokenIndexAtOffset(n2);
        if (e3 >= 0 && r2.getStandardTokenType(e3) === 1) return true;
      }
      return false;
    }
    dispose() {
      this.callOnDispose.dispose(), this.callOnModel.dispose();
    }
  }, _Ja.ID = `editor.contrib.autoIndentOnPaste`, _Ja);
  mO = nO([
    rO(1, Tt)
  ], mO);
  function hO(e2, t2) {
    let n2 = (t3) => {
      let n3 = Zo(e2, t3);
      return n3 === 2;
    };
    return n2(t2.getStartPosition()) || n2(t2.getEndPosition());
  }
  function gO(e2, t2, n2, r2) {
    if (e2.getLineCount() === 1 && e2.getLineMaxColumn(1) === 1) return;
    let i2 = ``;
    for (let e3 = 0; e3 < n2; e3++) i2 += ` `;
    let a2 = new RegExp(i2, `gi`);
    for (let n3 = 1, o2 = e2.getLineCount(); n3 <= o2; n3++) {
      let o3 = e2.getLineFirstNonWhitespaceColumn(n3);
      if (o3 === 0 && (o3 = e2.getLineMaxColumn(n3)), o3 === 1) continue;
      let s2 = new P(n3, 1, n3, o3), c2 = e2.getValueInRange(s2), l2 = r2 ? c2.replace(/\t/gi, i2) : c2.replace(a2, `	`);
      t2.addEditOperation(s2, l2);
    }
  }
  var _O = class {
    constructor(e2, t2) {
      this.selection = e2, this.tabSize = t2, this.selectionId = null;
    }
    getEditOperations(e2, t2) {
      this.selectionId = t2.trackSelection(this.selection), gO(e2, t2, this.tabSize, true);
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this.selectionId);
    }
  }, vO = class {
    constructor(e2, t2) {
      this.selection = e2, this.tabSize = t2, this.selectionId = null;
    }
    getEditOperations(e2, t2) {
      this.selectionId = t2.trackSelection(this.selection), gO(e2, t2, this.tabSize, false);
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this.selectionId);
    }
  };
  X(mO.ID, mO, 2), J(iO), J(aO), J(sO), J(cO), J(lO), J(uO), J(dO), J(fO), X(Wv.ID, Wv, 1), Dh.register(Yv);
  var yO = class {
    constructor(e2, t2, n2) {
      this._editRange = e2, this._originalSelection = t2, this._text = n2;
    }
    getEditOperations(e2, t2) {
      t2.addTrackedEditOperation(this._editRange, this._text);
    }
    computeCursorState(e2, t2) {
      let n2 = t2.getInverseEditOperations(), r2 = n2[0].range;
      return this._originalSelection.isEmpty() ? new I(r2.endLineNumber, Math.min(this._originalSelection.positionColumn, r2.endColumn), r2.endLineNumber, Math.min(this._originalSelection.positionColumn, r2.endColumn)) : new I(r2.endLineNumber, r2.endColumn - this._text.length, r2.endLineNumber, r2.endColumn);
    }
  }, bO = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, xO = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, SO;
  let CO = (_Ka = class {
    static get(e2) {
      return e2.getContribution(SO.ID);
    }
    constructor(e2, t2) {
      this.editor = e2, this.editorWorkerService = t2, this.decorations = this.editor.createDecorationsCollection();
    }
    dispose() {
    }
    run(e2, t2) {
      var _a3;
      (_a3 = this.currentRequest) == null ? void 0 : _a3.cancel();
      let n2 = this.editor.getSelection(), r2 = this.editor.getModel();
      if (!r2 || !n2) return;
      let i2 = n2;
      if (i2.startLineNumber !== i2.endLineNumber) return;
      let a2 = new Pe(this.editor, 5), o2 = r2.uri;
      return this.editorWorkerService.canNavigateValueSet(o2) ? (this.currentRequest = sa((e3) => this.editorWorkerService.navigateValueSet(o2, i2, t2)), this.currentRequest.then((t3) => {
        var _a4;
        if (!t3 || !t3.range || !t3.value || !a2.validate(this.editor)) return;
        let n3 = P.lift(t3.range), r3 = t3.range, o3 = t3.value.length - (i2.endColumn - i2.startColumn);
        r3 = {
          startLineNumber: r3.startLineNumber,
          startColumn: r3.startColumn,
          endLineNumber: r3.endLineNumber,
          endColumn: r3.startColumn + t3.value.length
        }, o3 > 1 && (i2 = new I(i2.startLineNumber, i2.startColumn, i2.endLineNumber, i2.endColumn + o3 - 1));
        let s2 = new yO(n3, i2, t3.value);
        this.editor.pushUndoStop(), this.editor.executeCommand(e2, s2), this.editor.pushUndoStop(), this.decorations.set([
          {
            range: r3,
            options: SO.DECORATION
          }
        ]), (_a4 = this.decorationRemover) == null ? void 0 : _a4.cancel(), this.decorationRemover = Bl(350), this.decorationRemover.then(() => this.decorations.clear()).catch(G);
      }).catch(G)) : Promise.resolve(void 0);
    }
  }, SO = _Ka, _Ka.ID = `editor.contrib.inPlaceReplaceController`, _Ka.DECORATION = M.register({
    description: `in-place-replace`,
    className: `valueSetReplacement`
  }), _Ka);
  CO = SO = bO([
    xO(1, bt)
  ], CO);
  var wO = class extends w {
    constructor() {
      super({
        id: `editor.action.inPlaceReplace.up`,
        label: U(`InPlaceReplaceAction.previous.label`, `Replace with Previous Value`),
        alias: `Replace with Previous Value`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3159,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = CO.get(t2);
      return n2 ? n2.run(this.id, false) : Promise.resolve(void 0);
    }
  }, TO = class extends w {
    constructor() {
      super({
        id: `editor.action.inPlaceReplace.down`,
        label: U(`InPlaceReplaceAction.next.label`, `Replace with Next Value`),
        alias: `Replace with Next Value`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3161,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = CO.get(t2);
      return n2 ? n2.run(this.id, true) : Promise.resolve(void 0);
    }
  };
  X(CO.ID, CO, 4), J(wO), J(TO);
  var EO = class extends w {
    constructor() {
      super({
        id: `expandLineSelection`,
        label: U(`expandLineSelection`, `Expand Line Selection`),
        alias: `Expand Line Selection`,
        precondition: void 0,
        kbOpts: {
          weight: 0,
          kbExpr: T.textInputFocus,
          primary: 2090
        }
      });
    }
    run(e2, t2, n2) {
      if (n2 || (n2 = {}), !t2.hasModel()) return;
      let r2 = t2._getViewModel();
      r2.model.pushStackElement(), r2.setCursorStates(n2.source, 3, fe.expandLineSelection(r2, r2.getCursorStates())), r2.revealAllCursors(n2.source, true);
    }
  };
  J(EO);
  var DO = class {
    constructor(e2, t2, n2) {
      this._selection = e2, this._cursors = t2, this._selectionId = null, this._trimInRegexesAndStrings = n2;
    }
    getEditOperations(e2, t2) {
      let n2 = OO(e2, this._cursors, this._trimInRegexesAndStrings);
      for (let e3 = 0, r2 = n2.length; e3 < r2; e3++) {
        let r3 = n2[e3];
        t2.addEditOperation(r3.range, r3.text);
      }
      this._selectionId = t2.trackSelection(this._selection);
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this._selectionId);
    }
  };
  function OO(e2, t2, n2) {
    t2.sort((e3, t3) => e3.lineNumber === t3.lineNumber ? e3.column - t3.column : e3.lineNumber - t3.lineNumber);
    for (let e3 = t2.length - 2; e3 >= 0; e3--) t2[e3].lineNumber === t2[e3 + 1].lineNumber && t2.splice(e3, 1);
    let r2 = [], i2 = 0, a2 = 0, o2 = t2.length;
    for (let s2 = 1, c2 = e2.getLineCount(); s2 <= c2; s2++) {
      let c3 = e2.getLineContent(s2), l2 = c3.length + 1, u2 = 0;
      if (a2 < o2 && t2[a2].lineNumber === s2 && (u2 = t2[a2].column, a2++, u2 === l2) || c3.length === 0) continue;
      let d2 = mc(c3), f2 = 0;
      if (d2 === -1) f2 = 1;
      else if (d2 !== c3.length - 1) f2 = d2 + 2;
      else continue;
      if (!n2) {
        if (!e2.tokenization.hasAccurateTokensForLine(s2)) continue;
        let t3 = e2.tokenization.getLineTokens(s2), n3 = t3.getStandardTokenType(t3.findTokenIndexAtOffset(f2));
        if (n3 === 2 || n3 === 3) continue;
      }
      f2 = Math.max(u2, f2), r2[i2++] = Oe.delete(new P(s2, f2, s2, l2));
    }
    return r2;
  }
  var kO = class {
    constructor(e2, t2, n2) {
      this._selection = e2, this._isCopyingDown = t2, this._noop = n2 || false, this._selectionDirection = 0, this._selectionId = null, this._startLineNumberDelta = 0, this._endLineNumberDelta = 0;
    }
    getEditOperations(e2, t2) {
      let n2 = this._selection;
      this._startLineNumberDelta = 0, this._endLineNumberDelta = 0, n2.startLineNumber < n2.endLineNumber && n2.endColumn === 1 && (this._endLineNumberDelta = 1, n2 = n2.setEndPosition(n2.endLineNumber - 1, e2.getLineMaxColumn(n2.endLineNumber - 1)));
      let r2 = [];
      for (let t3 = n2.startLineNumber; t3 <= n2.endLineNumber; t3++) r2.push(e2.getLineContent(t3));
      let i2 = r2.join(`
`);
      i2 === `` && this._isCopyingDown && (this._startLineNumberDelta++, this._endLineNumberDelta++), this._noop ? t2.addEditOperation(new P(n2.endLineNumber, e2.getLineMaxColumn(n2.endLineNumber), n2.endLineNumber + 1, 1), n2.endLineNumber === e2.getLineCount() ? `` : `
`) : this._isCopyingDown ? t2.addEditOperation(new P(n2.startLineNumber, 1, n2.startLineNumber, 1), i2 + `
`) : t2.addEditOperation(new P(n2.endLineNumber, e2.getLineMaxColumn(n2.endLineNumber), n2.endLineNumber, e2.getLineMaxColumn(n2.endLineNumber)), `
` + i2), this._selectionId = t2.trackSelection(n2), this._selectionDirection = this._selection.getDirection();
    }
    computeCursorState(e2, t2) {
      let n2 = t2.getTrackedSelection(this._selectionId);
      if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {
        let e3 = n2.startLineNumber, t3 = n2.startColumn, r2 = n2.endLineNumber, i2 = n2.endColumn;
        this._startLineNumberDelta !== 0 && (e3 += this._startLineNumberDelta, t3 = 1), this._endLineNumberDelta !== 0 && (r2 += this._endLineNumberDelta, i2 = 1), n2 = I.createWithDirection(e3, t3, r2, i2, this._selectionDirection);
      }
      return n2;
    }
  }, AO = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, jO = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let MO = class {
    constructor(e2, t2, n2, r2) {
      this._languageConfigurationService = r2, this._selection = e2, this._isMovingDown = t2, this._autoIndent = n2, this._selectionId = null, this._moveEndLineSelectionShrink = false;
    }
    getEditOperations(e2, t2) {
      let n2 = () => e2.getLanguageId(), r2 = (t3, n3) => e2.getLanguageIdAtPosition(t3, n3), i2 = e2.getLineCount();
      if (this._isMovingDown && this._selection.endLineNumber === i2) {
        this._selectionId = t2.trackSelection(this._selection);
        return;
      }
      if (!this._isMovingDown && this._selection.startLineNumber === 1) {
        this._selectionId = t2.trackSelection(this._selection);
        return;
      }
      this._moveEndPositionDown = false;
      let a2 = this._selection;
      a2.startLineNumber < a2.endLineNumber && a2.endColumn === 1 && (this._moveEndPositionDown = true, a2 = a2.setEndPosition(a2.endLineNumber - 1, e2.getLineMaxColumn(a2.endLineNumber - 1)));
      let { tabSize: o2, indentSize: s2, insertSpaces: c2 } = e2.getOptions(), l2 = this.buildIndentConverter(o2, s2, c2);
      if (a2.startLineNumber === a2.endLineNumber && e2.getLineMaxColumn(a2.startLineNumber) === 1) {
        let n3 = a2.startLineNumber, r3 = this._isMovingDown ? n3 + 1 : n3 - 1;
        e2.getLineMaxColumn(r3) === 1 ? t2.addEditOperation(new P(1, 1, 1, 1), null) : (t2.addEditOperation(new P(n3, 1, n3, 1), e2.getLineContent(r3)), t2.addEditOperation(new P(r3, 1, r3, e2.getLineMaxColumn(r3)), null)), a2 = new I(r3, 1, r3, 1);
      } else {
        let i3, s3;
        if (this._isMovingDown) {
          i3 = a2.endLineNumber + 1, s3 = e2.getLineContent(i3), t2.addEditOperation(new P(i3 - 1, e2.getLineMaxColumn(i3 - 1), i3, e2.getLineMaxColumn(i3)), null);
          let u2 = s3;
          if (this.shouldAutoIndent(e2, a2)) {
            let d2 = this.matchEnterRule(e2, l2, o2, i3, a2.startLineNumber - 1);
            if (d2 !== null) {
              let t3 = Ko(e2.getLineContent(i3)), n3 = d2 + QD(t3, o2), r3 = $D(n3, o2, c2);
              u2 = r3 + this.trimStart(s3);
            } else {
              let t3 = {
                tokenization: {
                  getLineTokens: (t4) => t4 === a2.startLineNumber ? e2.tokenization.getLineTokens(i3) : e2.tokenization.getLineTokens(t4),
                  getLanguageId: n2,
                  getLanguageIdAtPosition: r2
                },
                getLineContent: (t4) => t4 === a2.startLineNumber ? e2.getLineContent(i3) : e2.getLineContent(t4)
              }, d3 = Uo(this._autoIndent, t3, e2.getLanguageIdAtPosition(i3, 1), a2.startLineNumber, l2, this._languageConfigurationService);
              if (d3 !== null) {
                let t4 = Ko(e2.getLineContent(i3)), n3 = QD(d3, o2), r3 = QD(t4, o2);
                if (n3 !== r3) {
                  let e3 = $D(n3, o2, c2);
                  u2 = e3 + this.trimStart(s3);
                }
              }
            }
            t2.addEditOperation(new P(a2.startLineNumber, 1, a2.startLineNumber, 1), u2 + `
`);
            let f2 = this.matchEnterRuleMovingDown(e2, l2, o2, a2.startLineNumber, i3, u2);
            if (f2 !== null) f2 !== 0 && this.getIndentEditsOfMovingBlock(e2, t2, a2, o2, c2, f2);
            else {
              let s4 = {
                tokenization: {
                  getLineTokens: (t3) => t3 === a2.startLineNumber ? e2.tokenization.getLineTokens(i3) : t3 >= a2.startLineNumber + 1 && t3 <= a2.endLineNumber + 1 ? e2.tokenization.getLineTokens(t3 - 1) : e2.tokenization.getLineTokens(t3),
                  getLanguageId: n2,
                  getLanguageIdAtPosition: r2
                },
                getLineContent: (t3) => t3 === a2.startLineNumber ? u2 : t3 >= a2.startLineNumber + 1 && t3 <= a2.endLineNumber + 1 ? e2.getLineContent(t3 - 1) : e2.getLineContent(t3)
              }, d3 = Uo(this._autoIndent, s4, e2.getLanguageIdAtPosition(i3, 1), a2.startLineNumber + 1, l2, this._languageConfigurationService);
              if (d3 !== null) {
                let n3 = Ko(e2.getLineContent(a2.startLineNumber)), r3 = QD(d3, o2), i4 = QD(n3, o2);
                if (r3 !== i4) {
                  let n4 = r3 - i4;
                  this.getIndentEditsOfMovingBlock(e2, t2, a2, o2, c2, n4);
                }
              }
            }
          } else t2.addEditOperation(new P(a2.startLineNumber, 1, a2.startLineNumber, 1), u2 + `
`);
        } else if (i3 = a2.startLineNumber - 1, s3 = e2.getLineContent(i3), t2.addEditOperation(new P(i3, 1, i3 + 1, 1), null), t2.addEditOperation(new P(a2.endLineNumber, e2.getLineMaxColumn(a2.endLineNumber), a2.endLineNumber, e2.getLineMaxColumn(a2.endLineNumber)), `
` + s3), this.shouldAutoIndent(e2, a2)) {
          let s4 = {
            tokenization: {
              getLineTokens: (t3) => t3 === i3 ? e2.tokenization.getLineTokens(a2.startLineNumber) : e2.tokenization.getLineTokens(t3),
              getLanguageId: n2,
              getLanguageIdAtPosition: r2
            },
            getLineContent: (t3) => t3 === i3 ? e2.getLineContent(a2.startLineNumber) : e2.getLineContent(t3)
          }, u2 = this.matchEnterRule(e2, l2, o2, a2.startLineNumber, a2.startLineNumber - 2);
          if (u2 !== null) u2 !== 0 && this.getIndentEditsOfMovingBlock(e2, t2, a2, o2, c2, u2);
          else {
            let n3 = Uo(this._autoIndent, s4, e2.getLanguageIdAtPosition(a2.startLineNumber, 1), i3, l2, this._languageConfigurationService);
            if (n3 !== null) {
              let r3 = Ko(e2.getLineContent(a2.startLineNumber)), i4 = QD(n3, o2), s5 = QD(r3, o2);
              if (i4 !== s5) {
                let n4 = i4 - s5;
                this.getIndentEditsOfMovingBlock(e2, t2, a2, o2, c2, n4);
              }
            }
          }
        }
      }
      this._selectionId = t2.trackSelection(a2);
    }
    buildIndentConverter(e2, t2, n2) {
      return {
        shiftIndent: (r2) => Er.shiftIndent(r2, r2.length + 1, e2, t2, n2),
        unshiftIndent: (r2) => Er.unshiftIndent(r2, r2.length + 1, e2, t2, n2)
      };
    }
    parseEnterResult(e2, t2, n2, r2, i2) {
      if (i2) {
        let a2 = i2.indentation;
        i2.indentAction === Zt.None || i2.indentAction === Zt.Indent ? a2 = i2.indentation + i2.appendText : i2.indentAction === Zt.IndentOutdent ? a2 = i2.indentation : i2.indentAction === Zt.Outdent && (a2 = t2.unshiftIndent(i2.indentation) + i2.appendText);
        let o2 = e2.getLineContent(r2);
        if (this.trimStart(o2).indexOf(this.trimStart(a2)) >= 0) {
          let i3 = Ko(e2.getLineContent(r2)), o3 = Ko(a2), s2 = Go(e2, r2, this._languageConfigurationService);
          s2 !== null && s2 & 2 && (o3 = t2.unshiftIndent(o3));
          let c2 = QD(o3, n2), l2 = QD(i3, n2);
          return c2 - l2;
        }
      }
      return null;
    }
    matchEnterRuleMovingDown(e2, t2, n2, r2, i2, a2) {
      if (mc(a2) >= 0) {
        let a3 = e2.getLineMaxColumn(i2), o2 = Ho(this._autoIndent, e2, new P(i2, a3, i2, a3), this._languageConfigurationService);
        return this.parseEnterResult(e2, t2, n2, r2, o2);
      } else {
        let i3 = r2 - 1;
        for (; i3 >= 1; ) {
          let t3 = e2.getLineContent(i3), n3 = mc(t3);
          if (n3 >= 0) break;
          i3--;
        }
        if (i3 < 1 || r2 > e2.getLineCount()) return null;
        let a3 = e2.getLineMaxColumn(i3), o2 = Ho(this._autoIndent, e2, new P(i3, a3, i3, a3), this._languageConfigurationService);
        return this.parseEnterResult(e2, t2, n2, r2, o2);
      }
    }
    matchEnterRule(e2, t2, n2, r2, i2, a2) {
      let o2 = i2;
      for (; o2 >= 1; ) {
        let t3;
        t3 = o2 === i2 && a2 !== void 0 ? a2 : e2.getLineContent(o2);
        let n3 = mc(t3);
        if (n3 >= 0) break;
        o2--;
      }
      if (o2 < 1 || r2 > e2.getLineCount()) return null;
      let s2 = e2.getLineMaxColumn(o2), c2 = Ho(this._autoIndent, e2, new P(o2, s2, o2, s2), this._languageConfigurationService);
      return this.parseEnterResult(e2, t2, n2, r2, c2);
    }
    trimStart(e2) {
      return e2.replace(/^\s+/, ``);
    }
    shouldAutoIndent(e2, t2) {
      if (this._autoIndent < 4 || !e2.tokenization.isCheapToTokenize(t2.startLineNumber)) return false;
      let n2 = e2.getLanguageIdAtPosition(t2.startLineNumber, 1), r2 = e2.getLanguageIdAtPosition(t2.endLineNumber, 1);
      return !(n2 !== r2 || this._languageConfigurationService.getLanguageConfiguration(n2).indentRulesSupport === null);
    }
    getIndentEditsOfMovingBlock(e2, t2, n2, r2, i2, a2) {
      for (let o2 = n2.startLineNumber; o2 <= n2.endLineNumber; o2++) {
        let s2 = e2.getLineContent(o2), c2 = Ko(s2), l2 = QD(c2, r2), u2 = l2 + a2, d2 = $D(u2, r2, i2);
        d2 !== c2 && (t2.addEditOperation(new P(o2, 1, o2, c2.length + 1), d2), o2 === n2.endLineNumber && n2.endColumn <= c2.length + 1 && d2 === `` && (this._moveEndLineSelectionShrink = true));
      }
    }
    computeCursorState(e2, t2) {
      let n2 = t2.getTrackedSelection(this._selectionId);
      return this._moveEndPositionDown && (n2 = n2.setEndPosition(n2.endLineNumber + 1, 1)), this._moveEndLineSelectionShrink && n2.startLineNumber < n2.endLineNumber && (n2 = n2.setEndPosition(n2.endLineNumber, 2)), n2;
    }
  };
  MO = AO([
    jO(3, Tt)
  ], MO);
  var NO = (_La = class {
    static getCollator() {
      return _La._COLLATOR || (_La._COLLATOR = new Intl.Collator()), _La._COLLATOR;
    }
    constructor(e2, t2) {
      this.selection = e2, this.descending = t2, this.selectionId = null;
    }
    getEditOperations(e2, t2) {
      let n2 = FO(e2, this.selection, this.descending);
      n2 && t2.addEditOperation(n2.range, n2.text), this.selectionId = t2.trackSelection(this.selection);
    }
    computeCursorState(e2, t2) {
      return t2.getTrackedSelection(this.selectionId);
    }
    static canRun(e2, t2, n2) {
      if (e2 === null) return false;
      let r2 = PO(e2, t2, n2);
      if (!r2) return false;
      for (let e3 = 0, t3 = r2.before.length; e3 < t3; e3++) if (r2.before[e3] !== r2.after[e3]) return true;
      return false;
    }
  }, _La._COLLATOR = null, _La);
  function PO(e2, t2, n2) {
    let r2 = t2.startLineNumber, i2 = t2.endLineNumber;
    if (t2.endColumn === 1 && i2--, r2 >= i2) return null;
    let a2 = [];
    for (let t3 = r2; t3 <= i2; t3++) a2.push(e2.getLineContent(t3));
    let o2 = a2.slice(0);
    return o2.sort(NO.getCollator().compare), n2 === true && (o2 = o2.reverse()), {
      startLineNumber: r2,
      endLineNumber: i2,
      before: a2,
      after: o2
    };
  }
  function FO(e2, t2, n2) {
    let r2 = PO(e2, t2, n2);
    return r2 ? Oe.replace(new P(r2.startLineNumber, 1, r2.endLineNumber, e2.getLineMaxColumn(r2.endLineNumber)), r2.after.join(`
`)) : null;
  }
  var IO = class extends w {
    constructor(e2, t2) {
      super(t2), this.down = e2;
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getSelections().map((e3, t3) => ({
        selection: e3,
        index: t3,
        ignore: false
      }));
      n2.sort((e3, t3) => P.compareRangesUsingStarts(e3.selection, t3.selection));
      let r2 = n2[0];
      for (let e3 = 1; e3 < n2.length; e3++) {
        let t3 = n2[e3];
        r2.selection.endLineNumber === t3.selection.startLineNumber && (r2.index < t3.index ? t3.ignore = true : (r2.ignore = true, r2 = t3));
      }
      let i2 = [];
      for (let e3 of n2) i2.push(new kO(e3.selection, this.down, e3.ignore));
      t2.pushUndoStop(), t2.executeCommands(this.id, i2), t2.pushUndoStop();
    }
  }, LO = class extends IO {
    constructor() {
      super(false, {
        id: `editor.action.copyLinesUpAction`,
        label: U(`lines.copyUp`, `Copy Line Up`),
        alias: `Copy Line Up`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1552,
          linux: {
            primary: 3600
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `2_line`,
          title: U({
            key: `miCopyLinesUp`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Copy Line Up`),
          order: 1
        }
      });
    }
  }, RO = class extends IO {
    constructor() {
      super(true, {
        id: `editor.action.copyLinesDownAction`,
        label: U(`lines.copyDown`, `Copy Line Down`),
        alias: `Copy Line Down`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1554,
          linux: {
            primary: 3602
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `2_line`,
          title: U({
            key: `miCopyLinesDown`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Co&&py Line Down`),
          order: 2
        }
      });
    }
  }, zO = class extends w {
    constructor() {
      super({
        id: `editor.action.duplicateSelection`,
        label: U(`duplicateSelection`, `Duplicate Selection`),
        alias: `Duplicate Selection`,
        precondition: T.writable,
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `2_line`,
          title: U({
            key: `miDuplicateSelection`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Duplicate Selection`),
          order: 5
        }
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = [], i2 = t2.getSelections(), a2 = t2.getModel();
      for (let e3 of i2) if (e3.isEmpty()) r2.push(new kO(e3, true));
      else {
        let t3 = new I(e3.endLineNumber, e3.endColumn, e3.endLineNumber, e3.endColumn);
        r2.push(new fr(t3, a2.getValueInRange(e3)));
      }
      t2.pushUndoStop(), t2.executeCommands(this.id, r2), t2.pushUndoStop();
    }
  }, BO = class extends w {
    constructor(e2, t2) {
      super(t2), this.down = e2;
    }
    run(e2, t2) {
      let n2 = e2.get(Tt), r2 = [], i2 = t2.getSelections() || [], a2 = t2.getOption(12);
      for (let e3 of i2) r2.push(new MO(e3, this.down, a2, n2));
      t2.pushUndoStop(), t2.executeCommands(this.id, r2), t2.pushUndoStop();
    }
  }, VO = class extends BO {
    constructor() {
      super(false, {
        id: `editor.action.moveLinesUpAction`,
        label: U(`lines.moveUp`, `Move Line Up`),
        alias: `Move Line Up`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 528,
          linux: {
            primary: 528
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `2_line`,
          title: U({
            key: `miMoveLinesUp`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Mo&&ve Line Up`),
          order: 3
        }
      });
    }
  }, HO = class extends BO {
    constructor() {
      super(true, {
        id: `editor.action.moveLinesDownAction`,
        label: U(`lines.moveDown`, `Move Line Down`),
        alias: `Move Line Down`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 530,
          linux: {
            primary: 530
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `2_line`,
          title: U({
            key: `miMoveLinesDown`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Move &&Line Down`),
          order: 4
        }
      });
    }
  }, UO = class extends w {
    constructor(e2, t2) {
      super(t2), this.descending = e2;
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getModel(), r2 = t2.getSelections();
      r2.length === 1 && r2[0].isEmpty() && (r2 = [
        new I(1, 1, n2.getLineCount(), n2.getLineMaxColumn(n2.getLineCount()))
      ]);
      for (let e3 of r2) if (!NO.canRun(t2.getModel(), e3, this.descending)) return;
      let i2 = [];
      for (let e3 = 0, t3 = r2.length; e3 < t3; e3++) i2[e3] = new NO(r2[e3], this.descending);
      t2.pushUndoStop(), t2.executeCommands(this.id, i2), t2.pushUndoStop();
    }
  }, WO = class extends UO {
    constructor() {
      super(false, {
        id: `editor.action.sortLinesAscending`,
        label: U(`lines.sortAscending`, `Sort Lines Ascending`),
        alias: `Sort Lines Ascending`,
        precondition: T.writable
      });
    }
  }, GO = class extends UO {
    constructor() {
      super(true, {
        id: `editor.action.sortLinesDescending`,
        label: U(`lines.sortDescending`, `Sort Lines Descending`),
        alias: `Sort Lines Descending`,
        precondition: T.writable
      });
    }
  }, KO = class extends w {
    constructor() {
      super({
        id: `editor.action.removeDuplicateLines`,
        label: U(`lines.deleteDuplicates`, `Delete Duplicate Lines`),
        alias: `Delete Duplicate Lines`,
        precondition: T.writable
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getModel();
      if (n2.getLineCount() === 1 && n2.getLineMaxColumn(1) === 1) return;
      let r2 = [], i2 = [], a2 = 0, o2 = true, s2 = t2.getSelections();
      s2.length === 1 && s2[0].isEmpty() && (s2 = [
        new I(1, 1, n2.getLineCount(), n2.getLineMaxColumn(n2.getLineCount()))
      ], o2 = false);
      for (let e3 of s2) {
        let t3 = /* @__PURE__ */ new Set(), o3 = [];
        for (let r3 = e3.startLineNumber; r3 <= e3.endLineNumber; r3++) {
          let e4 = n2.getLineContent(r3);
          t3.has(e4) || (o3.push(e4), t3.add(e4));
        }
        let s3 = new I(e3.startLineNumber, 1, e3.endLineNumber, n2.getLineMaxColumn(e3.endLineNumber)), c2 = e3.startLineNumber - a2, l2 = new I(c2, 1, c2 + o3.length - 1, o3[o3.length - 1].length);
        r2.push(Oe.replace(s3, o3.join(`
`))), i2.push(l2), a2 += e3.endLineNumber - e3.startLineNumber + 1 - o3.length;
      }
      t2.pushUndoStop(), t2.executeEdits(this.id, r2, o2 ? i2 : void 0), t2.pushUndoStop();
    }
  }, qO = (_Ma = class extends w {
    constructor() {
      super({
        id: _Ma.ID,
        label: U(`lines.trimTrailingWhitespace`, `Trim Trailing Whitespace`),
        alias: `Trim Trailing Whitespace`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: un(2089, 2102),
          weight: 100
        }
      });
    }
    run(e2, t2, n2) {
      let r2 = [];
      n2.reason === `auto-save` && (r2 = (t2.getSelections() || []).map((e3) => new N(e3.positionLineNumber, e3.positionColumn)));
      let i2 = t2.getSelection();
      if (i2 === null) return;
      let a2 = e2.get(D), o2 = t2.getModel(), s2 = a2.getValue(`files.trimTrailingWhitespaceInRegexAndStrings`, {
        overrideIdentifier: o2 == null ? void 0 : o2.getLanguageId(),
        resource: o2 == null ? void 0 : o2.uri
      }), c2 = new DO(i2, r2, s2);
      t2.pushUndoStop(), t2.executeCommands(this.id, [
        c2
      ]), t2.pushUndoStop();
    }
  }, _Ma.ID = `editor.action.trimTrailingWhitespace`, _Ma), JO = class extends w {
    constructor() {
      super({
        id: `editor.action.deleteLines`,
        label: U(`lines.delete`, `Delete Line`),
        alias: `Delete Line`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 3113,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = this._getLinesToRemove(t2), r2 = t2.getModel();
      if (r2.getLineCount() === 1 && r2.getLineMaxColumn(1) === 1) return;
      let i2 = 0, a2 = [], o2 = [];
      for (let e3 = 0, t3 = n2.length; e3 < t3; e3++) {
        let t4 = n2[e3], s2 = t4.startLineNumber, c2 = t4.endLineNumber, l2 = 1, u2 = r2.getLineMaxColumn(c2);
        c2 < r2.getLineCount() ? (c2 += 1, u2 = 1) : s2 > 1 && (--s2, l2 = r2.getLineMaxColumn(s2)), a2.push(Oe.replace(new I(s2, l2, c2, u2), ``)), o2.push(new I(s2 - i2, t4.positionColumn, s2 - i2, t4.positionColumn)), i2 += t4.endLineNumber - t4.startLineNumber + 1;
      }
      t2.pushUndoStop(), t2.executeEdits(this.id, a2, o2), t2.pushUndoStop();
    }
    _getLinesToRemove(e2) {
      let t2 = e2.getSelections().map((e3) => {
        let t3 = e3.endLineNumber;
        return e3.startLineNumber < e3.endLineNumber && e3.endColumn === 1 && --t3, {
          startLineNumber: e3.startLineNumber,
          selectionStartColumn: e3.selectionStartColumn,
          endLineNumber: t3,
          positionColumn: e3.positionColumn
        };
      });
      t2.sort((e3, t3) => e3.startLineNumber === t3.startLineNumber ? e3.endLineNumber - t3.endLineNumber : e3.startLineNumber - t3.startLineNumber);
      let n2 = [], r2 = t2[0];
      for (let e3 = 1; e3 < t2.length; e3++) r2.endLineNumber + 1 >= t2[e3].startLineNumber ? r2.endLineNumber = t2[e3].endLineNumber : (n2.push(r2), r2 = t2[e3]);
      return n2.push(r2), n2;
    }
  }, YO = class extends w {
    constructor() {
      super({
        id: `editor.action.indentLines`,
        label: U(`lines.indent`, `Indent Line`),
        alias: `Indent Line`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2142,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = t2._getViewModel();
      n2 && (t2.pushUndoStop(), t2.executeCommands(this.id, ei.indent(n2.cursorConfig, t2.getModel(), t2.getSelections())), t2.pushUndoStop());
    }
  }, XO = class extends w {
    constructor() {
      super({
        id: `editor.action.outdentLines`,
        label: U(`lines.outdent`, `Outdent Line`),
        alias: `Outdent Line`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2140,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      le.Outdent.runEditorCommand(e2, t2, null);
    }
  }, ZO = class extends w {
    constructor() {
      super({
        id: `editor.action.insertLineBefore`,
        label: U(`lines.insertBefore`, `Insert Line Above`),
        alias: `Insert Line Above`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3075,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = t2._getViewModel();
      n2 && (t2.pushUndoStop(), t2.executeCommands(this.id, Re.lineInsertBefore(n2.cursorConfig, t2.getModel(), t2.getSelections())));
    }
  }, QO = class extends w {
    constructor() {
      super({
        id: `editor.action.insertLineAfter`,
        label: U(`lines.insertAfter`, `Insert Line Below`),
        alias: `Insert Line Below`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2051,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = t2._getViewModel();
      n2 && (t2.pushUndoStop(), t2.executeCommands(this.id, Re.lineInsertAfter(n2.cursorConfig, t2.getModel(), t2.getSelections())));
    }
  }, $O = class extends w {
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getSelection(), r2 = this._getRangesToDelete(t2), i2 = [];
      for (let e3 = 0, t3 = r2.length - 1; e3 < t3; e3++) {
        let t4 = r2[e3], n3 = r2[e3 + 1];
        P.intersectRanges(t4, n3) === null ? i2.push(t4) : r2[e3 + 1] = P.plusRange(t4, n3);
      }
      i2.push(r2[r2.length - 1]);
      let a2 = this._getEndCursorState(n2, i2), o2 = i2.map((e3) => Oe.replace(e3, ``));
      t2.pushUndoStop(), t2.executeEdits(this.id, o2, a2), t2.pushUndoStop();
    }
  }, ek = class extends $O {
    constructor() {
      super({
        id: `deleteAllLeft`,
        label: U(`lines.deleteAllLeft`, `Delete All Left`),
        alias: `Delete All Left`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 2049
          },
          weight: 100
        }
      });
    }
    _getEndCursorState(e2, t2) {
      let n2 = null, r2 = [], i2 = 0;
      return t2.forEach((t3) => {
        let a2;
        if (t3.endColumn === 1 && i2 > 0) {
          let e3 = t3.startLineNumber - i2;
          a2 = new I(e3, t3.startColumn, e3, t3.startColumn);
        } else a2 = new I(t3.startLineNumber, t3.startColumn, t3.startLineNumber, t3.startColumn);
        i2 += t3.endLineNumber - t3.startLineNumber, t3.intersectRanges(e2) ? n2 = a2 : r2.push(a2);
      }), n2 && r2.unshift(n2), r2;
    }
    _getRangesToDelete(e2) {
      let t2 = e2.getSelections();
      if (t2 === null) return [];
      let n2 = t2, r2 = e2.getModel();
      return r2 === null ? [] : (n2.sort(P.compareRangesUsingStarts), n2 = n2.map((e3) => {
        if (e3.isEmpty()) if (e3.startColumn === 1) {
          let t3 = Math.max(1, e3.startLineNumber - 1), n3 = e3.startLineNumber === 1 ? 1 : r2.getLineLength(t3) + 1;
          return new P(t3, n3, e3.startLineNumber, 1);
        } else return new P(e3.startLineNumber, 1, e3.startLineNumber, e3.startColumn);
        else return new P(e3.startLineNumber, 1, e3.endLineNumber, e3.endColumn);
      }), n2);
    }
  }, tk = class extends $O {
    constructor() {
      super({
        id: `deleteAllRight`,
        label: U(`lines.deleteAllRight`, `Delete All Right`),
        alias: `Delete All Right`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 297,
            secondary: [
              2068
            ]
          },
          weight: 100
        }
      });
    }
    _getEndCursorState(e2, t2) {
      let n2 = null, r2 = [];
      for (let i2 = 0, a2 = t2.length, o2 = 0; i2 < a2; i2++) {
        let a3 = t2[i2], s2 = new I(a3.startLineNumber - o2, a3.startColumn, a3.startLineNumber - o2, a3.startColumn);
        a3.intersectRanges(e2) ? n2 = s2 : r2.push(s2);
      }
      return n2 && r2.unshift(n2), r2;
    }
    _getRangesToDelete(e2) {
      let t2 = e2.getModel();
      if (t2 === null) return [];
      let n2 = e2.getSelections();
      if (n2 === null) return [];
      let r2 = n2.map((e3) => {
        if (e3.isEmpty()) {
          let n3 = t2.getLineMaxColumn(e3.startLineNumber);
          return e3.startColumn === n3 ? new P(e3.startLineNumber, e3.startColumn, e3.startLineNumber + 1, 1) : new P(e3.startLineNumber, e3.startColumn, e3.startLineNumber, n3);
        }
        return e3;
      });
      return r2.sort(P.compareRangesUsingStarts), r2;
    }
  }, nk = class extends w {
    constructor() {
      super({
        id: `editor.action.joinLines`,
        label: U(`lines.joinLines`, `Join Lines`),
        alias: `Join Lines`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 0,
          mac: {
            primary: 296
          },
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = t2.getSelections();
      if (n2 === null) return;
      let r2 = t2.getSelection();
      if (r2 === null) return;
      n2.sort(P.compareRangesUsingStarts);
      let i2 = [], a2 = n2.reduce((e3, t3) => e3.isEmpty() ? e3.endLineNumber === t3.startLineNumber ? (r2.equalsSelection(e3) && (r2 = t3), t3) : t3.startLineNumber > e3.endLineNumber + 1 ? (i2.push(e3), t3) : new I(e3.startLineNumber, e3.startColumn, t3.endLineNumber, t3.endColumn) : t3.startLineNumber > e3.endLineNumber ? (i2.push(e3), t3) : new I(e3.startLineNumber, e3.startColumn, t3.endLineNumber, t3.endColumn));
      i2.push(a2);
      let o2 = t2.getModel();
      if (o2 === null) return;
      let s2 = [], c2 = [], l2 = r2, u2 = 0;
      for (let e3 = 0, t3 = i2.length; e3 < t3; e3++) {
        let t4 = i2[e3], n3 = t4.startLineNumber, a3 = 1, d2 = 0, f2, p2, m2 = o2.getLineLength(t4.endLineNumber) - t4.endColumn;
        if (t4.isEmpty() || t4.startLineNumber === t4.endLineNumber) {
          let e4 = t4.getStartPosition();
          e4.lineNumber < o2.getLineCount() ? (f2 = n3 + 1, p2 = o2.getLineMaxColumn(f2)) : (f2 = e4.lineNumber, p2 = o2.getLineMaxColumn(e4.lineNumber));
        } else f2 = t4.endLineNumber, p2 = o2.getLineMaxColumn(f2);
        let h2 = o2.getLineContent(n3);
        for (let e4 = n3 + 1; e4 <= f2; e4++) {
          let t5 = o2.getLineContent(e4), n4 = o2.getLineFirstNonWhitespaceColumn(e4);
          if (n4 >= 1) {
            let e5 = true;
            h2 === `` && (e5 = false), e5 && (h2.charAt(h2.length - 1) === ` ` || h2.charAt(h2.length - 1) === `	`) && (e5 = false, h2 = h2.replace(/[\s\uFEFF\xA0]+$/g, ` `));
            let r3 = t5.substr(n4 - 1);
            h2 += (e5 ? ` ` : ``) + r3, d2 = e5 ? r3.length + 1 : r3.length;
          } else d2 = 0;
        }
        let g2 = new P(n3, a3, f2, p2);
        if (!g2.isEmpty()) {
          let e4;
          t4.isEmpty() ? (s2.push(Oe.replace(g2, h2)), e4 = new I(g2.startLineNumber - u2, h2.length - d2 + 1, n3 - u2, h2.length - d2 + 1)) : t4.startLineNumber === t4.endLineNumber ? (s2.push(Oe.replace(g2, h2)), e4 = new I(t4.startLineNumber - u2, t4.startColumn, t4.endLineNumber - u2, t4.endColumn)) : (s2.push(Oe.replace(g2, h2)), e4 = new I(t4.startLineNumber - u2, t4.startColumn, t4.startLineNumber - u2, h2.length - m2)), P.intersectRanges(g2, r2) === null ? c2.push(e4) : l2 = e4;
        }
        u2 += g2.endLineNumber - g2.startLineNumber;
      }
      c2.unshift(l2), t2.pushUndoStop(), t2.executeEdits(this.id, s2, c2), t2.pushUndoStop();
    }
  }, rk = class extends w {
    constructor() {
      super({
        id: `editor.action.transpose`,
        label: U(`editor.transpose`, `Transpose Characters around the Cursor`),
        alias: `Transpose Characters around the Cursor`,
        precondition: T.writable
      });
    }
    run(e2, t2) {
      let n2 = t2.getSelections();
      if (n2 === null) return;
      let r2 = t2.getModel();
      if (r2 === null) return;
      let i2 = [];
      for (let e3 = 0, t3 = n2.length; e3 < t3; e3++) {
        let t4 = n2[e3];
        if (!t4.isEmpty()) continue;
        let a2 = t4.getStartPosition(), o2 = r2.getLineMaxColumn(a2.lineNumber);
        if (a2.column >= o2) {
          if (a2.lineNumber === r2.getLineCount()) continue;
          let e4 = new P(a2.lineNumber, Math.max(1, a2.column - 1), a2.lineNumber + 1, 1), t5 = r2.getValueInRange(e4).split(``).reverse().join(``);
          i2.push(new ur(new I(a2.lineNumber, Math.max(1, a2.column - 1), a2.lineNumber + 1, 1), t5));
        } else {
          let e4 = new P(a2.lineNumber, Math.max(1, a2.column - 1), a2.lineNumber, a2.column + 1), t5 = r2.getValueInRange(e4).split(``).reverse().join(``);
          i2.push(new dr(e4, t5, new I(a2.lineNumber, a2.column + 1, a2.lineNumber, a2.column + 1)));
        }
      }
      t2.pushUndoStop(), t2.executeCommands(this.id, i2), t2.pushUndoStop();
    }
  }, ik = class extends w {
    run(e2, t2) {
      let n2 = t2.getSelections();
      if (n2 === null) return;
      let r2 = t2.getModel();
      if (r2 === null) return;
      let i2 = t2.getOption(132), a2 = [];
      for (let e3 of n2) if (e3.isEmpty()) {
        let n3 = e3.getStartPosition(), o2 = t2.getConfiguredWordAtPosition(n3);
        if (!o2) continue;
        let s2 = new P(n3.lineNumber, o2.startColumn, n3.lineNumber, o2.endColumn), c2 = r2.getValueInRange(s2);
        a2.push(Oe.replace(s2, this._modifyText(c2, i2)));
      } else {
        let t3 = r2.getValueInRange(e3);
        a2.push(Oe.replace(e3, this._modifyText(t3, i2)));
      }
      t2.pushUndoStop(), t2.executeEdits(this.id, a2), t2.pushUndoStop();
    }
  }, ak = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToUppercase`,
        label: U(`editor.transformToUppercase`, `Transform to Uppercase`),
        alias: `Transform to Uppercase`,
        precondition: T.writable
      });
    }
    _modifyText(e2, t2) {
      return e2.toLocaleUpperCase();
    }
  }, ok = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToLowercase`,
        label: U(`editor.transformToLowercase`, `Transform to Lowercase`),
        alias: `Transform to Lowercase`,
        precondition: T.writable
      });
    }
    _modifyText(e2, t2) {
      return e2.toLocaleLowerCase();
    }
  }, sk = class {
    constructor(e2, t2) {
      this._pattern = e2, this._flags = t2, this._actual = null, this._evaluated = false;
    }
    get() {
      if (!this._evaluated) {
        this._evaluated = true;
        try {
          this._actual = new RegExp(this._pattern, this._flags);
        } catch {
        }
      }
      return this._actual;
    }
    isSupported() {
      return this.get() !== null;
    }
  }, ck = (_Na = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToTitlecase`,
        label: U(`editor.transformToTitlecase`, `Transform to Title Case`),
        alias: `Transform to Title Case`,
        precondition: T.writable
      });
    }
    _modifyText(t2, n2) {
      let r2 = _Na.titleBoundary.get();
      return r2 ? t2.toLocaleLowerCase().replace(r2, (e2) => e2.toLocaleUpperCase()) : t2;
    }
  }, _Na.titleBoundary = new sk(`(^|[^\\p{L}\\p{N}']|((^|\\P{L})'))\\p{L}`, `gmu`), _Na), lk = (_Oa = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToSnakecase`,
        label: U(`editor.transformToSnakecase`, `Transform to Snake Case`),
        alias: `Transform to Snake Case`,
        precondition: T.writable
      });
    }
    _modifyText(t2, n2) {
      let r2 = _Oa.caseBoundary.get(), i2 = _Oa.singleLetters.get();
      return !r2 || !i2 ? t2 : t2.replace(r2, `$1_$2`).replace(i2, `$1_$2$3`).toLocaleLowerCase();
    }
  }, _Oa.caseBoundary = new sk(`(\\p{Ll})(\\p{Lu})`, `gmu`), _Oa.singleLetters = new sk(`(\\p{Lu}|\\p{N})(\\p{Lu})(\\p{Ll})`, `gmu`), _Oa), uk = (_Pa = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToCamelcase`,
        label: U(`editor.transformToCamelcase`, `Transform to Camel Case`),
        alias: `Transform to Camel Case`,
        precondition: T.writable
      });
    }
    _modifyText(t2, n2) {
      let r2 = _Pa.wordBoundary.get();
      if (!r2) return t2;
      let i2 = t2.split(r2), a2 = i2.shift();
      return a2 + i2.map((e2) => e2.substring(0, 1).toLocaleUpperCase() + e2.substring(1)).join(``);
    }
  }, _Pa.wordBoundary = new sk(`[_\\s-]`, `gm`), _Pa), dk = (_Qa = class extends ik {
    constructor() {
      super({
        id: `editor.action.transformToPascalcase`,
        label: U(`editor.transformToPascalcase`, `Transform to Pascal Case`),
        alias: `Transform to Pascal Case`,
        precondition: T.writable
      });
    }
    _modifyText(t2, n2) {
      let r2 = _Qa.wordBoundary.get(), i2 = _Qa.wordBoundaryToMaintain.get();
      if (!r2 || !i2) return t2;
      let a2 = t2.split(i2), o2 = a2.map((e2) => e2.split(r2)).flat();
      return o2.map((e2) => e2.substring(0, 1).toLocaleUpperCase() + e2.substring(1)).join(``);
    }
  }, _Qa.wordBoundary = new sk(`[_\\s-]`, `gm`), _Qa.wordBoundaryToMaintain = new sk(`(?<=\\.)`, `gm`), _Qa), fk = (_Ra = class extends ik {
    static isSupported() {
      let e2 = [
        this.caseBoundary,
        this.singleLetters,
        this.underscoreBoundary
      ].every((e3) => e3.isSupported());
      return e2;
    }
    constructor() {
      super({
        id: `editor.action.transformToKebabcase`,
        label: U(`editor.transformToKebabcase`, `Transform to Kebab Case`),
        alias: `Transform to Kebab Case`,
        precondition: T.writable
      });
    }
    _modifyText(t2, n2) {
      let r2 = _Ra.caseBoundary.get(), i2 = _Ra.singleLetters.get(), a2 = _Ra.underscoreBoundary.get();
      return !r2 || !i2 || !a2 ? t2 : t2.replace(a2, `$1-$3`).replace(r2, `$1-$2`).replace(i2, `$1-$2`).toLocaleLowerCase();
    }
  }, _Ra.caseBoundary = new sk(`(\\p{Ll})(\\p{Lu})`, `gmu`), _Ra.singleLetters = new sk(`(\\p{Lu}|\\p{N})(\\p{Lu}\\p{Ll})`, `gmu`), _Ra.underscoreBoundary = new sk(`(\\S)(_)(\\S)`, `gm`), _Ra);
  J(LO), J(RO), J(zO), J(VO), J(HO), J(WO), J(GO), J(KO), J(qO), J(JO), J(YO), J(XO), J(ZO), J(QO), J(ek), J(tk), J(nk), J(rk), J(ak), J(ok), lk.caseBoundary.isSupported() && lk.singleLetters.isSupported() && J(lk), uk.wordBoundary.isSupported() && J(uk), dk.wordBoundary.isSupported() && J(dk), ck.titleBoundary.isSupported() && J(ck), fk.isSupported() && J(fk);
  var pk = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, mk = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, hk;
  const gk = new F(`LinkedEditingInputVisible`, false), _k = `linked-editing-decoration`;
  let vk = (_Sa = class extends S {
    static get(e2) {
      return e2.getContribution(hk.ID);
    }
    constructor(e2, t2, n2, r2, i2) {
      super(), this.languageConfigurationService = r2, this._syncRangesToken = 0, this._localToDispose = this._register(new C()), this._editor = e2, this._providers = n2.linkedEditingRangeProvider, this._enabled = false, this._visibleContextKey = gk.bindTo(t2), this._debounceInformation = i2.for(this._providers, `Linked Editing`, {
        max: 200
      }), this._currentDecorations = this._editor.createDecorationsCollection(), this._languageWordPattern = null, this._currentWordPattern = null, this._ignoreChangeEvent = false, this._localToDispose = this._register(new C()), this._rangeUpdateTriggerPromise = null, this._rangeSyncTriggerPromise = null, this._currentRequestCts = null, this._currentRequestPosition = null, this._currentRequestModelVersion = null, this._register(this._editor.onDidChangeModel(() => this.reinitialize(true))), this._register(this._editor.onDidChangeConfiguration((e3) => {
        (e3.hasChanged(70) || e3.hasChanged(94)) && this.reinitialize(false);
      })), this._register(this._providers.onDidChange(() => this.reinitialize(false))), this._register(this._editor.onDidChangeModelLanguage(() => this.reinitialize(true))), this.reinitialize(true);
    }
    reinitialize(e2) {
      let t2 = this._editor.getModel(), n2 = t2 !== null && (this._editor.getOption(70) || this._editor.getOption(94)) && this._providers.has(t2);
      if (n2 === this._enabled && !e2 || (this._enabled = n2, this.clearRanges(), this._localToDispose.clear(), !n2 || t2 === null)) return;
      this._localToDispose.add(ze.runAndSubscribe(t2.onDidChangeLanguageConfiguration, () => {
        this._languageWordPattern = this.languageConfigurationService.getLanguageConfiguration(t2.getLanguageId()).getWordDefinition();
      }));
      let r2 = new ve(this._debounceInformation.get(t2)), i2 = () => {
        this._rangeUpdateTriggerPromise = r2.trigger(() => this.updateRanges(), this._debounceDuration ?? this._debounceInformation.get(t2));
      }, a2 = new ve(0), o2 = (e3) => {
        this._rangeSyncTriggerPromise = a2.trigger(() => this._syncRanges(e3));
      };
      this._localToDispose.add(this._editor.onDidChangeCursorPosition(() => {
        i2();
      })), this._localToDispose.add(this._editor.onDidChangeModelContent((e3) => {
        if (!this._ignoreChangeEvent && this._currentDecorations.length > 0) {
          let t3 = this._currentDecorations.getRange(0);
          if (t3 && e3.changes.every((e4) => t3.intersectRanges(e4.range))) {
            o2(this._syncRangesToken);
            return;
          }
        }
        i2();
      })), this._localToDispose.add({
        dispose: () => {
          r2.dispose(), a2.dispose();
        }
      }), this.updateRanges();
    }
    _syncRanges(e2) {
      if (!this._editor.hasModel() || e2 !== this._syncRangesToken || this._currentDecorations.length === 0) return;
      let t2 = this._editor.getModel(), n2 = this._currentDecorations.getRange(0);
      if (!n2 || n2.startLineNumber !== n2.endLineNumber) return this.clearRanges();
      let r2 = t2.getValueInRange(n2);
      if (this._currentWordPattern) {
        let e3 = r2.match(this._currentWordPattern), t3 = e3 ? e3[0].length : 0;
        if (t3 !== r2.length) return this.clearRanges();
      }
      let i2 = [];
      for (let e3 = 1, n3 = this._currentDecorations.length; e3 < n3; e3++) {
        let n4 = this._currentDecorations.getRange(e3);
        if (n4) if (n4.startLineNumber !== n4.endLineNumber) i2.push({
          range: n4,
          text: r2
        });
        else {
          let e4 = t2.getValueInRange(n4), a2 = r2, o2 = n4.startColumn, s2 = n4.endColumn, c2 = Ki(e4, a2);
          o2 += c2, e4 = e4.substr(c2), a2 = a2.substr(c2);
          let l2 = qi(e4, a2);
          s2 -= l2, e4 = e4.substr(0, e4.length - l2), a2 = a2.substr(0, a2.length - l2), (o2 !== s2 || a2.length !== 0) && i2.push({
            range: new P(n4.startLineNumber, o2, n4.endLineNumber, s2),
            text: a2
          });
        }
      }
      if (i2.length !== 0) try {
        this._editor.popUndoStop(), this._ignoreChangeEvent = true;
        let e3 = this._editor._getViewModel().getPrevEditOperationType();
        this._editor.executeEdits(`linkedEditing`, i2), this._editor._getViewModel().setPrevEditOperationType(e3);
      } finally {
        this._ignoreChangeEvent = false;
      }
    }
    dispose() {
      this.clearRanges(), super.dispose();
    }
    clearRanges() {
      this._visibleContextKey.set(false), this._currentDecorations.clear(), this._currentRequestCts && (this._currentRequestCts.cancel(), this._currentRequestCts = null, this._currentRequestPosition = null);
    }
    async updateRanges(e2 = false) {
      if (!this._editor.hasModel()) {
        this.clearRanges();
        return;
      }
      let t2 = this._editor.getPosition();
      if (!this._enabled && !e2 || this._editor.getSelections().length > 1) {
        this.clearRanges();
        return;
      }
      let n2 = this._editor.getModel(), r2 = n2.getVersionId();
      if (this._currentRequestPosition && this._currentRequestModelVersion === r2) {
        if (t2.equals(this._currentRequestPosition)) return;
        if (this._currentDecorations.length > 0) {
          let e3 = this._currentDecorations.getRange(0);
          if (e3 && e3.containsPosition(t2)) return;
        }
      }
      this.clearRanges(), this._currentRequestPosition = t2, this._currentRequestModelVersion = r2;
      let i2 = this._currentRequestCts = new g();
      try {
        let e3 = new Fr(false), a2 = await xk(this._providers, n2, t2, i2.token);
        if (this._debounceInformation.update(n2, e3.elapsed()), i2 !== this._currentRequestCts || (this._currentRequestCts = null, r2 !== n2.getVersionId())) return;
        let o2 = [];
        (a2 == null ? void 0 : a2.ranges) && (o2 = a2.ranges), this._currentWordPattern = (a2 == null ? void 0 : a2.wordPattern) || this._languageWordPattern;
        let s2 = false;
        for (let e4 = 0, n3 = o2.length; e4 < n3; e4++) if (P.containsPosition(o2[e4], t2)) {
          if (s2 = true, e4 !== 0) {
            let t3 = o2[e4];
            o2.splice(e4, 1), o2.unshift(t3);
          }
          break;
        }
        if (!s2) {
          this.clearRanges();
          return;
        }
        let c2 = o2.map((e4) => ({
          range: e4,
          options: hk.DECORATION
        }));
        this._visibleContextKey.set(true), this._currentDecorations.set(c2), this._syncRangesToken++;
      } catch (e3) {
        Ss(e3) || G(e3), (this._currentRequestCts === i2 || !this._currentRequestCts) && this.clearRanges();
      }
    }
  }, hk = _Sa, _Sa.ID = `editor.contrib.linkedEditing`, _Sa.DECORATION = M.register({
    description: `linked-editing`,
    stickiness: 0,
    className: _k
  }), _Sa);
  vk = hk = pk([
    mk(1, O),
    mk(2, A),
    mk(3, Tt),
    mk(4, Et)
  ], vk);
  var yk = class extends w {
    constructor() {
      super({
        id: `editor.action.linkedEditing`,
        label: U(`linkedEditing.label`, `Start Linked Editing`),
        alias: `Start Linked Editing`,
        precondition: b.and(T.writable, T.hasRenameProvider),
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3132,
          weight: 100
        }
      });
    }
    runCommand(e2, t2) {
      let n2 = e2.get(pt), [r2, i2] = Array.isArray(t2) && t2 || [
        void 0,
        void 0
      ];
      return R.isUri(r2) && N.isIPosition(i2) ? n2.openCodeEditor({
        resource: r2
      }, n2.getActiveCodeEditor()).then((e3) => {
        e3 && (e3.setPosition(i2), e3.invokeWithinContext((t3) => (this.reportTelemetry(t3, e3), this.run(t3, e3))));
      }, G) : super.runCommand(e2, t2);
    }
    run(e2, t2) {
      let n2 = vk.get(t2);
      return n2 ? Promise.resolve(n2.updateRanges(true)) : Promise.resolve();
    }
  };
  const bk = Ae.bindToContribution(vk.get);
  Y(new bk({
    id: `cancelLinkedEditingInput`,
    precondition: gk,
    handler: (e2) => e2.clearRanges(),
    kbOpts: {
      kbExpr: T.editorTextFocus,
      weight: 199,
      primary: 9,
      secondary: [
        1033
      ]
    }
  }));
  function xk(e2, t2, n2, r2) {
    let i2 = e2.ordered(t2);
    return wo(i2.map((e3) => async () => {
      try {
        return await e3.provideLinkedEditingRanges(t2, n2, r2);
      } catch (e4) {
        Uc(e4);
        return;
      }
    }), (e3) => !!e3 && $s(e3 == null ? void 0 : e3.ranges));
  }
  const Sk = q(`editor.linkedEditingBackground`, {
    dark: v.fromHex(`#f00`).transparent(0.3),
    light: v.fromHex(`#f00`).transparent(0.3),
    hcDark: v.fromHex(`#f00`).transparent(0.3),
    hcLight: v.white
  }, U(`editorLinkedEditingBackground`, `Background color when the editor auto renames on type.`));
  ul(`_executeLinkedEditingProvider`, (e2, t2, n2) => {
    let { linkedEditingRangeProvider: r2 } = e2.get(A);
    return xk(r2, t2, n2, m.None);
  }), X(vk.ID, vk, 1), J(yk);
  var Ck = class {
    constructor(e2, t2) {
      this._link = e2, this._provider = t2;
    }
    toJSON() {
      return {
        range: this.range,
        url: this.url,
        tooltip: this.tooltip
      };
    }
    get range() {
      return this._link.range;
    }
    get url() {
      return this._link.url;
    }
    get tooltip() {
      return this._link.tooltip;
    }
    async resolve(e2) {
      return this._link.url ? this._link.url : typeof this._provider.resolveLink == `function` ? Promise.resolve(this._provider.resolveLink(this._link, e2)).then((t2) => (this._link = t2 || this._link, this._link.url ? this.resolve(e2) : Promise.reject(Error(`missing`)))) : Promise.reject(Error(`missing`));
    }
  }, wk = class e2 {
    constructor(t2) {
      this._disposables = new C();
      let n2 = [];
      for (let [r2, i2] of t2) {
        let t3 = r2.links.map((e3) => new Ck(e3, i2));
        n2 = e2._union(n2, t3), Ds(r2) && this._disposables.add(r2);
      }
      this.links = n2;
    }
    dispose() {
      this._disposables.dispose(), this.links.length = 0;
    }
    static _union(e3, t2) {
      let n2 = [], r2, i2, a2, o2;
      for (r2 = 0, a2 = 0, i2 = e3.length, o2 = t2.length; r2 < i2 && a2 < o2; ) {
        let i3 = e3[r2], o3 = t2[a2];
        if (P.areIntersectingOrTouching(i3.range, o3.range)) {
          r2++;
          continue;
        }
        let s2 = P.compareRangesUsingStarts(i3.range, o3.range);
        s2 < 0 ? (n2.push(i3), r2++) : (n2.push(o3), a2++);
      }
      for (; r2 < i2; r2++) n2.push(e3[r2]);
      for (; a2 < o2; a2++) n2.push(t2[a2]);
      return n2;
    }
  };
  function Tk(e2, t2, n2) {
    let r2 = [], i2 = e2.ordered(t2).reverse().map((e3, i3) => Promise.resolve(e3.provideLinks(t2, n2)).then((t3) => {
      t3 && (r2[i3] = [
        t3,
        e3
      ]);
    }, Uc));
    return Promise.all(i2).then(() => {
      let e3 = new wk(Wi(r2));
      return n2.isCancellationRequested ? (e3.dispose(), new wk([])) : e3;
    });
  }
  y.registerCommand(`_executeLinkProvider`, async (e2, ...t2) => {
    let [n2, r2] = t2;
    V(n2 instanceof R), typeof r2 != `number` && (r2 = 0);
    let { linkProvider: i2 } = e2.get(A), a2 = e2.get(Pt).getModel(n2);
    if (!a2) return [];
    let o2 = await Tk(i2, a2, m.None);
    if (!o2) return [];
    for (let e3 = 0; e3 < Math.min(r2, o2.links.length); e3++) await o2.links[e3].resolve(m.None);
    let s2 = o2.links.slice(0);
    return o2.dispose(), s2;
  });
  var Ek = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Dk = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Ok;
  let kk = (_Ta = class extends S {
    static get(e2) {
      return e2.getContribution(Ok.ID);
    }
    constructor(e2, t2, n2, r2, i2) {
      super(), this.editor = e2, this.openerService = t2, this.notificationService = n2, this.languageFeaturesService = r2, this.providers = this.languageFeaturesService.linkProvider, this.debounceInformation = i2.for(this.providers, `Links`, {
        min: 1e3,
        max: 4e3
      }), this.computeLinks = this._register(new hr(() => this.computeLinksNow(), 1e3)), this.computePromise = null, this.activeLinksList = null, this.currentOccurrences = {}, this.activeLinkDecorationId = null;
      let a2 = this._register(new t_(e2));
      this._register(a2.onMouseMoveOrRelevantKeyDown(([e3, t3]) => {
        this._onEditorMouseMove(e3, t3);
      })), this._register(a2.onExecute((e3) => {
        this.onEditorMouseUp(e3);
      })), this._register(a2.onCancel((e3) => {
        this.cleanUpActiveLinkDecoration();
      })), this._register(e2.onDidChangeConfiguration((e3) => {
        e3.hasChanged(71) && (this.updateDecorations([]), this.stop(), this.computeLinks.schedule(0));
      })), this._register(e2.onDidChangeModelContent((e3) => {
        this.editor.hasModel() && this.computeLinks.schedule(this.debounceInformation.get(this.editor.getModel()));
      })), this._register(e2.onDidChangeModel((e3) => {
        this.currentOccurrences = {}, this.activeLinkDecorationId = null, this.stop(), this.computeLinks.schedule(0);
      })), this._register(e2.onDidChangeModelLanguage((e3) => {
        this.stop(), this.computeLinks.schedule(0);
      })), this._register(this.providers.onDidChange((e3) => {
        this.stop(), this.computeLinks.schedule(0);
      })), this.computeLinks.schedule(0);
    }
    async computeLinksNow() {
      if (!this.editor.hasModel() || !this.editor.getOption(71)) return;
      let e2 = this.editor.getModel();
      if (!e2.isTooLargeForSyncing() && this.providers.has(e2)) {
        this.activeLinksList && (this.activeLinksList.dispose(), this.activeLinksList = null), this.computePromise = sa((t2) => Tk(this.providers, e2, t2));
        try {
          let t2 = new Fr(false);
          if (this.activeLinksList = await this.computePromise, this.debounceInformation.update(e2, t2.elapsed()), e2.isDisposed()) return;
          this.updateDecorations(this.activeLinksList.links);
        } catch (e3) {
          G(e3);
        } finally {
          this.computePromise = null;
        }
      }
    }
    updateDecorations(e2) {
      let t2 = this.editor.getOption(78) === `altKey`, n2 = [], r2 = Object.keys(this.currentOccurrences);
      for (let e3 of r2) {
        let t3 = this.currentOccurrences[e3];
        n2.push(t3.decorationId);
      }
      let i2 = [];
      if (e2) for (let n3 of e2) i2.push(jk.decoration(n3, t2));
      this.editor.changeDecorations((t3) => {
        let r3 = t3.deltaDecorations(n2, i2);
        this.currentOccurrences = {}, this.activeLinkDecorationId = null;
        for (let t4 = 0, n3 = r3.length; t4 < n3; t4++) {
          let n4 = new jk(e2[t4], r3[t4]);
          this.currentOccurrences[n4.decorationId] = n4;
        }
      });
    }
    _onEditorMouseMove(e2, t2) {
      let n2 = this.editor.getOption(78) === `altKey`;
      if (this.isEnabled(e2, t2)) {
        this.cleanUpActiveLinkDecoration();
        let t3 = this.getLinkOccurrence(e2.target.position);
        t3 && this.editor.changeDecorations((e3) => {
          t3.activate(e3, n2), this.activeLinkDecorationId = t3.decorationId;
        });
      } else this.cleanUpActiveLinkDecoration();
    }
    cleanUpActiveLinkDecoration() {
      let e2 = this.editor.getOption(78) === `altKey`;
      if (this.activeLinkDecorationId) {
        let t2 = this.currentOccurrences[this.activeLinkDecorationId];
        t2 && this.editor.changeDecorations((n2) => {
          t2.deactivate(n2, e2);
        }), this.activeLinkDecorationId = null;
      }
    }
    onEditorMouseUp(e2) {
      if (!this.isEnabled(e2)) return;
      let t2 = this.getLinkOccurrence(e2.target.position);
      t2 && this.openLinkOccurrence(t2, e2.hasSideBySideModifier, true);
    }
    openLinkOccurrence(e2, t2, n2 = false) {
      if (!this.openerService) return;
      let { link: r2 } = e2;
      r2.resolve(m.None).then((e3) => {
        if (typeof e3 == `string` && this.editor.hasModel()) {
          let t3 = this.editor.getModel().uri;
          if (t3.scheme === _r.file && e3.startsWith(`${_r.file}:`)) {
            let n3 = R.parse(e3);
            if (n3.scheme === _r.file) {
              let r3 = qc(n3), i2 = null;
              r3.startsWith(`/./`) || r3.startsWith(`\\.\\`) ? i2 = `.${r3.substr(1)}` : (r3.startsWith(`//./`) || r3.startsWith(`\\\\.\\`)) && (i2 = `.${r3.substr(2)}`), i2 && (e3 = dc(t3, i2));
            }
          }
        }
        return this.openerService.open(e3, {
          openToSide: t2,
          fromUserGesture: n2,
          allowContributedOpeners: true,
          allowCommands: true,
          fromWorkspace: true
        });
      }, (e3) => {
        let t3 = e3 instanceof Error ? e3.message : e3;
        t3 === `invalid` ? this.notificationService.warn(U(`invalid.url`, `Failed to open this link because it is not well-formed: {0}`, r2.url.toString())) : t3 === `missing` ? this.notificationService.warn(U(`missing.url`, `Failed to open this link because its target is missing.`)) : G(e3);
      });
    }
    getLinkOccurrence(e2) {
      if (!this.editor.hasModel() || !e2) return null;
      let t2 = this.editor.getModel().getDecorationsInRange({
        startLineNumber: e2.lineNumber,
        startColumn: e2.column,
        endLineNumber: e2.lineNumber,
        endColumn: e2.column
      }, 0, true);
      for (let e3 of t2) {
        let t3 = this.currentOccurrences[e3.id];
        if (t3) return t3;
      }
      return null;
    }
    isEnabled(e2, t2) {
      return !!(e2.target.type === 6 && (e2.hasTriggerModifier || t2 && t2.keyCodeIsTriggerKey));
    }
    stop() {
      var _a3;
      this.computeLinks.cancel(), this.activeLinksList && ((_a3 = this.activeLinksList) == null ? void 0 : _a3.dispose(), this.activeLinksList = null), this.computePromise && (this.computePromise.cancel(), this.computePromise = null);
    }
    dispose() {
      super.dispose(), this.stop();
    }
  }, Ok = _Ta, _Ta.ID = `editor.linkDetector`, _Ta);
  kk = Ok = Ek([
    Dk(1, It),
    Dk(2, Ft),
    Dk(3, A),
    Dk(4, Et)
  ], kk);
  const Ak = {
    general: M.register({
      description: `detected-link`,
      stickiness: 1,
      collapseOnReplaceEdit: true,
      inlineClassName: `detected-link`
    }),
    active: M.register({
      description: `detected-link-active`,
      stickiness: 1,
      collapseOnReplaceEdit: true,
      inlineClassName: `detected-link-active`
    })
  };
  var jk = class e2 {
    static decoration(t2, n2) {
      return {
        range: t2.range,
        options: e2._getOptions(t2, n2, false)
      };
    }
    static _getOptions(e3, t2, n2) {
      let r2 = {
        ...n2 ? Ak.active : Ak.general
      };
      return r2.hoverMessage = Mk(e3, t2), r2;
    }
    constructor(e3, t2) {
      this.link = e3, this.decorationId = t2;
    }
    activate(t2, n2) {
      t2.changeDecorationOptions(this.decorationId, e2._getOptions(this.link, n2, true));
    }
    deactivate(t2, n2) {
      t2.changeDecorationOptions(this.decorationId, e2._getOptions(this.link, n2, false));
    }
  };
  function Mk(e2, t2) {
    let n2 = e2.url && /^command:/i.test(e2.url.toString()), r2 = e2.tooltip ? e2.tooltip : n2 ? U(`links.navigate.executeCmd`, `Execute command`) : U(`links.navigate.follow`, `Follow link`), i2 = t2 ? qs ? U(`links.navigate.kb.meta.mac`, `cmd + click`) : U(`links.navigate.kb.meta`, `ctrl + click`) : qs ? U(`links.navigate.kb.alt.mac`, `option + click`) : U(`links.navigate.kb.alt`, `alt + click`);
    if (e2.url) {
      let t3 = ``;
      if (/^command:/i.test(e2.url.toString())) {
        let n4 = e2.url.toString().match(/^command:([^?#]+)/);
        if (n4) {
          let e3 = n4[1];
          t3 = U(`tooltip.explanation`, `Execute command {0}`, e3);
        }
      }
      let n3 = new Dn(``, true).appendLink(e2.url.toString(true).replace(/ /g, `%20`), r2, t3).appendMarkdown(` (${i2})`);
      return n3;
    } else return new Dn().appendText(`${r2} (${i2})`);
  }
  var Nk = class extends w {
    constructor() {
      super({
        id: `editor.action.openLink`,
        label: U(`label`, `Open Link`),
        alias: `Open Link`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      let n2 = kk.get(t2);
      if (!n2 || !t2.hasModel()) return;
      let r2 = t2.getSelections();
      for (let e3 of r2) {
        let t3 = n2.getLinkOccurrence(e3.getEndPosition());
        t3 && n2.openLinkOccurrence(t3, false);
      }
    }
  };
  X(kk.ID, kk, 1), J(Nk);
  var Pk = (_Ua = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._register(this._editor.onMouseDown((e3) => {
        let t2 = this._editor.getOption(118);
        t2 >= 0 && e3.target.type === 6 && e3.target.position.column >= t2 && this._editor.updateOptions({
          stopRenderingLineAfter: -1
        });
      }));
    }
  }, _Ua.ID = `editor.contrib.longLinesHelper`, _Ua);
  X(Pk.ID, Pk, 2);
  const Fk = q(`editor.wordHighlightBackground`, {
    dark: `#575757B8`,
    light: `#57575740`,
    hcDark: null,
    hcLight: null
  }, U(`wordHighlight`, `Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.`), true);
  q(`editor.wordHighlightStrongBackground`, {
    dark: `#004972B8`,
    light: `#0e639c40`,
    hcDark: null,
    hcLight: null
  }, U(`wordHighlightStrong`, `Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.`), true), q(`editor.wordHighlightTextBackground`, Fk, U(`wordHighlightText`, `Background color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.`), true);
  const Ik = q(`editor.wordHighlightBorder`, {
    light: null,
    dark: null,
    hcDark: bi,
    hcLight: bi
  }, U(`wordHighlightBorder`, `Border color of a symbol during read-access, like reading a variable.`));
  q(`editor.wordHighlightStrongBorder`, {
    light: null,
    dark: null,
    hcDark: bi,
    hcLight: bi
  }, U(`wordHighlightStrongBorder`, `Border color of a symbol during write-access, like writing to a variable.`)), q(`editor.wordHighlightTextBorder`, Ik, U(`wordHighlightTextBorder`, `Border color of a textual occurrence for a symbol.`));
  const Lk = q(`editorOverviewRuler.wordHighlightForeground`, `#A0A0A0CC`, U(`overviewRulerWordHighlightForeground`, `Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.`), true), Rk = q(`editorOverviewRuler.wordHighlightStrongForeground`, `#C0A0C0CC`, U(`overviewRulerWordHighlightStrongForeground`, `Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.`), true), zk = q(`editorOverviewRuler.wordHighlightTextForeground`, Xc, U(`overviewRulerWordHighlightTextForeground`, `Overview ruler marker color of a textual occurrence for a symbol. The color must not be opaque so as not to hide underlying decorations.`), true), Bk = M.register({
    description: `word-highlight-strong`,
    stickiness: 1,
    className: `wordHighlightStrong`,
    overviewRuler: {
      color: zl(Rk),
      position: qn.Center
    },
    minimap: {
      color: zl(Ac),
      position: 1
    }
  }), Vk = M.register({
    description: `word-highlight-text`,
    stickiness: 1,
    className: `wordHighlightText`,
    overviewRuler: {
      color: zl(zk),
      position: qn.Center
    },
    minimap: {
      color: zl(Ac),
      position: 1
    }
  }), Hk = M.register({
    description: `selection-highlight-overview`,
    stickiness: 1,
    className: `selectionHighlight`,
    overviewRuler: {
      color: zl(Xc),
      position: qn.Center
    },
    minimap: {
      color: zl(Ac),
      position: 1
    }
  }), Uk = M.register({
    description: `selection-highlight`,
    stickiness: 1,
    className: `selectionHighlight`
  }), Wk = M.register({
    description: `word-highlight`,
    stickiness: 1,
    className: `wordHighlight`,
    overviewRuler: {
      color: zl(Lk),
      position: qn.Center
    },
    minimap: {
      color: zl(Ac),
      position: 1
    }
  });
  function Gk(e2) {
    return e2 === Se.Write ? Bk : e2 === Se.Text ? Vk : Wk;
  }
  function Kk(e2) {
    return e2 ? Uk : Hk;
  }
  pl((e2, t2) => {
    let n2 = e2.getColor(lo);
    n2 && t2.addRule(`.monaco-editor .selectionHighlight { background-color: ${n2.transparent(0.5)}; }`);
  });
  var qk = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Jk = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Yk;
  function Xk(e2, t2) {
    let n2 = t2.filter((t3) => !e2.find((e3) => e3.equals(t3)));
    if (n2.length >= 1) {
      let e3 = n2.map((e4) => `line ${e4.viewState.position.lineNumber} column ${e4.viewState.position.column}`).join(`, `), t3 = n2.length === 1 ? U(`cursorAdded`, `Cursor added: {0}`, e3) : U(`cursorsAdded`, `Cursors added: {0}`, e3);
      Nl(t3);
    }
  }
  var Zk = class extends w {
    constructor() {
      super({
        id: `editor.action.insertCursorAbove`,
        label: U(`mutlicursor.insertAbove`, `Add Cursor Above`),
        alias: `Add Cursor Above`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2576,
          linux: {
            primary: 1552,
            secondary: [
              3088
            ]
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miInsertCursorAbove`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Add Cursor Above`),
          order: 2
        }
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = true;
      n2 && n2.logicalLine === false && (r2 = false);
      let i2 = t2._getViewModel();
      if (i2.cursorConfig.readOnly) return;
      i2.model.pushStackElement();
      let a2 = i2.getCursorStates();
      i2.setCursorStates(n2.source, 3, fe.addCursorUp(i2, a2, r2)), i2.revealTopMostCursor(n2.source), Xk(a2, i2.getCursorStates());
    }
  }, Qk = class extends w {
    constructor() {
      super({
        id: `editor.action.insertCursorBelow`,
        label: U(`mutlicursor.insertBelow`, `Add Cursor Below`),
        alias: `Add Cursor Below`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2578,
          linux: {
            primary: 1554,
            secondary: [
              3090
            ]
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miInsertCursorBelow`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `A&&dd Cursor Below`),
          order: 3
        }
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = true;
      n2 && n2.logicalLine === false && (r2 = false);
      let i2 = t2._getViewModel();
      if (i2.cursorConfig.readOnly) return;
      i2.model.pushStackElement();
      let a2 = i2.getCursorStates();
      i2.setCursorStates(n2.source, 3, fe.addCursorDown(i2, a2, r2)), i2.revealBottomMostCursor(n2.source), Xk(a2, i2.getCursorStates());
    }
  }, $k = class extends w {
    constructor() {
      super({
        id: `editor.action.insertCursorAtEndOfEachLineSelected`,
        label: U(`mutlicursor.insertAtEndOfEachLineSelected`, `Add Cursors to Line Ends`),
        alias: `Add Cursors to Line Ends`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1575,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miInsertCursorAtEndOfEachLineSelected`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Add C&&ursors to Line Ends`),
          order: 4
        }
      });
    }
    getCursorsForSelection(e2, t2, n2) {
      if (!e2.isEmpty()) {
        for (let r2 = e2.startLineNumber; r2 < e2.endLineNumber; r2++) {
          let e3 = t2.getLineMaxColumn(r2);
          n2.push(new I(r2, e3, r2, e3));
        }
        e2.endColumn > 1 && n2.push(new I(e2.endLineNumber, e2.endColumn, e2.endLineNumber, e2.endColumn));
      }
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getModel(), r2 = t2.getSelections(), i2 = t2._getViewModel(), a2 = i2.getCursorStates(), o2 = [];
      r2.forEach((e3) => this.getCursorsForSelection(e3, n2, o2)), o2.length > 0 && t2.setSelections(o2), Xk(a2, i2.getCursorStates());
    }
  }, eA = class extends w {
    constructor() {
      super({
        id: `editor.action.addCursorsToBottom`,
        label: U(`mutlicursor.addCursorsToBottom`, `Add Cursors To Bottom`),
        alias: `Add Cursors To Bottom`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getSelections(), r2 = t2.getModel().getLineCount(), i2 = [];
      for (let e3 = n2[0].startLineNumber; e3 <= r2; e3++) i2.push(new I(e3, n2[0].startColumn, e3, n2[0].endColumn));
      let a2 = t2._getViewModel(), o2 = a2.getCursorStates();
      i2.length > 0 && t2.setSelections(i2), Xk(o2, a2.getCursorStates());
    }
  }, tA = class extends w {
    constructor() {
      super({
        id: `editor.action.addCursorsToTop`,
        label: U(`mutlicursor.addCursorsToTop`, `Add Cursors To Top`),
        alias: `Add Cursors To Top`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getSelections(), r2 = [];
      for (let e3 = n2[0].startLineNumber; e3 >= 1; e3--) r2.push(new I(e3, n2[0].startColumn, e3, n2[0].endColumn));
      let i2 = t2._getViewModel(), a2 = i2.getCursorStates();
      r2.length > 0 && t2.setSelections(r2), Xk(a2, i2.getCursorStates());
    }
  }, nA = class {
    constructor(e2, t2, n2) {
      this.selections = e2, this.revealRange = t2, this.revealScrollType = n2;
    }
  }, rA = class e2 {
    static create(t2, n2) {
      if (!t2.hasModel()) return null;
      let r2 = n2.getState();
      if (!t2.hasTextFocus() && r2.isRevealed && r2.searchString.length > 0) return new e2(t2, n2, false, r2.searchString, r2.wholeWord, r2.matchCase, null);
      let i2 = false, a2, o2, s2 = t2.getSelections();
      s2.length === 1 && s2[0].isEmpty() ? (i2 = true, a2 = true, o2 = true) : (a2 = r2.wholeWord, o2 = r2.matchCase);
      let c2 = t2.getSelection(), l2, u2 = null;
      if (c2.isEmpty()) {
        let e3 = t2.getConfiguredWordAtPosition(c2.getStartPosition());
        if (!e3) return null;
        l2 = e3.word, u2 = new I(c2.startLineNumber, e3.startColumn, c2.startLineNumber, e3.endColumn);
      } else l2 = t2.getModel().getValueInRange(c2).replace(/\r\n/g, `
`);
      return new e2(t2, n2, i2, l2, a2, o2, u2);
    }
    constructor(e3, t2, n2, r2, i2, a2, o2) {
      this._editor = e3, this.findController = t2, this.isDisconnectedFromFindController = n2, this.searchText = r2, this.wholeWord = i2, this.matchCase = a2, this.currentMatch = o2;
    }
    addSelectionToNextFindMatch() {
      if (!this._editor.hasModel()) return null;
      let e3 = this._getNextMatch();
      if (!e3) return null;
      let t2 = this._editor.getSelections();
      return new nA(t2.concat(e3), e3, 0);
    }
    moveSelectionToNextFindMatch() {
      if (!this._editor.hasModel()) return null;
      let e3 = this._getNextMatch();
      if (!e3) return null;
      let t2 = this._editor.getSelections();
      return new nA(t2.slice(0, t2.length - 1).concat(e3), e3, 0);
    }
    _getNextMatch() {
      if (!this._editor.hasModel()) return null;
      if (this.currentMatch) {
        let e4 = this.currentMatch;
        return this.currentMatch = null, e4;
      }
      this.findController.highlightFindOptions();
      let e3 = this._editor.getSelections(), t2 = e3[e3.length - 1], n2 = this._editor.getModel().findNextMatch(this.searchText, t2.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132) : null, false);
      return n2 ? new I(n2.range.startLineNumber, n2.range.startColumn, n2.range.endLineNumber, n2.range.endColumn) : null;
    }
    addSelectionToPreviousFindMatch() {
      if (!this._editor.hasModel()) return null;
      let e3 = this._getPreviousMatch();
      if (!e3) return null;
      let t2 = this._editor.getSelections();
      return new nA(t2.concat(e3), e3, 0);
    }
    moveSelectionToPreviousFindMatch() {
      if (!this._editor.hasModel()) return null;
      let e3 = this._getPreviousMatch();
      if (!e3) return null;
      let t2 = this._editor.getSelections();
      return new nA(t2.slice(0, t2.length - 1).concat(e3), e3, 0);
    }
    _getPreviousMatch() {
      if (!this._editor.hasModel()) return null;
      if (this.currentMatch) {
        let e4 = this.currentMatch;
        return this.currentMatch = null, e4;
      }
      this.findController.highlightFindOptions();
      let e3 = this._editor.getSelections(), t2 = e3[e3.length - 1], n2 = this._editor.getModel().findPreviousMatch(this.searchText, t2.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getOption(132) : null, false);
      return n2 ? new I(n2.range.startLineNumber, n2.range.startColumn, n2.range.endLineNumber, n2.range.endColumn) : null;
    }
    selectAll(e3) {
      if (!this._editor.hasModel()) return [];
      this.findController.highlightFindOptions();
      let t2 = this._editor.getModel();
      return e3 ? t2.findMatches(this.searchText, e3, false, this.matchCase, this.wholeWord ? this._editor.getOption(132) : null, false, 1073741824) : t2.findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getOption(132) : null, false, 1073741824);
    }
  }, iA = (_Va = class extends S {
    static get(t2) {
      return t2.getContribution(_Va.ID);
    }
    constructor(e2) {
      super(), this._sessionDispose = this._register(new C()), this._editor = e2, this._ignoreSelectionChange = false, this._session = null;
    }
    dispose() {
      this._endSession(), super.dispose();
    }
    _beginSessionIfNeeded(e2) {
      if (!this._session) {
        let t2 = rA.create(this._editor, e2);
        if (!t2) return;
        this._session = t2;
        let n2 = {
          searchString: this._session.searchText
        };
        this._session.isDisconnectedFromFindController && (n2.wholeWordOverride = 1, n2.matchCaseOverride = 1, n2.isRegexOverride = 2), e2.getState().change(n2, false), this._sessionDispose.add(this._editor.onDidChangeCursorSelection((e3) => {
          this._ignoreSelectionChange || this._endSession();
        })), this._sessionDispose.add(this._editor.onDidBlurEditorText(() => {
          this._endSession();
        })), this._sessionDispose.add(e2.getState().onFindReplaceStateChange((e3) => {
          (e3.matchCase || e3.wholeWord) && this._endSession();
        }));
      }
    }
    _endSession() {
      if (this._sessionDispose.clear(), this._session && this._session.isDisconnectedFromFindController) {
        let e2 = {
          wholeWordOverride: 0,
          matchCaseOverride: 0,
          isRegexOverride: 0
        };
        this._session.findController.getState().change(e2, false);
      }
      this._session = null;
    }
    _setSelections(e2) {
      this._ignoreSelectionChange = true, this._editor.setSelections(e2), this._ignoreSelectionChange = false;
    }
    _expandEmptyToWord(e2, t2) {
      if (!t2.isEmpty()) return t2;
      let n2 = this._editor.getConfiguredWordAtPosition(t2.getStartPosition());
      return n2 ? new I(t2.startLineNumber, n2.startColumn, t2.startLineNumber, n2.endColumn) : t2;
    }
    _applySessionResult(e2) {
      e2 && (this._setSelections(e2.selections), e2.revealRange && this._editor.revealRangeInCenterIfOutsideViewport(e2.revealRange, e2.revealScrollType));
    }
    getSession(e2) {
      return this._session;
    }
    addSelectionToNextFindMatch(e2) {
      if (this._editor.hasModel()) {
        if (!this._session) {
          let t2 = this._editor.getSelections();
          if (t2.length > 1) {
            let n2 = e2.getState(), r2 = n2.matchCase, i2 = mA(this._editor.getModel(), t2, r2);
            if (!i2) {
              let e3 = this._editor.getModel(), n3 = [];
              for (let r3 = 0, i3 = t2.length; r3 < i3; r3++) n3[r3] = this._expandEmptyToWord(e3, t2[r3]);
              this._editor.setSelections(n3);
              return;
            }
          }
        }
        this._beginSessionIfNeeded(e2), this._session && this._applySessionResult(this._session.addSelectionToNextFindMatch());
      }
    }
    addSelectionToPreviousFindMatch(e2) {
      this._beginSessionIfNeeded(e2), this._session && this._applySessionResult(this._session.addSelectionToPreviousFindMatch());
    }
    moveSelectionToNextFindMatch(e2) {
      this._beginSessionIfNeeded(e2), this._session && this._applySessionResult(this._session.moveSelectionToNextFindMatch());
    }
    moveSelectionToPreviousFindMatch(e2) {
      this._beginSessionIfNeeded(e2), this._session && this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());
    }
    selectAll(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = null, n2 = e2.getState();
      if (n2.isRevealed && n2.searchString.length > 0 && n2.isRegex) {
        let e3 = this._editor.getModel();
        t2 = n2.searchScope ? e3.findMatches(n2.searchString, n2.searchScope, n2.isRegex, n2.matchCase, n2.wholeWord ? this._editor.getOption(132) : null, false, 1073741824) : e3.findMatches(n2.searchString, true, n2.isRegex, n2.matchCase, n2.wholeWord ? this._editor.getOption(132) : null, false, 1073741824);
      } else {
        if (this._beginSessionIfNeeded(e2), !this._session) return;
        t2 = this._session.selectAll(n2.searchScope);
      }
      if (t2.length > 0) {
        let e3 = this._editor.getSelection();
        for (let n3 = 0, r2 = t2.length; n3 < r2; n3++) {
          let r3 = t2[n3], i2 = r3.range.intersectRanges(e3);
          if (i2) {
            t2[n3] = t2[0], t2[0] = r3;
            break;
          }
        }
        this._setSelections(t2.map((e4) => new I(e4.range.startLineNumber, e4.range.startColumn, e4.range.endLineNumber, e4.range.endColumn)));
      }
    }
  }, _Va.ID = `editor.contrib.multiCursorController`, _Va), aA = class extends w {
    run(e2, t2) {
      let n2 = iA.get(t2);
      if (!n2) return;
      let r2 = t2._getViewModel();
      if (r2) {
        let i2 = r2.getCursorStates(), a2 = Cx.get(t2);
        if (a2) this._run(n2, a2);
        else {
          let r3 = e2.get(k).createInstance(Cx, t2);
          this._run(n2, r3), r3.dispose();
        }
        Xk(i2, r2.getCursorStates());
      }
    }
  }, oA = class extends aA {
    constructor() {
      super({
        id: `editor.action.addSelectionToNextFindMatch`,
        label: U(`addSelectionToNextFindMatch`, `Add Selection To Next Find Match`),
        alias: `Add Selection To Next Find Match`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 2082,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miAddSelectionToNextFindMatch`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Add &&Next Occurrence`),
          order: 5
        }
      });
    }
    _run(e2, t2) {
      e2.addSelectionToNextFindMatch(t2);
    }
  }, sA = class extends aA {
    constructor() {
      super({
        id: `editor.action.addSelectionToPreviousFindMatch`,
        label: U(`addSelectionToPreviousFindMatch`, `Add Selection To Previous Find Match`),
        alias: `Add Selection To Previous Find Match`,
        precondition: void 0,
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miAddSelectionToPreviousFindMatch`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Add P&&revious Occurrence`),
          order: 6
        }
      });
    }
    _run(e2, t2) {
      e2.addSelectionToPreviousFindMatch(t2);
    }
  }, cA = class extends aA {
    constructor() {
      super({
        id: `editor.action.moveSelectionToNextFindMatch`,
        label: U(`moveSelectionToNextFindMatch`, `Move Last Selection To Next Find Match`),
        alias: `Move Last Selection To Next Find Match`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: un(2089, 2082),
          weight: 100
        }
      });
    }
    _run(e2, t2) {
      e2.moveSelectionToNextFindMatch(t2);
    }
  }, lA = class extends aA {
    constructor() {
      super({
        id: `editor.action.moveSelectionToPreviousFindMatch`,
        label: U(`moveSelectionToPreviousFindMatch`, `Move Last Selection To Previous Find Match`),
        alias: `Move Last Selection To Previous Find Match`,
        precondition: void 0
      });
    }
    _run(e2, t2) {
      e2.moveSelectionToPreviousFindMatch(t2);
    }
  }, uA = class extends aA {
    constructor() {
      super({
        id: `editor.action.selectHighlights`,
        label: U(`selectAllOccurrencesOfFindMatch`, `Select All Occurrences of Find Match`),
        alias: `Select All Occurrences of Find Match`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 3114,
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `3_multi`,
          title: U({
            key: `miSelectHighlights`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `Select All &&Occurrences`),
          order: 7
        }
      });
    }
    _run(e2, t2) {
      e2.selectAll(t2);
    }
  }, dA = class extends aA {
    constructor() {
      super({
        id: `editor.action.changeAll`,
        label: U(`changeAll.label`, `Change All Occurrences`),
        alias: `Change All Occurrences`,
        precondition: b.and(T.writable, T.editorTextFocus),
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 2108,
          weight: 100
        },
        contextMenuOpts: {
          group: `1_modification`,
          order: 1.2
        }
      });
    }
    _run(e2, t2) {
      e2.selectAll(t2);
    }
  }, fA = class {
    constructor(e2, t2, n2, r2, i2) {
      this._model = e2, this._searchText = t2, this._matchCase = n2, this._wordSeparators = r2, this._modelVersionId = this._model.getVersionId(), this._cachedFindMatches = null, i2 && this._model === i2._model && this._searchText === i2._searchText && this._matchCase === i2._matchCase && this._wordSeparators === i2._wordSeparators && this._modelVersionId === i2._modelVersionId && (this._cachedFindMatches = i2._cachedFindMatches);
    }
    findMatches() {
      return this._cachedFindMatches === null && (this._cachedFindMatches = this._model.findMatches(this._searchText, true, false, this._matchCase, this._wordSeparators, false).map((e2) => e2.range), this._cachedFindMatches.sort(P.compareRangesUsingStarts)), this._cachedFindMatches;
    }
  };
  let pA = (_Wa = class extends S {
    constructor(e2, t2) {
      super(), this._languageFeaturesService = t2, this.editor = e2, this._isEnabled = e2.getOption(109), this._decorations = e2.createDecorationsCollection(), this.updateSoon = this._register(new hr(() => this._update(), 300)), this.state = null, this._register(e2.onDidChangeConfiguration((t3) => {
        this._isEnabled = e2.getOption(109);
      })), this._register(e2.onDidChangeCursorSelection((e3) => {
        this._isEnabled && (e3.selection.isEmpty() ? e3.reason === 3 ? (this.state && this._setState(null), this.updateSoon.schedule()) : this._setState(null) : this._update());
      })), this._register(e2.onDidChangeModel((e3) => {
        this._setState(null);
      })), this._register(e2.onDidChangeModelContent((e3) => {
        this._isEnabled && this.updateSoon.schedule();
      }));
      let n2 = Cx.get(e2);
      n2 && this._register(n2.getState().onFindReplaceStateChange((e3) => {
        this._update();
      })), this.updateSoon.schedule();
    }
    _update() {
      this._setState(Yk._createState(this.state, this._isEnabled, this.editor));
    }
    static _createState(e2, t2, n2) {
      if (!t2 || !n2.hasModel()) return null;
      let r2 = n2.getSelection();
      if (r2.startLineNumber !== r2.endLineNumber) return null;
      let i2 = iA.get(n2);
      if (!i2) return null;
      let a2 = Cx.get(n2);
      if (!a2) return null;
      let o2 = i2.getSession(a2);
      if (!o2) {
        let e3 = n2.getSelections();
        if (e3.length > 1) {
          let t3 = a2.getState(), r3 = t3.matchCase, i3 = mA(n2.getModel(), e3, r3);
          if (!i3) return null;
        }
        o2 = rA.create(n2, a2);
      }
      if (!o2 || o2.currentMatch || /^[ \t]+$/.test(o2.searchText) || o2.searchText.length > 200) return null;
      let s2 = a2.getState(), c2 = s2.matchCase;
      if (s2.isRevealed) {
        let e3 = s2.searchString;
        c2 || (e3 = e3.toLowerCase());
        let t3 = o2.searchText;
        if (c2 || (t3 = t3.toLowerCase()), e3 === t3 && o2.matchCase === s2.matchCase && o2.wholeWord === s2.wholeWord && !s2.isRegex) return null;
      }
      return new fA(n2.getModel(), o2.searchText, o2.matchCase, o2.wholeWord ? n2.getOption(132) : null, e2);
    }
    _setState(e2) {
      if (this.state = e2, !this.state) {
        this._decorations.clear();
        return;
      }
      if (!this.editor.hasModel()) return;
      let t2 = this.editor.getModel();
      if (t2.isTooLargeForTokenization()) return;
      let n2 = this.state.findMatches(), r2 = this.editor.getSelections();
      r2.sort(P.compareRangesUsingStarts);
      let i2 = [];
      for (let e3 = 0, t3 = 0, a3 = n2.length, o3 = r2.length; e3 < a3; ) {
        let a4 = n2[e3];
        if (t3 >= o3) i2.push(a4), e3++;
        else {
          let n3 = P.compareRangesUsingStarts(a4, r2[t3]);
          n3 < 0 ? ((r2[t3].isEmpty() || !P.areIntersecting(a4, r2[t3])) && i2.push(a4), e3++) : (n3 > 0 || e3++, t3++);
        }
      }
      let a2 = this.editor.getOption(81) !== `off`, o2 = this._languageFeaturesService.documentHighlightProvider.has(t2) && a2, s2 = i2.map((e3) => ({
        range: e3,
        options: Kk(o2)
      }));
      this._decorations.set(s2);
    }
    dispose() {
      this._setState(null), super.dispose();
    }
  }, Yk = _Wa, _Wa.ID = `editor.contrib.selectionHighlighter`, _Wa);
  pA = Yk = qk([
    Jk(1, A)
  ], pA);
  function mA(e2, t2, n2) {
    let r2 = hA(e2, t2[0], !n2);
    for (let i2 = 1, a2 = t2.length; i2 < a2; i2++) {
      let a3 = t2[i2];
      if (a3.isEmpty()) return false;
      let o2 = hA(e2, a3, !n2);
      if (r2 !== o2) return false;
    }
    return true;
  }
  function hA(e2, t2, n2) {
    let r2 = e2.getValueInRange(t2);
    return n2 ? r2.toLowerCase() : r2;
  }
  var gA = class extends w {
    constructor() {
      super({
        id: `editor.action.focusNextCursor`,
        label: U(`mutlicursor.focusNextCursor`, `Focus Next Cursor`),
        metadata: {
          description: U(`mutlicursor.focusNextCursor.description`, `Focuses the next cursor`),
          args: []
        },
        alias: `Focus Next Cursor`,
        precondition: void 0
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = t2._getViewModel();
      if (r2.cursorConfig.readOnly) return;
      r2.model.pushStackElement();
      let i2 = Array.from(r2.getCursorStates()), a2 = i2.shift();
      a2 && (i2.push(a2), r2.setCursorStates(n2.source, 3, i2), r2.revealPrimaryCursor(n2.source, true), Xk(i2, r2.getCursorStates()));
    }
  }, _A = class extends w {
    constructor() {
      super({
        id: `editor.action.focusPreviousCursor`,
        label: U(`mutlicursor.focusPreviousCursor`, `Focus Previous Cursor`),
        metadata: {
          description: U(`mutlicursor.focusPreviousCursor.description`, `Focuses the previous cursor`),
          args: []
        },
        alias: `Focus Previous Cursor`,
        precondition: void 0
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = t2._getViewModel();
      if (r2.cursorConfig.readOnly) return;
      r2.model.pushStackElement();
      let i2 = Array.from(r2.getCursorStates()), a2 = i2.pop();
      a2 && (i2.unshift(a2), r2.setCursorStates(n2.source, 3, i2), r2.revealPrimaryCursor(n2.source, true), Xk(i2, r2.getCursorStates()));
    }
  };
  X(iA.ID, iA, 4), X(pA.ID, pA, 1), J(Zk), J(Qk), J($k), J(oA), J(sA), J(cA), J(lA), J(uA), J(dA), J(eA), J(tA), J(gA), J(_A);
  const vA = `editor.action.inlineEdit.accept`, yA = `editor.action.inlineEdit.reject`, bA = `editor.action.inlineEdit.jumpTo`, xA = `editor.action.inlineEdit.jumpBack`;
  var SA = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, CA = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const wA = `inline-edit`;
  let TA = class extends S {
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.model = t2, this.languageService = n2, this.isDisposed = Hc(this, false), this.currentTextModel = zc(this, this.editor.onDidChangeModel, () => this.editor.getModel()), this.uiState = H(this, (e3) => {
        var _a3;
        if (this.isDisposed.read(e3)) return;
        let t3 = this.currentTextModel.read(e3);
        if (t3 !== this.model.targetTextModel.read(e3)) return;
        let n3 = this.model.ghostText.read(e3);
        if (!n3) return;
        let r2 = (_a3 = this.model.range) == null ? void 0 : _a3.read(e3);
        r2 && r2.startLineNumber === r2.endLineNumber && r2.startColumn === r2.endColumn && (r2 = void 0);
        let i2 = (r2 ? r2.startLineNumber === r2.endLineNumber : true) && n3.parts.length === 1 && n3.parts[0].lines.length === 1, a2 = n3.parts.length === 1 && n3.parts[0].lines.every((e4) => e4.length === 0), o2 = [], s2 = [];
        function c2(e4, t4) {
          if (s2.length > 0) {
            let n4 = s2[s2.length - 1];
            t4 && n4.decorations.push(new xn(n4.content.length + 1, n4.content.length + 1 + e4[0].length, t4, 0)), n4.content += e4[0], e4 = e4.slice(1);
          }
          for (let n4 of e4) s2.push({
            content: n4,
            decorations: t4 ? [
              new xn(1, n4.length + 1, t4, 0)
            ] : []
          });
        }
        let l2 = t3.getLineContent(n3.lineNumber), u2, d2 = 0;
        if (!a2 && (i2 || !r2)) {
          for (let e4 of n3.parts) {
            let t4 = e4.lines;
            r2 && !i2 && (c2(t4, wA), t4 = []), u2 === void 0 ? (o2.push({
              column: e4.column,
              text: t4[0],
              preview: e4.preview
            }), t4 = t4.slice(1)) : c2([
              l2.substring(d2, e4.column - 1)
            ], void 0), t4.length > 0 && (c2(t4, wA), u2 === void 0 && e4.column <= l2.length && (u2 = e4.column)), d2 = e4.column - 1;
          }
          u2 !== void 0 && c2([
            l2.substring(d2)
          ], void 0);
        }
        let f2 = u2 === void 0 ? void 0 : new DC(u2, l2.length + 1), p2 = i2 || !r2 ? n3.lineNumber : r2.endLineNumber - 1;
        return {
          inlineTexts: o2,
          additionalLines: s2,
          hiddenRange: f2,
          lineNumber: p2,
          additionalReservedLineCount: this.model.minReservedLineCount.read(e3),
          targetTextModel: t3,
          range: r2,
          isSingleLine: i2,
          isPureRemove: a2
        };
      }), this.decorations = H(this, (e3) => {
        let t3 = this.uiState.read(e3);
        if (!t3) return [];
        let n3 = [];
        if (t3.hiddenRange && n3.push({
          range: t3.hiddenRange.toRange(t3.lineNumber),
          options: {
            inlineClassName: `inline-edit-hidden`,
            description: `inline-edit-hidden`
          }
        }), t3.range) {
          let e4 = [];
          if (t3.isSingleLine) e4.push(t3.range);
          else if (!t3.isPureRemove) {
            let n4 = t3.range.endLineNumber - t3.range.startLineNumber;
            for (let r2 = 0; r2 < n4; r2++) {
              let n5 = t3.range.startLineNumber + r2, i2 = t3.targetTextModel.getLineFirstNonWhitespaceColumn(n5), a2 = t3.targetTextModel.getLineLastNonWhitespaceColumn(n5), o2 = new P(n5, i2, n5, a2);
              e4.push(o2);
            }
          }
          for (let t4 of e4) n3.push({
            range: t4,
            options: Oa
          });
        }
        if (t3.range && !t3.isSingleLine && t3.isPureRemove) {
          let e4 = new P(t3.range.startLineNumber, 1, t3.range.endLineNumber - 1, 1);
          n3.push({
            range: e4,
            options: ja
          });
        }
        for (let e4 of t3.inlineTexts) n3.push({
          range: P.fromPositions(new N(t3.lineNumber, e4.column)),
          options: {
            description: wA,
            after: {
              content: e4.text,
              inlineClassName: e4.preview ? `inline-edit-decoration-preview` : `inline-edit-decoration`,
              cursorStops: Qt.Left
            },
            showIfCollapsed: true
          }
        });
        return n3;
      }), this._register(Hl(() => {
        this.isDisposed.set(true, void 0);
      })), this._register(OC(this.editor, this.decorations));
    }
  };
  TA = SA([
    CA(2, Dt)
  ], TA);
  var EA = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, DA = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, OA;
  let kA = class extends S {
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.model = t2, this.instantiationService = n2, this.alwaysShowToolbar = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63).showToolbar === `always`), this.sessionPosition = void 0, this.position = H(this, (e3) => {
        var _a3, _b3;
        let t3 = (_a3 = this.model.read(e3)) == null ? void 0 : _a3.model.ghostText.read(e3);
        if (!this.alwaysShowToolbar.read(e3) || !t3 || t3.parts.length === 0) return this.sessionPosition = void 0, null;
        let n3 = t3.parts[0].column;
        this.sessionPosition && this.sessionPosition.lineNumber !== t3.lineNumber && (this.sessionPosition = void 0);
        let r2 = new N(t3.lineNumber, Math.min(n3, ((_b3 = this.sessionPosition) == null ? void 0 : _b3.column) ?? 2 ** 53 - 1));
        return this.sessionPosition = r2, r2;
      }), this._register(Fi((t3, n3) => {
        let r2 = this.model.read(t3);
        if (!r2 || !this.alwaysShowToolbar.read(t3)) return;
        let i2 = n3.add(this.instantiationService.createInstance(AA, this.editor, true, this.position));
        e2.addContentWidget(i2), n3.add(Hl(() => e2.removeContentWidget(i2)));
      }));
    }
  };
  kA = EA([
    DA(2, k)
  ], kA);
  let AA = (_Xa = class extends S {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this.editor = e2, this.withBorder = t2, this._position = n2, this._contextKeyService = i2, this._menuService = a2, this.id = `InlineEditHintsContentWidget${OA.id++}`, this.allowEditorOverflow = true, this.suppressMouseDown = false, this.nodes = os(`div.inlineEditHints`, {
        className: this.withBorder ? `.withBorder` : ``
      }, [
        os(`div@toolBar`)
      ]), this.inlineCompletionsActionsMenus = this._register(this._menuService.createMenu(j.InlineEditActions, this._contextKeyService)), this.toolBar = this._register(r2.createInstance(MA, this.nodes.toolBar, this.editor, j.InlineEditToolbar, {
        menuOptions: {
          renderShortTitle: true
        },
        toolbarOptions: {
          primaryGroup: (e3) => e3.startsWith(`primary`)
        },
        actionViewItemProvider: (e3, t3) => {
          if (e3 instanceof Mn) return r2.createInstance(jA, e3, void 0);
        },
        telemetrySource: `InlineEditToolbar`
      })), this._register(this.toolBar.onDidChangeDropdownVisibility((e3) => {
        OA._dropDownVisible = e3;
      })), this._register(Ni((e3) => {
        this._position.read(e3), this.editor.layoutContentWidget(this);
      })), this._register(Ni((e3) => {
        let t3 = [];
        for (let [e4, n3] of this.inlineCompletionsActionsMenus.getActions()) for (let e5 of n3) e5 instanceof Mn && t3.push(e5);
        t3.length > 0 && t3.unshift(new Cr()), this.toolBar.setAdditionalSecondaryActions(t3);
      }));
    }
    getId() {
      return this.id;
    }
    getDomNode() {
      return this.nodes.root;
    }
    getPosition() {
      return {
        position: this._position.get(),
        preference: [
          1,
          2
        ],
        positionAffinity: 3
      };
    }
  }, OA = _Xa, _Xa._dropDownVisible = false, _Xa.id = 0, _Xa);
  AA = OA = EA([
    DA(3, k),
    DA(4, O),
    DA(5, Nt)
  ], AA);
  var jA = class extends jn {
    updateLabel() {
      let e2 = this._keybindingService.lookupKeybinding(this._action.id, this._contextKeyService);
      if (!e2) return super.updateLabel();
      if (this.label) {
        let t2 = os(`div.keybinding`).root, n2 = this._register(new hn(t2, Wn, {
          disableTitle: true,
          ...Xl
        }));
        n2.set(e2), this.label.textContent = this._action.label, this.label.appendChild(t2), this.label.classList.add(`inlineEditStatusBarItemLabel`);
      }
    }
    updateTooltip() {
    }
  };
  let MA = class extends _i {
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2, l2) {
      super(e2, {
        resetMenu: n2,
        ...r2
      }, i2, a2, o2, s2, c2, l2), this.editor = t2, this.menuId = n2, this.options2 = r2, this.menuService = i2, this.contextKeyService = a2, this.menu = this._store.add(this.menuService.createMenu(this.menuId, this.contextKeyService, {
        emitEventsForSubmenuChanges: true
      })), this.additionalActions = [], this.prependedPrimaryActions = [], this._store.add(this.menu.onDidChange(() => this.updateToolbar())), this._store.add(this.editor.onDidChangeCursorPosition(() => this.updateToolbar())), this.updateToolbar();
    }
    updateToolbar() {
      var _a3, _b3, _c3, _d3, _e3, _f3, _g3;
      let e2 = [], t2 = [];
      ia(this.menu, (_a3 = this.options2) == null ? void 0 : _a3.menuOptions, {
        primary: e2,
        secondary: t2
      }, (_c3 = (_b3 = this.options2) == null ? void 0 : _b3.toolbarOptions) == null ? void 0 : _c3.primaryGroup, (_e3 = (_d3 = this.options2) == null ? void 0 : _d3.toolbarOptions) == null ? void 0 : _e3.shouldInlineSubmenu, (_g3 = (_f3 = this.options2) == null ? void 0 : _f3.toolbarOptions) == null ? void 0 : _g3.useSeparatorsInPrimaryActions), t2.push(...this.additionalActions), e2.unshift(...this.prependedPrimaryActions), this.setActions(e2, t2);
    }
    setAdditionalSecondaryActions(e2) {
      go(this.additionalActions, e2, (e3, t2) => e3 === t2) || (this.additionalActions = e2, this.updateToolbar());
    }
  };
  MA = EA([
    DA(4, Nt),
    DA(5, O),
    DA(6, ht),
    DA(7, Ct),
    DA(8, mt),
    DA(9, Ht)
  ], MA);
  var NA = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, PA = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, FA, IA;
  function* LA(e2, t2, n2 = 1) {
    t2 === void 0 && ([t2, e2] = [
      e2,
      0
    ]);
    for (let r2 = e2; r2 < t2; r2 += n2) yield r2;
  }
  function RA(e2) {
    var _a3;
    let t2 = ((_a3 = e2[0].match(/^\s*/)) == null ? void 0 : _a3[0]) ?? ``, n2 = t2.length;
    return {
      text: e2.map((e3) => e3.replace(RegExp(`^` + t2), ``)),
      shift: n2
    };
  }
  let zA = (_Ya = class extends S {
    static _createUniqueUri() {
      return R.from({
        scheme: `inline-edit-widget`,
        path: (/* @__PURE__ */ new Date()).toString() + String(FA._modelId++)
      });
    }
    constructor(e2, t2, n2, r2, i2) {
      super(), this._editor = e2, this._model = t2, this._instantiationService = n2, this._diffProviderFactoryService = r2, this._modelService = i2, this._position = H(this, (e3) => {
        let t3 = this._model.read(e3);
        if (!t3 || t3.text.length === 0 || t3.range.startLineNumber === t3.range.endLineNumber && !(t3.range.startColumn === t3.range.endColumn && t3.range.startColumn === 1)) return null;
        let n3 = this._editor.getModel();
        if (!n3) return null;
        let r3 = Array.from(LA(t3.range.startLineNumber, t3.range.endLineNumber + 1)), i3 = r3.map((e4) => n3.getLineLastNonWhitespaceColumn(e4)), a2 = Math.max(...i3), o2 = r3[i3.indexOf(a2)], s2 = new N(o2, a2), c2 = {
          top: t3.range.startLineNumber,
          left: s2
        };
        return c2;
      }), this._text = H(this, (e3) => {
        let t3 = this._model.read(e3);
        if (!t3) return {
          text: ``,
          shift: 0
        };
        let n3 = RA(t3.text.split(`
`));
        return {
          text: n3.text.join(`
`),
          shift: n3.shift
        };
      }), this._originalModel = ba(() => this._modelService.createModel(``, null, FA._createUniqueUri())).keepObserved(this._store), this._modifiedModel = ba(() => this._modelService.createModel(``, null, FA._createUniqueUri())).keepObserved(this._store), this._diff = H(this, (e3) => {
        var _a3, _b3;
        return (_b3 = (_a3 = this._diffPromise.read(e3)) == null ? void 0 : _a3.promiseResult.read(e3)) == null ? void 0 : _b3.data;
      }), this._diffPromise = H(this, (e3) => {
        let t3 = this._model.read(e3);
        if (!t3) return;
        let n3 = this._editor.getModel();
        if (!n3) return;
        let r3 = RA(n3.getValueInRange(t3.range).split(`
`)).text.join(`
`), i3 = RA(t3.text.split(`
`)).text.join(`
`);
        this._originalModel.get().setValue(r3), this._modifiedModel.get().setValue(i3);
        let a2 = this._diffProviderFactoryService.createDiffProvider({
          diffAlgorithm: `advanced`
        });
        return Gn.fromFn(async () => {
          let e4 = await a2.computeDiff(this._originalModel.get(), this._modifiedModel.get(), {
            computeMoves: false,
            ignoreTrimWhitespace: false,
            maxComputationTimeMs: 1e3
          }, m.None);
          if (!e4.identical) return e4.changes;
        });
      }), this._register(Fi((t3, n3) => {
        let r3 = this._model.read(t3);
        if (!r3 || this._position.get() === null) return;
        let i3 = n3.add(this._instantiationService.createInstance(BA, this._editor, this._position, this._text.map((e3) => e3.text), this._text.map((e3) => e3.shift), this._diff));
        e2.addOverlayWidget(i3), n3.add(Hl(() => e2.removeOverlayWidget(i3)));
      }));
    }
  }, FA = _Ya, _Ya._modelId = 0, _Ya);
  zA = FA = NA([
    PA(2, k),
    PA(3, vt),
    PA(4, Pt)
  ], zA);
  let BA = (_Za = class extends S {
    constructor(e2, t2, n2, i2, a2, o2) {
      var _a3;
      super(), this._editor = e2, this._position = t2, this._text = n2, this._shift = i2, this._diff = a2, this._instantiationService = o2, this.id = `InlineEditSideBySideContentWidget${IA.id++}`, this.allowEditorOverflow = false, this._nodes = r(`div.inlineEditSideBySide`, void 0), this._scrollChanged = Vc(`editor.onDidScrollChange`, this._editor.onDidScrollChange), this._previewEditor = this._register(this._instantiationService.createInstance(c_, this._nodes, {
        glyphMargin: false,
        lineNumbers: `off`,
        minimap: {
          enabled: false
        },
        guides: {
          indentation: false,
          bracketPairs: false,
          bracketPairsHorizontal: false,
          highlightActiveIndentation: false
        },
        folding: false,
        selectOnLineNumbers: false,
        selectionHighlight: false,
        columnSelection: false,
        overviewRulerBorder: false,
        overviewRulerLanes: 0,
        lineDecorationsWidth: 0,
        lineNumbersMinChars: 0,
        scrollbar: {
          vertical: `hidden`,
          horizontal: `hidden`,
          alwaysConsumeMouseWheel: false,
          handleMouseWheel: false
        },
        readOnly: true,
        wordWrap: `off`,
        wordWrapOverride1: `off`,
        wordWrapOverride2: `off`,
        wrappingIndent: `none`,
        wrappingStrategy: void 0
      }, {
        contributions: [],
        isSimpleWidget: true
      }, this._editor)), this._previewEditorObs = Lc(this._previewEditor), this._editorObs = Lc(this._editor), this._previewTextModel = this._register(this._instantiationService.createInstance(Gr, ``, ((_a3 = this._editor.getModel()) == null ? void 0 : _a3.getLanguageId()) ?? Jn, Gr.DEFAULT_CREATION_OPTIONS, null)), this._setText = H((e3) => {
        let t3 = this._text.read(e3);
        t3 && this._previewTextModel.setValue(t3);
      }).recomputeInitiallyAndOnChange(this._store), this._decorations = H(this, (e3) => {
        this._setText.read(e3);
        let t3 = this._position.read(e3);
        if (!t3) return {
          org: [],
          mod: []
        };
        let n3 = this._diff.read(e3);
        if (!n3) return {
          org: [],
          mod: []
        };
        let r2 = [], i3 = [];
        if (n3.length === 1 && n3[0].innerChanges[0].modifiedRange.equalsRange(this._previewTextModel.getFullModelRange())) return {
          org: [],
          mod: []
        };
        let a3 = this._shift.get(), o3 = (e4) => new P(e4.startLineNumber + t3.top - 1, e4.startColumn + a3, e4.endLineNumber + t3.top - 1, e4.endColumn + a3);
        for (let e4 of n3) if (e4.original.isEmpty || r2.push({
          range: o3(e4.original.toInclusiveRange()),
          options: ja
        }), e4.modified.isEmpty || i3.push({
          range: e4.modified.toInclusiveRange(),
          options: Aa
        }), e4.modified.isEmpty || e4.original.isEmpty) e4.original.isEmpty || r2.push({
          range: o3(e4.original.toInclusiveRange()),
          options: Na
        }), e4.modified.isEmpty || i3.push({
          range: e4.modified.toInclusiveRange(),
          options: Ma
        });
        else for (let t4 of e4.innerChanges || []) e4.original.contains(t4.originalRange.startLineNumber) && r2.push({
          range: o3(t4.originalRange),
          options: t4.originalRange.isEmpty() ? ka : Oa
        }), e4.modified.contains(t4.modifiedRange.startLineNumber) && i3.push({
          range: t4.modifiedRange,
          options: t4.modifiedRange.isEmpty() ? Da : Ea
        });
        return {
          org: r2,
          mod: i3
        };
      }), this._originalDecorations = H(this, (e3) => this._decorations.read(e3).org), this._modifiedDecorations = H(this, (e3) => this._decorations.read(e3).mod), this._previewEditor.setModel(this._previewTextModel), this._register(this._editorObs.setDecorations(this._originalDecorations)), this._register(this._previewEditorObs.setDecorations(this._modifiedDecorations)), this._register(Ni((e3) => {
        let t3 = this._previewEditorObs.contentWidth.read(e3), n3 = this._text.read(e3).split(`
`).length - 1, r2 = this._editor.getOption(67) * n3;
        t3 <= 0 || this._previewEditor.layout({
          height: r2,
          width: t3
        });
      })), this._register(Ni((e3) => {
        this._position.read(e3), this._editor.layoutOverlayWidget(this);
      })), this._register(Ni((e3) => {
        this._scrollChanged.read(e3);
        let t3 = this._position.read(e3);
        t3 && this._editor.layoutOverlayWidget(this);
      }));
    }
    getId() {
      return this.id;
    }
    getDomNode() {
      return this._nodes;
    }
    getPosition() {
      let e2 = this._position.get();
      if (!e2) return null;
      let t2 = this._editor.getLayoutInfo(), n2 = this._editor.getScrolledVisiblePosition(new N(e2.top, 1));
      if (!n2) return null;
      let r2 = n2.top - 1, i2 = this._editor.getOffsetForColumn(e2.left.lineNumber, e2.left.column), a2 = t2.contentLeft + i2 + 10;
      return {
        preference: {
          left: a2,
          top: r2
        }
      };
    }
  }, IA = _Za, _Za.id = 0, _Za);
  BA = IA = NA([
    PA(5, k)
  ], BA);
  var VA = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, HA = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, UA;
  let WA = (__a = class extends S {
    static get(e2) {
      return e2.getContribution(UA.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2) {
      super(), this.editor = e2, this.instantiationService = t2, this.contextKeyService = n2, this.languageFeaturesService = r2, this._commandService = i2, this._configurationService = a2, this._diffProviderFactoryService = o2, this._modelService = s2, this._isVisibleContext = UA.inlineEditVisibleContext.bindTo(this.contextKeyService), this._isCursorAtInlineEditContext = UA.cursorAtInlineEditContext.bindTo(this.contextKeyService), this._currentEdit = Hc(this, void 0), this._currentWidget = ba(this._currentEdit, (e3) => {
        let t3 = this._currentEdit.read(e3);
        if (!t3) return;
        let n3 = t3.range.endLineNumber, r3 = t3.range.endColumn, i3 = t3.text.endsWith(`
`) && !(t3.range.startLineNumber === t3.range.endLineNumber && t3.range.startColumn === t3.range.endColumn) ? t3.text.slice(0, -1) : t3.text, a3 = new bC(n3, [
          new xC(r3, i3, false)
        ]), o3 = t3.range.startLineNumber === t3.range.endLineNumber && a3.parts.length === 1 && a3.parts[0].lines.length === 1, s3 = t3.text === ``;
        if (!o3 && !s3) return;
        let c3 = this.instantiationService.createInstance(TA, this.editor, {
          ghostText: Qi(a3),
          minReservedLineCount: Qi(0),
          targetTextModel: Qi(this.editor.getModel() ?? void 0),
          range: Qi(t3.range)
        });
        return c3;
      }), this._isAccepting = Hc(this, false), this._enabled = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63).enabled), this._fontFamily = zc(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63).fontFamily);
      let c2 = Vc(`InlineEditController.modelContentChangedSignal`, e2.onDidChangeModelContent);
      this._register(Ni((t3) => {
        this._enabled.read(t3) && (c2.read(t3), !this._isAccepting.read(t3) && this.getInlineEdit(e2, true));
      }));
      let l2 = zc(this, e2.onDidChangeCursorPosition, () => e2.getPosition());
      this._register(Ni((e3) => {
        if (!this._enabled.read(e3)) return;
        let t3 = l2.read(e3);
        t3 && this.checkCursorPosition(t3);
      })), this._register(Ni((t3) => {
        let n3 = this._currentEdit.read(t3);
        if (this._isCursorAtInlineEditContext.set(false), !n3) {
          this._isVisibleContext.set(false);
          return;
        }
        this._isVisibleContext.set(true);
        let r3 = e2.getPosition();
        r3 && this.checkCursorPosition(r3);
      }));
      let u2 = Vc(`InlineEditController.editorBlurSignal`, e2.onDidBlurEditorWidget);
      this._register(Ni(async (t3) => {
        var _a3;
        this._enabled.read(t3) && (u2.read(t3), !(this._configurationService.getValue(`editor.experimentalInlineEdit.keepOnBlur`) || e2.getOption(63).keepOnBlur) && ((_a3 = this._currentRequestCts) == null ? void 0 : _a3.dispose(true), this._currentRequestCts = void 0, await this.clear(false)));
      }));
      let d2 = Vc(`InlineEditController.editorFocusSignal`, e2.onDidFocusEditorText);
      this._register(Ni((t3) => {
        this._enabled.read(t3) && (d2.read(t3), this.getInlineEdit(e2, true));
      }));
      let f2 = this._register(fa());
      this._register(Ni((e3) => {
        let t3 = this._fontFamily.read(e3);
        f2.setStyle(t3 === `` || t3 === `default` ? `` : `
.monaco-editor .inline-edit-decoration,
.monaco-editor .inline-edit-decoration-preview,
.monaco-editor .inline-edit {
	font-family: ${t3};
}`);
      })), this._register(new kA(this.editor, this._currentWidget, this.instantiationService)), this._register(new zA(this.editor, this._currentEdit, this.instantiationService, this._diffProviderFactoryService, this._modelService));
    }
    checkCursorPosition(e2) {
      if (!this._currentEdit) {
        this._isCursorAtInlineEditContext.set(false);
        return;
      }
      let t2 = this._currentEdit.get();
      if (!t2) {
        this._isCursorAtInlineEditContext.set(false);
        return;
      }
      this._isCursorAtInlineEditContext.set(P.containsPosition(t2.range, e2));
    }
    validateInlineEdit(e2, t2) {
      var _a3;
      if (t2.text.includes(`
`) && t2.range.startLineNumber !== t2.range.endLineNumber && t2.range.startColumn !== t2.range.endColumn) {
        let n2 = t2.range.startColumn;
        if (n2 !== 1) return false;
        let r2 = t2.range.endLineNumber, i2 = t2.range.endColumn, a2 = ((_a3 = e2.getModel()) == null ? void 0 : _a3.getLineLength(r2)) ?? 0;
        if (i2 !== a2 + 1) return false;
      }
      return true;
    }
    async fetchInlineEdit(e2, t2) {
      this._currentRequestCts && this._currentRequestCts.dispose(true);
      let n2 = e2.getModel();
      if (!n2) return;
      let r2 = n2.getVersionId(), i2 = this.languageFeaturesService.inlineEditProvider.all(n2);
      if (i2.length === 0) return;
      let a2 = i2[0];
      this._currentRequestCts = new g();
      let o2 = this._currentRequestCts.token, s2 = t2 ? tn.Automatic : tn.Invoke, c2 = t2;
      if (c2 && await GA(50, o2), o2.isCancellationRequested || n2.isDisposed() || n2.getVersionId() !== r2) return;
      let l2 = await a2.provideInlineEdit(n2, {
        triggerKind: s2
      }, o2);
      if (l2 && !(o2.isCancellationRequested || n2.isDisposed() || n2.getVersionId() !== r2) && this.validateInlineEdit(e2, l2)) return l2;
    }
    async getInlineEdit(e2, t2) {
      this._isCursorAtInlineEditContext.set(false), await this.clear();
      let n2 = await this.fetchInlineEdit(e2, t2);
      n2 && this._currentEdit.set(n2, void 0);
    }
    async trigger() {
      await this.getInlineEdit(this.editor, false);
    }
    async jumpBack() {
      this._jumpBackPosition && (this.editor.setPosition(this._jumpBackPosition), this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition));
    }
    async accept() {
      this._isAccepting.set(true, void 0);
      let e2 = this._currentEdit.get();
      if (!e2) return;
      let t2 = e2.text;
      e2.text.startsWith(`
`) && (t2 = e2.text.substring(1)), this.editor.pushUndoStop(), this.editor.executeEdits(`acceptCurrent`, [
        Oe.replace(P.lift(e2.range), t2)
      ]), e2.accepted && await this._commandService.executeCommand(e2.accepted.id, ...e2.accepted.arguments || []).then(void 0, Uc), this.freeEdit(e2), Kl((e3) => {
        this._currentEdit.set(void 0, e3), this._isAccepting.set(false, e3);
      });
    }
    jumpToCurrent() {
      var _a3;
      this._jumpBackPosition = (_a3 = this.editor.getSelection()) == null ? void 0 : _a3.getStartPosition();
      let e2 = this._currentEdit.get();
      if (!e2) return;
      let t2 = N.lift({
        lineNumber: e2.range.startLineNumber,
        column: e2.range.startColumn
      });
      this.editor.setPosition(t2), this.editor.revealPositionInCenterIfOutsideViewport(t2);
    }
    async clear(e2 = true) {
      let t2 = this._currentEdit.get();
      t2 && (t2 == null ? void 0 : t2.rejected) && e2 && await this._commandService.executeCommand(t2.rejected.id, ...t2.rejected.arguments || []).then(void 0, Uc), t2 && this.freeEdit(t2), this._currentEdit.set(void 0, void 0);
    }
    freeEdit(e2) {
      let t2 = this.editor.getModel();
      if (!t2) return;
      let n2 = this.languageFeaturesService.inlineEditProvider.all(t2);
      n2.length !== 0 && n2[0].freeInlineEdit(e2);
    }
  }, UA = __a, __a.ID = `editor.contrib.inlineEditController`, __a.inlineEditVisibleKey = `inlineEditVisible`, __a.inlineEditVisibleContext = new F(__a.inlineEditVisibleKey, false), __a.cursorAtInlineEditKey = `cursorAtInlineEdit`, __a.cursorAtInlineEditContext = new F(__a.cursorAtInlineEditKey, false), __a);
  WA = UA = VA([
    HA(1, k),
    HA(2, O),
    HA(3, A),
    HA(4, mt),
    HA(5, D),
    HA(6, vt),
    HA(7, Pt)
  ], WA);
  function GA(e2, t2) {
    return new Promise((n2) => {
      let r2, i2 = setTimeout(() => {
        r2 && r2.dispose(), n2();
      }, e2);
      t2 && (r2 = t2.onCancellationRequested(() => {
        clearTimeout(i2), r2 && r2.dispose(), n2();
      }));
    });
  }
  var KA = class extends w {
    constructor() {
      super({
        id: vA,
        label: `Accept Inline Edit`,
        alias: `Accept Inline Edit`,
        precondition: b.and(T.writable, WA.inlineEditVisibleContext),
        kbOpts: [
          {
            weight: 101,
            primary: 2,
            kbExpr: b.and(T.writable, WA.inlineEditVisibleContext, WA.cursorAtInlineEditContext)
          }
        ],
        menuOpts: [
          {
            menuId: j.InlineEditToolbar,
            title: `Accept`,
            group: `primary`,
            order: 1
          }
        ]
      });
    }
    async run(e2, t2) {
      let n2 = WA.get(t2);
      await (n2 == null ? void 0 : n2.accept());
    }
  }, qA = class extends w {
    constructor() {
      let e2 = b.and(T.writable, b.not(WA.inlineEditVisibleKey));
      super({
        id: `editor.action.inlineEdit.trigger`,
        label: `Trigger Inline Edit`,
        alias: `Trigger Inline Edit`,
        precondition: e2,
        kbOpts: {
          weight: 101,
          primary: 2646,
          kbExpr: e2
        }
      });
    }
    async run(e2, t2) {
      let n2 = WA.get(t2);
      n2 == null ? void 0 : n2.trigger();
    }
  }, JA = class extends w {
    constructor() {
      let e2 = b.and(T.writable, WA.inlineEditVisibleContext, b.not(WA.cursorAtInlineEditKey));
      super({
        id: bA,
        label: `Jump to Inline Edit`,
        alias: `Jump to Inline Edit`,
        precondition: e2,
        kbOpts: {
          weight: 101,
          primary: 2646,
          kbExpr: e2
        },
        menuOpts: [
          {
            menuId: j.InlineEditToolbar,
            title: `Jump To Edit`,
            group: `primary`,
            order: 3,
            when: e2
          }
        ]
      });
    }
    async run(e2, t2) {
      let n2 = WA.get(t2);
      n2 == null ? void 0 : n2.jumpToCurrent();
    }
  }, YA = class extends w {
    constructor() {
      let e2 = b.and(T.writable, WA.cursorAtInlineEditContext);
      super({
        id: xA,
        label: `Jump Back from Inline Edit`,
        alias: `Jump Back from Inline Edit`,
        precondition: e2,
        kbOpts: {
          weight: 110,
          primary: 2646,
          kbExpr: e2
        },
        menuOpts: [
          {
            menuId: j.InlineEditToolbar,
            title: `Jump Back`,
            group: `primary`,
            order: 3,
            when: e2
          }
        ]
      });
    }
    async run(e2, t2) {
      let n2 = WA.get(t2);
      n2 == null ? void 0 : n2.jumpBack();
    }
  }, XA = class extends w {
    constructor() {
      let e2 = b.and(T.writable, WA.inlineEditVisibleContext);
      super({
        id: yA,
        label: `Reject Inline Edit`,
        alias: `Reject Inline Edit`,
        precondition: e2,
        kbOpts: {
          weight: 100,
          primary: 9,
          kbExpr: e2
        },
        menuOpts: [
          {
            menuId: j.InlineEditToolbar,
            title: `Reject`,
            group: `secondary`,
            order: 2
          }
        ]
      });
    }
    async run(e2, t2) {
      let n2 = WA.get(t2);
      await (n2 == null ? void 0 : n2.clear());
    }
  };
  J(KA), J(XA), J(JA), J(YA), J(qA), X(WA.ID, WA, 3);
  const ZA = `editor.action.inlineEdits.accept`, QA = `editor.action.inlineEdits.showPrevious`, $A = `editor.action.inlineEdits.showNext`, ej = new F(`inlineEditsVisible`, false, U(`inlineEditsVisible`, `Whether an inline edit is visible`)), tj = new F(`inlineEditsIsPinned`, false, U(`isPinned`, `Whether an inline edit is visible`));
  var nj = (_$a = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._editorObs = Lc(this._editor), this._placeholderText = this._editorObs.getOption(88), this._state = Ca({
        owner: this,
        equalsFn: Il
      }, (e3) => {
        let t2 = this._placeholderText.read(e3);
        if (t2 && this._editorObs.valueIsEmpty.read(e3)) return {
          placeholder: t2
        };
      }), this._shouldViewBeAlive = rj(this, (e3) => {
        var _a3;
        return ((_a3 = this._state.read(e3)) == null ? void 0 : _a3.placeholder) !== void 0;
      }), this._view = Ta((e3, t2) => {
        if (!this._shouldViewBeAlive.read(e3)) return;
        let n2 = os(`div.editorPlaceholder`);
        t2.add(Ni((e4) => {
          let t3 = this._state.read(e4), r2 = (t3 == null ? void 0 : t3.placeholder) !== void 0;
          n2.root.style.display = r2 ? `block` : `none`, n2.root.innerText = (t3 == null ? void 0 : t3.placeholder) ?? ``;
        })), t2.add(Ni((e4) => {
          let t3 = this._editorObs.layoutInfo.read(e4);
          n2.root.style.left = `${t3.contentLeft}px`, n2.root.style.width = t3.contentWidth - t3.verticalScrollbarWidth + `px`, n2.root.style.top = `${this._editor.getTopForLineNumber(0)}px`;
        })), t2.add(Ni((e4) => {
          n2.root.style.fontFamily = this._editorObs.getOption(49).read(e4), n2.root.style.fontSize = this._editorObs.getOption(52).read(e4) + `px`, n2.root.style.lineHeight = this._editorObs.getOption(67).read(e4) + `px`;
        })), t2.add(this._editorObs.createOverlayWidget({
          allowEditorOverflow: false,
          minContentWidthInPx: Qi(0),
          position: Qi(null),
          domNode: n2.root
        }));
      }), this._view.recomputeInitiallyAndOnChange(this._store);
    }
  }, _$a.ID = `editor.contrib.placeholderText`, _$a);
  function rj(e2, t2) {
    return Sa(e2, (e3, n2) => n2 === true ? true : t2(e3));
  }
  var ij = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, aj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, oj = class {
    constructor(e2, t2, n2) {
      this.range = e2, this.newLines = t2, this.changes = n2;
    }
  };
  let sj = class extends S {
    constructor(e2, t2, n2, r2) {
      super(), this._editor = e2, this._edit = t2, this._userPrompt = n2, this._instantiationService = r2, this._editorObs = Lc(this._editor), this._elements = os(`div.inline-edits-widget`, {
        style: {
          position: `absolute`,
          overflow: `visible`,
          top: `0px`,
          left: `0px`
        }
      }, [
        os(`div@editorContainer`, {
          style: {
            position: `absolute`,
            top: `0px`,
            left: `0px`,
            width: `500px`,
            height: `500px`
          }
        }, [
          os(`div.toolbar@toolbar`, {
            style: {
              position: `absolute`,
              top: `-25px`,
              left: `0px`
            }
          }),
          os(`div.promptEditor@promptEditor`, {
            style: {
              position: `absolute`,
              top: `-25px`,
              left: `80px`,
              width: `300px`,
              height: `22px`
            }
          }),
          os(`div.preview@editor`, {
            style: {
              position: `absolute`,
              top: `0px`,
              left: `0px`
            }
          })
        ]),
        Rl(`svg`, {
          style: {
            overflow: `visible`,
            pointerEvents: `none`
          }
        }, [
          Rl(`defs`, [
            Rl(`linearGradient`, {
              id: `Gradient2`,
              x1: `0`,
              y1: `0`,
              x2: `1`,
              y2: `0`
            }, [
              Rl(`stop`, {
                offset: `0%`,
                class: `gradient-stop`
              }),
              Rl(`stop`, {
                offset: `100%`,
                class: `gradient-stop`
              })
            ])
          ]),
          Rl(`path@path`, {
            d: ``,
            fill: `url(#Gradient2)`
          })
        ])
      ]), this._previewTextModel = this._register(this._instantiationService.createInstance(Gr, ``, Jn, Gr.DEFAULT_CREATION_OPTIONS, null)), this._setText = H((e3) => {
        let t3 = this._edit.read(e3);
        t3 && this._previewTextModel.setValue(t3.newLines.join(`
`));
      }).recomputeInitiallyAndOnChange(this._store), this._promptTextModel = this._register(this._instantiationService.createInstance(Gr, ``, Jn, Gr.DEFAULT_CREATION_OPTIONS, null)), this._promptEditor = this._register(this._instantiationService.createInstance(c_, this._elements.promptEditor, {
        glyphMargin: false,
        lineNumbers: `off`,
        minimap: {
          enabled: false
        },
        guides: {
          indentation: false,
          bracketPairs: false,
          bracketPairsHorizontal: false,
          highlightActiveIndentation: false
        },
        folding: false,
        selectOnLineNumbers: false,
        selectionHighlight: false,
        columnSelection: false,
        overviewRulerBorder: false,
        overviewRulerLanes: 0,
        lineDecorationsWidth: 0,
        lineNumbersMinChars: 0,
        placeholder: `Describe the change you want...`,
        fontFamily: me
      }, {
        contributions: je.getSomeEditorContributions([
          uE.ID,
          nj.ID,
          Ay.ID
        ]),
        isSimpleWidget: true
      }, this._editor)), this._previewEditor = this._register(this._instantiationService.createInstance(c_, this._elements.editor, {
        glyphMargin: false,
        lineNumbers: `off`,
        minimap: {
          enabled: false
        },
        guides: {
          indentation: false,
          bracketPairs: false,
          bracketPairsHorizontal: false,
          highlightActiveIndentation: false
        },
        folding: false,
        selectOnLineNumbers: false,
        selectionHighlight: false,
        columnSelection: false,
        overviewRulerBorder: false,
        overviewRulerLanes: 0,
        lineDecorationsWidth: 0,
        lineNumbersMinChars: 0
      }, {
        contributions: []
      }, this._editor)), this._previewEditorObs = Lc(this._previewEditor), this._decorations = H(this, (e3) => {
        var _a3;
        this._setText.read(e3);
        let t3 = (_a3 = this._edit.read(e3)) == null ? void 0 : _a3.changes;
        if (!t3) return [];
        let n3 = [], r3 = [];
        if (t3.length === 1 && t3[0].innerChanges[0].modifiedRange.equalsRange(this._previewTextModel.getFullModelRange())) return [];
        for (let e4 of t3) if (e4.original.isEmpty || n3.push({
          range: e4.original.toInclusiveRange(),
          options: ja
        }), e4.modified.isEmpty || r3.push({
          range: e4.modified.toInclusiveRange(),
          options: Aa
        }), e4.modified.isEmpty || e4.original.isEmpty) e4.original.isEmpty || n3.push({
          range: e4.original.toInclusiveRange(),
          options: Na
        }), e4.modified.isEmpty || r3.push({
          range: e4.modified.toInclusiveRange(),
          options: Ma
        });
        else for (let t4 of e4.innerChanges || []) e4.original.contains(t4.originalRange.startLineNumber) && n3.push({
          range: t4.originalRange,
          options: t4.originalRange.isEmpty() ? ka : Oa
        }), e4.modified.contains(t4.modifiedRange.startLineNumber) && r3.push({
          range: t4.modifiedRange,
          options: t4.modifiedRange.isEmpty() ? Da : Ea
        });
        return r3;
      }), this._layout1 = H(this, (e3) => {
        let t3 = this._editor.getModel(), n3 = this._edit.read(e3);
        if (!n3) return null;
        let r3 = n3.range, i3 = 0;
        for (let e4 = r3.startLineNumber; e4 < r3.endLineNumberExclusive; e4++) {
          let n4 = t3.getLineMaxColumn(e4), r4 = this._editor.getOffsetForColumn(e4, n4);
          i3 = Math.max(i3, r4);
        }
        let a2 = this._editor.getLayoutInfo(), o2 = a2.contentLeft;
        return {
          left: o2 + i3
        };
      }), this._layout = H(this, (e3) => {
        let t3 = this._edit.read(e3);
        if (!t3) return null;
        let n3 = t3.range, r3 = this._editorObs.scrollLeft.read(e3), i3 = this._layout1.read(e3).left + 20 - r3, a2 = this._editor.getTopForLineNumber(n3.startLineNumber) - this._editorObs.scrollTop.read(e3), o2 = this._editor.getTopForLineNumber(n3.endLineNumberExclusive) - this._editorObs.scrollTop.read(e3), s2 = new lj(i3, a2), c2 = new lj(i3, o2), l2 = o2 - a2, u2 = 50, d2 = this._editor.getOption(67) * t3.newLines.length, f2 = l2 - d2, p2 = new lj(i3 + u2, a2 + f2 / 2), m2 = new lj(i3 + u2, o2 - f2 / 2);
        return {
          topCode: s2,
          bottomCode: c2,
          codeHeight: l2,
          topEdit: p2,
          bottomEdit: m2,
          editHeight: d2
        };
      });
      let i2 = H(this, (e3) => this._edit.read(e3) !== void 0 || this._userPrompt.read(e3) !== void 0);
      this._register(Di(this._elements.root, {
        display: H(this, (e3) => i2.read(e3) ? `block` : `none`)
      })), this._register(Ti(this._editor.getDomNode(), this._elements.root)), this._register(Lc(e2).createOverlayWidget({
        domNode: this._elements.root,
        position: Qi(null),
        allowEditorOverflow: false,
        minContentWidthInPx: H((e3) => {
          var _a3;
          let t3 = (_a3 = this._layout1.read(e3)) == null ? void 0 : _a3.left;
          if (t3 === void 0) return 0;
          let n3 = this._previewEditorObs.contentWidth.read(e3);
          return t3 + n3;
        })
      })), this._previewEditor.setModel(this._previewTextModel), this._register(this._previewEditorObs.setDecorations(this._decorations)), this._register(Ni((e3) => {
        let t3 = this._layout.read(e3);
        if (!t3) return;
        let { topCode: n3, bottomCode: r3, topEdit: i3, bottomEdit: a2, editHeight: o2 } = t3, s2 = 10, c2 = 0, l2 = 40, u2 = new uj().moveTo(n3).lineTo(n3.deltaX(s2)).curveTo(n3.deltaX(s2 + l2), i3.deltaX(-l2 - c2), i3.deltaX(-c2)).lineTo(i3).lineTo(a2).lineTo(a2.deltaX(-c2)).curveTo(a2.deltaX(-l2 - c2), r3.deltaX(s2 + l2), r3.deltaX(s2)).lineTo(r3).build();
        this._elements.path.setAttribute(`d`, u2), this._elements.editorContainer.style.top = `${i3.y}px`, this._elements.editorContainer.style.left = `${i3.x}px`, this._elements.editorContainer.style.height = `${o2}px`;
        let d2 = this._previewEditorObs.contentWidth.read(e3);
        this._previewEditor.layout({
          height: o2,
          width: d2
        });
      })), this._promptEditor.setModel(this._promptTextModel), this._promptEditor.layout(), this._register(dj(cj(this._userPrompt, (e3) => e3 ?? ``, (e3) => e3), Lc(this._promptEditor).value)), this._register(Ni((e3) => {
        let t3 = Lc(this._promptEditor).isFocused.read(e3);
        this._elements.root.classList.toggle(`focused`, t3);
      }));
    }
  };
  sj = ij([
    aj(3, k)
  ], sj);
  function cj(e2, t2, n2) {
    return wa(void 0, (n3) => t2(e2.read(n3)), (t3, r2) => e2.set(n2(t3), r2));
  }
  var lj = class e2 {
    constructor(e3, t2) {
      this.x = e3, this.y = t2;
    }
    deltaX(t2) {
      return new e2(this.x + t2, this.y);
    }
  }, uj = class {
    constructor() {
      this._data = ``;
    }
    moveTo(e2) {
      return this._data += `M ${e2.x} ${e2.y} `, this;
    }
    lineTo(e2) {
      return this._data += `L ${e2.x} ${e2.y} `, this;
    }
    curveTo(e2, t2, n2) {
      return this._data += `C ${e2.x} ${e2.y} ${t2.x} ${t2.y} ${n2.x} ${n2.y} `, this;
    }
    build() {
      return this._data;
    }
  };
  function dj(e2, t2) {
    let n2 = new C();
    return n2.add(Ni((n3) => {
      let r2 = e2.read(n3);
      t2.set(r2, void 0);
    })), n2.add(Ni((n3) => {
      let r2 = t2.read(n3);
      e2.set(r2, void 0);
    })), n2;
  }
  var fj = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, pj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, mj;
  let hj = (_ab = class extends S {
    static _createUniqueUri() {
      return R.from({
        scheme: `inline-edits`,
        path: (/* @__PURE__ */ new Date()).toString() + String(mj._modelId++)
      });
    }
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(), this.textModel = e2, this._textModelVersionId = t2, this._selection = n2, this._debounceValue = r2, this.languageFeaturesService = i2, this._diffProviderFactoryService = a2, this._modelService = o2, this._forceUpdateExplicitlySignal = Bc(this), this._selectedInlineCompletionId = Hc(this, void 0), this._isActive = Hc(this, false), this._originalModel = ba(() => this._modelService.createModel(``, null, mj._createUniqueUri())).keepObserved(this._store), this._modifiedModel = ba(() => this._modelService.createModel(``, null, mj._createUniqueUri())).keepObserved(this._store), this._pinnedRange = new _j(this.textModel, this._textModelVersionId), this.isPinned = this._pinnedRange.range.map((e3) => !!e3), this.userPrompt = Hc(this, void 0), this.inlineEdit = H(this, (e3) => {
        var _a3, _b3;
        return (_b3 = (_a3 = this._inlineEdit.read(e3)) == null ? void 0 : _a3.promiseResult.read(e3)) == null ? void 0 : _b3.data;
      }), this._inlineEdit = H(this, (e3) => {
        let t3 = this.selectedInlineEdit.read(e3);
        if (!t3) return;
        let n3 = t3.inlineCompletion.range;
        if (t3.inlineCompletion.insertText.trim() === ``) return;
        let r3 = t3.inlineCompletion.insertText.split(/\r\n|\r|\n/);
        function i3(e4) {
          var _a3;
          let t4 = ((_a3 = e4[0].match(/^\s*/)) == null ? void 0 : _a3[0]) ?? ``;
          return e4.map((e5) => e5.replace(RegExp(`^` + t4), ``));
        }
        r3 = i3(r3);
        let a3 = this.textModel.getValueInRange(n3), o3 = a3.split(/\r\n|\r|\n/);
        o3 = i3(o3), this._originalModel.get().setValue(o3.join(`
`)), this._modifiedModel.get().setValue(r3.join(`
`));
        let s2 = this._diffProviderFactoryService.createDiffProvider({
          diffAlgorithm: `advanced`
        });
        return Gn.fromFn(async () => {
          let e4 = await s2.computeDiff(this._originalModel.get(), this._modifiedModel.get(), {
            computeMoves: false,
            ignoreTrimWhitespace: false,
            maxComputationTimeMs: 1e3
          }, m.None);
          if (!e4.identical) return new oj(Sn.fromRangeInclusive(n3), i3(r3), e4.changes);
        });
      }), this._fetchStore = this._register(new C()), this._inlineEditsFetchResult = Ia(this, void 0), this._inlineEdits = Ca({
        owner: this,
        equalsFn: Il
      }, (e3) => {
        var _a3;
        return ((_a3 = this._inlineEditsFetchResult.read(e3)) == null ? void 0 : _a3.completions.map((e4) => new gj(e4))) ?? [];
      }), this._fetchInlineEditsPromise = xa({
        owner: this,
        createEmptyChangeSummary: () => ({
          inlineCompletionTriggerKind: en.Automatic
        }),
        handleChange: (e3, t3) => (e3.didChange(this._forceUpdateExplicitlySignal) && (t3.inlineCompletionTriggerKind = en.Explicit), true)
      }, async (e3, t3) => {
        this._fetchStore.clear(), this._forceUpdateExplicitlySignal.read(e3), this._textModelVersionId.read(e3);
        function n3(e4, t4) {
          return t4(e4);
        }
        let r3 = this._pinnedRange.range.read(e3) ?? n3(this._selection.read(e3), (e4) => e4.isEmpty() ? void 0 : e4);
        if (!r3) {
          this._inlineEditsFetchResult.set(void 0, void 0), this.userPrompt.set(void 0, void 0);
          return;
        }
        let i3 = {
          triggerKind: t3.inlineCompletionTriggerKind,
          selectedSuggestionInfo: void 0,
          userPrompt: this.userPrompt.read(e3)
        }, a3 = Vi(this._fetchStore);
        await Bl(200, a3);
        let o3 = await BC(this.languageFeaturesService.inlineCompletionsProvider, r3, this.textModel, i3, a3);
        a3.isCancellationRequested || this._inlineEditsFetchResult.set(o3, void 0);
      }), this._filteredInlineEditItems = Ca({
        owner: this,
        equalsFn: uc()
      }, (e3) => this._inlineEdits.read(e3)), this.selectedInlineCompletionIndex = H(this, (e3) => {
        let t3 = this._selectedInlineCompletionId.read(e3), n3 = this._filteredInlineEditItems.read(e3), r3 = this._selectedInlineCompletionId === void 0 ? -1 : n3.findIndex((e4) => e4.semanticId === t3);
        return r3 === -1 ? (this._selectedInlineCompletionId.set(void 0, void 0), 0) : r3;
      }), this.selectedInlineEdit = H(this, (e3) => {
        let t3 = this._filteredInlineEditItems.read(e3), n3 = this.selectedInlineCompletionIndex.read(e3);
        return t3[n3];
      }), this._register(ol(this._fetchInlineEditsPromise));
    }
    async triggerExplicitly(e2) {
      Ll(e2, (e3) => {
        this._isActive.set(true, e3), this._forceUpdateExplicitlySignal.trigger(e3);
      }), await this._fetchInlineEditsPromise.get();
    }
    stop(e2) {
      Ll(e2, (e3) => {
        this.userPrompt.set(void 0, e3), this._isActive.set(false, e3), this._inlineEditsFetchResult.set(void 0, e3), this._pinnedRange.setRange(void 0, e3);
      });
    }
    async _deltaSelectedInlineCompletionIndex(e2) {
      await this.triggerExplicitly();
      let t2 = this._filteredInlineEditItems.get() || [];
      if (t2.length > 0) {
        let n2 = (this.selectedInlineCompletionIndex.get() + e2 + t2.length) % t2.length;
        this._selectedInlineCompletionId.set(t2[n2].semanticId, void 0);
      } else this._selectedInlineCompletionId.set(void 0, void 0);
    }
    async next() {
      await this._deltaSelectedInlineCompletionIndex(1);
    }
    async previous() {
      await this._deltaSelectedInlineCompletionIndex(-1);
    }
    async accept(e2) {
      if (e2.getModel() !== this.textModel) throw new u();
      let t2 = this.selectedInlineEdit.get();
      t2 && (e2.pushUndoStop(), e2.executeEdits(`inlineSuggestion.accept`, [
        t2.inlineCompletion.toSingleTextEdit().toSingleEditOperation()
      ]), this.stop());
    }
  }, mj = _ab, _ab._modelId = 0, _ab);
  hj = mj = fj([
    pj(4, A),
    pj(5, vt),
    pj(6, Pt)
  ], hj);
  var gj = class {
    constructor(e2) {
      this.inlineCompletion = e2, this.semanticId = this.inlineCompletion.hash();
    }
  }, _j = class extends S {
    constructor(e2, t2) {
      super(), this._textModel = e2, this._versionId = t2, this._decorations = Hc(this, []), this.range = H(this, (e3) => {
        this._versionId.read(e3);
        let t3 = this._decorations.read(e3)[0];
        return t3 ? this._textModel.getDecorationRange(t3) ?? null : null;
      }), this._register(Hl(() => {
        this._textModel.deltaDecorations(this._decorations.get(), []);
      }));
    }
    setRange(e2, t2) {
      this._decorations.set(this._textModel.deltaDecorations(this._decorations.get(), e2 ? [
        {
          range: e2,
          options: {
            description: `trackedRange`
          }
        }
      ] : []), t2);
    }
  }, vj = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, yj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, bj;
  let xj = (_bb = class extends S {
    static get(e2) {
      return e2.getContribution(bj.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this.editor = e2, this._instantiationService = t2, this._contextKeyService = n2, this._debounceService = r2, this._languageFeaturesService = i2, this._configurationService = a2, this._enabled = Rc(`editor.inlineEdits.enabled`, false, this._configurationService), this._editorObs = Lc(this.editor), this._selection = H(this, (e3) => this._editorObs.cursorSelection.read(e3) ?? new I(1, 1, 1, 1)), this._debounceValue = this._debounceService.for(this._languageFeaturesService.inlineCompletionsProvider, `InlineEditsDebounce`, {
        min: 50,
        max: 50
      }), this.model = ba(this, (e3) => {
        if (!this._enabled.read(e3) || this._editorObs.isReadonly.read(e3)) return;
        let t3 = this._editorObs.model.read(e3);
        if (!t3) return;
        let n3 = this._instantiationService.createInstance(al(hj, e3), t3, this._editorObs.versionId, this._selection, this._debounceValue);
        return n3;
      }), this._hadInlineEdit = Sa(this, (e3, t3) => {
        var _a3;
        return t3 || ((_a3 = this.model.read(e3)) == null ? void 0 : _a3.inlineEdit.read(e3)) !== void 0;
      }), this._widget = ba(this, (e3) => {
        if (this._hadInlineEdit.read(e3)) return this._instantiationService.createInstance(al(sj, e3), this.editor, this.model.map((e4, t3) => e4 == null ? void 0 : e4.inlineEdit.read(t3)), Sj((e4) => {
          var _a3;
          return ((_a3 = this.model.read(e4)) == null ? void 0 : _a3.userPrompt) ?? Hc(`empty`, ``);
        }));
      }), this._register(Bi(ej, this._contextKeyService, (e3) => {
        var _a3;
        return !!((_a3 = this.model.read(e3)) == null ? void 0 : _a3.inlineEdit.read(e3));
      })), this._register(Bi(tj, this._contextKeyService, (e3) => {
        var _a3;
        return !!((_a3 = this.model.read(e3)) == null ? void 0 : _a3.isPinned.read(e3));
      })), this.model.recomputeInitiallyAndOnChange(this._store), this._widget.recomputeInitiallyAndOnChange(this._store);
    }
  }, bj = _bb, _bb.ID = `editor.contrib.inlineEditsController`, _bb);
  xj = bj = vj([
    yj(1, k),
    yj(2, O),
    yj(3, Et),
    yj(4, A),
    yj(5, D)
  ], xj);
  function Sj(e2) {
    return wa(void 0, (t2) => {
      let n2 = e2(t2);
      return n2.read(t2);
    }, (t2, n2) => {
      e2(void 0).set(t2, n2);
    });
  }
  function Cj(e2) {
    return {
      label: e2.value,
      alias: e2.original
    };
  }
  var wj = (_cb = class extends w {
    constructor() {
      super({
        id: _cb.ID,
        ...Cj(W(`action.inlineEdits.showNext`, `Show Next Inline Edit`)),
        precondition: b.and(T.writable, ej),
        kbOpts: {
          weight: 100,
          primary: 606
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xj.get(t2);
      (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.next();
    }
  }, _cb.ID = $A, _cb), Tj = (_db = class extends w {
    constructor() {
      super({
        id: _db.ID,
        ...Cj(W(`action.inlineEdits.showPrevious`, `Show Previous Inline Edit`)),
        precondition: b.and(T.writable, ej),
        kbOpts: {
          weight: 100,
          primary: 604
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      let n2 = xj.get(t2);
      (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.previous();
    }
  }, _db.ID = QA, _db), Ej = class extends w {
    constructor() {
      super({
        id: `editor.action.inlineEdits.trigger`,
        ...Cj(W(`action.inlineEdits.trigger`, `Trigger Inline Edit`)),
        precondition: T.writable
      });
    }
    async run(e2, t2) {
      let n2 = xj.get(t2);
      await Mi(async (e3) => {
        var _a3;
        await ((_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.triggerExplicitly(e3));
      });
    }
  }, Dj = class extends w {
    constructor() {
      super({
        id: ZA,
        ...Cj(W(`action.inlineEdits.accept`, `Accept Inline Edit`)),
        precondition: ej,
        menuOpts: {
          menuId: j.InlineEditsActions,
          title: U(`inlineEditsActions`, `Accept Inline Edit`),
          group: `primary`,
          order: 1,
          icon: _.check
        },
        kbOpts: {
          primary: 2058,
          weight: 2e4,
          kbExpr: ej
        }
      });
    }
    async run(e2, t2) {
      var _a3;
      t2 instanceof c_ && (t2 = t2.getParentEditor());
      let n2 = xj.get(t2);
      n2 && ((_a3 = n2.model.get()) == null ? void 0 : _a3.accept(n2.editor), n2.editor.focus());
    }
  }, Oj = (_eb = class extends w {
    constructor() {
      super({
        id: _eb.ID,
        ...Cj(W(`action.inlineEdits.hide`, `Hide Inline Edit`)),
        precondition: ej,
        kbOpts: {
          weight: 100,
          primary: 9
        }
      });
    }
    async run(e2, t2) {
      let n2 = xj.get(t2);
      Kl((e3) => {
        var _a3;
        (_a3 = n2 == null ? void 0 : n2.model.get()) == null ? void 0 : _a3.stop(e3);
      });
    }
  }, _eb.ID = `editor.action.inlineEdits.hide`, _eb);
  X(xj.ID, xj, 3), J(Ej), J(wj), J(Tj), J(Dj), J(Oj);
  const kj = {
    Visible: new F(`parameterHintsVisible`, false),
    MultipleSignatures: new F(`parameterHintsMultipleSignatures`, false)
  };
  async function Aj(e2, t2, n2, r2, i2) {
    let a2 = e2.ordered(t2);
    for (let e3 of a2) try {
      let a3 = await e3.provideSignatureHelp(t2, n2, i2, r2);
      if (a3) return a3;
    } catch (e4) {
      Uc(e4);
    }
  }
  y.registerCommand(`_executeSignatureHelpProvider`, async (e2, ...t2) => {
    let [n2, r2, i2] = t2;
    V(R.isUri(n2)), V(N.isIPosition(r2)), V(typeof i2 == `string` || !i2);
    let a2 = e2.get(A), o2 = await e2.get(Ut).createModelReference(n2);
    try {
      let e3 = await Aj(a2.signatureHelpProvider, o2.object.textEditorModel, N.lift(r2), {
        triggerKind: Or.Invoke,
        isRetrigger: false,
        triggerCharacter: i2
      }, m.None);
      return e3 ? (setTimeout(() => e3.dispose(), 0), e3.value) : void 0;
    } finally {
      o2.dispose();
    }
  });
  var jj;
  (function(e2) {
    e2.Default = {
      type: 0
    };
    class t2 {
      constructor(e3, t3) {
        this.request = e3, this.previouslyActiveHints = t3, this.type = 2;
      }
    }
    e2.Pending = t2;
    class n2 {
      constructor(e3) {
        this.hints = e3, this.type = 1;
      }
    }
    e2.Active = n2;
  })(jj || (jj = {}));
  var Mj = (_fb = class extends S {
    constructor(t2, n2, r2 = _fb.DEFAULT_DELAY) {
      super(), this._onChangedHints = this._register(new E()), this.onChangedHints = this._onChangedHints.event, this.triggerOnType = false, this._state = jj.Default, this._pendingTriggers = [], this._lastSignatureHelpResult = this._register(new Bn()), this.triggerChars = new te(), this.retriggerChars = new te(), this.triggerId = 0, this.editor = t2, this.providers = n2, this.throttledDelayer = new ve(r2), this._register(this.editor.onDidBlurEditorWidget(() => this.cancel())), this._register(this.editor.onDidChangeConfiguration(() => this.onEditorConfigurationChange())), this._register(this.editor.onDidChangeModel((e2) => this.onModelChanged())), this._register(this.editor.onDidChangeModelLanguage((e2) => this.onModelChanged())), this._register(this.editor.onDidChangeCursorSelection((e2) => this.onCursorChange(e2))), this._register(this.editor.onDidChangeModelContent((e2) => this.onModelContentChange())), this._register(this.providers.onDidChange(this.onModelChanged, this)), this._register(this.editor.onDidType((e2) => this.onDidType(e2))), this.onEditorConfigurationChange(), this.onModelChanged();
    }
    get state() {
      return this._state;
    }
    set state(e2) {
      this._state.type === 2 && this._state.request.cancel(), this._state = e2;
    }
    cancel(e2 = false) {
      this.state = jj.Default, this.throttledDelayer.cancel(), e2 || this._onChangedHints.fire(void 0);
    }
    trigger(e2, t2) {
      let n2 = this.editor.getModel();
      if (!n2 || !this.providers.has(n2)) return;
      let r2 = ++this.triggerId;
      this._pendingTriggers.push(e2), this.throttledDelayer.trigger(() => this.doTrigger(r2), t2).catch(G);
    }
    next() {
      if (this.state.type !== 1) return;
      let e2 = this.state.hints.signatures.length, t2 = this.state.hints.activeSignature, n2 = t2 % e2 === e2 - 1, r2 = this.editor.getOption(86).cycle;
      if ((e2 < 2 || n2) && !r2) {
        this.cancel();
        return;
      }
      this.updateActiveSignature(n2 && r2 ? 0 : t2 + 1);
    }
    previous() {
      if (this.state.type !== 1) return;
      let e2 = this.state.hints.signatures.length, t2 = this.state.hints.activeSignature, n2 = t2 === 0, r2 = this.editor.getOption(86).cycle;
      if ((e2 < 2 || n2) && !r2) {
        this.cancel();
        return;
      }
      this.updateActiveSignature(n2 && r2 ? e2 - 1 : t2 - 1);
    }
    updateActiveSignature(e2) {
      this.state.type === 1 && (this.state = new jj.Active({
        ...this.state.hints,
        activeSignature: e2
      }), this._onChangedHints.fire(this.state.hints));
    }
    async doTrigger(e2) {
      let t2 = this.state.type === 1 || this.state.type === 2, n2 = this.getLastActiveHints();
      if (this.cancel(true), this._pendingTriggers.length === 0) return false;
      let r2 = this._pendingTriggers.reduce(Nj);
      this._pendingTriggers = [];
      let i2 = {
        triggerKind: r2.triggerKind,
        triggerCharacter: r2.triggerCharacter,
        isRetrigger: t2,
        activeSignatureHelp: n2
      };
      if (!this.editor.hasModel()) return false;
      let a2 = this.editor.getModel(), o2 = this.editor.getPosition();
      this.state = new jj.Pending(sa((e3) => Aj(this.providers, a2, o2, i2, e3)), n2);
      try {
        let t3 = await this.state.request;
        return e2 === this.triggerId ? !t3 || !t3.value.signatures || t3.value.signatures.length === 0 ? (t3 == null ? void 0 : t3.dispose(), this._lastSignatureHelpResult.clear(), this.cancel(), false) : (this.state = new jj.Active(t3.value), this._lastSignatureHelpResult.value = t3, this._onChangedHints.fire(this.state.hints), true) : (t3 == null ? void 0 : t3.dispose(), false);
      } catch (t3) {
        return e2 === this.triggerId && (this.state = jj.Default), G(t3), false;
      }
    }
    getLastActiveHints() {
      switch (this.state.type) {
        case 1:
          return this.state.hints;
        case 2:
          return this.state.previouslyActiveHints;
        default:
          return;
      }
    }
    get isTriggered() {
      return this.state.type === 1 || this.state.type === 2 || this.throttledDelayer.isTriggered();
    }
    onModelChanged() {
      this.cancel(), this.triggerChars.clear(), this.retriggerChars.clear();
      let e2 = this.editor.getModel();
      if (e2) for (let t2 of this.providers.ordered(e2)) {
        for (let e3 of t2.signatureHelpTriggerCharacters || []) if (e3.length) {
          let t3 = e3.charCodeAt(0);
          this.triggerChars.add(t3), this.retriggerChars.add(t3);
        }
        for (let e3 of t2.signatureHelpRetriggerCharacters || []) e3.length && this.retriggerChars.add(e3.charCodeAt(0));
      }
    }
    onDidType(e2) {
      if (!this.triggerOnType) return;
      let t2 = e2.length - 1, n2 = e2.charCodeAt(t2);
      (this.triggerChars.has(n2) || this.isTriggered && this.retriggerChars.has(n2)) && this.trigger({
        triggerKind: Or.TriggerCharacter,
        triggerCharacter: e2.charAt(t2)
      });
    }
    onCursorChange(e2) {
      e2.source === `mouse` ? this.cancel() : this.isTriggered && this.trigger({
        triggerKind: Or.ContentChange
      });
    }
    onModelContentChange() {
      this.isTriggered && this.trigger({
        triggerKind: Or.ContentChange
      });
    }
    onEditorConfigurationChange() {
      this.triggerOnType = this.editor.getOption(86).enabled, this.triggerOnType || this.cancel();
    }
    dispose() {
      this.cancel(true), super.dispose();
    }
  }, _fb.DEFAULT_DELAY = 120, _fb);
  function Nj(e2, t2) {
    switch (t2.triggerKind) {
      case Or.Invoke:
        return t2;
      case Or.ContentChange:
        return e2;
      case Or.TriggerCharacter:
      default:
        return t2;
    }
  }
  var Pj = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Fj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Ij;
  const Lj = r, Rj = cl(`parameter-hints-next`, _.chevronDown, U(`parameterHintsNextIcon`, `Icon for show next parameter hint.`)), zj = cl(`parameter-hints-previous`, _.chevronUp, U(`parameterHintsPreviousIcon`, `Icon for show previous parameter hint.`));
  let Bj = (_gb = class extends S {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this.editor = e2, this.model = t2, this.telemetryService = a2, this.renderDisposeables = this._register(new C()), this.visible = false, this.announcedLabel = null, this.allowEditorOverflow = true, this.markdownRenderer = this._register(new En({
        editor: e2
      }, i2, r2)), this.keyVisible = kj.Visible.bindTo(n2), this.keyMultipleSignatures = kj.MultipleSignatures.bindTo(n2);
    }
    createParameterHintDOMNodes() {
      let e2 = Lj(`.editor-widget.parameter-hints-widget`), t2 = B(e2, Lj(`.phwrapper`));
      t2.tabIndex = -1;
      let n2 = B(t2, Lj(`.controls`)), r2 = B(n2, Lj(`.button` + L.asCSSSelector(zj))), i2 = B(n2, Lj(`.overloads`)), a2 = B(n2, Lj(`.button` + L.asCSSSelector(Rj)));
      this._register(z(r2, `click`, (e3) => {
        Be.stop(e3), this.previous();
      })), this._register(z(a2, `click`, (e3) => {
        Be.stop(e3), this.next();
      }));
      let o2 = Lj(`.body`), s2 = new Te(o2, {
        alwaysConsumeMouseWheel: true
      });
      this._register(s2), t2.appendChild(s2.getDomNode());
      let c2 = B(o2, Lj(`.signature`)), l2 = B(o2, Lj(`.docs`));
      e2.style.userSelect = `text`, this.domNodes = {
        element: e2,
        signature: c2,
        overloads: i2,
        docs: l2,
        scrollbar: s2
      }, this.editor.addContentWidget(this), this.hide(), this._register(this.editor.onDidChangeCursorSelection((e3) => {
        this.visible && this.editor.layoutContentWidget(this);
      }));
      let u2 = () => {
        if (!this.domNodes) return;
        let e3 = this.editor.getOption(50), t3 = this.domNodes.element;
        t3.style.fontSize = `${e3.fontSize}px`, t3.style.lineHeight = `${e3.lineHeight / e3.fontSize}`, t3.style.setProperty(`--vscode-parameterHintsWidget-editorFontFamily`, e3.fontFamily), t3.style.setProperty(`--vscode-parameterHintsWidget-editorFontFamilyDefault`, De.fontFamily);
      };
      u2(), this._register(ze.chain(this.editor.onDidChangeConfiguration.bind(this.editor), (e3) => e3.filter((e4) => e4.hasChanged(50)))(u2)), this._register(this.editor.onDidLayoutChange((e3) => this.updateMaxHeight())), this.updateMaxHeight();
    }
    show() {
      this.visible || (this.domNodes || this.createParameterHintDOMNodes(), this.keyVisible.set(true), this.visible = true, setTimeout(() => {
        var _a3;
        (_a3 = this.domNodes) == null ? void 0 : _a3.element.classList.add(`visible`);
      }, 100), this.editor.layoutContentWidget(this));
    }
    hide() {
      var _a3;
      this.renderDisposeables.clear(), this.visible && (this.keyVisible.reset(), this.visible = false, this.announcedLabel = null, (_a3 = this.domNodes) == null ? void 0 : _a3.element.classList.remove(`visible`), this.editor.layoutContentWidget(this));
    }
    getPosition() {
      return this.visible ? {
        position: this.editor.getPosition(),
        preference: [
          1,
          2
        ]
      } : null;
    }
    render(e2) {
      if (this.renderDisposeables.clear(), !this.domNodes) return;
      let t2 = e2.signatures.length > 1;
      this.domNodes.element.classList.toggle(`multiple`, t2), this.keyMultipleSignatures.set(t2), this.domNodes.signature.innerText = ``, this.domNodes.docs.innerText = ``;
      let n2 = e2.signatures[e2.activeSignature];
      if (!n2) return;
      let r2 = B(this.domNodes.signature, Lj(`.code`)), i2 = n2.parameters.length > 0, a2 = n2.activeParameter ?? e2.activeParameter;
      if (i2) this.renderParameters(r2, n2, a2);
      else {
        let e3 = B(r2, Lj(`span`));
        e3.textContent = n2.label;
      }
      let o2 = n2.parameters[a2];
      if (o2 == null ? void 0 : o2.documentation) {
        let e3 = Lj(`span.documentation`);
        if (typeof o2.documentation == `string`) e3.textContent = o2.documentation;
        else {
          let t3 = this.renderMarkdownDocs(o2.documentation);
          e3.appendChild(t3.element);
        }
        B(this.domNodes.docs, Lj(`p`, {}, e3));
      }
      if (n2.documentation !== void 0) if (typeof n2.documentation == `string`) B(this.domNodes.docs, Lj(`p`, {}, n2.documentation));
      else {
        let e3 = this.renderMarkdownDocs(n2.documentation);
        B(this.domNodes.docs, e3.element);
      }
      let s2 = this.hasDocs(n2, o2);
      if (this.domNodes.signature.classList.toggle(`has-docs`, s2), this.domNodes.docs.classList.toggle(`empty`, !s2), this.domNodes.overloads.textContent = String(e2.activeSignature + 1).padStart(e2.signatures.length.toString().length, `0`) + `/` + e2.signatures.length, o2) {
        let e3 = ``, t3 = n2.parameters[a2];
        e3 = Array.isArray(t3.label) ? n2.label.substring(t3.label[0], t3.label[1]) : t3.label, t3.documentation && (e3 += typeof t3.documentation == `string` ? `, ${t3.documentation}` : `, ${t3.documentation.value}`), n2.documentation && (e3 += typeof n2.documentation == `string` ? `, ${n2.documentation}` : `, ${n2.documentation.value}`), this.announcedLabel !== e3 && (Ci(U(`hint`, `{0}, hint`, e3)), this.announcedLabel = e3);
      }
      this.editor.layoutContentWidget(this), this.domNodes.scrollbar.scanDomNode();
    }
    renderMarkdownDocs(e2) {
      let t2 = new Fr(), n2 = this.renderDisposeables.add(this.markdownRenderer.render(e2, {
        asyncRenderCallback: () => {
          var _a3;
          (_a3 = this.domNodes) == null ? void 0 : _a3.scrollbar.scanDomNode();
        }
      }));
      n2.element.classList.add(`markdown-docs`);
      let r2 = t2.elapsed();
      return r2 > 300 && this.telemetryService.publicLog2(`parameterHints.parseMarkdown`, {
        renderDuration: r2
      }), n2;
    }
    hasDocs(e2, t2) {
      return !!(t2 && typeof t2.documentation == `string` && Ai(t2.documentation).length > 0 || t2 && typeof t2.documentation == `object` && Ai(t2.documentation).value.length > 0 || e2.documentation && typeof e2.documentation == `string` && Ai(e2.documentation).length > 0 || e2.documentation && typeof e2.documentation == `object` && Ai(e2.documentation.value).length > 0);
    }
    renderParameters(e2, t2, n2) {
      let [r2, i2] = this.getParameterLabelOffsets(t2, n2), a2 = document.createElement(`span`);
      a2.textContent = t2.label.substring(0, r2);
      let o2 = document.createElement(`span`);
      o2.textContent = t2.label.substring(r2, i2), o2.className = `parameter active`;
      let s2 = document.createElement(`span`);
      s2.textContent = t2.label.substring(i2), B(e2, a2, o2, s2);
    }
    getParameterLabelOffsets(e2, t2) {
      let n2 = e2.parameters[t2];
      if (n2) {
        if (Array.isArray(n2.label)) return n2.label;
        if (n2.label.length) {
          let t3 = RegExp(`(\\W|^)${vo(n2.label)}(?=\\W|$)`, `g`);
          t3.test(e2.label);
          let r2 = t3.lastIndex - n2.label.length;
          return r2 >= 0 ? [
            r2,
            t3.lastIndex
          ] : [
            0,
            0
          ];
        } else return [
          0,
          0
        ];
      } else return [
        0,
        0
      ];
    }
    next() {
      this.editor.focus(), this.model.next();
    }
    previous() {
      this.editor.focus(), this.model.previous();
    }
    getDomNode() {
      return this.domNodes || this.createParameterHintDOMNodes(), this.domNodes.element;
    }
    getId() {
      return Ij.ID;
    }
    updateMaxHeight() {
      if (!this.domNodes) return;
      let e2 = Math.max(this.editor.getLayoutInfo().height / 4, 250), t2 = `${e2}px`;
      this.domNodes.element.style.maxHeight = t2;
      let n2 = this.domNodes.element.getElementsByClassName(`phwrapper`);
      n2.length && (n2[0].style.maxHeight = t2);
    }
  }, Ij = _gb, _gb.ID = `editor.widget.parameterHintsWidget`, _gb);
  Bj = Ij = Pj([
    Fj(2, O),
    Fj(3, It),
    Fj(4, Dt),
    Fj(5, Ht)
  ], Bj), q(`editorHoverWidget.highlightForeground`, yc, U(`editorHoverWidgetHighlightForeground`, `Foreground color of the active item in the parameter hint.`));
  var Vj = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Hj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Uj;
  let Wj = (_hb = class extends S {
    static get(e2) {
      return e2.getContribution(Uj.ID);
    }
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.model = this._register(new Mj(e2, n2.signatureHelpProvider)), this._register(this.model.onChangedHints((e3) => {
        var _a3;
        e3 ? (this.widget.value.show(), this.widget.value.render(e3)) : (_a3 = this.widget.rawValue) == null ? void 0 : _a3.hide();
      })), this.widget = new yn(() => this._register(t2.createInstance(Bj, this.editor, this.model)));
    }
    cancel() {
      this.model.cancel();
    }
    previous() {
      var _a3;
      (_a3 = this.widget.rawValue) == null ? void 0 : _a3.previous();
    }
    next() {
      var _a3;
      (_a3 = this.widget.rawValue) == null ? void 0 : _a3.next();
    }
    trigger(e2) {
      this.model.trigger(e2, 0);
    }
  }, Uj = _hb, _hb.ID = `editor.controller.parameterHints`, _hb);
  Wj = Uj = Vj([
    Hj(1, k),
    Hj(2, A)
  ], Wj);
  var Gj = class extends w {
    constructor() {
      super({
        id: `editor.action.triggerParameterHints`,
        label: U(`parameterHints.trigger.label`, `Trigger Parameter Hints`),
        alias: `Trigger Parameter Hints`,
        precondition: T.hasSignatureHelpProvider,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 3082,
          weight: 100
        }
      });
    }
    run(e2, t2) {
      let n2 = Wj.get(t2);
      n2 == null ? void 0 : n2.trigger({
        triggerKind: Or.Invoke
      });
    }
  };
  X(Wj.ID, Wj, 2), J(Gj);
  const Kj = 175, qj = Ae.bindToContribution(Wj.get);
  Y(new qj({
    id: `closeParameterHints`,
    precondition: kj.Visible,
    handler: (e2) => e2.cancel(),
    kbOpts: {
      weight: Kj,
      kbExpr: T.focus,
      primary: 9,
      secondary: [
        1033
      ]
    }
  })), Y(new qj({
    id: `showPrevParameterHint`,
    precondition: b.and(kj.Visible, kj.MultipleSignatures),
    handler: (e2) => e2.previous(),
    kbOpts: {
      weight: Kj,
      kbExpr: T.focus,
      primary: 16,
      secondary: [
        528
      ],
      mac: {
        primary: 16,
        secondary: [
          528,
          302
        ]
      }
    }
  })), Y(new qj({
    id: `showNextParameterHint`,
    precondition: b.and(kj.Visible, kj.MultipleSignatures),
    handler: (e2) => e2.next(),
    kbOpts: {
      weight: Kj,
      kbExpr: T.focus,
      primary: 18,
      secondary: [
        530
      ],
      mac: {
        primary: 18,
        secondary: [
          530,
          300
        ]
      }
    }
  }));
  var Jj = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, Yj = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, Xj = class {
    constructor(e2) {
      this.instantiationService = e2;
    }
    init(...e2) {
    }
  };
  function Zj(e2, t2) {
    return class extends t2 {
      constructor() {
        super(...arguments), this._autorun = void 0;
      }
      init(...t3) {
        this._autorun = Fi((n2, r2) => {
          let i2 = al(e2(), n2);
          r2.add(this.instantiationService.createInstance(i2, ...t3));
        });
      }
      dispose() {
        var _a3;
        (_a3 = this._autorun) == null ? void 0 : _a3.dispose();
      }
    };
  }
  function Qj(e2) {
    return Rs() ? Zj(e2, $j) : e2();
  }
  let $j = class extends Xj {
    constructor(e2, t2) {
      super(t2), this.init(e2);
    }
  };
  $j = Jj([
    Yj(1, k)
  ], $j), X(nj.ID, Qj(() => nj), 0), q(`editor.placeholder.foreground`, ns, U(`placeholderForeground`, `Foreground color of the placeholder text in the editor.`));
  var eM = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, tM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const nM = false, rM = new F(`renameInputVisible`, false, U(`renameInputVisible`, `Whether the rename input widget is visible`)), iM = new F(`renameInputFocused`, false, U(`renameInputFocused`, `Whether the rename input widget is focused`));
  let aM = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this._editor = e2, this._acceptKeybindings = t2, this._themeService = n2, this._keybindingService = r2, this._logService = a2, this.allowEditorOverflow = true, this._disposables = new C(), this._visibleContextKey = rM.bindTo(i2), this._isEditingRenameCandidate = false, this._nRenameSuggestionsInvocations = 0, this._hadAutomaticRenameSuggestionsInvocation = false, this._candidates = /* @__PURE__ */ new Set(), this._beforeFirstInputFieldEditSW = new Fr(), this._inputWithButton = new sM(), this._disposables.add(this._inputWithButton), this._editor.addContentWidget(this), this._disposables.add(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(50) && this._updateFont();
      })), this._disposables.add(n2.onDidColorThemeChange(this._updateStyles, this));
    }
    dispose() {
      this._disposables.dispose(), this._editor.removeContentWidget(this);
    }
    getId() {
      return `__renameInputWidget`;
    }
    getDomNode() {
      return this._domNode || (this._domNode = document.createElement(`div`), this._domNode.className = `monaco-editor rename-box`, this._domNode.appendChild(this._inputWithButton.domNode), this._renameCandidateListView = this._disposables.add(new oM(this._domNode, {
        fontInfo: this._editor.getOption(50),
        onFocusChange: (e2) => {
          this._inputWithButton.input.value = e2, this._isEditingRenameCandidate = false;
        },
        onSelectionChange: () => {
          this._isEditingRenameCandidate = false, this.acceptInput(false);
        }
      })), this._disposables.add(this._inputWithButton.onDidInputChange(() => {
        var _a3, _b3, _c3;
        ((_a3 = this._renameCandidateListView) == null ? void 0 : _a3.focusedCandidate) !== void 0 && (this._isEditingRenameCandidate = true), this._timeBeforeFirstInputFieldEdit ?? (this._timeBeforeFirstInputFieldEdit = this._beforeFirstInputFieldEditSW.elapsed()), ((_b3 = this._renameCandidateProvidersCts) == null ? void 0 : _b3.token.isCancellationRequested) === false && this._renameCandidateProvidersCts.cancel(), (_c3 = this._renameCandidateListView) == null ? void 0 : _c3.clearFocus();
      })), this._label = document.createElement(`div`), this._label.className = `rename-label`, this._domNode.appendChild(this._label), this._updateFont(), this._updateStyles(this._themeService.getColorTheme())), this._domNode;
    }
    _updateStyles(e2) {
      if (!this._domNode) return;
      let t2 = e2.getColor(eu), n2 = e2.getColor(Ql);
      this._domNode.style.backgroundColor = String(e2.getColor(po) ?? ``), this._domNode.style.boxShadow = t2 ? ` 0 0 8px 2px ${t2}` : ``, this._domNode.style.border = n2 ? `1px solid ${n2}` : ``, this._domNode.style.color = String(e2.getColor(vs) ?? ``);
      let r2 = e2.getColor(_s);
      this._inputWithButton.domNode.style.backgroundColor = String(e2.getColor(gs) ?? ``), this._inputWithButton.input.style.backgroundColor = String(e2.getColor(gs) ?? ``), this._inputWithButton.domNode.style.borderWidth = r2 ? `1px` : `0px`, this._inputWithButton.domNode.style.borderStyle = r2 ? `solid` : `none`, this._inputWithButton.domNode.style.borderColor = (r2 == null ? void 0 : r2.toString()) ?? `none`;
    }
    _updateFont() {
      if (this._domNode === void 0) return;
      V(this._label !== void 0, `RenameWidget#_updateFont: _label must not be undefined given _domNode is defined`), this._editor.applyFontInfo(this._inputWithButton.input);
      let e2 = this._editor.getOption(50);
      this._label.style.fontSize = `${this._computeLabelFontSize(e2.fontSize)}px`;
    }
    _computeLabelFontSize(e2) {
      return e2 * 0.8;
    }
    getPosition() {
      if (!this._visible || !this._editor.hasModel() || !this._editor.getDomNode()) return null;
      let e2 = Io(this.getDomNode().ownerDocument.body), t2 = Vo(this._editor.getDomNode()), n2 = this._getTopForPosition();
      this._nPxAvailableAbove = n2 + t2.top, this._nPxAvailableBelow = e2.height - this._nPxAvailableAbove;
      let r2 = this._editor.getOption(67), { totalHeight: i2 } = cM.getLayoutInfo({
        lineHeight: r2
      }), a2 = this._nPxAvailableBelow > i2 * 6 ? [
        2,
        1
      ] : [
        1,
        2
      ];
      return {
        position: this._position,
        preference: a2
      };
    }
    beforeRender() {
      var _a3, _b3;
      let [e2, t2] = this._acceptKeybindings;
      return this._label.innerText = U({
        key: `label`,
        comment: [
          `placeholders are keybindings, e.g "F2 to Rename, Shift+F2 to Preview"`
        ]
      }, `{0} to Rename, {1} to Preview`, (_a3 = this._keybindingService.lookupKeybinding(e2)) == null ? void 0 : _a3.getLabel(), (_b3 = this._keybindingService.lookupKeybinding(t2)) == null ? void 0 : _b3.getLabel()), this._domNode.style.minWidth = `200px`, null;
    }
    afterRender(e2) {
      if (e2 === null) {
        this.cancelInput(true, `afterRender (because position is null)`);
        return;
      }
      if (!this._editor.hasModel() || !this._editor.getDomNode()) return;
      V(this._renameCandidateListView), V(this._nPxAvailableAbove !== void 0), V(this._nPxAvailableBelow !== void 0);
      let t2 = $o(this._inputWithButton.domNode), n2 = $o(this._label), r2;
      r2 = e2 === 2 ? this._nPxAvailableBelow : this._nPxAvailableAbove, this._renameCandidateListView.layout({
        height: r2 - n2 - t2,
        width: es(this._inputWithButton.domNode)
      });
    }
    acceptInput(e2) {
      var _a3;
      this._trace(`invoking acceptInput`), (_a3 = this._currentAcceptInput) == null ? void 0 : _a3.call(this, e2);
    }
    cancelInput(e2, t2) {
      var _a3;
      (_a3 = this._currentCancelInput) == null ? void 0 : _a3.call(this, e2);
    }
    focusNextRenameSuggestion() {
      var _a3;
      ((_a3 = this._renameCandidateListView) == null ? void 0 : _a3.focusNext()) || (this._inputWithButton.input.value = this._currentName);
    }
    focusPreviousRenameSuggestion() {
      var _a3;
      ((_a3 = this._renameCandidateListView) == null ? void 0 : _a3.focusPrevious()) || (this._inputWithButton.input.value = this._currentName);
    }
    getInput(e2, t2, n2, r2, i2) {
      let { start: a2, end: o2 } = this._getSelection(e2, t2);
      this._renameCts = i2;
      let s2 = new C();
      this._nRenameSuggestionsInvocations = 0, this._hadAutomaticRenameSuggestionsInvocation = false, r2 === void 0 ? this._inputWithButton.button.style.display = `none` : (this._inputWithButton.button.style.display = `flex`, this._requestRenameCandidatesOnce = r2, this._requestRenameCandidates(t2, false), s2.add(z(this._inputWithButton.button, `click`, () => this._requestRenameCandidates(t2, true))), s2.add(z(this._inputWithButton.button, He.KEY_DOWN, (e3) => {
        let n3 = new Nr(e3);
        (n3.equals(3) || n3.equals(10)) && (n3.stopPropagation(), n3.preventDefault(), this._requestRenameCandidates(t2, true));
      }))), this._isEditingRenameCandidate = false, this._domNode.classList.toggle(`preview`, n2), this._position = new N(e2.startLineNumber, e2.startColumn), this._currentName = t2, this._inputWithButton.input.value = t2, this._inputWithButton.input.setAttribute(`selectionStart`, a2.toString()), this._inputWithButton.input.setAttribute(`selectionEnd`, o2.toString()), this._inputWithButton.input.size = Math.max((e2.endColumn - e2.startColumn) * 1.1, 20), this._beforeFirstInputFieldEditSW.reset(), s2.add(Hl(() => {
        this._renameCts = void 0, i2.dispose(true);
      })), s2.add(Hl(() => {
        this._renameCandidateProvidersCts !== void 0 && (this._renameCandidateProvidersCts.dispose(true), this._renameCandidateProvidersCts = void 0);
      })), s2.add(Hl(() => this._candidates.clear()));
      let c2 = new _e();
      return c2.p.finally(() => {
        s2.dispose(), this._hide();
      }), this._currentCancelInput = (e3) => {
        var _a3;
        return this._trace(`invoking _currentCancelInput`), this._currentAcceptInput = void 0, this._currentCancelInput = void 0, (_a3 = this._renameCandidateListView) == null ? void 0 : _a3.clearCandidates(), c2.complete(e3), true;
      }, this._currentAcceptInput = (e3) => {
        this._trace(`invoking _currentAcceptInput`), V(this._renameCandidateListView !== void 0);
        let r3 = this._renameCandidateListView.nCandidates, i3, a3, o3 = this._renameCandidateListView.focusedCandidate;
        if (o3 === void 0 ? (this._trace(`using new name from inputField`), i3 = this._inputWithButton.input.value, a3 = this._isEditingRenameCandidate ? {
          k: `userEditedRenameSuggestion`
        } : {
          k: `inputField`
        }) : (this._trace(`using new name from renameSuggestion`), i3 = o3, a3 = {
          k: `renameSuggestion`
        }), i3 === t2 || i3.trim().length === 0) {
          this.cancelInput(true, `_currentAcceptInput (because newName === value || newName.trim().length === 0)`);
          return;
        }
        this._currentAcceptInput = void 0, this._currentCancelInput = void 0, this._renameCandidateListView.clearCandidates(), c2.complete({
          newName: i3,
          wantsPreview: n2 && e3,
          stats: {
            source: a3,
            nRenameSuggestions: r3,
            timeBeforeFirstInputFieldEdit: this._timeBeforeFirstInputFieldEdit,
            nRenameSuggestionsInvocations: this._nRenameSuggestionsInvocations,
            hadAutomaticRenameSuggestionsInvocation: this._hadAutomaticRenameSuggestionsInvocation
          }
        });
      }, s2.add(i2.token.onCancellationRequested(() => this.cancelInput(true, `cts.token.onCancellationRequested`))), nM || s2.add(this._editor.onDidBlurEditorWidget(() => {
        var _a3;
        return this.cancelInput(!((_a3 = this._domNode) == null ? void 0 : _a3.ownerDocument.hasFocus()), `editor.onDidBlurEditorWidget`);
      })), this._show(), c2.p;
    }
    _requestRenameCandidates(e2, t2) {
      if (this._requestRenameCandidatesOnce !== void 0 && (this._renameCandidateProvidersCts !== void 0 && this._renameCandidateProvidersCts.dispose(true), V(this._renameCts), this._inputWithButton.buttonState !== `stop`)) {
        this._renameCandidateProvidersCts = new g();
        let n2 = t2 ? Hn.Invoke : Hn.Automatic, r2 = this._requestRenameCandidatesOnce(n2, this._renameCandidateProvidersCts.token);
        if (r2.length === 0) {
          this._inputWithButton.setSparkleButton();
          return;
        }
        t2 || (this._hadAutomaticRenameSuggestionsInvocation = true), this._nRenameSuggestionsInvocations += 1, this._inputWithButton.setStopButton(), this._updateRenameCandidates(r2, e2, this._renameCts.token);
      }
    }
    _getSelection(e2, t2) {
      V(this._editor.hasModel());
      let n2 = this._editor.getSelection(), r2 = 0, i2 = t2.length;
      return !P.isEmpty(n2) && !P.spansMultipleLines(n2) && P.containsRange(e2, n2) && (r2 = Math.max(0, n2.startColumn - e2.startColumn), i2 = Math.min(e2.endColumn, n2.endColumn) - e2.startColumn), {
        start: r2,
        end: i2
      };
    }
    _show() {
      this._trace(`invoking _show`), this._editor.revealLineInCenterIfOutsideViewport(this._position.lineNumber, 0), this._visible = true, this._visibleContextKey.set(true), this._editor.layoutContentWidget(this), setTimeout(() => {
        this._inputWithButton.input.focus(), this._inputWithButton.input.setSelectionRange(parseInt(this._inputWithButton.input.getAttribute(`selectionStart`)), parseInt(this._inputWithButton.input.getAttribute(`selectionEnd`)));
      }, 100);
    }
    async _updateRenameCandidates(e2, t2, n2) {
      let r2 = (...e3) => this._trace(`_updateRenameCandidates`, ...e3);
      r2(`start`);
      let i2 = await nl(Promise.allSettled(e2), n2);
      if (this._inputWithButton.setSparkleButton(), i2 === void 0) {
        r2(`returning early - received updateRenameCandidates results - undefined`);
        return;
      }
      let a2 = i2.flatMap((e3) => e3.status === `fulfilled` && Ts(e3.value) ? e3.value : []);
      r2(`received updateRenameCandidates results - total (unfiltered) ${a2.length} candidates.`);
      let o2 = za(a2, (e3) => e3.newSymbolName);
      r2(`distinct candidates - ${o2.length} candidates.`);
      let s2 = o2.filter(({ newSymbolName: e3 }) => e3.trim().length > 0 && e3 !== this._inputWithButton.input.value && e3 !== t2 && !this._candidates.has(e3));
      if (r2(`valid distinct candidates - ${a2.length} candidates.`), s2.forEach((e3) => this._candidates.add(e3.newSymbolName)), s2.length < 1) {
        r2(`returning early - no valid distinct candidates`);
        return;
      }
      r2(`setting candidates`), this._renameCandidateListView.setCandidates(s2), r2(`asking editor to re-layout`), this._editor.layoutContentWidget(this);
    }
    _hide() {
      this._trace(`invoked _hide`), this._visible = false, this._visibleContextKey.reset(), this._editor.layoutContentWidget(this);
    }
    _getTopForPosition() {
      let e2 = this._editor.getVisibleRanges(), t2;
      return e2.length > 0 ? t2 = e2[0].startLineNumber : (this._logService.warn(`RenameWidget#_getTopForPosition: this should not happen - visibleRanges is empty`), t2 = Math.max(1, this._position.lineNumber - 5)), this._editor.getTopForLineNumber(this._position.lineNumber) - this._editor.getTopForLineNumber(t2);
    }
    _trace(...e2) {
      this._logService.trace(`RenameWidget`, ...e2);
    }
  };
  aM = eM([
    tM(2, Gt),
    tM(3, Ct),
    tM(4, O),
    tM(5, kt)
  ], aM);
  var oM = class e2 {
    constructor(t2, n2) {
      this._disposables = new C(), this._availableHeight = 0, this._minimumWidth = 0, this._lineHeight = n2.fontInfo.lineHeight, this._typicalHalfwidthCharacterWidth = n2.fontInfo.typicalHalfwidthCharacterWidth, this._listContainer = document.createElement(`div`), this._listContainer.className = `rename-box rename-candidate-list-container`, t2.appendChild(this._listContainer), this._listWidget = e2._createListWidget(this._listContainer, this._candidateViewHeight, n2.fontInfo), this._listWidget.onDidChangeFocus((e3) => {
        e3.elements.length === 1 && n2.onFocusChange(e3.elements[0].newSymbolName);
      }, this._disposables), this._listWidget.onDidChangeSelection((e3) => {
        e3.elements.length === 1 && n2.onSelectionChange();
      }, this._disposables), this._disposables.add(this._listWidget.onDidBlur((e3) => {
        this._listWidget.setFocus([]);
      })), this._listWidget.style(qo({
        listInactiveFocusForeground: $c,
        listInactiveFocusBackground: Qc
      }));
    }
    dispose() {
      this._listWidget.dispose(), this._disposables.dispose();
    }
    layout({ height: e3, width: t2 }) {
      this._availableHeight = e3, this._minimumWidth = t2;
    }
    setCandidates(e3) {
      this._listWidget.splice(0, 0, e3);
      let t2 = this._pickListHeight(this._listWidget.length), n2 = this._pickListWidth(e3);
      this._listWidget.layout(t2, n2), this._listContainer.style.height = `${t2}px`, this._listContainer.style.width = `${n2}px`, Nl(U(`renameSuggestionsReceivedAria`, `Received {0} rename suggestions`, e3.length));
    }
    clearCandidates() {
      this._listContainer.style.height = `0px`, this._listContainer.style.width = `0px`, this._listWidget.splice(0, this._listWidget.length, []);
    }
    get nCandidates() {
      return this._listWidget.length;
    }
    get focusedCandidate() {
      if (this._listWidget.length === 0) return;
      let e3 = this._listWidget.getSelectedElements()[0];
      if (e3 !== void 0) return e3.newSymbolName;
      let t2 = this._listWidget.getFocusedElements()[0];
      if (t2 !== void 0) return t2.newSymbolName;
    }
    focusNext() {
      if (this._listWidget.length === 0) return false;
      let e3 = this._listWidget.getFocus();
      if (e3.length === 0) return this._listWidget.focusFirst(), this._listWidget.reveal(0), true;
      if (e3[0] === this._listWidget.length - 1) return this._listWidget.setFocus([]), this._listWidget.reveal(0), false;
      {
        this._listWidget.focusNext();
        let e4 = this._listWidget.getFocus()[0];
        return this._listWidget.reveal(e4), true;
      }
    }
    focusPrevious() {
      if (this._listWidget.length === 0) return false;
      let e3 = this._listWidget.getFocus();
      if (e3.length === 0) {
        this._listWidget.focusLast();
        let e4 = this._listWidget.getFocus()[0];
        return this._listWidget.reveal(e4), true;
      } else if (e3[0] === 0) return this._listWidget.setFocus([]), false;
      else {
        this._listWidget.focusPrevious();
        let e4 = this._listWidget.getFocus()[0];
        return this._listWidget.reveal(e4), true;
      }
    }
    clearFocus() {
      this._listWidget.setFocus([]);
    }
    get _candidateViewHeight() {
      let { totalHeight: e3 } = cM.getLayoutInfo({
        lineHeight: this._lineHeight
      });
      return e3;
    }
    _pickListHeight(e3) {
      let t2 = this._candidateViewHeight * e3, n2 = 7, r2 = Math.min(t2, this._availableHeight, this._candidateViewHeight * n2);
      return r2;
    }
    _pickListWidth(e3) {
      let t2 = Math.ceil(Math.max(...e3.map((e4) => e4.newSymbolName.length)) * this._typicalHalfwidthCharacterWidth), n2 = Math.max(this._minimumWidth, 25 + t2 + 10);
      return n2;
    }
    static _createListWidget(e3, t2, n2) {
      let r2 = new class {
        getTemplateId(e4) {
          return `candidate`;
        }
        getHeight(e4) {
          return t2;
        }
      }(), i2 = new class {
        constructor() {
          this.templateId = `candidate`;
        }
        renderTemplate(e4) {
          return new cM(e4, n2);
        }
        renderElement(e4, t3, n3) {
          n3.populate(e4);
        }
        disposeTemplate(e4) {
          e4.dispose();
        }
      }();
      return new Tn(`NewSymbolNameCandidates`, e3, r2, [
        i2
      ], {
        keyboardSupport: false,
        mouseSupport: true,
        multipleSelectionSupport: false
      });
    }
  }, sM = class {
    constructor() {
      this._onDidInputChange = new E(), this.onDidInputChange = this._onDidInputChange.event, this._disposables = new C();
    }
    get domNode() {
      return this._domNode || (this._domNode = document.createElement(`div`), this._domNode.className = `rename-input-with-button`, this._domNode.style.display = `flex`, this._domNode.style.flexDirection = `row`, this._domNode.style.alignItems = `center`, this._inputNode = document.createElement(`input`), this._inputNode.className = `rename-input`, this._inputNode.type = `text`, this._inputNode.style.border = `none`, this._inputNode.setAttribute(`aria-label`, U(`renameAriaLabel`, `Rename input. Type new name and press Enter to commit.`)), this._domNode.appendChild(this._inputNode), this._buttonNode = document.createElement(`div`), this._buttonNode.className = `rename-suggestions-button`, this._buttonNode.setAttribute(`tabindex`, `0`), this._buttonGenHoverText = U(`generateRenameSuggestionsButton`, `Generate new name suggestions`), this._buttonCancelHoverText = U(`cancelRenameSuggestionsButton`, `Cancel`), this._buttonHover = Fo().setupManagedHover(Bo(`element`), this._buttonNode, this._buttonGenHoverText), this._disposables.add(this._buttonHover), this._domNode.appendChild(this._buttonNode), this._disposables.add(z(this.input, He.INPUT, () => this._onDidInputChange.fire())), this._disposables.add(z(this.input, He.KEY_DOWN, (e2) => {
        let t2 = new Nr(e2);
        (t2.keyCode === 15 || t2.keyCode === 17) && this._onDidInputChange.fire();
      })), this._disposables.add(z(this.input, He.CLICK, () => this._onDidInputChange.fire())), this._disposables.add(z(this.input, He.FOCUS, () => {
        this.domNode.style.outlineWidth = `1px`, this.domNode.style.outlineStyle = `solid`, this.domNode.style.outlineOffset = `-1px`, this.domNode.style.outlineColor = `var(--vscode-focusBorder)`;
      })), this._disposables.add(z(this.input, He.BLUR, () => {
        this.domNode.style.outline = `none`;
      }))), this._domNode;
    }
    get input() {
      return V(this._inputNode), this._inputNode;
    }
    get button() {
      return V(this._buttonNode), this._buttonNode;
    }
    get buttonState() {
      return this._buttonState;
    }
    setSparkleButton() {
      var _a3;
      this._buttonState = `sparkle`, this._sparkleIcon ?? (this._sparkleIcon = gl(_.sparkle)), Ui(this.button), this.button.appendChild(this._sparkleIcon), this.button.setAttribute(`aria-label`, `Generating new name suggestions`), (_a3 = this._buttonHover) == null ? void 0 : _a3.update(this._buttonGenHoverText), this.input.focus();
    }
    setStopButton() {
      var _a3;
      this._buttonState = `stop`, this._stopIcon ?? (this._stopIcon = gl(_.primitiveSquare)), Ui(this.button), this.button.appendChild(this._stopIcon), this.button.setAttribute(`aria-label`, `Cancel generating new name suggestions`), (_a3 = this._buttonHover) == null ? void 0 : _a3.update(this._buttonCancelHoverText), this.input.focus();
    }
    dispose() {
      this._disposables.dispose();
    }
  }, cM = (_ib = class {
    constructor(t2, n2) {
      this._domNode = document.createElement(`div`), this._domNode.className = `rename-box rename-candidate`, this._domNode.style.display = `flex`, this._domNode.style.columnGap = `5px`, this._domNode.style.alignItems = `center`, this._domNode.style.height = `${n2.lineHeight}px`, this._domNode.style.padding = `${_ib._PADDING}px`;
      let r2 = document.createElement(`div`);
      r2.style.display = `flex`, r2.style.alignItems = `center`, r2.style.width = r2.style.height = `${n2.lineHeight * 0.8}px`, this._domNode.appendChild(r2), this._icon = gl(_.sparkle), this._icon.style.display = `none`, r2.appendChild(this._icon), this._label = document.createElement(`div`), Ei(this._label, n2), this._domNode.appendChild(this._label), t2.appendChild(this._domNode);
    }
    populate(e2) {
      this._updateIcon(e2), this._updateLabel(e2);
    }
    _updateIcon(e2) {
      var _a3;
      let t2 = !!((_a3 = e2.tags) == null ? void 0 : _a3.includes(Vn.AIGenerated));
      this._icon.style.display = t2 ? `inherit` : `none`;
    }
    _updateLabel(e2) {
      this._label.innerText = e2.newSymbolName;
    }
    static getLayoutInfo({ lineHeight: t2 }) {
      let n2 = t2 + _ib._PADDING * 2;
      return {
        totalHeight: n2
      };
    }
    dispose() {
    }
  }, _ib._PADDING = 2, _ib), lM = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, uM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, dM, fM = class {
    constructor(e2, t2, n2) {
      this.model = e2, this.position = t2, this._providerRenameIdx = 0, this._providers = n2.ordered(e2);
    }
    hasProvider() {
      return this._providers.length > 0;
    }
    async resolveRenameLocation(e2) {
      let t2 = [];
      for (this._providerRenameIdx = 0; this._providerRenameIdx < this._providers.length; this._providerRenameIdx++) {
        let n3 = this._providers[this._providerRenameIdx];
        if (!n3.resolveRenameLocation) break;
        let r2 = await n3.resolveRenameLocation(this.model, this.position, e2);
        if (r2) {
          if (r2.rejectReason) {
            t2.push(r2.rejectReason);
            continue;
          }
          return r2;
        }
      }
      this._providerRenameIdx = 0;
      let n2 = this.model.getWordAtPosition(this.position);
      return n2 ? {
        range: new P(this.position.lineNumber, n2.startColumn, this.position.lineNumber, n2.endColumn),
        text: n2.word,
        rejectReason: t2.length > 0 ? t2.join(`
`) : void 0
      } : {
        range: P.fromPositions(this.position),
        text: ``,
        rejectReason: t2.length > 0 ? t2.join(`
`) : void 0
      };
    }
    async provideRenameEdits(e2, t2) {
      return this._provideRenameEdits(e2, this._providerRenameIdx, [], t2);
    }
    async _provideRenameEdits(e2, t2, n2, r2) {
      let i2 = this._providers[t2];
      if (!i2) return {
        edits: [],
        rejectReason: n2.join(`
`)
      };
      let a2 = await i2.provideRenameEdits(this.model, this.position, e2, r2);
      if (a2) {
        if (a2.rejectReason) return this._provideRenameEdits(e2, t2 + 1, n2.concat(a2.rejectReason), r2);
      } else return this._provideRenameEdits(e2, t2 + 1, n2.concat(U(`no result`, `No result.`)), r2);
      return a2;
    }
  };
  async function pM(e2, t2, n2, r2) {
    let i2 = new fM(t2, n2, e2), a2 = await i2.resolveRenameLocation(m.None);
    return (a2 == null ? void 0 : a2.rejectReason) ? {
      edits: [],
      rejectReason: a2.rejectReason
    } : i2.provideRenameEdits(r2, m.None);
  }
  let mM = (_jb = class {
    static get(e2) {
      return e2.getContribution(dM.ID);
    }
    constructor(e2, t2, n2, r2, i2, a2, o2, s2, c2) {
      this.editor = e2, this._instaService = t2, this._notificationService = n2, this._bulkEditService = r2, this._progressService = i2, this._logService = a2, this._configService = o2, this._languageFeaturesService = s2, this._telemetryService = c2, this._disposableStore = new C(), this._cts = new g(), this._renameWidget = this._disposableStore.add(this._instaService.createInstance(aM, this.editor, [
        `acceptRenameInput`,
        `acceptRenameInputWithPreview`
      ]));
    }
    dispose() {
      this._disposableStore.dispose(), this._cts.dispose(true);
    }
    async run() {
      var _a3, _b3;
      let e2 = this._logService.trace.bind(this._logService, `[rename]`);
      if (this._cts.dispose(true), this._cts = new g(), !this.editor.hasModel()) {
        e2(`editor has no model`);
        return;
      }
      let t2 = this.editor.getPosition(), n2 = new fM(this.editor.getModel(), t2, this._languageFeaturesService.renameProvider);
      if (!n2.hasProvider()) {
        e2(`skeleton has no provider`);
        return;
      }
      let r2 = new Fe(this.editor, 5, void 0, this._cts.token), i2;
      try {
        e2(`resolving rename location`);
        let t3 = n2.resolveRenameLocation(r2.token);
        this._progressService.showWhile(t3, 250), i2 = await t3, e2(`resolved rename location`);
      } catch (n3) {
        n3 instanceof p ? e2(`resolve rename location cancelled`, JSON.stringify(n3, null, `	`)) : (e2(`resolve rename location failed`, n3 instanceof Error ? n3 : JSON.stringify(n3, null, `	`)), (typeof n3 == `string` || Js(n3)) && ((_a3 = nf.get(this.editor)) == null ? void 0 : _a3.showMessage(n3 || U(`resolveRenameLocationFailed`, `An unknown error occurred while resolving rename location`), t2)));
        return;
      } finally {
        r2.dispose();
      }
      if (!i2) {
        e2(`returning early - no loc`);
        return;
      }
      if (i2.rejectReason) {
        e2(`returning early - rejected with reason: ${i2.rejectReason}`, i2.rejectReason), (_b3 = nf.get(this.editor)) == null ? void 0 : _b3.showMessage(i2.rejectReason, t2);
        return;
      }
      if (r2.token.isCancellationRequested) {
        e2(`returning early - cts1 cancelled`);
        return;
      }
      let a2 = new Fe(this.editor, 5, i2.range, this._cts.token), o2 = this.editor.getModel(), s2 = this._languageFeaturesService.newSymbolNamesProvider.all(o2), c2 = await Promise.all(s2.map(async (e3) => [
        e3,
        await e3.supportsAutomaticNewSymbolNamesTriggerKind ?? false
      ])), l2 = (e3, t3) => {
        let n3 = c2.slice();
        return e3 === Hn.Automatic && (n3 = n3.filter(([e4, t4]) => t4)), n3.map(([n4]) => n4.provideNewSymbolNames(o2, i2.range, e3, t3));
      };
      e2(`creating rename input field and awaiting its result`);
      let u2 = this._bulkEditService.hasPreviewHandler() && this._configService.getValue(this.editor.getModel().uri, `editor.rename.enablePreview`), d2 = await this._renameWidget.getInput(i2.range, i2.text, u2, s2.length > 0 ? l2 : void 0, a2);
      if (e2(`received response from rename input field`), s2.length > 0 && this._reportTelemetry(s2.length, o2.getLanguageId(), d2), typeof d2 == `boolean`) {
        e2(`returning early - rename input field response - ${d2}`), d2 && this.editor.focus(), a2.dispose();
        return;
      }
      this.editor.focus(), e2(`requesting rename edits`);
      let f2 = nl(n2.provideRenameEdits(d2.newName, a2.token), a2.token).then(async (t3) => {
        if (!t3) {
          e2(`returning early - no rename edits result`);
          return;
        }
        if (!this.editor.hasModel()) {
          e2(`returning early - no model after rename edits are provided`);
          return;
        }
        if (t3.rejectReason) {
          e2(`returning early - rejected with reason: ${t3.rejectReason}`), this._notificationService.info(t3.rejectReason);
          return;
        }
        this.editor.setSelection(P.fromPositions(this.editor.getSelection().getPosition())), e2(`applying edits`), this._bulkEditService.apply(t3, {
          editor: this.editor,
          showPreview: d2.wantsPreview,
          label: U(`label`, `Renaming '{0}' to '{1}'`, i2 == null ? void 0 : i2.text, d2.newName),
          code: `undoredo.rename`,
          quotableLabel: U(`quotableLabel`, `Renaming {0} to {1}`, i2 == null ? void 0 : i2.text, d2.newName),
          respectAutoSaveConfig: true
        }).then((t4) => {
          e2(`edits applied`), t4.ariaSummary && Ci(U(`aria`, `Successfully renamed '{0}' to '{1}'. Summary: {2}`, i2.text, d2.newName, t4.ariaSummary));
        }).catch((t4) => {
          e2(`error when applying edits ${JSON.stringify(t4, null, `	`)}`), this._notificationService.error(U(`rename.failedApply`, `Rename failed to apply edits`)), this._logService.error(t4);
        });
      }, (t3) => {
        e2(`error when providing rename edits`, JSON.stringify(t3, null, `	`)), this._notificationService.error(U(`rename.failed`, `Rename failed to compute edits`)), this._logService.error(t3);
      }).finally(() => {
        a2.dispose();
      });
      return e2(`returning rename operation`), this._progressService.showWhile(f2, 250), f2;
    }
    acceptRenameInput(e2) {
      this._renameWidget.acceptInput(e2);
    }
    cancelRenameInput() {
      this._renameWidget.cancelInput(true, `cancelRenameInput command`);
    }
    focusNextRenameSuggestion() {
      this._renameWidget.focusNextRenameSuggestion();
    }
    focusPreviousRenameSuggestion() {
      this._renameWidget.focusPreviousRenameSuggestion();
    }
    _reportTelemetry(e2, t2, n2) {
      let r2 = typeof n2 == `boolean` ? {
        kind: `cancelled`,
        languageId: t2,
        nRenameSuggestionProviders: e2
      } : {
        kind: `accepted`,
        languageId: t2,
        nRenameSuggestionProviders: e2,
        source: n2.stats.source.k,
        nRenameSuggestions: n2.stats.nRenameSuggestions,
        timeBeforeFirstInputFieldEdit: n2.stats.timeBeforeFirstInputFieldEdit,
        wantsPreview: n2.wantsPreview,
        nRenameSuggestionsInvocations: n2.stats.nRenameSuggestionsInvocations,
        hadAutomaticRenameSuggestionsInvocation: n2.stats.hadAutomaticRenameSuggestionsInvocation
      };
      this._telemetryService.publicLog2(`renameInvokedEvent`, r2);
    }
  }, dM = _jb, _jb.ID = `editor.contrib.renameController`, _jb);
  mM = dM = lM([
    uM(1, k),
    uM(2, Ft),
    uM(3, dt),
    uM(4, yt),
    uM(5, kt),
    uM(6, Wt),
    uM(7, A),
    uM(8, Ht)
  ], mM);
  var hM = class extends w {
    constructor() {
      super({
        id: `editor.action.rename`,
        label: U(`rename.label`, `Rename Symbol`),
        alias: `Rename Symbol`,
        precondition: b.and(T.writable, T.hasRenameProvider),
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 60,
          weight: 100
        },
        contextMenuOpts: {
          group: `1_modification`,
          order: 1.1
        }
      });
    }
    runCommand(e2, t2) {
      let n2 = e2.get(pt), [r2, i2] = Array.isArray(t2) && t2 || [
        void 0,
        void 0
      ];
      return R.isUri(r2) && N.isIPosition(i2) ? n2.openCodeEditor({
        resource: r2
      }, n2.getActiveCodeEditor()).then((e3) => {
        e3 && (e3.setPosition(i2), e3.invokeWithinContext((t3) => (this.reportTelemetry(t3, e3), this.run(t3, e3))));
      }, G) : super.runCommand(e2, t2);
    }
    run(e2, t2) {
      let n2 = e2.get(kt), r2 = mM.get(t2);
      return r2 ? (n2.trace(`[RenameAction] got controller, running...`), r2.run()) : (n2.trace(`[RenameAction] returning early - controller missing`), Promise.resolve());
    }
  };
  X(mM.ID, mM, 4), J(hM);
  const gM = Ae.bindToContribution(mM.get);
  Y(new gM({
    id: `acceptRenameInput`,
    precondition: rM,
    handler: (e2) => e2.acceptRenameInput(false),
    kbOpts: {
      weight: 199,
      kbExpr: b.and(T.focus, b.not(`isComposing`)),
      primary: 3
    }
  })), Y(new gM({
    id: `acceptRenameInputWithPreview`,
    precondition: b.and(rM, b.has(`config.editor.rename.enablePreview`)),
    handler: (e2) => e2.acceptRenameInput(true),
    kbOpts: {
      weight: 199,
      kbExpr: b.and(T.focus, b.not(`isComposing`)),
      primary: 2051
    }
  })), Y(new gM({
    id: `cancelRenameInput`,
    precondition: rM,
    handler: (e2) => e2.cancelRenameInput(),
    kbOpts: {
      weight: 199,
      kbExpr: T.focus,
      primary: 9,
      secondary: [
        1033
      ]
    }
  })), K(class extends o {
    constructor() {
      super({
        id: `focusNextRenameSuggestion`,
        title: {
          ...W(`focusNextRenameSuggestion`, `Focus Next Rename Suggestion`)
        },
        precondition: rM,
        keybinding: [
          {
            primary: 18,
            weight: 199
          }
        ]
      });
    }
    run(e2) {
      let t2 = e2.get(pt).getFocusedCodeEditor();
      if (!t2) return;
      let n2 = mM.get(t2);
      n2 && n2.focusNextRenameSuggestion();
    }
  }), K(class extends o {
    constructor() {
      super({
        id: `focusPreviousRenameSuggestion`,
        title: {
          ...W(`focusPreviousRenameSuggestion`, `Focus Previous Rename Suggestion`)
        },
        precondition: rM,
        keybinding: [
          {
            primary: 16,
            weight: 199
          }
        ]
      });
    }
    run(e2) {
      let t2 = e2.get(pt).getFocusedCodeEditor();
      if (!t2) return;
      let n2 = mM.get(t2);
      n2 && n2.focusPreviousRenameSuggestion();
    }
  }), ul(`_executeDocumentRenameProvider`, function(e2, t2, n2, ...r2) {
    let [i2] = r2;
    V(typeof i2 == `string`);
    let { renameProvider: a2 } = e2.get(A);
    return pM(a2, t2, n2, i2);
  }), ul(`_executePrepareRename`, async function(e2, t2, n2) {
    let { renameProvider: r2 } = e2.get(A), i2 = new fM(t2, n2, r2), a2 = await i2.resolveRenameLocation(m.None);
    if (a2 == null ? void 0 : a2.rejectReason) throw Error(a2.rejectReason);
    return a2;
  }), cr.as(We.Configuration).registerConfiguration({
    id: `editor`,
    properties: {
      "editor.rename.enablePreview": {
        scope: 5,
        description: U(`enablePreview`, `Enable/disable the ability to preview changes before renaming`),
        default: true,
        type: `boolean`
      }
    }
  });
  var _M = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, vM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let yM = (_kb = class extends S {
    constructor(e2, t2, n2) {
      super(), this.editor = e2, this.languageConfigurationService = t2, this.editorWorkerService = n2, this.decorations = this.editor.createDecorationsCollection(), this.options = this.createOptions(e2.getOption(73)), this.computePromise = null, this.currentOccurrences = {}, this._register(e2.onDidChangeModel((t3) => {
        this.currentOccurrences = {}, this.options = this.createOptions(e2.getOption(73)), this.stop(), this.computeSectionHeaders.schedule(0);
      })), this._register(e2.onDidChangeModelLanguage((t3) => {
        this.currentOccurrences = {}, this.options = this.createOptions(e2.getOption(73)), this.stop(), this.computeSectionHeaders.schedule(0);
      })), this._register(t2.onDidChange((t3) => {
        var _a3;
        let n3 = (_a3 = this.editor.getModel()) == null ? void 0 : _a3.getLanguageId();
        n3 && t3.affects(n3) && (this.currentOccurrences = {}, this.options = this.createOptions(e2.getOption(73)), this.stop(), this.computeSectionHeaders.schedule(0));
      })), this._register(e2.onDidChangeConfiguration((t3) => {
        this.options && !t3.hasChanged(73) || (this.options = this.createOptions(e2.getOption(73)), this.updateDecorations([]), this.stop(), this.computeSectionHeaders.schedule(0));
      })), this._register(this.editor.onDidChangeModelContent((e3) => {
        this.computeSectionHeaders.schedule();
      })), this._register(e2.onDidChangeModelTokens((e3) => {
        this.computeSectionHeaders.isScheduled() || this.computeSectionHeaders.schedule(1e3);
      })), this.computeSectionHeaders = this._register(new hr(() => {
        this.findSectionHeaders();
      }, 250)), this.computeSectionHeaders.schedule(0);
    }
    createOptions(e2) {
      if (!e2 || !this.editor.hasModel()) return;
      let t2 = this.editor.getModel().getLanguageId();
      if (!t2) return;
      let n2 = this.languageConfigurationService.getLanguageConfiguration(t2).comments, r2 = this.languageConfigurationService.getLanguageConfiguration(t2).foldingRules;
      if (!(!n2 && !(r2 == null ? void 0 : r2.markers))) return {
        foldingRules: r2,
        findMarkSectionHeaders: e2.showMarkSectionHeaders,
        findRegionSectionHeaders: e2.showRegionSectionHeaders
      };
    }
    findSectionHeaders() {
      var _a3, _b3;
      if (!this.editor.hasModel() || !((_a3 = this.options) == null ? void 0 : _a3.findMarkSectionHeaders) && !((_b3 = this.options) == null ? void 0 : _b3.findRegionSectionHeaders)) return;
      let e2 = this.editor.getModel();
      if (e2.isDisposed() || e2.isTooLargeForSyncing()) return;
      let t2 = e2.getVersionId();
      this.editorWorkerService.findSectionHeaders(e2.uri, this.options).then((n2) => {
        e2.isDisposed() || e2.getVersionId() !== t2 || this.updateDecorations(n2);
      });
    }
    updateDecorations(e2) {
      let t2 = this.editor.getModel();
      t2 && (e2 = e2.filter((e3) => {
        if (!e3.shouldBeInComments) return true;
        let n3 = t2.validateRange(e3.range), r3 = t2.tokenization.getLineTokens(n3.startLineNumber), i2 = r3.findTokenIndexAtOffset(n3.startColumn - 1), a2 = r3.getStandardTokenType(i2), o2 = r3.getLanguageId(i2);
        return o2 === t2.getLanguageId() && a2 === 1;
      }));
      let n2 = Object.values(this.currentOccurrences).map((e3) => e3.decorationId), r2 = e2.map((e3) => bM(e3));
      this.editor.changeDecorations((t3) => {
        let i2 = t3.deltaDecorations(n2, r2);
        this.currentOccurrences = {};
        for (let t4 = 0, n3 = i2.length; t4 < n3; t4++) {
          let n4 = {
            sectionHeader: e2[t4],
            decorationId: i2[t4]
          };
          this.currentOccurrences[n4.decorationId] = n4;
        }
      });
    }
    stop() {
      this.computeSectionHeaders.cancel(), this.computePromise && (this.computePromise.cancel(), this.computePromise = null);
    }
    dispose() {
      super.dispose(), this.stop(), this.decorations.clear();
    }
  }, _kb.ID = `editor.sectionHeaderDetector`, _kb);
  yM = _M([
    vM(1, Tt),
    vM(2, bt)
  ], yM);
  function bM(e2) {
    return {
      range: e2.range,
      options: M.createDynamic({
        description: `section-header`,
        stickiness: 3,
        collapseOnReplaceEdit: true,
        minimap: {
          color: void 0,
          position: 1,
          sectionHeaderStyle: e2.hasSeparatorLine ? 2 : 1,
          sectionHeaderText: e2.text
        }
      })
    };
  }
  X(yM.ID, yM, 1);
  function xM(e2) {
    for (let t2 = 0, n2 = e2.length; t2 < n2; t2 += 4) {
      let n3 = e2[t2 + 0], r2 = e2[t2 + 1], i2 = e2[t2 + 2], a2 = e2[t2 + 3];
      e2[t2 + 0] = a2, e2[t2 + 1] = i2, e2[t2 + 2] = r2, e2[t2 + 3] = n3;
    }
  }
  function SM(e2) {
    let t2 = new Uint8Array(e2.buffer, e2.byteOffset, e2.length * 4);
    return Hs() || xM(t2), ii.wrap(t2);
  }
  function CM(e2) {
    let t2 = new Uint32Array(wM(e2)), n2 = 0;
    if (t2[n2++] = e2.id, e2.type === `full`) t2[n2++] = 1, t2[n2++] = e2.data.length, t2.set(e2.data, n2), n2 += e2.data.length;
    else {
      t2[n2++] = 2, t2[n2++] = e2.deltas.length;
      for (let r2 of e2.deltas) t2[n2++] = r2.start, t2[n2++] = r2.deleteCount, r2.data ? (t2[n2++] = r2.data.length, t2.set(r2.data, n2), n2 += r2.data.length) : t2[n2++] = 0;
    }
    return SM(t2);
  }
  function wM(e2) {
    let t2 = 0;
    if (t2 += 2, e2.type === `full`) t2 += 1 + e2.data.length;
    else {
      t2 += 1, t2 += 3 * e2.deltas.length;
      for (let n2 of e2.deltas) n2.data && (t2 += n2.data.length);
    }
    return t2;
  }
  function TM(e2) {
    return e2 && !!e2.data;
  }
  function EM(e2) {
    return e2 && Array.isArray(e2.edits);
  }
  var DM = class {
    constructor(e2, t2, n2) {
      this.provider = e2, this.tokens = t2, this.error = n2;
    }
  };
  function OM(e2, t2) {
    return e2.has(t2);
  }
  function kM(e2, t2) {
    let n2 = e2.orderedGroups(t2);
    return n2.length > 0 ? n2[0] : [];
  }
  async function AM(e2, t2, n2, r2, i2) {
    let a2 = kM(e2, t2), o2 = await Promise.all(a2.map(async (e3) => {
      let a3, o3 = null;
      try {
        a3 = await e3.provideDocumentSemanticTokens(t2, e3 === n2 ? r2 : null, i2);
      } catch (e4) {
        o3 = e4, a3 = null;
      }
      return (!a3 || !TM(a3) && !EM(a3)) && (a3 = null), new DM(e3, a3, o3);
    }));
    for (let e3 of o2) {
      if (e3.error) throw e3.error;
      if (e3.tokens) return e3;
    }
    return o2.length > 0 ? o2[0] : null;
  }
  function jM(e2, t2) {
    let n2 = e2.orderedGroups(t2);
    return n2.length > 0 ? n2[0] : null;
  }
  var MM = class {
    constructor(e2, t2) {
      this.provider = e2, this.tokens = t2;
    }
  };
  function NM(e2, t2) {
    return e2.has(t2);
  }
  function PM(e2, t2) {
    let n2 = e2.orderedGroups(t2);
    return n2.length > 0 ? n2[0] : [];
  }
  async function FM(e2, t2, n2, r2) {
    let i2 = PM(e2, t2), a2 = await Promise.all(i2.map(async (e3) => {
      let i3;
      try {
        i3 = await e3.provideDocumentRangeSemanticTokens(t2, n2, r2);
      } catch (e4) {
        Uc(e4), i3 = null;
      }
      return (!i3 || !TM(i3)) && (i3 = null), new MM(e3, i3);
    }));
    for (let e3 of a2) if (e3.tokens) return e3;
    return a2.length > 0 ? a2[0] : null;
  }
  y.registerCommand(`_provideDocumentSemanticTokensLegend`, async (e2, ...t2) => {
    let [n2] = t2;
    V(n2 instanceof R);
    let r2 = e2.get(Pt).getModel(n2);
    if (!r2) return;
    let { documentSemanticTokensProvider: i2 } = e2.get(A), a2 = jM(i2, r2);
    return a2 ? a2[0].getLegend() : e2.get(mt).executeCommand(`_provideDocumentRangeSemanticTokensLegend`, n2);
  }), y.registerCommand(`_provideDocumentSemanticTokens`, async (e2, ...t2) => {
    let [n2] = t2;
    V(n2 instanceof R);
    let r2 = e2.get(Pt).getModel(n2);
    if (!r2) return;
    let { documentSemanticTokensProvider: i2 } = e2.get(A);
    if (!OM(i2, r2)) return e2.get(mt).executeCommand(`_provideDocumentRangeSemanticTokens`, n2, r2.getFullModelRange());
    let a2 = await AM(i2, r2, null, null, m.None);
    if (!a2) return;
    let { provider: o2, tokens: s2 } = a2;
    if (!s2 || !TM(s2)) return;
    let c2 = CM({
      id: 0,
      type: `full`,
      data: s2.data
    });
    return s2.resultId && o2.releaseDocumentSemanticTokens(s2.resultId), c2;
  }), y.registerCommand(`_provideDocumentRangeSemanticTokensLegend`, async (e2, ...t2) => {
    let [n2, r2] = t2;
    V(n2 instanceof R);
    let i2 = e2.get(Pt).getModel(n2);
    if (!i2) return;
    let { documentRangeSemanticTokensProvider: a2 } = e2.get(A), o2 = PM(a2, i2);
    if (o2.length === 0) return;
    if (o2.length === 1) return o2[0].getLegend();
    if (!r2 || !P.isIRange(r2)) return console.warn(`provideDocumentRangeSemanticTokensLegend might be out-of-sync with provideDocumentRangeSemanticTokens unless a range argument is passed in`), o2[0].getLegend();
    let s2 = await FM(a2, i2, P.lift(r2), m.None);
    if (s2) return s2.provider.getLegend();
  }), y.registerCommand(`_provideDocumentRangeSemanticTokens`, async (e2, ...t2) => {
    let [n2, r2] = t2;
    V(n2 instanceof R), V(P.isIRange(r2));
    let i2 = e2.get(Pt).getModel(n2);
    if (!i2) return;
    let { documentRangeSemanticTokensProvider: a2 } = e2.get(A), o2 = await FM(a2, i2, P.lift(r2), m.None);
    if (!(!o2 || !o2.tokens)) return CM({
      id: 0,
      type: `full`,
      data: o2.tokens.data
    });
  });
  const IM = `editor.semanticHighlighting`;
  function LM(e2, t2, n2) {
    var _a3;
    let r2 = (_a3 = n2.getValue(IM, {
      overrideIdentifier: e2.getLanguageId(),
      resource: e2.uri
    })) == null ? void 0 : _a3.enabled;
    return typeof r2 == `boolean` ? r2 : t2.getColorTheme().semanticHighlighting;
  }
  var RM = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, zM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, BM;
  let VM = class extends S {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this._watchers = /* @__PURE__ */ Object.create(null);
      let o2 = (t3) => {
        this._watchers[t3.uri.toString()] = new HM(t3, e2, n2, i2, a2);
      }, s2 = (e3, t3) => {
        t3.dispose(), delete this._watchers[e3.uri.toString()];
      }, c2 = () => {
        for (let e3 of t2.getModels()) {
          let t3 = this._watchers[e3.uri.toString()];
          LM(e3, n2, r2) ? t3 || o2(e3) : t3 && s2(e3, t3);
        }
      };
      t2.getModels().forEach((e3) => {
        LM(e3, n2, r2) && o2(e3);
      }), this._register(t2.onModelAdded((e3) => {
        LM(e3, n2, r2) && o2(e3);
      })), this._register(t2.onModelRemoved((e3) => {
        let t3 = this._watchers[e3.uri.toString()];
        t3 && s2(e3, t3);
      })), this._register(r2.onDidChangeConfiguration((e3) => {
        e3.affectsConfiguration(IM) && c2();
      })), this._register(n2.onDidColorThemeChange(c2));
    }
    dispose() {
      for (let e2 of Object.values(this._watchers)) e2.dispose();
      super.dispose();
    }
  };
  VM = RM([
    zM(0, zt),
    zM(1, Pt),
    zM(2, Gt),
    zM(3, D),
    zM(4, Et),
    zM(5, A)
  ], VM);
  let HM = (_lb = class extends S {
    constructor(e2, t2, n2, r2, i2) {
      super(), this._semanticTokensStylingService = t2, this._isDisposed = false, this._model = e2, this._provider = i2.documentSemanticTokensProvider, this._debounceInformation = r2.for(this._provider, `DocumentSemanticTokens`, {
        min: BM.REQUEST_MIN_DELAY,
        max: BM.REQUEST_MAX_DELAY
      }), this._fetchDocumentSemanticTokens = this._register(new hr(() => this._fetchDocumentSemanticTokensNow(), BM.REQUEST_MIN_DELAY)), this._currentDocumentResponse = null, this._currentDocumentRequestCancellationTokenSource = null, this._documentProvidersChangeListeners = [], this._providersChangedDuringRequest = false, this._register(this._model.onDidChangeContent(() => {
        this._fetchDocumentSemanticTokens.isScheduled() || this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));
      })), this._register(this._model.onDidChangeAttached(() => {
        this._fetchDocumentSemanticTokens.isScheduled() || this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));
      })), this._register(this._model.onDidChangeLanguage(() => {
        this._currentDocumentResponse && (this._currentDocumentResponse.dispose(), this._currentDocumentResponse = null), this._currentDocumentRequestCancellationTokenSource && (this._currentDocumentRequestCancellationTokenSource.cancel(), this._currentDocumentRequestCancellationTokenSource = null), this._setDocumentSemanticTokens(null, null, null, []), this._fetchDocumentSemanticTokens.schedule(0);
      }));
      let a2 = () => {
        Ra(this._documentProvidersChangeListeners), this._documentProvidersChangeListeners = [];
        for (let t3 of this._provider.all(e2)) typeof t3.onDidChange == `function` && this._documentProvidersChangeListeners.push(t3.onDidChange(() => {
          if (this._currentDocumentRequestCancellationTokenSource) {
            this._providersChangedDuringRequest = true;
            return;
          }
          this._fetchDocumentSemanticTokens.schedule(0);
        }));
      };
      a2(), this._register(this._provider.onDidChange(() => {
        a2(), this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));
      })), this._register(n2.onDidColorThemeChange((e3) => {
        this._setDocumentSemanticTokens(null, null, null, []), this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));
      })), this._fetchDocumentSemanticTokens.schedule(0);
    }
    dispose() {
      this._currentDocumentResponse && (this._currentDocumentResponse.dispose(), this._currentDocumentResponse = null), this._currentDocumentRequestCancellationTokenSource && (this._currentDocumentRequestCancellationTokenSource.cancel(), this._currentDocumentRequestCancellationTokenSource = null), Ra(this._documentProvidersChangeListeners), this._documentProvidersChangeListeners = [], this._setDocumentSemanticTokens(null, null, null, []), this._isDisposed = true, super.dispose();
    }
    _fetchDocumentSemanticTokensNow() {
      if (this._currentDocumentRequestCancellationTokenSource) return;
      if (!OM(this._provider, this._model)) {
        this._currentDocumentResponse && this._model.tokenization.setSemanticTokens(null, false);
        return;
      }
      if (!this._model.isAttachedToEditor()) return;
      let e2 = new g(), t2 = this._currentDocumentResponse ? this._currentDocumentResponse.provider : null, n2 = this._currentDocumentResponse && this._currentDocumentResponse.resultId || null, r2 = AM(this._provider, this._model, t2, n2, e2.token);
      this._currentDocumentRequestCancellationTokenSource = e2, this._providersChangedDuringRequest = false;
      let i2 = [], a2 = this._model.onDidChangeContent((e3) => {
        i2.push(e3);
      }), o2 = new Fr(false);
      r2.then((e3) => {
        if (this._debounceInformation.update(this._model, o2.elapsed()), this._currentDocumentRequestCancellationTokenSource = null, a2.dispose(), !e3) this._setDocumentSemanticTokens(null, null, null, i2);
        else {
          let { provider: t3, tokens: n3 } = e3, r3 = this._semanticTokensStylingService.getStyling(t3);
          this._setDocumentSemanticTokens(t3, n3 || null, r3, i2);
        }
      }, (e3) => {
        let t3 = e3 && (Ss(e3) || typeof e3.message == `string` && e3.message.indexOf(`busy`) !== -1);
        t3 || G(e3), this._currentDocumentRequestCancellationTokenSource = null, a2.dispose(), (i2.length > 0 || this._providersChangedDuringRequest) && (this._fetchDocumentSemanticTokens.isScheduled() || this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model)));
      });
    }
    static _copy(e2, t2, n2, r2, i2) {
      i2 = Math.min(i2, n2.length - r2, e2.length - t2);
      for (let a2 = 0; a2 < i2; a2++) n2[r2 + a2] = e2[t2 + a2];
    }
    _setDocumentSemanticTokens(e2, t2, n2, r2) {
      let i2 = this._currentDocumentResponse, a2 = () => {
        (r2.length > 0 || this._providersChangedDuringRequest) && !this._fetchDocumentSemanticTokens.isScheduled() && this._fetchDocumentSemanticTokens.schedule(this._debounceInformation.get(this._model));
      };
      if (this._currentDocumentResponse && (this._currentDocumentResponse.dispose(), this._currentDocumentResponse = null), this._isDisposed) {
        e2 && t2 && e2.releaseDocumentSemanticTokens(t2.resultId);
        return;
      }
      if (!e2 || !n2) {
        this._model.tokenization.setSemanticTokens(null, false);
        return;
      }
      if (!t2) {
        this._model.tokenization.setSemanticTokens(null, true), a2();
        return;
      }
      if (EM(t2)) {
        if (!i2) {
          this._model.tokenization.setSemanticTokens(null, true);
          return;
        }
        if (t2.edits.length === 0) t2 = {
          resultId: t2.resultId,
          data: i2.data
        };
        else {
          let e3 = 0;
          for (let n3 of t2.edits) e3 += (n3.data ? n3.data.length : 0) - n3.deleteCount;
          let r3 = i2.data, a3 = new Uint32Array(r3.length + e3), o2 = r3.length, s2 = a3.length;
          for (let e4 = t2.edits.length - 1; e4 >= 0; e4--) {
            let c2 = t2.edits[e4];
            if (c2.start > r3.length) {
              n2.warnInvalidEditStart(i2.resultId, t2.resultId, e4, c2.start, r3.length), this._model.tokenization.setSemanticTokens(null, true);
              return;
            }
            let l2 = o2 - (c2.start + c2.deleteCount);
            l2 > 0 && (BM._copy(r3, o2 - l2, a3, s2 - l2, l2), s2 -= l2), c2.data && (BM._copy(c2.data, 0, a3, s2 - c2.data.length, c2.data.length), s2 -= c2.data.length), o2 = c2.start;
          }
          o2 > 0 && BM._copy(r3, 0, a3, 0, o2), t2 = {
            resultId: t2.resultId,
            data: a3
          };
        }
      }
      if (TM(t2)) {
        this._currentDocumentResponse = new UM(e2, t2.resultId, t2.data);
        let i3 = Ul(t2, n2, this._model.getLanguageId());
        if (r2.length > 0) for (let e3 of r2) for (let t3 of i3) for (let n3 of e3.changes) t3.applyEdit(n3.range, n3.text);
        this._model.tokenization.setSemanticTokens(i3, true);
      } else this._model.tokenization.setSemanticTokens(null, true);
      a2();
    }
  }, BM = _lb, _lb.REQUEST_MIN_DELAY = 300, _lb.REQUEST_MAX_DELAY = 2e3, _lb);
  HM = BM = RM([
    zM(1, zt),
    zM(2, Gt),
    zM(3, Et),
    zM(4, A)
  ], HM);
  var UM = class {
    constructor(e2, t2, n2) {
      this.provider = e2, this.resultId = t2, this.data = n2;
    }
    dispose() {
      this.provider.releaseDocumentSemanticTokens(this.resultId);
    }
  };
  sl(VM);
  var WM = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, GM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let KM = (_mb = class extends S {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(), this._semanticTokensStylingService = t2, this._themeService = n2, this._configurationService = r2, this._editor = e2, this._provider = a2.documentRangeSemanticTokensProvider, this._debounceInformation = i2.for(this._provider, `DocumentRangeSemanticTokens`, {
        min: 100,
        max: 500
      }), this._tokenizeViewport = this._register(new hr(() => this._tokenizeViewportNow(), 100)), this._outstandingRequests = [];
      let o2 = () => {
        this._editor.hasModel() && this._tokenizeViewport.schedule(this._debounceInformation.get(this._editor.getModel()));
      };
      this._register(this._editor.onDidScrollChange(() => {
        o2();
      })), this._register(this._editor.onDidChangeModel(() => {
        this._cancelAll(), o2();
      })), this._register(this._editor.onDidChangeModelContent((e3) => {
        this._cancelAll(), o2();
      })), this._register(this._provider.onDidChange(() => {
        this._cancelAll(), o2();
      })), this._register(this._configurationService.onDidChangeConfiguration((e3) => {
        e3.affectsConfiguration(IM) && (this._cancelAll(), o2());
      })), this._register(this._themeService.onDidColorThemeChange(() => {
        this._cancelAll(), o2();
      })), o2();
    }
    _cancelAll() {
      for (let e2 of this._outstandingRequests) e2.cancel();
      this._outstandingRequests = [];
    }
    _removeOutstandingRequest(e2) {
      for (let t2 = 0, n2 = this._outstandingRequests.length; t2 < n2; t2++) if (this._outstandingRequests[t2] === e2) {
        this._outstandingRequests.splice(t2, 1);
        return;
      }
    }
    _tokenizeViewportNow() {
      if (!this._editor.hasModel()) return;
      let e2 = this._editor.getModel();
      if (e2.tokenization.hasCompleteSemanticTokens()) return;
      if (!LM(e2, this._themeService, this._configurationService)) {
        e2.tokenization.hasSomeSemanticTokens() && e2.tokenization.setSemanticTokens(null, false);
        return;
      }
      if (!NM(this._provider, e2)) {
        e2.tokenization.hasSomeSemanticTokens() && e2.tokenization.setSemanticTokens(null, false);
        return;
      }
      let t2 = this._editor.getVisibleRangesPlusViewportAboveBelow();
      this._outstandingRequests = this._outstandingRequests.concat(t2.map((t3) => this._requestRange(e2, t3)));
    }
    _requestRange(e2, t2) {
      let n2 = e2.getVersionId(), r2 = sa((n3) => Promise.resolve(FM(this._provider, e2, t2, n3))), i2 = new Fr(false);
      return r2.then((r3) => {
        if (this._debounceInformation.update(e2, i2.elapsed()), !r3 || !r3.tokens || e2.isDisposed() || e2.getVersionId() !== n2) return;
        let { provider: a2, tokens: o2 } = r3, s2 = this._semanticTokensStylingService.getStyling(a2);
        e2.tokenization.setPartialSemanticTokens(t2, Ul(o2, s2, e2.getLanguageId()));
      }).then(() => this._removeOutstandingRequest(r2), () => this._removeOutstandingRequest(r2)), r2;
    }
  }, _mb.ID = `editor.contrib.viewportSemanticTokens`, _mb);
  KM = WM([
    GM(1, zt),
    GM(2, Gt),
    GM(3, D),
    GM(4, Et),
    GM(5, A)
  ], KM), X(KM.ID, KM, 1);
  var qM = class {
    constructor(e2 = true) {
      this.selectSubwords = e2;
    }
    provideSelectionRanges(e2, t2) {
      let n2 = [];
      for (let r2 of t2) {
        let t3 = [];
        n2.push(t3), this.selectSubwords && this._addInWordRanges(t3, e2, r2), this._addWordRanges(t3, e2, r2), this._addWhitespaceLine(t3, e2, r2), t3.push({
          range: e2.getFullModelRange()
        });
      }
      return n2;
    }
    _addInWordRanges(e2, t2, n2) {
      let r2 = t2.getWordAtPosition(n2);
      if (!r2) return;
      let { word: i2, startColumn: a2 } = r2, o2 = n2.column - a2, s2 = o2, c2 = o2, l2 = 0;
      for (; s2 >= 0; s2--) {
        let e3 = i2.charCodeAt(s2);
        if (s2 !== o2 && (e3 === 95 || e3 === 45) || Ks(e3) && oc(l2)) break;
        l2 = e3;
      }
      for (s2 += 1; c2 < i2.length; c2++) {
        let e3 = i2.charCodeAt(c2);
        if (oc(e3) && Ks(l2) || e3 === 95 || e3 === 45) break;
        l2 = e3;
      }
      s2 < c2 && e2.push({
        range: new P(n2.lineNumber, a2 + s2, n2.lineNumber, a2 + c2)
      });
    }
    _addWordRanges(e2, t2, n2) {
      let r2 = t2.getWordAtPosition(n2);
      r2 && e2.push({
        range: new P(n2.lineNumber, r2.startColumn, n2.lineNumber, r2.endColumn)
      });
    }
    _addWhitespaceLine(e2, t2, n2) {
      t2.getLineLength(n2.lineNumber) > 0 && t2.getLineFirstNonWhitespaceColumn(n2.lineNumber) === 0 && t2.getLineLastNonWhitespaceColumn(n2.lineNumber) === 0 && e2.push({
        range: new P(n2.lineNumber, 1, n2.lineNumber, t2.getLineMaxColumn(n2.lineNumber))
      });
    }
  }, JM = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, YM = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, XM, ZM = class e2 {
    constructor(e3, t2) {
      this.index = e3, this.ranges = t2;
    }
    mov(t2) {
      let n2 = this.index + (t2 ? 1 : -1);
      if (n2 < 0 || n2 >= this.ranges.length) return this;
      let r2 = new e2(n2, this.ranges);
      return r2.ranges[n2].equalsRange(this.ranges[this.index]) ? r2.mov(t2) : r2;
    }
  };
  let QM = (_nb = class {
    static get(e2) {
      return e2.getContribution(XM.ID);
    }
    constructor(e2, t2) {
      this._editor = e2, this._languageFeaturesService = t2, this._ignoreSelection = false;
    }
    dispose() {
      var _a3;
      (_a3 = this._selectionListener) == null ? void 0 : _a3.dispose();
    }
    async run(e2) {
      if (!this._editor.hasModel()) return;
      let t2 = this._editor.getSelections(), n2 = this._editor.getModel();
      if (this._state || await nN(this._languageFeaturesService.selectionRangeProvider, n2, t2.map((e3) => e3.getPosition()), this._editor.getOption(114), m.None).then((e3) => {
        var _a3;
        if (!(!$s(e3) || e3.length !== t2.length) && !(!this._editor.hasModel() || !go(this._editor.getSelections(), t2, (e4, t3) => e4.equalsSelection(t3)))) {
          for (let n3 = 0; n3 < e3.length; n3++) e3[n3] = e3[n3].filter((e4) => e4.containsPosition(t2[n3].getStartPosition()) && e4.containsPosition(t2[n3].getEndPosition())), e3[n3].unshift(t2[n3]);
          this._state = e3.map((e4) => new ZM(0, e4)), (_a3 = this._selectionListener) == null ? void 0 : _a3.dispose(), this._selectionListener = this._editor.onDidChangeCursorPosition(() => {
            var _a4;
            this._ignoreSelection || ((_a4 = this._selectionListener) == null ? void 0 : _a4.dispose(), this._state = void 0);
          });
        }
      }), !this._state) return;
      this._state = this._state.map((t3) => t3.mov(e2));
      let r2 = this._state.map((e3) => I.fromPositions(e3.ranges[e3.index].getStartPosition(), e3.ranges[e3.index].getEndPosition()));
      this._ignoreSelection = true;
      try {
        this._editor.setSelections(r2);
      } finally {
        this._ignoreSelection = false;
      }
    }
  }, XM = _nb, _nb.ID = `editor.contrib.smartSelectController`, _nb);
  QM = XM = JM([
    YM(1, A)
  ], QM);
  var $M = class extends w {
    constructor(e2, t2) {
      super(t2), this._forward = e2;
    }
    async run(e2, t2) {
      let n2 = QM.get(t2);
      n2 && await n2.run(this._forward);
    }
  }, eN = class extends $M {
    constructor() {
      super(true, {
        id: `editor.action.smartSelect.expand`,
        label: U(`smartSelect.expand`, `Expand Selection`),
        alias: `Expand Selection`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1553,
          mac: {
            primary: 3345,
            secondary: [
              1297
            ]
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `1_basic`,
          title: U({
            key: `miSmartSelectGrow`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Expand Selection`),
          order: 2
        }
      });
    }
  };
  y.registerCommandAlias(`editor.action.smartSelect.grow`, `editor.action.smartSelect.expand`);
  var tN = class extends $M {
    constructor() {
      super(false, {
        id: `editor.action.smartSelect.shrink`,
        label: U(`smartSelect.shrink`, `Shrink Selection`),
        alias: `Shrink Selection`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1551,
          mac: {
            primary: 3343,
            secondary: [
              1295
            ]
          },
          weight: 100
        },
        menuOpts: {
          menuId: j.MenubarSelectionMenu,
          group: `1_basic`,
          title: U({
            key: `miSmartSelectShrink`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Shrink Selection`),
          order: 3
        }
      });
    }
  };
  X(QM.ID, QM, 4), J(eN), J(tN);
  async function nN(e2, t2, n2, r2, i2) {
    let a2 = e2.all(t2).concat(new qM(r2.selectSubwords));
    a2.length === 1 && a2.unshift(new yT());
    let o2 = [], s2 = [];
    for (let e3 of a2) o2.push(Promise.resolve(e3.provideSelectionRanges(t2, n2, i2)).then((e4) => {
      if ($s(e4) && e4.length === n2.length) for (let t3 = 0; t3 < n2.length; t3++) {
        s2[t3] || (s2[t3] = []);
        for (let r3 of e4[t3]) P.isIRange(r3.range) && P.containsPosition(r3.range, n2[t3]) && s2[t3].push(P.lift(r3.range));
      }
    }, Uc));
    return await Promise.all(o2), s2.map((e3) => {
      if (e3.length === 0) return [];
      e3.sort((e4, t3) => N.isBefore(e4.getStartPosition(), t3.getStartPosition()) ? 1 : N.isBefore(t3.getStartPosition(), e4.getStartPosition()) || N.isBefore(e4.getEndPosition(), t3.getEndPosition()) ? -1 : N.isBefore(t3.getEndPosition(), e4.getEndPosition()) ? 1 : 0);
      let n3 = [], i3;
      for (let t3 of e3) (!i3 || P.containsRange(t3, i3) && !P.equalsRange(t3, i3)) && (n3.push(t3), i3 = t3);
      if (!r2.selectLeadingAndTrailingWhitespace) return n3;
      let a3 = [
        n3[0]
      ];
      for (let e4 = 1; e4 < n3.length; e4++) {
        let r3 = n3[e4 - 1], i4 = n3[e4];
        if (i4.startLineNumber !== r3.startLineNumber || i4.endLineNumber !== r3.endLineNumber) {
          let e5 = new P(r3.startLineNumber, t2.getLineFirstNonWhitespaceColumn(r3.startLineNumber), r3.endLineNumber, t2.getLineLastNonWhitespaceColumn(r3.endLineNumber));
          e5.containsRange(r3) && !e5.equalsRange(r3) && i4.containsRange(e5) && !i4.equalsRange(e5) && a3.push(e5);
          let n4 = new P(r3.startLineNumber, 1, r3.endLineNumber, t2.getLineMaxColumn(r3.endLineNumber));
          n4.containsRange(r3) && !n4.equalsRange(e5) && i4.containsRange(n4) && !i4.equalsRange(n4) && a3.push(n4);
        }
        a3.push(i4);
      }
      return a3;
    });
  }
  y.registerCommand(`_executeSelectionRangeProvider`, async function(e2, ...t2) {
    let [n2, r2] = t2;
    V(R.isUri(n2));
    let i2 = e2.get(A).selectionRangeProvider, a2 = await e2.get(Ut).createModelReference(n2);
    try {
      return nN(i2, a2.object.textEditorModel, r2, {
        selectLeadingAndTrailingWhitespace: true,
        selectSubwords: true
      }, m.None);
    } finally {
      a2.dispose();
    }
  });
  const rN = Object.freeze({
    View: W(`view`, `View`),
    Help: W(`help`, `Help`),
    Test: W(`test`, `Test`),
    File: W(`file`, `File`),
    Preferences: W(`preferences`, `Preferences`),
    Developer: W({
      key: `developer`,
      comment: [
        `A developer on Code itself or someone diagnosing issues in Code`
      ]
    }, `Developer`)
  });
  var iN = class e2 {
    constructor(e3, t2, n2, r2 = null) {
      this.startLineNumbers = e3, this.endLineNumbers = t2, this.lastLineRelativePosition = n2, this.showEndForLine = r2;
    }
    equals(e3) {
      return !!e3 && this.lastLineRelativePosition === e3.lastLineRelativePosition && this.showEndForLine === e3.showEndForLine && go(this.startLineNumbers, e3.startLineNumbers) && go(this.endLineNumbers, e3.endLineNumbers);
    }
    static get Empty() {
      return new e2([], [], 0);
    }
  };
  const aN = pa(`stickyScrollViewLayer`, {
    createHTML: (e2) => e2
  }), oN = `data-sticky-line-index`, sN = `data-sticky-is-line`, cN = `data-sticky-is-line-number`, lN = `data-sticky-is-folding-icon`;
  var uN = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._foldingIconStore = new C(), this._rootDomNode = document.createElement(`div`), this._lineNumbersDomNode = document.createElement(`div`), this._linesDomNodeScrollable = document.createElement(`div`), this._linesDomNode = document.createElement(`div`), this._lineHeight = this._editor.getOption(67), this._renderedStickyLines = [], this._lineNumbers = [], this._lastLineRelativePosition = 0, this._minContentWidthInPx = 0, this._isOnGlyphMargin = false, this._lineNumbersDomNode.className = `sticky-widget-line-numbers`, this._lineNumbersDomNode.setAttribute(`role`, `none`), this._linesDomNode.className = `sticky-widget-lines`, this._linesDomNode.setAttribute(`role`, `list`), this._linesDomNodeScrollable.className = `sticky-widget-lines-scrollable`, this._linesDomNodeScrollable.appendChild(this._linesDomNode), this._rootDomNode.className = `sticky-widget`, this._rootDomNode.classList.toggle(`peek`, e2 instanceof c_), this._rootDomNode.appendChild(this._lineNumbersDomNode), this._rootDomNode.appendChild(this._linesDomNodeScrollable);
      let t2 = () => {
        this._linesDomNode.style.left = this._editor.getOption(116).scrollWithEditor ? `-${this._editor.getScrollLeft()}px` : `0px`;
      };
      this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(116) && t2(), e3.hasChanged(67) && (this._lineHeight = this._editor.getOption(67));
      })), this._register(this._editor.onDidScrollChange((e3) => {
        e3.scrollLeftChanged && t2(), e3.scrollWidthChanged && this._updateWidgetWidth();
      })), this._register(this._editor.onDidChangeModel(() => {
        t2(), this._updateWidgetWidth();
      })), this._register(this._foldingIconStore), t2(), this._register(this._editor.onDidLayoutChange((e3) => {
        this._updateWidgetWidth();
      })), this._updateWidgetWidth();
    }
    get lineNumbers() {
      return this._lineNumbers;
    }
    get lineNumberCount() {
      return this._lineNumbers.length;
    }
    getRenderedStickyLine(e2) {
      return this._renderedStickyLines.find((t2) => t2.lineNumber === e2);
    }
    getCurrentLines() {
      return this._lineNumbers;
    }
    setState(e2, t2, n2) {
      if (n2 === void 0 && (!this._previousState && !e2 || this._previousState && this._previousState.equals(e2))) return;
      let r2 = this._isWidgetHeightZero(e2), i2 = r2 ? void 0 : e2, a2 = r2 ? 0 : this._findLineToRebuildWidgetFrom(e2, n2);
      this._renderRootNode(i2, t2, a2), this._previousState = e2;
    }
    _isWidgetHeightZero(e2) {
      if (!e2) return true;
      let t2 = e2.startLineNumbers.length * this._lineHeight + e2.lastLineRelativePosition;
      if (t2 > 0) {
        this._lastLineRelativePosition = e2.lastLineRelativePosition;
        let t3 = [
          ...e2.startLineNumbers
        ];
        e2.showEndForLine !== null && (t3[e2.showEndForLine] = e2.endLineNumbers[e2.showEndForLine]), this._lineNumbers = t3;
      } else this._lastLineRelativePosition = 0, this._lineNumbers = [];
      return t2 === 0;
    }
    _findLineToRebuildWidgetFrom(e2, t2) {
      if (!e2 || !this._previousState) return 0;
      if (t2 !== void 0) return t2;
      let n2 = this._previousState, r2 = e2.startLineNumbers.findIndex((e3) => !n2.startLineNumbers.includes(e3));
      return r2 === -1 ? 0 : r2;
    }
    _updateWidgetWidth() {
      let e2 = this._editor.getLayoutInfo(), t2 = e2.contentLeft;
      this._lineNumbersDomNode.style.width = `${t2}px`, this._linesDomNodeScrollable.style.setProperty(`--vscode-editorStickyScroll-scrollableWidth`, `${this._editor.getScrollWidth() - e2.verticalScrollbarWidth}px`), this._rootDomNode.style.width = `${e2.width - e2.verticalScrollbarWidth}px`;
    }
    _clearStickyLinesFromLine(e2) {
      this._foldingIconStore.clear();
      for (let t2 = e2; t2 < this._renderedStickyLines.length; t2++) {
        let e3 = this._renderedStickyLines[t2];
        e3.lineNumberDomNode.remove(), e3.lineDomNode.remove();
      }
      this._renderedStickyLines = this._renderedStickyLines.slice(0, e2), this._rootDomNode.style.display = `none`;
    }
    _useFoldingOpacityTransition(e2) {
      this._lineNumbersDomNode.style.setProperty(`--vscode-editorStickyScroll-foldingOpacityTransition`, `opacity ${e2 ? 0.5 : 0}s`);
    }
    _setFoldingIconsVisibility(e2) {
      for (let t2 of this._renderedStickyLines) {
        let n2 = t2.foldingIcon;
        if (!n2) continue;
        n2.setVisible(e2 ? true : n2.isCollapsed);
      }
    }
    async _renderRootNode(e2, t2, n2) {
      if (this._clearStickyLinesFromLine(n2), !e2) return;
      for (let e3 of this._renderedStickyLines) this._updateTopAndZIndexOfStickyLine(e3);
      let r2 = this._editor.getLayoutInfo(), i2 = this._lineNumbers.slice(n2);
      for (let [e3, a3] of i2.entries()) {
        let i3 = this._renderChildNode(e3 + n2, a3, t2, r2);
        if (!i3) continue;
        this._linesDomNode.appendChild(i3.lineDomNode), this._lineNumbersDomNode.appendChild(i3.lineNumberDomNode), this._renderedStickyLines.push(i3);
      }
      t2 && (this._setFoldingHoverListeners(), this._useFoldingOpacityTransition(!this._isOnGlyphMargin));
      let a2 = this._lineNumbers.length * this._lineHeight + this._lastLineRelativePosition;
      this._rootDomNode.style.display = `block`, this._lineNumbersDomNode.style.height = `${a2}px`, this._linesDomNodeScrollable.style.height = `${a2}px`, this._rootDomNode.style.height = `${a2}px`, this._rootDomNode.style.marginLeft = `0px`, this._minContentWidthInPx = Math.max(...this._renderedStickyLines.map((e3) => e3.scrollWidth)) + r2.verticalScrollbarWidth, this._editor.layoutOverlayWidget(this);
    }
    _setFoldingHoverListeners() {
      let e2 = this._editor.getOption(111);
      e2 === `mouseover` && (this._foldingIconStore.add(z(this._lineNumbersDomNode, He.MOUSE_ENTER, () => {
        this._isOnGlyphMargin = true, this._setFoldingIconsVisibility(true);
      })), this._foldingIconStore.add(z(this._lineNumbersDomNode, He.MOUSE_LEAVE, () => {
        this._isOnGlyphMargin = false, this._useFoldingOpacityTransition(true), this._setFoldingIconsVisibility(false);
      })));
    }
    _renderChildNode(e2, t2, n2, r2) {
      let i2 = this._editor._getViewModel();
      if (!i2) return;
      let a2 = i2.coordinatesConverter.convertModelPositionToViewPosition(new N(t2, 1)).lineNumber, o2 = i2.getViewLineRenderingData(a2), s2 = this._editor.getOption(68), c2;
      try {
        c2 = xn.filter(o2.inlineDecorations, a2, o2.minColumn, o2.maxColumn);
      } catch {
        c2 = [];
      }
      let l2 = new lr(true, true, o2.content, o2.continuesWithWrappedLine, o2.isBasicASCII, o2.containsRTL, 0, o2.tokens, c2, o2.tabSize, o2.startVisibleColumn, 1, 1, 1, 500, `none`, true, true, null), u2 = new Ir(2e3), d2 = yl(l2, u2), f2;
      f2 = aN ? aN.createHTML(u2.build()) : u2.build();
      let p2 = document.createElement(`span`);
      p2.setAttribute(oN, String(e2)), p2.setAttribute(sN, ``), p2.setAttribute(`role`, `listitem`), p2.tabIndex = 0, p2.className = `sticky-line-content`, p2.classList.add(`stickyLine${t2}`), p2.style.lineHeight = `${this._lineHeight}px`, p2.innerHTML = f2;
      let m2 = document.createElement(`span`);
      m2.setAttribute(oN, String(e2)), m2.setAttribute(cN, ``), m2.className = `sticky-line-number`, m2.style.lineHeight = `${this._lineHeight}px`;
      let h2 = r2.contentLeft;
      m2.style.width = `${h2}px`;
      let g2 = document.createElement(`span`);
      s2.renderType === 1 || s2.renderType === 3 && t2 % 10 == 0 ? g2.innerText = t2.toString() : s2.renderType === 2 && (g2.innerText = Math.abs(t2 - this._editor.getPosition().lineNumber).toString()), g2.className = `sticky-line-number-inner`, g2.style.lineHeight = `${this._lineHeight}px`, g2.style.width = `${r2.lineNumbersWidth}px`, g2.style.paddingLeft = `${r2.lineNumbersLeft}px`, m2.appendChild(g2);
      let ee2 = this._renderFoldingIconForLine(n2, t2);
      ee2 && m2.appendChild(ee2.domNode), this._editor.applyFontInfo(p2), this._editor.applyFontInfo(g2), m2.style.lineHeight = `${this._lineHeight}px`, p2.style.lineHeight = `${this._lineHeight}px`, m2.style.height = `${this._lineHeight}px`, p2.style.height = `${this._lineHeight}px`;
      let te2 = new dN(e2, t2, p2, m2, ee2, d2.characterMapping, p2.scrollWidth);
      return this._updateTopAndZIndexOfStickyLine(te2);
    }
    _updateTopAndZIndexOfStickyLine(e2) {
      var _a3;
      let t2 = e2.index, n2 = e2.lineDomNode, r2 = e2.lineNumberDomNode, i2 = t2 === this._lineNumbers.length - 1, a2 = `0`, o2 = `1`;
      n2.style.zIndex = i2 ? a2 : o2, r2.style.zIndex = i2 ? a2 : o2;
      let s2 = `${t2 * this._lineHeight + this._lastLineRelativePosition + (((_a3 = e2.foldingIcon) == null ? void 0 : _a3.isCollapsed) ? 1 : 0)}px`, c2 = `${t2 * this._lineHeight}px`;
      return n2.style.top = i2 ? s2 : c2, r2.style.top = i2 ? s2 : c2, e2;
    }
    _renderFoldingIconForLine(e2, t2) {
      let n2 = this._editor.getOption(111);
      if (!e2 || n2 === `never`) return;
      let r2 = e2.regions, i2 = r2.findRange(t2), a2 = r2.getStartLineNumber(i2), o2 = t2 === a2;
      if (!o2) return;
      let s2 = r2.isCollapsed(i2), c2 = new fN(s2, a2, r2.getEndLineNumber(i2), this._lineHeight);
      return c2.setVisible(this._isOnGlyphMargin ? true : s2 || n2 === `always`), c2.domNode.setAttribute(lN, ``), c2;
    }
    getId() {
      return `editor.contrib.stickyScrollWidget`;
    }
    getDomNode() {
      return this._rootDomNode;
    }
    getPosition() {
      return {
        preference: 2,
        stackOridinal: 10
      };
    }
    getMinContentWidthInPx() {
      return this._minContentWidthInPx;
    }
    focusLineWithIndex(e2) {
      0 <= e2 && e2 < this._renderedStickyLines.length && this._renderedStickyLines[e2].lineDomNode.focus();
    }
    getEditorPositionFromNode(e2) {
      if (!e2 || e2.children.length > 0) return null;
      let t2 = this._getRenderedStickyLineFromChildDomNode(e2);
      if (!t2) return null;
      let n2 = Ro(t2.characterMapping, e2, 0);
      return new N(t2.lineNumber, n2);
    }
    getLineNumberFromChildDomNode(e2) {
      var _a3;
      return ((_a3 = this._getRenderedStickyLineFromChildDomNode(e2)) == null ? void 0 : _a3.lineNumber) ?? null;
    }
    _getRenderedStickyLineFromChildDomNode(e2) {
      let t2 = this.getLineIndexFromChildDomNode(e2);
      return t2 === null || t2 < 0 || t2 >= this._renderedStickyLines.length ? null : this._renderedStickyLines[t2];
    }
    getLineIndexFromChildDomNode(e2) {
      let t2 = this._getAttributeValue(e2, oN);
      return t2 ? parseInt(t2, 10) : null;
    }
    isInStickyLine(e2) {
      let t2 = this._getAttributeValue(e2, sN);
      return t2 !== void 0;
    }
    isInFoldingIconDomNode(e2) {
      let t2 = this._getAttributeValue(e2, lN);
      return t2 !== void 0;
    }
    _getAttributeValue(e2, t2) {
      for (; e2 && e2 !== this._rootDomNode; ) {
        let n2 = e2.getAttribute(t2);
        if (n2 !== null) return n2;
        e2 = e2.parentElement;
      }
    }
  }, dN = class {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      this.index = e2, this.lineNumber = t2, this.lineDomNode = n2, this.lineNumberDomNode = r2, this.foldingIcon = i2, this.characterMapping = a2, this.scrollWidth = o2;
    }
  }, fN = class {
    constructor(e2, t2, n2, r2) {
      this.isCollapsed = e2, this.foldingStartLine = t2, this.foldingEndLine = n2, this.dimension = r2, this.domNode = document.createElement(`div`), this.domNode.style.width = `${r2}px`, this.domNode.style.height = `${r2}px`, this.domNode.className = L.asClassName(e2 ? mS : pS);
    }
    setVisible(e2) {
      this.domNode.style.cursor = e2 ? `pointer` : `default`, this.domNode.style.opacity = e2 ? `1` : `0`;
    }
  }, pN = class {
    constructor(e2, t2) {
      this.startLineNumber = e2, this.endLineNumber = t2;
    }
  }, mN = class {
    constructor(e2, t2, n2) {
      this.range = e2, this.children = t2, this.parent = n2;
    }
  }, hN = class {
    constructor(e2, t2, n2, r2) {
      this.uri = e2, this.version = t2, this.element = n2, this.outlineProviderId = r2;
    }
  }, gN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, _N = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, vN;
  (function(e2) {
    e2.OUTLINE_MODEL = `outlineModel`, e2.FOLDING_PROVIDER_MODEL = `foldingProviderModel`, e2.INDENTATION_MODEL = `indentationModel`;
  })(vN || (vN = {}));
  var yN;
  (function(e2) {
    e2[e2.VALID = 0] = `VALID`, e2[e2.INVALID = 1] = `INVALID`, e2[e2.CANCELED = 2] = `CANCELED`;
  })(yN || (yN = {}));
  let bN = class extends S {
    constructor(e2, t2, n2, r2) {
      switch (super(), this._editor = e2, this._modelProviders = [], this._modelPromise = null, this._updateScheduler = this._register(new ve(300)), this._updateOperation = this._register(new C()), this._editor.getOption(116).defaultModel) {
        case vN.OUTLINE_MODEL:
          this._modelProviders.push(new SN(this._editor, r2));
        case vN.FOLDING_PROVIDER_MODEL:
          this._modelProviders.push(new TN(this._editor, t2, r2));
        case vN.INDENTATION_MODEL:
          this._modelProviders.push(new wN(this._editor, n2));
          break;
      }
    }
    dispose() {
      this._modelProviders.forEach((e2) => e2.dispose()), this._updateOperation.clear(), this._cancelModelPromise(), super.dispose();
    }
    _cancelModelPromise() {
      this._modelPromise && (this._modelPromise.cancel(), this._modelPromise = null);
    }
    async update(e2) {
      return this._updateOperation.clear(), this._updateOperation.add({
        dispose: () => {
          this._cancelModelPromise(), this._updateScheduler.cancel();
        }
      }), this._cancelModelPromise(), await this._updateScheduler.trigger(async () => {
        for (let t2 of this._modelProviders) {
          let { statusPromise: n2, modelPromise: r2 } = t2.computeStickyModel(e2);
          this._modelPromise = r2;
          let i2 = await n2;
          if (this._modelPromise !== r2) return null;
          switch (i2) {
            case yN.CANCELED:
              return this._updateOperation.clear(), null;
            case yN.VALID:
              return t2.stickyModel;
          }
        }
        return null;
      }).catch((e3) => (G(e3), null));
    }
  };
  bN = gN([
    _N(2, k),
    _N(3, A)
  ], bN);
  var xN = class extends S {
    constructor(e2) {
      super(), this._editor = e2, this._stickyModel = null;
    }
    get stickyModel() {
      return this._stickyModel;
    }
    _invalid() {
      return this._stickyModel = null, yN.INVALID;
    }
    computeStickyModel(e2) {
      if (e2.isCancellationRequested || !this.isProviderValid()) return {
        statusPromise: this._invalid(),
        modelPromise: null
      };
      let t2 = sa((e3) => this.createModelFromProvider(e3));
      return {
        statusPromise: t2.then((t3) => this.isModelValid(t3) ? e2.isCancellationRequested ? yN.CANCELED : (this._stickyModel = this.createStickyModel(e2, t3), yN.VALID) : this._invalid()).then(void 0, (e3) => (G(e3), yN.CANCELED)),
        modelPromise: t2
      };
    }
    isModelValid(e2) {
      return true;
    }
    isProviderValid() {
      return true;
    }
  };
  let SN = class extends xN {
    constructor(e2, t2) {
      super(e2), this._languageFeaturesService = t2;
    }
    createModelFromProvider(e2) {
      return hC.create(this._languageFeaturesService.documentSymbolProvider, this._editor.getModel(), e2);
    }
    createStickyModel(e2, t2) {
      var _a3;
      let { stickyOutlineElement: n2, providerID: r2 } = this._stickyModelFromOutlineModel(t2, (_a3 = this._stickyModel) == null ? void 0 : _a3.outlineProviderId), i2 = this._editor.getModel();
      return new hN(i2.uri, i2.getVersionId(), n2, r2);
    }
    isModelValid(e2) {
      return e2 && e2.children.size > 0;
    }
    _stickyModelFromOutlineModel(e2, t2) {
      let n2;
      if (ln.first(e2.children.values()) instanceof mC) {
        let r3 = ln.find(e2.children.values(), (e3) => e3.id === t2);
        if (r3) n2 = r3.children;
        else {
          let r4 = ``, i3 = -1, a3;
          for (let [t3, n3] of e2.children.entries()) {
            let e3 = this._findSumOfRangesOfGroup(n3);
            e3 > i3 && (a3 = n3, i3 = e3, r4 = n3.id);
          }
          t2 = r4, n2 = a3.children;
        }
      } else n2 = e2.children;
      let r2 = [], i2 = Array.from(n2.values()).sort((e3, t3) => {
        let n3 = new pN(e3.symbol.range.startLineNumber, e3.symbol.range.endLineNumber), r3 = new pN(t3.symbol.range.startLineNumber, t3.symbol.range.endLineNumber);
        return this._comparator(n3, r3);
      });
      for (let e3 of i2) r2.push(this._stickyModelFromOutlineElement(e3, e3.symbol.selectionRange.startLineNumber));
      let a2 = new mN(void 0, r2, void 0);
      return {
        stickyOutlineElement: a2,
        providerID: t2
      };
    }
    _stickyModelFromOutlineElement(e2, t2) {
      let n2 = [];
      for (let r3 of e2.children.values()) if (r3.symbol.selectionRange.startLineNumber !== r3.symbol.range.endLineNumber) if (r3.symbol.selectionRange.startLineNumber !== t2) n2.push(this._stickyModelFromOutlineElement(r3, r3.symbol.selectionRange.startLineNumber));
      else for (let e3 of r3.children.values()) n2.push(this._stickyModelFromOutlineElement(e3, r3.symbol.selectionRange.startLineNumber));
      n2.sort((e3, t3) => this._comparator(e3.range, t3.range));
      let r2 = new pN(e2.symbol.selectionRange.startLineNumber, e2.symbol.range.endLineNumber);
      return new mN(r2, n2, void 0);
    }
    _comparator(e2, t2) {
      return e2.startLineNumber === t2.startLineNumber ? t2.endLineNumber - e2.endLineNumber : e2.startLineNumber - t2.startLineNumber;
    }
    _findSumOfRangesOfGroup(e2) {
      let t2 = 0;
      for (let n2 of e2.children.values()) t2 += this._findSumOfRangesOfGroup(n2);
      return e2 instanceof pC ? t2 + e2.symbol.range.endLineNumber - e2.symbol.selectionRange.startLineNumber : t2;
    }
  };
  SN = gN([
    _N(1, A)
  ], SN);
  var CN = class extends xN {
    constructor(e2) {
      super(e2), this._foldingLimitReporter = new MS(e2);
    }
    createStickyModel(e2, t2) {
      let n2 = this._fromFoldingRegions(t2), r2 = this._editor.getModel();
      return new hN(r2.uri, r2.getVersionId(), n2, void 0);
    }
    isModelValid(e2) {
      return e2 !== null;
    }
    _fromFoldingRegions(e2) {
      let t2 = e2.length, n2 = [], r2 = new mN(void 0, [], void 0);
      for (let i2 = 0; i2 < t2; i2++) {
        let t3 = e2.getParentIndex(i2), a2;
        a2 = t3 === -1 ? r2 : n2[t3];
        let o2 = new mN(new pN(e2.getStartLineNumber(i2), e2.getEndLineNumber(i2) + 1), [], a2);
        a2.children.push(o2), n2.push(o2);
      }
      return r2;
    }
  };
  let wN = class extends CN {
    constructor(e2, t2) {
      super(e2), this._languageConfigurationService = t2, this.provider = this._register(new cS(e2.getModel(), this._languageConfigurationService, this._foldingLimitReporter));
    }
    async createModelFromProvider(e2) {
      return this.provider.compute(e2);
    }
  };
  wN = gN([
    _N(1, Tt)
  ], wN);
  let TN = class extends CN {
    constructor(e2, t2, n2) {
      super(e2), this._languageFeaturesService = n2;
      let r2 = jS.getFoldingRangeProviders(this._languageFeaturesService, e2.getModel());
      r2.length > 0 && (this.provider = this._register(new CS(e2.getModel(), r2, t2, this._foldingLimitReporter, void 0)));
    }
    isProviderValid() {
      return this.provider !== void 0;
    }
    async createModelFromProvider(e2) {
      var _a3;
      return ((_a3 = this.provider) == null ? void 0 : _a3.compute(e2)) ?? null;
    }
  };
  TN = gN([
    _N(2, A)
  ], TN);
  var EN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, DN = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, ON = class {
    constructor(e2, t2, n2) {
      this.startLineNumber = e2, this.endLineNumber = t2, this.nestingDepth = n2;
    }
  };
  let kN = class extends S {
    constructor(e2, t2, n2) {
      super(), this._languageFeaturesService = t2, this._languageConfigurationService = n2, this._onDidChangeStickyScroll = this._register(new E()), this.onDidChangeStickyScroll = this._onDidChangeStickyScroll.event, this._model = null, this._cts = null, this._stickyModelProvider = null, this._editor = e2, this._sessionStore = this._register(new C()), this._updateSoon = this._register(new hr(() => this.update(), 50)), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(116) && this.readConfiguration();
      })), this.readConfiguration();
    }
    readConfiguration() {
      this._sessionStore.clear();
      let e2 = this._editor.getOption(116);
      e2.enabled && (this._sessionStore.add(this._editor.onDidChangeModel(() => {
        this._model = null, this.updateStickyModelProvider(), this._onDidChangeStickyScroll.fire(), this.update();
      })), this._sessionStore.add(this._editor.onDidChangeHiddenAreas(() => this.update())), this._sessionStore.add(this._editor.onDidChangeModelContent(() => this._updateSoon.schedule())), this._sessionStore.add(this._languageFeaturesService.documentSymbolProvider.onDidChange(() => this.update())), this._sessionStore.add(Hl(() => {
        var _a3;
        (_a3 = this._stickyModelProvider) == null ? void 0 : _a3.dispose(), this._stickyModelProvider = null;
      })), this.updateStickyModelProvider(), this.update());
    }
    getVersionId() {
      var _a3;
      return (_a3 = this._model) == null ? void 0 : _a3.version;
    }
    updateStickyModelProvider() {
      var _a3;
      (_a3 = this._stickyModelProvider) == null ? void 0 : _a3.dispose(), this._stickyModelProvider = null;
      let e2 = this._editor;
      e2.hasModel() && (this._stickyModelProvider = new bN(e2, () => this._updateSoon.schedule(), this._languageConfigurationService, this._languageFeaturesService));
    }
    async update() {
      var _a3;
      (_a3 = this._cts) == null ? void 0 : _a3.dispose(true), this._cts = new g(), await this.updateStickyModel(this._cts.token), this._onDidChangeStickyScroll.fire();
    }
    async updateStickyModel(e2) {
      if (!this._editor.hasModel() || !this._stickyModelProvider || this._editor.getModel().isTooLargeForTokenization()) {
        this._model = null;
        return;
      }
      let t2 = await this._stickyModelProvider.update(e2);
      e2.isCancellationRequested || (this._model = t2);
    }
    updateIndex(e2) {
      return e2 === -1 ? e2 = 0 : e2 < 0 && (e2 = -e2 - 2), e2;
    }
    getCandidateStickyLinesIntersectingFromStickyModel(e2, t2, n2, r2, i2) {
      if (t2.children.length === 0) return;
      let a2 = i2, o2 = [];
      for (let e3 = 0; e3 < t2.children.length; e3++) {
        let n3 = t2.children[e3];
        n3.range && o2.push(n3.range.startLineNumber);
      }
      let s2 = this.updateIndex(zi(o2, e2.startLineNumber, (e3, t3) => e3 - t3)), c2 = this.updateIndex(zi(o2, e2.startLineNumber + r2, (e3, t3) => e3 - t3));
      for (let o3 = s2; o3 <= c2; o3++) {
        let s3 = t2.children[o3];
        if (!s3) return;
        if (s3.range) {
          let t3 = s3.range.startLineNumber, i3 = s3.range.endLineNumber;
          e2.startLineNumber <= i3 + 1 && t3 - 1 <= e2.endLineNumber && t3 !== a2 && (a2 = t3, n2.push(new ON(t3, i3 - 1, r2 + 1)), this.getCandidateStickyLinesIntersectingFromStickyModel(e2, s3, n2, r2 + 1, t3));
        } else this.getCandidateStickyLinesIntersectingFromStickyModel(e2, s3, n2, r2, i2);
      }
    }
    getCandidateStickyLinesIntersecting(e2) {
      var _a3, _b3;
      if (!((_a3 = this._model) == null ? void 0 : _a3.element)) return [];
      let t2 = [];
      this.getCandidateStickyLinesIntersectingFromStickyModel(e2, this._model.element, t2, 0, -1);
      let n2 = (_b3 = this._editor._getViewModel()) == null ? void 0 : _b3.getHiddenAreas();
      if (n2) for (let e3 of n2) t2 = t2.filter((t3) => !(t3.startLineNumber >= e3.startLineNumber && t3.endLineNumber <= e3.endLineNumber + 1));
      return t2;
    }
  };
  kN = EN([
    DN(1, A),
    DN(2, Tt)
  ], kN);
  var AN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, jN = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, MN;
  let NN = (_ob = class extends S {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(), this._editor = e2, this._contextMenuService = t2, this._languageFeaturesService = n2, this._instaService = r2, this._contextKeyService = o2, this._sessionStore = new C(), this._maxStickyLines = 2 ** 53 - 1, this._candidateDefinitionsLength = -1, this._focusedStickyElementIndex = -1, this._enabled = false, this._focused = false, this._positionRevealed = false, this._onMouseDown = false, this._endLineNumbers = [], this._stickyScrollWidget = new uN(this._editor), this._stickyLineCandidateProvider = new kN(this._editor, n2, i2), this._register(this._stickyScrollWidget), this._register(this._stickyLineCandidateProvider), this._widgetState = iN.Empty, this._onDidResize(), this._readConfiguration();
      let s2 = this._stickyScrollWidget.getDomNode();
      this._register(this._editor.onDidChangeConfiguration((e3) => {
        this._readConfigurationChange(e3);
      })), this._register(z(s2, He.CONTEXT_MENU, async (e3) => {
        this._onContextMenu(ts(s2), e3);
      })), this._stickyScrollFocusedContextKey = T.stickyScrollFocused.bindTo(this._contextKeyService), this._stickyScrollVisibleContextKey = T.stickyScrollVisible.bindTo(this._contextKeyService);
      let c2 = this._register(Gl(s2));
      this._register(c2.onDidBlur((e3) => {
        this._positionRevealed === false && s2.clientHeight === 0 ? (this._focusedStickyElementIndex = -1, this.focus()) : this._disposeFocusStickyScrollStore();
      })), this._register(c2.onDidFocus((e3) => {
        this.focus();
      })), this._registerMouseListeners(), this._register(z(s2, He.MOUSE_DOWN, (e3) => {
        this._onMouseDown = true;
      }));
    }
    static get(e2) {
      return e2.getContribution(MN.ID);
    }
    _disposeFocusStickyScrollStore() {
      var _a3;
      this._stickyScrollFocusedContextKey.set(false), (_a3 = this._focusDisposableStore) == null ? void 0 : _a3.dispose(), this._focused = false, this._positionRevealed = false, this._onMouseDown = false;
    }
    focus() {
      if (this._onMouseDown) {
        this._onMouseDown = false, this._editor.focus();
        return;
      }
      let e2 = this._stickyScrollFocusedContextKey.get();
      e2 !== true && (this._focused = true, this._focusDisposableStore = new C(), this._stickyScrollFocusedContextKey.set(true), this._focusedStickyElementIndex = this._stickyScrollWidget.lineNumbers.length - 1, this._stickyScrollWidget.focusLineWithIndex(this._focusedStickyElementIndex));
    }
    focusNext() {
      this._focusedStickyElementIndex < this._stickyScrollWidget.lineNumberCount - 1 && this._focusNav(true);
    }
    focusPrevious() {
      this._focusedStickyElementIndex > 0 && this._focusNav(false);
    }
    selectEditor() {
      this._editor.focus();
    }
    _focusNav(e2) {
      this._focusedStickyElementIndex = e2 ? this._focusedStickyElementIndex + 1 : this._focusedStickyElementIndex - 1, this._stickyScrollWidget.focusLineWithIndex(this._focusedStickyElementIndex);
    }
    goToFocused() {
      let e2 = this._stickyScrollWidget.lineNumbers;
      this._disposeFocusStickyScrollStore(), this._revealPosition({
        lineNumber: e2[this._focusedStickyElementIndex],
        column: 1
      });
    }
    _revealPosition(e2) {
      this._reveaInEditor(e2, () => this._editor.revealPosition(e2));
    }
    _revealLineInCenterIfOutsideViewport(e2) {
      this._reveaInEditor(e2, () => this._editor.revealLineInCenterIfOutsideViewport(e2.lineNumber, 0));
    }
    _reveaInEditor(e2, t2) {
      this._focused && this._disposeFocusStickyScrollStore(), this._positionRevealed = true, t2(), this._editor.setSelection(P.fromPositions(e2)), this._editor.focus();
    }
    _registerMouseListeners() {
      let e2 = this._register(new C()), t2 = this._register(new t_(this._editor, {
        extractLineNumberFromMouseEvent: (e3) => {
          let t3 = this._stickyScrollWidget.getEditorPositionFromNode(e3.target.element);
          return t3 ? t3.lineNumber : 0;
        }
      })), n2 = (e3) => {
        if (!this._editor.hasModel() || e3.target.type !== 12 || e3.target.detail !== this._stickyScrollWidget.getId()) return null;
        let t3 = e3.target.element;
        if (!t3 || t3.innerText !== t3.innerHTML) return null;
        let n3 = this._stickyScrollWidget.getEditorPositionFromNode(t3);
        return n3 ? {
          range: new P(n3.lineNumber, n3.column, n3.lineNumber, n3.column + t3.innerText.length),
          textElement: t3
        } : null;
      }, r2 = this._stickyScrollWidget.getDomNode();
      this._register(Si(r2, He.CLICK, (e3) => {
        if (e3.ctrlKey || e3.altKey || e3.metaKey || !e3.leftButton) return;
        if (e3.shiftKey) {
          let t4 = this._stickyScrollWidget.getLineIndexFromChildDomNode(e3.target);
          if (t4 === null) return;
          let n4 = new N(this._endLineNumbers[t4], 1);
          this._revealLineInCenterIfOutsideViewport(n4);
          return;
        }
        let t3 = this._stickyScrollWidget.isInFoldingIconDomNode(e3.target);
        if (t3) {
          let t4 = this._stickyScrollWidget.getLineNumberFromChildDomNode(e3.target);
          this._toggleFoldingRegionForLine(t4);
          return;
        }
        let n3 = this._stickyScrollWidget.isInStickyLine(e3.target);
        if (!n3) return;
        let r3 = this._stickyScrollWidget.getEditorPositionFromNode(e3.target);
        if (!r3) {
          let t4 = this._stickyScrollWidget.getLineNumberFromChildDomNode(e3.target);
          if (t4 === null) return;
          r3 = new N(t4, 1);
        }
        this._revealPosition(r3);
      })), this._register(Si(r2, He.MOUSE_MOVE, (e3) => {
        if (e3.shiftKey) {
          let t3 = this._stickyScrollWidget.getLineIndexFromChildDomNode(e3.target);
          if (t3 === null || this._showEndForLine !== null && this._showEndForLine === t3) return;
          this._showEndForLine = t3, this._renderStickyScroll();
          return;
        }
        this._showEndForLine !== void 0 && (this._showEndForLine = void 0, this._renderStickyScroll());
      })), this._register(z(r2, He.MOUSE_LEAVE, (e3) => {
        this._showEndForLine !== void 0 && (this._showEndForLine = void 0, this._renderStickyScroll());
      })), this._register(t2.onMouseMoveOrRelevantKeyDown(([t3, r3]) => {
        let i2 = n2(t3);
        if (!i2 || !t3.hasTriggerModifier || !this._editor.hasModel()) {
          e2.clear();
          return;
        }
        let { range: a2, textElement: o2 } = i2;
        if (!a2.equalsRange(this._stickyRangeProjectedOnEditor)) this._stickyRangeProjectedOnEditor = a2, e2.clear();
        else if (o2.style.textDecoration === `underline`) return;
        let s2 = new g();
        e2.add(Hl(() => s2.dispose(true)));
        let c2;
        xv(this._languageFeaturesService.definitionProvider, this._editor.getModel(), new N(a2.startLineNumber, a2.startColumn + 1), false, s2.token).then((t4) => {
          if (!s2.token.isCancellationRequested) if (t4.length !== 0) {
            this._candidateDefinitionsLength = t4.length;
            let n3 = o2;
            c2 === n3 ? c2 || (c2 = n3, c2.style.textDecoration = `underline`, e2.add(Hl(() => {
              c2.style.textDecoration = `none`;
            }))) : (e2.clear(), c2 = n3, c2.style.textDecoration = `underline`, e2.add(Hl(() => {
              c2.style.textDecoration = `none`;
            })));
          } else e2.clear();
        });
      })), this._register(t2.onCancel(() => {
        e2.clear();
      })), this._register(t2.onExecute(async (e3) => {
        if (e3.target.type !== 12 || e3.target.detail !== this._stickyScrollWidget.getId()) return;
        let t3 = this._stickyScrollWidget.getEditorPositionFromNode(e3.target.element);
        t3 && (!this._editor.hasModel() || !this._stickyRangeProjectedOnEditor || (this._candidateDefinitionsLength > 1 && (this._focused && this._disposeFocusStickyScrollStore(), this._revealPosition({
          lineNumber: t3.lineNumber,
          column: 1
        })), this._instaService.invokeFunction(Iv, e3, this._editor, {
          uri: this._editor.getModel().uri,
          range: this._stickyRangeProjectedOnEditor
        })));
      }));
    }
    _onContextMenu(e2, t2) {
      let n2 = new Pr(e2, t2);
      this._contextMenuService.showContextMenu({
        menuId: j.StickyScrollContext,
        getAnchor: () => n2
      });
    }
    _toggleFoldingRegionForLine(e2) {
      if (!this._foldingModel || e2 === null) return;
      let t2 = this._stickyScrollWidget.getRenderedStickyLine(e2), n2 = t2 == null ? void 0 : t2.foldingIcon;
      if (!n2) return;
      Kx(this._foldingModel, Number.MAX_VALUE, [
        e2
      ]), n2.isCollapsed = !n2.isCollapsed;
      let r2 = (n2.isCollapsed ? this._editor.getTopForLineNumber(n2.foldingEndLine) : this._editor.getTopForLineNumber(n2.foldingStartLine)) - this._editor.getOption(67) * t2.index + 1;
      this._editor.setScrollTop(r2), this._renderStickyScroll(e2);
    }
    _readConfiguration() {
      let e2 = this._editor.getOption(116);
      if (e2.enabled === false) {
        this._editor.removeOverlayWidget(this._stickyScrollWidget), this._sessionStore.clear(), this._enabled = false;
        return;
      } else e2.enabled && !this._enabled && (this._editor.addOverlayWidget(this._stickyScrollWidget), this._sessionStore.add(this._editor.onDidScrollChange((e3) => {
        e3.scrollTopChanged && (this._showEndForLine = void 0, this._renderStickyScroll());
      })), this._sessionStore.add(this._editor.onDidLayoutChange(() => this._onDidResize())), this._sessionStore.add(this._editor.onDidChangeModelTokens((e3) => this._onTokensChange(e3))), this._sessionStore.add(this._stickyLineCandidateProvider.onDidChangeStickyScroll(() => {
        this._showEndForLine = void 0, this._renderStickyScroll();
      })), this._enabled = true);
      let t2 = this._editor.getOption(68);
      t2.renderType === 2 && this._sessionStore.add(this._editor.onDidChangeCursorPosition(() => {
        this._showEndForLine = void 0, this._renderStickyScroll(0);
      }));
    }
    _readConfigurationChange(e2) {
      (e2.hasChanged(116) || e2.hasChanged(73) || e2.hasChanged(67) || e2.hasChanged(111) || e2.hasChanged(68)) && this._readConfiguration(), e2.hasChanged(68) && this._renderStickyScroll(0);
    }
    _needsUpdate(e2) {
      let t2 = this._stickyScrollWidget.getCurrentLines();
      for (let n2 of t2) for (let t3 of e2.ranges) if (n2 >= t3.fromLineNumber && n2 <= t3.toLineNumber) return true;
      return false;
    }
    _onTokensChange(e2) {
      this._needsUpdate(e2) && this._renderStickyScroll(0);
    }
    _onDidResize() {
      let e2 = this._editor.getLayoutInfo(), t2 = e2.height / this._editor.getOption(67);
      this._maxStickyLines = Math.round(t2 * 0.25);
    }
    async _renderStickyScroll(e2) {
      let t2 = this._editor.getModel();
      if (!t2 || t2.isTooLargeForTokenization()) {
        this._resetState();
        return;
      }
      let n2 = this._updateAndGetMinRebuildFromLine(e2), r2 = this._stickyLineCandidateProvider.getVersionId(), i2 = r2 === void 0 || r2 === t2.getVersionId();
      if (i2) if (!this._focused) await this._updateState(n2);
      else if (this._focusedStickyElementIndex === -1) await this._updateState(n2), this._focusedStickyElementIndex = this._stickyScrollWidget.lineNumberCount - 1, this._focusedStickyElementIndex !== -1 && this._stickyScrollWidget.focusLineWithIndex(this._focusedStickyElementIndex);
      else {
        let e3 = this._stickyScrollWidget.lineNumbers[this._focusedStickyElementIndex];
        if (await this._updateState(n2), this._stickyScrollWidget.lineNumberCount === 0) this._focusedStickyElementIndex = -1;
        else {
          let t3 = this._stickyScrollWidget.lineNumbers.includes(e3);
          t3 || (this._focusedStickyElementIndex = this._stickyScrollWidget.lineNumberCount - 1), this._stickyScrollWidget.focusLineWithIndex(this._focusedStickyElementIndex);
        }
      }
    }
    _updateAndGetMinRebuildFromLine(e2) {
      if (e2 !== void 0) {
        let t2 = this._minRebuildFromLine === void 0 ? 1 / 0 : this._minRebuildFromLine;
        this._minRebuildFromLine = Math.min(e2, t2);
      }
      return this._minRebuildFromLine;
    }
    async _updateState(e2) {
      var _a3;
      this._minRebuildFromLine = void 0, this._foldingModel = await ((_a3 = jS.get(this._editor)) == null ? void 0 : _a3.getFoldingModel()) ?? void 0, this._widgetState = this.findScrollWidgetState();
      let t2 = this._widgetState.startLineNumbers.length > 0;
      this._stickyScrollVisibleContextKey.set(t2), this._stickyScrollWidget.setState(this._widgetState, this._foldingModel, e2);
    }
    async _resetState() {
      this._minRebuildFromLine = void 0, this._foldingModel = void 0, this._widgetState = iN.Empty, this._stickyScrollVisibleContextKey.set(false), this._stickyScrollWidget.setState(void 0, void 0);
    }
    findScrollWidgetState() {
      let e2 = this._editor.getOption(67), t2 = Math.min(this._maxStickyLines, this._editor.getOption(116).maxLineCount), n2 = this._editor.getScrollTop(), r2 = 0, i2 = [], a2 = [], o2 = this._editor.getVisibleRanges();
      if (o2.length !== 0) {
        let s2 = new pN(o2[0].startLineNumber, o2[o2.length - 1].endLineNumber), c2 = this._stickyLineCandidateProvider.getCandidateStickyLinesIntersecting(s2);
        for (let o3 of c2) {
          let s3 = o3.startLineNumber, c3 = o3.endLineNumber, l2 = o3.nestingDepth;
          if (c3 - s3 > 0) {
            let o4 = (l2 - 1) * e2, u2 = l2 * e2, d2 = this._editor.getBottomForLineNumber(s3) - n2, f2 = this._editor.getTopForLineNumber(c3) - n2, p2 = this._editor.getBottomForLineNumber(c3) - n2;
            if (o4 > f2 && o4 <= p2) {
              i2.push(s3), a2.push(c3 + 1), r2 = p2 - u2;
              break;
            } else u2 > d2 && u2 <= p2 && (i2.push(s3), a2.push(c3 + 1));
            if (i2.length === t2) break;
          }
        }
      }
      return this._endLineNumbers = a2, new iN(i2, a2, r2, this._showEndForLine);
    }
    dispose() {
      super.dispose(), this._sessionStore.dispose();
    }
  }, MN = _ob, _ob.ID = `store.contrib.stickyScrollController`, _ob);
  NN = MN = AN([
    jN(1, ht),
    jN(2, A),
    jN(3, k),
    jN(4, Tt),
    jN(5, Et),
    jN(6, O)
  ], NN);
  var PN = class extends o {
    constructor() {
      super({
        id: `editor.action.toggleStickyScroll`,
        title: {
          ...W(`toggleEditorStickyScroll`, `Toggle Editor Sticky Scroll`),
          mnemonicTitle: U({
            key: `mitoggleStickyScroll`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Toggle Editor Sticky Scroll`)
        },
        metadata: {
          description: W(`toggleEditorStickyScroll.description`, `Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport`)
        },
        category: rN.View,
        toggled: {
          condition: b.equals(`config.editor.stickyScroll.enabled`, true),
          title: U(`stickyScroll`, `Sticky Scroll`),
          mnemonicTitle: U({
            key: `miStickyScroll`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Sticky Scroll`)
        },
        menu: [
          {
            id: j.CommandPalette
          },
          {
            id: j.MenubarAppearanceMenu,
            group: `4_editor`,
            order: 3
          },
          {
            id: j.StickyScrollContext
          }
        ]
      });
    }
    async run(e2) {
      let t2 = e2.get(D), n2 = !t2.getValue(`editor.stickyScroll.enabled`);
      return t2.updateValue(`editor.stickyScroll.enabled`, n2);
    }
  };
  const FN = 100;
  var IN = class extends ke {
    constructor() {
      super({
        id: `editor.action.focusStickyScroll`,
        title: {
          ...W(`focusStickyScroll`, `Focus on the editor sticky scroll`),
          mnemonicTitle: U({
            key: `mifocusStickyScroll`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Focus Sticky Scroll`)
        },
        precondition: b.and(b.has(`config.editor.stickyScroll.enabled`), T.stickyScrollVisible),
        menu: [
          {
            id: j.CommandPalette
          }
        ]
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = NN.get(t2)) == null ? void 0 : _a3.focus();
    }
  }, LN = class extends ke {
    constructor() {
      super({
        id: `editor.action.selectNextStickyScrollLine`,
        title: W(`selectNextStickyScrollLine.title`, `Select the next editor sticky scroll line`),
        precondition: T.stickyScrollFocused.isEqualTo(true),
        keybinding: {
          weight: FN,
          primary: 18
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = NN.get(t2)) == null ? void 0 : _a3.focusNext();
    }
  }, RN = class extends ke {
    constructor() {
      super({
        id: `editor.action.selectPreviousStickyScrollLine`,
        title: W(`selectPreviousStickyScrollLine.title`, `Select the previous sticky scroll line`),
        precondition: T.stickyScrollFocused.isEqualTo(true),
        keybinding: {
          weight: FN,
          primary: 16
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = NN.get(t2)) == null ? void 0 : _a3.focusPrevious();
    }
  }, zN = class extends ke {
    constructor() {
      super({
        id: `editor.action.goToFocusedStickyScrollLine`,
        title: W(`goToFocusedStickyScrollLine.title`, `Go to the focused sticky scroll line`),
        precondition: T.stickyScrollFocused.isEqualTo(true),
        keybinding: {
          weight: FN,
          primary: 3
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = NN.get(t2)) == null ? void 0 : _a3.goToFocused();
    }
  }, BN = class extends ke {
    constructor() {
      super({
        id: `editor.action.selectEditor`,
        title: W(`selectEditor.title`, `Select Editor`),
        precondition: T.stickyScrollFocused.isEqualTo(true),
        keybinding: {
          weight: FN,
          primary: 9
        }
      });
    }
    runEditorCommand(e2, t2) {
      var _a3;
      (_a3 = NN.get(t2)) == null ? void 0 : _a3.selectEditor();
    }
  };
  X(NN.ID, NN, 1), K(PN), K(IN), K(RN), K(LN), K(zN), K(BN);
  var VN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, HN = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, UN = class {
    constructor(e2, t2, n2, r2, i2, a2) {
      this.range = e2, this.insertText = t2, this.filterText = n2, this.additionalTextEdits = r2, this.command = i2, this.completion = a2;
    }
  };
  let WN = class extends or {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(i2.disposable), this.model = e2, this.line = t2, this.word = n2, this.completionModel = r2, this._suggestMemoryService = a2;
    }
    canBeReused(e2, t2, n2) {
      return this.model === e2 && this.line === t2 && this.word.word.length > 0 && this.word.startColumn === n2.startColumn && this.word.endColumn < n2.endColumn && this.completionModel.getIncompleteProvider().size === 0;
    }
    get items() {
      let e2 = [], { items: t2 } = this.completionModel, n2 = this._suggestMemoryService.select(this.model, {
        lineNumber: this.line,
        column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta
      }, t2), r2 = ln.slice(t2, n2), i2 = ln.slice(t2, 0, n2), a2 = 5;
      for (let t3 of ln.concat(r2, i2)) {
        if (t3.score === Je.Default) continue;
        let n3 = new P(t3.editStart.lineNumber, t3.editStart.column, t3.editInsertEnd.lineNumber, t3.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta), r3 = t3.completion.insertTextRules && t3.completion.insertTextRules & 4 ? {
          snippet: t3.completion.insertText
        } : t3.completion.insertText;
        e2.push(new UN(n3, r3, t3.filterTextLow ?? t3.labelLow, t3.completion.additionalTextEdits, t3.completion.command, t3)), a2-- >= 0 && t3.resolve(m.None);
      }
      return e2;
    }
  };
  WN = VN([
    HN(5, lT)
  ], WN);
  let GN = class extends S {
    constructor(e2, t2, n2, r2) {
      super(), this._languageFeatureService = e2, this._clipboardService = t2, this._suggestMemoryService = n2, this._editorService = r2, this._store.add(e2.inlineCompletionsProvider.register(`*`, this));
    }
    async provideInlineCompletions(e2, t2, n2, r2) {
      var _a3;
      if (n2.selectedSuggestionInfo) return;
      let i2;
      for (let t3 of this._editorService.listCodeEditors()) if (t3.getModel() === e2) {
        i2 = t3;
        break;
      }
      if (!i2) return;
      let a2 = i2.getOption(90);
      if (Sw.isAllOff(a2)) return;
      e2.tokenization.tokenizeIfCheap(t2.lineNumber);
      let o2 = e2.tokenization.getLineTokens(t2.lineNumber), s2 = o2.getStandardTokenType(o2.findTokenIndexAtOffset(Math.max(t2.column - 1 - 1, 0)));
      if (Sw.valueFor(a2, s2) !== `inline`) return;
      let c2 = e2.getWordAtPosition(t2), l2;
      if ((c2 == null ? void 0 : c2.word) || (l2 = this._getTriggerCharacterInfo(e2, t2)), !(c2 == null ? void 0 : c2.word) && !l2 || (c2 || (c2 = e2.getWordUntilPosition(t2)), c2.endColumn !== t2.column)) return;
      let u2, d2 = e2.getValueInRange(new P(t2.lineNumber, 1, t2.lineNumber, t2.column));
      if (!l2 && ((_a3 = this._lastResult) == null ? void 0 : _a3.canBeReused(e2, t2.lineNumber, c2))) {
        let e3 = new xT(d2, t2.column - this._lastResult.word.endColumn);
        this._lastResult.completionModel.lineContext = e3, this._lastResult.acquire(), u2 = this._lastResult;
      } else {
        let n3 = await hw(this._languageFeatureService.completionProvider, e2, t2, new dw(void 0, kT.createSuggestFilter(i2).itemKind, l2 == null ? void 0 : l2.providers), l2 && {
          triggerKind: 1,
          triggerCharacter: l2.ch
        }, r2), a3;
        n3.needsClipboard && (a3 = await this._clipboardService.readText());
        let o3 = new ST(n3.items, t2.column, new xT(d2, 0), bT.None, i2.getOption(119), i2.getOption(113), {
          boostFullMatch: false,
          firstMatchCanBeWeak: false
        }, a3);
        u2 = new WN(e2, t2.lineNumber, c2, o3, n3, this._suggestMemoryService);
      }
      return this._lastResult = u2, u2;
    }
    handleItemDidShow(e2, t2) {
      t2.completion.resolve(m.None);
    }
    freeInlineCompletions(e2) {
      e2.release();
    }
    _getTriggerCharacterInfo(e2, t2) {
      var _a3;
      let n2 = e2.getValueInRange(P.fromPositions({
        lineNumber: t2.lineNumber,
        column: t2.column - 1
      }, t2)), r2 = /* @__PURE__ */ new Set();
      for (let t3 of this._languageFeatureService.completionProvider.all(e2)) ((_a3 = t3.triggerCharacters) == null ? void 0 : _a3.includes(n2)) && r2.add(t3);
      if (r2.size !== 0) return {
        providers: r2,
        ch: n2
      };
    }
  };
  GN = VN([
    HN(0, A),
    HN(1, ft),
    HN(2, lT),
    HN(3, pt)
  ], GN), sl(GN);
  var KN = class extends w {
    constructor() {
      super({
        id: `editor.action.forceRetokenize`,
        label: U(`forceRetokenize`, `Developer: Force Retokenize`),
        alias: `Developer: Force Retokenize`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      if (!t2.hasModel()) return;
      let n2 = t2.getModel();
      n2.tokenization.resetTokenization();
      let r2 = new Fr();
      n2.tokenization.forceTokenization(n2.getLineCount()), r2.stop(), console.log(`tokenization took ${r2.elapsed()}`);
    }
  };
  J(KN);
  var qN = (_pb = class extends o {
    constructor() {
      super({
        id: _pb.ID,
        title: W({
          key: `toggle.tabMovesFocus`,
          comment: [
            `Turn on/off use of tab key for moving focus around VS Code`
          ]
        }, `Toggle Tab Key Moves Focus`),
        precondition: void 0,
        keybinding: {
          primary: 2091,
          mac: {
            primary: 1323
          },
          weight: 100
        },
        metadata: {
          description: W(`tabMovesFocusDescriptions`, `Determines whether the tab key moves focus around the workbench or inserts the tab character in the current editor. This is also called tab trapping, tab navigation, or tab focus mode.`)
        },
        f1: true
      });
    }
    run() {
      let e2 = Br.getTabFocusMode(), t2 = !e2;
      Br.setTabFocusMode(t2), Ci(t2 ? U(`toggle.tabMovesFocus.on`, `Pressing Tab will now move focus to the next focusable element`) : U(`toggle.tabMovesFocus.off`, `Pressing Tab will now insert the tab character`));
    }
  }, _pb.ID = `editor.action.toggleTabFocusMode`, _pb);
  K(qN);
  var JN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, YN = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let XN = class extends S {
    get enabled() {
      return this._enabled;
    }
    set enabled(e2) {
      e2 ? (this.el.setAttribute(`aria-disabled`, `false`), this.el.tabIndex = 0, this.el.style.pointerEvents = `auto`, this.el.style.opacity = `1`, this.el.style.cursor = `pointer`, this._enabled = false) : (this.el.setAttribute(`aria-disabled`, `true`), this.el.tabIndex = -1, this.el.style.pointerEvents = `none`, this.el.style.opacity = `0.4`, this.el.style.cursor = `default`, this._enabled = true), this._enabled = e2;
    }
    constructor(e2, t2, n2 = {}, i2, a2) {
      super(), this._link = t2, this._hoverService = i2, this._enabled = true, this.el = B(e2, r(`a.monaco-link`, {
        tabIndex: t2.tabIndex ?? 0,
        href: t2.href
      }, t2.label)), this.hoverDelegate = n2.hoverDelegate ?? Bo(`mouse`), this.setTooltip(t2.title), this.el.setAttribute(`role`, `button`);
      let o2 = this._register(new we(this.el, `click`)), s2 = this._register(new we(this.el, `keypress`)), c2 = ze.chain(s2.event, (e3) => e3.map((e4) => new Nr(e4)).filter((e4) => e4.keyCode === 3)), l2 = this._register(new we(this.el, Ve.Tap)).event;
      this._register(Xe.addTarget(this.el));
      let u2 = ze.any(o2.event, c2, l2);
      this._register(u2((e3) => {
        this.enabled && (Be.stop(e3, true), (n2 == null ? void 0 : n2.opener) ? n2.opener(this._link.href) : a2.open(this._link.href, {
          allowCommands: true
        }));
      })), this.enabled = true;
    }
    setTooltip(e2) {
      this.hoverDelegate.showNativeHover ? this.el.title = e2 ?? `` : !this.hover && e2 ? this.hover = this._register(this._hoverService.setupManagedHover(this.hoverDelegate, this.el, e2)) : this.hover && this.hover.update(e2);
    }
  };
  XN = JN([
    YN(3, St),
    YN(4, It)
  ], XN);
  var ZN = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, QN = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const $N = 26;
  let eP = class extends S {
    constructor(e2, t2) {
      super(), this._editor = e2, this.instantiationService = t2, this.banner = this._register(this.instantiationService.createInstance(tP));
    }
    hide() {
      this._editor.setBanner(null, 0), this.banner.clear();
    }
    show(e2) {
      this.banner.show({
        ...e2,
        onClose: () => {
          var _a3;
          this.hide(), (_a3 = e2.onClose) == null ? void 0 : _a3.call(e2);
        }
      }), this._editor.setBanner(this.banner.element, $N);
    }
  };
  eP = ZN([
    QN(1, k)
  ], eP);
  let tP = class extends S {
    constructor(e2) {
      super(), this.instantiationService = e2, this.markdownRenderer = this.instantiationService.createInstance(En, {}), this.element = r(`div.editor-banner`), this.element.tabIndex = 0;
    }
    getAriaLabel(e2) {
      if (e2.ariaLabel) return e2.ariaLabel;
      if (typeof e2.message == `string`) return e2.message;
    }
    getBannerMessage(e2) {
      if (typeof e2 == `string`) {
        let t2 = r(`span`);
        return t2.innerText = e2, t2;
      }
      return this.markdownRenderer.render(e2).element;
    }
    clear() {
      Ui(this.element);
    }
    show(e2) {
      Ui(this.element);
      let t2 = this.getAriaLabel(e2);
      t2 && this.element.setAttribute(`aria-label`, t2);
      let n2 = B(this.element, r(`div.icon-container`));
      n2.setAttribute(`aria-hidden`, `true`), e2.icon && n2.appendChild(r(`div${L.asCSSSelector(e2.icon)}`));
      let i2 = B(this.element, r(`div.message-container`));
      if (i2.setAttribute(`aria-hidden`, `true`), i2.appendChild(this.getBannerMessage(e2.message)), this.messageActionsContainer = B(this.element, r(`div.message-actions-container`)), e2.actions) for (let t3 of e2.actions) this._register(this.instantiationService.createInstance(XN, this.messageActionsContainer, {
        ...t3,
        tabIndex: -1
      }, {}));
      let o2 = B(this.element, r(`div.action-container`));
      this.actionBar = this._register(new s(o2)), this.actionBar.push(this._register(new a(`banner.close`, `Close Banner`, L.asClassName($l), true, () => {
        typeof e2.onClose == `function` && e2.onClose();
      })), {
        icon: true,
        label: false
      }), this.actionBar.setFocusable(false);
    }
  };
  tP = ZN([
    QN(0, k)
  ], tP);
  var nP = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, rP = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const iP = cl(`extensions-warning-message`, _.warning, U(`warningIcon`, `Icon shown with a warning message in the extensions editor.`));
  let aP = (_qb = class extends S {
    constructor(e2, t2, n2, r2) {
      super(), this._editor = e2, this._editorWorkerService = t2, this._workspaceTrustService = n2, this._highlighter = null, this._bannerClosed = false, this._updateState = (e3) => {
        if (e3 && e3.hasMore) {
          if (this._bannerClosed) return;
          let t3 = Math.max(e3.ambiguousCharacterCount, e3.nonBasicAsciiCharacterCount, e3.invisibleCharacterCount), n3;
          if (e3.nonBasicAsciiCharacterCount >= t3) n3 = {
            message: U(`unicodeHighlighting.thisDocumentHasManyNonBasicAsciiUnicodeCharacters`, `This document contains many non-basic ASCII unicode characters`),
            command: new bP()
          };
          else if (e3.ambiguousCharacterCount >= t3) n3 = {
            message: U(`unicodeHighlighting.thisDocumentHasManyAmbiguousUnicodeCharacters`, `This document contains many ambiguous unicode characters`),
            command: new vP()
          };
          else if (e3.invisibleCharacterCount >= t3) n3 = {
            message: U(`unicodeHighlighting.thisDocumentHasManyInvisibleUnicodeCharacters`, `This document contains many invisible unicode characters`),
            command: new yP()
          };
          else throw Error(`Unreachable`);
          this._bannerController.show({
            id: `unicodeHighlightBanner`,
            message: n3.message,
            icon: iP,
            actions: [
              {
                label: n3.command.shortLabel,
                href: `command:${n3.command.id}`
              }
            ],
            onClose: () => {
              this._bannerClosed = true;
            }
          });
        } else this._bannerController.hide();
      }, this._bannerController = this._register(r2.createInstance(eP, e2)), this._register(this._editor.onDidChangeModel(() => {
        this._bannerClosed = false, this._updateHighlighter();
      })), this._options = e2.getOption(126), this._register(n2.onDidChangeTrust((e3) => {
        this._updateHighlighter();
      })), this._register(e2.onDidChangeConfiguration((t3) => {
        t3.hasChanged(126) && (this._options = e2.getOption(126), this._updateHighlighter());
      })), this._updateHighlighter();
    }
    dispose() {
      this._highlighter && (this._highlighter.dispose(), this._highlighter = null), super.dispose();
    }
    _updateHighlighter() {
      if (this._updateState(null), this._highlighter && (this._highlighter.dispose(), this._highlighter = null), !this._editor.hasModel()) return;
      let e2 = oP(this._workspaceTrustService.isWorkspaceTrusted(), this._options);
      if ([
        e2.nonBasicASCII,
        e2.ambiguousCharacters,
        e2.invisibleCharacters
      ].every((e3) => e3 === false)) return;
      let t2 = {
        nonBasicASCII: e2.nonBasicASCII,
        ambiguousCharacters: e2.ambiguousCharacters,
        invisibleCharacters: e2.invisibleCharacters,
        includeComments: e2.includeComments,
        includeStrings: e2.includeStrings,
        allowedCodePoints: Object.keys(e2.allowedCharacters).map((e3) => e3.codePointAt(0)),
        allowedLocales: Object.keys(e2.allowedLocales).map((e3) => {
          if (e3 === `_os`) {
            let e4 = new Intl.NumberFormat().resolvedOptions().locale;
            return e4;
          } else if (e3 === `_vscode`) return fc;
          return e3;
        })
      };
      this._editorWorkerService.canComputeUnicodeHighlights(this._editor.getModel().uri) ? this._highlighter = new sP(this._editor, t2, this._updateState, this._editorWorkerService) : this._highlighter = new cP(this._editor, t2, this._updateState);
    }
    getDecorationInfo(e2) {
      return this._highlighter ? this._highlighter.getDecorationInfo(e2) : null;
    }
  }, _qb.ID = `editor.contrib.unicodeHighlighter`, _qb);
  aP = nP([
    rP(1, bt),
    rP(2, qt),
    rP(3, k)
  ], aP);
  function oP(e2, t2) {
    return {
      nonBasicASCII: t2.nonBasicASCII === fs ? !e2 : t2.nonBasicASCII,
      ambiguousCharacters: t2.ambiguousCharacters,
      invisibleCharacters: t2.invisibleCharacters,
      includeComments: t2.includeComments === fs ? !e2 : t2.includeComments,
      includeStrings: t2.includeStrings === fs ? !e2 : t2.includeStrings,
      allowedCharacters: t2.allowedCharacters,
      allowedLocales: t2.allowedLocales
    };
  }
  let sP = class extends S {
    constructor(e2, t2, n2, r2) {
      super(), this._editor = e2, this._options = t2, this._updateState = n2, this._editorWorkerService = r2, this._model = this._editor.getModel(), this._decorations = this._editor.createDecorationsCollection(), this._updateSoon = this._register(new hr(() => this._update(), 250)), this._register(this._editor.onDidChangeModelContent(() => {
        this._updateSoon.schedule();
      })), this._updateSoon.schedule();
    }
    dispose() {
      this._decorations.clear(), super.dispose();
    }
    _update() {
      if (this._model.isDisposed()) return;
      if (!this._model.mightContainNonBasicASCII()) {
        this._decorations.clear();
        return;
      }
      let e2 = this._model.getVersionId();
      this._editorWorkerService.computedUnicodeHighlights(this._model.uri, this._options).then((t2) => {
        if (this._model.isDisposed() || this._model.getVersionId() !== e2) return;
        this._updateState(t2);
        let n2 = [];
        if (!t2.hasMore) for (let e3 of t2.ranges) n2.push({
          range: e3,
          options: hP.instance.getDecorationFromOptions(this._options)
        });
        this._decorations.set(n2);
      });
    }
    getDecorationInfo(e2) {
      if (!this._decorations.has(e2)) return null;
      let t2 = this._editor.getModel();
      if (!Zs(t2, e2)) return null;
      let n2 = t2.getValueInRange(e2.range);
      return {
        reason: mP(n2, this._options),
        inComment: Ys(t2, e2),
        inString: Xs(t2, e2)
      };
    }
  };
  sP = nP([
    rP(3, bt)
  ], sP);
  var cP = class extends S {
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._options = t2, this._updateState = n2, this._model = this._editor.getModel(), this._decorations = this._editor.createDecorationsCollection(), this._updateSoon = this._register(new hr(() => this._update(), 250)), this._register(this._editor.onDidLayoutChange(() => {
        this._updateSoon.schedule();
      })), this._register(this._editor.onDidScrollChange(() => {
        this._updateSoon.schedule();
      })), this._register(this._editor.onDidChangeHiddenAreas(() => {
        this._updateSoon.schedule();
      })), this._register(this._editor.onDidChangeModelContent(() => {
        this._updateSoon.schedule();
      })), this._updateSoon.schedule();
    }
    dispose() {
      this._decorations.clear(), super.dispose();
    }
    _update() {
      if (this._model.isDisposed()) return;
      if (!this._model.mightContainNonBasicASCII()) {
        this._decorations.clear();
        return;
      }
      let e2 = this._editor.getVisibleRanges(), t2 = [], n2 = {
        ranges: [],
        ambiguousCharacterCount: 0,
        invisibleCharacterCount: 0,
        nonBasicAsciiCharacterCount: 0,
        hasMore: false
      };
      for (let t3 of e2) {
        let e3 = ni.computeUnicodeHighlights(this._model, this._options, t3);
        for (let t4 of e3.ranges) n2.ranges.push(t4);
        n2.ambiguousCharacterCount += n2.ambiguousCharacterCount, n2.invisibleCharacterCount += n2.invisibleCharacterCount, n2.nonBasicAsciiCharacterCount += n2.nonBasicAsciiCharacterCount, n2.hasMore = n2.hasMore || e3.hasMore;
      }
      if (!n2.hasMore) for (let e3 of n2.ranges) t2.push({
        range: e3,
        options: hP.instance.getDecorationFromOptions(this._options)
      });
      this._updateState(n2), this._decorations.set(t2);
    }
    getDecorationInfo(e2) {
      if (!this._decorations.has(e2)) return null;
      let t2 = this._editor.getModel(), n2 = t2.getValueInRange(e2.range);
      return Zs(t2, e2) ? {
        reason: mP(n2, this._options),
        inComment: Ys(t2, e2),
        inString: Xs(t2, e2)
      } : null;
    }
  };
  const lP = U(`unicodeHighlight.configureUnicodeHighlightOptions`, `Configure Unicode Highlight Options`);
  let uP = class {
    constructor(e2, t2, n2) {
      this._editor = e2, this._languageService = t2, this._openerService = n2, this.hoverOrdinal = 5;
    }
    computeSync(e2, t2) {
      if (!this._editor.hasModel() || e2.type !== 1) return [];
      let n2 = this._editor.getModel(), r2 = this._editor.getContribution(aP.ID);
      if (!r2) return [];
      let i2 = [], a2 = /* @__PURE__ */ new Set(), o2 = 300;
      for (let e3 of t2) {
        let t3 = r2.getDecorationInfo(e3);
        if (!t3) continue;
        let s2 = n2.getValueInRange(e3.range), c2 = s2.codePointAt(0), l2 = fP(c2), u2;
        switch (t3.reason.kind) {
          case 0:
            u2 = xs(t3.reason.confusableWith) ? U(`unicodeHighlight.characterIsAmbiguousASCII`, `The character {0} could be confused with the ASCII character {1}, which is more common in source code.`, l2, fP(t3.reason.confusableWith.codePointAt(0))) : U(`unicodeHighlight.characterIsAmbiguous`, `The character {0} could be confused with the character {1}, which is more common in source code.`, l2, fP(t3.reason.confusableWith.codePointAt(0)));
            break;
          case 1:
            u2 = U(`unicodeHighlight.characterIsInvisible`, `The character {0} is invisible.`, l2);
            break;
          case 2:
            u2 = U(`unicodeHighlight.characterIsNonBasicAscii`, `The character {0} is not a basic ASCII character.`, l2);
            break;
        }
        if (a2.has(u2)) continue;
        a2.add(u2);
        let d2 = {
          codePoint: c2,
          reason: t3.reason,
          inComment: t3.inComment,
          inString: t3.inString
        }, f2 = U(`unicodeHighlight.adjustSettings`, `Adjust settings`), p2 = `command:${xP.ID}?${encodeURIComponent(JSON.stringify(d2))}`, m2 = new Dn(``, true).appendMarkdown(u2).appendText(` `).appendLink(p2, f2, lP);
        i2.push(new Hg(this, e3.range, [
          m2
        ], false, o2++));
      }
      return i2;
    }
    renderHoverParts(e2, t2) {
      return qg(e2, t2, this._editor, this._languageService, this._openerService);
    }
  };
  uP = nP([
    rP(1, Dt),
    rP(2, It)
  ], uP);
  function dP(e2) {
    return `U+${e2.toString(16).padStart(4, `0`)}`;
  }
  function fP(e2) {
    let t2 = `\`${dP(e2)}\``;
    return an.isInvisibleCharacter(e2) || (t2 += ` "${`${pP(e2)}`}"`), t2;
  }
  function pP(e2) {
    return e2 === 96 ? "`` ` ``" : "`" + String.fromCodePoint(e2) + "`";
  }
  function mP(e2, t2) {
    return ni.computeUnicodeHighlightReason(e2, t2);
  }
  var hP = (_rb = class {
    constructor() {
      this.map = /* @__PURE__ */ new Map();
    }
    getDecorationFromOptions(e2) {
      return this.getDecoration(!e2.includeComments, !e2.includeStrings);
    }
    getDecoration(e2, t2) {
      let n2 = `${e2}${t2}`, r2 = this.map.get(n2);
      return r2 || (r2 = M.createDynamic({
        description: `unicode-highlight`,
        stickiness: 1,
        className: `unicode-highlight`,
        showIfCollapsed: true,
        overviewRuler: null,
        minimap: null,
        hideInCommentTokens: e2,
        hideInStringTokens: t2
      }), this.map.set(n2, r2)), r2;
    }
  }, _rb.instance = new _rb(), _rb), gP = class extends w {
    constructor() {
      super({
        id: vP.ID,
        label: U(`action.unicodeHighlight.disableHighlightingInComments`, `Disable highlighting of characters in comments`),
        alias: `Disable highlighting of characters in comments`,
        precondition: void 0
      }), this.shortLabel = U(`unicodeHighlight.disableHighlightingInComments.shortLabel`, `Disable Highlight In Comments`);
    }
    async run(e2, t2, n2) {
      let r2 = e2 == null ? void 0 : e2.get(D);
      r2 && this.runAction(r2);
    }
    async runAction(e2) {
      await e2.updateValue(Yl.includeComments, false, 2);
    }
  }, _P = class extends w {
    constructor() {
      super({
        id: vP.ID,
        label: U(`action.unicodeHighlight.disableHighlightingInStrings`, `Disable highlighting of characters in strings`),
        alias: `Disable highlighting of characters in strings`,
        precondition: void 0
      }), this.shortLabel = U(`unicodeHighlight.disableHighlightingInStrings.shortLabel`, `Disable Highlight In Strings`);
    }
    async run(e2, t2, n2) {
      let r2 = e2 == null ? void 0 : e2.get(D);
      r2 && this.runAction(r2);
    }
    async runAction(e2) {
      await e2.updateValue(Yl.includeStrings, false, 2);
    }
  }, vP = (_sb = class extends w {
    constructor() {
      super({
        id: _sb.ID,
        label: U(`action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters`, `Disable highlighting of ambiguous characters`),
        alias: `Disable highlighting of ambiguous characters`,
        precondition: void 0
      }), this.shortLabel = U(`unicodeHighlight.disableHighlightingOfAmbiguousCharacters.shortLabel`, `Disable Ambiguous Highlight`);
    }
    async run(e2, t2, n2) {
      let r2 = e2 == null ? void 0 : e2.get(D);
      r2 && this.runAction(r2);
    }
    async runAction(e2) {
      await e2.updateValue(Yl.ambiguousCharacters, false, 2);
    }
  }, _sb.ID = `editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters`, _sb), yP = (_tb = class extends w {
    constructor() {
      super({
        id: _tb.ID,
        label: U(`action.unicodeHighlight.disableHighlightingOfInvisibleCharacters`, `Disable highlighting of invisible characters`),
        alias: `Disable highlighting of invisible characters`,
        precondition: void 0
      }), this.shortLabel = U(`unicodeHighlight.disableHighlightingOfInvisibleCharacters.shortLabel`, `Disable Invisible Highlight`);
    }
    async run(e2, t2, n2) {
      let r2 = e2 == null ? void 0 : e2.get(D);
      r2 && this.runAction(r2);
    }
    async runAction(e2) {
      await e2.updateValue(Yl.invisibleCharacters, false, 2);
    }
  }, _tb.ID = `editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters`, _tb), bP = (_ub = class extends w {
    constructor() {
      super({
        id: _ub.ID,
        label: U(`action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters`, `Disable highlighting of non basic ASCII characters`),
        alias: `Disable highlighting of non basic ASCII characters`,
        precondition: void 0
      }), this.shortLabel = U(`unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters.shortLabel`, `Disable Non ASCII Highlight`);
    }
    async run(e2, t2, n2) {
      let r2 = e2 == null ? void 0 : e2.get(D);
      r2 && this.runAction(r2);
    }
    async runAction(e2) {
      await e2.updateValue(Yl.nonBasicASCII, false, 2);
    }
  }, _ub.ID = `editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters`, _ub), xP = (_vb = class extends w {
    constructor() {
      super({
        id: _vb.ID,
        label: U(`action.unicodeHighlight.showExcludeOptions`, `Show Exclude Options`),
        alias: `Show Exclude Options`,
        precondition: void 0
      });
    }
    async run(e2, t2, n2) {
      let { codePoint: r2, reason: i2, inString: a2, inComment: o2 } = n2, s2 = String.fromCodePoint(r2), c2 = e2.get(Rt), l2 = e2.get(D);
      function u2(e3) {
        return an.isInvisibleCharacter(e3) ? U(`unicodeHighlight.excludeInvisibleCharFromBeingHighlighted`, `Exclude {0} (invisible character) from being highlighted`, dP(e3)) : U(`unicodeHighlight.excludeCharFromBeingHighlighted`, `Exclude {0} from being highlighted`, `${dP(e3)} "${s2}"`);
      }
      let d2 = [];
      if (i2.kind === 0) for (let e3 of i2.notAmbiguousInLocales) d2.push({
        label: U(`unicodeHighlight.allowCommonCharactersInLanguage`, `Allow unicode characters that are more common in the language "{0}".`, e3),
        run: async () => {
          CP(l2, [
            e3
          ]);
        }
      });
      if (d2.push({
        label: u2(r2),
        run: () => SP(l2, [
          r2
        ])
      }), o2) {
        let e3 = new gP();
        d2.push({
          label: e3.label,
          run: async () => e3.runAction(l2)
        });
      } else if (a2) {
        let e3 = new _P();
        d2.push({
          label: e3.label,
          run: async () => e3.runAction(l2)
        });
      }
      if (i2.kind === 0) {
        let e3 = new vP();
        d2.push({
          label: e3.label,
          run: async () => e3.runAction(l2)
        });
      } else if (i2.kind === 1) {
        let e3 = new yP();
        d2.push({
          label: e3.label,
          run: async () => e3.runAction(l2)
        });
      } else if (i2.kind === 2) {
        let e3 = new bP();
        d2.push({
          label: e3.label,
          run: async () => e3.runAction(l2)
        });
      } else wP(i2);
      let f2 = await c2.pick(d2, {
        title: lP
      });
      f2 && await f2.run();
    }
  }, _vb.ID = `editor.action.unicodeHighlight.showExcludeOptions`, _vb);
  async function SP(e2, t2) {
    let n2 = e2.getValue(Yl.allowedCharacters), r2;
    r2 = typeof n2 == `object` && n2 ? n2 : {};
    for (let e3 of t2) r2[String.fromCodePoint(e3)] = true;
    await e2.updateValue(Yl.allowedCharacters, r2, 2);
  }
  async function CP(e2, t2) {
    var _a3;
    let n2 = (_a3 = e2.inspect(Yl.allowedLocales).user) == null ? void 0 : _a3.value, r2;
    r2 = typeof n2 == `object` && n2 ? Object.assign({}, n2) : {};
    for (let e3 of t2) r2[e3] = true;
    await e2.updateValue(Yl.allowedLocales, r2, 2);
  }
  function wP(e2) {
    throw Error(`Unexpected value: ${e2}`);
  }
  J(vP), J(yP), J(bP), J(xP), X(aP.ID, aP, 1), Dh.register(uP);
  var TP = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, EP = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  const DP = `ignoreUnusualLineTerminators`;
  function OP(e2, t2, n2) {
    e2.setModelProperty(t2.uri, DP, n2);
  }
  function kP(e2, t2) {
    return e2.getModelProperty(t2.uri, DP);
  }
  let AP = (_wb = class extends S {
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._dialogService = t2, this._codeEditorService = n2, this._isPresentingDialog = false, this._config = this._editor.getOption(127), this._register(this._editor.onDidChangeConfiguration((e3) => {
        e3.hasChanged(127) && (this._config = this._editor.getOption(127), this._checkForUnusualLineTerminators());
      })), this._register(this._editor.onDidChangeModel(() => {
        this._checkForUnusualLineTerminators();
      })), this._register(this._editor.onDidChangeModelContent((e3) => {
        e3.isUndoing || this._checkForUnusualLineTerminators();
      })), this._checkForUnusualLineTerminators();
    }
    async _checkForUnusualLineTerminators() {
      if (this._config === `off` || !this._editor.hasModel()) return;
      let e2 = this._editor.getModel();
      if (!e2.mightContainUnusualLineTerminators()) return;
      let t2 = kP(this._codeEditorService, e2);
      if (t2 === true || this._editor.getOption(92)) return;
      if (this._config === `auto`) {
        e2.removeUnusualLineTerminators(this._editor.getSelections());
        return;
      }
      if (this._isPresentingDialog) return;
      let n2;
      try {
        this._isPresentingDialog = true, n2 = await this._dialogService.confirm({
          title: U(`unusualLineTerminators.title`, `Unusual Line Terminators`),
          message: U(`unusualLineTerminators.message`, `Detected unusual line terminators`),
          detail: U(`unusualLineTerminators.detail`, `The file '{0}' contains one or more unusual line terminator characters, like Line Separator (LS) or Paragraph Separator (PS).

It is recommended to remove them from the file. This can be configured via \`editor.unusualLineTerminators\`.`, Ii(e2.uri)),
          primaryButton: U({
            key: `unusualLineTerminators.fix`,
            comment: [
              `&& denotes a mnemonic`
            ]
          }, `&&Remove Unusual Line Terminators`),
          cancelButton: U(`unusualLineTerminators.ignore`, `Ignore`)
        });
      } finally {
        this._isPresentingDialog = false;
      }
      if (!n2.confirmed) {
        OP(this._codeEditorService, e2, true);
        return;
      }
      e2.removeUnusualLineTerminators(this._editor.getSelections());
    }
  }, _wb.ID = `editor.contrib.unusualLineTerminatorsDetector`, _wb);
  AP = TP([
    EP(1, _t),
    EP(2, pt)
  ], AP), X(AP.ID, AP, 1);
  var jP = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, MP = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, NP = class {
    constructor() {
      this.selector = {
        language: `*`
      };
    }
    provideDocumentHighlights(e2, t2, n2) {
      let r2 = [], i2 = e2.getWordAtPosition({
        lineNumber: t2.lineNumber,
        column: t2.column
      });
      if (!i2) return Promise.resolve(r2);
      if (e2.isDisposed()) return;
      let a2 = e2.findMatches(i2.word, true, false, true, ti, false);
      return a2.map((e3) => ({
        range: e3.range,
        kind: Se.Text
      }));
    }
    provideMultiDocumentHighlights(e2, t2, n2, r2) {
      let i2 = new pr(), a2 = e2.getWordAtPosition({
        lineNumber: t2.lineNumber,
        column: t2.column
      });
      if (!a2) return Promise.resolve(i2);
      for (let t3 of [
        e2,
        ...n2
      ]) {
        if (t3.isDisposed()) continue;
        let e3 = t3.findMatches(a2.word, true, false, true, ti, false), n3 = e3.map((e4) => ({
          range: e4.range,
          kind: Se.Text
        }));
        n3 && i2.set(t3.uri, n3);
      }
      return i2;
    }
  };
  let PP = class extends S {
    constructor(e2) {
      super(), this._register(e2.documentHighlightProvider.register(`*`, new NP())), this._register(e2.multiDocumentHighlightProvider.register(`*`, new NP()));
    }
  };
  PP = jP([
    MP(0, A)
  ], PP);
  var FP = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, IP = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, LP, RP;
  const zP = new F(`hasWordHighlights`, false);
  function BP(e2, t2, n2, r2) {
    let i2 = e2.ordered(t2);
    return wo(i2.map((e3) => () => Promise.resolve(e3.provideDocumentHighlights(t2, n2, r2)).then(void 0, Uc)), (e3) => e3 != null).then((e3) => {
      if (e3) {
        let n3 = new pr();
        return n3.set(t2.uri, e3), n3;
      }
      return new pr();
    });
  }
  function VP(e2, t2, n2, r2, i2, a2) {
    let o2 = e2.ordered(t2);
    return wo(o2.map((e3) => () => {
      let r3 = a2.filter((e4) => Ol(e4)).filter((t3) => wl(e3.selector, t3.uri, t3.getLanguageId(), true, void 0, void 0) > 0);
      return Promise.resolve(e3.provideMultiDocumentHighlights(t2, n2, r3, i2)).then(void 0, Uc);
    }), (e3) => e3 != null);
  }
  var HP = class {
    constructor(e2, t2, n2) {
      this._model = e2, this._selection = t2, this._wordSeparators = n2, this._wordRange = this._getCurrentWordRange(e2, t2), this._result = null;
    }
    get result() {
      return this._result || (this._result = sa((e2) => this._compute(this._model, this._selection, this._wordSeparators, e2))), this._result;
    }
    _getCurrentWordRange(e2, t2) {
      let n2 = e2.getWordAtPosition(t2.getPosition());
      return n2 ? new P(t2.startLineNumber, n2.startColumn, t2.startLineNumber, n2.endColumn) : null;
    }
    isValid(e2, t2, n2) {
      let r2 = t2.startLineNumber, i2 = t2.startColumn, a2 = t2.endColumn, o2 = this._getCurrentWordRange(e2, t2), s2 = !!(this._wordRange && this._wordRange.equalsRange(o2));
      for (let e3 = 0, t3 = n2.length; !s2 && e3 < t3; e3++) {
        let t4 = n2.getRange(e3);
        t4 && t4.startLineNumber === r2 && t4.startColumn <= i2 && t4.endColumn >= a2 && (s2 = true);
      }
      return s2;
    }
    cancel() {
      this.result.cancel();
    }
  }, UP = class extends HP {
    constructor(e2, t2, n2, r2) {
      super(e2, t2, n2), this._providers = r2;
    }
    _compute(e2, t2, n2, r2) {
      return BP(this._providers, e2, t2.getPosition(), r2).then((e3) => e3 || new pr());
    }
  }, WP = class extends HP {
    constructor(e2, t2, n2, r2, i2) {
      super(e2, t2, n2), this._providers = r2, this._otherModels = i2;
    }
    _compute(e2, t2, n2, r2) {
      return VP(this._providers, e2, t2.getPosition(), n2, r2, this._otherModels).then((e3) => e3 || new pr());
    }
  };
  function GP(e2, t2, n2, r2, i2) {
    return new UP(t2, n2, i2, e2);
  }
  function KP(e2, t2, n2, r2, i2, a2) {
    return new WP(t2, n2, i2, e2, a2);
  }
  ul(`_executeDocumentHighlights`, async (e2, t2, n2) => {
    let r2 = e2.get(A), i2 = await BP(r2.documentHighlightProvider, t2, n2, m.None);
    return i2 == null ? void 0 : i2.get(t2.uri);
  });
  let qP = (_xb = class {
    constructor(e2, t2, n2, r2, i2) {
      this.toUnhook = new C(), this.workerRequestTokenId = 0, this.workerRequestCompleted = false, this.workerRequestValue = new pr(), this.lastCursorPositionChangeTime = 0, this.renderDecorationsTimer = -1, this.runDelayer = this.toUnhook.add(new ve(50)), this.editor = e2, this.providers = t2, this.multiDocumentProviders = n2, this.codeEditorService = i2, this._hasWordHighlights = zP.bindTo(r2), this._ignorePositionChangeEvent = false, this.occurrencesHighlight = this.editor.getOption(81), this.model = this.editor.getModel(), this.toUnhook.add(e2.onDidChangeCursorPosition((e3) => {
        this._ignorePositionChangeEvent || this.occurrencesHighlight !== `off` && this.runDelayer.trigger(() => {
          this._onPositionChanged(e3);
        });
      })), this.toUnhook.add(e2.onDidFocusEditorText((e3) => {
        this.occurrencesHighlight !== `off` && (this.workerRequest || this.runDelayer.trigger(() => {
          this._run();
        }));
      })), this.toUnhook.add(e2.onDidChangeModelContent((e3) => {
        Tc(this.model.uri, `output`) || this._stopAll();
      })), this.toUnhook.add(e2.onDidChangeModel((e3) => {
        !e3.newModelUrl && e3.oldModelUrl ? this._stopSingular() : LP.query && this._run();
      })), this.toUnhook.add(e2.onDidChangeConfiguration((e3) => {
        var _a3, _b3;
        let t3 = this.editor.getOption(81);
        if (this.occurrencesHighlight !== t3) switch (this.occurrencesHighlight = t3, t3) {
          case `off`:
            this._stopAll();
            break;
          case `singleFile`:
            this._stopAll((_b3 = (_a3 = LP.query) == null ? void 0 : _a3.modelInfo) == null ? void 0 : _b3.model);
            break;
          case `multiFile`:
            LP.query && this._run(true);
            break;
          default:
            console.warn(`Unknown occurrencesHighlight setting value:`, t3);
            break;
        }
      })), this.decorations = this.editor.createDecorationsCollection(), this.workerRequestTokenId = 0, this.workerRequest = null, this.workerRequestCompleted = false, this.lastCursorPositionChangeTime = 0, this.renderDecorationsTimer = -1, LP.query && this._run();
    }
    hasDecorations() {
      return this.decorations.length > 0;
    }
    restore() {
      this.occurrencesHighlight !== `off` && (this.runDelayer.cancel(), this._run());
    }
    _getSortedHighlights() {
      return this.decorations.getRanges().sort(P.compareRangesUsingStarts);
    }
    moveNext() {
      let e2 = this._getSortedHighlights(), t2 = e2.findIndex((e3) => e3.containsPosition(this.editor.getPosition())), n2 = (t2 + 1) % e2.length, r2 = e2[n2];
      try {
        this._ignorePositionChangeEvent = true, this.editor.setPosition(r2.getStartPosition()), this.editor.revealRangeInCenterIfOutsideViewport(r2);
        let t3 = this._getWord();
        if (t3) {
          let i2 = this.editor.getModel().getLineContent(r2.startLineNumber);
          Ci(`${i2}, ${n2 + 1} of ${e2.length} for '${t3.word}'`);
        }
      } finally {
        this._ignorePositionChangeEvent = false;
      }
    }
    moveBack() {
      let e2 = this._getSortedHighlights(), t2 = e2.findIndex((e3) => e3.containsPosition(this.editor.getPosition())), n2 = (t2 - 1 + e2.length) % e2.length, r2 = e2[n2];
      try {
        this._ignorePositionChangeEvent = true, this.editor.setPosition(r2.getStartPosition()), this.editor.revealRangeInCenterIfOutsideViewport(r2);
        let t3 = this._getWord();
        if (t3) {
          let i2 = this.editor.getModel().getLineContent(r2.startLineNumber);
          Ci(`${i2}, ${n2 + 1} of ${e2.length} for '${t3.word}'`);
        }
      } finally {
        this._ignorePositionChangeEvent = false;
      }
    }
    _removeSingleDecorations() {
      if (!this.editor.hasModel()) return;
      let e2 = LP.storedDecorationIDs.get(this.editor.getModel().uri);
      e2 && (this.editor.removeDecorations(e2), LP.storedDecorationIDs.delete(this.editor.getModel().uri), this.decorations.length > 0 && (this.decorations.clear(), this._hasWordHighlights.set(false)));
    }
    _removeAllDecorations(e2) {
      let t2 = this.codeEditorService.listCodeEditors(), n2 = [];
      for (let r2 of t2) {
        if (!r2.hasModel() || As(r2.getModel().uri, e2 == null ? void 0 : e2.uri)) continue;
        let t3 = LP.storedDecorationIDs.get(r2.getModel().uri);
        if (!t3) continue;
        r2.removeDecorations(t3), n2.push(r2.getModel().uri);
        let i2 = JP.get(r2);
        if (!(i2 == null ? void 0 : i2.wordHighlighter)) continue;
        i2.wordHighlighter.decorations.length > 0 && (i2.wordHighlighter.decorations.clear(), i2.wordHighlighter.workerRequest = null, i2.wordHighlighter._hasWordHighlights.set(false));
      }
      for (let e3 of n2) LP.storedDecorationIDs.delete(e3);
    }
    _stopSingular() {
      var _a3, _b3, _c3, _d3;
      this._removeSingleDecorations(), this.editor.hasTextFocus() && (((_a3 = this.editor.getModel()) == null ? void 0 : _a3.uri.scheme) !== _r.vscodeNotebookCell && ((_c3 = (_b3 = LP.query) == null ? void 0 : _b3.modelInfo) == null ? void 0 : _c3.model.uri.scheme) !== _r.vscodeNotebookCell ? (LP.query = null, this._run()) : ((_d3 = LP.query) == null ? void 0 : _d3.modelInfo) && (LP.query.modelInfo = null)), this.renderDecorationsTimer !== -1 && (clearTimeout(this.renderDecorationsTimer), this.renderDecorationsTimer = -1), this.workerRequest !== null && (this.workerRequest.cancel(), this.workerRequest = null), this.workerRequestCompleted || (this.workerRequestTokenId++, this.workerRequestCompleted = true);
    }
    _stopAll(e2) {
      this._removeAllDecorations(e2), this.renderDecorationsTimer !== -1 && (clearTimeout(this.renderDecorationsTimer), this.renderDecorationsTimer = -1), this.workerRequest !== null && (this.workerRequest.cancel(), this.workerRequest = null), this.workerRequestCompleted || (this.workerRequestTokenId++, this.workerRequestCompleted = true);
    }
    _onPositionChanged(e2) {
      var _a3;
      if (this.occurrencesHighlight === `off`) {
        this._stopAll();
        return;
      }
      if (e2.reason !== 3 && ((_a3 = this.editor.getModel()) == null ? void 0 : _a3.uri.scheme) !== _r.vscodeNotebookCell) {
        this._stopAll();
        return;
      }
      this._run();
    }
    _getWord() {
      let e2 = this.editor.getSelection(), t2 = e2.startLineNumber, n2 = e2.startColumn;
      return this.model.isDisposed() ? null : this.model.getWordAtPosition({
        lineNumber: t2,
        column: n2
      });
    }
    getOtherModelsToHighlight(e2) {
      if (!e2) return [];
      let t2 = e2.uri.scheme === _r.vscodeNotebookCell;
      if (t2) {
        let t3 = [], n3 = this.codeEditorService.listCodeEditors();
        for (let r3 of n3) {
          let n4 = r3.getModel();
          n4 && n4 !== e2 && n4.uri.scheme === _r.vscodeNotebookCell && t3.push(n4);
        }
        return t3;
      }
      let n2 = [], r2 = this.codeEditorService.listCodeEditors();
      for (let t3 of r2) {
        if (!Es(t3)) continue;
        let r3 = t3.getModel();
        if (!r3) continue;
        e2 === r3.modified && n2.push(r3.modified);
      }
      if (n2.length) return n2;
      if (this.occurrencesHighlight === `singleFile`) return [];
      for (let t3 of r2) {
        let r3 = t3.getModel(), i2 = r3 && r3 !== e2;
        i2 && n2.push(r3);
      }
      return n2;
    }
    _run(e2) {
      var _a3, _b3;
      let t2, n2 = this.editor.hasTextFocus();
      if (n2) {
        let e3 = this.editor.getSelection();
        if (!e3 || e3.startLineNumber !== e3.endLineNumber) {
          LP.query = null, this._stopAll();
          return;
        }
        let n3 = e3.startColumn, r2 = e3.endColumn, i2 = this._getWord();
        if (!i2 || i2.startColumn > n3 || i2.endColumn < r2) {
          LP.query = null, this._stopAll();
          return;
        }
        t2 = this.workerRequest && this.workerRequest.isValid(this.model, e3, this.decorations), LP.query = {
          modelInfo: {
            model: this.model,
            selection: e3
          },
          word: i2
        };
      } else if (!LP.query) {
        this._stopAll();
        return;
      }
      if (this.lastCursorPositionChangeTime = (/* @__PURE__ */ new Date()).getTime(), t2) this.workerRequestCompleted && this.renderDecorationsTimer !== -1 && (clearTimeout(this.renderDecorationsTimer), this.renderDecorationsTimer = -1, this._beginRenderDecorations());
      else if (As(this.editor.getModel().uri, (_a3 = LP.query.modelInfo) == null ? void 0 : _a3.model.uri)) {
        if (!e2) {
          let e3 = this.decorations.getRanges();
          for (let t4 of e3) if (t4.containsPosition(this.editor.getPosition())) return;
        }
        this._stopAll(e2 ? this.model : void 0);
        let t3 = ++this.workerRequestTokenId;
        this.workerRequestCompleted = false;
        let n3 = this.getOtherModelsToHighlight(this.editor.getModel());
        if (!LP.query || !LP.query.modelInfo || LP.query.modelInfo.model.isDisposed()) return;
        this.workerRequest = this.computeWithModel(LP.query.modelInfo.model, LP.query.modelInfo.selection, LP.query.word, n3), (_b3 = this.workerRequest) == null ? void 0 : _b3.result.then((e3) => {
          t3 === this.workerRequestTokenId && (this.workerRequestCompleted = true, this.workerRequestValue = e3 || [], this._beginRenderDecorations());
        }, G);
      }
    }
    computeWithModel(e2, t2, n2, r2) {
      return r2.length ? KP(this.multiDocumentProviders, e2, t2, n2, this.editor.getOption(132), r2) : GP(this.providers, e2, t2, n2, this.editor.getOption(132));
    }
    _beginRenderDecorations() {
      let e2 = (/* @__PURE__ */ new Date()).getTime(), t2 = this.lastCursorPositionChangeTime + 250;
      e2 >= t2 ? (this.renderDecorationsTimer = -1, this.renderDecorations()) : this.renderDecorationsTimer = setTimeout(() => {
        this.renderDecorations();
      }, t2 - e2);
    }
    renderDecorations() {
      var _a3, _b3, _c3;
      this.renderDecorationsTimer = -1;
      let e2 = this.codeEditorService.listCodeEditors();
      for (let t2 of e2) {
        let e3 = JP.get(t2);
        if (!e3) continue;
        let n2 = [], r2 = (_a3 = t2.getModel()) == null ? void 0 : _a3.uri;
        if (r2 && this.workerRequestValue.has(r2)) {
          let i2 = LP.storedDecorationIDs.get(r2), a2 = this.workerRequestValue.get(r2);
          if (a2) for (let e4 of a2) {
            if (!e4.range) continue;
            n2.push({
              range: e4.range,
              options: Gk(e4.kind)
            });
          }
          let o2 = [];
          t2.changeDecorations((e4) => {
            o2 = e4.deltaDecorations(i2 ?? [], n2);
          }), LP.storedDecorationIDs = LP.storedDecorationIDs.set(r2, o2), n2.length > 0 && ((_b3 = e3.wordHighlighter) == null ? void 0 : _b3.decorations.set(n2), (_c3 = e3.wordHighlighter) == null ? void 0 : _c3._hasWordHighlights.set(true));
        }
      }
    }
    dispose() {
      this._stopSingular(), this.toUnhook.dispose();
    }
  }, LP = _xb, _xb.storedDecorationIDs = new pr(), _xb.query = null, _xb);
  qP = LP = FP([
    IP(4, pt)
  ], qP);
  let JP = (_yb = class extends S {
    static get(e2) {
      return e2.getContribution(RP.ID);
    }
    constructor(e2, t2, n2, r2) {
      super(), this._wordHighlighter = null;
      let i2 = () => {
        e2.hasModel() && !e2.getModel().isTooLargeForTokenization() && (this._wordHighlighter = new qP(e2, n2.documentHighlightProvider, n2.multiDocumentHighlightProvider, t2, r2));
      };
      this._register(e2.onDidChangeModel((e3) => {
        this._wordHighlighter && (this._wordHighlighter.dispose(), this._wordHighlighter = null), i2();
      })), i2();
    }
    get wordHighlighter() {
      return this._wordHighlighter;
    }
    saveViewState() {
      return !!(this._wordHighlighter && this._wordHighlighter.hasDecorations());
    }
    moveNext() {
      var _a3;
      (_a3 = this._wordHighlighter) == null ? void 0 : _a3.moveNext();
    }
    moveBack() {
      var _a3;
      (_a3 = this._wordHighlighter) == null ? void 0 : _a3.moveBack();
    }
    restoreViewState(e2) {
      this._wordHighlighter && e2 && this._wordHighlighter.restore();
    }
    dispose() {
      this._wordHighlighter && (this._wordHighlighter.dispose(), this._wordHighlighter = null), super.dispose();
    }
  }, RP = _yb, _yb.ID = `editor.contrib.wordHighlighter`, _yb);
  JP = RP = FP([
    IP(1, O),
    IP(2, A),
    IP(3, pt)
  ], JP);
  var YP = class extends w {
    constructor(e2, t2) {
      super(t2), this._isNext = e2;
    }
    run(e2, t2) {
      let n2 = JP.get(t2);
      n2 && (this._isNext ? n2.moveNext() : n2.moveBack());
    }
  }, XP = class extends YP {
    constructor() {
      super(true, {
        id: `editor.action.wordHighlight.next`,
        label: U(`wordHighlight.next.label`, `Go to Next Symbol Highlight`),
        alias: `Go to Next Symbol Highlight`,
        precondition: zP,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 65,
          weight: 100
        }
      });
    }
  }, ZP = class extends YP {
    constructor() {
      super(false, {
        id: `editor.action.wordHighlight.prev`,
        label: U(`wordHighlight.previous.label`, `Go to Previous Symbol Highlight`),
        alias: `Go to Previous Symbol Highlight`,
        precondition: zP,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 1089,
          weight: 100
        }
      });
    }
  }, QP = class extends w {
    constructor() {
      super({
        id: `editor.action.wordHighlight.trigger`,
        label: U(`wordHighlight.trigger.label`, `Trigger Symbol Highlight`),
        alias: `Trigger Symbol Highlight`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.editorTextFocus,
          primary: 0,
          weight: 100
        }
      });
    }
    run(e2, t2, n2) {
      let r2 = JP.get(t2);
      r2 && r2.restoreViewState(true);
    }
  };
  X(JP.ID, JP, 0), J(XP), J(ZP), J(QP), sl(PP);
  var $P = class extends Ae {
    constructor(e2) {
      super(e2), this._inSelectionMode = e2.inSelectionMode, this._wordNavigationType = e2.wordNavigationType;
    }
    runEditorCommand(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = Jo(t2.getOption(132), t2.getOption(131)), i2 = t2.getModel(), a2 = t2.getSelections(), o2 = a2.length > 1, s2 = a2.map((e3) => {
        let t3 = new N(e3.positionLineNumber, e3.positionColumn), n3 = this._move(r2, i2, t3, this._wordNavigationType, o2);
        return this._moveTo(e3, n3, this._inSelectionMode);
      });
      if (i2.pushStackElement(), t2._getViewModel().setCursorStates(`moveWordCommand`, 3, s2.map((e3) => pe.fromModelSelection(e3))), s2.length === 1) {
        let e3 = new N(s2[0].positionLineNumber, s2[0].positionColumn);
        t2.revealPosition(e3, 0);
      }
    }
    _moveTo(e2, t2, n2) {
      return n2 ? new I(e2.selectionStartLineNumber, e2.selectionStartColumn, t2.lineNumber, t2.column) : new I(t2.lineNumber, t2.column, t2.lineNumber, t2.column);
    }
  }, eF = class extends $P {
    _move(e2, t2, n2, r2, i2) {
      return fi.moveWordLeft(e2, t2, n2, r2, i2);
    }
  }, tF = class extends $P {
    _move(e2, t2, n2, r2, i2) {
      return fi.moveWordRight(e2, t2, n2, r2);
    }
  }, nF = class extends eF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 0,
        id: `cursorWordStartLeft`,
        precondition: void 0
      });
    }
  }, rF = class extends eF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 2,
        id: `cursorWordEndLeft`,
        precondition: void 0
      });
    }
  }, iF = class extends eF {
    constructor() {
      var _a3;
      super({
        inSelectionMode: false,
        wordNavigationType: 1,
        id: `cursorWordLeft`,
        precondition: void 0,
        kbOpts: {
          kbExpr: b.and(T.textInputFocus, (_a3 = b.and(f, sn)) == null ? void 0 : _a3.negate()),
          primary: 2063,
          mac: {
            primary: 527
          },
          weight: 100
        }
      });
    }
  }, aF = class extends eF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 0,
        id: `cursorWordStartLeftSelect`,
        precondition: void 0
      });
    }
  }, oF = class extends eF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 2,
        id: `cursorWordEndLeftSelect`,
        precondition: void 0
      });
    }
  }, sF = class extends eF {
    constructor() {
      var _a3;
      super({
        inSelectionMode: true,
        wordNavigationType: 1,
        id: `cursorWordLeftSelect`,
        precondition: void 0,
        kbOpts: {
          kbExpr: b.and(T.textInputFocus, (_a3 = b.and(f, sn)) == null ? void 0 : _a3.negate()),
          primary: 3087,
          mac: {
            primary: 1551
          },
          weight: 100
        }
      });
    }
  }, cF = class extends eF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 3,
        id: `cursorWordAccessibilityLeft`,
        precondition: void 0
      });
    }
    _move(e2, t2, n2, r2, i2) {
      return super._move(Jo(Ne.wordSeparators.defaultValue, e2.intlSegmenterLocales), t2, n2, r2, i2);
    }
  }, lF = class extends eF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 3,
        id: `cursorWordAccessibilityLeftSelect`,
        precondition: void 0
      });
    }
    _move(e2, t2, n2, r2, i2) {
      return super._move(Jo(Ne.wordSeparators.defaultValue, e2.intlSegmenterLocales), t2, n2, r2, i2);
    }
  }, uF = class extends tF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 0,
        id: `cursorWordStartRight`,
        precondition: void 0
      });
    }
  }, dF = class extends tF {
    constructor() {
      var _a3;
      super({
        inSelectionMode: false,
        wordNavigationType: 2,
        id: `cursorWordEndRight`,
        precondition: void 0,
        kbOpts: {
          kbExpr: b.and(T.textInputFocus, (_a3 = b.and(f, sn)) == null ? void 0 : _a3.negate()),
          primary: 2065,
          mac: {
            primary: 529
          },
          weight: 100
        }
      });
    }
  }, fF = class extends tF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 2,
        id: `cursorWordRight`,
        precondition: void 0
      });
    }
  }, pF = class extends tF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 0,
        id: `cursorWordStartRightSelect`,
        precondition: void 0
      });
    }
  }, mF = class extends tF {
    constructor() {
      var _a3;
      super({
        inSelectionMode: true,
        wordNavigationType: 2,
        id: `cursorWordEndRightSelect`,
        precondition: void 0,
        kbOpts: {
          kbExpr: b.and(T.textInputFocus, (_a3 = b.and(f, sn)) == null ? void 0 : _a3.negate()),
          primary: 3089,
          mac: {
            primary: 1553
          },
          weight: 100
        }
      });
    }
  }, hF = class extends tF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 2,
        id: `cursorWordRightSelect`,
        precondition: void 0
      });
    }
  }, gF = class extends tF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 3,
        id: `cursorWordAccessibilityRight`,
        precondition: void 0
      });
    }
    _move(e2, t2, n2, r2, i2) {
      return super._move(Jo(Ne.wordSeparators.defaultValue, e2.intlSegmenterLocales), t2, n2, r2, i2);
    }
  }, _F = class extends tF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 3,
        id: `cursorWordAccessibilityRightSelect`,
        precondition: void 0
      });
    }
    _move(e2, t2, n2, r2, i2) {
      return super._move(Jo(Ne.wordSeparators.defaultValue, e2.intlSegmenterLocales), t2, n2, r2, i2);
    }
  }, vF = class extends Ae {
    constructor(e2) {
      super(e2), this._whitespaceHeuristics = e2.whitespaceHeuristics, this._wordNavigationType = e2.wordNavigationType;
    }
    runEditorCommand(e2, t2, n2) {
      let r2 = e2.get(Tt);
      if (!t2.hasModel()) return;
      let i2 = Jo(t2.getOption(132), t2.getOption(131)), a2 = t2.getModel(), o2 = t2.getSelections(), s2 = t2.getOption(6), c2 = t2.getOption(11), l2 = r2.getLanguageConfiguration(a2.getLanguageId()).getAutoClosingPairs(), u2 = t2._getViewModel(), d2 = o2.map((e3) => {
        let n3 = this._delete({
          wordSeparators: i2,
          model: a2,
          selection: e3,
          whitespaceHeuristics: this._whitespaceHeuristics,
          autoClosingDelete: t2.getOption(9),
          autoClosingBrackets: s2,
          autoClosingQuotes: c2,
          autoClosingPairs: l2,
          autoClosedCharacters: u2.getCursorAutoClosedCharacters()
        }, this._wordNavigationType);
        return new ur(n3, ``);
      });
      t2.pushUndoStop(), t2.executeCommands(this.id, d2), t2.pushUndoStop();
    }
  }, yF = class extends vF {
    _delete(e2, t2) {
      let n2 = fi.deleteWordLeft(e2, t2);
      return n2 || new P(1, 1, 1, 1);
    }
  }, bF = class extends vF {
    _delete(e2, t2) {
      let n2 = fi.deleteWordRight(e2, t2);
      if (n2) return n2;
      let r2 = e2.model.getLineCount(), i2 = e2.model.getLineMaxColumn(r2);
      return new P(r2, i2, r2, i2);
    }
  }, xF = class extends yF {
    constructor() {
      super({
        whitespaceHeuristics: false,
        wordNavigationType: 0,
        id: `deleteWordStartLeft`,
        precondition: T.writable
      });
    }
  }, SF = class extends yF {
    constructor() {
      super({
        whitespaceHeuristics: false,
        wordNavigationType: 2,
        id: `deleteWordEndLeft`,
        precondition: T.writable
      });
    }
  }, CF = class extends yF {
    constructor() {
      super({
        whitespaceHeuristics: true,
        wordNavigationType: 0,
        id: `deleteWordLeft`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 2049,
          mac: {
            primary: 513
          },
          weight: 100
        }
      });
    }
  }, wF = class extends bF {
    constructor() {
      super({
        whitespaceHeuristics: false,
        wordNavigationType: 0,
        id: `deleteWordStartRight`,
        precondition: T.writable
      });
    }
  }, TF = class extends bF {
    constructor() {
      super({
        whitespaceHeuristics: false,
        wordNavigationType: 2,
        id: `deleteWordEndRight`,
        precondition: T.writable
      });
    }
  }, EF = class extends bF {
    constructor() {
      super({
        whitespaceHeuristics: true,
        wordNavigationType: 2,
        id: `deleteWordRight`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 2068,
          mac: {
            primary: 532
          },
          weight: 100
        }
      });
    }
  }, DF = class extends w {
    constructor() {
      super({
        id: `deleteInsideWord`,
        precondition: T.writable,
        label: U(`deleteInsideWord`, `Delete Word`),
        alias: `Delete Word`
      });
    }
    run(e2, t2, n2) {
      if (!t2.hasModel()) return;
      let r2 = Jo(t2.getOption(132), t2.getOption(131)), i2 = t2.getModel(), a2 = t2.getSelections(), o2 = a2.map((e3) => {
        let t3 = fi.deleteInsideWord(r2, i2, e3);
        return new ur(t3, ``);
      });
      t2.pushUndoStop(), t2.executeCommands(this.id, o2), t2.pushUndoStop();
    }
  };
  Y(new nF()), Y(new rF()), Y(new iF()), Y(new aF()), Y(new oF()), Y(new sF()), Y(new uF()), Y(new dF()), Y(new fF()), Y(new pF()), Y(new mF()), Y(new hF()), Y(new cF()), Y(new lF()), Y(new gF()), Y(new _F()), Y(new xF()), Y(new SF()), Y(new CF()), Y(new wF()), Y(new TF()), Y(new EF()), J(DF);
  var OF = class extends vF {
    constructor() {
      super({
        whitespaceHeuristics: true,
        wordNavigationType: 0,
        id: `deleteWordPartLeft`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 769
          },
          weight: 100
        }
      });
    }
    _delete(e2, t2) {
      let n2 = pi.deleteWordPartLeft(e2);
      return n2 || new P(1, 1, 1, 1);
    }
  }, kF = class extends vF {
    constructor() {
      super({
        whitespaceHeuristics: true,
        wordNavigationType: 2,
        id: `deleteWordPartRight`,
        precondition: T.writable,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 788
          },
          weight: 100
        }
      });
    }
    _delete(e2, t2) {
      let n2 = pi.deleteWordPartRight(e2);
      if (n2) return n2;
      let r2 = e2.model.getLineCount(), i2 = e2.model.getLineMaxColumn(r2);
      return new P(r2, i2, r2, i2);
    }
  }, AF = class extends $P {
    _move(e2, t2, n2, r2, i2) {
      return pi.moveWordPartLeft(e2, t2, n2, i2);
    }
  }, jF = class extends AF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 0,
        id: `cursorWordPartLeft`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 783
          },
          weight: 100
        }
      });
    }
  };
  y.registerCommandAlias(`cursorWordPartStartLeft`, `cursorWordPartLeft`);
  var MF = class extends AF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 0,
        id: `cursorWordPartLeftSelect`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 1807
          },
          weight: 100
        }
      });
    }
  };
  y.registerCommandAlias(`cursorWordPartStartLeftSelect`, `cursorWordPartLeftSelect`);
  var NF = class extends $P {
    _move(e2, t2, n2, r2, i2) {
      return pi.moveWordPartRight(e2, t2, n2);
    }
  }, PF = class extends NF {
    constructor() {
      super({
        inSelectionMode: false,
        wordNavigationType: 2,
        id: `cursorWordPartRight`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 785
          },
          weight: 100
        }
      });
    }
  }, FF = class extends NF {
    constructor() {
      super({
        inSelectionMode: true,
        wordNavigationType: 2,
        id: `cursorWordPartRightSelect`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.textInputFocus,
          primary: 0,
          mac: {
            primary: 1809
          },
          weight: 100
        }
      });
    }
  };
  Y(new OF()), Y(new kF()), Y(new jF()), Y(new MF()), Y(new PF()), Y(new FF());
  var IF = (_zb = class extends S {
    constructor(e2) {
      super(), this.editor = e2, this._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));
    }
    _onDidAttemptReadOnlyEdit() {
      let e2 = nf.get(this.editor);
      if (e2 && this.editor.hasModel()) {
        let t2 = this.editor.getOptions().get(93);
        t2 || (t2 = this.editor.isSimpleWidget ? new Dn(U(`editor.simple.readonly`, `Cannot edit in read-only input`)) : new Dn(U(`editor.readonly`, `Cannot edit in read-only editor`))), e2.showMessage(t2, this.editor.getPosition());
      }
    }
  }, _zb.ID = `editor.contrib.readOnlyMessageController`, _zb);
  X(IF.ID, IF, 2);
  var LF = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, RF = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let zF = class extends S {
    constructor(e2, t2, n2) {
      super(), this._textModel = e2, this._languageFeaturesService = t2, this._outlineModelService = n2, this._currentModel = Hc(this, void 0);
      let r2 = Vc(`documentSymbolProvider.onDidChange`, this._languageFeaturesService.documentSymbolProvider.onDidChange), i2 = Vc(`_textModel.onDidChangeContent`, ze.debounce((e3) => this._textModel.onDidChangeContent(e3), () => void 0, 100));
      this._register(Fi(async (e3, t3) => {
        r2.read(e3), i2.read(e3);
        let n3 = t3.add(new xe()), a2 = await this._outlineModelService.getOrCreate(this._textModel, n3.token);
        t3.isDisposed || this._currentModel.set(a2, void 0);
      }));
    }
    getBreadcrumbItems(e2, t2) {
      let n2 = this._currentModel.read(t2);
      if (!n2) return [];
      let r2 = n2.asListOfDocumentSymbols().filter((t3) => e2.contains(t3.range.startLineNumber) && !e2.contains(t3.range.endLineNumber));
      return r2.sort(xl(Yi((e3) => e3.range.endLineNumber - e3.range.startLineNumber, Ic))), r2.map((e3) => ({
        name: e3.name,
        kind: e3.kind,
        startLineNumber: e3.range.startLineNumber
      }));
    }
  };
  zF = LF([
    RF(1, A),
    RF(2, gC)
  ], zF), rt.setBreadcrumbsSourceFactory((e2, t2) => t2.createInstance(zF, e2));
  var BF = (_Ab = class extends S {
    constructor(e2) {
      super(), this.editor = e2, this.widget = null, Bs && (this._register(e2.onDidChangeConfiguration(() => this.update())), this.update());
    }
    update() {
      let e2 = !this.editor.getOption(92);
      !this.widget && e2 ? this.widget = new VF(this.editor) : this.widget && !e2 && (this.widget.dispose(), this.widget = null);
    }
    dispose() {
      super.dispose(), this.widget && (this.widget.dispose(), this.widget = null);
    }
  }, _Ab.ID = `editor.contrib.iPadShowKeyboard`, _Ab), VF = (_Bb = class extends S {
    constructor(e2) {
      super(), this.editor = e2, this._domNode = document.createElement(`textarea`), this._domNode.className = `iPadShowKeyboard`, this._register(z(this._domNode, `touchstart`, (e3) => {
        this.editor.focus();
      })), this._register(z(this._domNode, `focus`, (e3) => {
        this.editor.focus();
      })), this.editor.addOverlayWidget(this);
    }
    dispose() {
      this.editor.removeOverlayWidget(this), super.dispose();
    }
    getId() {
      return _Bb.ID;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return {
        preference: 1
      };
    }
  }, _Bb.ID = `editor.contrib.ShowKeyboardWidget`, _Bb);
  X(BF.ID, BF, 3);
  var HF = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, UF = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, WF;
  let GF = (_Cb = class extends S {
    static get(e2) {
      return e2.getContribution(WF.ID);
    }
    constructor(e2, t2, n2) {
      super(), this._editor = e2, this._languageService = n2, this._widget = null, this._register(this._editor.onDidChangeModel((e3) => this.stop())), this._register(this._editor.onDidChangeModelLanguage((e3) => this.stop())), this._register($r.onDidChange((e3) => this.stop())), this._register(this._editor.onKeyUp((e3) => e3.keyCode === 9 && this.stop()));
    }
    dispose() {
      this.stop(), super.dispose();
    }
    launch() {
      this._widget || this._editor.hasModel() && (this._widget = new YF(this._editor, this._languageService));
    }
    stop() {
      this._widget && (this._widget.dispose(), this._widget = null);
    }
  }, WF = _Cb, _Cb.ID = `editor.contrib.inspectTokens`, _Cb);
  GF = WF = HF([
    UF(1, Bt),
    UF(2, Dt)
  ], GF);
  var KF = class extends w {
    constructor() {
      super({
        id: `editor.action.inspectTokens`,
        label: rn.inspectTokensAction,
        alias: `Developer: Inspect Tokens`,
        precondition: void 0
      });
    }
    run(e2, t2) {
      let n2 = GF.get(t2);
      n2 == null ? void 0 : n2.launch();
    }
  };
  function qF(e2) {
    let t2 = ``;
    for (let n2 = 0, r2 = e2.length; n2 < r2; n2++) {
      let r3 = e2.charCodeAt(n2);
      switch (r3) {
        case 9:
          t2 += `\u2192`;
          break;
        case 32:
          t2 += `\xB7`;
          break;
        default:
          t2 += String.fromCharCode(r3);
      }
    }
    return t2;
  }
  function JF(e2, t2) {
    let n2 = $r.get(t2);
    if (n2) return n2;
    let r2 = e2.encodeLanguageId(t2);
    return {
      getInitialState: () => Un,
      tokenize: (e3, n3, r3) => Pc(t2, r3),
      tokenizeEncoded: (e3, t3, n3) => Fc(r2, n3)
    };
  }
  var YF = (_Db = class extends S {
    constructor(e2, t2) {
      super(), this.allowEditorOverflow = true, this._editor = e2, this._languageService = t2, this._model = this._editor.getModel(), this._domNode = document.createElement(`div`), this._domNode.className = `tokens-inspect-widget`, this._tokenizationSupport = JF(this._languageService.languageIdCodec, this._model.getLanguageId()), this._compute(this._editor.getPosition()), this._register(this._editor.onDidChangeCursorPosition((e3) => this._compute(this._editor.getPosition()))), this._editor.addContentWidget(this);
    }
    dispose() {
      this._editor.removeContentWidget(this), super.dispose();
    }
    getId() {
      return _Db._ID;
    }
    _compute(e2) {
      let t2 = this._getTokensAtLine(e2.lineNumber), n2 = 0;
      for (let r2 = t2.tokens1.length - 1; r2 >= 0; r2--) {
        let i3 = t2.tokens1[r2];
        if (e2.column - 1 >= i3.offset) {
          n2 = r2;
          break;
        }
      }
      let i2 = 0;
      for (let n3 = t2.tokens2.length >>> 1; n3 >= 0; n3--) if (e2.column - 1 >= t2.tokens2[n3 << 1]) {
        i2 = n3;
        break;
      }
      let a2 = this._model.getLineContent(e2.lineNumber), o2 = ``;
      if (n2 < t2.tokens1.length) {
        let e3 = t2.tokens1[n2].offset, r2 = n2 + 1 < t2.tokens1.length ? t2.tokens1[n2 + 1].offset : a2.length;
        o2 = a2.substring(e3, r2);
      }
      bl(this._domNode, r(`h2.tm-token`, void 0, qF(o2), r(`span.tm-token-length`, void 0, `${o2.length} ${o2.length === 1 ? `char` : `chars`}`))), B(this._domNode, r(`hr.tokens-inspect-separator`, {
        style: `clear:both`
      }));
      let s2 = (i2 << 1) + 1 < t2.tokens2.length ? this._decodeMetadata(t2.tokens2[(i2 << 1) + 1]) : null;
      B(this._domNode, r(`table.tm-metadata-table`, void 0, r(`tbody`, void 0, r(`tr`, void 0, r(`td.tm-metadata-key`, void 0, `language`), r(`td.tm-metadata-value`, void 0, `${s2 ? s2.languageId : `-?-`}`)), r(`tr`, void 0, r(`td.tm-metadata-key`, void 0, `token type`), r(`td.tm-metadata-value`, void 0, `${s2 ? this._tokenTypeToString(s2.tokenType) : `-?-`}`)), r(`tr`, void 0, r(`td.tm-metadata-key`, void 0, `font style`), r(`td.tm-metadata-value`, void 0, `${s2 ? this._fontStyleToString(s2.fontStyle) : `-?-`}`)), r(`tr`, void 0, r(`td.tm-metadata-key`, void 0, `foreground`), r(`td.tm-metadata-value`, void 0, `${s2 ? v.Format.CSS.formatHex(s2.foreground) : `-?-`}`)), r(`tr`, void 0, r(`td.tm-metadata-key`, void 0, `background`), r(`td.tm-metadata-value`, void 0, `${s2 ? v.Format.CSS.formatHex(s2.background) : `-?-`}`))))), B(this._domNode, r(`hr.tokens-inspect-separator`)), n2 < t2.tokens1.length && B(this._domNode, r(`span.tm-token-type`, void 0, t2.tokens1[n2].type)), this._editor.layoutContentWidget(this);
    }
    _decodeMetadata(e2) {
      let t2 = $r.getColorMap(), n2 = Qr.getLanguageId(e2), r2 = Qr.getTokenType(e2), i2 = Qr.getFontStyle(e2), a2 = Qr.getForeground(e2), o2 = Qr.getBackground(e2);
      return {
        languageId: this._languageService.languageIdCodec.decodeLanguageId(n2),
        tokenType: r2,
        fontStyle: i2,
        foreground: t2[a2],
        background: t2[o2]
      };
    }
    _tokenTypeToString(e2) {
      switch (e2) {
        case 0:
          return `Other`;
        case 1:
          return `Comment`;
        case 2:
          return `String`;
        case 3:
          return `RegEx`;
        default:
          return `??`;
      }
    }
    _fontStyleToString(e2) {
      let t2 = ``;
      return e2 & 1 && (t2 += `italic `), e2 & 2 && (t2 += `bold `), e2 & 4 && (t2 += `underline `), e2 & 8 && (t2 += `strikethrough `), t2.length === 0 && (t2 = `---`), t2;
    }
    _getTokensAtLine(e2) {
      let t2 = this._getStateBeforeLine(e2), n2 = this._tokenizationSupport.tokenize(this._model.getLineContent(e2), true, t2), r2 = this._tokenizationSupport.tokenizeEncoded(this._model.getLineContent(e2), true, t2);
      return {
        startState: t2,
        tokens1: n2.tokens,
        tokens2: r2.tokens,
        endState: n2.endState
      };
    }
    _getStateBeforeLine(e2) {
      let t2 = this._tokenizationSupport.getInitialState();
      for (let n2 = 1; n2 < e2; n2++) {
        let e3 = this._tokenizationSupport.tokenize(this._model.getLineContent(n2), true, t2);
        t2 = e3.endState;
      }
      return t2;
    }
    getDomNode() {
      return this._domNode;
    }
    getPosition() {
      return {
        position: this._editor.getPosition(),
        preference: [
          2,
          1
        ]
      };
    }
  }, _Db._ID = `editor.contrib.inspectTokensWidget`, _Db);
  X(GF.ID, GF, 4), J(KF);
  var XF = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, ZF = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, QF;
  let $F = (_Eb = class {
    constructor(e2, t2) {
      this.quickInputService = e2, this.keybindingService = t2, this.registry = cr.as(Ue.Quickaccess);
    }
    provide(e2) {
      let t2 = new C();
      return t2.add(e2.onDidAccept(() => {
        let [t3] = e2.selectedItems;
        t3 && this.quickInputService.quickAccess.show(t3.prefix, {
          preserveValue: true
        });
      })), t2.add(e2.onDidChangeValue((e3) => {
        let t3 = this.registry.getQuickAccessProvider(e3.substr(QF.PREFIX.length));
        t3 && t3.prefix && t3.prefix !== QF.PREFIX && this.quickInputService.quickAccess.show(t3.prefix, {
          preserveValue: true
        });
      })), e2.items = this.getQuickAccessProviders().filter((e3) => e3.prefix !== QF.PREFIX), t2;
    }
    getQuickAccessProviders() {
      let e2 = this.registry.getQuickAccessProviders().sort((e3, t2) => e3.prefix.localeCompare(t2.prefix)).flatMap((e3) => this.createPicks(e3));
      return e2;
    }
    createPicks(e2) {
      return e2.helpEntries.map((t2) => {
        let n2 = t2.prefix || e2.prefix, r2 = n2 || `\u2026`;
        return {
          prefix: n2,
          label: r2,
          keybinding: t2.commandId ? this.keybindingService.lookupKeybinding(t2.commandId) : void 0,
          ariaLabel: U(`helpPickAriaLabel`, `{0}, {1}`, r2, t2.description),
          description: t2.description
        };
      });
    }
  }, QF = _Eb, _Eb.PREFIX = `?`, _Eb);
  $F = QF = XF([
    ZF(0, Rt),
    ZF(1, Ct)
  ], $F), cr.as(Ue.Quickaccess).registerQuickAccessProvider({
    ctor: $F,
    prefix: ``,
    helpEntries: [
      {
        description: nr.helpQuickAccessActionLabel
      }
    ]
  });
  var eI = class {
    constructor(e2) {
      this.options = e2, this.rangeHighlightDecorationId = void 0;
    }
    provide(e2, t2, n2) {
      var _a3;
      let r2 = new C();
      e2.canAcceptInBackground = !!((_a3 = this.options) == null ? void 0 : _a3.canAcceptInBackground), e2.matchOnLabel = e2.matchOnDescription = e2.matchOnDetail = e2.sortByLabel = false;
      let i2 = r2.add(new Bn());
      return i2.value = this.doProvide(e2, t2, n2), r2.add(this.onDidActiveTextEditorControlChange(() => {
        i2.value = void 0, i2.value = this.doProvide(e2, t2);
      })), r2;
    }
    doProvide(e2, t2, n2) {
      let r2 = new C(), i2 = this.activeTextEditorControl;
      if (i2 && this.canProvideWithTextEditor(i2)) {
        let a2 = {
          editor: i2
        }, o2 = Lo(i2);
        if (o2) {
          let e3 = i2.saveViewState() ?? void 0;
          r2.add(o2.onDidChangeCursorPosition(() => {
            e3 = i2.saveViewState() ?? void 0;
          })), a2.restoreViewState = () => {
            e3 && i2 === this.activeTextEditorControl && i2.restoreViewState(e3);
          }, r2.add(da(t2.onCancellationRequested)(() => {
            var _a3;
            return (_a3 = a2.restoreViewState) == null ? void 0 : _a3.call(a2);
          }));
        }
        r2.add(Hl(() => this.clearDecorations(i2))), r2.add(this.provideWithTextEditor(a2, e2, t2, n2));
      } else r2.add(this.provideWithoutTextEditor(e2, t2));
      return r2;
    }
    canProvideWithTextEditor(e2) {
      return true;
    }
    gotoLocation({ editor: e2 }, t2) {
      e2.setSelection(t2.range, `code.jump`), e2.revealRangeInCenter(t2.range, 0), t2.preserveFocus || e2.focus();
      let n2 = e2.getModel();
      n2 && `getLineContent` in n2 && Nl(`${n2.getLineContent(t2.range.startLineNumber)}`);
    }
    getModel(e2) {
      var _a3;
      return Es(e2) ? (_a3 = e2.getModel()) == null ? void 0 : _a3.modified : e2.getModel();
    }
    addDecorations(e2, t2) {
      e2.changeDecorations((e3) => {
        let n2 = [];
        this.rangeHighlightDecorationId && (n2.push(this.rangeHighlightDecorationId.overviewRulerDecorationId), n2.push(this.rangeHighlightDecorationId.rangeHighlightId), this.rangeHighlightDecorationId = void 0);
        let r2 = [
          {
            range: t2,
            options: {
              description: `quick-access-range-highlight`,
              className: `rangeHighlight`,
              isWholeLine: true
            }
          },
          {
            range: t2,
            options: {
              description: `quick-access-range-highlight-overview`,
              overviewRuler: {
                color: zl(Yc),
                position: qn.Full
              }
            }
          }
        ], [i2, a2] = e3.deltaDecorations(n2, r2);
        this.rangeHighlightDecorationId = {
          rangeHighlightId: i2,
          overviewRulerDecorationId: a2
        };
      });
    }
    clearDecorations(e2) {
      let t2 = this.rangeHighlightDecorationId;
      t2 && (e2.changeDecorations((e3) => {
        e3.deltaDecorations([
          t2.overviewRulerDecorationId,
          t2.rangeHighlightId
        ], []);
      }), this.rangeHighlightDecorationId = void 0);
    }
  }, tI = (_Fb = class extends eI {
    constructor() {
      super({
        canAcceptInBackground: true
      });
    }
    provideWithoutTextEditor(e2) {
      let t2 = U(`cannotRunGotoLine`, `Open a text editor first to go to a line.`);
      return e2.items = [
        {
          label: t2
        }
      ], e2.ariaLabel = t2, S.None;
    }
    provideWithTextEditor(t2, n2, r2) {
      let i2 = t2.editor, a2 = new C();
      a2.add(n2.onDidAccept((e2) => {
        let [r3] = n2.selectedItems;
        if (r3) {
          if (!this.isValidLineNumber(i2, r3.lineNumber)) return;
          this.gotoLocation(t2, {
            range: this.toRange(r3.lineNumber, r3.column),
            keyMods: n2.keyMods,
            preserveFocus: e2.inBackground
          }), e2.inBackground || n2.hide();
        }
      }));
      let o2 = () => {
        let t3 = this.parsePosition(i2, n2.value.trim().substr(_Fb.PREFIX.length)), r3 = this.getPickLabel(i2, t3.lineNumber, t3.column);
        if (n2.items = [
          {
            lineNumber: t3.lineNumber,
            column: t3.column,
            label: r3
          }
        ], n2.ariaLabel = r3, !this.isValidLineNumber(i2, t3.lineNumber)) {
          this.clearDecorations(i2);
          return;
        }
        let a3 = this.toRange(t3.lineNumber, t3.column);
        i2.revealRangeInCenter(a3, 0), this.addDecorations(i2, a3);
      };
      o2(), a2.add(n2.onDidChangeValue(() => o2()));
      let s2 = Lo(i2);
      if (s2) {
        let e2 = s2.getOptions(), t3 = e2.get(68);
        t3.renderType === 2 && (s2.updateOptions({
          lineNumbers: `on`
        }), a2.add(Hl(() => s2.updateOptions({
          lineNumbers: `relative`
        }))));
      }
      return a2;
    }
    toRange(e2 = 1, t2 = 1) {
      return {
        startLineNumber: e2,
        startColumn: t2,
        endLineNumber: e2,
        endColumn: t2
      };
    }
    parsePosition(e2, t2) {
      let n2 = t2.split(/,|:|#/).map((e3) => parseInt(e3, 10)).filter((e3) => !isNaN(e3)), r2 = this.lineCount(e2) + 1;
      return {
        lineNumber: n2[0] > 0 ? n2[0] : r2 + n2[0],
        column: n2[1]
      };
    }
    getPickLabel(e2, t2, n2) {
      if (this.isValidLineNumber(e2, t2)) return this.isValidColumn(e2, t2, n2) ? U(`gotoLineColumnLabel`, `Go to line {0} and character {1}.`, t2, n2) : U(`gotoLineLabel`, `Go to line {0}.`, t2);
      let r2 = e2.getPosition() || {
        lineNumber: 1,
        column: 1
      }, i2 = this.lineCount(e2);
      return i2 > 1 ? U(`gotoLineLabelEmptyWithLimit`, `Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.`, r2.lineNumber, r2.column, i2) : U(`gotoLineLabelEmpty`, `Current Line: {0}, Character: {1}. Type a line number to navigate to.`, r2.lineNumber, r2.column);
    }
    isValidLineNumber(e2, t2) {
      return !t2 || typeof t2 != `number` ? false : t2 > 0 && t2 <= this.lineCount(e2);
    }
    isValidColumn(e2, t2, n2) {
      if (!n2 || typeof n2 != `number`) return false;
      let r2 = this.getModel(e2);
      if (!r2) return false;
      let i2 = {
        lineNumber: t2,
        column: n2
      };
      return r2.validatePosition(i2).equals(i2);
    }
    lineCount(e2) {
      var _a3;
      return ((_a3 = this.getModel(e2)) == null ? void 0 : _a3.getLineCount()) ?? 0;
    }
  }, _Fb.PREFIX = `:`, _Fb), nI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, rI = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let iI = class extends tI {
    constructor(e2) {
      super(), this.editorService = e2, this.onDidActiveTextEditorControlChange = ze.None;
    }
    get activeTextEditorControl() {
      return this.editorService.getFocusedCodeEditor() ?? void 0;
    }
  };
  iI = nI([
    rI(0, pt)
  ], iI);
  var aI = (_Gb = class extends w {
    constructor() {
      super({
        id: _Gb.ID,
        label: $e.gotoLineActionLabel,
        alias: `Go to Line/Column...`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 2085,
          mac: {
            primary: 293
          },
          weight: 100
        }
      });
    }
    run(e2) {
      e2.get(Rt).quickAccess.show(iI.PREFIX);
    }
  }, _Gb.ID = `editor.action.gotoLine`, _Gb);
  J(aI), cr.as(Ue.Quickaccess).registerQuickAccessProvider({
    ctor: iI,
    prefix: iI.PREFIX,
    helpEntries: [
      {
        description: $e.gotoLineActionLabel,
        commandId: aI.ID
      }
    ]
  });
  const oI = [
    void 0,
    []
  ];
  function sI(e2, t2, n2 = 0, r2 = 0) {
    let i2 = t2;
    return i2.values && i2.values.length > 1 ? cI(e2, i2.values, n2, r2) : lI(e2, t2, n2, r2);
  }
  function cI(e2, t2, n2, r2) {
    let i2 = 0, a2 = [];
    for (let o2 of t2) {
      let [t3, s2] = lI(e2, o2, n2, r2);
      if (typeof t3 != `number`) return oI;
      i2 += t3, a2.push(...s2);
    }
    return [
      i2,
      dI(a2)
    ];
  }
  function lI(e2, t2, n2, r2) {
    let i2 = Ao(t2.original, t2.originalLowercase, n2, e2, e2.toLowerCase(), r2, {
      firstMatchCanBeWeak: true,
      boostFullMatch: true
    });
    return i2 ? [
      i2[0],
      ua(i2)
    ] : oI;
  }
  const uI = Object.freeze({
    score: 0
  });
  function dI(e2) {
    let t2 = e2.sort((e3, t3) => e3.start - t3.start), n2 = [], r2;
    for (let e3 of t2) !r2 || !fI(r2, e3) ? (r2 = e3, n2.push(e3)) : (r2.start = Math.min(r2.start, e3.start), r2.end = Math.max(r2.end, e3.end));
    return n2;
  }
  function fI(e2, t2) {
    return !(e2.end < t2.start || t2.end < e2.start);
  }
  function pI(e2) {
    return e2.startsWith(`"`) && e2.endsWith(`"`);
  }
  const mI = ` `;
  function hI(e2) {
    typeof e2 != `string` && (e2 = ``);
    let t2 = e2.toLowerCase(), { pathNormalized: n2, normalized: r2, normalizedLowercase: i2 } = gI(e2), a2 = n2.indexOf(Tl) >= 0, o2 = pI(e2), s2, c2 = e2.split(mI);
    if (c2.length > 1) for (let e3 of c2) {
      let t3 = pI(e3), { pathNormalized: n3, normalized: r3, normalizedLowercase: i3 } = gI(e3);
      r3 && (s2 || (s2 = []), s2.push({
        original: e3,
        originalLowercase: e3.toLowerCase(),
        pathNormalized: n3,
        normalized: r3,
        normalizedLowercase: i3,
        expectContiguousMatch: t3
      }));
    }
    return {
      original: e2,
      originalLowercase: t2,
      pathNormalized: n2,
      normalized: r2,
      normalizedLowercase: i2,
      values: s2,
      containsPathSeparator: a2,
      expectContiguousMatch: o2
    };
  }
  function gI(e2) {
    let t2;
    t2 = cc ? e2.replace(/\//g, Tl) : e2.replace(/\\/g, Tl);
    let n2 = Fl(t2).replace(/\s|"/g, ``);
    return {
      pathNormalized: t2,
      normalized: n2,
      normalizedLowercase: n2.toLowerCase()
    };
  }
  function _I(e2) {
    return Array.isArray(e2) ? hI(e2.map((e3) => e3.original).join(mI)) : hI(e2.original);
  }
  var vI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, yI = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, bI;
  let xI = (_Hb = class extends eI {
    constructor(e2, t2, n2 = /* @__PURE__ */ Object.create(null)) {
      super(n2), this._languageFeaturesService = e2, this._outlineModelService = t2, this.options = n2, this.options.canAcceptInBackground = true;
    }
    provideWithoutTextEditor(e2) {
      return this.provideLabelPick(e2, U(`cannotRunGotoSymbolWithoutEditor`, `To go to a symbol, first open a text editor with symbol information.`)), S.None;
    }
    provideWithTextEditor(e2, t2, n2, r2) {
      let i2 = e2.editor, a2 = this.getModel(i2);
      return a2 ? this._languageFeaturesService.documentSymbolProvider.has(a2) ? this.doProvideWithEditorSymbols(e2, a2, t2, n2, r2) : this.doProvideWithoutEditorSymbols(e2, a2, t2, n2) : S.None;
    }
    doProvideWithoutEditorSymbols(e2, t2, n2, r2) {
      let i2 = new C();
      return this.provideLabelPick(n2, U(`cannotRunGotoSymbolWithoutSymbolProvider`, `The active text editor does not provide symbol information.`)), (async () => {
        let a2 = await this.waitForLanguageSymbolRegistry(t2, i2);
        !a2 || r2.isCancellationRequested || i2.add(this.doProvideWithEditorSymbols(e2, t2, n2, r2));
      })(), i2;
    }
    provideLabelPick(e2, t2) {
      e2.items = [
        {
          label: t2,
          index: 0,
          kind: 14
        }
      ], e2.ariaLabel = t2;
    }
    async waitForLanguageSymbolRegistry(e2, t2) {
      if (this._languageFeaturesService.documentSymbolProvider.has(e2)) return true;
      let n2 = new _e(), r2 = t2.add(this._languageFeaturesService.documentSymbolProvider.onDidChange(() => {
        this._languageFeaturesService.documentSymbolProvider.has(e2) && (r2.dispose(), n2.complete(true));
      }));
      return t2.add(Hl(() => n2.complete(false))), n2.p;
    }
    doProvideWithEditorSymbols(e2, t2, n2, r2, i2) {
      var _a3;
      let a2 = e2.editor, o2 = new C();
      o2.add(n2.onDidAccept((t3) => {
        var _a4;
        let [r3] = n2.selectedItems;
        r3 && r3.range && (this.gotoLocation(e2, {
          range: r3.range.selection,
          keyMods: n2.keyMods,
          preserveFocus: t3.inBackground
        }), (_a4 = i2 == null ? void 0 : i2.handleAccept) == null ? void 0 : _a4.call(i2, r3), t3.inBackground || n2.hide());
      })), o2.add(n2.onDidTriggerItemButton(({ item: t3 }) => {
        t3 && t3.range && (this.gotoLocation(e2, {
          range: t3.range.selection,
          keyMods: n2.keyMods,
          forceSideBySide: true
        }), n2.hide());
      }));
      let s2 = this.getDocumentSymbols(t2, r2), c2, l2 = async (e3) => {
        c2 == null ? void 0 : c2.dispose(true), n2.busy = false, c2 = new g(r2), n2.busy = true;
        try {
          let i3 = hI(n2.value.substr(bI.PREFIX.length).trim()), a3 = await this.doGetSymbolPicks(s2, i3, void 0, c2.token, t2);
          if (r2.isCancellationRequested) return;
          if (a3.length > 0) {
            if (n2.items = a3, e3 && i3.original.length === 0) {
              let t3 = Co(a3, (t4) => !!(t4.type !== `separator` && t4.range && P.containsPosition(t4.range.decoration, e3)));
              t3 && (n2.activeItems = [
                t3
              ]);
            }
          } else i3.original.length > 0 ? this.provideLabelPick(n2, U(`noMatchingSymbolResults`, `No matching editor symbols`)) : this.provideLabelPick(n2, U(`noSymbolResults`, `No editor symbols`));
        } finally {
          r2.isCancellationRequested || (n2.busy = false);
        }
      };
      return o2.add(n2.onDidChangeValue(() => l2(void 0))), l2((_a3 = a2.getSelection()) == null ? void 0 : _a3.getPosition()), o2.add(n2.onDidChangeActive(() => {
        let [e3] = n2.activeItems;
        e3 && e3.range && (a2.revealRangeInCenter(e3.range.selection, 0), this.addDecorations(a2, e3.range.decoration));
      })), o2;
    }
    async doGetSymbolPicks(e2, t2, n2, r2, i2) {
      var _a3, _b3;
      let a2 = await e2;
      if (r2.isCancellationRequested) return [];
      let o2 = t2.original.indexOf(bI.SCOPE_PREFIX) === 0, s2 = o2 ? 1 : 0, c2, l2;
      t2.values && t2.values.length > 1 ? (c2 = _I(t2.values[0]), l2 = _I(t2.values.slice(1))) : c2 = t2;
      let u2, d2 = (_b3 = (_a3 = this.options) == null ? void 0 : _a3.openSideBySideDirection) == null ? void 0 : _b3.call(_a3);
      d2 && (u2 = [
        {
          iconClass: d2 === `right` ? L.asClassName(_.splitHorizontal) : L.asClassName(_.splitVertical),
          tooltip: d2 === `right` ? U(`openToSide`, `Open to the Side`) : U(`openToBottom`, `Open to the Bottom`)
        }
      ]);
      let f2 = [];
      for (let e3 = 0; e3 < a2.length; e3++) {
        let r3 = a2[e3], o3 = Jl(r3.name), d3 = `$(${zr.toIcon(r3.kind).id}) ${o3}`, p3 = d3.length - o3.length, m3 = r3.containerName;
        (n2 == null ? void 0 : n2.extraContainerLabel) && (m3 = m3 ? `${n2.extraContainerLabel} \u2022 ${m3}` : n2.extraContainerLabel);
        let h2, g2, ee2, te2;
        if (t2.original.length > s2) {
          let e4 = false;
          if (c2 !== t2 && ([h2, g2] = sI(d3, {
            ...t2,
            values: void 0
          }, s2, p3), typeof h2 == `number` && (e4 = true)), typeof h2 != `number` && ([h2, g2] = sI(d3, c2, s2, p3), typeof h2 != `number`)) continue;
          if (!e4 && l2) {
            if (m3 && l2.original.length > 0 && ([ee2, te2] = sI(m3, l2)), typeof ee2 != `number`) continue;
            typeof h2 == `number` && (h2 += ee2);
          }
        }
        let ne2 = r3.tags && r3.tags.indexOf(1) >= 0;
        f2.push({
          index: e3,
          kind: r3.kind,
          score: h2,
          label: d3,
          ariaLabel: Po(r3.name, r3.kind),
          description: m3,
          highlights: ne2 ? void 0 : {
            label: g2,
            description: te2
          },
          range: {
            selection: P.collapseToStart(r3.selectionRange),
            decoration: r3.range
          },
          uri: i2.uri,
          symbolName: o3,
          strikethrough: ne2,
          buttons: u2
        });
      }
      let p2 = f2.sort((e3, t3) => o2 ? this.compareByKindAndScore(e3, t3) : this.compareByScore(e3, t3)), m2 = [];
      if (o2) {
        let r3 = function() {
          t3 && typeof e3 == `number` && n3 > 0 && (t3.label = Do(CI[e3] || SI, n3));
        };
        let e3, t3, n3 = 0;
        for (let i3 of p2) e3 === i3.kind ? n3++ : (r3(), e3 = i3.kind, n3 = 1, t3 = {
          type: `separator`
        }, m2.push(t3)), m2.push(i3);
        r3();
      } else p2.length > 0 && (m2 = [
        {
          label: U(`symbols`, `symbols ({0})`, f2.length),
          type: `separator`
        },
        ...p2
      ]);
      return m2;
    }
    compareByScore(e2, t2) {
      if (typeof e2.score != `number` && typeof t2.score == `number`) return 1;
      if (typeof e2.score == `number` && typeof t2.score != `number`) return -1;
      if (typeof e2.score == `number` && typeof t2.score == `number`) {
        if (e2.score > t2.score) return -1;
        if (e2.score < t2.score) return 1;
      }
      return e2.index < t2.index ? -1 : e2.index > t2.index ? 1 : 0;
    }
    compareByKindAndScore(e2, t2) {
      let n2 = CI[e2.kind] || SI, r2 = CI[t2.kind] || SI, i2 = n2.localeCompare(r2);
      return i2 === 0 ? this.compareByScore(e2, t2) : i2;
    }
    async getDocumentSymbols(e2, t2) {
      let n2 = await this._outlineModelService.getOrCreate(e2, t2);
      return t2.isCancellationRequested ? [] : n2.asListOfDocumentSymbols();
    }
  }, bI = _Hb, _Hb.PREFIX = `@`, _Hb.SCOPE_PREFIX = `:`, _Hb.PREFIX_BY_CATEGORY = `${_Hb.PREFIX}${_Hb.SCOPE_PREFIX}`, _Hb);
  xI = bI = vI([
    yI(0, A),
    yI(1, gC)
  ], xI);
  const SI = U(`property`, `properties ({0})`), CI = {
    5: U(`method`, `methods ({0})`),
    11: U(`function`, `functions ({0})`),
    8: U(`_constructor`, `constructors ({0})`),
    12: U(`variable`, `variables ({0})`),
    4: U(`class`, `classes ({0})`),
    22: U(`struct`, `structs ({0})`),
    23: U(`event`, `events ({0})`),
    24: U(`operator`, `operators ({0})`),
    10: U(`interface`, `interfaces ({0})`),
    2: U(`namespace`, `namespaces ({0})`),
    3: U(`package`, `packages ({0})`),
    25: U(`typeParameter`, `type parameters ({0})`),
    1: U(`modules`, `modules ({0})`),
    6: U(`property`, `properties ({0})`),
    9: U(`enum`, `enumerations ({0})`),
    21: U(`enumMember`, `enumeration members ({0})`),
    14: U(`string`, `strings ({0})`),
    0: U(`file`, `files ({0})`),
    17: U(`array`, `arrays ({0})`),
    15: U(`number`, `numbers ({0})`),
    16: U(`boolean`, `booleans ({0})`),
    18: U(`object`, `objects ({0})`),
    19: U(`key`, `keys ({0})`),
    7: U(`field`, `fields ({0})`),
    13: U(`constant`, `constants ({0})`)
  };
  var wI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, TI = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let EI = class extends xI {
    constructor(e2, t2, n2) {
      super(t2, n2), this.editorService = e2, this.onDidActiveTextEditorControlChange = ze.None;
    }
    get activeTextEditorControl() {
      return this.editorService.getFocusedCodeEditor() ?? void 0;
    }
  };
  EI = wI([
    TI(0, pt),
    TI(1, A),
    TI(2, gC)
  ], EI);
  var DI = (_Ib = class extends w {
    constructor() {
      super({
        id: _Ib.ID,
        label: rr.quickOutlineActionLabel,
        alias: `Go to Symbol...`,
        precondition: T.hasDocumentSymbolProvider,
        kbOpts: {
          kbExpr: T.focus,
          primary: 3117,
          weight: 100
        },
        contextMenuOpts: {
          group: `navigation`,
          order: 3
        }
      });
    }
    run(e2) {
      e2.get(Rt).quickAccess.show(xI.PREFIX, {
        itemActivation: cn.NONE
      });
    }
  }, _Ib.ID = `editor.action.quickOutline`, _Ib);
  J(DI), cr.as(Ue.Quickaccess).registerQuickAccessProvider({
    ctor: EI,
    prefix: xI.PREFIX,
    helpEntries: [
      {
        description: rr.quickOutlineActionLabel,
        prefix: xI.PREFIX,
        commandId: DI.ID
      },
      {
        description: rr.quickOutlineByCategoryActionLabel,
        prefix: xI.PREFIX_BY_CATEGORY
      }
    ]
  });
  function OI(e2) {
    let t2 = /* @__PURE__ */ new Map();
    for (let n2 of e2) t2.set(n2, (t2.get(n2) ?? 0) + 1);
    return t2;
  }
  var kI = class e2 {
    constructor() {
      this.chunkCount = 0, this.chunkOccurrences = /* @__PURE__ */ new Map(), this.documents = /* @__PURE__ */ new Map();
    }
    calculateScores(e3, t2) {
      let n2 = this.computeEmbedding(e3), r2 = /* @__PURE__ */ new Map(), i2 = [];
      for (let [e4, a2] of this.documents) {
        if (t2.isCancellationRequested) return [];
        for (let t3 of a2.chunks) {
          let a3 = this.computeSimilarityScore(t3, n2, r2);
          a3 > 0 && i2.push({
            key: e4,
            score: a3
          });
        }
      }
      return i2;
    }
    static termFrequencies(t2) {
      return OI(e2.splitTerms(t2));
    }
    static *splitTerms(e3) {
      let t2 = (e4) => e4.toLowerCase();
      for (let [n2] of e3.matchAll(new RegExp("\\b\\p{Letter}[\\p{Letter}\\d]{2,}\\b", "gu"))) {
        yield t2(n2);
        let e4 = n2.replace(/([a-z])([A-Z])/g, `$1 $2`).split(/\s+/g);
        if (e4.length > 1) for (let n3 of e4) n3.length > 2 && new RegExp("\\p{Letter}{3,}", "gu").test(n3) && (yield t2(n3));
      }
    }
    updateDocuments(t2) {
      for (let { key: e3 } of t2) this.deleteDocument(e3);
      for (let n2 of t2) {
        let t3 = [];
        for (let r2 of n2.textChunks) {
          let n3 = e2.termFrequencies(r2);
          for (let e3 of n3.keys()) this.chunkOccurrences.set(e3, (this.chunkOccurrences.get(e3) ?? 0) + 1);
          t3.push({
            text: r2,
            tf: n3
          });
        }
        this.chunkCount += t3.length, this.documents.set(n2.key, {
          chunks: t3
        });
      }
      return this;
    }
    deleteDocument(e3) {
      let t2 = this.documents.get(e3);
      if (t2) {
        this.documents.delete(e3), this.chunkCount -= t2.chunks.length;
        for (let e4 of t2.chunks) for (let t3 of e4.tf.keys()) {
          let e5 = this.chunkOccurrences.get(t3);
          if (typeof e5 == `number`) {
            let n2 = e5 - 1;
            n2 <= 0 ? this.chunkOccurrences.delete(t3) : this.chunkOccurrences.set(t3, n2);
          }
        }
      }
    }
    computeSimilarityScore(e3, t2, n2) {
      let r2 = 0;
      for (let [i2, a2] of Object.entries(t2)) {
        let t3 = e3.tf.get(i2);
        if (!t3) continue;
        let o2 = n2.get(i2);
        typeof o2 != `number` && (o2 = this.computeIdf(i2), n2.set(i2, o2));
        let s2 = t3 * o2;
        r2 += s2 * a2;
      }
      return r2;
    }
    computeEmbedding(t2) {
      let n2 = e2.termFrequencies(t2);
      return this.computeTfidf(n2);
    }
    computeIdf(e3) {
      let t2 = this.chunkOccurrences.get(e3) ?? 0;
      return t2 > 0 ? Math.log((this.chunkCount + 1) / t2) : 0;
    }
    computeTfidf(e3) {
      let t2 = /* @__PURE__ */ Object.create(null);
      for (let [n2, r2] of e3) {
        let e4 = this.computeIdf(n2);
        e4 > 0 && (t2[n2] = r2 * e4);
      }
      return t2;
    }
  };
  function AI(e2) {
    var _a3;
    let t2 = e2.slice(0);
    t2.sort((e3, t3) => t3.score - e3.score);
    let n2 = ((_a3 = t2[0]) == null ? void 0 : _a3.score) ?? 0;
    if (n2 > 0) for (let e3 of t2) e3.score /= n2;
    return t2;
  }
  var jI;
  (function(e2) {
    e2[e2.NO_ACTION = 0] = `NO_ACTION`, e2[e2.CLOSE_PICKER = 1] = `CLOSE_PICKER`, e2[e2.REFRESH_PICKER = 2] = `REFRESH_PICKER`, e2[e2.REMOVE_ITEM = 3] = `REMOVE_ITEM`;
  })(jI || (jI = {}));
  function MI(e2) {
    let t2 = e2;
    return Array.isArray(t2.items);
  }
  function NI(e2) {
    let t2 = e2;
    return !!t2.picks && t2.additionalPicks instanceof Promise;
  }
  var PI = class extends S {
    constructor(e2, t2) {
      super(), this.prefix = e2, this.options = t2;
    }
    provide(e2, t2, n2) {
      var _a3;
      let r2 = new C();
      e2.canAcceptInBackground = !!((_a3 = this.options) == null ? void 0 : _a3.canAcceptInBackground), e2.matchOnLabel = e2.matchOnDescription = e2.matchOnDetail = e2.sortByLabel = false;
      let i2, a2 = r2.add(new Bn()), o2 = async () => {
        var _a4;
        let r3 = a2.value = new C();
        i2 == null ? void 0 : i2.dispose(true), e2.busy = false, i2 = new g(t2);
        let o3 = i2.token, s3 = e2.value.substring(this.prefix.length);
        ((_a4 = this.options) == null ? void 0 : _a4.shouldSkipTrimPickFilter) || (s3 = s3.trim());
        let c2 = this._getPicks(s3, r3, o3, n2), l2 = (t3, n3) => {
          var _a5;
          let r4, i3;
          if (MI(t3) ? (r4 = t3.items, i3 = t3.active) : r4 = t3, r4.length === 0) {
            if (n3) return false;
            (s3.length > 0 || e2.hideInput) && ((_a5 = this.options) == null ? void 0 : _a5.noResultsPick) && (r4 = Ps(this.options.noResultsPick) ? [
              this.options.noResultsPick(s3)
            ] : [
              this.options.noResultsPick
            ]);
          }
          return e2.items = r4, i3 && (e2.activeItems = [
            i3
          ]), true;
        }, u2 = async (t3) => {
          let n3 = false, r4 = false;
          await Promise.all([
            (async () => {
              typeof t3.mergeDelay == `number` && (await Bl(t3.mergeDelay), o3.isCancellationRequested) || r4 || (n3 = l2(t3.picks, true));
            })(),
            (async () => {
              e2.busy = true;
              try {
                let r5 = await t3.additionalPicks;
                if (o3.isCancellationRequested) return;
                let i3, a3;
                MI(t3.picks) ? (i3 = t3.picks.items, a3 = t3.picks.active) : i3 = t3.picks;
                let s4, c3;
                if (MI(r5) ? (s4 = r5.items, c3 = r5.active) : s4 = r5, s4.length > 0 || !n3) {
                  let t4;
                  if (!a3 && !c3) {
                    let n4 = e2.activeItems[0];
                    n4 && i3.indexOf(n4) !== -1 && (t4 = n4);
                  }
                  l2({
                    items: [
                      ...i3,
                      ...s4
                    ],
                    active: a3 || c3 || t4
                  });
                }
              } finally {
                o3.isCancellationRequested || (e2.busy = false), r4 = true;
              }
            })()
          ]);
        };
        if (c2 !== null) if (NI(c2)) await u2(c2);
        else if (!(c2 instanceof Promise)) l2(c2);
        else {
          e2.busy = true;
          try {
            let e3 = await c2;
            if (o3.isCancellationRequested) return;
            NI(e3) ? await u2(e3) : l2(e3);
          } finally {
            o3.isCancellationRequested || (e2.busy = false);
          }
        }
      };
      r2.add(e2.onDidChangeValue(() => o2())), o2(), r2.add(e2.onDidAccept((t3) => {
        var _a4;
        if (n2 == null ? void 0 : n2.handleAccept) {
          t3.inBackground || e2.hide(), (_a4 = n2.handleAccept) == null ? void 0 : _a4.call(n2, e2.activeItems[0]);
          return;
        }
        let [r3] = e2.selectedItems;
        typeof (r3 == null ? void 0 : r3.accept) == `function` && (t3.inBackground || e2.hide(), r3.accept(e2.keyMods, t3));
      }));
      let s2 = async (n3, r3) => {
        var _a4;
        if (typeof r3.trigger != `function`) return;
        let i3 = ((_a4 = r3.buttons) == null ? void 0 : _a4.indexOf(n3)) ?? -1;
        if (i3 >= 0) {
          let n4 = r3.trigger(i3, e2.keyMods), a3 = typeof n4 == `number` ? n4 : await n4;
          if (t2.isCancellationRequested) return;
          switch (a3) {
            case jI.NO_ACTION:
              break;
            case jI.CLOSE_PICKER:
              e2.hide();
              break;
            case jI.REFRESH_PICKER:
              o2();
              break;
            case jI.REMOVE_ITEM: {
              let t3 = e2.items.indexOf(r3);
              if (t3 !== -1) {
                let n5 = e2.items.slice(), r4 = n5.splice(t3, 1), i4 = e2.activeItems.filter((e3) => e3 !== r4[0]), a4 = e2.keepScrollPosition;
                e2.keepScrollPosition = true, e2.items = n5, i4 && (e2.activeItems = i4), e2.keepScrollPosition = a4;
              }
              break;
            }
          }
        }
      };
      return r2.add(e2.onDidTriggerItemButton(({ button: e3, item: t3 }) => s2(e3, t3))), r2.add(e2.onDidTriggerSeparatorButton(({ button: e3, separator: t3 }) => s2(e3, t3))), r2;
    }
  }, FI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, II = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  }, LI, RI;
  let zI = (_Jb = class extends PI {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(LI.PREFIX, e2), this.instantiationService = t2, this.keybindingService = n2, this.commandService = r2, this.telemetryService = i2, this.dialogService = a2, this.commandsHistory = this._register(this.instantiationService.createInstance(BI)), this.options = e2;
    }
    async _getPicks(e2, t2, n2, r2) {
      var _a3, _b3;
      let i2 = await this.getCommandPicks(n2);
      if (n2.isCancellationRequested) return [];
      let a2 = da(() => {
        let t3 = new kI();
        t3.updateDocuments(i2.map((e3) => ({
          key: e3.commandId,
          textChunks: [
            this.getTfIdfChunk(e3)
          ]
        })));
        let r3 = t3.calculateScores(e2, n2);
        return AI(r3).filter((e3) => e3.score > LI.TFIDF_THRESHOLD).slice(0, LI.TFIDF_MAX_RESULTS);
      }), o2 = [];
      for (let t3 of i2) {
        let r3 = LI.WORD_FILTER(e2, t3.label) ?? void 0, i3 = t3.commandAlias ? LI.WORD_FILTER(e2, t3.commandAlias) ?? void 0 : void 0;
        if (r3 || i3) t3.highlights = {
          label: r3,
          detail: this.options.showAlias ? i3 : void 0
        }, o2.push(t3);
        else if (e2 === t3.commandId) o2.push(t3);
        else if (e2.length >= 3) {
          let e3 = a2();
          if (n2.isCancellationRequested) return [];
          let r4 = e3.find((e4) => e4.key === t3.commandId);
          r4 && (t3.tfIdfScore = r4.score, o2.push(t3));
        }
      }
      let s2 = /* @__PURE__ */ new Map();
      for (let e3 of o2) {
        let t3 = s2.get(e3.label);
        t3 ? (e3.description = e3.commandId, t3.description = t3.commandId) : s2.set(e3.label, e3);
      }
      o2.sort((e3, t3) => {
        if (e3.tfIdfScore && t3.tfIdfScore) return e3.tfIdfScore === t3.tfIdfScore ? e3.label.localeCompare(t3.label) : t3.tfIdfScore - e3.tfIdfScore;
        if (e3.tfIdfScore) return 1;
        if (t3.tfIdfScore) return -1;
        let n3 = this.commandsHistory.peek(e3.commandId), r3 = this.commandsHistory.peek(t3.commandId);
        if (n3 && r3) return n3 > r3 ? -1 : 1;
        if (n3) return -1;
        if (r3) return 1;
        if (this.options.suggestedCommandIds) {
          let n4 = this.options.suggestedCommandIds.has(e3.commandId), r4 = this.options.suggestedCommandIds.has(t3.commandId);
          if (n4 && r4) return 0;
          if (n4) return -1;
          if (r4) return 1;
        }
        return e3.label.localeCompare(t3.label);
      });
      let c2 = [], l2 = false, u2 = true, d2 = !!this.options.suggestedCommandIds;
      for (let e3 = 0; e3 < o2.length; e3++) {
        let t3 = o2[e3];
        e3 === 0 && this.commandsHistory.peek(t3.commandId) && (c2.push({
          type: `separator`,
          label: U(`recentlyUsed`, `recently used`)
        }), l2 = true), u2 && t3.tfIdfScore !== void 0 && (c2.push({
          type: `separator`,
          label: U(`suggested`, `similar commands`)
        }), u2 = false), d2 && t3.tfIdfScore === void 0 && !this.commandsHistory.peek(t3.commandId) && ((_a3 = this.options.suggestedCommandIds) == null ? void 0 : _a3.has(t3.commandId)) && (c2.push({
          type: `separator`,
          label: U(`commonlyUsed`, `commonly used`)
        }), l2 = true, d2 = false), l2 && t3.tfIdfScore === void 0 && !this.commandsHistory.peek(t3.commandId) && !((_b3 = this.options.suggestedCommandIds) == null ? void 0 : _b3.has(t3.commandId)) && (c2.push({
          type: `separator`,
          label: U(`morecCommands`, `other commands`)
        }), l2 = false), c2.push(this.toCommandPick(t3, r2));
      }
      return this.hasAdditionalCommandPicks(e2, n2) ? {
        picks: c2,
        additionalPicks: (async () => {
          var _a4;
          let t3 = await this.getAdditionalCommandPicks(i2, o2, e2, n2);
          if (n2.isCancellationRequested) return [];
          let a3 = t3.map((e3) => this.toCommandPick(e3, r2));
          return u2 && ((_a4 = a3[0]) == null ? void 0 : _a4.type) !== `separator` && a3.unshift({
            type: `separator`,
            label: U(`suggested`, `similar commands`)
          }), a3;
        })()
      } : c2;
    }
    toCommandPick(e2, t2) {
      if (e2.type === `separator`) return e2;
      let n2 = this.keybindingService.lookupKeybinding(e2.commandId), r2 = n2 ? U(`commandPickAriaLabelWithKeybinding`, `{0}, {1}`, e2.label, n2.getAriaLabel()) : e2.label;
      return {
        ...e2,
        ariaLabel: r2,
        detail: this.options.showAlias && e2.commandAlias !== e2.label ? e2.commandAlias : void 0,
        keybinding: n2,
        accept: async () => {
          var _a3;
          this.commandsHistory.push(e2.commandId), this.telemetryService.publicLog2(`workbenchActionExecuted`, {
            id: e2.commandId,
            from: (t2 == null ? void 0 : t2.from) ?? `quick open`
          });
          try {
            ((_a3 = e2.args) == null ? void 0 : _a3.length) ? await this.commandService.executeCommand(e2.commandId, ...e2.args) : await this.commandService.executeCommand(e2.commandId);
          } catch (t3) {
            Ss(t3) || this.dialogService.error(U(`canNotRun`, `Command '{0}' resulted in an error`, e2.label), uf(t3));
          }
        }
      };
    }
    getTfIdfChunk({ label: e2, commandAlias: t2, commandDescription: n2 }) {
      let r2 = e2;
      return t2 && t2 !== e2 && (r2 += ` - ${t2}`), n2 && n2.value !== e2 && (r2 += ` - ${n2.value === n2.original ? n2.value : `${n2.value} (${n2.original})`}`), r2;
    }
  }, LI = _Jb, _Jb.PREFIX = `>`, _Jb.TFIDF_THRESHOLD = 0.5, _Jb.TFIDF_MAX_RESULTS = 5, _Jb.WORD_FILTER = Kc(wc, Oc, Cc), _Jb);
  zI = LI = FI([
    II(1, k),
    II(2, Ct),
    II(3, mt),
    II(4, Ht),
    II(5, _t)
  ], zI);
  let BI = (_Kb = class extends S {
    constructor(e2, t2, n2) {
      super(), this.storageService = e2, this.configurationService = t2, this.logService = n2, this.configuredCommandsHistoryLength = 0, this.updateConfiguration(), this.load(), this.registerListeners();
    }
    registerListeners() {
      this._register(this.configurationService.onDidChangeConfiguration((e2) => this.updateConfiguration(e2))), this._register(this.storageService.onWillSaveState((e2) => {
        e2.reason === ui.SHUTDOWN && this.saveState();
      }));
    }
    updateConfiguration(e2) {
      e2 && !e2.affectsConfiguration(`workbench.commandPalette.history`) || (this.configuredCommandsHistoryLength = RI.getConfiguredCommandHistoryLength(this.configurationService), RI.cache && RI.cache.limit !== this.configuredCommandsHistoryLength && (RI.cache.limit = this.configuredCommandsHistoryLength, RI.hasChanges = true));
    }
    load() {
      let e2 = this.storageService.get(RI.PREF_KEY_CACHE, 0), t2;
      if (e2) try {
        t2 = JSON.parse(e2);
      } catch (e3) {
        this.logService.error(`[CommandsHistory] invalid data: ${e3}`);
      }
      let n2 = RI.cache = new _n(this.configuredCommandsHistoryLength, 1);
      if (t2) {
        let e3;
        e3 = t2.usesLRU ? t2.entries : t2.entries.sort((e4, t3) => e4.value - t3.value), e3.forEach((e4) => n2.set(e4.key, e4.value));
      }
      RI.counter = this.storageService.getNumber(RI.PREF_KEY_COUNTER, 0, RI.counter);
    }
    push(e2) {
      RI.cache && (RI.cache.set(e2, RI.counter++), RI.hasChanges = true);
    }
    peek(e2) {
      var _a3;
      return (_a3 = RI.cache) == null ? void 0 : _a3.peek(e2);
    }
    saveState() {
      if (!RI.cache || !RI.hasChanges) return;
      let e2 = {
        usesLRU: true,
        entries: []
      };
      RI.cache.forEach((t2, n2) => e2.entries.push({
        key: n2,
        value: t2
      })), this.storageService.store(RI.PREF_KEY_CACHE, JSON.stringify(e2), 0, 0), this.storageService.store(RI.PREF_KEY_COUNTER, RI.counter, 0, 0), RI.hasChanges = false;
    }
    static getConfiguredCommandHistoryLength(e2) {
      var _a3, _b3;
      let t2 = e2.getValue(), n2 = (_b3 = (_a3 = t2.workbench) == null ? void 0 : _a3.commandPalette) == null ? void 0 : _b3.history;
      return typeof n2 == `number` ? n2 : RI.DEFAULT_COMMANDS_HISTORY_LENGTH;
    }
  }, RI = _Kb, _Kb.DEFAULT_COMMANDS_HISTORY_LENGTH = 50, _Kb.PREF_KEY_CACHE = `commandPalette.mru.cache`, _Kb.PREF_KEY_COUNTER = `commandPalette.mru.counter`, _Kb.counter = 1, _Kb.hasChanges = false, _Kb);
  BI = RI = FI([
    II(0, Vt),
    II(1, D),
    II(2, kt)
  ], BI);
  var VI = class extends zI {
    constructor(e2, t2, n2, r2, i2, a2) {
      super(e2, t2, n2, r2, i2, a2);
    }
    getCodeEditorCommandPicks() {
      var _a3;
      let e2 = this.activeTextEditorControl;
      if (!e2) return [];
      let t2 = [];
      for (let n2 of e2.getSupportedActions()) {
        let e3;
        ((_a3 = n2.metadata) == null ? void 0 : _a3.description) && (e3 = Us(n2.metadata.description) ? n2.metadata.description : {
          original: n2.metadata.description,
          value: n2.metadata.description
        }), t2.push({
          commandId: n2.id,
          commandAlias: n2.alias,
          commandDescription: e3,
          label: Pl(n2.label) || n2.id
        });
      }
      return t2;
    }
  }, HI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, UI = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let WI = class extends VI {
    get activeTextEditorControl() {
      return this.codeEditorService.getFocusedCodeEditor() ?? void 0;
    }
    constructor(e2, t2, n2, r2, i2, a2) {
      super({
        showAlias: false
      }, e2, n2, r2, i2, a2), this.codeEditorService = t2;
    }
    async getCommandPicks() {
      return this.getCodeEditorCommandPicks();
    }
    hasAdditionalCommandPicks() {
      return false;
    }
    async getAdditionalCommandPicks() {
      return [];
    }
  };
  WI = HI([
    UI(0, k),
    UI(1, pt),
    UI(2, Ct),
    UI(3, mt),
    UI(4, Ht),
    UI(5, _t)
  ], WI);
  var GI = (_Lb = class extends w {
    constructor() {
      super({
        id: _Lb.ID,
        label: tr.quickCommandActionLabel,
        alias: `Command Palette`,
        precondition: void 0,
        kbOpts: {
          kbExpr: T.focus,
          primary: 59,
          weight: 100
        },
        contextMenuOpts: {
          group: `z_commands`,
          order: 1
        }
      });
    }
    run(e2) {
      e2.get(Rt).quickAccess.show(WI.PREFIX);
    }
  }, _Lb.ID = `editor.action.quickCommand`, _Lb);
  J(GI), cr.as(Ue.Quickaccess).registerQuickAccessProvider({
    ctor: WI,
    prefix: WI.PREFIX,
    helpEntries: [
      {
        description: tr.quickCommandHelp,
        commandId: GI.ID
      }
    ]
  });
  var KI = function(e2, t2, n2, r2) {
    var i2 = arguments.length, a2 = i2 < 3 ? t2 : r2 === null ? r2 = Object.getOwnPropertyDescriptor(t2, n2) : r2, o2;
    if (typeof Reflect == `object` && typeof Reflect.decorate == `function`) a2 = Reflect.decorate(e2, t2, n2, r2);
    else for (var s2 = e2.length - 1; s2 >= 0; s2--) (o2 = e2[s2]) && (a2 = (i2 < 3 ? o2(a2) : i2 > 3 ? o2(t2, n2, a2) : o2(t2, n2)) || a2);
    return i2 > 3 && a2 && Object.defineProperty(t2, n2, a2), a2;
  }, qI = function(e2, t2) {
    return function(n2, r2) {
      t2(n2, r2, e2);
    };
  };
  let JI = class extends dv {
    constructor(e2, t2, n2, r2, i2, a2, o2) {
      super(true, e2, t2, n2, r2, i2, a2, o2);
    }
  };
  JI = KI([
    qI(1, O),
    qI(2, pt),
    qI(3, Ft),
    qI(4, k),
    qI(5, Vt),
    qI(6, D)
  ], JI), X(dv.ID, JI, 4);
  var YI = class extends w {
    constructor() {
      super({
        id: `editor.action.toggleHighContrast`,
        label: Xr.toggleHighContrast,
        alias: `Toggle High Contrast Theme`,
        precondition: void 0
      }), this._originalThemeName = null;
    }
    run(e2, t2) {
      let n2 = e2.get(Bt), r2 = n2.getColorTheme();
      Is(r2.type) ? (n2.setTheme(this._originalThemeName || (ws(r2.type) ? ai : oi)), this._originalThemeName = null) : (n2.setTheme(ws(r2.type) ? et : tt), this._originalThemeName = r2.themeName);
    }
  };
  J(YI);
  var XI = {};
  e(XI, {
    CancellationTokenSource: () => h,
    Emitter: () => Le,
    KeyCode: () => dn,
    KeyMod: () => mn,
    MarkerSeverity: () => On,
    MarkerTag: () => An,
    Position: () => Qn,
    Range: () => ar,
    Selection: () => xr,
    SelectionDirection: () => Sr,
    Token: () => Zr,
    Uri: () => ri,
    editor: () => Ba,
    languages: () => pc
  });
  var ZI = `` + new URL(`editor.worker-D5lhVTO_.min.js`, import.meta.url).href, QI = `` + new URL(`css.worker-Bs8TT17C.min.js`, import.meta.url).href, $I = `` + new URL(`ts.worker-BLMgxjU6.min.js`, import.meta.url).href;
  function eL(e2) {
    let t2 = `import ${JSON.stringify(new URL(e2, import.meta.url))}`, n2 = new Blob([
      t2
    ], {
      type: `application/javascript`
    }), r2 = URL.createObjectURL(n2);
    return r2;
  }
  function tL(e2, t2 = {}) {
    let n2 = eL(e2), r2 = new Worker(n2, {
      type: `module`,
      name: t2 == null ? void 0 : t2.name
    });
    return r2.addEventListener(`error`, (e3) => {
      URL.revokeObjectURL(n2);
    }), r2;
  }
  self.MonacoEnvironment = {
    async getWorker(e2, t2) {
      return tL(t2 === `css` || t2 === `scss` || t2 === `less` ? QI : t2 === `javascript` || t2 === `typescript` ? $I : ZI);
    }
  }, n.config({
    monaco: XI
  });
});
