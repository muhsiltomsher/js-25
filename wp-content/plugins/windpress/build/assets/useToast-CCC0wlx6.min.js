import { nextTick as e, ref as t } from "./runtime-core.esm-bundler-CFIgNHFT.min.js";
import { useState as n } from "./Link-83qDN5tY.min.js";
function r() {
  let r2 = n(`toasts`, () => []), i = 5, a = t(false), o = [], s = () => `${Date.now()}-${Math.random().toString(36).slice(2, 9)}`;
  async function c() {
    if (!(a.value || o.length === 0)) {
      for (a.value = true; o.length > 0; ) {
        let t2 = o.shift();
        await e(), r2.value = [...r2.value, t2].slice(-i);
      }
      a.value = false;
    }
  }
  function l(e2) {
    let t2 = { id: s(), open: true, ...e2 };
    return o.push(t2), c(), t2;
  }
  function u(e2, t2) {
    let n2 = r2.value.findIndex((t3) => t3.id === e2);
    n2 !== -1 && (r2.value[n2] = { ...r2.value[n2], ...t2 });
  }
  function d(e2) {
    let t2 = r2.value.findIndex((t3) => t3.id === e2);
    t2 !== -1 && (r2.value[t2] = { ...r2.value[t2], open: false }), setTimeout(() => {
      r2.value = r2.value.filter((t3) => t3.id !== e2);
    }, 200);
  }
  function f() {
    r2.value = [];
  }
  return { toasts: r2, add: l, update: u, remove: d, clear: f };
}
export {
  r as useToast
};
