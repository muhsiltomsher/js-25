const e = function() {
  let e2 = typeof document < `u` && document.createElement(`link`).relList;
  return e2 && e2.supports && e2.supports(`modulepreload`) ? `modulepreload` : `preload`;
}(), t = function(e2, t2) {
  return new URL(e2, t2).href;
}, n = {}, r = function(r2, i, a) {
  let o = Promise.resolve();
  if (i && i.length > 0) {
    let r3 = function(e2) {
      return Promise.all(e2.map((e3) => Promise.resolve(e3).then((e4) => ({ status: `fulfilled`, value: e4 }), (e4) => ({ status: `rejected`, reason: e4 }))));
    }, s2 = document.getElementsByTagName(`link`), c = document.querySelector(`meta[property=csp-nonce]`), l = (c == null ? void 0 : c.nonce) || (c == null ? void 0 : c.getAttribute(`nonce`));
    o = r3(i.map((r4) => {
      if (r4 = t(r4, a), r4 in n) return;
      n[r4] = true;
      let i2 = r4.endsWith(`.css`), o2 = i2 ? `[rel="stylesheet"]` : ``, c2 = !!a;
      if (c2) for (let e2 = s2.length - 1; e2 >= 0; e2--) {
        let t2 = s2[e2];
        if (t2.href === r4 && (!i2 || t2.rel === `stylesheet`)) return;
      }
      else if (document.querySelector(`link[href="${r4}"]${o2}`)) return;
      let u = document.createElement(`link`);
      if (u.rel = i2 ? `stylesheet` : e, i2 || (u.as = `script`), u.crossOrigin = ``, u.href = r4, l && u.setAttribute(`nonce`, l), document.head.appendChild(u), i2) return new Promise((e2, t2) => {
        u.addEventListener(`load`, e2), u.addEventListener(`error`, () => t2(Error(`Unable to preload CSS for ${r4}`)));
      });
    }));
  }
  function s(e2) {
    let t2 = new Event(`vite:preloadError`, { cancelable: true });
    if (t2.payload = e2, window.dispatchEvent(t2), !t2.defaultPrevented) throw e2;
  }
  return o.then((e2) => {
    for (let t2 of e2 || []) {
      if (t2.status !== `rejected`) continue;
      s(t2.reason);
    }
    return r2().catch(s);
  });
};
export {
  r as __vitePreload
};
